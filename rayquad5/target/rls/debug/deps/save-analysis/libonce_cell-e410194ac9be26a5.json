{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","once_cell","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=e410194ac9be26a5","-C","extra-filename=-e410194ac9be26a5","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libonce_cell-e410194ac9be26a5.rmeta"},"prelude":{"crate_id":{"name":"once_cell","disambiguator":[2959241209433698144,5523351061315683951]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":0,"byte_end":31905,"line_start":1,"line_end":996,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":0,"byte_end":31905,"line_start":1,"line_end":996,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":55},{"krate":0,"index":141}],"decl_id":null,"docs":"# Overview","sig":null,"attributes":[{"value":"!\n# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`\nmight store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access\nto the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.\nBecause of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`\nor `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Patterns\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of global data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy initialized global data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during initialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Building block\n\nNaturally, it is  possible to build other abstractions on top of `OnceCell`.\nFor example, this is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop iteration\" problem.\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls\nitself. However, because the assignment can happen only once, such cases should be more rare than\nequivalents with `RefCell` and `Mutex`.\n\n# Minimum Supported `rustc` Version\n\nThis crate's minimum supported `rustc` version is `1.31.1` (or `1.36.0` with the\n`parking_lot` feature enabled).\n\nIf only the `std` feature is enabled, MSRV will be updated conservatively.\nWhen using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.\nIn both cases, increasing MSRV is *not* considered a semver-breaking change.\n\n# Implementation details\n\nThe implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)\nand [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,\n`once_cell` just streamlines and unifies those APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom re-implementation of\n`std::sync::Once` or `parking_lot::Mutex`. This is controlled by the `parking_lot` feature, which\nis enabled by default. Performance is the same for both cases, but the `parking_lot` based `OnceCell<T>`\nis smaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use lazy_static or once_cell?**\n\nTo the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`\nand should be preferred.\n\nUnlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with\n`#![no_std]`.\n\n`lazy_static` has received significantly more real world testing, but `once_cell` is also a widely\nused crate.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where\n`sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy\nto switch between the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which\nmight be easier to debug than a deadlock.\n\n# Related crates\n\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n\n*/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":0,"byte_end":7706,"line_start":1,"line_end":232,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":7942,"byte_end":7948,"line_start":246,"line_end":246,"column_start":9,"column_end":15},"name":"unsync","qualname":"::unsync","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":107},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":123},{"krate":0,"index":128},{"krate":0,"index":133},{"krate":0,"index":138}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":68},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8804,"byte_end":8812,"line_start":276,"line_end":276,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::unsync::OnceCell","value":"OnceCell {  }","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" A cell which can be written to only once. It is not thread safe.","sig":null,"attributes":[{"value":"/ A cell which can be written to only once. It is not thread safe.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8141,"byte_end":8209,"line_start":256,"line_end":256,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8214,"byte_end":8217,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Unlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8222,"byte_end":8289,"line_start":258,"line_end":258,"column_start":5,"column_end":72}},{"value":"/ references to the contents.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8294,"byte_end":8325,"line_start":259,"line_end":259,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8330,"byte_end":8333,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ [`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8338,"byte_end":8420,"line_start":261,"line_end":261,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8425,"byte_end":8428,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8433,"byte_end":8446,"line_start":263,"line_end":263,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8451,"byte_end":8458,"line_start":264,"line_end":264,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8463,"byte_end":8499,"line_start":265,"line_end":265,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8504,"byte_end":8507,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8512,"byte_end":8543,"line_start":267,"line_end":267,"column_start":5,"column_end":36}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8548,"byte_end":8582,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8587,"byte_end":8590,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ let value: &String = cell.get_or_init(|| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8595,"byte_end":8641,"line_start":270,"line_end":270,"column_start":5,"column_end":51}},{"value":"/     \"Hello, World!\".to_string()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8646,"byte_end":8681,"line_start":271,"line_end":271,"column_start":5,"column_end":40}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8686,"byte_end":8693,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8698,"byte_end":8737,"line_start":273,"line_end":273,"column_start":5,"column_end":44}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8742,"byte_end":8776,"line_start":274,"line_end":274,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":8781,"byte_end":8788,"line_start":275,"line_end":275,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10522,"byte_end":10525,"line_start":334,"line_end":334,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"fn () -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10471,"byte_end":10500,"line_start":333,"line_end":333,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10740,"byte_end":10743,"line_start":341,"line_end":341,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10618,"byte_end":10663,"line_start":338,"line_end":338,"column_start":9,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10672,"byte_end":10675,"line_start":339,"line_end":339,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10684,"byte_end":10724,"line_start":340,"line_end":340,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11014,"byte_end":11021,"line_start":349,"line_end":349,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10884,"byte_end":10937,"line_start":346,"line_end":346,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10946,"byte_end":10949,"line_start":347,"line_end":347,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10958,"byte_end":10998,"line_start":348,"line_end":348,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11713,"byte_end":11716,"line_start":371,"line_end":371,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn (&self, value: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11177,"byte_end":11223,"line_start":354,"line_end":354,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11232,"byte_end":11235,"line_start":355,"line_end":355,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11244,"byte_end":11313,"line_start":356,"line_end":356,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11322,"byte_end":11331,"line_start":357,"line_end":357,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11340,"byte_end":11343,"line_start":358,"line_end":358,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11352,"byte_end":11365,"line_start":359,"line_end":359,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11374,"byte_end":11381,"line_start":360,"line_end":360,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11390,"byte_end":11426,"line_start":361,"line_end":361,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11435,"byte_end":11438,"line_start":362,"line_end":362,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11447,"byte_end":11478,"line_start":363,"line_end":363,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11487,"byte_end":11521,"line_start":364,"line_end":364,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11530,"byte_end":11533,"line_start":365,"line_end":365,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.set(92), Ok(()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11542,"byte_end":11579,"line_start":366,"line_end":366,"column_start":9,"column_end":46}},{"value":"/ assert_eq!(cell.set(62), Err(62));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11588,"byte_end":11626,"line_start":367,"line_end":367,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11635,"byte_end":11638,"line_start":368,"line_end":368,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11647,"byte_end":11681,"line_start":369,"line_end":369,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":11690,"byte_end":11697,"line_start":370,"line_end":370,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13013,"byte_end":13024,"line_start":406,"line_end":406,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn <F> (&self, f: F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f`\n if the cell was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12274,"byte_end":12333,"line_start":385,"line_end":385,"column_start":9,"column_end":68}},{"value":"/ if the cell was empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12342,"byte_end":12368,"line_start":386,"line_end":386,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12377,"byte_end":12380,"line_start":387,"line_end":387,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12389,"byte_end":12401,"line_start":388,"line_end":388,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12410,"byte_end":12413,"line_start":389,"line_end":389,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12422,"byte_end":12492,"line_start":390,"line_end":390,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12501,"byte_end":12527,"line_start":391,"line_end":391,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12536,"byte_end":12539,"line_start":392,"line_end":392,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12548,"byte_end":12617,"line_start":393,"line_end":393,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12626,"byte_end":12652,"line_start":394,"line_end":394,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12661,"byte_end":12664,"line_start":395,"line_end":395,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12673,"byte_end":12686,"line_start":396,"line_end":396,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12695,"byte_end":12702,"line_start":397,"line_end":397,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12711,"byte_end":12747,"line_start":398,"line_end":398,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12756,"byte_end":12759,"line_start":399,"line_end":399,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12768,"byte_end":12799,"line_start":400,"line_end":400,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12808,"byte_end":12848,"line_start":401,"line_end":401,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12857,"byte_end":12884,"line_start":402,"line_end":402,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12893,"byte_end":12945,"line_start":403,"line_end":403,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12954,"byte_end":12981,"line_start":404,"line_end":404,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":12990,"byte_end":12997,"line_start":405,"line_end":405,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14232,"byte_end":14247,"line_start":442,"line_end":442,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn <F, E> (&self, f: F) -> Result<&T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13299,"byte_end":13361,"line_start":417,"line_end":417,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13370,"byte_end":13434,"line_start":418,"line_end":418,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13443,"byte_end":13465,"line_start":419,"line_end":419,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13474,"byte_end":13477,"line_start":420,"line_end":420,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13486,"byte_end":13498,"line_start":421,"line_end":421,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13507,"byte_end":13510,"line_start":422,"line_end":422,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13519,"byte_end":13589,"line_start":423,"line_end":423,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13598,"byte_end":13624,"line_start":424,"line_end":424,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13633,"byte_end":13636,"line_start":425,"line_end":425,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13645,"byte_end":13714,"line_start":426,"line_end":426,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13723,"byte_end":13749,"line_start":427,"line_end":427,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13758,"byte_end":13761,"line_start":428,"line_end":428,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13770,"byte_end":13783,"line_start":429,"line_end":429,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13792,"byte_end":13799,"line_start":430,"line_end":430,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13808,"byte_end":13844,"line_start":431,"line_end":431,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13853,"byte_end":13856,"line_start":432,"line_end":432,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13865,"byte_end":13896,"line_start":433,"line_end":433,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13905,"byte_end":13963,"line_start":434,"line_end":434,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":13972,"byte_end":14006,"line_start":435,"line_end":435,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14015,"byte_end":14075,"line_start":436,"line_end":436,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14084,"byte_end":14098,"line_start":437,"line_end":437,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14107,"byte_end":14114,"line_start":438,"line_end":438,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14123,"byte_end":14154,"line_start":439,"line_end":439,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14163,"byte_end":14200,"line_start":440,"line_end":440,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14209,"byte_end":14216,"line_start":441,"line_end":441,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15553,"byte_end":15557,"line_start":475,"line_end":475,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14897,"byte_end":14982,"line_start":458,"line_end":458,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":14991,"byte_end":14994,"line_start":459,"line_end":459,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15003,"byte_end":15082,"line_start":460,"line_end":460,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15091,"byte_end":15094,"line_start":461,"line_end":461,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15103,"byte_end":15117,"line_start":462,"line_end":462,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15126,"byte_end":15129,"line_start":463,"line_end":463,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15138,"byte_end":15145,"line_start":464,"line_end":464,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15154,"byte_end":15190,"line_start":465,"line_end":465,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15199,"byte_end":15202,"line_start":466,"line_end":466,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15211,"byte_end":15264,"line_start":467,"line_end":467,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15273,"byte_end":15307,"line_start":468,"line_end":468,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15316,"byte_end":15319,"line_start":469,"line_end":469,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15328,"byte_end":15363,"line_start":470,"line_end":470,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15372,"byte_end":15415,"line_start":471,"line_end":471,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15424,"byte_end":15479,"line_start":472,"line_end":472,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15488,"byte_end":15521,"line_start":473,"line_end":473,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15530,"byte_end":15537,"line_start":474,"line_end":474,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16216,"byte_end":16226,"line_start":495,"line_end":495,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15664,"byte_end":15721,"line_start":479,"line_end":479,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15730,"byte_end":15733,"line_start":480,"line_end":480,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell was empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15742,"byte_end":15783,"line_start":481,"line_end":481,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15792,"byte_end":15795,"line_start":482,"line_end":482,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15804,"byte_end":15818,"line_start":483,"line_end":483,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15827,"byte_end":15830,"line_start":484,"line_end":484,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15839,"byte_end":15846,"line_start":485,"line_end":485,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15855,"byte_end":15891,"line_start":486,"line_end":486,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15900,"byte_end":15903,"line_start":487,"line_end":487,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15912,"byte_end":15961,"line_start":488,"line_end":488,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":15970,"byte_end":16010,"line_start":489,"line_end":489,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16019,"byte_end":16022,"line_start":490,"line_end":490,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16031,"byte_end":16062,"line_start":491,"line_end":491,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16071,"byte_end":16114,"line_start":492,"line_end":492,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16123,"byte_end":16184,"line_start":493,"line_end":493,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16193,"byte_end":16200,"line_start":494,"line_end":494,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16953,"byte_end":16957,"line_start":522,"line_end":522,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::unsync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16486,"byte_end":16539,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16544,"byte_end":16547,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16552,"byte_end":16565,"line_start":504,"line_end":504,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16570,"byte_end":16577,"line_start":505,"line_end":505,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16582,"byte_end":16614,"line_start":506,"line_end":506,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16619,"byte_end":16622,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ let lazy: Lazy<i32> = Lazy::new(|| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16627,"byte_end":16667,"line_start":508,"line_end":508,"column_start":5,"column_end":45}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16672,"byte_end":16705,"line_start":509,"line_end":509,"column_start":5,"column_end":38}},{"value":"/     92","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16710,"byte_end":16720,"line_start":510,"line_end":510,"column_start":5,"column_end":15}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16725,"byte_end":16732,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ println!(\"ready\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16737,"byte_end":16759,"line_start":512,"line_end":512,"column_start":5,"column_end":27}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16764,"byte_end":16790,"line_start":513,"line_end":513,"column_start":5,"column_end":31}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16795,"byte_end":16821,"line_start":514,"line_end":514,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16826,"byte_end":16829,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ // Prints:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16834,"byte_end":16848,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/ //   ready","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16853,"byte_end":16867,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/ //   initializing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16872,"byte_end":16893,"line_start":518,"line_end":518,"column_start":5,"column_end":26}},{"value":"/ //   92","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16898,"byte_end":16909,"line_start":519,"line_end":519,"column_start":5,"column_end":16}},{"value":"/ //   92","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16914,"byte_end":16925,"line_start":520,"line_end":520,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":16930,"byte_end":16937,"line_start":521,"line_end":521,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17863,"byte_end":17866,"line_start":551,"line_end":551,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"fn (init: F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing function.","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17429,"byte_end":17495,"line_start":537,"line_end":537,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17504,"byte_end":17507,"line_start":538,"line_end":538,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17516,"byte_end":17529,"line_start":539,"line_end":539,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17538,"byte_end":17545,"line_start":540,"line_end":540,"column_start":9,"column_end":16}},{"value":"/ # fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17554,"byte_end":17571,"line_start":541,"line_end":541,"column_start":9,"column_end":26}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17580,"byte_end":17612,"line_start":542,"line_end":542,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17621,"byte_end":17624,"line_start":543,"line_end":543,"column_start":9,"column_end":12}},{"value":"/ let hello = \"Hello, World!\".to_string();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17633,"byte_end":17677,"line_start":544,"line_end":544,"column_start":9,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17686,"byte_end":17689,"line_start":545,"line_end":545,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| hello.to_uppercase());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17698,"byte_end":17748,"line_start":546,"line_end":546,"column_start":9,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17757,"byte_end":17760,"line_start":547,"line_end":547,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(&*lazy, \"HELLO, WORLD!\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17769,"byte_end":17809,"line_start":548,"line_end":548,"column_start":9,"column_end":49}},{"value":"/ # }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17818,"byte_end":17825,"line_start":549,"line_end":549,"column_start":9,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17834,"byte_end":17841,"line_start":550,"line_end":550,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18482,"byte_end":18487,"line_start":571,"line_end":571,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn (this: &Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a reference to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18032,"byte_end":18103,"line_start":557,"line_end":557,"column_start":9,"column_end":80}},{"value":"/ the result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18112,"byte_end":18127,"line_start":558,"line_end":558,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18136,"byte_end":18139,"line_start":559,"line_end":559,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `Deref` impl, but is explicit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18148,"byte_end":18208,"line_start":560,"line_end":560,"column_start":9,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18217,"byte_end":18220,"line_start":561,"line_end":561,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18229,"byte_end":18242,"line_start":562,"line_end":562,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18251,"byte_end":18258,"line_start":563,"line_end":563,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18267,"byte_end":18299,"line_start":564,"line_end":564,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18308,"byte_end":18311,"line_start":565,"line_end":565,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18320,"byte_end":18352,"line_start":566,"line_end":566,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18361,"byte_end":18364,"line_start":567,"line_end":567,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18373,"byte_end":18413,"line_start":568,"line_end":568,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18422,"byte_end":18450,"line_start":569,"line_end":569,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18459,"byte_end":18466,"line_start":570,"line_end":570,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19335,"byte_end":19339,"line_start":602,"line_end":602,"column_start":9,"column_end":13},"name":"sync","qualname":"::sync","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":190},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":214},{"krate":0,"index":219},{"krate":0,"index":224},{"krate":0,"index":227}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19303,"byte_end":19326,"line_start":601,"line_end":601,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20579,"byte_end":20587,"line_start":640,"line_end":640,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::sync::OnceCell","value":"","parent":null,"children":[],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19507,"byte_end":19564,"line_start":612,"line_end":612,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19569,"byte_end":19572,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ `OnceCell` provides `&` references to the contents without RAII guards.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19577,"byte_end":19652,"line_start":614,"line_end":614,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19657,"byte_end":19660,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ Reading a non-`None` value out of `OnceCell` establishes a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19665,"byte_end":19727,"line_start":616,"line_end":616,"column_start":5,"column_end":67}},{"value":"/ happens-before relationship with a corresponding write. For example, if","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19732,"byte_end":19807,"line_start":617,"line_end":617,"column_start":5,"column_end":80}},{"value":"/ thread A initializes the cell with `get_or_init(f)`, and thread B","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19812,"byte_end":19881,"line_start":618,"line_end":618,"column_start":5,"column_end":74}},{"value":"/ subsequently reads the result of this call, B also observes all the side","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19886,"byte_end":19962,"line_start":619,"line_end":619,"column_start":5,"column_end":81}},{"value":"/ effects of `f`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19967,"byte_end":19986,"line_start":620,"line_end":620,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19991,"byte_end":19994,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19999,"byte_end":20012,"line_start":622,"line_end":622,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20017,"byte_end":20024,"line_start":623,"line_end":623,"column_start":5,"column_end":12}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20029,"byte_end":20063,"line_start":624,"line_end":624,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20068,"byte_end":20071,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ static CELL: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20076,"byte_end":20128,"line_start":626,"line_end":626,"column_start":5,"column_end":57}},{"value":"/ assert!(CELL.get().is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20133,"byte_end":20167,"line_start":627,"line_end":627,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20172,"byte_end":20175,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ std::thread::spawn(|| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20180,"byte_end":20207,"line_start":629,"line_end":629,"column_start":5,"column_end":32}},{"value":"/     let value: &String = CELL.get_or_init(|| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20212,"byte_end":20262,"line_start":630,"line_end":630,"column_start":5,"column_end":55}},{"value":"/         \"Hello, World!\".to_string()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20267,"byte_end":20306,"line_start":631,"line_end":631,"column_start":5,"column_end":44}},{"value":"/     });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20311,"byte_end":20322,"line_start":632,"line_end":632,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20327,"byte_end":20370,"line_start":633,"line_end":633,"column_start":5,"column_end":48}},{"value":"/ }).join().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20375,"byte_end":20398,"line_start":634,"line_end":634,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20403,"byte_end":20406,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ let value: Option<&String> = CELL.get();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20411,"byte_end":20455,"line_start":636,"line_end":636,"column_start":5,"column_end":49}},{"value":"/ assert!(value.is_some());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20460,"byte_end":20489,"line_start":637,"line_end":637,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(value.unwrap().as_str(), \"Hello, World!\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20494,"byte_end":20551,"line_start":638,"line_end":638,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20556,"byte_end":20563,"line_start":639,"line_end":639,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21856,"byte_end":21859,"line_start":688,"line_end":688,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"fn () -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21805,"byte_end":21834,"line_start":687,"line_end":687,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22115,"byte_end":22118,"line_start":696,"line_end":696,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21931,"byte_end":21978,"line_start":692,"line_end":692,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21987,"byte_end":21990,"line_start":693,"line_end":693,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty, or being initialized. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21999,"byte_end":22066,"line_start":694,"line_end":694,"column_start":9,"column_end":76}},{"value":"/ method never blocks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22075,"byte_end":22099,"line_start":695,"line_end":695,"column_start":9,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22494,"byte_end":22501,"line_start":708,"line_end":708,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the underlying value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22362,"byte_end":22417,"line_start":705,"line_end":705,"column_start":9,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22426,"byte_end":22429,"line_start":706,"line_end":706,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22438,"byte_end":22478,"line_start":707,"line_end":707,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22903,"byte_end":22916,"line_start":719,"line_end":719,"column_start":23,"column_end":36},"name":"get_unchecked","qualname":"<OnceCell<T>>::get_unchecked","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get the reference to the underlying value, without checking if the\n cell is initialized.","sig":null,"attributes":[{"value":"/ Get the reference to the underlying value, without checking if the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22581,"byte_end":22651,"line_start":712,"line_end":712,"column_start":9,"column_end":79}},{"value":"/ cell is initialized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22660,"byte_end":22684,"line_start":713,"line_end":713,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22693,"byte_end":22696,"line_start":714,"line_end":714,"column_start":9,"column_end":12}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22705,"byte_end":22717,"line_start":715,"line_end":715,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22726,"byte_end":22729,"line_start":716,"line_end":716,"column_start":9,"column_end":12}},{"value":"/ Caller must ensure that the cell is in initialized state, and that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22738,"byte_end":22808,"line_start":717,"line_end":717,"column_start":9,"column_end":79}},{"value":"/ the contents are acquired by (synchronized to) this thread.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22817,"byte_end":22880,"line_start":718,"line_end":718,"column_start":9,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23700,"byte_end":23703,"line_start":746,"line_end":746,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn (&self, value: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":22986,"byte_end":23032,"line_start":723,"line_end":723,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23041,"byte_end":23044,"line_start":724,"line_end":724,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23053,"byte_end":23122,"line_start":725,"line_end":725,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23131,"byte_end":23140,"line_start":726,"line_end":726,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23149,"byte_end":23152,"line_start":727,"line_end":727,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23161,"byte_end":23174,"line_start":728,"line_end":728,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23183,"byte_end":23186,"line_start":729,"line_end":729,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23195,"byte_end":23202,"line_start":730,"line_end":730,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23211,"byte_end":23245,"line_start":731,"line_end":731,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23254,"byte_end":23257,"line_start":732,"line_end":732,"column_start":9,"column_end":12}},{"value":"/ static CELL: OnceCell<i32> = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23266,"byte_end":23315,"line_start":733,"line_end":733,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23324,"byte_end":23327,"line_start":734,"line_end":734,"column_start":9,"column_end":12}},{"value":"/ fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23336,"byte_end":23351,"line_start":735,"line_end":735,"column_start":9,"column_end":24}},{"value":"/     assert!(CELL.get().is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23360,"byte_end":23398,"line_start":736,"line_end":736,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23407,"byte_end":23410,"line_start":737,"line_end":737,"column_start":9,"column_end":12}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23419,"byte_end":23450,"line_start":738,"line_end":738,"column_start":9,"column_end":40}},{"value":"/         assert_eq!(CELL.set(92), Ok(()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23459,"byte_end":23504,"line_start":739,"line_end":739,"column_start":9,"column_end":54}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23513,"byte_end":23540,"line_start":740,"line_end":740,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23549,"byte_end":23552,"line_start":741,"line_end":741,"column_start":9,"column_end":12}},{"value":"/     assert_eq!(CELL.set(62), Err(62));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23561,"byte_end":23603,"line_start":742,"line_end":742,"column_start":9,"column_end":51}},{"value":"/     assert_eq!(CELL.get(), Some(&92));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23612,"byte_end":23654,"line_start":743,"line_end":743,"column_start":9,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23663,"byte_end":23668,"line_start":744,"line_end":744,"column_start":9,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23677,"byte_end":23684,"line_start":745,"line_end":745,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25007,"byte_end":25018,"line_start":781,"line_end":781,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn <F> (&self, f: F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell\n was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":23971,"byte_end":24042,"line_start":755,"line_end":755,"column_start":9,"column_end":80}},{"value":"/ was empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24051,"byte_end":24065,"line_start":756,"line_end":756,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24074,"byte_end":24077,"line_start":757,"line_end":757,"column_start":9,"column_end":12}},{"value":"/ Many threads may call `get_or_init` concurrently with different","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24086,"byte_end":24153,"line_start":758,"line_end":758,"column_start":9,"column_end":76}},{"value":"/ initializing functions, but it is guaranteed that only one function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24162,"byte_end":24233,"line_start":759,"line_end":759,"column_start":9,"column_end":80}},{"value":"/ will be executed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24242,"byte_end":24263,"line_start":760,"line_end":760,"column_start":9,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24272,"byte_end":24275,"line_start":761,"line_end":761,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24284,"byte_end":24296,"line_start":762,"line_end":762,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24305,"byte_end":24308,"line_start":763,"line_end":763,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24317,"byte_end":24387,"line_start":764,"line_end":764,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24396,"byte_end":24422,"line_start":765,"line_end":765,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24431,"byte_end":24434,"line_start":766,"line_end":766,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. The","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24443,"byte_end":24510,"line_start":767,"line_end":767,"column_start":9,"column_end":76}},{"value":"/ exact outcome is unspecified. Current implementation deadlocks, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24519,"byte_end":24590,"line_start":768,"line_end":768,"column_start":9,"column_end":80}},{"value":"/ this may be changed to a panic in the future.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24599,"byte_end":24648,"line_start":769,"line_end":769,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24657,"byte_end":24660,"line_start":770,"line_end":770,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24669,"byte_end":24682,"line_start":771,"line_end":771,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24691,"byte_end":24698,"line_start":772,"line_end":772,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24707,"byte_end":24741,"line_start":773,"line_end":773,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24750,"byte_end":24753,"line_start":774,"line_end":774,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24762,"byte_end":24793,"line_start":775,"line_end":775,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24802,"byte_end":24842,"line_start":776,"line_end":776,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24851,"byte_end":24878,"line_start":777,"line_end":777,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24887,"byte_end":24939,"line_start":778,"line_end":778,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24948,"byte_end":24975,"line_start":779,"line_end":779,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":24984,"byte_end":24991,"line_start":780,"line_end":780,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26325,"byte_end":26340,"line_start":818,"line_end":818,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn <F, E> (&self, f: F) -> Result<&T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25293,"byte_end":25355,"line_start":792,"line_end":792,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25364,"byte_end":25428,"line_start":793,"line_end":793,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25437,"byte_end":25459,"line_start":794,"line_end":794,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25468,"byte_end":25471,"line_start":795,"line_end":795,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25480,"byte_end":25492,"line_start":796,"line_end":796,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25501,"byte_end":25504,"line_start":797,"line_end":797,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25513,"byte_end":25574,"line_start":798,"line_end":798,"column_start":9,"column_end":70}},{"value":"/ the cell remains uninitialized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25583,"byte_end":25618,"line_start":799,"line_end":799,"column_start":9,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25627,"byte_end":25630,"line_start":800,"line_end":800,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25639,"byte_end":25702,"line_start":801,"line_end":801,"column_start":9,"column_end":72}},{"value":"/ The exact outcome is unspecified. Current implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25711,"byte_end":25771,"line_start":802,"line_end":802,"column_start":9,"column_end":69}},{"value":"/ deadlocks, but this may be changed to a panic in the future.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25780,"byte_end":25844,"line_start":803,"line_end":803,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25853,"byte_end":25856,"line_start":804,"line_end":804,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25865,"byte_end":25878,"line_start":805,"line_end":805,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25887,"byte_end":25894,"line_start":806,"line_end":806,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25903,"byte_end":25937,"line_start":807,"line_end":807,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25946,"byte_end":25949,"line_start":808,"line_end":808,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25958,"byte_end":25989,"line_start":809,"line_end":809,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":25998,"byte_end":26056,"line_start":810,"line_end":810,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26065,"byte_end":26099,"line_start":811,"line_end":811,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26108,"byte_end":26168,"line_start":812,"line_end":812,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26177,"byte_end":26191,"line_start":813,"line_end":813,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26200,"byte_end":26207,"line_start":814,"line_end":814,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26216,"byte_end":26247,"line_start":815,"line_end":815,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26256,"byte_end":26293,"line_start":816,"line_end":816,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26302,"byte_end":26309,"line_start":817,"line_end":817,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27422,"byte_end":27426,"line_start":850,"line_end":850,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26768,"byte_end":26853,"line_start":833,"line_end":833,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26862,"byte_end":26865,"line_start":834,"line_end":834,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26874,"byte_end":26953,"line_start":835,"line_end":835,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26962,"byte_end":26965,"line_start":836,"line_end":836,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26974,"byte_end":26988,"line_start":837,"line_end":837,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":26997,"byte_end":27000,"line_start":838,"line_end":838,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27009,"byte_end":27016,"line_start":839,"line_end":839,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27025,"byte_end":27059,"line_start":840,"line_end":840,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27068,"byte_end":27071,"line_start":841,"line_end":841,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27080,"byte_end":27133,"line_start":842,"line_end":842,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27142,"byte_end":27176,"line_start":843,"line_end":843,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27185,"byte_end":27188,"line_start":844,"line_end":844,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27197,"byte_end":27232,"line_start":845,"line_end":845,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27241,"byte_end":27284,"line_start":846,"line_end":846,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27293,"byte_end":27348,"line_start":847,"line_end":847,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27357,"byte_end":27390,"line_start":848,"line_end":848,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27399,"byte_end":27406,"line_start":849,"line_end":849,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28071,"byte_end":28081,"line_start":869,"line_end":869,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value. Returns\n `None` if the cell was empty.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value. Returns","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27533,"byte_end":27598,"line_start":854,"line_end":854,"column_start":9,"column_end":74}},{"value":"/ `None` if the cell was empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27607,"byte_end":27640,"line_start":855,"line_end":855,"column_start":9,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27649,"byte_end":27652,"line_start":856,"line_end":856,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27661,"byte_end":27675,"line_start":857,"line_end":857,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27684,"byte_end":27687,"line_start":858,"line_end":858,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27696,"byte_end":27703,"line_start":859,"line_end":859,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27712,"byte_end":27746,"line_start":860,"line_end":860,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27755,"byte_end":27758,"line_start":861,"line_end":861,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27767,"byte_end":27816,"line_start":862,"line_end":862,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27825,"byte_end":27865,"line_start":863,"line_end":863,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27874,"byte_end":27877,"line_start":864,"line_end":864,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27886,"byte_end":27917,"line_start":865,"line_end":865,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27926,"byte_end":27969,"line_start":866,"line_end":866,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":27978,"byte_end":28039,"line_start":867,"line_end":867,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28048,"byte_end":28055,"line_start":868,"line_end":868,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29093,"byte_end":29097,"line_start":907,"line_end":907,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::sync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28156,"byte_end":28209,"line_start":874,"line_end":874,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28214,"byte_end":28217,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This type is thread-safe and can be used in statics.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28222,"byte_end":28278,"line_start":876,"line_end":876,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28283,"byte_end":28286,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28291,"byte_end":28304,"line_start":878,"line_end":878,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28309,"byte_end":28312,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28317,"byte_end":28324,"line_start":880,"line_end":880,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28329,"byte_end":28363,"line_start":881,"line_end":881,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28368,"byte_end":28371,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28376,"byte_end":28406,"line_start":883,"line_end":883,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28411,"byte_end":28414,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28419,"byte_end":28482,"line_start":885,"line_end":885,"column_start":5,"column_end":68}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28487,"byte_end":28520,"line_start":886,"line_end":886,"column_start":5,"column_end":38}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28525,"byte_end":28560,"line_start":887,"line_end":887,"column_start":5,"column_end":40}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28565,"byte_end":28607,"line_start":888,"line_end":888,"column_start":5,"column_end":47}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28612,"byte_end":28655,"line_start":889,"line_end":889,"column_start":5,"column_end":48}},{"value":"/     m","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28660,"byte_end":28669,"line_start":890,"line_end":890,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28674,"byte_end":28681,"line_start":891,"line_end":891,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28686,"byte_end":28689,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28694,"byte_end":28709,"line_start":893,"line_end":893,"column_start":5,"column_end":20}},{"value":"/     println!(\"ready\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28714,"byte_end":28740,"line_start":894,"line_end":894,"column_start":5,"column_end":31}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28745,"byte_end":28776,"line_start":895,"line_end":895,"column_start":5,"column_end":36}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28781,"byte_end":28828,"line_start":896,"line_end":896,"column_start":5,"column_end":52}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28833,"byte_end":28860,"line_start":897,"line_end":897,"column_start":5,"column_end":32}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28865,"byte_end":28908,"line_start":898,"line_end":898,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28913,"byte_end":28916,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/     // Prints:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28921,"byte_end":28939,"line_start":900,"line_end":900,"column_start":5,"column_end":23}},{"value":"/     //   ready","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28944,"byte_end":28962,"line_start":901,"line_end":901,"column_start":5,"column_end":23}},{"value":"/     //   initializing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28967,"byte_end":28992,"line_start":902,"line_end":902,"column_start":5,"column_end":30}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":28997,"byte_end":29023,"line_start":903,"line_end":903,"column_start":5,"column_end":31}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29028,"byte_end":29055,"line_start":904,"line_end":904,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29060,"byte_end":29065,"line_start":905,"line_end":905,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29070,"byte_end":29077,"line_start":906,"line_end":906,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30052,"byte_end":30055,"line_start":932,"line_end":932,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"fn (f: F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29952,"byte_end":30008,"line_start":930,"line_end":930,"column_start":9,"column_end":65}},{"value":"/ function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30017,"byte_end":30030,"line_start":931,"line_end":931,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30651,"byte_end":30656,"line_start":951,"line_end":951,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn (this: &Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30215,"byte_end":30263,"line_start":938,"line_end":938,"column_start":9,"column_end":57}},{"value":"/ returns a reference to the result. This is equivalent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30272,"byte_end":30329,"line_start":939,"line_end":939,"column_start":9,"column_end":66}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30338,"byte_end":30379,"line_start":940,"line_end":940,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30388,"byte_end":30391,"line_start":941,"line_end":941,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30400,"byte_end":30413,"line_start":942,"line_end":942,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30422,"byte_end":30429,"line_start":943,"line_end":943,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30438,"byte_end":30468,"line_start":944,"line_end":944,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30477,"byte_end":30480,"line_start":945,"line_end":945,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30489,"byte_end":30521,"line_start":946,"line_end":946,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30530,"byte_end":30533,"line_start":947,"line_end":947,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30542,"byte_end":30582,"line_start":948,"line_end":948,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30591,"byte_end":30619,"line_start":949,"line_end":949,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30628,"byte_end":30635,"line_start":950,"line_end":950,"column_start":9,"column_end":16}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33115,"byte_end":33123,"line_start":33,"line_end":33,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33160,"byte_end":33168,"line_start":34,"line_end":34,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33230,"byte_end":33238,"line_start":36,"line_end":36,"column_start":55,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33280,"byte_end":33288,"line_start":37,"line_end":37,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":34175,"byte_end":34183,"line_start":65,"line_end":65,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":39321,"byte_end":39332,"line_start":214,"line_end":214,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9219,"byte_end":9227,"line_start":286,"line_end":286,"column_start":59,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9301,"byte_end":9309,"line_start":288,"line_end":288,"column_start":40,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9341,"byte_end":9349,"line_start":290,"line_end":290,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9466,"byte_end":9474,"line_start":296,"line_end":296,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9763,"byte_end":9771,"line_start":305,"line_end":305,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10132,"byte_end":10140,"line_start":318,"line_end":318,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10269,"byte_end":10277,"line_start":324,"line_end":324,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10309,"byte_end":10317,"line_start":326,"line_end":326,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10449,"byte_end":10457,"line_start":332,"line_end":332,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17119,"byte_end":17123,"line_start":528,"line_end":528,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17209,"byte_end":17213,"line_start":530,"line_end":530,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17408,"byte_end":17412,"line_start":536,"line_end":536,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18011,"byte_end":18015,"line_start":556,"line_end":556,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18759,"byte_end":18763,"line_start":579,"line_end":579,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18919,"byte_end":18923,"line_start":586,"line_end":586,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19123,"byte_end":19127,"line_start":593,"line_end":593,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20625,"byte_end":20633,"line_start":642,"line_end":642,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20761,"byte_end":20769,"line_start":648,"line_end":648,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21058,"byte_end":21066,"line_start":657,"line_end":657,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21414,"byte_end":21422,"line_start":670,"line_end":670,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21611,"byte_end":21619,"line_start":678,"line_end":678,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21755,"byte_end":21763,"line_start":684,"line_end":684,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21783,"byte_end":21791,"line_start":686,"line_end":686,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29225,"byte_end":29229,"line_start":912,"line_end":912,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29714,"byte_end":29718,"line_start":923,"line_end":923,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29868,"byte_end":29872,"line_start":927,"line_end":927,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29931,"byte_end":29935,"line_start":929,"line_end":929,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30194,"byte_end":30198,"line_start":937,"line_end":937,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30928,"byte_end":30932,"line_start":959,"line_end":959,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":31088,"byte_end":31092,"line_start":966,"line_end":966,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":31292,"byte_end":31296,"line_start":973,"line_end":973,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33115,"byte_end":33123,"line_start":33,"line_end":33,"column_start":38,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":228},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33160,"byte_end":33168,"line_start":34,"line_end":34,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":228},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33230,"byte_end":33238,"line_start":36,"line_end":36,"column_start":55,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":3652}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":33280,"byte_end":33288,"line_start":37,"line_end":37,"column_start":36,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":3651}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":34175,"byte_end":34183,"line_start":65,"line_end":65,"column_start":9,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/imp_std.rs","byte_start":39321,"byte_end":39332,"line_start":214,"line_end":214,"column_start":15,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":36},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9219,"byte_end":9227,"line_start":286,"line_end":286,"column_start":59,"column_end":67},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":68},"to":{"krate":1,"index":3652}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9301,"byte_end":9309,"line_start":288,"line_end":288,"column_start":40,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":68},"to":{"krate":1,"index":3651}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9341,"byte_end":9349,"line_start":290,"line_end":290,"column_start":25,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9466,"byte_end":9474,"line_start":296,"line_end":296,"column_start":40,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":9763,"byte_end":9771,"line_start":305,"line_end":305,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10132,"byte_end":10140,"line_start":318,"line_end":318,"column_start":38,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10269,"byte_end":10277,"line_start":324,"line_end":324,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10309,"byte_end":10317,"line_start":326,"line_end":326,"column_start":25,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":10449,"byte_end":10457,"line_start":332,"line_end":332,"column_start":13,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":68},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17119,"byte_end":17123,"line_start":528,"line_end":528,"column_start":49,"column_end":53},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":107},"to":{"krate":1,"index":3652}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17209,"byte_end":17213,"line_start":530,"line_end":530,"column_start":43,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":17408,"byte_end":17412,"line_start":536,"line_end":536,"column_start":16,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18011,"byte_end":18015,"line_start":556,"line_end":556,"column_start":31,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18759,"byte_end":18763,"line_start":579,"line_end":579,"column_start":41,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":18919,"byte_end":18923,"line_start":586,"line_end":586,"column_start":44,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":19123,"byte_end":19127,"line_start":593,"line_end":593,"column_start":34,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20625,"byte_end":20633,"line_start":642,"line_end":642,"column_start":25,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":20761,"byte_end":20769,"line_start":648,"line_end":648,"column_start":40,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21058,"byte_end":21066,"line_start":657,"line_end":657,"column_start":30,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21414,"byte_end":21422,"line_start":670,"line_end":670,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21611,"byte_end":21619,"line_start":678,"line_end":678,"column_start":38,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21755,"byte_end":21763,"line_start":684,"line_end":684,"column_start":24,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":21783,"byte_end":21791,"line_start":686,"line_end":686,"column_start":13,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29225,"byte_end":29229,"line_start":912,"line_end":912,"column_start":43,"column_end":47},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29714,"byte_end":29718,"line_start":923,"line_end":923,"column_start":38,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29868,"byte_end":29872,"line_start":927,"line_end":927,"column_start":49,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":190},"to":{"krate":1,"index":3652}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":29931,"byte_end":29935,"line_start":929,"line_end":929,"column_start":16,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30194,"byte_end":30198,"line_start":937,"line_end":937,"column_start":31,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":30928,"byte_end":30932,"line_start":959,"line_end":959,"column_start":41,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":31088,"byte_end":31092,"line_start":966,"line_end":966,"column_start":44,"column_end":48},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.4.1/src/lib.rs","byte_start":31292,"byte_end":31296,"line_start":973,"line_end":973,"column_start":34,"column_end":38},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":1874}}]}