{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","image","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"dds\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"farbfeld\"","--cfg","feature=\"gif\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"png\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=9b6267fe2d66fd3f","-C","extra-filename=-9b6267fe2d66fd3f","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","bytemuck=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libbytemuck-1f8fc9ada4bcc509.rmeta","--extern","byteorder=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libbyteorder-253ed1b76243e9db.rmeta","--extern","gif=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libgif-17f57bb2041ec726.rmeta","--extern","jpeg=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libjpeg_decoder-e111aa6ca67cd7b7.rmeta","--extern","num_iter=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libnum_iter-de091780f64ce746.rmeta","--extern","num_rational=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libnum_rational-de518e969a41c4f1.rmeta","--extern","num_traits=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libnum_traits-512b604bf456237b.rmeta","--extern","png=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libpng-3135f09590434e90.rmeta","--extern","scoped_threadpool=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libscoped_threadpool-2a4aa9c24b4981a2.rmeta","--extern","tiff=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libtiff-7eae76397aa561b0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libimage-9b6267fe2d66fd3f.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[17758387773172035369,8504574526325506819]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","num":15,"id":{"name":"tiff","disambiguator":[14307552078230618898,15113366670942019555]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","num":16,"id":{"name":"byteorder","disambiguator":[10719404080946289605,17148540255389135738]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","num":17,"id":{"name":"lzw","disambiguator":[6781108430713733430,15744139706019695448]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","num":18,"id":{"name":"miniz_oxide","disambiguator":[5470442639274850331,16448161822072232658]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","num":19,"id":{"name":"adler32","disambiguator":[3443978572153514469,7524890204773834207]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","num":20,"id":{"name":"num_traits","disambiguator":[2136015123687830033,9735163811384062178]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","num":21,"id":{"name":"gif","disambiguator":[7578843965550989681,7630950596916290575]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","num":22,"id":{"name":"color_quant","disambiguator":[3826272445679226980,17242466669529815838]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","num":23,"id":{"name":"weezl","disambiguator":[10162027269754317538,7804571251057661068]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","num":24,"id":{"name":"num_rational","disambiguator":[2323678741969372344,11820310801570188273]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","num":25,"id":{"name":"num_integer","disambiguator":[6180277847919311141,9508011011995319903]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","num":26,"id":{"name":"scoped_threadpool","disambiguator":[17785970441717650540,6630389159409945323]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":27,"id":{"name":"jpeg_decoder","disambiguator":[13405776218821339638,1614572785726824545]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":28,"id":{"name":"rayon","disambiguator":[8837301931256387038,276227745869652756]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":29,"id":{"name":"either","disambiguator":[8884923402393253072,6032429501630248164]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":30,"id":{"name":"rayon_core","disambiguator":[3112109727074155044,3534036274552798731]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":31,"id":{"name":"crossbeam_channel","disambiguator":[15693235806395740041,13675018967709397917]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":32,"id":{"name":"crossbeam_utils","disambiguator":[12815700305172623123,14563506393251252287]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":33,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":34,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":35,"id":{"name":"maybe_uninit","disambiguator":[9925295721960399709,5075810066591430732]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":36,"id":{"name":"crossbeam_deque","disambiguator":[5235303285713816219,1168591414518111885]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":37,"id":{"name":"crossbeam_epoch","disambiguator":[17163470530562775512,8709529870593392442]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":38,"id":{"name":"memoffset","disambiguator":[2892690869131483658,14795605606618073579]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":39,"id":{"name":"scopeguard","disambiguator":[5081943333480440636,9076196664652206448]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":40,"id":{"name":"num_cpus","disambiguator":[5911647018467507976,7042850928943217931]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":41,"id":{"name":"libc","disambiguator":[7997064065336242500,8511025302220419458]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","num":42,"id":{"name":"num_iter","disambiguator":[6584923289254514014,2865933681195123743]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":43,"id":{"name":"png","disambiguator":[1366279487894949152,5345051873772073182]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":44,"id":{"name":"bitflags","disambiguator":[381175081479133518,10994153786536176848]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":45,"id":{"name":"deflate","disambiguator":[3313317916065622900,1483916410911475359]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":46,"id":{"name":"crc32fast","disambiguator":[9443685600815269936,265830247737057692]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","num":47,"id":{"name":"bytemuck","disambiguator":[6234400421790325621,5390850689647829091]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":0,"byte_end":10187,"line_start":1,"line_end":276,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":5425},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7029,"byte_end":7038,"line_start":139,"line_end":139,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7040,"byte_end":7057,"line_start":139,"line_end":139,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5888},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7084,"byte_end":7088,"line_start":141,"line_end":141,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7090,"byte_end":7095,"line_start":141,"line_end":141,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5830},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":141,"line_end":141,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7102,"byte_end":7106,"line_start":141,"line_end":141,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5859},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":141,"line_end":141,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5946},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7113,"byte_end":7117,"line_start":141,"line_end":141,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7144,"byte_end":7154,"line_start":143,"line_end":143,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7156,"byte_end":7167,"line_start":143,"line_end":143,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7194,"byte_end":7210,"line_start":145,"line_end":145,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7228,"byte_end":7240,"line_start":146,"line_end":146,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3800},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7258,"byte_end":7274,"line_start":147,"line_end":147,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3768},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7292,"byte_end":7304,"line_start":148,"line_end":148,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3781},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7322,"byte_end":7337,"line_start":149,"line_end":149,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3790},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7355,"byte_end":7367,"line_start":150,"line_end":150,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6088},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7385,"byte_end":7396,"line_start":151,"line_end":151,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7414,"byte_end":7431,"line_start":152,"line_end":152,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7449,"byte_end":7457,"line_start":153,"line_end":153,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6184},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7504,"byte_end":7510,"line_start":155,"line_end":155,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7528,"byte_end":7536,"line_start":156,"line_end":156,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7583,"byte_end":7597,"line_start":159,"line_end":159,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7616,"byte_end":7625,"line_start":160,"line_end":160,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5394},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7676,"byte_end":7687,"line_start":162,"line_end":162,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7706,"byte_end":7714,"line_start":163,"line_end":163,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3349},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7733,"byte_end":7742,"line_start":164,"line_end":164,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7767,"byte_end":7778,"line_start":166,"line_end":166,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7815,"byte_end":7830,"line_start":169,"line_end":169,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7832,"byte_end":7841,"line_start":169,"line_end":169,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7843,"byte_end":7848,"line_start":169,"line_end":169,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7918,"byte_end":7930,"line_start":172,"line_end":172,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":533},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7932,"byte_end":7936,"line_start":172,"line_end":172,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3709},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7965,"byte_end":7981,"line_start":173,"line_end":173,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7983,"byte_end":8011,"line_start":173,"line_end":173,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8013,"byte_end":8017,"line_start":173,"line_end":173,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3705},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8038,"byte_end":8049,"line_start":174,"line_end":174,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3707},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8051,"byte_end":8074,"line_start":174,"line_end":174,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8076,"byte_end":8092,"line_start":174,"line_end":174,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6055},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8121,"byte_end":8133,"line_start":176,"line_end":176,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5374},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8163,"byte_end":8168,"line_start":178,"line_end":178,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5367},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8170,"byte_end":8175,"line_start":178,"line_end":178,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8177,"byte_end":8183,"line_start":178,"line_end":178,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8406,"byte_end":8419,"line_start":187,"line_end":187,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3153},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8429,"byte_end":8444,"line_start":188,"line_end":188,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8454,"byte_end":8472,"line_start":189,"line_end":189,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8482,"byte_end":8495,"line_start":190,"line_end":190,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8505,"byte_end":8521,"line_start":191,"line_end":191,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3055},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8531,"byte_end":8537,"line_start":192,"line_end":192,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8547,"byte_end":8556,"line_start":193,"line_end":193,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8566,"byte_end":8570,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8580,"byte_end":8587,"line_start":195,"line_end":195,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":4122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27977,"byte_end":27981,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":4147},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45127,"byte_end":45137,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4152},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45175,"byte_end":45185,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45187,"byte_end":45195,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45197,"byte_end":45205,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45207,"byte_end":45214,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4150},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45216,"byte_end":45224,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45283,"byte_end":45298,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45300,"byte_end":45324,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45326,"byte_end":45339,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":263},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45341,"byte_end":45363,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45365,"byte_end":45374,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45380,"byte_end":45398,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45400,"byte_end":45409,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45411,"byte_end":45419,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45421,"byte_end":45433,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45435,"byte_end":45446,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45448,"byte_end":45460,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45462,"byte_end":45480,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45482,"byte_end":45498,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45545,"byte_end":45549,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45551,"byte_end":45560,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45562,"byte_end":45568,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45570,"byte_end":45579,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45581,"byte_end":45590,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45640,"byte_end":45648,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45650,"byte_end":45658,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45660,"byte_end":45666,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45668,"byte_end":45677,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45679,"byte_end":45688,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45690,"byte_end":45702,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45704,"byte_end":45710,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":4142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45737,"byte_end":45744,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":304},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45746,"byte_end":45754,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","byte_start":108769,"byte_end":108775,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":841},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191966,"byte_end":191976,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":730}},{"kind":"Use","ref_id":{"krate":0,"index":960},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":192079,"byte_end":192089,"line_start":12,"line_end":12,"column_start":25,"column_end":35},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":730}},{"kind":"Use","ref_id":{"krate":0,"index":964},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":192091,"byte_end":192101,"line_start":12,"line_end":12,"column_start":37,"column_end":47},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":730}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311435,"byte_end":311436,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"rgbe8, Rgbe8Pixel, HdrAdapter, SIGNATURE","parent":{"krate":0,"index":1264}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311435,"byte_end":311436,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1264}},{"kind":"Use","ref_id":{"krate":0,"index":1542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363565,"byte_end":363575,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"IcoDecoder","value":"","parent":{"krate":0,"index":1496}},{"kind":"Use","ref_id":{"krate":0,"index":1606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363622,"byte_end":363632,"line_start":11,"line_end":11,"column_start":25,"column_end":35},"alias_span":null,"name":"IcoEncoder","value":"","parent":{"krate":0,"index":1496}},{"kind":"Use","ref_id":{"krate":0,"index":1609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363634,"byte_end":363644,"line_start":11,"line_end":11,"column_start":37,"column_end":47},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1496}},{"kind":"Use","ref_id":{"krate":0,"index":1649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380735,"byte_end":380746,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":1762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380849,"byte_end":380860,"line_start":12,"line_end":12,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":4825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380862,"byte_end":380874,"line_start":12,"line_end":12,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":4807},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380876,"byte_end":380892,"line_start":12,"line_end":12,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":1773},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380894,"byte_end":380905,"line_start":12,"line_end":12,"column_start":70,"column_end":81},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1624}},{"kind":"Use","ref_id":{"krate":0,"index":2090},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472480,"byte_end":472490,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PnmDecoder","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472593,"byte_end":472603,"line_start":9,"line_end":9,"column_start":25,"column_end":35},"alias_span":null,"name":"PnmEncoder","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472605,"byte_end":472615,"line_start":9,"line_end":9,"column_start":37,"column_end":47},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472673,"byte_end":472688,"line_start":11,"line_end":11,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472690,"byte_end":472707,"line_start":11,"line_end":11,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5076},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472709,"byte_end":472721,"line_start":11,"line_end":11,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5085},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472723,"byte_end":472736,"line_start":11,"line_end":11,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5095},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472761,"byte_end":472773,"line_start":12,"line_end":12,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472893,"byte_end":472902,"line_start":14,"line_end":14,"column_start":24,"column_end":33},"alias_span":null,"name":"PnmHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472904,"byte_end":472913,"line_start":14,"line_end":14,"column_start":35,"column_end":44},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472915,"byte_end":472925,"line_start":14,"line_end":14,"column_start":46,"column_end":56},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472927,"byte_end":472937,"line_start":14,"line_end":14,"column_start":58,"column_end":68},"alias_span":null,"name":"PnmSubtype","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":5036},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472939,"byte_end":472953,"line_start":14,"line_end":14,"column_start":70,"column_end":84},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":1980}},{"kind":"Use","ref_id":{"krate":0,"index":2412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","byte_start":561217,"byte_end":561227,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaDecoder","value":"","parent":{"krate":0,"index":2376}},{"kind":"Use","ref_id":{"krate":0,"index":2478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","byte_start":561293,"byte_end":561303,"line_start":13,"line_end":13,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaEncoder","value":"","parent":{"krate":0,"index":2376}},{"kind":"Use","ref_id":{"krate":0,"index":2652},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/mod.rs","byte_start":597675,"byte_end":597686,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebPDecoder","value":"","parent":{"krate":0,"index":2612}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":0,"byte_end":10187,"line_start":1,"line_end":276,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":29},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":117},{"krate":0,"index":128},{"krate":0,"index":175},{"krate":0,"index":446},{"krate":0,"index":551},{"krate":0,"index":730},{"krate":0,"index":985},{"krate":0,"index":1038},{"krate":0,"index":1160},{"krate":0,"index":1264},{"krate":0,"index":1496},{"krate":0,"index":1624},{"krate":0,"index":1845},{"krate":0,"index":1980},{"krate":0,"index":2376},{"krate":0,"index":2541},{"krate":0,"index":2612},{"krate":0,"index":2884},{"krate":0,"index":2977},{"krate":0,"index":3017},{"krate":0,"index":3358},{"krate":0,"index":3556},{"krate":0,"index":3712},{"krate":0,"index":3858},{"krate":0,"index":3956},{"krate":0,"index":3968},{"krate":0,"index":6240},{"krate":0,"index":3969}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.","sig":null,"attributes":[{"value":"! This crate provides native rust implementations of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"! image encoders and decoders and basic image manipulation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":55,"byte_end":115,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"! functions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":116,"byte_end":130,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":131,"byte_end":134,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Additional documentation can currently also be found in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":135,"byte_end":198,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"! [README.md file which is most easily viewed on github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":199,"byte_end":315,"line_start":6,"line_end":6,"column_start":1,"column_end":117}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":316,"byte_end":319,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [Jump forward to crate content](#reexports)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":320,"byte_end":367,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":368,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! # Overview","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":372,"byte_end":386,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":387,"byte_end":390,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":391,"byte_end":495,"line_start":12,"line_end":12,"column_start":1,"column_end":105}},{"value":"! encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":496,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"! without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":592,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"! supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":687,"byte_end":781,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"! dependencies.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":782,"byte_end":799,"line_start":16,"line_end":16,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":800,"byte_end":803,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! | Format | Decoding | Encoding |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":804,"byte_end":840,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"! | ------ | -------- | -------- |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":841,"byte_end":877,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"! | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":878,"byte_end":939,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":940,"byte_end":997,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"! | GIF    | Yes | Yes |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":998,"byte_end":1024,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"! | BMP    | Yes | RGB(8), RGBA(8), Gray(8), GrayA(8) |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1025,"byte_end":1082,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"! | ICO    | Yes | Yes |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1083,"byte_end":1109,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"! | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB(8), RGBA(8), Gray(8) |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1110,"byte_end":1195,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"! | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1196,"byte_end":1242,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"! | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1243,"byte_end":1293,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"! | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1294,"byte_end":1332,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"! | TGA    | Yes | RGB(8), RGBA(8), BGR(8), BGRA(8), Gray(8), GrayA(8) |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1333,"byte_end":1407,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"! | farbfeld | Yes | Yes |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1408,"byte_end":1436,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1437,"byte_end":1440,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! ## Using images decoders","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1441,"byte_end":1469,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! There exists a huge variety of image formats that are concerned with efficiently encoding image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1474,"byte_end":1573,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"! pixel data and auxiliary meta data for many different purposes. The `image` library provides","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1574,"byte_end":1670,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! decoders for many common formats, depending on the active features. The best way to use them","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1671,"byte_end":1767,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! depends on your use case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1768,"byte_end":1797,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! * [`open`] is a very simple way to load images from the file system, automatically deducing the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1802,"byte_end":1901,"line_start":39,"line_end":39,"column_start":1,"column_end":100}},{"value":"!   format but offering little customization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1902,"byte_end":1949,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"! * [`load_from_memory`], [`load_from_memory_with_format`] present a similar interface for images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1950,"byte_end":2049,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"!   whose encoded data is already present in memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2050,"byte_end":2104,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"! * [`io::Reader`] is a builder providing a superset of the functions. It offers both","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2105,"byte_end":2192,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"!   customization and auto-deduction but is slightly more involved. The main benefit is that the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2193,"byte_end":2291,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"!   interface is easier to evolve.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2292,"byte_end":2328,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"! * [`ImageDecoder`] is a trait for querying meta data and reading image pixels into a generic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2329,"byte_end":2425,"line_start":46,"line_end":46,"column_start":1,"column_end":97}},{"value":"!   byte buffer. It also contains a `Read` adaptor for stream reading the pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2426,"byte_end":2509,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::from_decoder`] can be used for creating a buffer from a single specific or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2510,"byte_end":2606,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"!   any custom decoder implementing the [`ImageDecoder`] trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2607,"byte_end":2672,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2673,"byte_end":2676,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! [`open`]: fn.open.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2677,"byte_end":2703,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"! [`load_from_memory`]: fn.load_from_memory.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2704,"byte_end":2754,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"! [`load_from_memory_with_format`]: fn.load_from_memory_with_format.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2755,"byte_end":2829,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"! [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2830,"byte_end":2871,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"! [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2872,"byte_end":2950,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"! [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2951,"byte_end":2996,"line_start":56,"line_end":56,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2997,"byte_end":3000,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! ## Using image encoders","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3001,"byte_end":3028,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3029,"byte_end":3032,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! Encoding pixel data is supported for the majority of formats but not quite as broadly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3033,"byte_end":3123,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3124,"byte_end":3127,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! * [`DynamicImage::save`] is the converse of `open` and stores a `DynamicImage`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3128,"byte_end":3211,"line_start":62,"line_end":62,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::write_to`] can be used to encode an image into any writer, for example into a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3212,"byte_end":3311,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"!   vector of bytes in memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3312,"byte_end":3344,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"! * [`save_buffer`], [`save_buffer_with_format`] provide a low-level interface for saving an image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3345,"byte_end":3445,"line_start":65,"line_end":65,"column_start":1,"column_end":101}},{"value":"!   in the file system, where the library initializes the chosen encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3446,"byte_end":3521,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"! * [`ImageEncoder`] is a trait for encoding a byte buffer of image data and the inverse of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3522,"byte_end":3619,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"!   `ImageDecoder` interface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3620,"byte_end":3651,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3652,"byte_end":3655,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! [`save_buffer`]: #fn.save_buffer.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3656,"byte_end":3697,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"! [`save_buffer_with_format`]: #fn.save_buffer_with_format.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3698,"byte_end":3763,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"! [`DynamicImage::save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3764,"byte_end":3826,"line_start":72,"line_end":72,"column_start":1,"column_end":63}},{"value":"! [`DynamicImage::write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3827,"byte_end":3897,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"! [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3898,"byte_end":3943,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3944,"byte_end":3947,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ## Image buffers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3948,"byte_end":3968,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3969,"byte_end":3972,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! The library adds containers for channel data which together form some representation of a 2D","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3973,"byte_end":4069,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"! matrix of pixels. These are all statically typed to avoid misinterpretation of byte data (and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4070,"byte_end":4167,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"! since Rust has no standard safe encapsulation for reinterpreting byte slices as another type).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4168,"byte_end":4266,"line_start":80,"line_end":80,"column_start":1,"column_end":99}},{"value":"! The main traits [`GenericImageView`] and [`GenericImage`] model a view on a 2D-matrix of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4267,"byte_end":4359,"line_start":81,"line_end":81,"column_start":1,"column_end":93}},{"value":"! addressable pixels and a buffer of independently accessible pixels respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4360,"byte_end":4444,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4445,"byte_end":4448,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! The two main types for owning pixel data are [`ImageBuffer`] and [`DynamicImage`]. Note that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4449,"byte_end":4545,"line_start":84,"line_end":84,"column_start":1,"column_end":97}},{"value":"! the latter is an enum over well-supported pixel types that also offers conversion","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4546,"byte_end":4631,"line_start":85,"line_end":85,"column_start":1,"column_end":86}},{"value":"! functionality.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4632,"byte_end":4650,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4651,"byte_end":4654,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! Additionally, the [`flat`] module contains items for interoperability with generic channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4655,"byte_end":4749,"line_start":88,"line_end":88,"column_start":1,"column_end":95}},{"value":"! matrices and foreign interface. While still strictly typed, these dynamically validate length and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4750,"byte_end":4851,"line_start":89,"line_end":89,"column_start":1,"column_end":102}},{"value":"! other layout assumptions required to provide the trait interface. While they are quite generic, you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4852,"byte_end":4955,"line_start":90,"line_end":90,"column_start":1,"column_end":104}},{"value":"! should be prepared for a bit of boilerplate when using these types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4956,"byte_end":5027,"line_start":91,"line_end":91,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5028,"byte_end":5031,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"! [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5032,"byte_end":5085,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"! [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5086,"byte_end":5131,"line_start":94,"line_end":94,"column_start":1,"column_end":46}},{"value":"! [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5132,"byte_end":5176,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"! [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5177,"byte_end":5221,"line_start":96,"line_end":96,"column_start":1,"column_end":45}},{"value":"! [`flat`]: flat/index.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5222,"byte_end":5251,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5252,"byte_end":5255,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! ## A note on format specific features","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5256,"byte_end":5297,"line_start":99,"line_end":99,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5298,"byte_end":5301,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"! One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5302,"byte_end":5394,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"! ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5395,"byte_end":5493,"line_start":102,"line_end":102,"column_start":1,"column_end":99}},{"value":"! effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5494,"byte_end":5587,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"! linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5588,"byte_end":5687,"line_start":104,"line_end":104,"column_start":1,"column_end":100}},{"value":"! many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5688,"byte_end":5784,"line_start":105,"line_end":105,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5785,"byte_end":5788,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"! Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5789,"byte_end":5880,"line_start":107,"line_end":107,"column_start":1,"column_end":92}},{"value":"! _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5881,"byte_end":5953,"line_start":108,"line_end":108,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5954,"byte_end":5957,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5958,"byte_end":6052,"line_start":110,"line_end":110,"column_start":1,"column_end":95}},{"value":"!    exists an essentially canonical way to control it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6053,"byte_end":6110,"line_start":111,"line_end":111,"column_start":1,"column_end":58}},{"value":"! 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6111,"byte_end":6205,"line_start":112,"line_end":112,"column_start":1,"column_end":95}},{"value":"! 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6206,"byte_end":6305,"line_start":113,"line_end":113,"column_start":1,"column_end":100}},{"value":"!    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6306,"byte_end":6404,"line_start":114,"line_end":114,"column_start":1,"column_end":99}},{"value":"!    breaking changes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6405,"byte_end":6429,"line_start":115,"line_end":115,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6430,"byte_end":6433,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! Features that fulfill two or more criteria are preferred.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6434,"byte_end":6495,"line_start":117,"line_end":117,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6496,"byte_end":6499,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"! Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6500,"byte_end":6588,"line_start":119,"line_end":119,"column_start":1,"column_end":89}},{"value":"warn(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6590,"byte_end":6612,"line_start":121,"line_end":121,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6613,"byte_end":6644,"line_start":122,"line_end":122,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6645,"byte_end":6670,"line_start":123,"line_end":123,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6671,"byte_end":6691,"line_start":124,"line_end":124,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6692,"byte_end":6730,"line_start":125,"line_end":125,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6828,"byte_end":6869,"line_start":128,"line_end":128,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":3970},{"krate":0,"index":3989},{"krate":0,"index":3991},{"krate":0,"index":3994},{"krate":0,"index":3996},{"krate":0,"index":4018},{"krate":0,"index":4016},{"krate":0,"index":4013},{"krate":0,"index":4009},{"krate":0,"index":4010},{"krate":0,"index":4020},{"krate":0,"index":4023},{"krate":0,"index":4025},{"krate":0,"index":4028},{"krate":0,"index":4030},{"krate":0,"index":4052},{"krate":0,"index":4050},{"krate":0,"index":4047},{"krate":0,"index":4043},{"krate":0,"index":4044},{"krate":0,"index":4054},{"krate":0,"index":4057},{"krate":0,"index":4059},{"krate":0,"index":4061},{"krate":0,"index":4063},{"krate":0,"index":4083},{"krate":0,"index":4081},{"krate":0,"index":4078},{"krate":0,"index":4074},{"krate":0,"index":4075},{"krate":0,"index":4071},{"krate":0,"index":4072},{"krate":0,"index":4085},{"krate":0,"index":4109},{"krate":0,"index":4107},{"krate":0,"index":4104},{"krate":0,"index":4100},{"krate":0,"index":4101},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"! Contains detailed error representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10189,"byte_end":10232,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10233,"byte_end":10236,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10237,"byte_end":10330,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"! subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10331,"byte_end":10430,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"! respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10431,"byte_end":10506,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10507,"byte_end":10510,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10511,"byte_end":10610,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"! through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10611,"byte_end":10709,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"! may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10710,"byte_end":10805,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"! `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10806,"byte_end":10902,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"! you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10903,"byte_end":10999,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"! external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11000,"byte_end":11081,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11082,"byte_end":11085,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! [`ImageError`]: enum.ImageError.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11086,"byte_end":11126,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11838,"byte_end":11846,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11555,"byte_end":11599,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11604,"byte_end":11607,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11612,"byte_end":11705,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11710,"byte_end":11793,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11798,"byte_end":11833,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3974},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12232,"byte_end":12240,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11868,"byte_end":11912,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11917,"byte_end":11920,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11925,"byte_end":12011,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12016,"byte_end":12109,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12114,"byte_end":12207,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12212,"byte_end":12227,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3977},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12480,"byte_end":12489,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12262,"byte_end":12310,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12315,"byte_end":12318,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12323,"byte_end":12414,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12419,"byte_end":12475,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12749,"byte_end":12755,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12512,"byte_end":12589,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12594,"byte_end":12597,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12602,"byte_end":12697,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12702,"byte_end":12744,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13093,"byte_end":13104,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12774,"byte_end":12838,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12843,"byte_end":12846,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12851,"byte_end":12935,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12940,"byte_end":12977,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12982,"byte_end":13029,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13034,"byte_end":13088,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3986},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13195,"byte_end":13202,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13129,"byte_end":13190,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":3970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11538,"byte_end":11548,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"ImageError::{Decoding, Encoding, Parameter, Limits, Unsupported, IoError}","parent":null,"children":[{"krate":0,"index":3971},{"krate":0,"index":3974},{"krate":0,"index":3977},{"krate":0,"index":3980},{"krate":0,"index":3983},{"krate":0,"index":3986}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11280,"byte_end":11328,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11329,"byte_end":11332,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11333,"byte_end":11425,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11426,"byte_end":11511,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":3991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13434,"byte_end":13450,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":3992},{"krate":0,"index":3993}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13218,"byte_end":13275,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13276,"byte_end":13279,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13280,"byte_end":13339,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13340,"byte_end":13343,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13344,"byte_end":13405,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3997},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13689,"byte_end":13694,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":3996},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13637,"byte_end":13684,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4000},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13761,"byte_end":13767,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":3996},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13719,"byte_end":13756,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13911,"byte_end":13925,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":3996},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13790,"byte_end":13827,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13832,"byte_end":13906,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13958,"byte_end":13973,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":3996},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3996},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13610,"byte_end":13630,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"UnsupportedErrorKind::{Color, Format, GenericFeature, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":3997},{"krate":0,"index":4000},{"krate":0,"index":4003},{"krate":0,"index":4006}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13517,"byte_end":13559,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":4020},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14292,"byte_end":14305,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":4021},{"krate":0,"index":4022}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13999,"byte_end":14052,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14053,"byte_end":14056,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14057,"byte_end":14151,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14152,"byte_end":14191,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14192,"byte_end":14195,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14196,"byte_end":14263,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4025},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14687,"byte_end":14701,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":4026},{"krate":0,"index":4027}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14395,"byte_end":14444,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14445,"byte_end":14448,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14449,"byte_end":14544,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14545,"byte_end":14584,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14585,"byte_end":14588,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14589,"byte_end":14658,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4031},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14949,"byte_end":14966,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":4030},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14908,"byte_end":14944,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15064,"byte_end":15077,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":4030},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14972,"byte_end":15059,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4035},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15205,"byte_end":15212,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":4030},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15083,"byte_end":15121,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15126,"byte_end":15200,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15273,"byte_end":15283,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":4030},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15226,"byte_end":15268,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15367,"byte_end":15382,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4030},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15308,"byte_end":15362,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":4030},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14883,"byte_end":14901,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"ParameterErrorKind::{DimensionMismatch, FailedAlready, Generic, NoMoreData, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4031},{"krate":0,"index":4033},{"krate":0,"index":4035},{"krate":0,"index":4038},{"krate":0,"index":4040}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14791,"byte_end":14832,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15701,"byte_end":15714,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":4055},{"krate":0,"index":4056}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15408,"byte_end":15461,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15462,"byte_end":15465,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15466,"byte_end":15560,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15561,"byte_end":15600,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15601,"byte_end":15604,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15605,"byte_end":15672,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16114,"byte_end":16124,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":4060}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15803,"byte_end":15880,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15881,"byte_end":15884,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15885,"byte_end":15977,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15978,"byte_end":16017,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16018,"byte_end":16021,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16022,"byte_end":16085,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16656,"byte_end":16670,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":4063},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16583,"byte_end":16651,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4066},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16754,"byte_end":16772,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":4063},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16676,"byte_end":16749,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4068},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16856,"byte_end":16871,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4063},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16797,"byte_end":16851,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":4063},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16562,"byte_end":16576,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"LimitErrorKind::{DimensionError, InsufficientMemory, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4064},{"krate":0,"index":4066},{"krate":0,"index":4068}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16195,"byte_end":16263,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16264,"byte_end":16267,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16268,"byte_end":16366,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16367,"byte_end":16432,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16478,"byte_end":16516,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4086},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17058,"byte_end":17063,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":4085},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17021,"byte_end":17053,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4089},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17131,"byte_end":17135,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":4085},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17083,"byte_end":17126,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4092},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17207,"byte_end":17220,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":4085},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17150,"byte_end":17202,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4095},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17307,"byte_end":17314,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":4085},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17247,"byte_end":17302,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4097},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17340,"byte_end":17355,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4085},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4085},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16999,"byte_end":17014,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"ImageFormatHint::{Exact, Name, PathExtension, Unknown, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4086},{"krate":0,"index":4089},{"krate":0,"index":4092},{"krate":0,"index":4095},{"krate":0,"index":4097}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16897,"byte_end":16948,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17627,"byte_end":17647,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"fn (format: ImageFormatHint, kind: UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17409,"byte_end":17495,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17500,"byte_end":17503,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17508,"byte_end":17596,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17601,"byte_end":17615,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17875,"byte_end":17879,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"fn (&self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17797,"byte_end":17863,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18018,"byte_end":18029,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"fn (&self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17950,"byte_end":18006,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18221,"byte_end":18224,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"fn (format: ImageFormatHint, err: impl Into<Box<dyn Error + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18120,"byte_end":18209,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18592,"byte_end":18608,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"fn (format: ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18436,"byte_end":18485,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18490,"byte_end":18493,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18498,"byte_end":18580,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18807,"byte_end":18818,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"fn (&self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18739,"byte_end":18795,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19011,"byte_end":19014,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"fn (format: ImageFormatHint, err: impl Into<Box<dyn Error + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18909,"byte_end":18999,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19383,"byte_end":19399,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"fn (format: ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19226,"byte_end":19276,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19281,"byte_end":19284,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19289,"byte_end":19371,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19597,"byte_end":19608,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"fn (&self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19530,"byte_end":19585,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19780,"byte_end":19789,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"fn (kind: ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19700,"byte_end":19768,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19996,"byte_end":20000,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"fn (&self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19920,"byte_end":19984,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20173,"byte_end":20182,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"fn (kind: LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20089,"byte_end":20161,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20347,"byte_end":20351,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"fn (&self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20275,"byte_end":20335,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21230,"byte_end":21241,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21172,"byte_end":21220,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8311,"byte_end":8317,"line_start":184,"line_end":184,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","parent":null,"children":[{"krate":0,"index":118}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8231,"byte_end":8302,"line_start":183,"line_end":183,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"! Mathematical helper functions and types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27874,"byte_end":27918,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":4111},{"krate":0,"index":4119},{"krate":0,"index":4117},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":153}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"! NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":27984,"byte_end":28055,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"! See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28056,"byte_end":28121,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"! in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28122,"byte_end":28195,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"! for a discussion of the algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28196,"byte_end":28234,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"! See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28235,"byte_end":28339,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":145},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31874,"byte_end":31882,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30177,"byte_end":30211,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30212,"byte_end":30215,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30216,"byte_end":30230,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30231,"byte_end":30238,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30239,"byte_end":30299,"line_start":66,"line_end":66,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30300,"byte_end":30334,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30335,"byte_end":30381,"line_start":68,"line_end":68,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30382,"byte_end":30385,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30386,"byte_end":30436,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30437,"byte_end":30461,"line_start":71,"line_end":71,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30462,"byte_end":30510,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30511,"byte_end":30561,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30562,"byte_end":30611,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30612,"byte_end":30666,"line_start":75,"line_end":75,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30667,"byte_end":30714,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30715,"byte_end":30752,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30753,"byte_end":30792,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30793,"byte_end":30831,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30832,"byte_end":30871,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30872,"byte_end":30875,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30876,"byte_end":30974,"line_start":82,"line_end":82,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30975,"byte_end":31001,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31002,"byte_end":31095,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31096,"byte_end":31149,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31150,"byte_end":31198,"line_start":86,"line_end":86,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31199,"byte_end":31245,"line_start":87,"line_end":87,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31246,"byte_end":31336,"line_start":88,"line_end":88,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31337,"byte_end":31356,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31357,"byte_end":31412,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31413,"byte_end":31512,"line_start":91,"line_end":91,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31513,"byte_end":31609,"line_start":92,"line_end":92,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31610,"byte_end":31630,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31631,"byte_end":31695,"line_start":94,"line_end":94,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31696,"byte_end":31739,"line_start":95,"line_end":95,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31740,"byte_end":31776,"line_start":96,"line_end":96,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31777,"byte_end":31826,"line_start":97,"line_end":97,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31827,"byte_end":31846,"line_start":98,"line_end":98,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31847,"byte_end":31854,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31855,"byte_end":31862,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32184,"byte_end":32187,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"fn (samplefac: i32, colors: usize, pixels: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Creates a new neural network and trains it with the supplied data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32103,"byte_end":32172,"line_start":112,"line_end":112,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32728,"byte_end":32732,"line_start":129,"line_end":129,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"fn (&mut self, pixels: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Initializes the neural network and trains it with the supplied data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32645,"byte_end":32716,"line_start":128,"line_end":128,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":33722,"byte_end":33731,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"fn (&self, pixel: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"/ Maps the pixel in-place to the best-matching color in the color map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":33617,"byte_end":33688,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":33693,"byte_end":33710,"line_start":160,"line_end":160,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34201,"byte_end":34209,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"fn (&self, pixel: &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map for `pixel`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34105,"byte_end":34167,"line_start":171,"line_end":171,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34172,"byte_end":34189,"line_start":172,"line_end":172,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34470,"byte_end":34476,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"fn (&self, idx: usize) -> Option<[u8; 4]>","parent":null,"children":[],"decl_id":null,"docs":" Lookup pixel values for color at `idx` in the colormap.\n","sig":null,"attributes":[{"value":"/ Lookup pixel values for color at `idx` in the colormap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34399,"byte_end":34458,"line_start":179,"line_end":179,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":171}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"! Shared mathematical utility functions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44106,"byte_end":44148,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44393,"byte_end":44398,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"fn <N> (a: N, min: N, max: N) -> N","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44150,"byte_end":44188,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44189,"byte_end":44192,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44193,"byte_end":44200,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44201,"byte_end":44228,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44229,"byte_end":44232,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44233,"byte_end":44277,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44278,"byte_end":44322,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44323,"byte_end":44367,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44368,"byte_end":44375,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44376,"byte_end":44385,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":4122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44679,"byte_end":44683,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":4123},{"krate":0,"index":4124},{"krate":0,"index":4125},{"krate":0,"index":4126}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44551,"byte_end":44616,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":4123},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44743,"byte_end":44744,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":4122},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44690,"byte_end":44734,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":4124},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44808,"byte_end":44809,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":4122},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44755,"byte_end":44799,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":4125},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44855,"byte_end":44860,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":4122},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44820,"byte_end":44846,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":4126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44907,"byte_end":44913,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":4122},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44871,"byte_end":44898,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":194},{"krate":0,"index":208},{"krate":0,"index":214},{"krate":0,"index":224},{"krate":0,"index":265},{"krate":0,"index":335},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":438},{"krate":0,"index":443}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"! Image Processing Functions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":44923,"byte_end":44953,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57096,"byte_end":57104,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57047,"byte_end":57088,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57436,"byte_end":57445,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57386,"byte_end":57428,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57778,"byte_end":57787,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57728,"byte_end":57770,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58175,"byte_end":58186,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58070,"byte_end":58167,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58960,"byte_end":58972,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58854,"byte_end":58952,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":59755,"byte_end":59767,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":59649,"byte_end":59747,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60473,"byte_end":60488,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60435,"byte_end":60465,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60813,"byte_end":60826,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"fn <I> (image: &I) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60777,"byte_end":60805,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61208,"byte_end":61226,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61113,"byte_end":61200,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61987,"byte_end":62003,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"fn <I, Container> (image: &I, destination: &mut ImageBuffer<I::Pixel, Container>) -> crate::ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61894,"byte_end":61979,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":62730,"byte_end":62748,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":62671,"byte_end":62722,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63528,"byte_end":63552,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63480,"byte_end":63520,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63958,"byte_end":63980,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63912,"byte_end":63950,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":265},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":299},{"krate":0,"index":304},{"krate":0,"index":4142},{"krate":0,"index":4145},{"krate":0,"index":4144},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":332}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"! Functions for altering and converting the color of pixelbufs","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":68933,"byte_end":68997,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69382,"byte_end":69391,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"fn <I> (image: &I) -> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69331,"byte_end":69374,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69923,"byte_end":69929,"line_start":36,"line_end":36,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"fn <I> (image: &mut I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69830,"byte_end":69878,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69879,"byte_end":69915,"line_start":35,"line_end":35,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70392,"byte_end":70400,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"fn <I, P, S> (image: &I, contrast: f32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70193,"byte_end":70239,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70240,"byte_end":70299,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70300,"byte_end":70384,"line_start":51,"line_end":51,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71375,"byte_end":71383,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71201,"byte_end":71233,"line_start":84,"line_end":84,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71234,"byte_end":71290,"line_start":85,"line_end":85,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71291,"byte_end":71367,"line_start":86,"line_end":86,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72369,"byte_end":72378,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"fn <I, P, S> (image: &I, value: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72153,"byte_end":72187,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72188,"byte_end":72239,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72240,"byte_end":72309,"line_start":120,"line_end":120,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72310,"byte_end":72361,"line_start":121,"line_end":121,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":304},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74292,"byte_end":74300,"line_start":179,"line_end":179,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74266,"byte_end":74281,"line_start":178,"line_end":178,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":305},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74364,"byte_end":74369,"line_start":181,"line_end":181,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74307,"byte_end":74354,"line_start":180,"line_end":180,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74462,"byte_end":74470,"line_start":184,"line_end":184,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"fn (&self, color: &Self::Color) -> usize","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74375,"byte_end":74428,"line_start":182,"line_end":182,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74433,"byte_end":74454,"line_start":183,"line_end":183,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74678,"byte_end":74684,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"fn (&self, index: usize) -> Option<Self::Color>","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74513,"byte_end":74606,"line_start":185,"line_end":185,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74611,"byte_end":74670,"line_start":186,"line_end":186,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74865,"byte_end":74875,"line_start":192,"line_end":192,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"fn (&self) -> bool","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74777,"byte_end":74857,"line_start":191,"line_end":191,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74980,"byte_end":74989,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"fn (&self, color: &mut Self::Color) -> ()","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74917,"byte_end":74972,"line_start":195,"line_end":195,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76134,"byte_end":76141,"line_start":229,"line_end":229,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75026,"byte_end":75050,"line_start":199,"line_end":199,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75051,"byte_end":75054,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75055,"byte_end":75069,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75070,"byte_end":75077,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75078,"byte_end":75147,"line_start":203,"line_end":203,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75148,"byte_end":75183,"line_start":204,"line_end":204,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75184,"byte_end":75187,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75188,"byte_end":75214,"line_start":206,"line_end":206,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75215,"byte_end":75302,"line_start":207,"line_end":207,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75303,"byte_end":75398,"line_start":208,"line_end":208,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75399,"byte_end":75495,"line_start":209,"line_end":209,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75496,"byte_end":75569,"line_start":210,"line_end":210,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75570,"byte_end":75593,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75594,"byte_end":75642,"line_start":212,"line_end":212,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75643,"byte_end":75695,"line_start":213,"line_end":213,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75696,"byte_end":75739,"line_start":214,"line_end":214,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75740,"byte_end":75776,"line_start":215,"line_end":215,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75777,"byte_end":75826,"line_start":216,"line_end":216,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75827,"byte_end":75834,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75835,"byte_end":75893,"line_start":218,"line_end":218,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75894,"byte_end":75954,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75955,"byte_end":75980,"line_start":220,"line_end":220,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75981,"byte_end":76003,"line_start":221,"line_end":221,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76004,"byte_end":76020,"line_start":222,"line_end":222,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76021,"byte_end":76045,"line_start":223,"line_end":223,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76046,"byte_end":76055,"line_start":224,"line_end":224,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76056,"byte_end":76063,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76064,"byte_end":76091,"line_start":226,"line_end":226,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76092,"byte_end":76099,"line_start":227,"line_end":227,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":78546,"byte_end":78552,"line_start":319,"line_end":319,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"fn <Pix, Map> (image: &mut ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":78394,"byte_end":78475,"line_start":317,"line_end":317,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":78476,"byte_end":78538,"line_start":318,"line_end":318,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":80106,"byte_end":80118,"line_start":357,"line_end":357,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"fn <Pix, Map> (image: &ImageBuffer<Pix, Vec<u8>>, color_map: &Map) -> ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":80009,"byte_end":80098,"line_start":356,"line_end":356,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83810,"byte_end":83817,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":4147},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83785,"byte_end":83805,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4150},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83846,"byte_end":83854,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":4147},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83824,"byte_end":83841,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4152},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83882,"byte_end":83892,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":4147},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83861,"byte_end":83877,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83923,"byte_end":83931,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":4147},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83899,"byte_end":83918,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83968,"byte_end":83976,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":4147},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83938,"byte_end":83963,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4147},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83768,"byte_end":83778,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"FilterType::{Nearest, Triangle, CatmullRom, Gaussian, Lanczos3}","parent":null,"children":[{"krate":0,"index":4148},{"krate":0,"index":4150},{"krate":0,"index":4152},{"krate":0,"index":4154},{"krate":0,"index":4156}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81326,"byte_end":81357,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81358,"byte_end":81361,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81362,"byte_end":81377,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81378,"byte_end":81381,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81382,"byte_end":81460,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81461,"byte_end":81480,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81481,"byte_end":81564,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81565,"byte_end":81572,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81573,"byte_end":81652,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81653,"byte_end":81710,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81711,"byte_end":81714,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81715,"byte_end":81737,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81738,"byte_end":81829,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81830,"byte_end":81874,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81875,"byte_end":81878,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81879,"byte_end":81976,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81977,"byte_end":82051,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82052,"byte_end":82092,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82093,"byte_end":82231,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82232,"byte_end":82256,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82257,"byte_end":82269,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82270,"byte_end":82310,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82311,"byte_end":82449,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82450,"byte_end":82474,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82475,"byte_end":82487,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82488,"byte_end":82528,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82529,"byte_end":82669,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82670,"byte_end":82696,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82697,"byte_end":82709,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82710,"byte_end":82750,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82751,"byte_end":82891,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82892,"byte_end":82908,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82909,"byte_end":82921,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82922,"byte_end":82962,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82963,"byte_end":83102,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83103,"byte_end":83132,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83133,"byte_end":83145,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83146,"byte_end":83156,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83157,"byte_end":83160,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83161,"byte_end":83173,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83174,"byte_end":83177,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83178,"byte_end":83252,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83253,"byte_end":83300,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83301,"byte_end":83304,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83305,"byte_end":83337,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83338,"byte_end":83348,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83349,"byte_end":83373,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83374,"byte_end":83396,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83397,"byte_end":83408,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83409,"byte_end":83419,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83420,"byte_end":83445,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83446,"byte_end":83469,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83470,"byte_end":83481,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83482,"byte_end":83492,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83493,"byte_end":83520,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83521,"byte_end":83544,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83545,"byte_end":83556,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83557,"byte_end":83567,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83568,"byte_end":83593,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83594,"byte_end":83618,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83619,"byte_end":83630,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83631,"byte_end":83641,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83642,"byte_end":83667,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83668,"byte_end":83692,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83693,"byte_end":83704,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83705,"byte_end":83717,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93438,"byte_end":93447,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"fn <I, P, S> (image: &I, new_width: u32, new_height: u32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92692,"byte_end":92749,"line_start":381,"line_end":381,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92750,"byte_end":92753,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92754,"byte_end":92852,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92853,"byte_end":92948,"line_start":384,"line_end":384,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92949,"byte_end":92952,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92953,"byte_end":93047,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93048,"byte_end":93145,"line_start":387,"line_end":387,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93146,"byte_end":93242,"line_start":388,"line_end":388,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93243,"byte_end":93279,"line_start":389,"line_end":389,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93280,"byte_end":93283,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93284,"byte_end":93383,"line_start":391,"line_end":391,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93384,"byte_end":93430,"line_start":392,"line_end":392,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":101306,"byte_end":101315,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"fn <I, P, S> (image: &I, kernel: &[f32]) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":101183,"byte_end":101234,"line_start":630,"line_end":630,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":101235,"byte_end":101298,"line_start":631,"line_end":631,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103742,"byte_end":103748,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"fn <I> (image: &I, nwidth: u32, nheight: u32, filter: FilterType) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103569,"byte_end":103627,"line_start":709,"line_end":709,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103628,"byte_end":103686,"line_start":710,"line_end":710,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103687,"byte_end":103734,"line_start":711,"line_end":711,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":104874,"byte_end":104878,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"fn <I> (image: &I, sigma: f32) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":104762,"byte_end":104813,"line_start":749,"line_end":749,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":104814,"byte_end":104866,"line_start":750,"line_end":750,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105701,"byte_end":105710,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"fn <I, P, S> (image: &I, sigma: f32, threshold: i32) -> ImageBuffer<P, Vec<S>>","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105440,"byte_end":105493,"line_start":773,"line_end":773,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105494,"byte_end":105545,"line_start":774,"line_end":774,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105546,"byte_end":105609,"line_start":775,"line_end":775,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105610,"byte_end":105613,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105614,"byte_end":105693,"line_start":777,"line_end":777,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45934,"byte_end":45938,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"fn <I> (image: &mut I, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45887,"byte_end":45926,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46232,"byte_end":46240,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"fn <I> (image: &I, x: u32, y: u32, width: u32, height: u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46182,"byte_end":46224,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":49024,"byte_end":49038,"line_start":129,"line_end":129,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"fn ((bottom_width, bottom_height): (u32, u32), (top_width, top_height): (u32, u32), x: u32, y: u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46852,"byte_end":46915,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46916,"byte_end":46919,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46920,"byte_end":47017,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47018,"byte_end":47103,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47104,"byte_end":47141,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47142,"byte_end":47176,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47177,"byte_end":47228,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47229,"byte_end":47232,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47233,"byte_end":47326,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47327,"byte_end":47426,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47427,"byte_end":47447,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47448,"byte_end":47451,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47452,"byte_end":47508,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47509,"byte_end":47570,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47571,"byte_end":47621,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47622,"byte_end":47625,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47626,"byte_end":47725,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47726,"byte_end":47819,"line_start":91,"line_end":91,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47820,"byte_end":47893,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47894,"byte_end":47897,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47898,"byte_end":47909,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47910,"byte_end":47940,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47941,"byte_end":47996,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47997,"byte_end":48056,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48057,"byte_end":48125,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48126,"byte_end":48129,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48130,"byte_end":48232,"line_start":100,"line_end":100,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48233,"byte_end":48236,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48237,"byte_end":48248,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48249,"byte_end":48321,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48322,"byte_end":48359,"line_start":104,"line_end":104,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48360,"byte_end":48363,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48364,"byte_end":48385,"line_start":106,"line_end":106,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48386,"byte_end":48416,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48417,"byte_end":48460,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48461,"byte_end":48482,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48483,"byte_end":48504,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48505,"byte_end":48508,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48509,"byte_end":48572,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48573,"byte_end":48576,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48577,"byte_end":48592,"line_start":114,"line_end":114,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48593,"byte_end":48634,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48635,"byte_end":48664,"line_start":116,"line_end":116,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48665,"byte_end":48684,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48685,"byte_end":48688,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48689,"byte_end":48731,"line_start":119,"line_end":119,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48732,"byte_end":48735,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48736,"byte_end":48747,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48748,"byte_end":48820,"line_start":122,"line_end":122,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48821,"byte_end":48873,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48874,"byte_end":48914,"line_start":124,"line_end":124,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48915,"byte_end":48970,"line_start":125,"line_end":125,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48971,"byte_end":48978,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48979,"byte_end":48982,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48983,"byte_end":49016,"line_start":128,"line_end":128,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":49552,"byte_end":49559,"line_start":147,"line_end":147,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":49495,"byte_end":49544,"line_start":146,"line_end":146,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50578,"byte_end":50582,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"fn <I, J> (bottom: &mut I, top: &J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50218,"byte_end":50266,"line_start":169,"line_end":169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50267,"byte_end":50270,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50271,"byte_end":50285,"line_start":171,"line_end":171,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50286,"byte_end":50299,"line_start":172,"line_end":172,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50300,"byte_end":50327,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50328,"byte_end":50331,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50332,"byte_end":50347,"line_start":175,"line_end":175,"column_start":1,"column_end":16}},{"value":"/      let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50348,"byte_end":50398,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/      let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50399,"byte_end":50452,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50453,"byte_end":50456,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/      image::imageops::tile(&mut img, &tile);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50457,"byte_end":50505,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/      img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50506,"byte_end":50556,"line_start":180,"line_end":180,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50557,"byte_end":50562,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50563,"byte_end":50570,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51379,"byte_end":51396,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"fn <S, P, I> (img: &mut I, start: &P, stop: &P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n fn main() {\n     let mut img = RgbaImage::new(100, 100);\n     let start = Rgba::from_slice(&[0, 128, 0, 0]);\n     let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n     image::imageops::vertical_gradient(&mut img, start, end);\n     img.save(\"vertical_gradient.png\").unwrap();\n }\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50881,"byte_end":50931,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50932,"byte_end":50936,"line_start":196,"line_end":196,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50937,"byte_end":50984,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50985,"byte_end":50989,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50990,"byte_end":51004,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51005,"byte_end":51018,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51019,"byte_end":51059,"line_start":201,"line_end":201,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51060,"byte_end":51064,"line_start":202,"line_end":202,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51065,"byte_end":51080,"line_start":203,"line_end":203,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51081,"byte_end":51128,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51129,"byte_end":51183,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51184,"byte_end":51242,"line_start":206,"line_end":206,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51243,"byte_end":51247,"line_start":207,"line_end":207,"column_start":1,"column_end":5}},{"value":"/     image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51248,"byte_end":51313,"line_start":208,"line_end":208,"column_start":1,"column_end":66}},{"value":"/     img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51314,"byte_end":51365,"line_start":209,"line_end":209,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51366,"byte_end":51371,"line_start":210,"line_end":210,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52426,"byte_end":52445,"line_start":246,"line_end":246,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"fn <S, P, I> (img: &mut I, start: &P, stop: &P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51923,"byte_end":51975,"line_start":230,"line_end":230,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51976,"byte_end":51980,"line_start":231,"line_end":231,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51981,"byte_end":52028,"line_start":232,"line_end":232,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52029,"byte_end":52032,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52033,"byte_end":52047,"line_start":234,"line_end":234,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52048,"byte_end":52061,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52062,"byte_end":52102,"line_start":236,"line_end":236,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52103,"byte_end":52107,"line_start":237,"line_end":237,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52108,"byte_end":52123,"line_start":238,"line_end":238,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52124,"byte_end":52171,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52172,"byte_end":52226,"line_start":240,"line_end":240,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52227,"byte_end":52285,"line_start":241,"line_end":241,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52286,"byte_end":52290,"line_start":242,"line_end":242,"column_start":1,"column_end":5}},{"value":"/     image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52291,"byte_end":52358,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/     img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52359,"byte_end":52412,"line_start":244,"line_end":244,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52413,"byte_end":52418,"line_start":245,"line_end":245,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":53042,"byte_end":53049,"line_start":266,"line_end":266,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"fn <I, J> (bottom: &mut I, top: &J, x: u32, y: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52969,"byte_end":53034,"line_start":265,"line_end":265,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":493},{"krate":0,"index":550}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"! Input and output of images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","byte_start":108671,"byte_end":108702,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110899,"byte_end":110905,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109100,"byte_end":109132,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109133,"byte_end":109136,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109137,"byte_end":109230,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109231,"byte_end":109326,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109327,"byte_end":109330,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109331,"byte_end":109343,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109344,"byte_end":109347,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109348,"byte_end":109446,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109447,"byte_end":109544,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109545,"byte_end":109548,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109549,"byte_end":109562,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109563,"byte_end":109591,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109592,"byte_end":109620,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109621,"byte_end":109664,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109665,"byte_end":109715,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109716,"byte_end":109735,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109736,"byte_end":109750,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109751,"byte_end":109758,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109759,"byte_end":109762,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109763,"byte_end":109856,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109857,"byte_end":109953,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109954,"byte_end":110053,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110054,"byte_end":110057,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110153,"byte_end":110181,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110182,"byte_end":110210,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110211,"byte_end":110254,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110255,"byte_end":110279,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110280,"byte_end":110307,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110308,"byte_end":110311,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110312,"byte_end":110342,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110343,"byte_end":110357,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110358,"byte_end":110373,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110374,"byte_end":110377,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110378,"byte_end":110433,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110434,"byte_end":110464,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110465,"byte_end":110506,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110507,"byte_end":110563,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110564,"byte_end":110567,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110568,"byte_end":110601,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110602,"byte_end":110616,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110617,"byte_end":110624,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110625,"byte_end":110628,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110629,"byte_end":110727,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110728,"byte_end":110795,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110796,"byte_end":110799,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110800,"byte_end":110838,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110839,"byte_end":110887,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111426,"byte_end":111429,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"fn (reader: R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111069,"byte_end":111123,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111128,"byte_end":111131,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111136,"byte_end":111219,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111224,"byte_end":111303,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111308,"byte_end":111311,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111316,"byte_end":111372,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111377,"byte_end":111414,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111599,"byte_end":111610,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"fn (reader: R, format: ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111542,"byte_end":111587,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111804,"byte_end":111810,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"fn (&self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111752,"byte_end":111792,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111945,"byte_end":111955,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"fn (&mut self, format: ImageFormat) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111874,"byte_end":111933,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112285,"byte_end":112297,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112037,"byte_end":112092,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112097,"byte_end":112100,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112105,"byte_end":112199,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112204,"byte_end":112273,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112384,"byte_end":112394,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112350,"byte_end":112372,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112877,"byte_end":112881,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"fn <P> (path: P) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112471,"byte_end":112529,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112534,"byte_end":112537,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112542,"byte_end":112604,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112609,"byte_end":112612,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112617,"byte_end":112711,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112716,"byte_end":112796,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112801,"byte_end":112804,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112809,"byte_end":112865,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114523,"byte_end":114542,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"fn (mut self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113249,"byte_end":113319,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113324,"byte_end":113327,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113332,"byte_end":113421,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113426,"byte_end":113516,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113521,"byte_end":113571,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113576,"byte_end":113579,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113584,"byte_end":113676,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113681,"byte_end":113769,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113774,"byte_end":113802,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113807,"byte_end":113810,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113815,"byte_end":113906,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113911,"byte_end":113950,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113955,"byte_end":113958,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113963,"byte_end":113975,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113980,"byte_end":113983,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113988,"byte_end":114096,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114101,"byte_end":114193,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114198,"byte_end":114229,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114234,"byte_end":114237,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114242,"byte_end":114255,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114260,"byte_end":114288,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114293,"byte_end":114321,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114326,"byte_end":114369,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114374,"byte_end":114420,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114425,"byte_end":114456,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114461,"byte_end":114480,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114485,"byte_end":114499,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114504,"byte_end":114511,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115500,"byte_end":115515,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"fn (mut self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115287,"byte_end":115317,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115322,"byte_end":115325,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115330,"byte_end":115405,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115410,"byte_end":115413,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115418,"byte_end":115488,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115909,"byte_end":115915,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"fn (mut self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115689,"byte_end":115726,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115731,"byte_end":115734,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115739,"byte_end":115814,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115819,"byte_end":115822,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115827,"byte_end":115897,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":118028,"byte_end":118032,"line_start":67,"line_end":67,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"fn <R> (r: R, format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117815,"byte_end":117851,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117852,"byte_end":117855,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117856,"byte_end":117902,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117903,"byte_end":117906,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117907,"byte_end":117948,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117949,"byte_end":117975,"line_start":65,"line_end":65,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127931,"byte_end":127943,"line_start":289,"line_end":289,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"fn (buffer: &[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127670,"byte_end":127710,"line_start":284,"line_end":284,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127711,"byte_end":127714,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127715,"byte_end":127808,"line_start":286,"line_end":286,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127809,"byte_end":127851,"line_start":287,"line_end":287,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127852,"byte_end":127923,"line_start":288,"line_end":288,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":556},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":4166},{"krate":0,"index":4174},{"krate":0,"index":4171},{"krate":0,"index":4177},{"krate":0,"index":4197},{"krate":0,"index":4196},{"krate":0,"index":4194},{"krate":0,"index":4190},{"krate":0,"index":4191},{"krate":0,"index":4187},{"krate":0,"index":4188},{"krate":0,"index":4184},{"krate":0,"index":4199},{"krate":0,"index":4225},{"krate":0,"index":4224},{"krate":0,"index":4222},{"krate":0,"index":4218},{"krate":0,"index":4219},{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":4205},{"krate":0,"index":4203},{"krate":0,"index":578},{"krate":0,"index":601},{"krate":0,"index":605},{"krate":0,"index":647},{"krate":0,"index":4227},{"krate":0,"index":4236},{"krate":0,"index":4232},{"krate":0,"index":4240},{"krate":0,"index":4249},{"krate":0,"index":4245},{"krate":0,"index":4253},{"krate":0,"index":4275},{"krate":0,"index":4274},{"krate":0,"index":4272},{"krate":0,"index":4268},{"krate":0,"index":4269},{"krate":0,"index":4265},{"krate":0,"index":4266},{"krate":0,"index":4262},{"krate":0,"index":4277},{"krate":0,"index":4300},{"krate":0,"index":4299},{"krate":0,"index":4297},{"krate":0,"index":4294},{"krate":0,"index":4295},{"krate":0,"index":4291},{"krate":0,"index":4292},{"krate":0,"index":4288},{"krate":0,"index":652},{"krate":0,"index":665},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":684},{"krate":0,"index":688},{"krate":0,"index":700},{"krate":0,"index":712},{"krate":0,"index":720},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"! Image representations for ffi.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128719,"byte_end":128753,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128754,"byte_end":128757,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128758,"byte_end":128769,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128770,"byte_end":128773,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128774,"byte_end":128872,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"! your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128873,"byte_end":128972,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"! to help you transition from raw memory data to Rust representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128973,"byte_end":129044,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129045,"byte_end":129048,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129049,"byte_end":129062,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"! use std::ptr;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129063,"byte_end":129080,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"! use std::slice;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129081,"byte_end":129100,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"! use image::Rgb;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129101,"byte_end":129120,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"! use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129121,"byte_end":129170,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! use image::imageops::thumbnail;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129171,"byte_end":129206,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129207,"byte_end":129210,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129211,"byte_end":129227,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129228,"byte_end":129272,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"!     data: *const u8, len: usize,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129273,"byte_end":129309,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"!     layout: *const SampleLayout","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129310,"byte_end":129345,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"! )","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129346,"byte_end":129351,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"!     -> bool","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129352,"byte_end":129367,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"! {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129368,"byte_end":129373,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"!     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129374,"byte_end":129440,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"!     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129441,"byte_end":129491,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129492,"byte_end":129495,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"!     let buffer = FlatSamples {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129496,"byte_end":129530,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"!         samples,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129531,"byte_end":129551,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"!         layout,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129552,"byte_end":129571,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"!         color_hint: None,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129572,"byte_end":129601,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129602,"byte_end":129612,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129613,"byte_end":129616,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"!     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129617,"byte_end":129671,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"!         Err(_) => return false, // Invalid layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129672,"byte_end":129726,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"!         Ok(view) => view,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129727,"byte_end":129756,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129757,"byte_end":129767,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129768,"byte_end":129771,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"!     thumbnail(&view, 64, 64)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129772,"byte_end":129804,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"!         .save(\"output.png\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129805,"byte_end":129836,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"!         .map(|_| true)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129837,"byte_end":129863,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"!         .unwrap_or_else(|_| false)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129864,"byte_end":129902,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"! }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129903,"byte_end":129908,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129909,"byte_end":129916,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129917,"byte_end":129920,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131911,"byte_end":131922,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":4168},{"krate":0,"index":4169},{"krate":0,"index":4170}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130328,"byte_end":130375,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130376,"byte_end":130379,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130380,"byte_end":130477,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130478,"byte_end":130575,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130576,"byte_end":130672,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130673,"byte_end":130761,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130762,"byte_end":130861,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130862,"byte_end":130960,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130961,"byte_end":131010,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131011,"byte_end":131014,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131015,"byte_end":131106,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131107,"byte_end":131204,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131205,"byte_end":131302,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131303,"byte_end":131400,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131401,"byte_end":131462,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131463,"byte_end":131466,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131467,"byte_end":131515,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131516,"byte_end":131572,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131573,"byte_end":131660,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131661,"byte_end":131697,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131698,"byte_end":131754,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131755,"byte_end":131787,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131788,"byte_end":131828,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131829,"byte_end":131875,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":4168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132000,"byte_end":132007,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":4166},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131937,"byte_end":131991,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132091,"byte_end":132097,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":4166},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132022,"byte_end":132082,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":4170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132552,"byte_end":132562,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":4166},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132118,"byte_end":132154,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132159,"byte_end":132162,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132167,"byte_end":132252,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132257,"byte_end":132349,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132354,"byte_end":132443,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132448,"byte_end":132543,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":4177},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132712,"byte_end":132724,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":4178},{"krate":0,"index":4179},{"krate":0,"index":4180},{"krate":0,"index":4181},{"krate":0,"index":4182},{"krate":0,"index":4183}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132586,"byte_end":132638,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132639,"byte_end":132649,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132808,"byte_end":132816,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":4177},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132731,"byte_end":132799,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4179},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132902,"byte_end":132916,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":4177},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132827,"byte_end":132893,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4180},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132978,"byte_end":132983,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":4177},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132930,"byte_end":132969,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4181},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133070,"byte_end":133082,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":4177},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132995,"byte_end":133061,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133145,"byte_end":133151,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":4177},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133096,"byte_end":133136,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":4183},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133238,"byte_end":133251,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":4177},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133163,"byte_end":133229,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134226,"byte_end":134242,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133432,"byte_end":133488,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133493,"byte_end":133496,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133501,"byte_end":133596,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133601,"byte_end":133670,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133675,"byte_end":133678,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133683,"byte_end":133690,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133695,"byte_end":133745,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133750,"byte_end":133811,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133816,"byte_end":133874,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133879,"byte_end":133886,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133891,"byte_end":133894,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133899,"byte_end":133911,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133916,"byte_end":133919,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133924,"byte_end":134019,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134024,"byte_end":134115,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134120,"byte_end":134214,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135493,"byte_end":135512,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"fn (channels: u8, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134680,"byte_end":134739,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134744,"byte_end":134747,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134752,"byte_end":134842,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134847,"byte_end":134932,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134937,"byte_end":134940,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134945,"byte_end":134952,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134957,"byte_end":135007,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135012,"byte_end":135076,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135081,"byte_end":135142,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135147,"byte_end":135154,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135159,"byte_end":135162,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135167,"byte_end":135179,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135184,"byte_end":135187,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135192,"byte_end":135287,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135292,"byte_end":135382,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135387,"byte_end":135481,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136128,"byte_end":136139,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135953,"byte_end":136012,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136017,"byte_end":136020,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136025,"byte_end":136096,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136101,"byte_end":136116,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136456,"byte_end":136463,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136254,"byte_end":136305,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136310,"byte_end":136313,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136318,"byte_end":136411,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136416,"byte_end":136444,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136837,"byte_end":136843,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136585,"byte_end":136639,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136644,"byte_end":136647,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136652,"byte_end":136742,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136747,"byte_end":136825,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138996,"byte_end":139006,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136931,"byte_end":137021,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137026,"byte_end":137029,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137034,"byte_end":137129,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137134,"byte_end":137224,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137229,"byte_end":137320,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137325,"byte_end":137382,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137387,"byte_end":137390,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137395,"byte_end":137412,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137417,"byte_end":137420,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137425,"byte_end":137509,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137514,"byte_end":137605,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137610,"byte_end":137613,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137618,"byte_end":137643,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137648,"byte_end":137651,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137656,"byte_end":137710,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137715,"byte_end":137739,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137744,"byte_end":137761,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137766,"byte_end":137791,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137796,"byte_end":137814,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137819,"byte_end":137822,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137827,"byte_end":137838,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137843,"byte_end":137866,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137871,"byte_end":137890,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137895,"byte_end":137937,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137942,"byte_end":137949,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137954,"byte_end":137957,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137962,"byte_end":138054,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138059,"byte_end":138149,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138154,"byte_end":138157,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138162,"byte_end":138190,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138195,"byte_end":138198,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138203,"byte_end":138295,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138300,"byte_end":138394,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138399,"byte_end":138454,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138459,"byte_end":138462,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138467,"byte_end":138491,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138496,"byte_end":138513,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138518,"byte_end":138543,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138548,"byte_end":138566,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138571,"byte_end":138574,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138579,"byte_end":138590,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138595,"byte_end":138611,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138616,"byte_end":138635,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138640,"byte_end":138663,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138668,"byte_end":138697,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138702,"byte_end":138737,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138742,"byte_end":138749,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138754,"byte_end":138757,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138762,"byte_end":138856,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138861,"byte_end":138954,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138959,"byte_end":138984,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":139338,"byte_end":139342,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":139272,"byte_end":139326,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140452,"byte_end":140471,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140102,"byte_end":140151,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140156,"byte_end":140159,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140164,"byte_end":140257,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140262,"byte_end":140356,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140361,"byte_end":140440,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141716,"byte_end":141725,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141206,"byte_end":141271,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141276,"byte_end":141279,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141284,"byte_end":141377,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141382,"byte_end":141477,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141482,"byte_end":141574,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141579,"byte_end":141673,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141678,"byte_end":141704,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143423,"byte_end":143432,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143081,"byte_end":143142,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143147,"byte_end":143150,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143155,"byte_end":143244,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143249,"byte_end":143343,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143348,"byte_end":143411,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143706,"byte_end":143711,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143559,"byte_end":143604,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143609,"byte_end":143612,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143617,"byte_end":143694,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144305,"byte_end":144326,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143934,"byte_end":143993,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143998,"byte_end":144001,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144006,"byte_end":144095,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144100,"byte_end":144194,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144199,"byte_end":144293,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145257,"byte_end":145272,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"fn (&self, c: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144956,"byte_end":144996,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145001,"byte_end":145004,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145009,"byte_end":145101,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145106,"byte_end":145201,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145206,"byte_end":145245,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145800,"byte_end":145809,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145475,"byte_end":145540,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145545,"byte_end":145548,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145553,"byte_end":145641,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145646,"byte_end":145741,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145746,"byte_end":145788,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146482,"byte_end":146493,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146307,"byte_end":146366,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146371,"byte_end":146374,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146379,"byte_end":146450,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146455,"byte_end":146470,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146775,"byte_end":146782,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"fn (&self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146573,"byte_end":146624,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146629,"byte_end":146632,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146637,"byte_end":146730,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146735,"byte_end":146763,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147110,"byte_end":147116,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"fn (&self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146858,"byte_end":146912,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146917,"byte_end":146920,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146925,"byte_end":147015,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147020,"byte_end":147098,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147230,"byte_end":147236,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"fn <T> (&self) -> FlatSamples<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147184,"byte_end":147218,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147510,"byte_end":147516,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"fn <T> (&mut self) -> FlatSamples<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147456,"byte_end":147498,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147795,"byte_end":147801,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"fn <T> (&self) -> FlatSamples<Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147744,"byte_end":147783,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149074,"byte_end":149084,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"fn <T> (&self, channel: u8, x: u32, y: u32) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148054,"byte_end":148093,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148098,"byte_end":148101,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148106,"byte_end":148201,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148206,"byte_end":148284,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148289,"byte_end":148292,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148297,"byte_end":148304,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148309,"byte_end":148337,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148342,"byte_end":148401,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148406,"byte_end":148409,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148414,"byte_end":148454,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148459,"byte_end":148509,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148514,"byte_end":148517,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148522,"byte_end":148555,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148560,"byte_end":148610,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148615,"byte_end":148622,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148627,"byte_end":148630,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148635,"byte_end":148725,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148730,"byte_end":148811,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148816,"byte_end":148911,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148916,"byte_end":149003,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149008,"byte_end":149062,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150681,"byte_end":150695,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"fn <T> (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149271,"byte_end":149318,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149323,"byte_end":149326,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149331,"byte_end":149420,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149425,"byte_end":149512,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149517,"byte_end":149612,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149617,"byte_end":149680,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149685,"byte_end":149688,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149693,"byte_end":149787,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149792,"byte_end":149861,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149866,"byte_end":149869,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149874,"byte_end":149881,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149886,"byte_end":149914,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149919,"byte_end":149982,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149987,"byte_end":149990,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149995,"byte_end":150056,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150061,"byte_end":150112,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150117,"byte_end":150120,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150125,"byte_end":150158,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150163,"byte_end":150217,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150222,"byte_end":150229,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150234,"byte_end":150237,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150242,"byte_end":150332,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150337,"byte_end":150418,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150423,"byte_end":150518,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150523,"byte_end":150610,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150615,"byte_end":150669,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151359,"byte_end":151366,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"fn <P> (&self) -> Result<View<&[P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150947,"byte_end":151004,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151009,"byte_end":151012,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151017,"byte_end":151107,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151112,"byte_end":151206,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151211,"byte_end":151305,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151310,"byte_end":151347,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152943,"byte_end":152967,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"fn <P> (&mut self) -> Result<View<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151978,"byte_end":152037,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152042,"byte_end":152045,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152050,"byte_end":152142,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152147,"byte_end":152238,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152243,"byte_end":152336,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152341,"byte_end":152372,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152377,"byte_end":152380,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152385,"byte_end":152475,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152480,"byte_end":152574,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152579,"byte_end":152673,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152678,"byte_end":152715,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152720,"byte_end":152723,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152728,"byte_end":152822,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152827,"byte_end":152913,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152918,"byte_end":152931,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154330,"byte_end":154341,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"fn <P> (&mut self) -> Result<ViewMut<&mut [P::Subpixel], P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153587,"byte_end":153632,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153637,"byte_end":153640,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153645,"byte_end":153735,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153740,"byte_end":153827,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153832,"byte_end":153899,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153904,"byte_end":153907,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153912,"byte_end":154007,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154012,"byte_end":154105,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154110,"byte_end":154205,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154210,"byte_end":154285,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154290,"byte_end":154318,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155338,"byte_end":155346,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"fn <T> (&self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155114,"byte_end":155146,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155151,"byte_end":155154,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155159,"byte_end":155251,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155256,"byte_end":155326,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155657,"byte_end":155669,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"fn <T> (&mut self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155433,"byte_end":155465,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155470,"byte_end":155473,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155478,"byte_end":155570,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155575,"byte_end":155645,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156100,"byte_end":156111,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"fn <T> (&self) -> Option<&[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155764,"byte_end":155826,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155831,"byte_end":155834,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155839,"byte_end":155934,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155939,"byte_end":156034,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156039,"byte_end":156088,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156528,"byte_end":156543,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"fn <T> (&mut self) -> Option<&mut [T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156457,"byte_end":156516,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157197,"byte_end":157212,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"fn <P> (self) -> Result<ImageBuffer<P, Buffer>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156901,"byte_end":156940,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156945,"byte_end":156948,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156953,"byte_end":157049,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157054,"byte_end":157149,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157154,"byte_end":157185,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160048,"byte_end":160058,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157983,"byte_end":158073,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158078,"byte_end":158081,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158086,"byte_end":158181,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158186,"byte_end":158276,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158281,"byte_end":158372,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158377,"byte_end":158434,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158439,"byte_end":158442,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158447,"byte_end":158464,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158469,"byte_end":158472,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158477,"byte_end":158561,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158566,"byte_end":158657,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158662,"byte_end":158665,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158670,"byte_end":158695,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158700,"byte_end":158703,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158708,"byte_end":158762,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158767,"byte_end":158791,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158796,"byte_end":158813,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158818,"byte_end":158843,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158848,"byte_end":158866,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158871,"byte_end":158874,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158879,"byte_end":158890,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158895,"byte_end":158918,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158923,"byte_end":158942,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158947,"byte_end":158989,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158994,"byte_end":159001,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159006,"byte_end":159009,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159014,"byte_end":159106,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159111,"byte_end":159201,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159206,"byte_end":159209,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159214,"byte_end":159242,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159247,"byte_end":159250,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159255,"byte_end":159347,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159352,"byte_end":159446,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159451,"byte_end":159506,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159511,"byte_end":159514,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159519,"byte_end":159543,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159548,"byte_end":159565,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159570,"byte_end":159595,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159600,"byte_end":159618,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159623,"byte_end":159626,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159631,"byte_end":159642,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159647,"byte_end":159663,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159668,"byte_end":159687,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159692,"byte_end":159715,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159720,"byte_end":159749,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159754,"byte_end":159789,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159794,"byte_end":159801,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159806,"byte_end":159809,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159814,"byte_end":159908,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159913,"byte_end":160006,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160011,"byte_end":160036,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160195,"byte_end":160199,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"fn (&self, len: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160129,"byte_end":160183,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160620,"byte_end":160639,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160270,"byte_end":160319,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160324,"byte_end":160327,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160332,"byte_end":160425,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160430,"byte_end":160524,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160529,"byte_end":160608,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161220,"byte_end":161229,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"fn (&self, form: NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160710,"byte_end":160775,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160780,"byte_end":160783,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160788,"byte_end":160881,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160886,"byte_end":160981,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160986,"byte_end":161078,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161083,"byte_end":161177,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161182,"byte_end":161208,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161654,"byte_end":161663,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"fn (&self, channel: u8, x: u32, y: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161312,"byte_end":161373,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161378,"byte_end":161381,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161386,"byte_end":161475,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161480,"byte_end":161574,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161579,"byte_end":161642,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161913,"byte_end":161918,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161766,"byte_end":161811,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161816,"byte_end":161819,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161824,"byte_end":161901,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162397,"byte_end":162418,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"fn (&self, channel: usize, x: usize, y: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162026,"byte_end":162085,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162090,"byte_end":162093,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162098,"byte_end":162187,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162192,"byte_end":162286,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162291,"byte_end":162385,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162850,"byte_end":162865,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"fn (&self, channel: u8, x: u32, y: u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162549,"byte_end":162589,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162594,"byte_end":162597,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162602,"byte_end":162694,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162699,"byte_end":162794,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162799,"byte_end":162838,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163300,"byte_end":163309,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"fn (&mut self, channels: u8, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162975,"byte_end":163040,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163045,"byte_end":163048,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163053,"byte_end":163141,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163146,"byte_end":163241,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163246,"byte_end":163288,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164195,"byte_end":164209,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"fn <P> (pixel: &'buf P, width: u32, height: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163483,"byte_end":163532,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163537,"byte_end":163540,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163545,"byte_end":163640,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163645,"byte_end":163706,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163711,"byte_end":163714,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163719,"byte_end":163734,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163739,"byte_end":163742,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163747,"byte_end":163754,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163759,"byte_end":163795,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163800,"byte_end":163864,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163869,"byte_end":163872,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163877,"byte_end":163916,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163921,"byte_end":163986,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163991,"byte_end":163994,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163999,"byte_end":164043,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164048,"byte_end":164080,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164085,"byte_end":164088,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164093,"byte_end":164116,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164121,"byte_end":164171,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164176,"byte_end":164183,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4227},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165414,"byte_end":165418,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":4230},{"krate":0,"index":4231}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164712,"byte_end":164764,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164765,"byte_end":164768,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164769,"byte_end":164867,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164868,"byte_end":164917,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164918,"byte_end":164921,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164922,"byte_end":165020,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165021,"byte_end":165120,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165121,"byte_end":165191,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165192,"byte_end":165195,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165196,"byte_end":165218,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165219,"byte_end":165222,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165223,"byte_end":165306,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165307,"byte_end":165374,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165375,"byte_end":165378,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166264,"byte_end":166271,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":4243},{"krate":0,"index":4244}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165542,"byte_end":165588,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165589,"byte_end":165592,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165593,"byte_end":165690,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165691,"byte_end":165789,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165790,"byte_end":165887,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165888,"byte_end":165929,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165930,"byte_end":165933,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165934,"byte_end":165956,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165957,"byte_end":165960,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165961,"byte_end":166044,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166045,"byte_end":166082,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166083,"byte_end":166156,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166157,"byte_end":166224,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166225,"byte_end":166228,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4254},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166979,"byte_end":166987,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":4253},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166856,"byte_end":166896,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166901,"byte_end":166904,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166909,"byte_end":166974,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4256},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167144,"byte_end":167162,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":4253},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166994,"byte_end":167052,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167057,"byte_end":167060,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167065,"byte_end":167139,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167771,"byte_end":167781,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":4253},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167181,"byte_end":167234,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167239,"byte_end":167242,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167247,"byte_end":167338,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167343,"byte_end":167383,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167388,"byte_end":167391,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167396,"byte_end":167491,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167496,"byte_end":167587,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167592,"byte_end":167687,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167692,"byte_end":167766,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":4253},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166844,"byte_end":166849,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"Error::{TooLarge, NormalFormRequired, WrongColor}","parent":null,"children":[{"krate":0,"index":4254},{"krate":0,"index":4256},{"krate":0,"index":4259}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166395,"byte_end":166476,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166477,"byte_end":166480,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166481,"byte_end":166554,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166555,"byte_end":166631,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166632,"byte_end":166709,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166710,"byte_end":166783,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4278},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168280,"byte_end":168289,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":4277},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168057,"byte_end":168086,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168091,"byte_end":168094,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168099,"byte_end":168182,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168187,"byte_end":168275,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168519,"byte_end":168530,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":4277},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168296,"byte_end":168327,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168332,"byte_end":168335,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168340,"byte_end":168428,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168433,"byte_end":168514,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168814,"byte_end":168825,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":4277},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168537,"byte_end":168564,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168569,"byte_end":168572,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168577,"byte_end":168670,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168675,"byte_end":168765,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168770,"byte_end":168809,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169035,"byte_end":169049,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":4277},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168832,"byte_end":168897,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168902,"byte_end":168905,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168910,"byte_end":169003,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169008,"byte_end":169030,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169265,"byte_end":169282,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":4277},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169056,"byte_end":169124,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169129,"byte_end":169132,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169137,"byte_end":169230,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169235,"byte_end":169260,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4277},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168040,"byte_end":168050,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"NormalForm::{Unaliased, PixelPacked, ImagePacked, RowMajorPacked, ColumnMajorPacked}","parent":null,"children":[{"krate":0,"index":4278},{"krate":0,"index":4280},{"krate":0,"index":4282},{"krate":0,"index":4284},{"krate":0,"index":4286}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167797,"byte_end":167835,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167836,"byte_end":167839,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167840,"byte_end":167939,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167940,"byte_end":167979,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169490,"byte_end":169500,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169371,"byte_end":169402,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169407,"byte_end":169410,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169415,"byte_end":169478,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169983,"byte_end":169987,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169562,"byte_end":169613,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169618,"byte_end":169621,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169626,"byte_end":169715,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169720,"byte_end":169813,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169818,"byte_end":169905,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169910,"byte_end":169971,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170266,"byte_end":170273,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170052,"byte_end":170092,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170097,"byte_end":170100,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170105,"byte_end":170195,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170200,"byte_end":170254,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170592,"byte_end":170602,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170333,"byte_end":170395,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170400,"byte_end":170403,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170408,"byte_end":170498,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170503,"byte_end":170580,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171476,"byte_end":171490,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170934,"byte_end":171004,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171009,"byte_end":171012,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171017,"byte_end":171111,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171116,"byte_end":171211,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171216,"byte_end":171283,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171288,"byte_end":171291,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171296,"byte_end":171390,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171395,"byte_end":171464,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172067,"byte_end":172077,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171885,"byte_end":171975,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171980,"byte_end":171983,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171988,"byte_end":172055,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172411,"byte_end":172422,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172148,"byte_end":172210,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172215,"byte_end":172218,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172223,"byte_end":172314,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172319,"byte_end":172399,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172879,"byte_end":172894,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172515,"byte_end":172585,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172590,"byte_end":172593,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172598,"byte_end":172692,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172697,"byte_end":172793,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172798,"byte_end":172867,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173417,"byte_end":173426,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173087,"byte_end":173114,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173119,"byte_end":173122,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173127,"byte_end":173214,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173219,"byte_end":173312,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173317,"byte_end":173405,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174430,"byte_end":174441,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"fn (self) -> Result<ViewMut<Buffer, P>, (Error, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173581,"byte_end":173639,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173644,"byte_end":173647,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173652,"byte_end":173747,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173752,"byte_end":173842,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173847,"byte_end":173935,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173940,"byte_end":174016,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174021,"byte_end":174024,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174029,"byte_end":174036,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174041,"byte_end":174067,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174072,"byte_end":174093,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174098,"byte_end":174163,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174168,"byte_end":174237,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174242,"byte_end":174245,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174250,"byte_end":174281,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174286,"byte_end":174289,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174294,"byte_end":174354,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174359,"byte_end":174406,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174411,"byte_end":174418,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175082,"byte_end":175092,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"fn (self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174963,"byte_end":174994,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174999,"byte_end":175002,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175007,"byte_end":175070,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175576,"byte_end":175580,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"fn (&self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175154,"byte_end":175206,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175211,"byte_end":175214,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175219,"byte_end":175308,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175313,"byte_end":175406,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175411,"byte_end":175498,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175503,"byte_end":175564,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175953,"byte_end":175960,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"fn (&self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175645,"byte_end":175685,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175690,"byte_end":175693,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175698,"byte_end":175788,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175793,"byte_end":175885,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175890,"byte_end":175941,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176202,"byte_end":176212,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176020,"byte_end":176110,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176115,"byte_end":176118,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176123,"byte_end":176190,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176523,"byte_end":176533,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"fn (&self, channel: u8, x: u32, y: u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176283,"byte_end":176326,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176331,"byte_end":176334,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176339,"byte_end":176429,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176434,"byte_end":176511,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177158,"byte_end":177172,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"fn (&mut self, channel: u8, x: u32, y: u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176912,"byte_end":176961,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176966,"byte_end":176969,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176974,"byte_end":177064,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177069,"byte_end":177146,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177783,"byte_end":177794,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"fn (&self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177520,"byte_end":177582,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177587,"byte_end":177590,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177595,"byte_end":177686,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177691,"byte_end":177771,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177993,"byte_end":178008,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"fn (&mut self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177926,"byte_end":177981,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178476,"byte_end":178485,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"fn (&mut self, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178146,"byte_end":178173,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178178,"byte_end":178181,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178186,"byte_end":178273,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178278,"byte_end":178371,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178376,"byte_end":178464,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":730},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":943}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8771,"byte_end":8794,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of BMP Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191661,"byte_end":191701,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191702,"byte_end":191705,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191706,"byte_end":191764,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191765,"byte_end":191768,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191769,"byte_end":191789,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191790,"byte_end":191882,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"!  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191883,"byte_end":191937,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191938,"byte_end":191941,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":841},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210078,"byte_end":210088,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210049,"byte_end":210066,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212656,"byte_end":212659,"line_start":632,"line_end":632,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212583,"byte_end":212644,"line_start":631,"line_end":631,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":224457,"byte_end":224484,"line_start":945,"line_end":945,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BmpDecoder<R>>::read_metadata_in_ico_format","value":"fn (&mut self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":224403,"byte_end":224426,"line_start":943,"line_end":943,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244413,"byte_end":244422,"line_start":1419,"line_end":1419,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244356,"byte_end":244401,"line_start":1418,"line_end":1418,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247048,"byte_end":247058,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BmpEncoder","qualname":"::bmp::encoder::BmpEncoder","value":"BmpEncoder {  }","parent":null,"children":[{"krate":0,"index":963}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":246996,"byte_end":247036,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":964},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247296,"byte_end":247306,"line_start":26,"line_end":26,"column_start":10,"column_end":20},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BmpEncoder<'a, W>","parent":null,"children":[],"decl_id":null,"docs":" BMP Encoder","sig":null,"attributes":[{"value":"/ BMP Encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247098,"byte_end":247113,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247114,"byte_end":247117,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ An alias of [`BmpEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247118,"byte_end":247149,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247150,"byte_end":247153,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247154,"byte_end":247170,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247171,"byte_end":247174,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [`BmpEncoder`]: struct.BmpEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247175,"byte_end":247217,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247218,"byte_end":247237,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `BmpEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247238,"byte_end":247286,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247455,"byte_end":247458,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpEncoder>::new","value":"fn (w: &'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247384,"byte_end":247443,"line_start":29,"line_end":29,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247666,"byte_end":247672,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"encode","qualname":"<BmpEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, c: color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247527,"byte_end":247560,"line_start":34,"line_end":34,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247565,"byte_end":247617,"line_start":35,"line_end":35,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247622,"byte_end":247654,"line_start":36,"line_end":36,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dds","qualname":"::dds","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","parent":null,"children":[{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":998},{"krate":0,"index":1005},{"krate":0,"index":4490},{"krate":0,"index":4523},{"krate":0,"index":4522},{"krate":0,"index":4520},{"krate":0,"index":4517},{"krate":0,"index":4513},{"krate":0,"index":4514},{"krate":0,"index":4510},{"krate":0,"index":4511},{"krate":0,"index":4504},{"krate":0,"index":4502},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":4525},{"krate":0,"index":4535},{"krate":0,"index":4537},{"krate":0,"index":4546},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1029}],"decl_id":null,"docs":"  Decoding of DDS images","sig":null,"attributes":[{"value":"cfg(feature = \"dds\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8808,"byte_end":8831,"line_start":214,"line_end":214,"column_start":1,"column_end":24}},{"value":"!  Decoding of DDS images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":258624,"byte_end":258651,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":258652,"byte_end":258655,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  DDS (DirectDraw Surface) is a container format for storing DXT (S3TC) compressed images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":258656,"byte_end":258749,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":258750,"byte_end":258753,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":258754,"byte_end":258774,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide> - Description of the DDS format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":258775,"byte_end":258898,"line_start":6,"line_end":6,"column_start":1,"column_end":124}}]},{"kind":"Struct","id":{"krate":0,"index":1022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":263330,"byte_end":263340,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"DdsDecoder","qualname":"::dds::DdsDecoder","value":"DdsDecoder {  }","parent":null,"children":[{"krate":0,"index":1024}],"decl_id":null,"docs":" The representation of a DDS decoder\n","sig":null,"attributes":[{"value":"/ The representation of a DDS decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":263279,"byte_end":263318,"line_start":154,"line_end":154,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":263484,"byte_end":263487,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<DdsDecoder<R>>::new","value":"fn (mut r: R) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":263415,"byte_end":263472,"line_start":160,"line_end":160,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":1038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::dxt","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","parent":null,"children":[{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1052},{"krate":0,"index":4548},{"krate":0,"index":4564},{"krate":0,"index":4563},{"krate":0,"index":4561},{"krate":0,"index":4558},{"krate":0,"index":4559},{"krate":0,"index":4555},{"krate":0,"index":4556},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1063},{"krate":0,"index":1070},{"krate":0,"index":1074},{"krate":0,"index":1083},{"krate":0,"index":1091},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1133},{"krate":0,"index":1144},{"krate":0,"index":1148},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8845,"byte_end":8868,"line_start":216,"line_end":216,"column_start":1,"column_end":24}},{"value":"!  Decoding of DXT (S3TC) compression","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265388,"byte_end":265427,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265428,"byte_end":265431,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  DXT is an image format that supports lossy compression","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265432,"byte_end":265491,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265492,"byte_end":265495,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265496,"byte_end":265516,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_s3tc.txt> - Description of the DXT compression OpenGL extensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265517,"byte_end":265669,"line_start":6,"line_end":6,"column_start":1,"column_end":153}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265670,"byte_end":265673,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"!  Note: this module only implements bare DXT encoding/decoding, it does not parse formats that can contain DXT files like .dds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":265674,"byte_end":265803,"line_start":8,"line_end":8,"column_start":1,"column_end":130}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4549},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266585,"byte_end":266589,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":4548},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[{"value":"/ The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266461,"byte_end":266527,"line_start":28,"line_end":28,"column_start":5,"column_end":71}},{"value":"/ compressed into an 8 byte block of DXT1 data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266532,"byte_end":266580,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266720,"byte_end":266724,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":4548},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[{"value":"/ The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266595,"byte_end":266662,"line_start":31,"line_end":31,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT3 data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266667,"byte_end":266715,"line_start":32,"line_end":32,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4553},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266855,"byte_end":266859,"line_start":36,"line_end":36,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":4548},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[{"value":"/ The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266730,"byte_end":266797,"line_start":34,"line_end":34,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT5 data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266802,"byte_end":266850,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":4548},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266444,"byte_end":266454,"line_start":27,"line_end":27,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::dxt::DXTVariant","value":"DXTVariant::{DXT1, DXT3, DXT5}","parent":null,"children":[{"krate":0,"index":4549},{"krate":0,"index":4551},{"krate":0,"index":4553}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha","sig":null,"attributes":[{"value":"/ What version of DXT compression are we using?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266078,"byte_end":266127,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ Note that DXT2 and DXT4 are left away as they're","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266128,"byte_end":266180,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/ just DXT3 and DXT5 with premultiplied alpha","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266181,"byte_end":266228,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266229,"byte_end":266232,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: The name of this enum will be changed to [`DxtVariant`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266233,"byte_end":266305,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266306,"byte_end":266309,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ TODO: rename to [`DxtVariant`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266310,"byte_end":266344,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266345,"byte_end":266348,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`DxtVariant`]: type.DxtVariant.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266349,"byte_end":266389,"line_start":25,"line_end":25,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267056,"byte_end":267066,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"DxtVariant","qualname":"::dxt::DxtVariant","value":"DXTVariant","parent":null,"children":[],"decl_id":null,"docs":" DXT compression version.","sig":null,"attributes":[{"value":"/ DXT compression version.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266864,"byte_end":266892,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266893,"byte_end":266896,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DXTVariant`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266897,"byte_end":266928,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266929,"byte_end":266932,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ TODO: remove when [`DXTVariant`] is renamed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266933,"byte_end":266981,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266982,"byte_end":266985,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`DXTVariant`]: enum.DXTVariant.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":266986,"byte_end":267026,"line_start":45,"line_end":45,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267027,"byte_end":267046,"line_start":46,"line_end":46,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267698,"byte_end":267708,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"color_type","qualname":"<DXTVariant>::color_type","value":"fn (self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the color type that is stored in this DXT variant\n","sig":null,"attributes":[{"value":"/ Returns the color type that is stored in this DXT variant","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267625,"byte_end":267686,"line_start":67,"line_end":67,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1063},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267915,"byte_end":267925,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"DxtDecoder","qualname":"::dxt::DxtDecoder","value":"DxtDecoder {  }","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[{"value":"/ DXT decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267888,"byte_end":267903,"line_start":76,"line_end":76,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268505,"byte_end":268508,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtDecoder<R>>::new","value":"fn (r: R, width: u32, height: u32, variant: DXTVariant) -> Result<DxtDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[{"value":"/ Create a new DXT decoder that decodes from the stream ```r```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268074,"byte_end":268140,"line_start":86,"line_end":86,"column_start":5,"column_end":71}},{"value":"/ As DXT is often stored as raw buffers with the width/height","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268145,"byte_end":268208,"line_start":87,"line_end":87,"column_start":5,"column_end":68}},{"value":"/ somewhere else the width and height of the image need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268213,"byte_end":268270,"line_start":88,"line_end":88,"column_start":5,"column_end":62}},{"value":"/ to be passed in ```width``` and ```height```, as well as the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268275,"byte_end":268339,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/ DXT variant in ```variant```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268344,"byte_end":268377,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/ width and height are required to be powers of 2 and at least 4.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268382,"byte_end":268449,"line_start":91,"line_end":91,"column_start":5,"column_end":72}},{"value":"/ otherwise an error will be returned","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268454,"byte_end":268493,"line_start":92,"line_end":92,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1091},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":271878,"byte_end":271887,"line_start":194,"line_end":194,"column_start":12,"column_end":21},"name":"DxtReader","qualname":"::dxt::DxtReader","value":"DxtReader {  }","parent":null,"children":[{"krate":0,"index":1093},{"krate":0,"index":1094}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":271852,"byte_end":271866,"line_start":193,"line_end":193,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":1095},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272152,"byte_end":272161,"line_start":208,"line_end":208,"column_start":10,"column_end":19},"name":"DXTReader","qualname":"::dxt::DXTReader","value":"DxtReader<R>","parent":null,"children":[],"decl_id":null,"docs":" DXT reader","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":271959,"byte_end":271973,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":271974,"byte_end":271977,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DxtReader`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":271978,"byte_end":272008,"line_start":201,"line_end":201,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272009,"byte_end":272012,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272013,"byte_end":272029,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272030,"byte_end":272033,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ [`DxtReader`]: struct.DxtReader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272034,"byte_end":272074,"line_start":205,"line_end":205,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272075,"byte_end":272094,"line_start":206,"line_end":206,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `DxtReader` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272095,"byte_end":272142,"line_start":207,"line_end":207,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272423,"byte_end":272433,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"DxtEncoder","qualname":"::dxt::DxtEncoder","value":"DxtEncoder {  }","parent":null,"children":[{"krate":0,"index":1103}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272396,"byte_end":272411,"line_start":217,"line_end":217,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272657,"byte_end":272667,"line_start":231,"line_end":231,"column_start":10,"column_end":20},"name":"DXTEncoder","qualname":"::dxt::DXTEncoder","value":"DxtEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" DXT encoder","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272459,"byte_end":272474,"line_start":222,"line_end":222,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272475,"byte_end":272478,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DxtEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272479,"byte_end":272510,"line_start":224,"line_end":224,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272511,"byte_end":272514,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272515,"byte_end":272531,"line_start":226,"line_end":226,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272532,"byte_end":272535,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ [`DxtEncoder`]: struct.DxtEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272536,"byte_end":272578,"line_start":228,"line_end":228,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272579,"byte_end":272598,"line_start":229,"line_end":229,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `DxtEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272599,"byte_end":272647,"line_start":230,"line_end":230,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272794,"byte_end":272797,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtEncoder<W>>::new","value":"fn (w: W) -> DxtEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272724,"byte_end":272782,"line_start":234,"line_end":234,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":273061,"byte_end":273067,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"encode","qualname":"<DxtEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, variant: DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.color_type()\n","sig":null,"attributes":[{"value":"/ Encodes the image data ```data```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272859,"byte_end":272896,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272901,"byte_end":272953,"line_start":240,"line_end":240,"column_start":5,"column_end":57}},{"value":"/ in ```DXTVariant``` ```variant```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272958,"byte_end":272995,"line_start":241,"line_end":241,"column_start":5,"column_end":42}},{"value":"/ data is assumed to be in variant.color_type()","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":273000,"byte_end":273049,"line_start":242,"line_end":242,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1189},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1206},{"krate":0,"index":1210},{"krate":0,"index":1220},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1235},{"krate":0,"index":1239},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1259}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8882,"byte_end":8905,"line_start":218,"line_end":218,"column_start":1,"column_end":24}},{"value":"!  Decoding of GIF Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295073,"byte_end":295100,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295101,"byte_end":295104,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  GIF (Graphics Interchange Format) is an image format that supports lossless compression.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295105,"byte_end":295198,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295199,"byte_end":295202,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295203,"byte_end":295223,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <http://www.w3.org/Graphics/GIF/spec-gif89a.txt> - The GIF Specification","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295224,"byte_end":295303,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295304,"byte_end":295307,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295308,"byte_end":295322,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"! ```rust,no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295323,"byte_end":295341,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"! use image::gif::{GifDecoder, GifEncoder};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295342,"byte_end":295387,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"! use image::{ImageDecoder, AnimationDecoder};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295388,"byte_end":295436,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"! use std::fs::File;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295437,"byte_end":295459,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"! # fn main() -> std::io::Result<()> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295460,"byte_end":295500,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! // Decode a gif into frames","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295501,"byte_end":295532,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"! let file_in = File::open(\"foo.gif\")?;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295533,"byte_end":295574,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"! let mut decoder = GifDecoder::new(file_in).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295575,"byte_end":295631,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"! let frames = decoder.into_frames();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295632,"byte_end":295671,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"! let frames = frames.collect_frames().expect(\"error decoding gif\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295672,"byte_end":295742,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295743,"byte_end":295746,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! // Encode frames into a gif and save to a file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295747,"byte_end":295797,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"! let mut file_out = File::open(\"out.gif\")?;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295798,"byte_end":295844,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"! let mut encoder = GifEncoder::new(file_out);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295845,"byte_end":295893,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"! encoder.encode_frames(frames.into_iter());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295894,"byte_end":295940,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"! # Ok(())","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295941,"byte_end":295953,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"! # }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295954,"byte_end":295961,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295962,"byte_end":295969,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"allow(clippy :: while_let_loop)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":295970,"byte_end":296003,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1195},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":296587,"byte_end":296597,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"GifDecoder","qualname":"::gif::GifDecoder","value":"GifDecoder {  }","parent":null,"children":[{"krate":0,"index":1197}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[{"value":"/ GIF decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":296560,"byte_end":296575,"line_start":46,"line_end":46,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":296749,"byte_end":296752,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<GifDecoder<R>>::new","value":"fn (r: R) -> ImageResult<GifDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam ```r```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":296675,"byte_end":296737,"line_start":52,"line_end":52,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1201},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":297077,"byte_end":297086,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":297020,"byte_end":297065,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1239},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306062,"byte_end":306072,"line_start":293,"line_end":293,"column_start":12,"column_end":22},"name":"GifEncoder","qualname":"::gif::GifEncoder","value":"GifEncoder {  }","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[{"value":"/ GIF encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306034,"byte_end":306050,"line_start":292,"line_end":292,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306346,"byte_end":306353,"line_start":307,"line_end":307,"column_start":10,"column_end":17},"name":"Encoder","qualname":"::gif::Encoder","value":"GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" GIF encoder","sig":null,"attributes":[{"value":"/ GIF encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306148,"byte_end":306163,"line_start":298,"line_end":298,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306164,"byte_end":306167,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ An alias of [`GifEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306168,"byte_end":306199,"line_start":300,"line_end":300,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306200,"byte_end":306203,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306204,"byte_end":306220,"line_start":302,"line_end":302,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306221,"byte_end":306224,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ [`GifEncoder`]: struct.GifEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306225,"byte_end":306267,"line_start":304,"line_end":304,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306268,"byte_end":306287,"line_start":305,"line_end":305,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `GifEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306288,"byte_end":306336,"line_start":306,"line_end":306,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306452,"byte_end":306455,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"new","qualname":"<GifEncoder<W>>::new","value":"fn (w: W) -> GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new GIF encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306410,"byte_end":306440,"line_start":310,"line_end":310,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306616,"byte_end":306622,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"encode","qualname":"<GifEncoder<W>>::encode","value":"fn (&mut self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode a single image.\n","sig":null,"attributes":[{"value":"/ Encode a single image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306578,"byte_end":306604,"line_start":318,"line_end":318,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":307337,"byte_end":307349,"line_start":340,"line_end":340,"column_start":12,"column_end":24},"name":"encode_frame","qualname":"<GifEncoder<W>>::encode_frame","value":"fn (&mut self, img_frame: animation::Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode one frame of animation.\n","sig":null,"attributes":[{"value":"/ Encode one frame of animation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":307291,"byte_end":307325,"line_start":339,"line_end":339,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":307635,"byte_end":307648,"line_start":347,"line_end":347,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<GifEncoder<W>>::encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[{"value":"/ Encodes Frames.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":307505,"byte_end":307524,"line_start":345,"line_end":345,"column_start":5,"column_end":24}},{"value":"/ Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":307529,"byte_end":307623,"line_start":346,"line_end":346,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":308126,"byte_end":308143,"line_start":360,"line_end":360,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<GifEncoder<W>>::try_encode_frames","value":"fn <F> (&mut self, frames: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[{"value":"/ Try to encode a collection of `ImageResult<animation::Frame>` objects.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":307871,"byte_end":307945,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ Use this function to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":307950,"byte_end":308019,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/ Whenever an `Err` item is encountered, that value is returned without further actions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":308024,"byte_end":308114,"line_start":359,"line_end":359,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1264},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::hdr","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1441},{"krate":0,"index":1494},{"krate":0,"index":1495}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8919,"byte_end":8942,"line_start":220,"line_end":220,"column_start":1,"column_end":24}},{"value":"!  Decoding of Radiance HDR Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311153,"byte_end":311189,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311190,"byte_end":311193,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder for Radiance HDR images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311194,"byte_end":311232,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311233,"byte_end":311236,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311237,"byte_end":311257,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311258,"byte_end":311261,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"!  * <http://radsite.lbl.gov/radiance/refer/filefmts.pdf>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311262,"byte_end":311321,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"!  * <http://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311322,"byte_end":311379,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/mod.rs","byte_start":311380,"byte_end":311383,"line_start":9,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":315942,"byte_end":315952,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"HdrAdapter","qualname":"::hdr::decoder::HdrAdapter","value":"HdrAdapter {  }","parent":null,"children":[{"krate":0,"index":4641},{"krate":0,"index":4642}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[{"value":"/ Adapter to conform to ```ImageDecoder``` trait","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":315863,"byte_end":315913,"line_start":116,"line_end":116,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1312},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316255,"byte_end":316265,"line_start":133,"line_end":133,"column_start":10,"column_end":20},"name":"HDRAdapter","qualname":"::hdr::decoder::HDRAdapter","value":"HdrAdapter<R>","parent":null,"children":[],"decl_id":null,"docs":" HDR Adapter","sig":null,"attributes":[{"value":"/ HDR Adapter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316057,"byte_end":316072,"line_start":124,"line_end":124,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316073,"byte_end":316076,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrAdapter`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316077,"byte_end":316108,"line_start":126,"line_end":126,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316109,"byte_end":316112,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316113,"byte_end":316129,"line_start":128,"line_end":128,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316130,"byte_end":316133,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ [`HdrAdapter`]: struct.HdrAdapter.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316134,"byte_end":316176,"line_start":130,"line_end":130,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316177,"byte_end":316196,"line_start":131,"line_end":131,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrAdapter` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316197,"byte_end":316245,"line_start":132,"line_end":132,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316355,"byte_end":316358,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrAdapter<R>>::new","value":"fn (r: R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[{"value":"/ Creates adapter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316324,"byte_end":316343,"line_start":136,"line_end":136,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316631,"byte_end":316644,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HdrAdapter<R>>::new_nonstrict","value":"fn (r: R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[{"value":"/ Allows reading old Radiance HDR images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316577,"byte_end":316619,"line_start":146,"line_end":146,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":317621,"byte_end":317630,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"HdrReader","qualname":"::hdr::decoder::HdrReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":317564,"byte_end":317609,"line_start":175,"line_end":175,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":1343},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319074,"byte_end":319083,"line_start":227,"line_end":227,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[{"value":"/ Radiance HDR file signature","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319032,"byte_end":319063,"line_start":226,"line_end":226,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4646},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319201,"byte_end":319211,"line_start":232,"line_end":232,"column_start":12,"column_end":22},"name":"HdrDecoder","qualname":"::hdr::decoder::HdrDecoder","value":"HdrDecoder {  }","parent":null,"children":[{"krate":0,"index":4648},{"krate":0,"index":4649},{"krate":0,"index":4650},{"krate":0,"index":4651}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[{"value":"/ An Radiance HDR decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319145,"byte_end":319172,"line_start":230,"line_end":230,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":4655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319436,"byte_end":319446,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"Rgbe8Pixel","qualname":"::hdr::decoder::Rgbe8Pixel","value":"Rgbe8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":4656},{"krate":0,"index":4658}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319286,"byte_end":319359,"line_start":239,"line_end":239,"column_start":1,"column_end":74}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319360,"byte_end":319370,"line_start":240,"line_end":240,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319482,"byte_end":319483,"line_start":244,"line_end":244,"column_start":9,"column_end":10},"name":"c","qualname":"::hdr::decoder::Rgbe8Pixel::c","value":"[u8; 3]","parent":{"krate":0,"index":4655},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[{"value":"/ Color components","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319453,"byte_end":319473,"line_start":243,"line_end":243,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":4658},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319519,"byte_end":319520,"line_start":246,"line_end":246,"column_start":9,"column_end":10},"name":"e","qualname":"::hdr::decoder::Rgbe8Pixel::e","value":"u8","parent":{"krate":0,"index":4655},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[{"value":"/ Exponent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319498,"byte_end":319510,"line_start":245,"line_end":245,"column_start":5,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319785,"byte_end":319795,"line_start":258,"line_end":258,"column_start":10,"column_end":20},"name":"RGBE8Pixel","qualname":"::hdr::decoder::RGBE8Pixel","value":"Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319529,"byte_end":319602,"line_start":249,"line_end":249,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319603,"byte_end":319606,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ An alias of [`Rgbe8Pixel`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319607,"byte_end":319638,"line_start":251,"line_end":251,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319639,"byte_end":319642,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319643,"byte_end":319659,"line_start":253,"line_end":253,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319660,"byte_end":319663,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`Rgbe8Pixel`]: struct.Rgbe8Pixel.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319664,"byte_end":319706,"line_start":255,"line_end":255,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319707,"byte_end":319726,"line_start":256,"line_end":256,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `Rgbe8Pixel` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319727,"byte_end":319775,"line_start":257,"line_end":257,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1346},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319863,"byte_end":319868,"line_start":261,"line_end":261,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::hdr::decoder::rgbe8","value":"fn (r: u8, g: u8, b: u8, e: u8) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```RGBE8Pixel``` from components\n","sig":null,"attributes":[{"value":"/ Creates ```RGBE8Pixel``` from components","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319811,"byte_end":319855,"line_start":260,"line_end":260,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320057,"byte_end":320063,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<Rgbe8Pixel>::to_hdr","value":"fn (self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319973,"byte_end":320031,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320036,"byte_end":320045,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320823,"byte_end":320829,"line_start":290,"line_end":290,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<Rgbe8Pixel>::to_ldr","value":"fn <T> (self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320558,"byte_end":320632,"line_start":282,"line_end":282,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320637,"byte_end":320640,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320645,"byte_end":320694,"line_start":284,"line_end":284,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320699,"byte_end":320702,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320707,"byte_end":320718,"line_start":286,"line_end":286,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320723,"byte_end":320726,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Panics when ```T::max_value()``` cannot be represented as f32.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320731,"byte_end":320797,"line_start":288,"line_end":288,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320802,"byte_end":320811,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321215,"byte_end":321233,"line_start":303,"line_end":303,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<Rgbe8Pixel>::to_ldr_scale_gamma","value":"fn <T> (self, scale: f32, gamma: f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"/ Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320922,"byte_end":320988,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":320993,"byte_end":320996,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321001,"byte_end":321050,"line_start":296,"line_end":296,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321055,"byte_end":321058,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321063,"byte_end":321074,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321079,"byte_end":321082,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ Panics when T::max_value() cannot be represented as f32.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321087,"byte_end":321147,"line_start":300,"line_end":300,"column_start":5,"column_end":65}},{"value":"/ Panics when scale or gamma is NaN","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321152,"byte_end":321189,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":321194,"byte_end":321203,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322441,"byte_end":322444,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrDecoder<R>>::new","value":"fn (reader: R) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HdrDecoder\n strict mode is enabled\n","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```r```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322292,"byte_end":322347,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/ if the header is valid, creates HdrDecoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322352,"byte_end":322398,"line_start":332,"line_end":332,"column_start":5,"column_end":51}},{"value":"/ strict mode is enabled","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322403,"byte_end":322429,"line_start":333,"line_end":333,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322852,"byte_end":322867,"line_start":345,"line_end":345,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HdrDecoder<R>>::with_strictness","value":"fn (mut reader: R, strict: bool) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HdrDecoder```.","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```reader```,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322549,"byte_end":322610,"line_start":338,"line_end":338,"column_start":5,"column_end":66}},{"value":"/ if the header is valid, creates ```HdrDecoder```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322615,"byte_end":322668,"line_start":339,"line_end":339,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322673,"byte_end":322676,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ strict enables strict mode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322681,"byte_end":322711,"line_start":341,"line_end":341,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322716,"byte_end":322719,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Warning! Reading wrong file in non-strict mode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322724,"byte_end":322774,"line_start":343,"line_end":343,"column_start":5,"column_end":55}},{"value":"/   could consume file size worth of memory in the process.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322779,"byte_end":322840,"line_start":344,"line_end":344,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":325420,"byte_end":325428,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HdrDecoder<R>>::metadata","value":"fn (&self) -> HdrMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HDRMetadata``` for details.\n","sig":null,"attributes":[{"value":"/ Returns file metadata. Refer to ```HDRMetadata``` for details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":325342,"byte_end":325408,"line_start":411,"line_end":411,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":325559,"byte_end":325576,"line_start":417,"line_end":417,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HdrDecoder<R>>::read_image_native","value":"fn (mut self) -> ImageResult<Vec<Rgbe8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of RGBE8 pixels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":325490,"byte_end":325547,"line_start":416,"line_end":416,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":326209,"byte_end":326229,"line_start":432,"line_end":432,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HdrDecoder<R>>::read_image_transform","value":"fn <T, F> (mut self, f: F, output_slice: &mut [T]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of transformed pixels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":326134,"byte_end":326197,"line_start":431,"line_end":431,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327368,"byte_end":327382,"line_start":468,"line_end":468,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HdrDecoder<R>>::read_image_ldr","value":"fn (self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<u8> pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327265,"byte_end":327325,"line_start":466,"line_end":466,"column_start":5,"column_end":65}},{"value":"/ scale = 1, gamma = 2.2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327330,"byte_end":327356,"line_start":467,"line_end":467,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327686,"byte_end":327700,"line_start":476,"line_end":476,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HdrDecoder<R>>::read_image_hdr","value":"fn (self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<f32> pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327605,"byte_end":327666,"line_start":474,"line_end":474,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327671,"byte_end":327674,"line_start":475,"line_end":475,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328511,"byte_end":328534,"line_start":501,"line_end":501,"column_start":12,"column_end":35},"name":"HdrImageDecoderIterator","qualname":"::hdr::decoder::HdrImageDecoderIterator","value":"HdrImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328454,"byte_end":328499,"line_start":500,"line_end":500,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":329135,"byte_end":329158,"line_start":520,"line_end":520,"column_start":10,"column_end":33},"name":"HDRImageDecoderIterator","qualname":"::hdr::decoder::HDRImageDecoderIterator","value":"HdrImageDecoderIterator<R>","parent":null,"children":[],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328855,"byte_end":328900,"line_start":511,"line_end":511,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328901,"byte_end":328904,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrImageDecoderIterator`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328905,"byte_end":328949,"line_start":513,"line_end":513,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328950,"byte_end":328953,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328954,"byte_end":328970,"line_start":515,"line_end":515,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328971,"byte_end":328974,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ [`HdrImageDecoderIterator`]: struct.HdrImageDecoderIterator.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":328975,"byte_end":329043,"line_start":517,"line_end":517,"column_start":1,"column_end":69}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":329044,"byte_end":329063,"line_start":518,"line_end":518,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrImageDecoderIterator` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":329064,"byte_end":329125,"line_start":519,"line_end":519,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":4675},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336437,"byte_end":336448,"line_start":734,"line_end":734,"column_start":12,"column_end":23},"name":"HdrMetadata","qualname":"::hdr::decoder::HdrMetadata","value":"HdrMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":4676},{"krate":0,"index":4677},{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4681},{"krate":0,"index":4682}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[{"value":"/ Metadata for Radiance HDR image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336366,"byte_end":336401,"line_start":732,"line_end":732,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4676},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336586,"byte_end":336591,"line_start":737,"line_end":737,"column_start":9,"column_end":14},"name":"width","qualname":"::hdr::decoder::HdrMetadata::width","value":"u32","parent":{"krate":0,"index":4675},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[{"value":"/ Width of decoded image. It could be either scanline length,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336455,"byte_end":336518,"line_start":735,"line_end":735,"column_start":5,"column_end":68}},{"value":"/ or scanline count, depending on image orientation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336523,"byte_end":336577,"line_start":736,"line_end":736,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4677},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336670,"byte_end":336676,"line_start":739,"line_end":739,"column_start":9,"column_end":15},"name":"height","qualname":"::hdr::decoder::HdrMetadata::height","value":"u32","parent":{"krate":0,"index":4675},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[{"value":"/ Height of decoded image. It depends on orientation too.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336602,"byte_end":336661,"line_start":738,"line_end":738,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":4678},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336951,"byte_end":336962,"line_start":743,"line_end":743,"column_start":9,"column_end":20},"name":"orientation","qualname":"::hdr::decoder::HdrMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":4675},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[{"value":"/ Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336687,"byte_end":336787,"line_start":740,"line_end":740,"column_start":5,"column_end":105}},{"value":"/ First pair tells how resulting pixel coordinates change along a scanline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336792,"byte_end":336869,"line_start":741,"line_end":741,"column_start":5,"column_end":82}},{"value":"/ Second pair tells how they change from one scanline to the next.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336874,"byte_end":336942,"line_start":742,"line_end":742,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337187,"byte_end":337195,"line_start":748,"line_end":748,"column_start":9,"column_end":17},"name":"exposure","qualname":"::hdr::decoder::HdrMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":4675},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by exposure to get to get physical radiance in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":336990,"byte_end":337060,"line_start":744,"line_end":744,"column_start":5,"column_end":75}},{"value":"/ watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337065,"byte_end":337098,"line_start":745,"line_end":745,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337103,"byte_end":337106,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337111,"byte_end":337178,"line_start":747,"line_end":747,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4680},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337439,"byte_end":337455,"line_start":753,"line_end":753,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::hdr::decoder::HdrMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":4675},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337214,"byte_end":337309,"line_start":749,"line_end":749,"column_start":5,"column_end":100}},{"value":"/ in watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337314,"byte_end":337350,"line_start":750,"line_end":750,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337355,"byte_end":337358,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337363,"byte_end":337430,"line_start":752,"line_end":752,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337534,"byte_end":337552,"line_start":755,"line_end":755,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::hdr::decoder::HdrMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":4675},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[{"value":"/ Pixel height divided by pixel width","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337486,"byte_end":337525,"line_start":754,"line_end":754,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337781,"byte_end":337798,"line_start":759,"line_end":759,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::hdr::decoder::HdrMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":4675},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[{"value":"/ All lines contained in image header are put here. Ordering of lines is preserved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337571,"byte_end":337656,"line_start":756,"line_end":756,"column_start":5,"column_end":90}},{"value":"/ Lines in the form \"key=value\" are represented as (\"key\", \"value\").","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337661,"byte_end":337731,"line_start":757,"line_end":757,"column_start":5,"column_end":75}},{"value":"/ All other lines are (\"\", \"line\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337736,"byte_end":337772,"line_start":758,"line_end":758,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":338029,"byte_end":338040,"line_start":771,"line_end":771,"column_start":10,"column_end":21},"name":"HDRMetadata","qualname":"::hdr::decoder::HDRMetadata","value":"HdrMetadata","parent":null,"children":[],"decl_id":null,"docs":" HDR MetaData","sig":null,"attributes":[{"value":"/ HDR MetaData","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337826,"byte_end":337842,"line_start":762,"line_end":762,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337843,"byte_end":337846,"line_start":763,"line_end":763,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrMetadata`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337847,"byte_end":337879,"line_start":764,"line_end":764,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337880,"byte_end":337883,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337884,"byte_end":337900,"line_start":766,"line_end":766,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337901,"byte_end":337904,"line_start":767,"line_end":767,"column_start":1,"column_end":4}},{"value":"/ [`HdrMetadata`]: struct.HdrMetadata.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337905,"byte_end":337949,"line_start":768,"line_end":768,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337950,"byte_end":337969,"line_start":769,"line_end":769,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrMetadata` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":337970,"byte_end":338019,"line_start":770,"line_end":770,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1434},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":347121,"byte_end":347134,"line_start":991,"line_end":991,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::hdr::decoder::read_raw_file","value":"fn <P> (path: P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[{"value":"/ Helper function for reading raw 3-channel f32 images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":347057,"byte_end":347113,"line_start":990,"line_end":990,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":347955,"byte_end":347965,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"HdrEncoder","qualname":"::hdr::encoder::HdrEncoder","value":"HdrEncoder {  }","parent":null,"children":[{"krate":0,"index":1454}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[{"value":"/ Radiance HDR encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":347919,"byte_end":347943,"line_start":7,"line_end":7,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":1455},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348189,"byte_end":348199,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"HDREncoder","qualname":"::hdr::encoder::HDREncoder","value":"HdrEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" HDR Encoder","sig":null,"attributes":[{"value":"/ HDR Encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":347991,"byte_end":348006,"line_start":12,"line_end":12,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348007,"byte_end":348010,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348011,"byte_end":348042,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348043,"byte_end":348046,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348047,"byte_end":348063,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348064,"byte_end":348067,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`HdrEncoder`]: struct.HdrEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348068,"byte_end":348110,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348111,"byte_end":348130,"line_start":19,"line_end":19,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348131,"byte_end":348179,"line_start":20,"line_end":20,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348287,"byte_end":348290,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrEncoder<W>>::new","value":"fn (w: W) -> HdrEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[{"value":"/ Creates encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348256,"byte_end":348275,"line_start":24,"line_end":24,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348453,"byte_end":348459,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"encode","qualname":"<HdrEncoder<W>>::encode","value":"fn (mut self, data: &[Rgb<f32>], width: usize, height: usize) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348352,"byte_end":348384,"line_start":29,"line_end":29,"column_start":5,"column_end":37}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348389,"byte_end":348441,"line_start":30,"line_end":30,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1492},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":355889,"byte_end":355897,"line_start":239,"line_end":239,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::hdr::encoder::to_rgbe8","value":"fn (pix: Rgb<f32>) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```RGBE8Pixel```\n","sig":null,"attributes":[{"value":"/ Converts ```Rgb<f32>``` into ```RGBE8Pixel```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":355832,"byte_end":355881,"line_start":238,"line_end":238,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","parent":null,"children":[{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1592}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8956,"byte_end":8979,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of ICO files","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363274,"byte_end":363313,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363314,"byte_end":363317,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for ICO (Windows Icon) image container files.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363318,"byte_end":363390,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363391,"byte_end":363394,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363395,"byte_end":363415,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/ms997538.aspx>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363416,"byte_end":363479,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!  * <https://en.wikipedia.org/wiki/ICO_%28file_format%29>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/mod.rs","byte_start":363480,"byte_end":363540,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":367737,"byte_end":367747,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"IcoDecoder","qualname":"::ico::decoder::IcoDecoder","value":"IcoDecoder {  }","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[{"value":"/ An ico decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":367707,"byte_end":367725,"line_start":104,"line_end":104,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":368245,"byte_end":368248,"line_start":131,"line_end":131,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoDecoder<R>>::new","value":"fn (mut r: R) -> ImageResult<IcoDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":368172,"byte_end":368233,"line_start":130,"line_end":130,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1575},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":371716,"byte_end":371725,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":371659,"byte_end":371704,"line_start":247,"line_end":247,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377291,"byte_end":377301,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"IcoEncoder","qualname":"::ico::encoder::IcoEncoder","value":"IcoEncoder {  }","parent":null,"children":[{"krate":0,"index":1608}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377264,"byte_end":377279,"line_start":17,"line_end":17,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377525,"byte_end":377535,"line_start":31,"line_end":31,"column_start":10,"column_end":20},"name":"ICOEncoder","qualname":"::ico::encoder::ICOEncoder","value":"IcoEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" ICO encoder","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377327,"byte_end":377342,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377343,"byte_end":377346,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ An alias of [`IcoEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377347,"byte_end":377378,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377379,"byte_end":377382,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377383,"byte_end":377399,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377400,"byte_end":377403,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`IcoEncoder`]: struct.IcoEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377404,"byte_end":377446,"line_start":28,"line_end":28,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377447,"byte_end":377466,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `IcoEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377467,"byte_end":377515,"line_start":30,"line_end":30,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377663,"byte_end":377666,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoEncoder<W>>::new","value":"fn (w: W) -> IcoEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377592,"byte_end":377651,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377964,"byte_end":377970,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"encode","qualname":"<IcoEncoder<W>>::encode","value":"fn (mut self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image``` that has dimensions ```width``` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377728,"byte_end":377797,"line_start":39,"line_end":39,"column_start":5,"column_end":74}},{"value":"/ ```height``` and ```ColorType``` ```c```.  The dimensions of the image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377802,"byte_end":377876,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"/ must be between 1 and 256 (inclusive) or an error will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377881,"byte_end":377952,"line_start":41,"line_end":41,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1631},{"krate":0,"index":1680},{"krate":0,"index":1826},{"krate":0,"index":1829}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8993,"byte_end":9017,"line_start":224,"line_end":224,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of JPEG Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380410,"byte_end":380450,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380451,"byte_end":380454,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380455,"byte_end":380550,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"! This module implements the Baseline JPEG standard.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380551,"byte_end":380605,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380606,"byte_end":380609,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380610,"byte_end":380629,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380630,"byte_end":380706,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":380707,"byte_end":380710,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":381283,"byte_end":381294,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":381255,"byte_end":381271,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":381473,"byte_end":381476,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"fn (r: R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":381400,"byte_end":381461,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":382034,"byte_end":382044,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":381977,"byte_end":382022,"line_start":38,"line_end":38,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4808},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413712,"byte_end":413728,"line_start":280,"line_end":280,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":4807},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413564,"byte_end":413628,"line_start":278,"line_end":278,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413633,"byte_end":413707,"line_start":279,"line_end":279,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4810},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413769,"byte_end":413775,"line_start":283,"line_end":283,"column_start":5,"column_end":11},"name":"Inches","qualname":"::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":4807},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413735,"byte_end":413764,"line_start":282,"line_end":282,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4812},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413812,"byte_end":413823,"line_start":286,"line_end":286,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":4807},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413782,"byte_end":413807,"line_start":285,"line_end":285,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4807},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413541,"byte_end":413557,"line_start":277,"line_end":277,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::jpeg::encoder::PixelDensityUnit","value":"PixelDensityUnit::{PixelAspectRatio, Inches, Centimeters}","parent":null,"children":[{"krate":0,"index":4808},{"krate":0,"index":4810},{"krate":0,"index":4812}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413420,"byte_end":413486,"line_start":275,"line_end":275,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414160,"byte_end":414172,"line_start":299,"line_end":299,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":4826},{"krate":0,"index":4827}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413828,"byte_end":413872,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413873,"byte_end":413876,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413877,"byte_end":413928,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413929,"byte_end":413932,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413933,"byte_end":413944,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413945,"byte_end":413968,"line_start":294,"line_end":294,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":413969,"byte_end":414007,"line_start":295,"line_end":295,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414008,"byte_end":414095,"line_start":296,"line_end":296,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414096,"byte_end":414103,"line_start":297,"line_end":297,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":4826},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414235,"byte_end":414242,"line_start":301,"line_end":301,"column_start":9,"column_end":16},"name":"density","qualname":"::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":4825},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414179,"byte_end":414226,"line_start":300,"line_end":300,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4827},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414314,"byte_end":414318,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"unit","qualname":"::jpeg::encoder::PixelDensity::unit","value":"jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":4825},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414260,"byte_end":414305,"line_start":302,"line_end":302,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414524,"byte_end":414527,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"fn (density: u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414365,"byte_end":414412,"line_start":307,"line_end":307,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414417,"byte_end":414471,"line_start":308,"line_end":308,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414476,"byte_end":414512,"line_start":309,"line_end":309,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414978,"byte_end":414989,"line_start":329,"line_end":329,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414926,"byte_end":414966,"line_start":328,"line_end":328,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1773},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415468,"byte_end":415479,"line_start":352,"line_end":352,"column_start":10,"column_end":21},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JpegEncoder<'a, W>","parent":null,"children":[],"decl_id":null,"docs":" JPEG Encoder","sig":null,"attributes":[{"value":"/ JPEG Encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415265,"byte_end":415281,"line_start":343,"line_end":343,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415282,"byte_end":415285,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ An alias of [`JpegEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415286,"byte_end":415318,"line_start":345,"line_end":345,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415319,"byte_end":415322,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415323,"byte_end":415339,"line_start":347,"line_end":347,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415340,"byte_end":415343,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`JpegEncoder`]: struct.JpegEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415344,"byte_end":415388,"line_start":349,"line_end":349,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415389,"byte_end":415408,"line_start":350,"line_end":350,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `JpegEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415409,"byte_end":415458,"line_start":351,"line_end":351,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415624,"byte_end":415627,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder>::new","value":"fn (w: &mut W) -> JpegEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415554,"byte_end":415612,"line_start":355,"line_end":355,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415920,"byte_end":415936,"line_start":363,"line_end":363,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder>::new_with_quality","value":"fn (w: &mut W, quality: u8) -> JpegEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415715,"byte_end":415782,"line_start":360,"line_end":360,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415787,"byte_end":415858,"line_start":361,"line_end":361,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415863,"byte_end":415908,"line_start":362,"line_end":362,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418304,"byte_end":418321,"line_start":435,"line_end":435,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder>::set_pixel_density","value":"fn (&mut self, pixel_density: PixelDensity) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418072,"byte_end":418136,"line_start":432,"line_end":432,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418141,"byte_end":418232,"line_start":433,"line_end":433,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418237,"byte_end":418292,"line_start":434,"line_end":434,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418653,"byte_end":418659,"line_start":444,"line_end":444,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder>::encode","value":"fn (&mut self, image: &[u8], width: u32, height: u32, color_type: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418419,"byte_end":418482,"line_start":439,"line_end":439,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418487,"byte_end":418539,"line_start":440,"line_end":440,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418544,"byte_end":418575,"line_start":441,"line_end":441,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418580,"byte_end":418583,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":418588,"byte_end":418641,"line_start":443,"line_end":443,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420860,"byte_end":420872,"line_start":496,"line_end":496,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder>::encode_image","value":"fn <I> (&mut self, image: &I) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420332,"byte_end":420360,"line_start":487,"line_end":487,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420365,"byte_end":420368,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420373,"byte_end":420466,"line_start":489,"line_end":489,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420471,"byte_end":420565,"line_start":490,"line_end":490,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420570,"byte_end":420665,"line_start":491,"line_end":491,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420670,"byte_end":420761,"line_start":492,"line_end":492,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420766,"byte_end":420782,"line_start":493,"line_end":493,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420787,"byte_end":420790,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":420795,"byte_end":420848,"line_start":495,"line_end":495,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1855},{"krate":0,"index":1864},{"krate":0,"index":1868},{"krate":0,"index":1872},{"krate":0,"index":1882},{"krate":0,"index":1887},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1901},{"krate":0,"index":1905},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1925},{"krate":0,"index":1933},{"krate":0,"index":1939},{"krate":0,"index":1951},{"krate":0,"index":1956},{"krate":0,"index":4840},{"krate":0,"index":4864},{"krate":0,"index":4863},{"krate":0,"index":4861},{"krate":0,"index":4858},{"krate":0,"index":4859},{"krate":0,"index":4854},{"krate":0,"index":4855},{"krate":0,"index":4866},{"krate":0,"index":4890},{"krate":0,"index":4889},{"krate":0,"index":4887},{"krate":0,"index":4884},{"krate":0,"index":4885},{"krate":0,"index":4880},{"krate":0,"index":4881},{"krate":0,"index":1958},{"krate":0,"index":1965},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":1978}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9032,"byte_end":9055,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"! Decoding and Encoding of PNG Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446193,"byte_end":446232,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446233,"byte_end":446236,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446237,"byte_end":446327,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446328,"byte_end":446331,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446332,"byte_end":446351,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446352,"byte_end":446409,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446410,"byte_end":446413,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1887},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447166,"byte_end":447175,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446976,"byte_end":446990,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446991,"byte_end":446994,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":446995,"byte_end":447054,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447055,"byte_end":447116,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447117,"byte_end":447154,"line_start":27,"line_end":27,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447450,"byte_end":447459,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"name":"PNGReader","qualname":"::png::PNGReader","value":"PngReader<R>","parent":null,"children":[],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447257,"byte_end":447271,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447272,"byte_end":447275,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngReader`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447276,"byte_end":447306,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447307,"byte_end":447310,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447311,"byte_end":447327,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447328,"byte_end":447331,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`PngReader`]: struct.PngReader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447332,"byte_end":447372,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447373,"byte_end":447392,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngReader` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447393,"byte_end":447440,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":449431,"byte_end":449441,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1904}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":449404,"byte_end":449419,"line_start":109,"line_end":109,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":449619,"byte_end":449622,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"fn (r: R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":449545,"byte_end":449607,"line_start":116,"line_end":116,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1908},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453375,"byte_end":453379,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"fn (self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":452728,"byte_end":452785,"line_start":172,"line_end":172,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":452790,"byte_end":452793,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":452798,"byte_end":452889,"line_start":174,"line_end":174,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":452894,"byte_end":452984,"line_start":175,"line_end":175,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":452989,"byte_end":453079,"line_start":176,"line_end":176,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453084,"byte_end":453138,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453143,"byte_end":453146,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453151,"byte_end":453244,"line_start":179,"line_end":179,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453249,"byte_end":453342,"line_start":180,"line_end":180,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453347,"byte_end":453363,"line_start":181,"line_end":181,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453802,"byte_end":453809,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453448,"byte_end":453495,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453500,"byte_end":453503,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453508,"byte_end":453598,"line_start":188,"line_end":188,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453603,"byte_end":453687,"line_start":189,"line_end":189,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453692,"byte_end":453695,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":453700,"byte_end":453790,"line_start":191,"line_end":191,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455778,"byte_end":455789,"line_start":253,"line_end":253,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455492,"byte_end":455546,"line_start":246,"line_end":246,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455547,"byte_end":455550,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455551,"byte_end":455601,"line_start":248,"line_end":248,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455602,"byte_end":455605,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455606,"byte_end":455662,"line_start":250,"line_end":250,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455663,"byte_end":455705,"line_start":251,"line_end":251,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":455706,"byte_end":455766,"line_start":252,"line_end":252,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":462982,"byte_end":462992,"line_start":440,"line_end":440,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":462955,"byte_end":462970,"line_start":439,"line_end":439,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1956},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463274,"byte_end":463284,"line_start":455,"line_end":455,"column_start":10,"column_end":20},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNG Encoder","sig":null,"attributes":[{"value":"/ PNG Encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463076,"byte_end":463091,"line_start":446,"line_end":446,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463092,"byte_end":463095,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463096,"byte_end":463127,"line_start":448,"line_end":448,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463128,"byte_end":463131,"line_start":449,"line_end":449,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463132,"byte_end":463148,"line_start":450,"line_end":450,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463149,"byte_end":463152,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ [`PngEncoder`]: struct.PngEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463153,"byte_end":463195,"line_start":452,"line_end":452,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463196,"byte_end":463215,"line_start":453,"line_end":453,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463216,"byte_end":463264,"line_start":454,"line_end":454,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4841},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463487,"byte_end":463494,"line_start":461,"line_end":461,"column_start":5,"column_end":12},"name":"Default","qualname":"::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":4840},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463453,"byte_end":463482,"line_start":460,"line_end":460,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4843},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463534,"byte_end":463538,"line_start":463,"line_end":463,"column_start":5,"column_end":9},"name":"Fast","qualname":"::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":4840},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463500,"byte_end":463529,"line_start":462,"line_end":462,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463575,"byte_end":463579,"line_start":465,"line_end":465,"column_start":5,"column_end":9},"name":"Best","qualname":"::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":4840},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463544,"byte_end":463570,"line_start":464,"line_end":464,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463620,"byte_end":463627,"line_start":467,"line_end":467,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":4840},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463585,"byte_end":463615,"line_start":466,"line_end":466,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4849},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463673,"byte_end":463676,"line_start":469,"line_end":469,"column_start":5,"column_end":8},"name":"Rle","qualname":"::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":4840},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463633,"byte_end":463668,"line_start":468,"line_end":468,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4851},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463702,"byte_end":463717,"line_start":472,"line_end":472,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::CompressionType::__NonExhaustive","value":"CompressionType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":4840},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463431,"byte_end":463446,"line_start":459,"line_end":459,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::png::CompressionType","value":"CompressionType::{Default, Fast, Best, Huffman, Rle, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4841},{"krate":0,"index":4843},{"krate":0,"index":4845},{"krate":0,"index":4847},{"krate":0,"index":4849},{"krate":0,"index":4851}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463306,"byte_end":463376,"line_start":457,"line_end":457,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4867},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464152,"byte_end":464160,"line_start":483,"line_end":483,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":4866},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth greyscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth greyscale or data with a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464047,"byte_end":464123,"line_start":481,"line_end":481,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464128,"byte_end":464147,"line_start":482,"line_end":482,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4869},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464227,"byte_end":464230,"line_start":485,"line_end":485,"column_start":5,"column_end":8},"name":"Sub","qualname":"::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":4866},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464166,"byte_end":464222,"line_start":484,"line_end":484,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4871},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464280,"byte_end":464282,"line_start":487,"line_end":487,"column_start":5,"column_end":7},"name":"Up","qualname":"::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":4866},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464236,"byte_end":464275,"line_start":486,"line_end":486,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464359,"byte_end":464362,"line_start":489,"line_end":489,"column_start":5,"column_end":8},"name":"Avg","qualname":"::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":4866},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464288,"byte_end":464354,"line_start":488,"line_end":488,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4875},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464449,"byte_end":464454,"line_start":491,"line_end":491,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":4866},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464368,"byte_end":464444,"line_start":490,"line_end":490,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464480,"byte_end":464495,"line_start":494,"line_end":494,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::FilterType::__NonExhaustive","value":"FilterType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":4866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4866},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464030,"byte_end":464040,"line_start":480,"line_end":480,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::png::FilterType","value":"FilterType::{NoFilter, Sub, Up, Avg, Paeth, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":4867},{"krate":0,"index":4869},{"krate":0,"index":4871},{"krate":0,"index":4873},{"krate":0,"index":4875},{"krate":0,"index":4877}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463757,"byte_end":463829,"line_start":475,"line_end":475,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463830,"byte_end":463833,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Sub` though this default may change in the future, most notable if an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463834,"byte_end":463930,"line_start":477,"line_end":477,"column_start":1,"column_end":97}},{"value":"/ adaptive encoding option is implemented.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":463931,"byte_end":463975,"line_start":478,"line_end":478,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464640,"byte_end":464643,"line_start":499,"line_end":499,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"fn (w: W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464570,"byte_end":464628,"line_start":498,"line_end":498,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465825,"byte_end":465841,"line_start":521,"line_end":521,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"fn (w: W, compression: CompressionType, filter: FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464811,"byte_end":464906,"line_start":507,"line_end":507,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464911,"byte_end":464937,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464942,"byte_end":464945,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464950,"byte_end":465045,"line_start":510,"line_end":510,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465050,"byte_end":465143,"line_start":511,"line_end":511,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465148,"byte_end":465240,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465245,"byte_end":465336,"line_start":513,"line_end":513,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465341,"byte_end":465389,"line_start":514,"line_end":514,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465394,"byte_end":465397,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type. It is likely that the library used","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465402,"byte_end":465497,"line_start":516,"line_end":516,"column_start":5,"column_end":100}},{"value":"/ will at some point gain the ability to use adaptive filtering methods per pixel row (or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465502,"byte_end":465593,"line_start":517,"line_end":517,"column_start":5,"column_end":96}},{"value":"/ even interlaced row). We might make it the new default variant in which case choosing a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465598,"byte_end":465689,"line_start":518,"line_end":518,"column_start":5,"column_end":96}},{"value":"/ particular filter method likely produces larger images. Be sure to check the release notes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465694,"byte_end":465788,"line_start":519,"line_end":519,"column_start":5,"column_end":99}},{"value":"/ once in a while.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":465793,"byte_end":465813,"line_start":520,"line_end":520,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":466121,"byte_end":466127,"line_start":530,"line_end":530,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.\n","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":466019,"byte_end":466109,"line_start":529,"line_end":529,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::pnm","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","parent":null,"children":[{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1993},{"krate":0,"index":1999},{"krate":0,"index":2019},{"krate":0,"index":2185},{"krate":0,"index":2323}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9069,"byte_end":9092,"line_start":228,"line_end":228,"column_start":1,"column_end":24}},{"value":"! Decoding of netpbm image formats (pbm, pgm, ppm and pam).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472106,"byte_end":472167,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472168,"byte_end":472171,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The formats pbm, pgm and ppm are fully supported. The pam decoder recognizes the tuple types","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472172,"byte_end":472268,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"! `BLACKANDWHITE`, `GRAYSCALE` and `RGB` and explicitely recognizes but rejects their `_ALPHA`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472269,"byte_end":472365,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"! variants for now as alpha color types are unsupported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/mod.rs","byte_start":472366,"byte_end":472424,"line_start":5,"line_end":5,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2090},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":489657,"byte_end":489667,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"PnmDecoder","qualname":"::pnm::decoder::PnmDecoder","value":"PnmDecoder {  }","parent":null,"children":[{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[{"value":"/ PNM decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":489630,"byte_end":489645,"line_start":219,"line_end":219,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2097},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":489857,"byte_end":489860,"line_start":228,"line_end":228,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmDecoder<R>>::new","value":"fn (read: R) -> ImageResult<PnmDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```read```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":489781,"byte_end":489845,"line_start":227,"line_end":227,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":491047,"byte_end":491057,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PnmDecoder<R>>::into_inner","value":"fn (self) -> (R, PnmHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[{"value":"/ Extract the reader and header after an image has been read.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":490972,"byte_end":491035,"line_start":251,"line_end":251,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2125},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":500539,"byte_end":500548,"line_start":514,"line_end":514,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":500482,"byte_end":500527,"line_start":513,"line_end":513,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":504140,"byte_end":504147,"line_start":611,"line_end":611,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmDecoder<R>>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[{"value":"/ Get the pnm subtype, depending on the magic constant contained in the header","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":504048,"byte_end":504128,"line_start":610,"line_end":610,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5025},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526625,"byte_end":526627,"line_start":27,"line_end":27,"column_start":5,"column_end":7},"name":"U8","qualname":"::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526643,"byte_end":526646,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"U16","qualname":"::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":5023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526603,"byte_end":526614,"line_start":26,"line_end":26,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::pnm::encoder::FlatSamples","value":"FlatSamples::{U8, U16}","parent":null,"children":[{"krate":0,"index":5025},{"krate":0,"index":5028}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526727,"byte_end":526737,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"PnmEncoder","qualname":"::pnm::encoder::PnmEncoder","value":"PnmEncoder {  }","parent":null,"children":[{"krate":0,"index":2228},{"krate":0,"index":2229}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[{"value":"/ Encodes images to any of the `pnm` image formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526662,"byte_end":526715,"line_start":31,"line_end":31,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":2230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526994,"byte_end":527004,"line_start":46,"line_end":46,"column_start":10,"column_end":20},"name":"PNMEncoder","qualname":"::pnm::encoder::PNMEncoder","value":"PnmEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNM Encoder","sig":null,"attributes":[{"value":"/ PNM Encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526796,"byte_end":526811,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526812,"byte_end":526815,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PnmEncoder`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526816,"byte_end":526847,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526848,"byte_end":526851,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526852,"byte_end":526868,"line_start":41,"line_end":41,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526869,"byte_end":526872,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [`PnmEncoder`]: struct.PnmEncoder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526873,"byte_end":526915,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526916,"byte_end":526935,"line_start":44,"line_end":44,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PnmEncoder` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":526936,"byte_end":526984,"line_start":45,"line_end":45,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528357,"byte_end":528360,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmEncoder<W>>::new","value":"fn (writer: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.","sig":null,"attributes":[{"value":"/ Create new PNMEncoder from the `writer`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528055,"byte_end":528099,"line_start":93,"line_end":93,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528104,"byte_end":528107,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The encoded images will have some `pnm` format. If more control over the image type is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528112,"byte_end":528202,"line_start":95,"line_end":95,"column_start":5,"column_end":95}},{"value":"/ required, use either one of `with_subtype` or `with_header`. For more information on the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528207,"byte_end":528299,"line_start":96,"line_end":96,"column_start":5,"column_end":97}},{"value":"/ behaviour, see `with_dynamic_header`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528304,"byte_end":528345,"line_start":97,"line_end":97,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528910,"byte_end":528922,"line_start":112,"line_end":112,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PnmEncoder<W>>::with_subtype","value":"fn (self, subtype: PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[{"value":"/ Encode a specific pnm subtype image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528489,"byte_end":528529,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528534,"byte_end":528537,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ The magic number and encoding type will be chosen as provided while the rest of the header","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528542,"byte_end":528636,"line_start":107,"line_end":107,"column_start":5,"column_end":99}},{"value":"/ data will be generated dynamically. Trying to encode incompatible images (e.g. encoding an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528641,"byte_end":528735,"line_start":108,"line_end":108,"column_start":5,"column_end":99}},{"value":"/ RGB image as Graymap) will result in an error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528740,"byte_end":528790,"line_start":109,"line_end":109,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528795,"byte_end":528798,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_header` and `with_dynamic_header`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528803,"byte_end":528898,"line_start":111,"line_end":111,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529628,"byte_end":529639,"line_start":128,"line_end":128,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PnmEncoder<W>>::with_header","value":"fn (self, header: PnmHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[{"value":"/ Enforce the use of a chosen header.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529089,"byte_end":529128,"line_start":119,"line_end":119,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529133,"byte_end":529136,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ While this option gives the most control over the actual written data, the encoding process","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529141,"byte_end":529236,"line_start":121,"line_end":121,"column_start":5,"column_end":100}},{"value":"/ will error in case the header data and image parameters do not agree. It is the users","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529241,"byte_end":529330,"line_start":122,"line_end":122,"column_start":5,"column_end":94}},{"value":"/ obligation to ensure that the width and height are set accordingly, for example.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529335,"byte_end":529419,"line_start":123,"line_end":123,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529424,"byte_end":529427,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Choose this option if you want a lossless decoding/encoding round trip.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529432,"byte_end":529507,"line_start":125,"line_end":125,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529512,"byte_end":529515,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_dynamic_header`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529520,"byte_end":529616,"line_start":127,"line_end":127,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530210,"byte_end":530229,"line_start":142,"line_end":142,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PnmEncoder<W>>::with_dynamic_header","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[{"value":"/ Create the header dynamically for each image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529802,"byte_end":529851,"line_start":135,"line_end":135,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529856,"byte_end":529859,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ This is the default option upon creation of the encoder. With this, most images should be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529864,"byte_end":529957,"line_start":137,"line_end":137,"column_start":5,"column_end":98}},{"value":"/ encodable but the specific format chosen is out of the users control. The pnm subtype is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":529962,"byte_end":530054,"line_start":138,"line_end":138,"column_start":5,"column_end":97}},{"value":"/ chosen arbitrarily by the library.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530059,"byte_end":530097,"line_start":139,"line_end":139,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530102,"byte_end":530105,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_header`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530110,"byte_end":530198,"line_start":141,"line_end":141,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530605,"byte_end":530611,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"encode","qualname":"<PnmEncoder<W>>::encode","value":"fn <'s, S> (&mut self, image: S, width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[{"value":"/ Encode an image whose samples are represented as `u8`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530366,"byte_end":530424,"line_start":149,"line_end":149,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530429,"byte_end":530432,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Some `pnm` subtypes are incompatible with some color options, a chosen header most","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530437,"byte_end":530523,"line_start":151,"line_end":151,"column_start":5,"column_end":91}},{"value":"/ certainly with any deviation from the original decoded image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":530528,"byte_end":530593,"line_start":152,"line_end":152,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549658,"byte_end":549664,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[{"value":"/ Samples are unsigned binary integers in big endian","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549599,"byte_end":549653,"line_start":6,"line_end":6,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549748,"byte_end":549753,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":5036},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Samples are encoded as decimal ascii strings separated by whitespace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549671,"byte_end":549743,"line_start":9,"line_end":9,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":5036},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549578,"byte_end":549592,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::pnm::header::SampleEncoding","value":"SampleEncoding::{Binary, Ascii}","parent":null,"children":[{"krate":0,"index":5037},{"krate":0,"index":5039}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[{"value":"/ The kind of encoding used to store sample values","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549471,"byte_end":549523,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5053},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550068,"byte_end":550074,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":5052},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[{"value":"/ Magic numbers P1 and P4","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550036,"byte_end":550063,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550129,"byte_end":550136,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":5052},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[{"value":"/ Magic numbers P2 and P5","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550097,"byte_end":550124,"line_start":25,"line_end":25,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550191,"byte_end":550197,"line_start":29,"line_end":29,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":5052},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[{"value":"/ Magic numbers P3 and P6","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550159,"byte_end":550186,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550244,"byte_end":550256,"line_start":32,"line_end":32,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":5052},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[{"value":"/ Magic number P7","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550220,"byte_end":550239,"line_start":31,"line_end":31,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":5052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550019,"byte_end":550029,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::pnm::header::PNMSubtype","value":"PNMSubtype::{Bitmap, Graymap, Pixmap, ArbitraryMap}","parent":null,"children":[{"krate":0,"index":5053},{"krate":0,"index":5056},{"krate":0,"index":5059},{"krate":0,"index":5062}],"decl_id":null,"docs":" Denotes the category of the magic number","sig":null,"attributes":[{"value":"/ Denotes the category of the magic number","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549758,"byte_end":549802,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549803,"byte_end":549806,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: The name of this enum will be changed to [`PnmSubtype`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549807,"byte_end":549879,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549880,"byte_end":549883,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ TODO: rename to [`PnmSubtype`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549884,"byte_end":549919,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549920,"byte_end":549923,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`PnmSubtype`]: type.PnmSubtype.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":549924,"byte_end":549964,"line_start":19,"line_end":19,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":2327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550440,"byte_end":550450,"line_start":43,"line_end":43,"column_start":10,"column_end":20},"name":"PnmSubtype","qualname":"::pnm::header::PnmSubtype","value":"PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" PNM Subtype","sig":null,"attributes":[{"value":"/ PNM Subtype","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550261,"byte_end":550276,"line_start":35,"line_end":35,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550277,"byte_end":550280,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PNMSubtype`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550281,"byte_end":550312,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550313,"byte_end":550316,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ TODO: remove when [`DXTVariant`] is renamed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550317,"byte_end":550365,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550366,"byte_end":550369,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`PNMSubtype`]: enum.PNMSubtype.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550370,"byte_end":550410,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550411,"byte_end":550430,"line_start":42,"line_end":42,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550853,"byte_end":550862,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"PnmHeader","qualname":"::pnm::header::PnmHeader","value":"PnmHeader {  }","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[{"value":"/ Stores the complete header data of a file.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550466,"byte_end":550512,"line_start":45,"line_end":45,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550513,"byte_end":550516,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Internally, provides mechanisms for lossless reencoding. After reading a file with the decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550517,"byte_end":550615,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ it is possible to recover the header and construct an encoder. Using the encoder on the just","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550616,"byte_end":550712,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/ loaded image should result in a byte copy of the original file (for single image pnms without","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550713,"byte_end":550810,"line_start":49,"line_end":49,"column_start":1,"column_end":98}},{"value":"/ additional trailing data).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550811,"byte_end":550841,"line_start":50,"line_end":50,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":2331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551140,"byte_end":551149,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"PNMHeader","qualname":"::pnm::header::PNMHeader","value":"PnmHeader","parent":null,"children":[],"decl_id":null,"docs":" PNM Header","sig":null,"attributes":[{"value":"/ PNM Header","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550947,"byte_end":550961,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550962,"byte_end":550965,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PnmHeader`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550966,"byte_end":550996,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":550997,"byte_end":551000,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551001,"byte_end":551017,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551018,"byte_end":551021,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`PnmHeader`]: struct.PnmHeader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551022,"byte_end":551062,"line_start":62,"line_end":62,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551063,"byte_end":551082,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PnmHeader` instead\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551083,"byte_end":551130,"line_start":64,"line_end":64,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5076},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551408,"byte_end":551420,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":5077},{"krate":0,"index":5078},{"krate":0,"index":5079}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pbm` file (\"Portable Bit Map\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551310,"byte_end":551366,"line_start":74,"line_end":74,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":5077},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551468,"byte_end":551476,"line_start":78,"line_end":78,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::BitmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":5076},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551427,"byte_end":551459,"line_start":77,"line_end":77,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551536,"byte_end":551542,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":5076},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551499,"byte_end":551527,"line_start":80,"line_end":80,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5079},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551590,"byte_end":551595,"line_start":84,"line_end":84,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":5076},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551554,"byte_end":551581,"line_start":83,"line_end":83,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5085},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551704,"byte_end":551717,"line_start":89,"line_end":89,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":5086},{"krate":0,"index":5087},{"krate":0,"index":5088},{"krate":0,"index":5089}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pgm` file (\"Portable Gray Map\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551605,"byte_end":551662,"line_start":87,"line_end":87,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":5086},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551765,"byte_end":551773,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::GraymapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":5085},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551724,"byte_end":551756,"line_start":90,"line_end":90,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5087},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551833,"byte_end":551839,"line_start":94,"line_end":94,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":5085},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551796,"byte_end":551824,"line_start":93,"line_end":93,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5088},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551887,"byte_end":551892,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":5085},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551851,"byte_end":551878,"line_start":96,"line_end":96,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5089},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551954,"byte_end":551962,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":5085},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551904,"byte_end":551945,"line_start":99,"line_end":99,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5095},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552072,"byte_end":552084,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":5096},{"krate":0,"index":5097},{"krate":0,"index":5098},{"krate":0,"index":5099}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `ppm` file (\"Portable Pixel Map\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":551972,"byte_end":552030,"line_start":103,"line_end":103,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":5096},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552132,"byte_end":552140,"line_start":107,"line_end":107,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::PixmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":5095},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552091,"byte_end":552123,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5097},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552200,"byte_end":552206,"line_start":110,"line_end":110,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":5095},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552163,"byte_end":552191,"line_start":109,"line_end":109,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5098},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552254,"byte_end":552259,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":5095},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552218,"byte_end":552245,"line_start":112,"line_end":112,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5099},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552321,"byte_end":552327,"line_start":116,"line_end":116,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":5095},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552271,"byte_end":552312,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552435,"byte_end":552450,"line_start":121,"line_end":121,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":5106},{"krate":0,"index":5107},{"krate":0,"index":5108},{"krate":0,"index":5109},{"krate":0,"index":5110}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pam` file (\"Portable Arbitrary Map\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552337,"byte_end":552399,"line_start":119,"line_end":119,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":5106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552494,"byte_end":552500,"line_start":123,"line_end":123,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":5105},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552457,"byte_end":552485,"line_start":122,"line_end":122,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552548,"byte_end":552553,"line_start":126,"line_end":126,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":5105},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552512,"byte_end":552539,"line_start":125,"line_end":125,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552602,"byte_end":552607,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"depth","qualname":"::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":5105},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[{"value":"/ Number of color channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552565,"byte_end":552593,"line_start":128,"line_end":128,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552669,"byte_end":552675,"line_start":132,"line_end":132,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":5105},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552619,"byte_end":552660,"line_start":131,"line_end":131,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":5110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552736,"byte_end":552744,"line_start":135,"line_end":135,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":5105},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[{"value":"/ Color interpretation of image pixels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552687,"byte_end":552727,"line_start":134,"line_end":134,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5116},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552947,"byte_end":552960,"line_start":142,"line_end":142,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":5115},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552898,"byte_end":552942,"line_start":141,"line_end":141,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553043,"byte_end":553061,"line_start":145,"line_end":145,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":5115},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1) and a second alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552967,"byte_end":553038,"line_start":144,"line_end":144,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5120},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553113,"byte_end":553122,"line_start":148,"line_end":148,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":5115},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[{"value":"/ Pixels represent the amount of white","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553068,"byte_end":553108,"line_start":147,"line_end":147,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553180,"byte_end":553194,"line_start":151,"line_end":151,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":5115},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[{"value":"/ Grayscale with an additional alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553129,"byte_end":553175,"line_start":150,"line_end":150,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5124},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553242,"byte_end":553245,"line_start":154,"line_end":154,"column_start":5,"column_end":8},"name":"RGB","qualname":"::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":5115},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[{"value":"/ Three channels: Red, Green, Blue","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553201,"byte_end":553237,"line_start":153,"line_end":153,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553299,"byte_end":553307,"line_start":157,"line_end":157,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":5115},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[{"value":"/ Four channels: Red, Green, Blue, Alpha","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553252,"byte_end":553294,"line_start":156,"line_end":156,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5128},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553364,"byte_end":553370,"line_start":160,"line_end":160,"column_start":5,"column_end":11},"name":"Custom","qualname":"::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":5115},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[{"value":"/ An image format which is not standardized","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553314,"byte_end":553359,"line_start":159,"line_end":159,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":5115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552874,"byte_end":552891,"line_start":140,"line_end":140,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::pnm::header::ArbitraryTuplType","value":"ArbitraryTuplType::{BlackAndWhite, BlackAndWhiteAlpha, Grayscale, GrayscaleAlpha, RGB, RGBAlpha, Custom}","parent":null,"children":[{"krate":0,"index":5116},{"krate":0,"index":5118},{"krate":0,"index":5120},{"krate":0,"index":5122},{"krate":0,"index":5124},{"krate":0,"index":5126},{"krate":0,"index":5128}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[{"value":"/ Standardized tuple type specifiers in the header of a `pam`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":552776,"byte_end":552840,"line_start":138,"line_end":138,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":554020,"byte_end":554034,"line_start":179,"line_end":179,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"fn (self) -> &'static [u8; 2]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[{"value":"/ Get the two magic constant bytes corresponding to this format subtype.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553934,"byte_end":554008,"line_start":178,"line_end":178,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":554613,"byte_end":554628,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"fn (self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[{"value":"/ Whether samples are stored as binary or as decimal ascii","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":554541,"byte_end":554601,"line_start":191,"line_end":191,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":554991,"byte_end":554998,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmHeader>::subtype","value":"fn (&self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[{"value":"/ Retrieve the format subtype from which the header was created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":554913,"byte_end":554979,"line_start":203,"line_end":203,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2353},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":555513,"byte_end":555518,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"width","qualname":"<PnmHeader>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The width of the image this header is for.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":555455,"byte_end":555501,"line_start":213,"line_end":213,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":555936,"byte_end":555942,"line_start":224,"line_end":224,"column_start":12,"column_end":18},"name":"height","qualname":"<PnmHeader>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The height of the image this header is for.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":555877,"byte_end":555924,"line_start":223,"line_end":223,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":556400,"byte_end":556414,"line_start":234,"line_end":234,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PnmHeader>::maximal_sample","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[{"value":"/ The biggest value a sample can have. In other words, the colour resolution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":556309,"byte_end":556388,"line_start":233,"line_end":233,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":556832,"byte_end":556841,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PnmHeader>::as_bitmap","value":"fn (&self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying bitmap header if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":556772,"byte_end":556820,"line_start":243,"line_end":243,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557072,"byte_end":557082,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PnmHeader>::as_graymap","value":"fn (&self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying graymap header if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557011,"byte_end":557060,"line_start":251,"line_end":251,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557316,"byte_end":557325,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PnmHeader>::as_pixmap","value":"fn (&self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying pixmap header if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557256,"byte_end":557304,"line_start":259,"line_end":259,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2359},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557558,"byte_end":557570,"line_start":268,"line_end":268,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PnmHeader>::as_arbitrary","value":"fn (&self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying arbitrary header if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557495,"byte_end":557546,"line_start":267,"line_end":267,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557810,"byte_end":557815,"line_start":276,"line_end":276,"column_start":12,"column_end":17},"name":"write","qualname":"<PnmHeader>::write","value":"fn (&self, writer: &mut dyn io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[{"value":"/ Write the header back into a binary stream","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":557752,"byte_end":557798,"line_start":275,"line_end":275,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":2376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":2459},{"krate":0,"index":2490}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9106,"byte_end":9129,"line_start":230,"line_end":230,"column_start":1,"column_end":24}},{"value":"! Decoding of TGA Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","byte_start":560981,"byte_end":561007,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","byte_start":561008,"byte_end":561011,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","byte_start":561012,"byte_end":561031,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"! <http://googlesites.inequation.org/tgautilities>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/mod.rs","byte_start":561032,"byte_end":561084,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":562608,"byte_end":562618,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"TgaDecoder","qualname":"::tga::decoder::TgaDecoder","value":"TgaDecoder {  }","parent":null,"children":[{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[{"value":"/ The representation of a TGA decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":562557,"byte_end":562596,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":563044,"byte_end":563047,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaDecoder<R>>::new","value":"fn (r: R) -> ImageResult<TgaDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":562975,"byte_end":563032,"line_start":67,"line_end":67,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2451},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":575530,"byte_end":575539,"line_start":420,"line_end":420,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":2453},{"krate":0,"index":2454}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576878,"byte_end":576888,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"TgaEncoder","qualname":"::tga::encoder::TgaEncoder","value":"TgaEncoder {  }","parent":null,"children":[{"krate":0,"index":2480}],"decl_id":null,"docs":" TGA encoder.\n","sig":null,"attributes":[{"value":"/ TGA encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576850,"byte_end":576866,"line_start":34,"line_end":34,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2483},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":577025,"byte_end":577028,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaEncoder<W>>::new","value":"fn (w: W) -> TgaEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576954,"byte_end":577013,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2484},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":577358,"byte_end":577364,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"encode","qualname":"<TgaEncoder<W>>::encode","value":"fn (mut self, buf: &[u8], width: u32, height: u32, color_type: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```buf``` that has dimensions ```width```\n and ```height``` and ```ColorType``` ```color_type```.","sig":null,"attributes":[{"value":"/ Encodes the image ```buf``` that has dimensions ```width```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":577098,"byte_end":577161,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"/ and ```height``` and ```ColorType``` ```color_type```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":577166,"byte_end":577224,"line_start":46,"line_end":46,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":577229,"byte_end":577232,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The dimensions of the image must be between 0 and 65535 (inclusive) or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":577237,"byte_end":577311,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ an error will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":577316,"byte_end":577346,"line_start":49,"line_end":49,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":2541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","parent":null,"children":[{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2550},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2555},{"krate":0,"index":2566},{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2576},{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2583},{"krate":0,"index":2588},{"krate":0,"index":2592},{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2605},{"krate":0,"index":2609}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9143,"byte_end":9167,"line_start":232,"line_end":232,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of TIFF Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":588662,"byte_end":588702,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":588703,"byte_end":588706,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! TIFF (Tagged Image File Format) is a versatile image format that supports","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":588707,"byte_end":588784,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"! lossless and lossy compression.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":588785,"byte_end":588820,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":588821,"byte_end":588824,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":588825,"byte_end":588844,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://partners.adobe.com/public/developer/tiff/index.html> - The TIFF specification","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":588845,"byte_end":588936,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":589438,"byte_end":589449,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"TiffDecoder","qualname":"::tiff::TiffDecoder","value":"TiffDecoder {  }","parent":null,"children":[{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[{"value":"/ Decoder for TIFF images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":589398,"byte_end":589426,"line_start":24,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2578},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":589671,"byte_end":589674,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffDecoder<R>>::new","value":"fn (r: R) -> Result<TiffDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TiffDecoder.\n","sig":null,"attributes":[{"value":"/ Create a new TiffDecoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":589630,"byte_end":589659,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2583},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":592964,"byte_end":592974,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":592907,"byte_end":592952,"line_start":113,"line_end":113,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2600},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595056,"byte_end":595067,"line_start":180,"line_end":180,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":2602}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[{"value":"/ Encoder for tiff images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595017,"byte_end":595044,"line_start":179,"line_end":179,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595793,"byte_end":595796,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"fn (w: W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595727,"byte_end":595781,"line_start":199,"line_end":199,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":596028,"byte_end":596034,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32, color: ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","sig":null,"attributes":[{"value":"/ Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595860,"byte_end":595951,"line_start":204,"line_end":204,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595956,"byte_end":595959,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ 16-bit types assume the buffer is native endian.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595964,"byte_end":596016,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/mod.rs","parent":null,"children":[{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2685},{"krate":0,"index":2691}],"decl_id":null,"docs":" Decoding of WebP Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9182,"byte_end":9206,"line_start":234,"line_end":234,"column_start":1,"column_end":25}},{"value":"! Decoding of WebP Images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/mod.rs","byte_start":597623,"byte_end":597650,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2652},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599539,"byte_end":599550,"line_start":53,"line_end":53,"column_start":12,"column_end":23},"name":"WebPDecoder","qualname":"::webp::decoder::WebPDecoder","value":"WebPDecoder {  }","parent":null,"children":[{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656}],"decl_id":null,"docs":" WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[{"value":"/ WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599402,"byte_end":599496,"line_start":51,"line_end":51,"column_start":1,"column_end":95}},{"value":"/ images will be grayscale).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599497,"byte_end":599527,"line_start":52,"line_end":52,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599762,"byte_end":599765,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<WebPDecoder<R>>::new","value":"fn (r: R) -> ImageResult<WebPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebPDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[{"value":"/ Create a new WebPDecoder from the Reader ```r```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599644,"byte_end":599697,"line_start":60,"line_end":60,"column_start":5,"column_end":58}},{"value":"/ This function takes ownership of the Reader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599702,"byte_end":599750,"line_start":61,"line_end":61,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":602442,"byte_end":602452,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":602385,"byte_end":602430,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2700},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2719},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2724},{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":5198},{"krate":0,"index":5223},{"krate":0,"index":5222},{"krate":0,"index":5220},{"krate":0,"index":5217},{"krate":0,"index":5218},{"krate":0,"index":5214},{"krate":0,"index":5215},{"krate":0,"index":5225},{"krate":0,"index":5247},{"krate":0,"index":5246},{"krate":0,"index":5244},{"krate":0,"index":5241},{"krate":0,"index":5242},{"krate":0,"index":5238},{"krate":0,"index":5239},{"krate":0,"index":5249},{"krate":0,"index":5289},{"krate":0,"index":5288},{"krate":0,"index":5286},{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5280},{"krate":0,"index":5281},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":2734},{"krate":0,"index":2736},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2752},{"krate":0,"index":2753},{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2756},{"krate":0,"index":2757},{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2765},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":5291},{"krate":0,"index":5293},{"krate":0,"index":2772},{"krate":0,"index":5295},{"krate":0,"index":5318},{"krate":0,"index":5315},{"krate":0,"index":5314},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2785},{"krate":0,"index":5320},{"krate":0,"index":5333},{"krate":0,"index":5329},{"krate":0,"index":5328},{"krate":0,"index":5335},{"krate":0,"index":5350},{"krate":0,"index":5348},{"krate":0,"index":5346},{"krate":0,"index":5352},{"krate":0,"index":5365},{"krate":0,"index":5364},{"krate":0,"index":5362},{"krate":0,"index":2793},{"krate":0,"index":2816},{"krate":0,"index":2843},{"krate":0,"index":2846},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2856},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":2862},{"krate":0,"index":2863},{"krate":0,"index":2865},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[{"value":"! An implementation of the VP8 Video Codec","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606047,"byte_end":606091,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606092,"byte_end":606095,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains a partial implementation of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606096,"byte_end":606152,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"! VP8 video format as defined in RFC-6386.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606153,"byte_end":606197,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606198,"byte_end":606201,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It decodes Keyframes only sans Loop Filtering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606202,"byte_end":606252,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"! VP8 is the underpinning of the WebP image format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606253,"byte_end":606305,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606306,"byte_end":606309,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606310,"byte_end":606329,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"! * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606330,"byte_end":606423,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"! * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606424,"byte_end":606546,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"! of the VP8 format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606547,"byte_end":606568,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":606569,"byte_end":606572,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636778,"byte_end":636783,"line_start":839,"line_end":839,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":5336},{"krate":0,"index":5337},{"krate":0,"index":5338},{"krate":0,"index":5339},{"krate":0,"index":5340},{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5343},{"krate":0,"index":5344},{"krate":0,"index":5345}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[{"value":"/ A Representation of the last decoded video frame","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636681,"byte_end":636733,"line_start":837,"line_end":837,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":5336},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636830,"byte_end":636835,"line_start":841,"line_end":841,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":5335},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[{"value":"/ The width of the luma plane","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636790,"byte_end":636821,"line_start":840,"line_end":840,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5337},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636888,"byte_end":636894,"line_start":844,"line_end":844,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":5335},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[{"value":"/ The height of the luma plane","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636847,"byte_end":636879,"line_start":843,"line_end":843,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636946,"byte_end":636950,"line_start":847,"line_end":847,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":5335},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[{"value":"/ The luma plane of the frame","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636906,"byte_end":636937,"line_start":846,"line_end":846,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5339},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637021,"byte_end":637029,"line_start":850,"line_end":850,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":5335},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is a keyframe","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":636966,"byte_end":637012,"line_start":849,"line_end":849,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":5341},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637125,"byte_end":637136,"line_start":855,"line_end":855,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":5335},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is intended for display","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637060,"byte_end":637116,"line_start":854,"line_end":854,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637267,"byte_end":637277,"line_start":860,"line_end":860,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":5335},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[{"value":"/ The pixel type of the frame as defined by Section 9.2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637168,"byte_end":637225,"line_start":858,"line_end":858,"column_start":5,"column_end":62}},{"value":"/ of the VP8 Specification","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637230,"byte_end":637258,"line_start":859,"line_end":859,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2793},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637653,"byte_end":637663,"line_start":888,"line_end":888,"column_start":12,"column_end":22},"name":"Vp8Decoder","qualname":"::webp::vp8::Vp8Decoder","value":"Vp8Decoder {  }","parent":null,"children":[{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2806},{"krate":0,"index":2807},{"krate":0,"index":2809},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2815}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[{"value":"/ VP8 Decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637595,"byte_end":637610,"line_start":885,"line_end":885,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637611,"byte_end":637614,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ Only decodes keyframes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":637615,"byte_end":637641,"line_start":887,"line_end":887,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2818},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":638327,"byte_end":638330,"line_start":923,"line_end":923,"column_start":12,"column_end":15},"name":"new","qualname":"<Vp8Decoder<R>>::new","value":"fn (r: R) -> Vp8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[{"value":"/ Create a new decoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":638223,"byte_end":638248,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/ The reader must present a raw vp8 bitstream to the decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":638253,"byte_end":638315,"line_start":922,"line_end":922,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":658488,"byte_end":658500,"line_start":1543,"line_end":1543,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<Vp8Decoder<R>>::decode_frame","value":"fn (&mut self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[{"value":"/ Decodes the current frame and returns a reference to it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":658417,"byte_end":658476,"line_start":1542,"line_end":1542,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":2884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"farbfeld","qualname":"::farbfeld","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","parent":null,"children":[{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2895},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2906},{"krate":0,"index":2913},{"krate":0,"index":2920},{"krate":0,"index":2929},{"krate":0,"index":2932},{"krate":0,"index":2937},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":2946},{"krate":0,"index":2949},{"krate":0,"index":2957},{"krate":0,"index":2965},{"krate":0,"index":2968},{"krate":0,"index":2974}],"decl_id":null,"docs":" Decoding of farbfeld images","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9221,"byte_end":9249,"line_start":236,"line_end":236,"column_start":1,"column_end":29}},{"value":"! Decoding of farbfeld images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683277,"byte_end":683308,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683309,"byte_end":683312,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! farbfeld is a lossless image format which is easy to parse, pipe and compress.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683313,"byte_end":683395,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683396,"byte_end":683399,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! It has the following format:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683400,"byte_end":683432,"line_start":5,"line_end":5,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683433,"byte_end":683436,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! | Bytes  | Description                                             |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683437,"byte_end":683509,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! |--------|---------------------------------------------------------|","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683510,"byte_end":683582,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"! | 8      | \"farbfeld\" magic value                                  |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683583,"byte_end":683655,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! | 4      | 32-Bit BE unsigned integer (width)                      |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683656,"byte_end":683728,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"! | 4      | 32-Bit BE unsigned integer (height)                     |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683729,"byte_end":683801,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"! | [2222] | 4⋅16-Bit BE unsigned integers [RGBA] / pixel, row-major |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683802,"byte_end":683876,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683877,"byte_end":683880,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! The RGB-data should be sRGB for best interoperability and not alpha-premultiplied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683881,"byte_end":683967,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683968,"byte_end":683971,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683972,"byte_end":683991,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"! * <https://tools.suckless.org/farbfeld/> - the farbfeld specification","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":683992,"byte_end":684065,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2913},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":684490,"byte_end":684504,"line_start":30,"line_end":30,"column_start":12,"column_end":26},"name":"FarbfeldReader","qualname":"::farbfeld::FarbfeldReader","value":"FarbfeldReader {  }","parent":null,"children":[{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918},{"krate":0,"index":2919}],"decl_id":null,"docs":" farbfeld Reader\n","sig":null,"attributes":[{"value":"/ farbfeld Reader","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":684459,"byte_end":684478,"line_start":29,"line_end":29,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2943},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689212,"byte_end":689227,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"FarbfeldDecoder","qualname":"::farbfeld::FarbfeldDecoder","value":"FarbfeldDecoder {  }","parent":null,"children":[{"krate":0,"index":2945}],"decl_id":null,"docs":" farbfeld decoder\n","sig":null,"attributes":[{"value":"/ farbfeld decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689180,"byte_end":689200,"line_start":162,"line_end":162,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689386,"byte_end":689389,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldDecoder<R>>::new","value":"fn (r: R) -> ImageResult<FarbfeldDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689312,"byte_end":689374,"line_start":168,"line_end":168,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2965},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":690732,"byte_end":690747,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"FarbfeldEncoder","qualname":"::farbfeld::FarbfeldEncoder","value":"FarbfeldEncoder {  }","parent":null,"children":[{"krate":0,"index":2967}],"decl_id":null,"docs":" farbfeld encoder\n","sig":null,"attributes":[{"value":"/ farbfeld encoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":690700,"byte_end":690720,"line_start":215,"line_end":215,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":690894,"byte_end":690897,"line_start":222,"line_end":222,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldEncoder<W>>::new","value":"fn (w: W) -> FarbfeldEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":690824,"byte_end":690882,"line_start":221,"line_end":221,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":691105,"byte_end":691111,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"encode","qualname":"<FarbfeldEncoder<W>>::encode","value":"fn (self, data: &[u8], width: u32, height: u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data``` (native endian)\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data``` (native endian)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":690988,"byte_end":691036,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":691041,"byte_end":691093,"line_start":227,"line_end":227,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":2983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695568,"byte_end":695574,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2985}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695483,"byte_end":695556,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695754,"byte_end":695757,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"fn (iterator: Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695674,"byte_end":695742,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696149,"byte_end":696163,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"fn (self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695868,"byte_end":695962,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695967,"byte_end":695979,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695984,"byte_end":696046,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696051,"byte_end":696054,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696059,"byte_end":696137,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":5367},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696452,"byte_end":696457,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":5368},{"krate":0,"index":5369},{"krate":0,"index":5370},{"krate":0,"index":5371}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696395,"byte_end":696423,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":5374},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696739,"byte_end":696744,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":5375}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696616,"byte_end":696670,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696846,"byte_end":696849,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"fn (buffer: RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696790,"byte_end":696834,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697077,"byte_end":697087,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"fn (buffer: RgbaImage, left: u32, top: u32, delay: Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697040,"byte_end":697065,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697299,"byte_end":697304,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"fn (&self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697264,"byte_end":697287,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697393,"byte_end":697399,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"fn (&self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697353,"byte_end":697381,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697495,"byte_end":697506,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697455,"byte_end":697483,"line_start":86,"line_end":86,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697595,"byte_end":697599,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697559,"byte_end":697583,"line_start":91,"line_end":91,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697681,"byte_end":697684,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697645,"byte_end":697669,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697949,"byte_end":697968,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"fn (numerator: u32, denominator: u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697744,"byte_end":697792,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697797,"byte_end":697800,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697805,"byte_end":697819,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697824,"byte_end":697827,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697832,"byte_end":697839,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697844,"byte_end":697865,"line_start":108,"line_end":108,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697870,"byte_end":697925,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697930,"byte_end":697937,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698611,"byte_end":698635,"line_start":129,"line_end":129,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"fn (duration: Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698088,"byte_end":698170,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698175,"byte_end":698178,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698183,"byte_end":698277,"line_start":117,"line_end":117,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698282,"byte_end":698360,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698365,"byte_end":698368,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698373,"byte_end":698387,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698392,"byte_end":698395,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698400,"byte_end":698407,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698412,"byte_end":698440,"line_start":123,"line_end":123,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698445,"byte_end":698466,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698471,"byte_end":698474,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698479,"byte_end":698524,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698529,"byte_end":698587,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":698592,"byte_end":698599,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":699811,"byte_end":699825,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"fn (self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":699585,"byte_end":699648,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":699653,"byte_end":699656,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":699661,"byte_end":699756,"line_start":156,"line_end":156,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":699761,"byte_end":699799,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":3055},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707105,"byte_end":707111,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3058}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707065,"byte_end":707093,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":3080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708272,"byte_end":708281,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":3083}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708224,"byte_end":708260,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":3102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709537,"byte_end":709541,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":3105}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709331,"byte_end":709364,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709365,"byte_end":709368,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709369,"byte_end":709455,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709456,"byte_end":709459,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709460,"byte_end":709525,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":3129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":712091,"byte_end":712098,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":3132}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711865,"byte_end":711906,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711907,"byte_end":711910,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711911,"byte_end":712001,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":712002,"byte_end":712005,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":712006,"byte_end":712079,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3153},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":714414,"byte_end":714429,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3159}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":714365,"byte_end":714402,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715736,"byte_end":715749,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3181}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715689,"byte_end":715724,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":3198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717124,"byte_end":717142,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":3201},{"krate":0,"index":3202},{"krate":0,"index":3203},{"krate":0,"index":3204}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717075,"byte_end":717112,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":718286,"byte_end":718302,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":3221},{"krate":0,"index":3222},{"krate":0,"index":3223}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":718239,"byte_end":718274,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5394},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721852,"byte_end":721863,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":5397},{"krate":0,"index":5398},{"krate":0,"index":5399},{"krate":0,"index":5400}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719474,"byte_end":719498,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719499,"byte_end":719502,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719503,"byte_end":719597,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719598,"byte_end":719687,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719688,"byte_end":719783,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719784,"byte_end":719879,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719880,"byte_end":719918,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719919,"byte_end":719922,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719923,"byte_end":720022,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720023,"byte_end":720058,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720059,"byte_end":720062,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720063,"byte_end":720108,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720109,"byte_end":720162,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720163,"byte_end":720199,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720200,"byte_end":720238,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720239,"byte_end":720242,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720243,"byte_end":720319,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720320,"byte_end":720323,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720324,"byte_end":720411,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720412,"byte_end":720510,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720511,"byte_end":720586,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720587,"byte_end":720590,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720591,"byte_end":720635,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720636,"byte_end":720684,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720685,"byte_end":720741,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720742,"byte_end":720745,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720746,"byte_end":720761,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720762,"byte_end":720765,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720766,"byte_end":720817,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720818,"byte_end":720821,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720822,"byte_end":720829,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720830,"byte_end":720861,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720862,"byte_end":720865,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720866,"byte_end":720906,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720907,"byte_end":720910,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720911,"byte_end":720933,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720934,"byte_end":720958,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":720959,"byte_end":721009,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721010,"byte_end":721060,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721061,"byte_end":721070,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721071,"byte_end":721076,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721077,"byte_end":721084,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721085,"byte_end":721088,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721089,"byte_end":721148,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721149,"byte_end":721152,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721153,"byte_end":721166,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721167,"byte_end":721234,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721235,"byte_end":721238,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721239,"byte_end":721301,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721302,"byte_end":721359,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721360,"byte_end":721389,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721390,"byte_end":721423,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721424,"byte_end":721440,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721441,"byte_end":721480,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721481,"byte_end":721490,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721491,"byte_end":721498,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721499,"byte_end":721502,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721503,"byte_end":721561,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721562,"byte_end":721569,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721570,"byte_end":721573,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721574,"byte_end":721614,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721615,"byte_end":721618,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721619,"byte_end":721632,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721633,"byte_end":721669,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721670,"byte_end":721673,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721674,"byte_end":721735,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721736,"byte_end":721794,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":721795,"byte_end":721802,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722621,"byte_end":722629,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"fn (width: u32, height: u32, buf: Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722336,"byte_end":722383,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722388,"byte_end":722424,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722429,"byte_end":722432,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722437,"byte_end":722527,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722532,"byte_end":722609,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723035,"byte_end":723043,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"fn (self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722986,"byte_end":723023,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723143,"byte_end":723149,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"fn (&self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723094,"byte_end":723131,"line_start":649,"line_end":649,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723254,"byte_end":723264,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"fn (&self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723203,"byte_end":723242,"line_start":654,"line_end":654,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723373,"byte_end":723378,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723333,"byte_end":723361,"line_start":659,"line_end":659,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3245},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723466,"byte_end":723472,"line_start":665,"line_end":665,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723425,"byte_end":723454,"line_start":664,"line_end":664,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723857,"byte_end":723863,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"fn (&self) -> Pixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723724,"byte_end":723778,"line_start":675,"line_end":675,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":723783,"byte_end":723845,"line_start":676,"line_end":676,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724363,"byte_end":724367,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"fn (&self) -> Rows<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724016,"byte_end":724068,"line_start":683,"line_end":683,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724073,"byte_end":724076,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724081,"byte_end":724172,"line_start":685,"line_end":685,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724177,"byte_end":724270,"line_start":686,"line_end":686,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724275,"byte_end":724351,"line_start":687,"line_end":687,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724682,"byte_end":724698,"line_start":696,"line_end":696,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"fn (&self) -> EnumeratePixels<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724461,"byte_end":724505,"line_start":692,"line_end":692,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724510,"byte_end":724563,"line_start":693,"line_end":693,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724568,"byte_end":724603,"line_start":694,"line_end":694,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724608,"byte_end":724670,"line_start":695,"line_end":695,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3250},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":725030,"byte_end":725044,"line_start":708,"line_end":708,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"fn (&self) -> EnumerateRows<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724879,"byte_end":724921,"line_start":705,"line_end":705,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724926,"byte_end":724978,"line_start":706,"line_end":706,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":724983,"byte_end":725018,"line_start":707,"line_end":707,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":725365,"byte_end":725374,"line_start":721,"line_end":721,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"fn (&self, x: u32, y: u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":725199,"byte_end":725253,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":725258,"byte_end":725261,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":725266,"byte_end":725278,"line_start":718,"line_end":718,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":725283,"byte_end":725286,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":725291,"byte_end":725353,"line_start":720,"line_end":720,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727100,"byte_end":727113,"line_start":762,"line_end":762,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"fn (&self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727020,"byte_end":727088,"line_start":761,"line_end":761,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727727,"byte_end":727744,"line_start":773,"line_end":773,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"fn (self) -> FlatSamples<Container>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727316,"byte_end":727390,"line_start":767,"line_end":767,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727395,"byte_end":727398,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727403,"byte_end":727491,"line_start":769,"line_end":769,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727496,"byte_end":727589,"line_start":770,"line_end":770,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727594,"byte_end":727688,"line_start":771,"line_end":771,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":727693,"byte_end":727715,"line_start":772,"line_end":772,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728227,"byte_end":728242,"line_start":788,"line_end":788,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"fn (&self) -> FlatSamples<&[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728085,"byte_end":728128,"line_start":785,"line_end":785,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728133,"byte_end":728136,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728141,"byte_end":728215,"line_start":787,"line_end":787,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728675,"byte_end":728694,"line_start":802,"line_end":802,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"fn (&mut self) -> FlatSamples<&mut [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728525,"byte_end":728576,"line_start":799,"line_end":799,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728581,"byte_end":728584,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":728589,"byte_end":728663,"line_start":801,"line_end":801,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729441,"byte_end":729451,"line_start":827,"line_end":827,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"fn (&mut self) -> PixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729367,"byte_end":729429,"line_start":826,"line_end":826,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729977,"byte_end":729985,"line_start":838,"line_end":838,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"fn (&mut self) -> RowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729622,"byte_end":729682,"line_start":833,"line_end":833,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729687,"byte_end":729690,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729695,"byte_end":729786,"line_start":835,"line_end":835,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729791,"byte_end":729884,"line_start":836,"line_end":836,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729889,"byte_end":729965,"line_start":837,"line_end":837,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730255,"byte_end":730275,"line_start":845,"line_end":845,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"fn (&mut self) -> EnumeratePixelsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730093,"byte_end":730137,"line_start":842,"line_end":842,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730142,"byte_end":730195,"line_start":843,"line_end":843,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730200,"byte_end":730243,"line_start":844,"line_end":844,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730649,"byte_end":730667,"line_start":858,"line_end":858,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"fn (&mut self) -> EnumerateRowsMut<P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730490,"byte_end":730532,"line_start":855,"line_end":855,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730537,"byte_end":730589,"line_start":856,"line_end":856,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730594,"byte_end":730637,"line_start":857,"line_end":857,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3271},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731030,"byte_end":731043,"line_start":872,"line_end":872,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730856,"byte_end":730918,"line_start":867,"line_end":867,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730923,"byte_end":730926,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730931,"byte_end":730943,"line_start":869,"line_end":869,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730948,"byte_end":730951,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":730956,"byte_end":731018,"line_start":871,"line_end":871,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3272},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731492,"byte_end":731501,"line_start":884,"line_end":884,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: P) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731343,"byte_end":731380,"line_start":879,"line_end":879,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731385,"byte_end":731388,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731393,"byte_end":731405,"line_start":881,"line_end":881,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731410,"byte_end":731413,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731418,"byte_end":731480,"line_start":883,"line_end":883,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731946,"byte_end":731950,"line_start":899,"line_end":899,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"fn <Q> (&self, path: Q) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731755,"byte_end":731808,"line_start":895,"line_end":895,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731813,"byte_end":731816,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731821,"byte_end":731877,"line_start":897,"line_end":897,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731882,"byte_end":731934,"line_start":898,"line_end":898,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732625,"byte_end":732641,"line_start":925,"line_end":925,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732418,"byte_end":732473,"line_start":920,"line_end":920,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732478,"byte_end":732503,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732508,"byte_end":732511,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732516,"byte_end":732588,"line_start":923,"line_end":923,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732593,"byte_end":732613,"line_start":924,"line_end":924,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3329},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739196,"byte_end":739199,"line_start":1138,"line_end":1138,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"fn (width: u32, height: u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739006,"byte_end":739067,"line_start":1133,"line_end":1133,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739072,"byte_end":739075,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739080,"byte_end":739092,"line_start":1135,"line_end":1135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739097,"byte_end":739100,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739105,"byte_end":739184,"line_start":1137,"line_end":1137,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3330},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739737,"byte_end":739747,"line_start":1154,"line_end":1154,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"fn (width: u32, height: u32, pixel: P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739557,"byte_end":739608,"line_start":1149,"line_end":1149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739613,"byte_end":739616,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739621,"byte_end":739633,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739638,"byte_end":739641,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739646,"byte_end":739725,"line_start":1153,"line_end":1153,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740262,"byte_end":740269,"line_start":1169,"line_end":1169,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"fn <F> (width: u32, height: u32, mut f: F) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":739968,"byte_end":740050,"line_start":1162,"line_end":1162,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740055,"byte_end":740058,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740063,"byte_end":740133,"line_start":1164,"line_end":1164,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740138,"byte_end":740141,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740146,"byte_end":740158,"line_start":1166,"line_end":1166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740163,"byte_end":740166,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740171,"byte_end":740250,"line_start":1168,"line_end":1168,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740680,"byte_end":740688,"line_start":1182,"line_end":1182,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"fn (width: u32, height: u32, buf: Vec<P::Subpixel>) -> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740560,"byte_end":740614,"line_start":1180,"line_end":1180,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740619,"byte_end":740668,"line_start":1181,"line_end":1181,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740975,"byte_end":740983,"line_start":1192,"line_end":1192,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"fn (self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740875,"byte_end":740936,"line_start":1190,"line_end":1190,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":740941,"byte_end":740963,"line_start":1191,"line_end":1191,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":3335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741111,"byte_end":741124,"line_start":1198,"line_end":1198,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":3337}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741045,"byte_end":741100,"line_start":1197,"line_end":1197,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3337},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741311,"byte_end":741318,"line_start":1203,"line_end":1203,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"fn (&self) -> T","parent":{"krate":0,"index":3335},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741134,"byte_end":741175,"line_start":1199,"line_end":1199,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741180,"byte_end":741183,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741188,"byte_end":741274,"line_start":1201,"line_end":1201,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741279,"byte_end":741303,"line_start":1202,"line_end":1202,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3339},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741586,"byte_end":741600,"line_start":1211,"line_end":1211,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"fn (self, palette: &[(u8, u8, u8)], transparent_idx: Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741396,"byte_end":741456,"line_start":1208,"line_end":1208,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741461,"byte_end":741529,"line_start":1209,"line_end":1209,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741534,"byte_end":741574,"line_start":1210,"line_end":1210,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":3348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743344,"byte_end":743352,"line_start":1263,"line_end":1263,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743305,"byte_end":743334,"line_start":1262,"line_end":1262,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":3349},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743441,"byte_end":743450,"line_start":1265,"line_end":1265,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743386,"byte_end":743431,"line_start":1264,"line_end":1264,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":3350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743530,"byte_end":743539,"line_start":1267,"line_end":1267,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743485,"byte_end":743520,"line_start":1266,"line_end":1266,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":3351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743635,"byte_end":743649,"line_start":1269,"line_end":1269,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":743574,"byte_end":743625,"line_start":1268,"line_end":1268,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5426},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752262,"byte_end":752264,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752229,"byte_end":752257,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752325,"byte_end":752328,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752270,"byte_end":752320,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752383,"byte_end":752387,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752334,"byte_end":752378,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5432},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752442,"byte_end":752447,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752393,"byte_end":752437,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5434},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752488,"byte_end":752491,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752454,"byte_end":752483,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752553,"byte_end":752557,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752497,"byte_end":752548,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5438},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752591,"byte_end":752596,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752563,"byte_end":752586,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5440},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752631,"byte_end":752637,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752602,"byte_end":752626,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752693,"byte_end":752697,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752644,"byte_end":752688,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5444},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752752,"byte_end":752757,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752703,"byte_end":752747,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752783,"byte_end":752798,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5425},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5425},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752213,"byte_end":752222,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"ColorType::{L8, La8, Rgb8, Rgba8, L16, La16, Rgb16, Rgba16, Bgr8, Bgra8, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5426},{"krate":0,"index":5428},{"krate":0,"index":5430},{"krate":0,"index":5432},{"krate":0,"index":5434},{"krate":0,"index":5436},{"krate":0,"index":5438},{"krate":0,"index":5440},{"krate":0,"index":5442},{"krate":0,"index":5444},{"krate":0,"index":5446}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752092,"byte_end":752152,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3370},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752946,"byte_end":752961,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752859,"byte_end":752934,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":753424,"byte_end":753433,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":753371,"byte_end":753412,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3373},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":753772,"byte_end":753781,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":753693,"byte_end":753760,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3375},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754175,"byte_end":754189,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"fn (self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754041,"byte_end":754137,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754142,"byte_end":754163,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754352,"byte_end":754365,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754276,"byte_end":754340,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755027,"byte_end":755029,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754994,"byte_end":755022,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755090,"byte_end":755093,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755035,"byte_end":755085,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755148,"byte_end":755152,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755099,"byte_end":755143,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5471},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755207,"byte_end":755212,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755158,"byte_end":755202,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5473},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755251,"byte_end":755253,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755218,"byte_end":755246,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5475},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755314,"byte_end":755317,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755259,"byte_end":755309,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5477},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755372,"byte_end":755376,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755323,"byte_end":755367,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755431,"byte_end":755436,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755382,"byte_end":755426,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5481},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755475,"byte_end":755477,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755442,"byte_end":755470,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5483},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755538,"byte_end":755541,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755483,"byte_end":755533,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5485},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755596,"byte_end":755600,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755547,"byte_end":755591,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5487},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755655,"byte_end":755660,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755606,"byte_end":755650,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5489},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755699,"byte_end":755701,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755666,"byte_end":755694,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755762,"byte_end":755765,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755707,"byte_end":755757,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5493},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755820,"byte_end":755824,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755771,"byte_end":755815,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5495},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755879,"byte_end":755884,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755830,"byte_end":755874,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5497},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755924,"byte_end":755927,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755890,"byte_end":755919,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5499},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755989,"byte_end":755993,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755933,"byte_end":755984,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756049,"byte_end":756054,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":755999,"byte_end":756044,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5503},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756110,"byte_end":756116,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756060,"byte_end":756105,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5505},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756171,"byte_end":756175,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756122,"byte_end":756166,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5507},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756230,"byte_end":756235,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756181,"byte_end":756225,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5509},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756464,"byte_end":756471,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756242,"byte_end":756336,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756341,"byte_end":756433,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756438,"byte_end":756459,"line_start":141,"line_end":141,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5512},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756501,"byte_end":756516,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754970,"byte_end":754987,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"ExtendedColorType::{L1, La1, Rgb1, Rgba1, L2, La2, Rgb2, Rgba2, L4, La4, Rgb4, Rgba4, L8, La8, Rgb8, Rgba8, L16, La16, Rgb16, Rgba16, Bgr8, Bgra8, Unknown, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":5465},{"krate":0,"index":5467},{"krate":0,"index":5469},{"krate":0,"index":5471},{"krate":0,"index":5473},{"krate":0,"index":5475},{"krate":0,"index":5477},{"krate":0,"index":5479},{"krate":0,"index":5481},{"krate":0,"index":5483},{"krate":0,"index":5485},{"krate":0,"index":5487},{"krate":0,"index":5489},{"krate":0,"index":5491},{"krate":0,"index":5493},{"krate":0,"index":5495},{"krate":0,"index":5497},{"krate":0,"index":5499},{"krate":0,"index":5501},{"krate":0,"index":5503},{"krate":0,"index":5505},{"krate":0,"index":5507},{"krate":0,"index":5509},{"krate":0,"index":5512}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754463,"byte_end":754526,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754527,"byte_end":754530,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754531,"byte_end":754628,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754629,"byte_end":754726,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754727,"byte_end":754756,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754757,"byte_end":754760,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754761,"byte_end":754853,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":754854,"byte_end":754909,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3378},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756799,"byte_end":756812,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"fn (self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756585,"byte_end":756640,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756645,"byte_end":756648,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756653,"byte_end":756747,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756752,"byte_end":756787,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5830},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763176,"byte_end":763179,"line_start":373,"line_end":373,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758926,"byte_end":758936,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758937,"byte_end":758959,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5859},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763256,"byte_end":763259,"line_start":374,"line_end":374,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758926,"byte_end":758936,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758937,"byte_end":758959,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5888},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763335,"byte_end":763339,"line_start":375,"line_end":375,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758926,"byte_end":758936,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758937,"byte_end":758959,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763416,"byte_end":763420,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758926,"byte_end":758936,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758937,"byte_end":758959,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5946},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763516,"byte_end":763520,"line_start":377,"line_end":377,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758926,"byte_end":758936,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758937,"byte_end":758959,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763615,"byte_end":763620,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758926,"byte_end":758936,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":758937,"byte_end":758959,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":3382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763787,"byte_end":763796,"line_start":382,"line_end":382,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":3384}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763715,"byte_end":763776,"line_start":381,"line_end":381,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763886,"byte_end":763896,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"fn (&mut self, _: &Other) -> ()","parent":{"krate":0,"index":3382},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763810,"byte_end":763878,"line_start":383,"line_end":383,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791815,"byte_end":791825,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791768,"byte_end":791810,"line_start":41,"line_end":41,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791901,"byte_end":791912,"line_start":45,"line_end":45,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791843,"byte_end":791896,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791981,"byte_end":791990,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791935,"byte_end":791976,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6065},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792064,"byte_end":792074,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792007,"byte_end":792059,"line_start":50,"line_end":50,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6068},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792138,"byte_end":792147,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792092,"byte_end":792133,"line_start":53,"line_end":53,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6071},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792221,"byte_end":792231,"line_start":57,"line_end":57,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792164,"byte_end":792216,"line_start":56,"line_end":56,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6074},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792297,"byte_end":792308,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792249,"byte_end":792292,"line_start":59,"line_end":59,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6077},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792387,"byte_end":792399,"line_start":63,"line_end":63,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792328,"byte_end":792382,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792471,"byte_end":792481,"line_start":66,"line_end":66,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792424,"byte_end":792466,"line_start":65,"line_end":65,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6083},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792558,"byte_end":792569,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":6055},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":792500,"byte_end":792553,"line_start":68,"line_end":68,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":6055},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791749,"byte_end":791761,"line_start":40,"line_end":40,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"DynamicImage::{ImageLuma8, ImageLumaA8, ImageRgb8, ImageRgba8, ImageBgr8, ImageBgra8, ImageLuma16, ImageLumaA16, ImageRgb16, ImageRgba16}","parent":null,"children":[{"krate":0,"index":6056},{"krate":0,"index":6059},{"krate":0,"index":6062},{"krate":0,"index":6065},{"krate":0,"index":6068},{"krate":0,"index":6071},{"krate":0,"index":6074},{"krate":0,"index":6077},{"krate":0,"index":6080},{"krate":0,"index":6083}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":791703,"byte_end":791722,"line_start":38,"line_end":38,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":796784,"byte_end":796793,"line_start":136,"line_end":136,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":796710,"byte_end":796772,"line_start":135,"line_end":135,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3608},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":796996,"byte_end":797007,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":796896,"byte_end":796950,"line_start":140,"line_end":140,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":796955,"byte_end":796984,"line_start":141,"line_end":141,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797184,"byte_end":797192,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797111,"byte_end":797172,"line_start":146,"line_end":146,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797368,"byte_end":797377,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797294,"byte_end":797356,"line_start":151,"line_end":151,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797554,"byte_end":797563,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797480,"byte_end":797542,"line_start":156,"line_end":156,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797739,"byte_end":797747,"line_start":162,"line_end":162,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797666,"byte_end":797727,"line_start":161,"line_end":161,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797923,"byte_end":797933,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":797849,"byte_end":797911,"line_start":166,"line_end":166,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798137,"byte_end":798149,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798037,"byte_end":798091,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798096,"byte_end":798125,"line_start":172,"line_end":172,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798327,"byte_end":798336,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798254,"byte_end":798315,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3616},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798513,"byte_end":798523,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"fn (w: u32, h: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798439,"byte_end":798501,"line_start":182,"line_end":182,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3617},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798689,"byte_end":798701,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"fn <'a> (decoder: impl ImageDecoder<'a>) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798627,"byte_end":798677,"line_start":187,"line_end":187,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3620},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798879,"byte_end":798885,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"fn (&self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798818,"byte_end":798867,"line_start":194,"line_end":194,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3621},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799054,"byte_end":799061,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"fn (&self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":798992,"byte_end":799042,"line_start":201,"line_end":201,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799230,"byte_end":799236,"line_start":209,"line_end":209,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"fn (&self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799169,"byte_end":799218,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799405,"byte_end":799412,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"fn (&self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799343,"byte_end":799393,"line_start":215,"line_end":215,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799581,"byte_end":799588,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"fn (&self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799520,"byte_end":799569,"line_start":222,"line_end":222,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799758,"byte_end":799771,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"fn (&self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799696,"byte_end":799746,"line_start":229,"line_end":229,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3626},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800063,"byte_end":800071,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"fn (self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799884,"byte_end":799930,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799935,"byte_end":799938,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":799943,"byte_end":800013,"line_start":238,"line_end":238,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800018,"byte_end":800051,"line_start":239,"line_end":239,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3627},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800388,"byte_end":800397,"line_start":251,"line_end":251,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"fn (self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800208,"byte_end":800255,"line_start":247,"line_end":247,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800260,"byte_end":800263,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800268,"byte_end":800338,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800343,"byte_end":800376,"line_start":250,"line_end":250,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800716,"byte_end":800724,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"fn (self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800537,"byte_end":800583,"line_start":258,"line_end":258,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800588,"byte_end":800591,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800596,"byte_end":800666,"line_start":260,"line_end":260,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800671,"byte_end":800704,"line_start":261,"line_end":261,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3629},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801041,"byte_end":801050,"line_start":273,"line_end":273,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"fn (self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800861,"byte_end":800908,"line_start":269,"line_end":269,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800913,"byte_end":800916,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800921,"byte_end":800991,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":800996,"byte_end":801029,"line_start":272,"line_end":272,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3630},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801370,"byte_end":801379,"line_start":284,"line_end":284,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"fn (self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801190,"byte_end":801237,"line_start":280,"line_end":280,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801242,"byte_end":801245,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801250,"byte_end":801320,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801325,"byte_end":801358,"line_start":283,"line_end":283,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801700,"byte_end":801715,"line_start":295,"line_end":295,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"fn (self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801519,"byte_end":801567,"line_start":291,"line_end":291,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801572,"byte_end":801575,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801580,"byte_end":801650,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801655,"byte_end":801688,"line_start":294,"line_end":294,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3632},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802097,"byte_end":802101,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801867,"byte_end":801938,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801943,"byte_end":801946,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":801951,"byte_end":802002,"line_start":304,"line_end":304,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802007,"byte_end":802085,"line_start":305,"line_end":305,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802358,"byte_end":802366,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"fn (&self, x: u32, y: u32, width: u32, height: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802275,"byte_end":802346,"line_start":310,"line_end":310,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802591,"byte_end":802598,"line_start":316,"line_end":316,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"fn (&self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802536,"byte_end":802579,"line_start":315,"line_end":315,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802813,"byte_end":802824,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"fn (&mut self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802750,"byte_end":802801,"line_start":323,"line_end":323,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803043,"byte_end":803050,"line_start":332,"line_end":332,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"fn (&self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":802988,"byte_end":803031,"line_start":331,"line_end":331,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803265,"byte_end":803276,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"fn (&mut self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803202,"byte_end":803253,"line_start":339,"line_end":339,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3638},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803496,"byte_end":803504,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"fn (&self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803440,"byte_end":803484,"line_start":347,"line_end":347,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803722,"byte_end":803734,"line_start":356,"line_end":356,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"fn (&mut self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803658,"byte_end":803710,"line_start":355,"line_end":355,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803956,"byte_end":803964,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"fn (&self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":803900,"byte_end":803944,"line_start":363,"line_end":363,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3641},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804182,"byte_end":804194,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"fn (&mut self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804118,"byte_end":804170,"line_start":371,"line_end":371,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804421,"byte_end":804429,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"fn (&self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804360,"byte_end":804409,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804652,"byte_end":804664,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"fn (&mut self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804583,"byte_end":804640,"line_start":387,"line_end":387,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804913,"byte_end":804927,"line_start":396,"line_end":396,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"fn (&self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":804830,"byte_end":804901,"line_start":395,"line_end":395,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3645},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805178,"byte_end":805196,"line_start":404,"line_end":404,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"fn (&mut self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805087,"byte_end":805166,"line_start":403,"line_end":403,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805424,"byte_end":805432,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"fn (&self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805368,"byte_end":805412,"line_start":411,"line_end":411,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805651,"byte_end":805663,"line_start":420,"line_end":420,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"fn (&mut self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805587,"byte_end":805639,"line_start":419,"line_end":419,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3648},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805887,"byte_end":805896,"line_start":428,"line_end":428,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"fn (&self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":805830,"byte_end":805875,"line_start":427,"line_end":427,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806118,"byte_end":806131,"line_start":436,"line_end":436,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"fn (&mut self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806053,"byte_end":806106,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806362,"byte_end":806371,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"fn (&self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806300,"byte_end":806350,"line_start":443,"line_end":443,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806598,"byte_end":806611,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"fn (&mut self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806528,"byte_end":806586,"line_start":451,"line_end":451,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806864,"byte_end":806879,"line_start":460,"line_end":460,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"fn (&self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":806780,"byte_end":806852,"line_start":459,"line_end":459,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3653},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":807134,"byte_end":807153,"line_start":468,"line_end":468,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"fn (&mut self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":807042,"byte_end":807122,"line_start":467,"line_end":467,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3654},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":807412,"byte_end":807430,"line_start":476,"line_end":476,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"fn (&self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":807328,"byte_end":807400,"line_start":475,"line_end":475,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":808064,"byte_end":808083,"line_start":489,"line_end":489,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"fn (&self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":807979,"byte_end":808052,"line_start":488,"line_end":488,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":808550,"byte_end":808558,"line_start":500,"line_end":500,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":808490,"byte_end":808538,"line_start":499,"line_end":499,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3657},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":808666,"byte_end":808671,"line_start":505,"line_end":505,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"fn (&self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":808619,"byte_end":808654,"line_start":504,"line_end":504,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3658},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":809475,"byte_end":809484,"line_start":521,"line_end":521,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":809418,"byte_end":809463,"line_start":520,"line_end":520,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810590,"byte_end":810596,"line_start":538,"line_end":538,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810504,"byte_end":810540,"line_start":536,"line_end":536,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810545,"byte_end":810578,"line_start":537,"line_end":537,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810960,"byte_end":810966,"line_start":546,"line_end":546,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810683,"byte_end":810742,"line_start":542,"line_end":542,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810747,"byte_end":810810,"line_start":543,"line_end":543,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810815,"byte_end":810877,"line_start":544,"line_end":544,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":810882,"byte_end":810948,"line_start":545,"line_end":545,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811430,"byte_end":811442,"line_start":556,"line_end":556,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811228,"byte_end":811287,"line_start":553,"line_end":553,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811292,"byte_end":811348,"line_start":554,"line_end":554,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811353,"byte_end":811418,"line_start":555,"line_end":555,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812133,"byte_end":812142,"line_start":573,"line_end":573,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811658,"byte_end":811714,"line_start":565,"line_end":565,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811719,"byte_end":811782,"line_start":566,"line_end":566,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811787,"byte_end":811849,"line_start":567,"line_end":567,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811854,"byte_end":811920,"line_start":568,"line_end":568,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811925,"byte_end":811928,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":811933,"byte_end":811996,"line_start":570,"line_end":570,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812001,"byte_end":812051,"line_start":571,"line_end":571,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812056,"byte_end":812121,"line_start":572,"line_end":572,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812750,"byte_end":812765,"line_start":585,"line_end":585,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"fn (&self, nwidth: u32, nheight: u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812368,"byte_end":812413,"line_start":579,"line_end":579,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812418,"byte_end":812474,"line_start":580,"line_end":580,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812479,"byte_end":812545,"line_start":581,"line_end":581,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812550,"byte_end":812613,"line_start":582,"line_end":582,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812618,"byte_end":812668,"line_start":583,"line_end":583,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812673,"byte_end":812738,"line_start":584,"line_end":584,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":813285,"byte_end":813299,"line_start":595,"line_end":595,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"fn (&self, nwidth: u32, nheight: u32, filter: imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812907,"byte_end":812966,"line_start":589,"line_end":589,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":812971,"byte_end":813034,"line_start":590,"line_end":590,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":813039,"byte_end":813101,"line_start":591,"line_end":591,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":813106,"byte_end":813168,"line_start":592,"line_end":592,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":813173,"byte_end":813237,"line_start":593,"line_end":593,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":813242,"byte_end":813273,"line_start":594,"line_end":594,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3665},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814119,"byte_end":814123,"line_start":618,"line_end":618,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"fn (&self, sigma: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814007,"byte_end":814050,"line_start":616,"line_end":616,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814055,"byte_end":814107,"line_start":617,"line_end":617,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3666},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814501,"byte_end":814510,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"fn (&self, sigma: f32, threshold: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814235,"byte_end":814280,"line_start":622,"line_end":622,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814285,"byte_end":814336,"line_start":623,"line_end":623,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814341,"byte_end":814397,"line_start":624,"line_end":624,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814402,"byte_end":814405,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814410,"byte_end":814489,"line_start":626,"line_end":626,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3667},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814719,"byte_end":814728,"line_start":632,"line_end":632,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"fn (&self, kernel: &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814654,"byte_end":814707,"line_start":631,"line_end":631,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815138,"byte_end":815153,"line_start":643,"line_end":643,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"fn (&self, c: f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814935,"byte_end":814973,"line_start":640,"line_end":640,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":814978,"byte_end":815037,"line_start":641,"line_end":641,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815042,"byte_end":815126,"line_start":642,"line_end":642,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815453,"byte_end":815461,"line_start":650,"line_end":650,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815261,"byte_end":815299,"line_start":647,"line_end":647,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815304,"byte_end":815360,"line_start":648,"line_end":648,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815365,"byte_end":815441,"line_start":649,"line_end":649,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815809,"byte_end":815818,"line_start":658,"line_end":658,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"fn (&self, value: i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815577,"byte_end":815611,"line_start":654,"line_end":654,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815616,"byte_end":815667,"line_start":655,"line_end":655,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815672,"byte_end":815741,"line_start":656,"line_end":656,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815746,"byte_end":815797,"line_start":657,"line_end":657,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815977,"byte_end":815982,"line_start":663,"line_end":663,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":815935,"byte_end":815965,"line_start":662,"line_end":662,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816128,"byte_end":816133,"line_start":668,"line_end":668,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816084,"byte_end":816116,"line_start":667,"line_end":667,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816292,"byte_end":816300,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816237,"byte_end":816280,"line_start":672,"line_end":672,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3674},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816453,"byte_end":816462,"line_start":678,"line_end":678,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816397,"byte_end":816441,"line_start":677,"line_end":677,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3675},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816616,"byte_end":816625,"line_start":683,"line_end":683,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"fn (&self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816560,"byte_end":816604,"line_start":682,"line_end":682,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3676},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816780,"byte_end":816788,"line_start":688,"line_end":688,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"fn <W, F> (&self, w: &mut W, format: F) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":816723,"byte_end":816768,"line_start":687,"line_end":687,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820700,"byte_end":820704,"line_start":792,"line_end":792,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"fn <Q> (&self, path: Q) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820566,"byte_end":820619,"line_start":789,"line_end":789,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820624,"byte_end":820627,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820632,"byte_end":820688,"line_start":791,"line_end":791,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":821076,"byte_end":821092,"line_start":806,"line_end":806,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"fn <Q> (&self, path: Q, format: ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820869,"byte_end":820924,"line_start":801,"line_end":801,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820929,"byte_end":820954,"line_start":802,"line_end":802,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820959,"byte_end":820962,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":820967,"byte_end":821039,"line_start":804,"line_end":804,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":821044,"byte_end":821064,"line_start":805,"line_end":805,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827954,"byte_end":827958,"line_start":984,"line_end":984,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"fn <P> (path: P) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827652,"byte_end":827701,"line_start":977,"line_end":977,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827702,"byte_end":827770,"line_start":978,"line_end":978,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827771,"byte_end":827774,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827775,"byte_end":827871,"line_start":980,"line_end":980,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827872,"byte_end":827900,"line_start":981,"line_end":981,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827901,"byte_end":827904,"line_start":982,"line_end":982,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":827905,"byte_end":827946,"line_start":983,"line_end":983,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828513,"byte_end":828529,"line_start":999,"line_end":999,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"fn <P> (path: P) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828148,"byte_end":828215,"line_start":992,"line_end":992,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828216,"byte_end":828296,"line_start":993,"line_end":993,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828297,"byte_end":828300,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828301,"byte_end":828397,"line_start":995,"line_end":995,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828398,"byte_end":828459,"line_start":996,"line_end":996,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828460,"byte_end":828463,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828464,"byte_end":828505,"line_start":998,"line_end":998,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3705},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829104,"byte_end":829115,"line_start":1014,"line_end":1014,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828729,"byte_end":828791,"line_start":1007,"line_end":1007,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828792,"byte_end":828795,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828796,"byte_end":828882,"line_start":1009,"line_end":1009,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828883,"byte_end":828944,"line_start":1010,"line_end":1010,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":828946,"byte_end":829037,"line_start":1012,"line_end":1012,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829038,"byte_end":829096,"line_start":1013,"line_end":1013,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":3707},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829769,"byte_end":829792,"line_start":1036,"line_end":1036,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"fn <P> (path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType, format: ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829421,"byte_end":829482,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829483,"byte_end":829511,"line_start":1029,"line_end":1029,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829512,"byte_end":829515,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829516,"byte_end":829578,"line_start":1031,"line_end":1031,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829579,"byte_end":829611,"line_start":1032,"line_end":1032,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829612,"byte_end":829672,"line_start":1033,"line_end":1033,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829673,"byte_end":829731,"line_start":1034,"line_end":1034,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":829732,"byte_end":829761,"line_start":1035,"line_end":1035,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":3709},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830355,"byte_end":830371,"line_start":1059,"line_end":1059,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"fn (buffer: &[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830111,"byte_end":830151,"line_start":1051,"line_end":1051,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830152,"byte_end":830155,"line_start":1052,"line_end":1052,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830156,"byte_end":830207,"line_start":1053,"line_end":1053,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830208,"byte_end":830250,"line_start":1054,"line_end":1054,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830251,"byte_end":830254,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830255,"byte_end":830301,"line_start":1056,"line_end":1056,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830302,"byte_end":830305,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830306,"byte_end":830347,"line_start":1058,"line_end":1058,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830853,"byte_end":830881,"line_start":1074,"line_end":1074,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"fn (buf: &[u8], format: ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830526,"byte_end":830566,"line_start":1064,"line_end":1064,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830567,"byte_end":830570,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830571,"byte_end":830668,"line_start":1066,"line_end":1066,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830669,"byte_end":830703,"line_start":1067,"line_end":1067,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830704,"byte_end":830707,"line_start":1068,"line_end":1068,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830708,"byte_end":830754,"line_start":1069,"line_end":1069,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830755,"byte_end":830758,"line_start":1070,"line_end":1070,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830759,"byte_end":830785,"line_start":1071,"line_end":1071,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830786,"byte_end":830827,"line_start":1072,"line_end":1072,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":830828,"byte_end":830845,"line_start":1073,"line_end":1073,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6089},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835604,"byte_end":835607,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835573,"byte_end":835599,"line_start":24,"line_end":24,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6091},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835646,"byte_end":835650,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835614,"byte_end":835641,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6093},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835688,"byte_end":835691,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835657,"byte_end":835683,"line_start":30,"line_end":30,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6095},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835730,"byte_end":835734,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835698,"byte_end":835725,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6097},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835780,"byte_end":835783,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835741,"byte_end":835775,"line_start":36,"line_end":36,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6099},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835822,"byte_end":835826,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835790,"byte_end":835817,"line_start":39,"line_end":39,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835864,"byte_end":835867,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835833,"byte_end":835859,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6103},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835905,"byte_end":835908,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835874,"byte_end":835900,"line_start":45,"line_end":45,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835946,"byte_end":835949,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835915,"byte_end":835941,"line_start":48,"line_end":48,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835987,"byte_end":835990,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835956,"byte_end":835982,"line_start":51,"line_end":51,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836037,"byte_end":836040,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835997,"byte_end":836032,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836083,"byte_end":836091,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836047,"byte_end":836078,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836131,"byte_end":836135,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836098,"byte_end":836126,"line_start":60,"line_end":60,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836161,"byte_end":836176,"line_start":64,"line_end":64,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":6088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6088},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835555,"byte_end":835566,"line_start":23,"line_end":23,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"ImageFormat::{Png, Jpeg, Gif, WebP, Pnm, Tiff, Tga, Dds, Bmp, Ico, Hdr, Farbfeld, Avif, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":6089},{"krate":0,"index":6091},{"krate":0,"index":6093},{"krate":0,"index":6095},{"krate":0,"index":6097},{"krate":0,"index":6099},{"krate":0,"index":6101},{"krate":0,"index":6103},{"krate":0,"index":6105},{"krate":0,"index":6107},{"krate":0,"index":6109},{"krate":0,"index":6111},{"krate":0,"index":6113},{"krate":0,"index":6115}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835392,"byte_end":835438,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":835439,"byte_end":835494,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3737},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836318,"byte_end":836327,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"fn <P> (path: P) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836239,"byte_end":836306,"line_start":68,"line_end":68,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3739},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":837178,"byte_end":837192,"line_start":84,"line_end":84,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"fn (self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836588,"byte_end":836647,"line_start":75,"line_end":75,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836652,"byte_end":836655,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836660,"byte_end":836747,"line_start":77,"line_end":77,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836752,"byte_end":836846,"line_start":78,"line_end":78,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836851,"byte_end":836946,"line_start":79,"line_end":79,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836951,"byte_end":836962,"line_start":80,"line_end":80,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836967,"byte_end":836970,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836975,"byte_end":837069,"line_start":82,"line_end":82,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":837074,"byte_end":837166,"line_start":83,"line_end":83,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838242,"byte_end":838245,"line_start":110,"line_end":110,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838183,"byte_end":838206,"line_start":108,"line_end":108,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838211,"byte_end":838237,"line_start":109,"line_end":109,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838336,"byte_end":838340,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838252,"byte_end":838276,"line_start":112,"line_end":112,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838281,"byte_end":838331,"line_start":113,"line_end":113,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6139},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838422,"byte_end":838425,"line_start":118,"line_end":118,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageOutputFormat::Pnm","value":"ImageOutputFormat::Pnm(PNMSubtype)","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838351,"byte_end":838374,"line_start":116,"line_end":116,"column_start":5,"column_end":28}},{"value":"/ An Image in one of the PNM Formats","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838379,"byte_end":838417,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838503,"byte_end":838506,"line_start":122,"line_end":122,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageOutputFormat::Gif","value":"ImageOutputFormat::Gif","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838444,"byte_end":838467,"line_start":120,"line_end":120,"column_start":5,"column_end":28}},{"value":"/ An Image in GIF Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838472,"byte_end":838498,"line_start":121,"line_end":121,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6144},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838572,"byte_end":838575,"line_start":126,"line_end":126,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageOutputFormat::Ico","value":"ImageOutputFormat::Ico","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838513,"byte_end":838536,"line_start":124,"line_end":124,"column_start":5,"column_end":28}},{"value":"/ An Image in ICO Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838541,"byte_end":838567,"line_start":125,"line_end":125,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6146},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838641,"byte_end":838644,"line_start":130,"line_end":130,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838582,"byte_end":838605,"line_start":128,"line_end":128,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838610,"byte_end":838636,"line_start":129,"line_end":129,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838720,"byte_end":838728,"line_start":134,"line_end":134,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageOutputFormat::Farbfeld","value":"ImageOutputFormat::Farbfeld","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838651,"byte_end":838679,"line_start":132,"line_end":132,"column_start":5,"column_end":33}},{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838684,"byte_end":838715,"line_start":133,"line_end":133,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6150},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838794,"byte_end":838797,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageOutputFormat::Tga","value":"ImageOutputFormat::Tga","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838735,"byte_end":838758,"line_start":136,"line_end":136,"column_start":5,"column_end":28}},{"value":"/ An Image in TGA Format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838763,"byte_end":838789,"line_start":137,"line_end":137,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6152},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":839049,"byte_end":839060,"line_start":143,"line_end":143,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838804,"byte_end":838876,"line_start":140,"line_end":140,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":839094,"byte_end":839109,"line_start":146,"line_end":146,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":6133},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838159,"byte_end":838176,"line_start":107,"line_end":107,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"ImageOutputFormat::{Png, Jpeg, Pnm, Gif, Ico, Bmp, Farbfeld, Tga, Unsupported, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":6134},{"krate":0,"index":6136},{"krate":0,"index":6139},{"krate":0,"index":6142},{"krate":0,"index":6144},{"krate":0,"index":6146},{"krate":0,"index":6148},{"krate":0,"index":6150},{"krate":0,"index":6152},{"krate":0,"index":6155}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":838051,"byte_end":838110,"line_start":105,"line_end":105,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848325,"byte_end":848333,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":6170},{"krate":0,"index":6171}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":847921,"byte_end":847971,"line_start":359,"line_end":359,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":847972,"byte_end":847975,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":847976,"byte_end":848073,"line_start":361,"line_end":361,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848074,"byte_end":848168,"line_start":362,"line_end":362,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848169,"byte_end":848268,"line_start":363,"line_end":363,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848441,"byte_end":848448,"line_start":372,"line_end":372,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848393,"byte_end":848429,"line_start":371,"line_end":371,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3766},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848621,"byte_end":848626,"line_start":379,"line_end":379,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848496,"byte_end":848541,"line_start":376,"line_end":376,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848546,"byte_end":848549,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848554,"byte_end":848609,"line_start":378,"line_end":378,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3767},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848736,"byte_end":848745,"line_start":384,"line_end":384,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"fn (self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848672,"byte_end":848724,"line_start":383,"line_end":383,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":3768},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848874,"byte_end":848886,"line_start":390,"line_end":390,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":3770},{"krate":0,"index":3771},{"krate":0,"index":3772},{"krate":0,"index":3773},{"krate":0,"index":3774},{"krate":0,"index":3775},{"krate":0,"index":3776},{"krate":0,"index":3777},{"krate":0,"index":3779}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848822,"byte_end":848863,"line_start":389,"line_end":389,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3770},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848963,"byte_end":848969,"line_start":392,"line_end":392,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848904,"byte_end":848953,"line_start":391,"line_end":391,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849059,"byte_end":849069,"line_start":395,"line_end":395,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"fn (&self) -> (u32, u32)","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848987,"byte_end":849051,"line_start":394,"line_end":394,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3772},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849174,"byte_end":849184,"line_start":398,"line_end":398,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"fn (&self) -> ColorType","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849097,"byte_end":849166,"line_start":397,"line_end":397,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3773},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849278,"byte_end":849297,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"fn (&self) -> ExtendedColorType","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849211,"byte_end":849270,"line_start":400,"line_end":400,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3774},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849638,"byte_end":849649,"line_start":408,"line_end":408,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"fn (self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849372,"byte_end":849456,"line_start":405,"line_end":405,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849461,"byte_end":849557,"line_start":406,"line_end":406,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849562,"byte_end":849630,"line_start":407,"line_end":407,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850036,"byte_end":850047,"line_start":416,"line_end":416,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849691,"byte_end":849750,"line_start":410,"line_end":410,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849755,"byte_end":849758,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849763,"byte_end":849836,"line_start":412,"line_end":412,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849841,"byte_end":849917,"line_start":413,"line_end":413,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":849922,"byte_end":850014,"line_start":414,"line_end":414,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850019,"byte_end":850028,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850384,"byte_end":850398,"line_start":423,"line_end":423,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"fn (&self) -> u64","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850226,"byte_end":850322,"line_start":421,"line_end":421,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850327,"byte_end":850376,"line_start":422,"line_end":422,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3777},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851287,"byte_end":851297,"line_start":447,"line_end":447,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"fn (self, buf: &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850453,"byte_end":850492,"line_start":427,"line_end":427,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850497,"byte_end":850500,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850505,"byte_end":850593,"line_start":429,"line_end":429,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850598,"byte_end":850691,"line_start":430,"line_end":430,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850696,"byte_end":850794,"line_start":431,"line_end":431,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850799,"byte_end":850869,"line_start":432,"line_end":432,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850874,"byte_end":850877,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850882,"byte_end":850894,"line_start":434,"line_end":434,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850899,"byte_end":850902,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850907,"byte_end":850967,"line_start":436,"line_end":436,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850972,"byte_end":850975,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850980,"byte_end":850994,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":850999,"byte_end":851002,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851007,"byte_end":851022,"line_start":440,"line_end":440,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851027,"byte_end":851066,"line_start":441,"line_end":441,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851071,"byte_end":851135,"line_start":442,"line_end":442,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851140,"byte_end":851205,"line_start":443,"line_end":443,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851210,"byte_end":851253,"line_start":444,"line_end":444,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851258,"byte_end":851269,"line_start":445,"line_end":445,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851274,"byte_end":851279,"line_start":446,"line_end":446,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":3779},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851525,"byte_end":851549,"line_start":453,"line_end":453,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"fn <F> (self, buf: &mut [u8], progress_callback: F) -> ImageResult<()>","parent":{"krate":0,"index":3768},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851403,"byte_end":851499,"line_start":451,"line_end":451,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":851504,"byte_end":851517,"line_start":452,"line_end":452,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3781},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":852572,"byte_end":852587,"line_start":487,"line_end":487,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder<'a> + Sized","parent":null,"children":[{"krate":0,"index":3783},{"krate":0,"index":3785}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":852499,"byte_end":852561,"line_start":486,"line_end":486,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3783},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":852742,"byte_end":852751,"line_start":489,"line_end":489,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32, buf: &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3781},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":852624,"byte_end":852734,"line_start":488,"line_end":488,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":3785},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853693,"byte_end":853716,"line_start":512,"line_end":512,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"fn <F> (&mut self, x: u32, y: u32, width: u32, height: u32, buf: &mut [u8], progress_callback: F) -> ImageResult<()>","parent":{"krate":0,"index":3781},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":852977,"byte_end":853056,"line_start":500,"line_end":500,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853061,"byte_end":853064,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853069,"byte_end":853130,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853135,"byte_end":853209,"line_start":503,"line_end":503,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853214,"byte_end":853273,"line_start":504,"line_end":504,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853278,"byte_end":853281,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853286,"byte_end":853378,"line_start":506,"line_end":506,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853383,"byte_end":853442,"line_start":507,"line_end":507,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853447,"byte_end":853507,"line_start":508,"line_end":508,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853512,"byte_end":853515,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853520,"byte_end":853584,"line_start":510,"line_end":510,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853589,"byte_end":853685,"line_start":511,"line_end":511,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":3787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853947,"byte_end":853963,"line_start":524,"line_end":524,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":3789}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853910,"byte_end":853936,"line_start":523,"line_end":523,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3789},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854035,"byte_end":854046,"line_start":526,"line_end":526,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"fn (self) -> Frames<'a>","parent":{"krate":0,"index":3787},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":853974,"byte_end":854027,"line_start":525,"line_end":525,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":3790},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854118,"byte_end":854130,"line_start":530,"line_end":530,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":3791}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854071,"byte_end":854107,"line_start":529,"line_end":529,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3791},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854679,"byte_end":854690,"line_start":541,"line_end":541,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"fn (self, buf: &[u8], width: u32, height: u32, color_type: ColorType) -> ImageResult<()>","parent":{"krate":0,"index":3790},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854137,"byte_end":854189,"line_start":531,"line_end":531,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854194,"byte_end":854197,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854202,"byte_end":854273,"line_start":533,"line_end":533,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854278,"byte_end":854354,"line_start":534,"line_end":534,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854359,"byte_end":854434,"line_start":535,"line_end":535,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854439,"byte_end":854513,"line_start":536,"line_end":536,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854518,"byte_end":854566,"line_start":537,"line_end":537,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854571,"byte_end":854574,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854579,"byte_end":854648,"line_start":539,"line_end":539,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854653,"byte_end":854671,"line_start":540,"line_end":540,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6184},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854884,"byte_end":854890,"line_start":552,"line_end":552,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":6187},{"krate":0,"index":6188},{"krate":0,"index":6189},{"krate":0,"index":6190},{"krate":0,"index":6191}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":854827,"byte_end":854855,"line_start":550,"line_end":550,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":3800},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855631,"byte_end":855647,"line_start":589,"line_end":589,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":3801},{"krate":0,"index":3802},{"krate":0,"index":3803},{"krate":0,"index":3804},{"krate":0,"index":3805},{"krate":0,"index":3806},{"krate":0,"index":3807},{"krate":0,"index":3808},{"krate":0,"index":3809},{"krate":0,"index":3810},{"krate":0,"index":3811},{"krate":0,"index":3812}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855590,"byte_end":855620,"line_start":588,"line_end":588,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":3801},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855686,"byte_end":855691,"line_start":591,"line_end":591,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855654,"byte_end":855676,"line_start":590,"line_end":590,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":3802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855925,"byte_end":855939,"line_start":596,"line_end":596,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855705,"byte_end":855776,"line_start":593,"line_end":593,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855781,"byte_end":855852,"line_start":594,"line_end":594,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855857,"byte_end":855915,"line_start":595,"line_end":595,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856032,"byte_end":856042,"line_start":599,"line_end":599,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"fn (&self) -> (u32, u32)","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855985,"byte_end":856024,"line_start":598,"line_end":598,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3804},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856106,"byte_end":856111,"line_start":602,"line_end":602,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"fn (&self) -> u32","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856070,"byte_end":856098,"line_start":601,"line_end":601,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3805},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856226,"byte_end":856232,"line_start":608,"line_end":608,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"fn (&self) -> u32","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856189,"byte_end":856218,"line_start":607,"line_end":607,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3806},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856359,"byte_end":856365,"line_start":614,"line_end":614,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"fn (&self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856310,"byte_end":856351,"line_start":613,"line_end":613,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3807},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856482,"byte_end":856491,"line_start":617,"line_end":617,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"fn (&self, x: u32, y: u32) -> bool","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856403,"byte_end":856474,"line_start":616,"line_end":616,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3808},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856814,"byte_end":856823,"line_start":629,"line_end":629,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856639,"byte_end":856678,"line_start":622,"line_end":622,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856683,"byte_end":856686,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856691,"byte_end":856703,"line_start":624,"line_end":624,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856708,"byte_end":856711,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856716,"byte_end":856756,"line_start":626,"line_end":626,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856761,"byte_end":856764,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856769,"byte_end":856806,"line_start":628,"line_end":628,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3809},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857144,"byte_end":857160,"line_start":639,"line_end":639,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"fn (&self, x: u32, y: u32) -> Self::Pixel","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856868,"byte_end":856907,"line_start":631,"line_end":631,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856912,"byte_end":856915,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":856920,"byte_end":856995,"line_start":633,"line_end":633,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857000,"byte_end":857012,"line_start":634,"line_end":634,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857017,"byte_end":857020,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857025,"byte_end":857080,"line_start":636,"line_end":636,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857085,"byte_end":857088,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857093,"byte_end":857129,"line_start":638,"line_end":638,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857392,"byte_end":857398,"line_start":646,"line_end":646,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"fn (&self) -> Pixels<Self>","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857241,"byte_end":857295,"line_start":643,"line_end":643,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857300,"byte_end":857353,"line_start":644,"line_end":644,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857358,"byte_end":857384,"line_start":645,"line_end":645,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3811},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857668,"byte_end":857673,"line_start":659,"line_end":659,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"fn (&self) -> &Self::InnerImageView","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857612,"byte_end":857660,"line_start":658,"line_end":658,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3812},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857870,"byte_end":857874,"line_start":663,"line_end":663,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"fn (&self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":3800},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857712,"byte_end":857778,"line_start":661,"line_end":661,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":857783,"byte_end":857862,"line_start":662,"line_end":662,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":3813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858073,"byte_end":858085,"line_start":669,"line_end":669,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3816},{"krate":0,"index":3817},{"krate":0,"index":3818},{"krate":0,"index":3819},{"krate":0,"index":3821},{"krate":0,"index":3823},{"krate":0,"index":3824}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858026,"byte_end":858062,"line_start":668,"line_end":668,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":3814},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858330,"byte_end":858340,"line_start":673,"line_end":673,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858110,"byte_end":858181,"line_start":670,"line_end":670,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858186,"byte_end":858257,"line_start":671,"line_end":671,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858262,"byte_end":858320,"line_start":672,"line_end":672,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3815},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858530,"byte_end":858543,"line_start":680,"line_end":680,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"fn (&mut self, x: u32, y: u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858382,"byte_end":858444,"line_start":675,"line_end":675,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858449,"byte_end":858452,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858457,"byte_end":858469,"line_start":677,"line_end":677,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858474,"byte_end":858477,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858482,"byte_end":858522,"line_start":679,"line_end":679,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858717,"byte_end":858726,"line_start":687,"line_end":687,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858597,"byte_end":858631,"line_start":682,"line_end":682,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858636,"byte_end":858639,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858644,"byte_end":858656,"line_start":684,"line_end":684,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858661,"byte_end":858664,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858669,"byte_end":858709,"line_start":686,"line_end":686,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3817},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859080,"byte_end":859096,"line_start":697,"line_end":697,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858780,"byte_end":858815,"line_start":689,"line_end":689,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858820,"byte_end":858823,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858828,"byte_end":858903,"line_start":691,"line_end":691,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858908,"byte_end":858920,"line_start":692,"line_end":692,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858925,"byte_end":858928,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858933,"byte_end":858988,"line_start":694,"line_end":694,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858993,"byte_end":858996,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859001,"byte_end":859065,"line_start":696,"line_end":696,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3818},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859363,"byte_end":859374,"line_start":704,"line_end":704,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"fn (&mut self, x: u32, y: u32, pixel: Self::Pixel) -> ()","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859194,"byte_end":859264,"line_start":701,"line_end":701,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859269,"byte_end":859272,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859277,"byte_end":859355,"line_start":703,"line_end":703,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":860136,"byte_end":860145,"line_start":721,"line_end":721,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"fn <O> (&mut self, other: &O, x: u32, y: u32) -> ImageResult<()>","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859428,"byte_end":859492,"line_start":706,"line_end":706,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859497,"byte_end":859500,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859505,"byte_end":859566,"line_start":708,"line_end":708,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859571,"byte_end":859604,"line_start":709,"line_end":709,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859609,"byte_end":859612,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859617,"byte_end":859702,"line_start":711,"line_end":711,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859707,"byte_end":859710,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859715,"byte_end":859807,"line_start":713,"line_end":713,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859812,"byte_end":859878,"line_start":714,"line_end":714,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859883,"byte_end":859886,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859891,"byte_end":859904,"line_start":716,"line_end":716,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859909,"byte_end":859990,"line_start":717,"line_end":717,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":859995,"byte_end":859998,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":860003,"byte_end":860074,"line_start":719,"line_end":719,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":860079,"byte_end":860128,"line_start":720,"line_end":720,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":861192,"byte_end":861203,"line_start":749,"line_end":749,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"fn (&mut self, source: Rect, x: u32, y: u32) -> bool","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":860844,"byte_end":860931,"line_start":742,"line_end":742,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":860936,"byte_end":860939,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":860944,"byte_end":861041,"line_start":744,"line_end":744,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":861046,"byte_end":861049,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":861054,"byte_end":861067,"line_start":746,"line_end":746,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":861072,"byte_end":861141,"line_start":747,"line_end":747,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":861146,"byte_end":861184,"line_start":748,"line_end":748,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3823},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":862861,"byte_end":862870,"line_start":785,"line_end":785,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"fn (&mut self) -> &mut Self::InnerImage","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":862797,"byte_end":862853,"line_start":784,"line_end":784,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3824},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863065,"byte_end":863074,"line_start":789,"line_end":789,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":3813},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":862913,"byte_end":862975,"line_start":787,"line_end":787,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":862980,"byte_end":863057,"line_start":788,"line_end":788,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":3825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863565,"byte_end":863573,"line_start":806,"line_end":806,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":3827},{"krate":0,"index":3828},{"krate":0,"index":3829},{"krate":0,"index":3830},{"krate":0,"index":3831}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863281,"byte_end":863310,"line_start":800,"line_end":800,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863311,"byte_end":863314,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863315,"byte_end":863365,"line_start":802,"line_end":802,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863366,"byte_end":863427,"line_start":803,"line_end":803,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863428,"byte_end":863491,"line_start":804,"line_end":804,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863492,"byte_end":863553,"line_start":805,"line_end":805,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3838},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863961,"byte_end":863964,"line_start":822,"line_end":822,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"fn (image: I, x: u32, y: u32, width: u32, height: u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863921,"byte_end":863949,"line_start":821,"line_end":821,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":864253,"byte_end":864266,"line_start":833,"line_end":833,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"fn (&mut self, x: u32, y: u32, width: u32, height: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":864197,"byte_end":864241,"line_start":832,"line_end":832,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":864500,"byte_end":864508,"line_start":841,"line_end":841,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"fn (&self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":864445,"byte_end":864488,"line_start":840,"line_end":840,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":3873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":877888,"byte_end":877903,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":3874}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":877775,"byte_end":877853,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":877854,"byte_end":877877,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":877974,"byte_end":877982,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":3873},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":877934,"byte_end":877966,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":3879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878270,"byte_end":878279,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878224,"byte_end":878259,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":3892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878801,"byte_end":878812,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3893},{"krate":0,"index":3894}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878658,"byte_end":878719,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878720,"byte_end":878790,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":3893},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878851,"byte_end":878857,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":3892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3894},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878900,"byte_end":878910,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"fn (n: Self::Larger) -> Self","parent":{"krate":0,"index":3892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":879382,"byte_end":879386,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3902},{"krate":0,"index":3903}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":879311,"byte_end":879371,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3902},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":879417,"byte_end":879422,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":3901},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3903},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":879443,"byte_end":879447,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"fn (a: Self, b: Self, ratio: Self::Ratio) -> Self","parent":{"krate":0,"index":3901},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880173,"byte_end":880178,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":3914},{"krate":0,"index":3915},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3925},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3928},{"krate":0,"index":3929},{"krate":0,"index":3930},{"krate":0,"index":3932},{"krate":0,"index":3934},{"krate":0,"index":3937},{"krate":0,"index":3940},{"krate":0,"index":3943},{"krate":0,"index":3946},{"krate":0,"index":3948},{"krate":0,"index":3950},{"krate":0,"index":3951}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880048,"byte_end":880072,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880073,"byte_end":880076,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880077,"byte_end":880162,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":3911},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880242,"byte_end":880250,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880199,"byte_end":880232,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":3912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880325,"byte_end":880338,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880268,"byte_end":880314,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3913},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880481,"byte_end":880494,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"fn () -> u8","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880348,"byte_end":880402,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880407,"byte_end":880473,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880590,"byte_end":880598,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"fn (&self) -> &[Self::Subpixel]","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880544,"byte_end":880582,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3915},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880686,"byte_end":880698,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"fn (&mut self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880633,"byte_end":880678,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":3916},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880864,"byte_end":880875,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880741,"byte_end":880805,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880810,"byte_end":880853,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881092,"byte_end":881103,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"fn () -> &'static str","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880895,"byte_end":880967,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880972,"byte_end":881015,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881020,"byte_end":881084,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":3918},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881207,"byte_end":881217,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881161,"byte_end":881196,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881357,"byte_end":881367,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"fn () -> ColorType","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881234,"byte_end":881281,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881286,"byte_end":881349,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3920},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881605,"byte_end":881614,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"fn (&self) -> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881421,"byte_end":881486,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881491,"byte_end":881566,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881571,"byte_end":881574,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881579,"byte_end":881597,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3921},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881917,"byte_end":881930,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"fn (a: Self::Subpixel, b: Self::Subpixel, c: Self::Subpixel, d: Self::Subpixel) -> Self","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881750,"byte_end":881806,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881811,"byte_end":881878,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881883,"byte_end":881886,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":881891,"byte_end":881909,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882284,"byte_end":882294,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"fn (slice: &[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882060,"byte_end":882092,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882097,"byte_end":882100,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882105,"byte_end":882189,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882194,"byte_end":882276,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3923},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882574,"byte_end":882588,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"fn (slice: &mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882336,"byte_end":882382,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882387,"byte_end":882390,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882395,"byte_end":882479,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882484,"byte_end":882566,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3924},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882675,"byte_end":882681,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"fn (&self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882638,"byte_end":882667,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882777,"byte_end":882784,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"fn (&self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882718,"byte_end":882769,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882860,"byte_end":882867,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"fn (&self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882822,"byte_end":882852,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3927},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882965,"byte_end":882978,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"fn (&self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":882905,"byte_end":882957,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3928},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883054,"byte_end":883060,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"fn (&self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883017,"byte_end":883046,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3929},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883156,"byte_end":883163,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"fn (&self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883097,"byte_end":883148,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883270,"byte_end":883273,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883201,"byte_end":883262,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3932},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883434,"byte_end":883439,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883365,"byte_end":883426,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883664,"byte_end":883678,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"fn <F, G> (&self, f: F, g: G) -> Self","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883527,"byte_end":883599,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883604,"byte_end":883656,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3937},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883984,"byte_end":884000,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"fn <F, G> (&mut self, f: F, g: G) -> ()","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883831,"byte_end":883903,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":883908,"byte_end":883976,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884229,"byte_end":884246,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"fn <F> (&self, f: F) -> Self","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884149,"byte_end":884221,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3943},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884538,"byte_end":884557,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"fn <F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884434,"byte_end":884506,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884511,"byte_end":884530,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3946},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884800,"byte_end":884804,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"fn <F> (&self, other: &Self, f: F) -> Self","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884698,"byte_end":884762,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884767,"byte_end":884792,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":885044,"byte_end":885050,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"fn <F> (&mut self, other: &Self, f: F) -> ()","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884926,"byte_end":884990,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":884995,"byte_end":885036,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3950},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":885197,"byte_end":885203,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":885168,"byte_end":885189,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":885314,"byte_end":885319,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"fn (&mut self, other: &Self) -> ()","parent":{"krate":0,"index":3910},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":885221,"byte_end":885306,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":3953},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":885428,"byte_end":885443,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6196},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":889453,"byte_end":889472,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":6197}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":888730,"byte_end":888776,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":888777,"byte_end":888780,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":888781,"byte_end":888878,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":888879,"byte_end":888977,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":888978,"byte_end":889038,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":889039,"byte_end":889042,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":889043,"byte_end":889138,"line_start":103,"line_end":103,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":889139,"byte_end":889237,"line_start":104,"line_end":104,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":889238,"byte_end":889329,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":889330,"byte_end":889373,"line_start":106,"line_end":106,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17386,"byte_end":17402,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18100,"byte_end":18113,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18889,"byte_end":18902,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19679,"byte_end":19693,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20072,"byte_end":20082,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20439,"byte_end":20449,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20565,"byte_end":20580,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20709,"byte_end":20724,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20974,"byte_end":20990,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21293,"byte_end":21303,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21764,"byte_end":21774,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":22227,"byte_end":22243,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23865,"byte_end":23881,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23909,"byte_end":23923,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":24958,"byte_end":24972,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25177,"byte_end":25190,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25651,"byte_end":25664,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25869,"byte_end":25882,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26329,"byte_end":26342,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26547,"byte_end":26557,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26940,"byte_end":26950,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26978,"byte_end":26993,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32088,"byte_end":32096,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76162,"byte_end":76169,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76927,"byte_end":76935,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92155,"byte_end":92167,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111053,"byte_end":111059,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112441,"byte_end":112447,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113233,"byte_end":113239,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":128400,"byte_end":128410,"line_start":306,"line_end":306,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133413,"byte_end":133425,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146020,"byte_end":146023,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146281,"byte_end":146292,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163447,"byte_end":163458,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169310,"byte_end":169314,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174899,"byte_end":174906,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179282,"byte_end":179293,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179902,"byte_end":179913,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":180517,"byte_end":180521,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":181768,"byte_end":181775,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183042,"byte_end":183049,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183944,"byte_end":183954,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184106,"byte_end":184129,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184337,"byte_end":184360,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184934,"byte_end":184939,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185874,"byte_end":185879,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185904,"byte_end":185914,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":194808,"byte_end":194819,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":196742,"byte_end":196754,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198825,"byte_end":198835,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198991,"byte_end":199003,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":199350,"byte_end":199367,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":208024,"byte_end":208032,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":209418,"byte_end":209427,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210692,"byte_end":210707,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212563,"byte_end":212573,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244477,"byte_end":244486,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244906,"byte_end":244916,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":245591,"byte_end":245601,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247360,"byte_end":247370,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":254485,"byte_end":254495,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":259679,"byte_end":259691,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":260331,"byte_end":260341,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":260497,"byte_end":260509,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":260978,"byte_end":260989,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":261713,"byte_end":261719,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":263395,"byte_end":263405,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":264897,"byte_end":264907,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267087,"byte_end":267097,"line_start":49,"line_end":49,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268054,"byte_end":268064,"line_start":85,"line_end":85,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":270090,"byte_end":270100,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":270997,"byte_end":271007,"line_start":168,"line_end":168,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272205,"byte_end":272214,"line_start":210,"line_end":210,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272704,"byte_end":272714,"line_start":233,"line_end":233,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":296655,"byte_end":296665,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":297141,"byte_end":297150,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":297563,"byte_end":297573,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":300527,"byte_end":300543,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1228}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":301155,"byte_end":301171,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1231},{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":305887,"byte_end":305897,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306390,"byte_end":306400,"line_start":309,"line_end":309,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":310554,"byte_end":310564,"line_start":421,"line_end":421,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":313130,"byte_end":313142,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":314792,"byte_end":314802,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":314958,"byte_end":314970,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":315472,"byte_end":315480,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316304,"byte_end":316314,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":317685,"byte_end":317694,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":318110,"byte_end":318120,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":318628,"byte_end":318638,"line_start":211,"line_end":211,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319956,"byte_end":319966,"line_start":265,"line_end":265,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322272,"byte_end":322282,"line_start":330,"line_end":330,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1367},{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327962,"byte_end":327972,"line_start":483,"line_end":483,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":329210,"byte_end":329233,"line_start":522,"line_end":522,"column_start":18,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":329526,"byte_end":329549,"line_start":535,"line_end":535,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":331357,"byte_end":331380,"line_start":586,"line_end":586,"column_start":40,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":338062,"byte_end":338073,"line_start":773,"line_end":773,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1417},{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348236,"byte_end":348246,"line_start":23,"line_end":23,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":350808,"byte_end":350819,"line_start":100,"line_end":100,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":350945,"byte_end":350956,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1475},{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":351657,"byte_end":351677,"line_start":135,"line_end":135,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":351936,"byte_end":351956,"line_start":145,"line_end":145,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1487},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":365677,"byte_end":365689,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":366816,"byte_end":366826,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":366982,"byte_end":366994,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":367235,"byte_end":367254,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1539}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":367494,"byte_end":367513,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":368152,"byte_end":368162,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":370459,"byte_end":370467,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":371780,"byte_end":371789,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":372209,"byte_end":372219,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377572,"byte_end":377582,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":378576,"byte_end":378586,"line_start":66,"line_end":66,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":381379,"byte_end":381390,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":382099,"byte_end":382109,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":382522,"byte_end":382533,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":384279,"byte_end":384288,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":384546,"byte_end":384556,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1678}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":410828,"byte_end":410837,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1752},{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414346,"byte_end":414358,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1759}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414696,"byte_end":414708,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415529,"byte_end":415540,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1788},{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":426939,"byte_end":426950,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1803}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447494,"byte_end":447503,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":448261,"byte_end":448270,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1899},{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":449525,"byte_end":449535,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":454149,"byte_end":454159,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1924}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":456220,"byte_end":456231,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":461779,"byte_end":461790,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1942}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":461928,"byte_end":461941,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1949},{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464550,"byte_end":464560,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":468395,"byte_end":468405,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1967}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":469640,"byte_end":469650,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":470667,"byte_end":470682,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1977}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":470768,"byte_end":470778,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1979}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/autobreak.rs","byte_start":478730,"byte_end":478739,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/autobreak.rs","byte_start":480000,"byte_end":480009,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/autobreak.rs","byte_start":480635,"byte_end":480644,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2018}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":484494,"byte_end":484506,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2067}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":487335,"byte_end":487345,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2069}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":487501,"byte_end":487513,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2071}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":487989,"byte_end":488002,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2073}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":488594,"byte_end":488609,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":489761,"byte_end":489771,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":500465,"byte_end":500474,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":500603,"byte_end":500612,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2132},{"krate":0,"index":2133}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":501025,"byte_end":501035,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":502742,"byte_end":502752,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2149}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":505179,"byte_end":505181,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":505846,"byte_end":505849,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":507121,"byte_end":507127,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":508749,"byte_end":508754,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2176}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":509604,"byte_end":509616,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":509741,"byte_end":509754,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":510070,"byte_end":510082,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2182}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":510392,"byte_end":510407,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528035,"byte_end":528045,"line_start":92,"line_end":92,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":535822,"byte_end":535832,"line_start":295,"line_end":295,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2278}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":536065,"byte_end":536083,"line_start":307,"line_end":307,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2281}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":536953,"byte_end":536968,"line_start":335,"line_end":335,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2285}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":537529,"byte_end":537546,"line_start":356,"line_end":356,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2288}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":541566,"byte_end":541584,"line_start":450,"line_end":450,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2291}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":544149,"byte_end":544162,"line_start":517,"line_end":517,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":544473,"byte_end":544485,"line_start":530,"line_end":530,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2302},{"krate":0,"index":2304}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":545902,"byte_end":545913,"line_start":575,"line_end":575,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2308},{"krate":0,"index":2309},{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":547624,"byte_end":547635,"line_start":629,"line_end":629,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2315}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":547754,"byte_end":547765,"line_start":635,"line_end":635,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2318}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":547866,"byte_end":547879,"line_start":641,"line_end":641,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2321}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553388,"byte_end":553405,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553917,"byte_end":553927,"line_start":177,"line_end":177,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2348},{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":554897,"byte_end":554906,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":559580,"byte_end":559594,"line_start":324,"line_end":324,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560193,"byte_end":560202,"line_start":343,"line_end":343,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560395,"byte_end":560404,"line_start":352,"line_end":352,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2371}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560598,"byte_end":560607,"line_start":361,"line_end":361,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560802,"byte_end":560811,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2375}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":561830,"byte_end":561838,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":562955,"byte_end":562965,"line_start":66,"line_end":66,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2435},{"krate":0,"index":2436},{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2440},{"krate":0,"index":2441}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":573925,"byte_end":573935,"line_start":368,"line_end":368,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":575634,"byte_end":575643,"line_start":424,"line_end":424,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2457}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576288,"byte_end":576300,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2474}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576667,"byte_end":576677,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576833,"byte_end":576845,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576934,"byte_end":576944,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2483},{"krate":0,"index":2484}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":578393,"byte_end":578403,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2489}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/header.rs","byte_start":583775,"byte_end":583784,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2533},{"krate":0,"index":2534},{"krate":0,"index":2535},{"krate":0,"index":2536}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/header.rs","byte_start":585830,"byte_end":585836,"line_start":87,"line_end":87,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":589584,"byte_end":589595,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2578}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":591264,"byte_end":591274,"line_start":75,"line_end":75,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2581},{"krate":0,"index":2582}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":593029,"byte_end":593039,"line_start":115,"line_end":115,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2591}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":593459,"byte_end":593470,"line_start":129,"line_end":129,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595706,"byte_end":595717,"line_start":198,"line_end":198,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2607},{"krate":0,"index":2608}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":597392,"byte_end":597403,"line_start":232,"line_end":232,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2611}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":598467,"byte_end":598479,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":598616,"byte_end":598631,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2648}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599218,"byte_end":599228,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599385,"byte_end":599397,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599623,"byte_end":599634,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2660},{"krate":0,"index":2663},{"krate":0,"index":2666},{"krate":0,"index":2667}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":602507,"byte_end":602517,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2675},{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":602930,"byte_end":602941,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":632529,"byte_end":632541,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2775}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":633560,"byte_end":633570,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2777}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":633727,"byte_end":633739,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":633860,"byte_end":633870,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2792}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":638203,"byte_end":638213,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2818},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2841}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":659552,"byte_end":659560,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2844},{"krate":0,"index":2845}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660177,"byte_end":660185,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2847}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660250,"byte_end":660260,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2849}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660549,"byte_end":660559,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660626,"byte_end":660635,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":661172,"byte_end":661181,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":684693,"byte_end":684707,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":685874,"byte_end":685888,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2931}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":686667,"byte_end":686681,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2934}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689287,"byte_end":689302,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2948}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689550,"byte_end":689565,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2953},{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2956}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689976,"byte_end":689991,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":2960}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":690799,"byte_end":690814,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":691802,"byte_end":691817,"line_start":252,"line_end":252,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2976}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695657,"byte_end":695663,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2988},{"krate":0,"index":2989}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696253,"byte_end":696259,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2992},{"krate":0,"index":2993}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696778,"byte_end":696783,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2995},{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697732,"byte_end":697737,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3003},{"krate":0,"index":3004},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008},{"krate":0,"index":3009}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":703773,"byte_end":703781,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3016}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707242,"byte_end":707248,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3062},{"krate":0,"index":3063}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707492,"byte_end":707498,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3068}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707647,"byte_end":707653,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707862,"byte_end":707868,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707994,"byte_end":708000,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3079}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708415,"byte_end":708424,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3087},{"krate":0,"index":3088}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708680,"byte_end":708689,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3093}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708838,"byte_end":708847,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3097}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709095,"byte_end":709104,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3101}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709670,"byte_end":709674,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3109}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":710573,"byte_end":710577,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3113},{"krate":0,"index":3114}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":710987,"byte_end":710991,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3118}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711140,"byte_end":711144,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3122}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711511,"byte_end":711515,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3125}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711639,"byte_end":711643,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3128}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":712230,"byte_end":712237,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3136}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":713158,"byte_end":713165,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3140},{"krate":0,"index":3141}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":713588,"byte_end":713595,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3145}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":713744,"byte_end":713751,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3149}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":714133,"byte_end":714140,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3152}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":714596,"byte_end":714611,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3163},{"krate":0,"index":3164}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715014,"byte_end":715029,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3169}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715155,"byte_end":715170,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3172}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715346,"byte_end":715361,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3175}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715900,"byte_end":715913,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3185},{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":716451,"byte_end":716464,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3191}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":716588,"byte_end":716601,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3194}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":716771,"byte_end":716784,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3197}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717312,"byte_end":717330,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3208},{"krate":0,"index":3209}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717741,"byte_end":717759,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3214}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717890,"byte_end":717908,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3217}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":718456,"byte_end":718472,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3227},{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719019,"byte_end":719035,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3233}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719164,"byte_end":719180,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3236}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722202,"byte_end":722213,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3240},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3247},{"krate":0,"index":3248},{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3251},{"krate":0,"index":3252},{"krate":0,"index":3254},{"krate":0,"index":3257},{"krate":0,"index":3258},{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729002,"byte_end":729013,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3271},{"krate":0,"index":3272}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731611,"byte_end":731622,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3276}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732274,"byte_end":732285,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3281}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733028,"byte_end":733039,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3286},{"krate":0,"index":3287}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733303,"byte_end":733314,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3291}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733580,"byte_end":733591,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3295},{"krate":0,"index":3296}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733862,"byte_end":733873,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3300}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":734134,"byte_end":734145,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3304}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":734504,"byte_end":734515,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3308},{"krate":0,"index":3309},{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3313},{"krate":0,"index":3314}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":735339,"byte_end":735350,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3324}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":738935,"byte_end":738946,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3329},{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3333},{"krate":0,"index":3334}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741380,"byte_end":741389,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3339}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":742787,"byte_end":742798,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":3347}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752843,"byte_end":752852,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3370},{"krate":0,"index":3371},{"krate":0,"index":3373},{"krate":0,"index":3375},{"krate":0,"index":3376}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756561,"byte_end":756578,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3378}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":757866,"byte_end":757883,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3380}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763979,"byte_end":763980,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3387}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":764418,"byte_end":764419,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3394}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":765675,"byte_end":765679,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3405}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":765908,"byte_end":765912,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3408}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766140,"byte_end":766144,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3411}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766369,"byte_end":766373,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3414}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766600,"byte_end":766604,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3417}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766752,"byte_end":766756,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3419}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767000,"byte_end":767004,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3421}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767248,"byte_end":767252,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3423}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767438,"byte_end":767442,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3425}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767628,"byte_end":767632,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3427}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767869,"byte_end":767874,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3430}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768136,"byte_end":768141,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3433}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768402,"byte_end":768407,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3436}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768672,"byte_end":768677,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3439}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768943,"byte_end":768948,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3442}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":769161,"byte_end":769166,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3444}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":769466,"byte_end":769471,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3446}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":769814,"byte_end":769818,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3449}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":770119,"byte_end":770123,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3452}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":770425,"byte_end":770429,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3455}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":770730,"byte_end":770734,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3458}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":771035,"byte_end":771039,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3461}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":771316,"byte_end":771320,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3463}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":771682,"byte_end":771686,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3465}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772083,"byte_end":772087,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3468}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772388,"byte_end":772392,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3471}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772694,"byte_end":772698,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3474}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772999,"byte_end":773003,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3477}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":773304,"byte_end":773308,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3480}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":773632,"byte_end":773635,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3483}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":773904,"byte_end":773907,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3486}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774175,"byte_end":774178,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3489}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774443,"byte_end":774446,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3492}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774710,"byte_end":774713,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3495}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774951,"byte_end":774954,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775179,"byte_end":775182,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3499}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775455,"byte_end":775458,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3502}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775726,"byte_end":775729,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3505}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775994,"byte_end":775997,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3508}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":776267,"byte_end":776270,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3511}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":776534,"byte_end":776537,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3514}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":778203,"byte_end":778208,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3520}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":779213,"byte_end":779217,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3523}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":779327,"byte_end":779331,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3526}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":781539,"byte_end":781543,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3529}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":783749,"byte_end":783752,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3532}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":783861,"byte_end":783864,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3535}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784083,"byte_end":784088,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3540}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784261,"byte_end":784265,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3543}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784453,"byte_end":784457,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3546}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784670,"byte_end":784674,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3549}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784887,"byte_end":784890,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3552}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":785152,"byte_end":785155,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3555}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":796691,"byte_end":796703,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609},{"krate":0,"index":3610},{"krate":0,"index":3611},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3616},{"krate":0,"index":3617},{"krate":0,"index":3620},{"krate":0,"index":3621},{"krate":0,"index":3622},{"krate":0,"index":3623},{"krate":0,"index":3624},{"krate":0,"index":3625},{"krate":0,"index":3626},{"krate":0,"index":3627},{"krate":0,"index":3628},{"krate":0,"index":3629},{"krate":0,"index":3630},{"krate":0,"index":3631},{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636},{"krate":0,"index":3637},{"krate":0,"index":3638},{"krate":0,"index":3639},{"krate":0,"index":3640},{"krate":0,"index":3641},{"krate":0,"index":3642},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3645},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3648},{"krate":0,"index":3649},{"krate":0,"index":3650},{"krate":0,"index":3651},{"krate":0,"index":3652},{"krate":0,"index":3653},{"krate":0,"index":3654},{"krate":0,"index":3655},{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":3658},{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3664},{"krate":0,"index":3665},{"krate":0,"index":3666},{"krate":0,"index":3667},{"krate":0,"index":3668},{"krate":0,"index":3669},{"krate":0,"index":3670},{"krate":0,"index":3671},{"krate":0,"index":3672},{"krate":0,"index":3673},{"krate":0,"index":3674},{"krate":0,"index":3675},{"krate":0,"index":3676},{"krate":0,"index":3679},{"krate":0,"index":3681}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":821343,"byte_end":821355,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688},{"krate":0,"index":3689}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":821888,"byte_end":821900,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3691},{"krate":0,"index":3692},{"krate":0,"index":3693},{"krate":0,"index":3694},{"krate":0,"index":3695}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836221,"byte_end":836232,"line_start":67,"line_end":67,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3737},{"krate":0,"index":3739}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":839176,"byte_end":839193,"line_start":149,"line_end":149,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3741}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":840493,"byte_end":840508,"line_start":186,"line_end":186,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3749},{"krate":0,"index":3750}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848378,"byte_end":848386,"line_start":370,"line_end":370,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3765},{"krate":0,"index":3766},{"krate":0,"index":3767}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855034,"byte_end":855040,"line_start":560,"line_end":560,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3795},{"krate":0,"index":3796}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855508,"byte_end":855514,"line_start":582,"line_end":582,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3799}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863903,"byte_end":863911,"line_start":820,"line_end":820,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3838},{"krate":0,"index":3839},{"krate":0,"index":3840}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":865048,"byte_end":865056,"line_start":861,"line_end":861,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3843},{"krate":0,"index":3844},{"krate":0,"index":3845},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3848},{"krate":0,"index":3849}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":865877,"byte_end":865885,"line_start":893,"line_end":893,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3856},{"krate":0,"index":3857}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8223,"byte_end":8228,"line_start":181,"line_end":181,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8621,"byte_end":8625,"line_start":200,"line_end":200,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27927,"byte_end":27929,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27939,"byte_end":27944,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":170}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8666,"byte_end":8674,"line_start":203,"line_end":203,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":175}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45864,"byte_end":45872,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":265}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8700,"byte_end":8702,"line_start":206,"line_end":206,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8748,"byte_end":8752,"line_start":209,"line_end":209,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":551}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8803,"byte_end":8806,"line_start":213,"line_end":213,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":730}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8840,"byte_end":8843,"line_start":215,"line_end":215,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":985}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8877,"byte_end":8880,"line_start":217,"line_end":217,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1038}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8914,"byte_end":8917,"line_start":219,"line_end":219,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1160}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8951,"byte_end":8954,"line_start":221,"line_end":221,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1264}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8988,"byte_end":8991,"line_start":223,"line_end":223,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1496}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9026,"byte_end":9030,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1624}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9064,"byte_end":9067,"line_start":227,"line_end":227,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1845}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9101,"byte_end":9104,"line_start":229,"line_end":229,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1980}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9138,"byte_end":9141,"line_start":231,"line_end":231,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2376}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9176,"byte_end":9180,"line_start":233,"line_end":233,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2541}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9215,"byte_end":9219,"line_start":235,"line_end":235,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2612}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/mod.rs","byte_start":597726,"byte_end":597729,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2691}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9258,"byte_end":9266,"line_start":237,"line_end":237,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":2884}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17386,"byte_end":17402,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3991},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18100,"byte_end":18113,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":4054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18889,"byte_end":18902,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":4020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19679,"byte_end":19693,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":4025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20072,"byte_end":20082,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":4059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20439,"byte_end":20449,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20565,"byte_end":20580,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4085},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20709,"byte_end":20724,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4085},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20974,"byte_end":20990,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3991},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21293,"byte_end":21303,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21764,"byte_end":21774,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3970},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":22227,"byte_end":22243,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3991},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23865,"byte_end":23881,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3991},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23909,"byte_end":23923,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4025},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":24958,"byte_end":24972,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4025},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25177,"byte_end":25190,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4020},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25651,"byte_end":25664,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":4020},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25869,"byte_end":25882,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26329,"byte_end":26342,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4054},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26547,"byte_end":26557,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4059},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26940,"byte_end":26950,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":4059},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26978,"byte_end":26993,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":4085},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32088,"byte_end":32096,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76162,"byte_end":76169,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":4142},"to":{"krate":0,"index":304}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76927,"byte_end":76935,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":304}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92155,"byte_end":92167,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111053,"byte_end":111059,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112441,"byte_end":112447,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113233,"byte_end":113239,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":128400,"byte_end":128410,"line_start":306,"line_end":306,"column_start":26,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133413,"byte_end":133425,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":4177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146020,"byte_end":146023,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4199},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146281,"byte_end":146292,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":4166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163447,"byte_end":163458,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169310,"byte_end":169314,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174899,"byte_end":174906,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":4240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179282,"byte_end":179293,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":4166},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179902,"byte_end":179913,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":4166},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":180517,"byte_end":180521,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":4227},"to":{"krate":0,"index":3800}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":181768,"byte_end":181775,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":4240},"to":{"krate":0,"index":3800}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183042,"byte_end":183049,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":4240},"to":{"krate":0,"index":3813}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183944,"byte_end":183954,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184106,"byte_end":184129,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4302},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184337,"byte_end":184360,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":4302},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184934,"byte_end":184939,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4253},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185874,"byte_end":185879,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4253},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185904,"byte_end":185914,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":4277},"to":{"krate":2,"index":1656}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":194808,"byte_end":194819,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":801},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":196742,"byte_end":196754,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":4360},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198825,"byte_end":198835,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198991,"byte_end":199003,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":4360},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":199350,"byte_end":199367,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":4437},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":208024,"byte_end":208032,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":209418,"byte_end":209427,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":4478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210692,"byte_end":210707,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212563,"byte_end":212573,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":841},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244477,"byte_end":244486,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":919},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244906,"byte_end":244916,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":841},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":245591,"byte_end":245601,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":841},"to":{"krate":0,"index":3781}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247360,"byte_end":247370,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":254485,"byte_end":254495,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":960},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":259679,"byte_end":259691,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4490},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":260331,"byte_end":260341,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":260497,"byte_end":260509,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":4490},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":260978,"byte_end":260989,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":261713,"byte_end":261719,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":263395,"byte_end":263405,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dds.rs","byte_start":264897,"byte_end":264907,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1022},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":267087,"byte_end":267097,"line_start":49,"line_end":49,"column_start":6,"column_end":16},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":268054,"byte_end":268064,"line_start":85,"line_end":85,"column_start":15,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1063},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":270090,"byte_end":270100,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1063},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":270997,"byte_end":271007,"line_start":168,"line_end":168,"column_start":55,"column_end":65},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1063},"to":{"krate":0,"index":3781}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272205,"byte_end":272214,"line_start":210,"line_end":210,"column_start":24,"column_end":33},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1091},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dxt.rs","byte_start":272704,"byte_end":272714,"line_start":233,"line_end":233,"column_start":16,"column_end":26},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":296655,"byte_end":296665,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":297141,"byte_end":297150,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1201},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":297563,"byte_end":297573,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1195},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":300527,"byte_end":300543,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":301155,"byte_end":301171,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1220},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":305887,"byte_end":305897,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1195},"to":{"krate":0,"index":3787}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":306390,"byte_end":306400,"line_start":309,"line_end":309,"column_start":16,"column_end":26},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/gif.rs","byte_start":310554,"byte_end":310564,"line_start":421,"line_end":421,"column_start":6,"column_end":16},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":313130,"byte_end":313142,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4566},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":314792,"byte_end":314802,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":314958,"byte_end":314970,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4566},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":315472,"byte_end":315480,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4610},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":316304,"byte_end":316314,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":4639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":317685,"byte_end":317694,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1319},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":318110,"byte_end":318120,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":4639},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":318628,"byte_end":318638,"line_start":211,"line_end":211,"column_start":58,"column_end":68},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":4639},"to":{"krate":0,"index":3781}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":319956,"byte_end":319966,"line_start":265,"line_end":265,"column_start":6,"column_end":16},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":4655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":322272,"byte_end":322282,"line_start":330,"line_end":330,"column_start":18,"column_end":28},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":4646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":327962,"byte_end":327972,"line_start":483,"line_end":483,"column_start":35,"column_end":45},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4646},"to":{"krate":2,"index":4680}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":329210,"byte_end":329233,"line_start":522,"line_end":522,"column_start":18,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":329526,"byte_end":329549,"line_start":535,"line_end":535,"column_start":31,"column_end":54},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1376},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":331357,"byte_end":331380,"line_start":586,"line_end":586,"column_start":40,"column_end":63},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1376},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/decoder.rs","byte_start":338062,"byte_end":338073,"line_start":773,"line_end":773,"column_start":6,"column_end":17},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4675},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":348236,"byte_end":348246,"line_start":23,"line_end":23,"column_start":16,"column_end":26},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":350808,"byte_end":350819,"line_start":100,"line_end":100,"column_start":10,"column_end":21},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":350945,"byte_end":350956,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1466},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":351657,"byte_end":351677,"line_start":135,"line_end":135,"column_start":10,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/hdr/encoder.rs","byte_start":351936,"byte_end":351956,"line_start":145,"line_end":145,"column_start":23,"column_end":43},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1478},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":365677,"byte_end":365689,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4705},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":366816,"byte_end":366826,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":366982,"byte_end":366994,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4705},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":367235,"byte_end":367254,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":4753},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":367494,"byte_end":367513,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":4753},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":368152,"byte_end":368162,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":370459,"byte_end":370467,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":4776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":371780,"byte_end":371789,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/decoder.rs","byte_start":372209,"byte_end":372219,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1542},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":377572,"byte_end":377582,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/ico/encoder.rs","byte_start":378576,"byte_end":378586,"line_start":66,"line_end":66,"column_start":33,"column_end":43},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1606},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":381379,"byte_end":381390,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1649},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":382099,"byte_end":382109,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1656},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":382522,"byte_end":382533,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1649},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":384279,"byte_end":384288,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":5425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":384546,"byte_end":384556,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":410828,"byte_end":410837,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414346,"byte_end":414358,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":4825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":414696,"byte_end":414708,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":4825},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":415529,"byte_end":415540,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":426939,"byte_end":426950,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1762},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":447494,"byte_end":447503,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":448261,"byte_end":448270,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1887},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":449525,"byte_end":449535,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1901},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":454149,"byte_end":454159,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1901},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":456220,"byte_end":456231,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":461779,"byte_end":461790,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1925},"to":{"krate":0,"index":3787}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":461928,"byte_end":461941,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1943},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":464550,"byte_end":464560,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":468395,"byte_end":468405,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1951},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":469640,"byte_end":469650,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":470667,"byte_end":470682,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":4840},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":470768,"byte_end":470778,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":4866},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/autobreak.rs","byte_start":478730,"byte_end":478739,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2001},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/autobreak.rs","byte_start":480000,"byte_end":480009,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2001},"to":{"krate":1,"index":2915}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/autobreak.rs","byte_start":480635,"byte_end":480644,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2001},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":484494,"byte_end":484506,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":4892},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":487335,"byte_end":487345,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":487501,"byte_end":487513,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4892},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":487989,"byte_end":488002,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4949},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":488594,"byte_end":488609,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":4976},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":489761,"byte_end":489771,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":492936,"byte_end":492943,"line_start":317,"line_end":317,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2937},"to":{"krate":0,"index":2103}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":500465,"byte_end":500474,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"kind":{"Impl":{"id":144}},"from":{"krate":1,"index":2312},"to":{"krate":0,"index":2103}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":500603,"byte_end":500612,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2125},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":501025,"byte_end":501035,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2090},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":502742,"byte_end":502752,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":505179,"byte_end":505181,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2080},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":505846,"byte_end":505849,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2082},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":507121,"byte_end":507127,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2084},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":508749,"byte_end":508754,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2086},"to":{"krate":0,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":509604,"byte_end":509616,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5076},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":509741,"byte_end":509754,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5085},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":510070,"byte_end":510082,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5095},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/decoder.rs","byte_start":510392,"byte_end":510407,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5105},"to":{"krate":0,"index":2088}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":528035,"byte_end":528045,"line_start":92,"line_end":92,"column_start":16,"column_end":26},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":535822,"byte_end":535832,"line_start":295,"line_end":295,"column_start":33,"column_end":43},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2226},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":536065,"byte_end":536083,"line_start":307,"line_end":307,"column_start":10,"column_end":28},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":536953,"byte_end":536968,"line_start":335,"line_end":335,"column_start":10,"column_end":25},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":537529,"byte_end":537546,"line_start":356,"line_end":356,"column_start":10,"column_end":27},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":541566,"byte_end":541584,"line_start":450,"line_end":450,"column_start":10,"column_end":28},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":544149,"byte_end":544162,"line_start":517,"line_end":517,"column_start":10,"column_end":23},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":544473,"byte_end":544485,"line_start":530,"line_end":530,"column_start":10,"column_end":22},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":545902,"byte_end":545913,"line_start":575,"line_end":575,"column_start":10,"column_end":21},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":547624,"byte_end":547635,"line_start":629,"line_end":629,"column_start":29,"column_end":40},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5023},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":547754,"byte_end":547765,"line_start":635,"line_end":635,"column_start":30,"column_end":41},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5023},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/encoder.rs","byte_start":547866,"byte_end":547879,"line_start":641,"line_end":641,"column_start":10,"column_end":23},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553388,"byte_end":553405,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":553917,"byte_end":553927,"line_start":177,"line_end":177,"column_start":6,"column_end":16},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5052},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":554897,"byte_end":554906,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":559580,"byte_end":559594,"line_start":324,"line_end":324,"column_start":43,"column_end":57},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2361},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560193,"byte_end":560202,"line_start":343,"line_end":343,"column_start":29,"column_end":38},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560395,"byte_end":560404,"line_start":352,"line_end":352,"column_start":30,"column_end":39},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560598,"byte_end":560607,"line_start":361,"line_end":361,"column_start":29,"column_end":38},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/pnm/header.rs","byte_start":560802,"byte_end":560811,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":561830,"byte_end":561838,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":562955,"byte_end":562965,"line_start":66,"line_end":66,"column_start":22,"column_end":32},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":573925,"byte_end":573935,"line_start":368,"line_end":368,"column_start":52,"column_end":62},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2412},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/decoder.rs","byte_start":575634,"byte_end":575643,"line_start":424,"line_end":424,"column_start":31,"column_end":40},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2451},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576288,"byte_end":576300,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":5135},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576667,"byte_end":576677,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576833,"byte_end":576845,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5135},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":576934,"byte_end":576944,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2478},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/encoder.rs","byte_start":578393,"byte_end":578403,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2478},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/header.rs","byte_start":583775,"byte_end":583784,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tga/header.rs","byte_start":585830,"byte_end":585836,"line_start":87,"line_end":87,"column_start":6,"column_end":12},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":589584,"byte_end":589595,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":591264,"byte_end":591274,"line_start":75,"line_end":75,"column_start":6,"column_end":16},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":593029,"byte_end":593039,"line_start":115,"line_end":115,"column_start":18,"column_end":28},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2583},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":593459,"byte_end":593470,"line_start":129,"line_end":129,"column_start":52,"column_end":63},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2571},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":595706,"byte_end":595717,"line_start":198,"line_end":198,"column_start":23,"column_end":34},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/tiff.rs","byte_start":597392,"byte_end":597403,"line_start":232,"line_end":232,"column_start":40,"column_end":51},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2600},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":598467,"byte_end":598479,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5182},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":598616,"byte_end":598631,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2643},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599218,"byte_end":599228,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599385,"byte_end":599397,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":5182},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":599623,"byte_end":599634,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":602507,"byte_end":602517,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2668},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/decoder.rs","byte_start":602930,"byte_end":602941,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2652},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":632529,"byte_end":632541,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":5295},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":633560,"byte_end":633570,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3970},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":633727,"byte_end":633739,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":5295},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":633860,"byte_end":633870,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":638203,"byte_end":638213,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2793},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":659552,"byte_end":659560,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":5198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660177,"byte_end":660185,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":5198},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660250,"byte_end":660260,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":5225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660549,"byte_end":660559,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":5225},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":660626,"byte_end":660635,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":5249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/webp/vp8.rs","byte_start":661172,"byte_end":661181,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":5249},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":684693,"byte_end":684707,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2913},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":685874,"byte_end":685888,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2913},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":686667,"byte_end":686681,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2913},"to":{"krate":1,"index":2931}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689287,"byte_end":689302,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689550,"byte_end":689565,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2943},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":689976,"byte_end":689991,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2943},"to":{"krate":0,"index":3781}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":690799,"byte_end":690814,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/farbfeld.rs","byte_start":691802,"byte_end":691817,"line_start":252,"line_end":252,"column_start":33,"column_end":48},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2965},"to":{"krate":0,"index":3790}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":695657,"byte_end":695663,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696253,"byte_end":696259,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2983},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":696778,"byte_end":696783,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":697732,"byte_end":697737,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":5374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":703773,"byte_end":703781,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":{"Impl":{"id":223}},"from":{"krate":2,"index":31693},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707242,"byte_end":707248,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707492,"byte_end":707498,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707647,"byte_end":707653,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707862,"byte_end":707868,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":707994,"byte_end":708000,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":3055},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708415,"byte_end":708424,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708680,"byte_end":708689,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":708838,"byte_end":708847,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709095,"byte_end":709104,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":3080},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":709670,"byte_end":709674,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":3102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":710573,"byte_end":710577,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":710987,"byte_end":710991,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711140,"byte_end":711144,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711511,"byte_end":711515,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":711639,"byte_end":711643,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":3102},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":712230,"byte_end":712237,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":3129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":713158,"byte_end":713165,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":713588,"byte_end":713595,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":713744,"byte_end":713751,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":714133,"byte_end":714140,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":3129},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":714596,"byte_end":714611,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715014,"byte_end":715029,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715155,"byte_end":715170,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715346,"byte_end":715361,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":3153},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":715900,"byte_end":715913,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":716451,"byte_end":716464,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":716588,"byte_end":716601,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":716771,"byte_end":716784,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":3176},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717312,"byte_end":717330,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717741,"byte_end":717759,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":717890,"byte_end":717908,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":718456,"byte_end":718472,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719019,"byte_end":719035,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":719164,"byte_end":719180,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":722202,"byte_end":722213,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":5394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":729002,"byte_end":729013,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":5394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":731611,"byte_end":731622,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":5394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":732274,"byte_end":732285,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":5394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733028,"byte_end":733039,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":5394},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733303,"byte_end":733314,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":5394},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733580,"byte_end":733591,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":5394},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":733862,"byte_end":733873,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":5394},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":734134,"byte_end":734145,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":5394},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":734504,"byte_end":734515,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":5394},"to":{"krate":0,"index":3800}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":735339,"byte_end":735350,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":5394},"to":{"krate":0,"index":3813}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":738935,"byte_end":738946,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":5394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":741380,"byte_end":741389,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":3350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":742787,"byte_end":742798,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":5394},"to":{"krate":0,"index":3335}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":752843,"byte_end":752852,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":5425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":756561,"byte_end":756578,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":5464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":757866,"byte_end":757883,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":5464},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":763979,"byte_end":763980,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":3386},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":764418,"byte_end":764419,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":3393},"to":{"krate":0,"index":3388}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":765675,"byte_end":765679,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":765908,"byte_end":765912,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766140,"byte_end":766144,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766369,"byte_end":766373,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766600,"byte_end":766604,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":766752,"byte_end":766756,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767000,"byte_end":767004,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767248,"byte_end":767252,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767438,"byte_end":767442,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767628,"byte_end":767632,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":767869,"byte_end":767874,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768136,"byte_end":768141,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768402,"byte_end":768407,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768672,"byte_end":768677,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":768943,"byte_end":768948,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":769161,"byte_end":769166,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":769466,"byte_end":769471,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":769814,"byte_end":769818,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":770119,"byte_end":770123,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":770425,"byte_end":770429,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":770730,"byte_end":770734,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":771035,"byte_end":771039,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":771316,"byte_end":771320,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":771682,"byte_end":771686,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772083,"byte_end":772087,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":5946},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772388,"byte_end":772392,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":5946},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772694,"byte_end":772698,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":5946},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":772999,"byte_end":773003,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":5946},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":773304,"byte_end":773308,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":5946},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":773632,"byte_end":773635,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":773904,"byte_end":773907,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774175,"byte_end":774178,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774443,"byte_end":774446,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774710,"byte_end":774713,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":774951,"byte_end":774954,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775179,"byte_end":775182,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775455,"byte_end":775458,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":5859},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775726,"byte_end":775729,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":5859},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":775994,"byte_end":775997,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":5859},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":776267,"byte_end":776270,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":5859},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":776534,"byte_end":776537,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":5859},"to":{"krate":0,"index":3382}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":778203,"byte_end":778208,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3516}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":779213,"byte_end":779217,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3516}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":779327,"byte_end":779331,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3516}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":781539,"byte_end":781543,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":5946},"to":{"krate":0,"index":3516}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":783749,"byte_end":783752,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3516}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":783861,"byte_end":783864,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":5859},"to":{"krate":0,"index":3516}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784083,"byte_end":784088,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":5975},"to":{"krate":0,"index":3536}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784261,"byte_end":784265,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":5888},"to":{"krate":0,"index":3536}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784453,"byte_end":784457,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":5917},"to":{"krate":0,"index":3536}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784670,"byte_end":784674,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":5946},"to":{"krate":0,"index":3536}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":784887,"byte_end":784890,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":5830},"to":{"krate":0,"index":3536}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":785152,"byte_end":785155,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":5859},"to":{"krate":0,"index":3536}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":796691,"byte_end":796703,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":6055},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":821343,"byte_end":821355,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":6055},"to":{"krate":0,"index":3800}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":821888,"byte_end":821900,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":6055},"to":{"krate":0,"index":3813}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":836221,"byte_end":836232,"line_start":67,"line_end":67,"column_start":6,"column_end":17},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":6088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":839176,"byte_end":839193,"line_start":149,"line_end":149,"column_start":28,"column_end":45},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":6133},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":840493,"byte_end":840508,"line_start":186,"line_end":186,"column_start":6,"column_end":21},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":3742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848378,"byte_end":848386,"line_start":370,"line_end":370,"column_start":6,"column_end":14},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":6169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":848892,"byte_end":848897,"line_start":390,"line_end":390,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3768}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":852593,"byte_end":852605,"line_start":487,"line_end":487,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":3768},"to":{"krate":0,"index":3781}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":852612,"byte_end":852617,"line_start":487,"line_end":487,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3781}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855034,"byte_end":855040,"line_start":560,"line_end":560,"column_start":44,"column_end":50},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":6184},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":855508,"byte_end":855514,"line_start":582,"line_end":582,"column_start":27,"column_end":33},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":6184},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":858087,"byte_end":858103,"line_start":669,"line_end":669,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3800},"to":{"krate":0,"index":3813}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":863903,"byte_end":863911,"line_start":820,"line_end":820,"column_start":9,"column_end":17},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":3825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":865048,"byte_end":865056,"line_start":861,"line_end":861,"column_start":30,"column_end":38},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":3825},"to":{"krate":0,"index":3800}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":865877,"byte_end":865885,"line_start":893,"line_end":893,"column_start":26,"column_end":34},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":3825},"to":{"krate":0,"index":3813}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":877912,"byte_end":877927,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":3953},"to":{"krate":0,"index":3873}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878281,"byte_end":878285,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878288,"byte_end":878295,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":176},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878298,"byte_end":878301,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":20,"index":589},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878304,"byte_end":878314,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878323,"byte_end":878328,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878331,"byte_end":878338,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":20,"index":92},"to":{"krate":0,"index":3879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878814,"byte_end":878819,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3892}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878822,"byte_end":878829,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":20,"index":92},"to":{"krate":0,"index":3892}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":878832,"byte_end":878839,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":20,"index":176},"to":{"krate":0,"index":3892}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":879388,"byte_end":879395,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":20,"index":92},"to":{"krate":0,"index":3901}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":879398,"byte_end":879405,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":20,"index":176},"to":{"krate":0,"index":3901}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880180,"byte_end":880184,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":3910}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":880187,"byte_end":880192,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":3910}}]}