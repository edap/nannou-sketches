{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_commons","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=afd8dde931d8d31d","-C","extra-filename=-afd8dde931d8d31d","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","nix=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libnix-e9d2d440ce80842b.rmeta","--extern","wayland_sys=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libwayland_sys-264f7e07dddf5afb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libwayland_commons-afd8dde931d8d31d.rmeta"},"prelude":{"crate_id":{"name":"wayland_commons","disambiguator":[7793301036586629500,1033779467939928083]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":15,"id":{"name":"nix","disambiguator":[15620197577567632531,14544443222869993471]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":16,"id":{"name":"bitflags","disambiguator":[381175081479133518,10994153786536176848]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":18,"id":{"name":"void","disambiguator":[15288213692648777334,766411746124632892]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[7997064065336242500,8511025302220419458]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":20,"id":{"name":"wayland_sys","disambiguator":[10467944146308249229,7230107118439387192]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":21,"id":{"name":"dlib","disambiguator":[3572392270384705459,10284649347613603682]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":22,"id":{"name":"libloading","disambiguator":[11641301825938901659,14827736444180748540]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","num":23,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":0,"byte_end":4983,"line_start":1,"line_end":140,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":0,"byte_end":4983,"line_start":1,"line_end":140,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":46},{"krate":0,"index":71},{"krate":0,"index":135},{"krate":0,"index":226},{"krate":0,"index":278},{"krate":0,"index":292},{"krate":0,"index":298},{"krate":0,"index":299}],"decl_id":null,"docs":" Common definitions for wayland","sig":null,"attributes":[{"value":"! Common definitions for wayland","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate hosts common type and traits used to represent wayland messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":39,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"! and routines in the `wayland-client` and `wayland-server` crates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":118,"byte_end":187,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":188,"byte_end":191,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This notably includes the `Interface` trait, which can exhaustively describe","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":192,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"! any wayland interface. Its implementations are intended to be generated by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":273,"byte_end":355,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"! `wayland-scanner` crate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":356,"byte_end":384,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":385,"byte_end":388,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! The principal user-facing definition provided by this crate is the `Implementation`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":389,"byte_end":476,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"! trait, which as a user of `wayland-client` or `wayland-server` you will be using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":477,"byte_end":561,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"! to define objects able to handle the messages your program receives. Note that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":562,"byte_end":644,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"! this trait is auto-implemented for closures with appropriate signature, for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":645,"byte_end":724,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! convenience.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":725,"byte_end":741,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"warn(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":743,"byte_end":765,"line_start":16,"line_end":16,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":313},{"krate":0,"index":322},{"krate":0,"index":17},{"krate":0,"index":26},{"krate":0,"index":325},{"krate":0,"index":329},{"krate":0,"index":29},{"krate":0,"index":42},{"krate":0,"index":44}],"decl_id":null,"docs":" Wayland objects map\n","sig":null,"attributes":[{"value":"! Wayland objects map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":4985,"byte_end":5008,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":12},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5148,"byte_end":5163,"line_start":6,"line_end":6,"column_start":11,"column_end":26},"name":"SERVER_ID_LIMIT","qualname":"::map::SERVER_ID_LIMIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Limit separating server-created from client-created objects IDs in the namespace\n","sig":null,"attributes":[{"value":"/ Limit separating server-created from client-created objects IDs in the namespace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5053,"byte_end":5137,"line_start":5,"line_end":5,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5287,"byte_end":5301,"line_start":10,"line_end":10,"column_start":11,"column_end":25},"name":"ObjectMetadata","qualname":"::map::ObjectMetadata","value":"ObjectMetadata: Clone","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" A trait representing the metadata a wayland implementation\n may attach to an object.\n","sig":null,"attributes":[{"value":"/ A trait representing the metadata a wayland implementation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5185,"byte_end":5247,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ may attach to an object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5248,"byte_end":5276,"line_start":9,"line_end":9,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5442,"byte_end":5447,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"child","qualname":"::map::ObjectMetadata::child","value":"fn (&self) -> Self","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Create the metadata for a child object","sig":null,"attributes":[{"value":"/ Create the metadata for a child object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5315,"byte_end":5357,"line_start":11,"line_end":11,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5362,"byte_end":5365,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ Mostly needed for client side, to propagate the event queues","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5370,"byte_end":5434,"line_start":13,"line_end":13,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5594,"byte_end":5600,"line_start":23,"line_end":23,"column_start":12,"column_end":18},"name":"Object","qualname":"::map::Object","value":"Object { interface, version, requests, events, meta, childs_from_events, childs_from_requests }","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"decl_id":null,"docs":" The representation of a protocol object\n","sig":null,"attributes":[{"value":"/ The representation of a protocol object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5522,"byte_end":5565,"line_start":21,"line_end":21,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5671,"byte_end":5680,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"name":"interface","qualname":"::map::Object::interface","value":"&'static str","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Interface name of this object\n","sig":null,"attributes":[{"value":"/ Interface name of this object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5629,"byte_end":5662,"line_start":24,"line_end":24,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5735,"byte_end":5742,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"name":"version","qualname":"::map::Object::version","value":"u32","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Version of this object\n","sig":null,"attributes":[{"value":"/ Version of this object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5700,"byte_end":5726,"line_start":26,"line_end":26,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5808,"byte_end":5816,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"name":"requests","qualname":"::map::Object::requests","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Description of the requests of this object\n","sig":null,"attributes":[{"value":"/ Description of the requests of this object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5753,"byte_end":5799,"line_start":28,"line_end":28,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5907,"byte_end":5913,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"name":"events","qualname":"::map::Object::events","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Description of the events of this object\n","sig":null,"attributes":[{"value":"/ Description of the events of this object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5854,"byte_end":5898,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6032,"byte_end":6036,"line_start":33,"line_end":33,"column_start":9,"column_end":13},"name":"meta","qualname":"::map::Object::meta","value":"Meta","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Metadata associated to this object (ex: its event queue client side)\n","sig":null,"attributes":[{"value":"/ Metadata associated to this object (ex: its event queue client side)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5951,"byte_end":6023,"line_start":32,"line_end":32,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":320},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6184,"byte_end":6202,"line_start":36,"line_end":36,"column_start":9,"column_end":27},"name":"childs_from_events","qualname":"::map::Object::childs_from_events","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this event if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6048,"byte_end":6126,"line_start":34,"line_end":34,"column_start":5,"column_end":83}},{"value":"/ object associated with this event if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6131,"byte_end":6175,"line_start":35,"line_end":35,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":321},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6391,"byte_end":6411,"line_start":39,"line_end":39,"column_start":9,"column_end":29},"name":"childs_from_requests","qualname":"::map::Object::childs_from_requests","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this request if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6253,"byte_end":6331,"line_start":37,"line_end":37,"column_start":5,"column_end":83}},{"value":"/ object associated with this request if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6336,"byte_end":6382,"line_start":38,"line_end":38,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6584,"byte_end":6598,"line_start":44,"line_end":44,"column_start":12,"column_end":26},"name":"from_interface","qualname":"<Object<Meta>>::from_interface","value":"fn <I> (version: u32, meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create an Object corresponding to given interface and version\n","sig":null,"attributes":[{"value":"/ Create an Object corresponding to given interface and version","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6507,"byte_end":6572,"line_start":43,"line_end":43,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7105,"byte_end":7116,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"event_child","qualname":"<Object<Meta>>::event_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given event opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6980,"byte_end":7061,"line_start":56,"line_end":56,"column_start":5,"column_end":86}},{"value":"/ with given event opcode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7066,"byte_end":7093,"line_start":57,"line_end":57,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7369,"byte_end":7382,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"request_child","qualname":"<Object<Meta>>::request_child","value":"fn (&self, opcode: u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given request opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7242,"byte_end":7323,"line_start":62,"line_end":62,"column_start":5,"column_end":86}},{"value":"/ with given request opcode","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7328,"byte_end":7357,"line_start":63,"line_end":63,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7573,"byte_end":7585,"line_start":69,"line_end":69,"column_start":12,"column_end":24},"name":"is_interface","qualname":"<Object<Meta>>::is_interface","value":"fn <I> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this object is of given interface\n","sig":null,"attributes":[{"value":"/ Check whether this object is of given interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7510,"byte_end":7561,"line_start":68,"line_end":68,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7808,"byte_end":7819,"line_start":75,"line_end":75,"column_start":12,"column_end":23},"name":"placeholder","qualname":"<Object<Meta>>::placeholder","value":"fn (meta: Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object that will be filled-in by the message logic\n","sig":null,"attributes":[{"value":"/ Create a placeholder object that will be filled-in by the message logic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":7721,"byte_end":7796,"line_start":74,"line_end":74,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8506,"byte_end":8515,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"ObjectMap","qualname":"::map::ObjectMap","value":"ObjectMap {  }","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"decl_id":null,"docs":" A holder for the object store of a connection","sig":null,"attributes":[{"value":"/ A holder for the object store of a connection","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8311,"byte_end":8360,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8361,"byte_end":8364,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Keeps track of which object id is associated to which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8365,"byte_end":8422,"line_start":98,"line_end":98,"column_start":1,"column_end":58}},{"value":"/ interface object, and which is currently unused.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8423,"byte_end":8475,"line_start":99,"line_end":99,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8731,"byte_end":8734,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectMap<Meta>>::new","value":"fn () -> ObjectMap<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty object map\n","sig":null,"attributes":[{"value":"/ Create a new empty object map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8686,"byte_end":8719,"line_start":107,"line_end":107,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8922,"byte_end":8926,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"find","qualname":"<ObjectMap<Meta>>::find","value":"fn (&self, id: u32) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Find an object in the store\n","sig":null,"attributes":[{"value":"/ Find an object in the store","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8879,"byte_end":8910,"line_start":115,"line_end":115,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9361,"byte_end":9367,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"remove","qualname":"<ObjectMap<Meta>>::remove","value":"fn (&mut self, id: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove an object from the store","sig":null,"attributes":[{"value":"/ Remove an object from the store","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9246,"byte_end":9281,"line_start":126,"line_end":126,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9286,"byte_end":9289,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Does nothing if the object didn't previously exists","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9294,"byte_end":9349,"line_start":128,"line_end":128,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9880,"byte_end":9889,"line_start":143,"line_end":143,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<ObjectMap<Meta>>::insert_at","value":"fn (&mut self, id: u32, object: Object<Meta>) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Insert given object for given id","sig":null,"attributes":[{"value":"/ Insert given object for given id","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9699,"byte_end":9735,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9740,"byte_end":9743,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Can fail if the requested id is not the next free id of this store.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9748,"byte_end":9819,"line_start":141,"line_end":141,"column_start":5,"column_end":76}},{"value":"/ (In which case this is a protocol error)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":9824,"byte_end":9868,"line_start":142,"line_end":142,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":10266,"byte_end":10283,"line_start":152,"line_end":152,"column_start":12,"column_end":29},"name":"client_insert_new","qualname":"<ObjectMap<Meta>>::client_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the client namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the client namespace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":10195,"byte_end":10254,"line_start":151,"line_end":151,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":10464,"byte_end":10481,"line_start":157,"line_end":157,"column_start":12,"column_end":29},"name":"server_insert_new","qualname":"<ObjectMap<Meta>>::server_insert_new","value":"fn (&mut self, object: Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the server namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the server namespace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":10393,"byte_end":10452,"line_start":156,"line_end":156,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":10656,"byte_end":10660,"line_start":162,"line_end":162,"column_start":12,"column_end":16},"name":"with","qualname":"<ObjectMap<Meta>>::with","value":"fn <T, F> (&mut self, id: u32, f: F) -> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Mutably access an object of the map\n","sig":null,"attributes":[{"value":"/ Mutably access an object of the map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":10605,"byte_end":10644,"line_start":161,"line_end":161,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":11238,"byte_end":11246,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"with_all","qualname":"<ObjectMap<Meta>>::with_all","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mutably access all objects of the map in sequence\n","sig":null,"attributes":[{"value":"/ Mutably access all objects of the map in sequence","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":11173,"byte_end":11226,"line_start":177,"line_end":177,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":46},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sinks","qualname":"::sinks","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":69}],"decl_id":null,"docs":" Message sinks","sig":null,"attributes":[{"value":"! Message sinks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12610,"byte_end":12627,"line_start":1,"line_end":1,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12628,"byte_end":12631,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This is a common implementation re-used by wayland-client and wayland-server. See","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12632,"byte_end":12717,"line_start":3,"line_end":3,"column_start":1,"column_end":86}},{"value":"! their respective documentation for their use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12718,"byte_end":12767,"line_start":4,"line_end":4,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":52},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13109,"byte_end":13113,"line_start":15,"line_end":15,"column_start":12,"column_end":16},"name":"Sink","qualname":"::sinks::Sink","value":"Sink {  }","parent":null,"children":[{"krate":0,"index":54}],"decl_id":null,"docs":" The sink end of an message iterator.","sig":null,"attributes":[{"value":"/ The sink end of an message iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12851,"byte_end":12891,"line_start":10,"line_end":10,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12892,"byte_end":12895,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This sink can be cloned and provided as implementation for wayland objects","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12896,"byte_end":12974,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ as long as `T: From<I::Event>` or `T: From<I::Request>` (depending on whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":12975,"byte_end":13056,"line_start":13,"line_end":13,"column_start":1,"column_end":82}},{"value":"/ you are client-side or server-side).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13057,"byte_end":13097,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13400,"byte_end":13404,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"push","qualname":"<Sink<T>>::push","value":"fn <U> (&self, msg: U) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a new message to the associated message iterator","sig":null,"attributes":[{"value":"/ Push a new message to the associated message iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13183,"byte_end":13240,"line_start":20,"line_end":20,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13245,"byte_end":13248,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the iterator was dropped (and is thus no longer capable of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13253,"byte_end":13318,"line_start":22,"line_end":22,"column_start":5,"column_end":70}},{"value":"/ retrieving it), the message will be silently dropped instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13323,"byte_end":13388,"line_start":23,"line_end":23,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":62},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":14003,"byte_end":14010,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"MsgIter","qualname":"::sinks::MsgIter","value":"MsgIter {  }","parent":null,"children":[{"krate":0,"index":64}],"decl_id":null,"docs":" A message iterator","sig":null,"attributes":[{"value":"/ A message iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13692,"byte_end":13714,"line_start":39,"line_end":39,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13715,"byte_end":13718,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ It yields the various messages that have been pushed to it from its associated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13719,"byte_end":13801,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/ sinks, in a MPSC fashion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13802,"byte_end":13831,"line_start":42,"line_end":42,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13832,"byte_end":13835,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ It returning `None` via the `Iterator` trait only means that no message is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13836,"byte_end":13914,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ pending. It may start yielding new messages afterwards. It never blocks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13915,"byte_end":13991,"line_start":45,"line_end":45,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":14266,"byte_end":14282,"line_start":59,"line_end":59,"column_start":8,"column_end":24},"name":"message_iterator","qualname":"::sinks::message_iterator","value":"fn <T> () -> (Sink<T>, MsgIter<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a new message iterator and an associated sink.\n","sig":null,"attributes":[{"value":"/ Create a new message iterator and an associated sink.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":14201,"byte_end":14258,"line_start":58,"line_end":58,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":71},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"socket","qualname":"::socket","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":107},{"krate":0,"index":120},{"krate":0,"index":125}],"decl_id":null,"docs":" Wayland socket manipulation\n","sig":null,"attributes":[{"value":"! Wayland socket manipulation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":14481,"byte_end":14512,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":85},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":14803,"byte_end":14814,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"MAX_FDS_OUT","qualname":"::socket::MAX_FDS_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of FD that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of FD that can be sent in a single socket message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":14724,"byte_end":14792,"line_start":11,"line_end":11,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":14910,"byte_end":14923,"line_start":14,"line_end":14,"column_start":11,"column_end":24},"name":"MAX_BYTES_OUT","qualname":"::socket::MAX_BYTES_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bytes that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes that can be sent in a single socket message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":14828,"byte_end":14899,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":87},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":14990,"byte_end":14996,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Socket","qualname":"::socket::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":88}],"decl_id":null,"docs":" A wayland socket\n","sig":null,"attributes":[{"value":"/ A wayland socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":14958,"byte_end":14978,"line_start":20,"line_end":20,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15364,"byte_end":15372,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"fn (&self, bytes: &[u8], fds: &[RawFd]) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a single message to the socket","sig":null,"attributes":[{"value":"/ Send a single message to the socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15035,"byte_end":15074,"line_start":26,"line_end":26,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15079,"byte_end":15082,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15087,"byte_end":15151,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15156,"byte_end":15159,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ The `fds` slice should not be longer than `MAX_FDS_OUT`, and the `bytes`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15164,"byte_end":15240,"line_start":30,"line_end":30,"column_start":5,"column_end":81}},{"value":"/ slice should not be longer than `MAX_BYTES_OUT` otherwise the receiving","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15245,"byte_end":15320,"line_start":31,"line_end":31,"column_start":5,"column_end":80}},{"value":"/ end may lose some data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15325,"byte_end":15352,"line_start":32,"line_end":32,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":16282,"byte_end":16289,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"rcv_msg","qualname":"<Socket>::rcv_msg","value":"fn (&self, buffer: &mut [u8], fds: &mut [RawFd]) -> NixResult<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Receive a single message from the socket","sig":null,"attributes":[{"value":"/ Receive a single message from the socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15807,"byte_end":15851,"line_start":44,"line_end":44,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15856,"byte_end":15859,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Return the number of bytes received and the number of Fds received.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15864,"byte_end":15935,"line_start":46,"line_end":46,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15940,"byte_end":15943,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Errors with `WouldBlock` is no message is available.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15948,"byte_end":16004,"line_start":48,"line_end":48,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":16009,"byte_end":16012,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":16017,"byte_end":16082,"line_start":50,"line_end":50,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":16087,"byte_end":16090,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The `buffer` slice should be at least `MAX_BYTES_OUT` long and the `fds`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":16095,"byte_end":16171,"line_start":52,"line_end":52,"column_start":5,"column_end":81}},{"value":"/ slice `MAX_FDS_OUT` long, otherwise some data of the received message may","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":16176,"byte_end":16253,"line_start":53,"line_end":53,"column_start":5,"column_end":82}},{"value":"/ be lost.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":16258,"byte_end":16270,"line_start":54,"line_end":54,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17523,"byte_end":17537,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"BufferedSocket","qualname":"::socket::BufferedSocket","value":"BufferedSocket {  }","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"decl_id":null,"docs":" An adapter around a raw Socket that directly handles buffering and\n conversion from/to wayland messages\n","sig":null,"attributes":[{"value":"/ An adapter around a raw Socket that directly handles buffering and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17401,"byte_end":17471,"line_start":104,"line_end":104,"column_start":1,"column_end":71}},{"value":"/ conversion from/to wayland messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17472,"byte_end":17511,"line_start":105,"line_end":105,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17749,"byte_end":17752,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedSocket>::new","value":"fn (socket: Socket) -> BufferedSocket","parent":null,"children":[],"decl_id":null,"docs":" Wrap a Socket into a Buffered Socket\n","sig":null,"attributes":[{"value":"/ Wrap a Socket into a Buffered Socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17697,"byte_end":17737,"line_start":115,"line_end":115,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18221,"byte_end":18231,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"get_socket","qualname":"<BufferedSocket>::get_socket","value":"fn (&mut self) -> &mut Socket","parent":null,"children":[],"decl_id":null,"docs":" Get direct access to the underlying socket\n","sig":null,"attributes":[{"value":"/ Get direct access to the underlying socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18163,"byte_end":18209,"line_start":126,"line_end":126,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18429,"byte_end":18440,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"into_socket","qualname":"<BufferedSocket>::into_socket","value":"fn (self) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Retrieve ownership of the underlying Socket","sig":null,"attributes":[{"value":"/ Retrieve ownership of the underlying Socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18296,"byte_end":18343,"line_start":131,"line_end":131,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18348,"byte_end":18351,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Any leftover content in the internal buffers will be lost","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18356,"byte_end":18417,"line_start":133,"line_end":133,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18563,"byte_end":18568,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"flush","qualname":"<BufferedSocket>::flush","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the outgoing buffer into the socket\n","sig":null,"attributes":[{"value":"/ Flush the contents of the outgoing buffer into the socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":18490,"byte_end":18551,"line_start":138,"line_end":138,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":20149,"byte_end":20162,"line_start":183,"line_end":183,"column_start":12,"column_end":25},"name":"write_message","qualname":"<BufferedSocket>::write_message","value":"fn (&mut self, msg: &Message) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message to the outgoing buffer","sig":null,"attributes":[{"value":"/ Write a message to the outgoing buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":19887,"byte_end":19929,"line_start":177,"line_end":177,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":19934,"byte_end":19937,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This method may flush the internal buffer if necessary (if it is full).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":19942,"byte_end":20017,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":20022,"byte_end":20025,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ If the message is too big to fit in the buffer, the error `Error::Sys(E2BIG)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":20030,"byte_end":20111,"line_start":181,"line_end":181,"column_start":5,"column_end":86}},{"value":"/ will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":20116,"byte_end":20137,"line_start":182,"line_end":182,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":20793,"byte_end":20814,"line_start":199,"line_end":199,"column_start":12,"column_end":33},"name":"fill_incoming_buffers","qualname":"<BufferedSocket>::fill_incoming_buffers","value":"fn (&mut self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to fill the incoming buffers of this socket, to prepare\n a new round of parsing.\n","sig":null,"attributes":[{"value":"/ Try to fill the incoming buffers of this socket, to prepare","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":20686,"byte_end":20749,"line_start":197,"line_end":197,"column_start":5,"column_end":68}},{"value":"/ a new round of parsing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":20754,"byte_end":20781,"line_start":198,"line_end":198,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22688,"byte_end":22704,"line_start":241,"line_end":241,"column_start":12,"column_end":28},"name":"read_one_message","qualname":"<BufferedSocket>::read_one_message","value":"fn <F> (&mut self, mut signature: F) -> Result<Message, MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize a single message from the incoming buffers socket","sig":null,"attributes":[{"value":"/ Read and deserialize a single message from the incoming buffers socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":21786,"byte_end":21860,"line_start":226,"line_end":226,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":21865,"byte_end":21868,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ This method requires one closure that given an object id and an opcode,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":21873,"byte_end":21948,"line_start":228,"line_end":228,"column_start":5,"column_end":80}},{"value":"/ must provide the signature of the associated request/event, in the form of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":21953,"byte_end":22031,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"/ a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22036,"byte_end":22103,"line_start":230,"line_end":230,"column_start":5,"column_end":72}},{"value":"/ the couple object/opcode does not exist, an error will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22108,"byte_end":22179,"line_start":231,"line_end":231,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22184,"byte_end":22187,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22192,"byte_end":22238,"line_start":233,"line_end":233,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22243,"byte_end":22246,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(msg))`: no error occurred, this is the message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22251,"byte_end":22310,"line_start":235,"line_end":235,"column_start":5,"column_end":64}},{"value":"/ - `Ok(Err(e))`: either a malformed message was encountered or we need more data,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22315,"byte_end":22399,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/    in the latter case you need to try calling `fill_incoming_buffers()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22404,"byte_end":22480,"line_start":237,"line_end":237,"column_start":5,"column_end":81}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22485,"byte_end":22566,"line_start":238,"line_end":238,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22571,"byte_end":22657,"line_start":239,"line_end":239,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":22662,"byte_end":22676,"line_start":240,"line_end":240,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":25247,"byte_end":25260,"line_start":298,"line_end":298,"column_start":12,"column_end":25},"name":"read_messages","qualname":"<BufferedSocket>::read_messages","value":"fn <F1, F2> (&mut self, mut signature: F1, mut callback: F2) -> NixResult<Result<usize, MessageParseError>>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize messages from the socket","sig":null,"attributes":[{"value":"/ Read and deserialize messages from the socket","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":23890,"byte_end":23939,"line_start":273,"line_end":273,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":23944,"byte_end":23947,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ This method requires two closures:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":23952,"byte_end":23990,"line_start":275,"line_end":275,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":23995,"byte_end":23998,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ - The first one, given an object id and an opcode, must provide","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24003,"byte_end":24070,"line_start":277,"line_end":277,"column_start":5,"column_end":72}},{"value":"/   the signature of the associated request/event, in the form of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24075,"byte_end":24142,"line_start":278,"line_end":278,"column_start":5,"column_end":72}},{"value":"/   a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24147,"byte_end":24216,"line_start":279,"line_end":279,"column_start":5,"column_end":74}},{"value":"/   the couple object/opcode does not exist, the parsing will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24221,"byte_end":24287,"line_start":280,"line_end":280,"column_start":5,"column_end":71}},{"value":"/   prematurely interrupted and this method will return a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24292,"byte_end":24351,"line_start":281,"line_end":281,"column_start":5,"column_end":64}},{"value":"/   `MessageParseError::Malformed` error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24356,"byte_end":24399,"line_start":282,"line_end":282,"column_start":5,"column_end":48}},{"value":"/ - The second closure is charged to process the parsed message. If it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24404,"byte_end":24476,"line_start":283,"line_end":283,"column_start":5,"column_end":77}},{"value":"/   returns `false`, the iteration will be prematurely stopped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24481,"byte_end":24546,"line_start":284,"line_end":284,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24551,"byte_end":24554,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ In both cases of early stopping, the remaining unused data will be left","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24559,"byte_end":24634,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ in the buffers, and will start to be processed at the next call of this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24639,"byte_end":24714,"line_start":287,"line_end":287,"column_start":5,"column_end":80}},{"value":"/ method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24719,"byte_end":24730,"line_start":288,"line_end":288,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24735,"byte_end":24738,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24743,"byte_end":24789,"line_start":290,"line_end":290,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24794,"byte_end":24797,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(n))`: no error occurred, `n` messages where processed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24802,"byte_end":24868,"line_start":292,"line_end":292,"column_start":5,"column_end":71}},{"value":"/ - `Ok(Err(MessageParseError::Malformed))`: a malformed message was encountered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24873,"byte_end":24955,"line_start":293,"line_end":293,"column_start":5,"column_end":87}},{"value":"/   (this is a protocol error and is supposed to be fatal to the connection).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":24960,"byte_end":25039,"line_start":294,"line_end":294,"column_start":5,"column_end":84}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":25044,"byte_end":25125,"line_start":295,"line_end":295,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":25130,"byte_end":25216,"line_start":296,"line_end":296,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":25221,"byte_end":25235,"line_start":297,"line_end":297,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":135},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":179},{"krate":0,"index":181}],"decl_id":null,"docs":" Various utilities used for other implementations\n","sig":null,"attributes":[{"value":"! Various utilities used for other implementations","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":36466,"byte_end":36518,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":36722,"byte_end":36730,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"UserData","qualname":"::utils::UserData","value":"UserData {  }","parent":null,"children":[{"krate":0,"index":142}],"decl_id":null,"docs":" A wrapper for user data, able to store any type, and correctly\n handling access from a wrong thread\n","sig":null,"attributes":[{"value":"/ A wrapper for user data, able to store any type, and correctly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":36604,"byte_end":36670,"line_start":8,"line_end":8,"column_start":1,"column_end":67}},{"value":"/ handling access from a wrong thread","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":36671,"byte_end":36710,"line_start":9,"line_end":9,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37240,"byte_end":37254,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"new_threadsafe","qualname":"<UserData>::new_threadsafe","value":"fn <T> (value: T) -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` using a threadsafe type","sig":null,"attributes":[{"value":"/ Create a new `UserData` using a threadsafe type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37115,"byte_end":37166,"line_start":26,"line_end":26,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37171,"byte_end":37174,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Its contents can be accessed from any thread.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37179,"byte_end":37228,"line_start":28,"line_end":28,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37586,"byte_end":37589,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<UserData>::new","value":"fn <T> (value: T) -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` using a non-threadsafe type","sig":null,"attributes":[{"value":"/ Create a new `UserData` using a non-threadsafe type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37408,"byte_end":37463,"line_start":35,"line_end":35,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37468,"byte_end":37471,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Its contents can only be accessed from the same thread as the one you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37476,"byte_end":37549,"line_start":37,"line_end":37,"column_start":5,"column_end":78}},{"value":"/ are creating it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37554,"byte_end":37574,"line_start":38,"line_end":38,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37814,"byte_end":37819,"line_start":46,"line_end":46,"column_start":12,"column_end":17},"name":"empty","qualname":"<UserData>::empty","value":"fn () -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UserData` containing nothing\n","sig":null,"attributes":[{"value":"/ Create a new `UserData` containing nothing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37756,"byte_end":37802,"line_start":45,"line_end":45,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38267,"byte_end":38270,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"get","qualname":"<UserData>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37917,"byte_end":37960,"line_start":52,"line_end":52,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37965,"byte_end":37968,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if either:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37973,"byte_end":38006,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38011,"byte_end":38014,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ - The requested type `T` does not match the type used for construction","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38019,"byte_end":38093,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ - This `UserData` has been created using the non-threadsafe variant and access","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38098,"byte_end":38180,"line_start":57,"line_end":57,"column_start":5,"column_end":87}},{"value":"/   is attempted from an other thread than the one it was created on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38185,"byte_end":38255,"line_start":58,"line_end":58,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39156,"byte_end":39163,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<UserData>::get_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to mutably access the wrapped user data","sig":null,"attributes":[{"value":"/ Attempt to mutably access the wrapped user data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38798,"byte_end":38849,"line_start":74,"line_end":74,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38854,"byte_end":38857,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if either:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38862,"byte_end":38895,"line_start":76,"line_end":76,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38900,"byte_end":38903,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ - The requested type `T` does not match the type used for construction","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38908,"byte_end":38982,"line_start":78,"line_end":78,"column_start":5,"column_end":79}},{"value":"/ - This `UserData` has been created using the non-threadsafe variant and access","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":38987,"byte_end":39069,"line_start":79,"line_end":79,"column_start":5,"column_end":87}},{"value":"/   is attempted from an other thread than the one it was created on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39074,"byte_end":39144,"line_start":80,"line_end":80,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39842,"byte_end":39853,"line_start":99,"line_end":99,"column_start":12,"column_end":23},"name":"UserDataMap","qualname":"::utils::UserDataMap","value":"UserDataMap {  }","parent":null,"children":[{"krate":0,"index":166}],"decl_id":null,"docs":" A storage able to store several values of `UserData`\n of different types. It behaves similarly to a `TypeMap`.\n","sig":null,"attributes":[{"value":"/ A storage able to store several values of `UserData`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39713,"byte_end":39769,"line_start":97,"line_end":97,"column_start":1,"column_end":57}},{"value":"/ of different types. It behaves similarly to a `TypeMap`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39770,"byte_end":39830,"line_start":98,"line_end":98,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39946,"byte_end":39949,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<UserDataMap>::new","value":"fn () -> UserDataMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new map\n","sig":null,"attributes":[{"value":"/ Create a new map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39914,"byte_end":39934,"line_start":104,"line_end":104,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40251,"byte_end":40254,"line_start":115,"line_end":115,"column_start":12,"column_end":15},"name":"get","qualname":"<UserDataMap>::get","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data of a given type","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data of a given type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40049,"byte_end":40108,"line_start":111,"line_end":111,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40113,"byte_end":40116,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if no value of type `T` is stored in this `UserDataMap`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40121,"byte_end":40199,"line_start":113,"line_end":113,"column_start":5,"column_end":83}},{"value":"/ and accessible from this thread","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40204,"byte_end":40239,"line_start":114,"line_end":114,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40674,"byte_end":40681,"line_start":128,"line_end":128,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<UserDataMap>::get_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to mutably access the wrapped user data of a given type","sig":null,"attributes":[{"value":"/ Attempt to mutably access the wrapped user data of a given type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40464,"byte_end":40531,"line_start":124,"line_end":124,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40536,"byte_end":40539,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if no value of type `T` is stored in this `UserDataMap`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40544,"byte_end":40622,"line_start":126,"line_end":126,"column_start":5,"column_end":83}},{"value":"/ and accessible from this thread","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40627,"byte_end":40662,"line_start":127,"line_end":127,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41410,"byte_end":41427,"line_start":146,"line_end":146,"column_start":12,"column_end":29},"name":"insert_if_missing","qualname":"<UserDataMap>::insert_if_missing","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40907,"byte_end":40963,"line_start":137,"line_end":137,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40968,"byte_end":40971,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This is the non-threadsafe variant, the type you insert don't have to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":40976,"byte_end":41052,"line_start":139,"line_end":139,"column_start":5,"column_end":81}},{"value":"/ threadsafe, but they will not be visible from other threads (even if they are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41057,"byte_end":41138,"line_start":140,"line_end":140,"column_start":5,"column_end":86}},{"value":"/ actually threadsafe).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41143,"byte_end":41168,"line_start":141,"line_end":141,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41173,"byte_end":41176,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41181,"byte_end":41261,"line_start":143,"line_end":143,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41266,"byte_end":41347,"line_start":144,"line_end":144,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41352,"byte_end":41398,"line_start":145,"line_end":145,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":42063,"byte_end":42091,"line_start":162,"line_end":162,"column_start":12,"column_end":40},"name":"insert_if_missing_threadsafe","qualname":"<UserDataMap>::insert_if_missing_threadsafe","value":"fn <T, F> (&self, init: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41632,"byte_end":41688,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41693,"byte_end":41696,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is the threadsafe variant, the type you insert must be threadsafe and will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41701,"byte_end":41784,"line_start":156,"line_end":156,"column_start":5,"column_end":88}},{"value":"/ be visible from all threads.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41789,"byte_end":41821,"line_start":157,"line_end":157,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41826,"byte_end":41829,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41834,"byte_end":41914,"line_start":159,"line_end":159,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":41919,"byte_end":42000,"line_start":160,"line_end":160,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":42005,"byte_end":42051,"line_start":161,"line_end":161,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":344},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":42960,"byte_end":42970,"line_start":198,"line_end":198,"column_start":16,"column_end":26},"name":"AppendList","qualname":"::utils::list::AppendList","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":43566,"byte_end":43569,"line_start":219,"line_end":219,"column_start":16,"column_end":19},"name":"new","qualname":"<AppendList<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":43645,"byte_end":43651,"line_start":223,"line_end":223,"column_start":16,"column_end":22},"name":"append","qualname":"<AppendList<T>>::append","value":"fn (&self, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":44368,"byte_end":44379,"line_start":246,"line_end":246,"column_start":16,"column_end":27},"name":"append_list","qualname":"<AppendList<T>>::append_list","value":"fn (&self, other: AppendList<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":44565,"byte_end":44569,"line_start":252,"line_end":252,"column_start":16,"column_end":20},"name":"iter","qualname":"<AppendList<T>>::iter","value":"fn (&self) -> AppendListIterator<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":44670,"byte_end":44678,"line_start":256,"line_end":256,"column_start":16,"column_end":24},"name":"iter_mut","qualname":"<AppendList<T>>::iter_mut","value":"fn (&mut self) -> AppendListMutIterator<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":45476,"byte_end":45494,"line_start":286,"line_end":286,"column_start":16,"column_end":34},"name":"AppendListIterator","qualname":"::utils::list::AppendListIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":45981,"byte_end":46002,"line_start":305,"line_end":305,"column_start":16,"column_end":37},"name":"AppendListMutIterator","qualname":"::utils::list::AppendListMutIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wire","qualname":"::wire","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":369},{"krate":0,"index":393},{"krate":0,"index":391},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":386},{"krate":0,"index":394},{"krate":0,"index":425},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":419},{"krate":0,"index":240},{"krate":0,"index":427},{"krate":0,"index":437},{"krate":0,"index":435},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":439},{"krate":0,"index":447},{"krate":0,"index":445},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":449},{"krate":0,"index":458},{"krate":0,"index":456},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":275}],"decl_id":null,"docs":" Types and routines used to manipulate arguments from the wire format\n","sig":null,"attributes":[{"value":"! Types and routines used to manipulate arguments from the wire format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":46819,"byte_end":46891,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47092,"byte_end":47103,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"MessageDesc","qualname":"::wire::MessageDesc","value":"MessageDesc { name, signature, since }","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239}],"decl_id":null,"docs":" Wire metadata of a given message\n","sig":null,"attributes":[{"value":"/ Wire metadata of a given message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47044,"byte_end":47080,"line_start":10,"line_end":10,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47143,"byte_end":47147,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::wire::MessageDesc::name","value":"&'static str","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" Name of this message\n","sig":null,"attributes":[{"value":"/ Name of this message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47110,"byte_end":47134,"line_start":12,"line_end":12,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47204,"byte_end":47213,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"signature","qualname":"::wire::MessageDesc::signature","value":"&'static [wire::ArgumentType]","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" Signature of the message\n","sig":null,"attributes":[{"value":"/ Signature of the message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47167,"byte_end":47195,"line_start":14,"line_end":14,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":239},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47298,"byte_end":47303,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"name":"since","qualname":"::wire::MessageDesc::since","value":"u32","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":" Minimum required version of the interface\n","sig":null,"attributes":[{"value":"/ Minimum required version of the interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47244,"byte_end":47289,"line_start":16,"line_end":16,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":370},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47456,"byte_end":47459,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::ArgumentType::Int","value":"ArgumentType::Int","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47444,"byte_end":47451,"line_start":23,"line_end":23,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":372},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47477,"byte_end":47481,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::ArgumentType::Uint","value":"ArgumentType::Uint","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47465,"byte_end":47472,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":374},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47524,"byte_end":47529,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::ArgumentType::Fixed","value":"ArgumentType::Fixed","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47487,"byte_end":47519,"line_start":27,"line_end":27,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47551,"byte_end":47554,"line_start":30,"line_end":30,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::ArgumentType::Str","value":"ArgumentType::Str","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47535,"byte_end":47546,"line_start":29,"line_end":29,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":378},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47591,"byte_end":47597,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::ArgumentType::Object","value":"ArgumentType::Object","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47560,"byte_end":47586,"line_start":31,"line_end":31,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":380},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47648,"byte_end":47653,"line_start":34,"line_end":34,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::ArgumentType::NewId","value":"ArgumentType::NewId","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47603,"byte_end":47643,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47675,"byte_end":47680,"line_start":36,"line_end":36,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::ArgumentType::Array","value":"ArgumentType::Array","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47659,"byte_end":47670,"line_start":35,"line_end":35,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47700,"byte_end":47702,"line_start":38,"line_end":38,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::ArgumentType::Fd","value":"ArgumentType::Fd","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47686,"byte_end":47695,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47425,"byte_end":47437,"line_start":22,"line_end":22,"column_start":10,"column_end":22},"name":"ArgumentType","qualname":"::wire::ArgumentType","value":"ArgumentType::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384}],"decl_id":null,"docs":" Enum of possible argument types as recognized by the wire\n","sig":null,"attributes":[{"value":"/ Enum of possible argument types as recognized by the wire","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47313,"byte_end":47374,"line_start":20,"line_end":20,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":395},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47852,"byte_end":47855,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::Argument::Int","value":"Argument::Int(i32)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47840,"byte_end":47847,"line_start":44,"line_end":44,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":398},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47878,"byte_end":47882,"line_start":47,"line_end":47,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::Argument::Uint","value":"Argument::Uint(u32)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47866,"byte_end":47873,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":401},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47930,"byte_end":47935,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::Argument::Fixed","value":"Argument::Fixed(i32)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47893,"byte_end":47925,"line_start":48,"line_end":48,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":404},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47962,"byte_end":47965,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::Argument::Str","value":"Argument::Str(CString)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47946,"byte_end":47957,"line_start":50,"line_end":50,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":407},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48011,"byte_end":48017,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::Argument::Object","value":"Argument::Object(u32)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47980,"byte_end":48006,"line_start":52,"line_end":52,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48073,"byte_end":48078,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::Argument::NewId","value":"Argument::NewId(u32)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48028,"byte_end":48068,"line_start":54,"line_end":54,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48105,"byte_end":48110,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::Argument::Array","value":"Argument::Array(Vec<u8>)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48089,"byte_end":48100,"line_start":56,"line_end":56,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":416},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48139,"byte_end":48141,"line_start":59,"line_end":59,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::Argument::Fd","value":"Argument::Fd(RawFd)","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48125,"byte_end":48134,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":394},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47825,"byte_end":47833,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"Argument","qualname":"::wire::Argument","value":"Argument::{Int, Uint, Fixed, Str, Object, NewId, Array, Fd}","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":416}],"decl_id":null,"docs":" Enum of possible argument as recognized by the wire, including values\n","sig":null,"attributes":[{"value":"/ Enum of possible argument as recognized by the wire, including values","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":47707,"byte_end":47780,"line_start":41,"line_end":41,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48235,"byte_end":48243,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Argument>::get_type","value":"fn (&self) -> ArgumentType","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the type of a given argument instance\n","sig":null,"attributes":[{"value":"/ Retrieve the type of a given argument instance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48173,"byte_end":48223,"line_start":63,"line_end":63,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48801,"byte_end":48808,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"Message","qualname":"::wire::Message","value":"Message { sender_id, opcode, args }","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"decl_id":null,"docs":" A wire message\n","sig":null,"attributes":[{"value":"/ A wire message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48736,"byte_end":48754,"line_start":78,"line_end":78,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48865,"byte_end":48874,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"sender_id","qualname":"::wire::Message::sender_id","value":"u32","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" ID of the object sending this message\n","sig":null,"attributes":[{"value":"/ ID of the object sending this message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48815,"byte_end":48856,"line_start":81,"line_end":81,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":429},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48919,"byte_end":48925,"line_start":84,"line_end":84,"column_start":9,"column_end":15},"name":"opcode","qualname":"::wire::Message::opcode","value":"u16","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Opcode of the message\n","sig":null,"attributes":[{"value":"/ Opcode of the message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48885,"byte_end":48910,"line_start":83,"line_end":83,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48973,"byte_end":48977,"line_start":86,"line_end":86,"column_start":9,"column_end":13},"name":"args","qualname":"::wire::Message::args","value":"std::vec::Vec<wire::Argument>","parent":{"krate":0,"index":427},"children":[],"decl_id":null,"docs":" Arguments of the message\n","sig":null,"attributes":[{"value":"/ Arguments of the message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48936,"byte_end":48964,"line_start":85,"line_end":85,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":440},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49183,"byte_end":49197,"line_start":93,"line_end":93,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::wire::MessageWriteError::BufferTooSmall","value":"MessageWriteError::BufferTooSmall","parent":{"krate":0,"index":439},"children":[],"decl_id":null,"docs":" The buffer is too small to hold the message contents\n","sig":null,"attributes":[{"value":"/ The buffer is too small to hold the message contents","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49122,"byte_end":49178,"line_start":92,"line_end":92,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49262,"byte_end":49273,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"DupFdFailed","qualname":"::wire::MessageWriteError::DupFdFailed","value":"MessageWriteError::DupFdFailed(::nix::Error)","parent":{"krate":0,"index":439},"children":[],"decl_id":null,"docs":" The message contains a FD that could not be dup-ed\n","sig":null,"attributes":[{"value":"/ The message contains a FD that could not be dup-ed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49203,"byte_end":49257,"line_start":94,"line_end":94,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":439},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49098,"byte_end":49115,"line_start":91,"line_end":91,"column_start":10,"column_end":27},"name":"MessageWriteError","qualname":"::wire::MessageWriteError","value":"MessageWriteError::{BufferTooSmall, DupFdFailed}","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":442}],"decl_id":null,"docs":" Error generated when trying to serialize a message into buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to serialize a message into buffers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48997,"byte_end":49064,"line_start":89,"line_end":89,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50070,"byte_end":50079,"line_start":119,"line_end":119,"column_start":5,"column_end":14},"name":"MissingFD","qualname":"::wire::MessageParseError::MissingFD","value":"MessageParseError::MissingFD","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" The message references a FD but the buffer FD is empty\n","sig":null,"attributes":[{"value":"/ The message references a FD but the buffer FD is empty","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50007,"byte_end":50065,"line_start":118,"line_end":118,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50140,"byte_end":50151,"line_start":121,"line_end":121,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::wire::MessageParseError::MissingData","value":"MessageParseError::MissingData","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" More data is needed to deserialize the message\n","sig":null,"attributes":[{"value":"/ More data is needed to deserialize the message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50085,"byte_end":50135,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50211,"byte_end":50220,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::wire::MessageParseError::Malformed","value":"MessageParseError::Malformed","parent":{"krate":0,"index":449},"children":[],"decl_id":null,"docs":" The message is malformed and cannot be parsed\n","sig":null,"attributes":[{"value":"/ The message is malformed and cannot be parsed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50157,"byte_end":50206,"line_start":122,"line_end":122,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":449},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49983,"byte_end":50000,"line_start":117,"line_end":117,"column_start":10,"column_end":27},"name":"MessageParseError","qualname":"::wire::MessageParseError","value":"MessageParseError::{MissingFD, MissingData, Malformed}","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454}],"decl_id":null,"docs":" Error generated when trying to deserialize a message from buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to deserialize a message from buffers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49880,"byte_end":49949,"line_start":115,"line_end":115,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":51078,"byte_end":51094,"line_start":148,"line_end":148,"column_start":12,"column_end":28},"name":"write_to_buffers","qualname":"<Message>::write_to_buffers","value":"fn <'a, 'b> (&self, payload: &'a mut [u32], mut fds: &'b mut [RawFd]) -> Result<(usize, usize), MessageWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the contents of this message into provided buffers","sig":null,"attributes":[{"value":"/ Serialize the contents of this message into provided buffers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50864,"byte_end":50928,"line_start":143,"line_end":143,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50933,"byte_end":50936,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements written in each buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50941,"byte_end":50998,"line_start":145,"line_end":145,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":51003,"byte_end":51006,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Any serialized Fd will be `dup()`-ed in the process","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":51011,"byte_end":51066,"line_start":147,"line_end":147,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54897,"byte_end":54905,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Message>::from_raw","value":"fn <'a, 'b> (raw: &'a [u32], signature: &[ArgumentType], fds: &'b [RawFd]) -> Result<(Message, &'a [u32], &'b [RawFd]), MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to parse a single wayland message with the given signature.","sig":null,"attributes":[{"value":"/ Attempts to parse a single wayland message with the given signature.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54529,"byte_end":54601,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54606,"byte_end":54609,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ If the buffers contains several messages, only the first one will be parsed,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54614,"byte_end":54694,"line_start":234,"line_end":234,"column_start":5,"column_end":85}},{"value":"/ and the unused tail of the buffers is returned. If a single message was present,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54699,"byte_end":54783,"line_start":235,"line_end":235,"column_start":5,"column_end":89}},{"value":"/ the returned slices should thus be empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54788,"byte_end":54833,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54838,"byte_end":54841,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Errors if the message is malformed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":54846,"byte_end":54885,"line_start":238,"line_end":238,"column_start":5,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":265},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":58485,"byte_end":58499,"line_start":329,"line_end":329,"column_start":8,"column_end":22},"name":"dup_fd_cloexec","qualname":"::wire::dup_fd_cloexec","value":"fn (fd: RawFd) -> NixResult<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate a `RawFd` and set the CLOEXEC flag on the copy\n","sig":null,"attributes":[{"value":"/ Duplicate a `RawFd` and set the CLOEXEC flag on the copy","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":58417,"byte_end":58477,"line_start":328,"line_end":328,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":278},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1255,"byte_end":1267,"line_start":37,"line_end":37,"column_start":11,"column_end":23},"name":"MessageGroup","qualname":"::MessageGroup","value":"MessageGroup: Sized","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"decl_id":null,"docs":" A group of messages","sig":null,"attributes":[{"value":"/ A group of messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":960,"byte_end":983,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":984,"byte_end":987,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This represents a group of message that can be serialized on the protocol wire.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":988,"byte_end":1071,"line_start":32,"line_end":32,"column_start":1,"column_end":84}},{"value":"/ Typically the set of events or requests of a single interface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1072,"byte_end":1138,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1139,"byte_end":1142,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1143,"byte_end":1195,"line_start":35,"line_end":35,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1196,"byte_end":1244,"line_start":36,"line_end":36,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1336,"byte_end":1344,"line_start":39,"line_end":39,"column_start":11,"column_end":19},"name":"MESSAGES","qualname":"::MessageGroup::MESSAGES","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Wire representation of this MessageGroup\n","sig":null,"attributes":[{"value":"/ Wire representation of this MessageGroup","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1281,"byte_end":1325,"line_start":38,"line_end":38,"column_start":5,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1517,"byte_end":1520,"line_start":42,"line_end":42,"column_start":10,"column_end":13},"name":"Map","qualname":"::MessageGroup::Map","value":"type Map;","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" The wrapper type for ObjectMap allowing the mapping of Object and\n NewId arguments to the object map during parsing.\n","sig":null,"attributes":[{"value":"/ The wrapper type for ObjectMap allowing the mapping of Object and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1380,"byte_end":1449,"line_start":40,"line_end":40,"column_start":5,"column_end":74}},{"value":"/ NewId arguments to the object map during parsing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1454,"byte_end":1507,"line_start":41,"line_end":41,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1564,"byte_end":1570,"line_start":44,"line_end":44,"column_start":8,"column_end":14},"name":"opcode","qualname":"::MessageGroup::opcode","value":"fn (&self) -> u16","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" The opcode of this message\n","sig":null,"attributes":[{"value":"/ The opcode of this message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1526,"byte_end":1556,"line_start":43,"line_end":43,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1732,"byte_end":1745,"line_start":48,"line_end":48,"column_start":8,"column_end":21},"name":"is_destructor","qualname":"::MessageGroup::is_destructor","value":"fn (&self) -> bool","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Whether this message is a destructor","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1590,"byte_end":1630,"line_start":45,"line_end":45,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1635,"byte_end":1638,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ If it is, once send or receive the associated object cannot be used any more.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1643,"byte_end":1724,"line_start":47,"line_end":47,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1834,"byte_end":1839,"line_start":50,"line_end":50,"column_start":8,"column_end":13},"name":"since","qualname":"::MessageGroup::since","value":"fn (&self) -> u32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" The minimal object version for which this message exists\n","sig":null,"attributes":[{"value":"/ The minimal object version for which this message exists","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1766,"byte_end":1826,"line_start":49,"line_end":49,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1934,"byte_end":1939,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"child","qualname":"::MessageGroup::child","value":"fn <Meta> (opcode: u16, version: u32, meta: &Meta) -> Option<::map::Object<Meta>>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Retrieve the child `Object` associated with this message if any\n","sig":null,"attributes":[{"value":"/ Retrieve the child `Object` associated with this message if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1859,"byte_end":1926,"line_start":51,"line_end":51,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2139,"byte_end":2147,"line_start":58,"line_end":58,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::MessageGroup::from_raw","value":"fn (msg: wire::Message, map: &mut Self::Map) -> Result<Self, ()>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Construct a message from its raw representation\n","sig":null,"attributes":[{"value":"/ Construct a message from its raw representation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2080,"byte_end":2131,"line_start":57,"line_end":57,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2271,"byte_end":2279,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::MessageGroup::into_raw","value":"fn (self, send_id: u32) -> wire::Message","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Turn this message into its raw representation\n","sig":null,"attributes":[{"value":"/ Turn this message into its raw representation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2214,"byte_end":2263,"line_start":59,"line_end":59,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2400,"byte_end":2410,"line_start":62,"line_end":62,"column_start":15,"column_end":25},"name":"from_raw_c","qualname":"::MessageGroup::from_raw_c","value":"fn (obj: *mut c_void, opcode: u32, args: *const syscom::wl_argument) -> Result<Self, ()>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Construct a message of this group from its C representation\n","sig":null,"attributes":[{"value":"/ Construct a message of this group from its C representation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2322,"byte_end":2385,"line_start":61,"line_end":61,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2667,"byte_end":2678,"line_start":68,"line_end":68,"column_start":8,"column_end":19},"name":"as_raw_c_in","qualname":"::MessageGroup::as_raw_c_in","value":"fn <F, T> (self, f: F) -> T","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Build a C representation of this message","sig":null,"attributes":[{"value":"/ Build a C representation of this message","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2509,"byte_end":2553,"line_start":64,"line_end":64,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2558,"byte_end":2561,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ It can only be accessed from the provided closure, and this consumes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2566,"byte_end":2638,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ the message.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2643,"byte_end":2659,"line_start":67,"line_end":67,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":292},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2931,"byte_end":2940,"line_start":77,"line_end":77,"column_start":11,"column_end":20},"name":"Interface","qualname":"::Interface","value":"Interface: 'static","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":" The description of a wayland interface","sig":null,"attributes":[{"value":"/ The description of a wayland interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2772,"byte_end":2814,"line_start":73,"line_end":73,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2815,"byte_end":2818,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2819,"byte_end":2871,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2872,"byte_end":2920,"line_start":76,"line_end":76,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":293},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3082,"byte_end":3089,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"name":"Request","qualname":"::Interface::Request","value":"type Request: MessageGroup + 'static;","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Set of requests associated to this interface","sig":null,"attributes":[{"value":"/ Set of requests associated to this interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":2956,"byte_end":3004,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3009,"byte_end":3012,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Requests are messages from the client to the server","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3017,"byte_end":3072,"line_start":80,"line_end":80,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3241,"byte_end":3246,"line_start":85,"line_end":85,"column_start":10,"column_end":15},"name":"Event","qualname":"::Interface::Event","value":"type Event: MessageGroup + 'static;","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Set of events associated to this interface","sig":null,"attributes":[{"value":"/ Set of events associated to this interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3119,"byte_end":3165,"line_start":82,"line_end":82,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3170,"byte_end":3173,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Events are messages from the server to the client","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3178,"byte_end":3231,"line_start":84,"line_end":84,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3313,"byte_end":3317,"line_start":87,"line_end":87,"column_start":11,"column_end":15},"name":"NAME","qualname":"::Interface::NAME","value":"&'static str","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Name of this interface\n","sig":null,"attributes":[{"value":"/ Name of this interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3276,"byte_end":3302,"line_start":86,"line_end":86,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3850,"byte_end":3857,"line_start":97,"line_end":97,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::Interface::VERSION","value":"u32","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Maximum supported version of this interface","sig":null,"attributes":[{"value":"/ Maximum supported version of this interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3337,"byte_end":3384,"line_start":88,"line_end":88,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3389,"byte_end":3392,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ This is the maximum version supported by the protocol specification currently","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3397,"byte_end":3478,"line_start":90,"line_end":90,"column_start":5,"column_end":86}},{"value":"/ used by this library, and should not be used as-is in your code, as a version","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3483,"byte_end":3564,"line_start":91,"line_end":91,"column_start":5,"column_end":86}},{"value":"/ change can subtly change the behavior of some objects.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3569,"byte_end":3627,"line_start":92,"line_end":92,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3632,"byte_end":3635,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Server are supposed to be able to handle all versions from 1 to the one they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3640,"byte_end":3720,"line_start":94,"line_end":94,"column_start":5,"column_end":85}},{"value":"/ advertise through the registry, and clients can choose any version among the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3725,"byte_end":3805,"line_start":95,"line_end":95,"column_start":5,"column_end":85}},{"value":"/ ones the server supports.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3810,"byte_end":3839,"line_start":96,"line_end":96,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3929,"byte_end":3940,"line_start":99,"line_end":99,"column_start":8,"column_end":19},"name":"c_interface","qualname":"::Interface::c_interface","value":"fn () -> *const ::syscom::wl_interface","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Pointer to the C representation of this interface\n","sig":null,"attributes":[{"value":"/ Pointer to the C representation of this interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3868,"byte_end":3921,"line_start":98,"line_end":98,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":4052,"byte_end":4061,"line_start":103,"line_end":103,"column_start":10,"column_end":19},"name":"NoMessage","qualname":"::NoMessage","value":"NoMessage::{}","parent":null,"children":[],"decl_id":null,"docs":" An empty enum representing a MessageGroup with no messages\n","sig":null,"attributes":[{"value":"/ An empty enum representing a MessageGroup with no messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":3980,"byte_end":4042,"line_start":102,"line_end":102,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6488,"byte_end":6494,"line_start":42,"line_end":42,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8664,"byte_end":8673,"line_start":106,"line_end":106,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13169,"byte_end":13173,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13576,"byte_end":13580,"line_start":31,"line_end":31,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":14077,"byte_end":14084,"line_start":50,"line_end":50,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15022,"byte_end":15028,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17007,"byte_end":17013,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17113,"byte_end":17119,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17201,"byte_end":17207,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17285,"byte_end":17291,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17676,"byte_end":17690,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":27493,"byte_end":27499,"line_start":374,"line_end":374,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37049,"byte_end":37057,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37082,"byte_end":37090,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37100,"byte_end":37108,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39896,"byte_end":39907,"line_start":103,"line_end":103,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":42336,"byte_end":42347,"line_start":171,"line_end":171,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":43008,"byte_end":43018,"line_start":200,"line_end":200,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":45285,"byte_end":45295,"line_start":279,"line_end":279,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":45565,"byte_end":45583,"line_start":288,"line_end":288,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":46077,"byte_end":46098,"line_start":307,"line_end":307,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48158,"byte_end":48166,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49321,"byte_end":49338,"line_start":98,"line_end":98,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49707,"byte_end":49724,"line_start":109,"line_end":109,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50254,"byte_end":50271,"line_start":126,"line_end":126,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50672,"byte_end":50689,"line_start":136,"line_end":136,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50850,"byte_end":50857,"line_start":142,"line_end":142,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":59685,"byte_end":59692,"line_start":366,"line_end":366,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":59907,"byte_end":59914,"line_start":378,"line_end":378,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":4117,"byte_end":4126,"line_start":106,"line_end":106,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":894,"byte_end":897,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":907,"byte_end":912,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":46}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":922,"byte_end":928,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":71}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":938,"byte_end":943,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":135}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":953,"byte_end":957,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":226}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":5303,"byte_end":5308,"line_start":10,"line_end":10,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":6488,"byte_end":6494,"line_start":42,"line_end":42,"column_start":28,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/map.rs","byte_start":8664,"byte_end":8673,"line_start":106,"line_end":106,"column_start":28,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13169,"byte_end":13173,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":52},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":13576,"byte_end":13580,"line_start":31,"line_end":31,"column_start":19,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":52},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/sinks.rs","byte_start":14077,"byte_end":14084,"line_start":50,"line_end":50,"column_start":22,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":62},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":15022,"byte_end":15028,"line_start":25,"line_end":25,"column_start":6,"column_end":12},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":87},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17007,"byte_end":17013,"line_start":76,"line_end":76,"column_start":20,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":87},"to":{"krate":1,"index":8220}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17113,"byte_end":17119,"line_start":82,"line_end":82,"column_start":18,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":87},"to":{"krate":1,"index":8218}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17201,"byte_end":17207,"line_start":88,"line_end":88,"column_start":20,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":87},"to":{"krate":1,"index":8222}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17285,"byte_end":17291,"line_start":94,"line_end":94,"column_start":15,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":87},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":17676,"byte_end":17690,"line_start":114,"line_end":114,"column_start":6,"column_end":20},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/socket.rs","byte_start":27493,"byte_end":27499,"line_start":374,"line_end":374,"column_start":25,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37049,"byte_end":37057,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":141},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37082,"byte_end":37090,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":141},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":37100,"byte_end":37108,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":39896,"byte_end":39907,"line_start":103,"line_end":103,"column_start":6,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":42336,"byte_end":42347,"line_start":171,"line_end":171,"column_start":18,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":165},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":43008,"byte_end":43018,"line_start":200,"line_end":200,"column_start":13,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":45285,"byte_end":45295,"line_start":279,"line_end":279,"column_start":22,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":344},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":45565,"byte_end":45583,"line_start":288,"line_end":288,"column_start":34,"column_end":52},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":351},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/utils.rs","byte_start":46077,"byte_end":46098,"line_start":307,"line_end":307,"column_start":34,"column_end":55},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":360},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":48158,"byte_end":48166,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49321,"byte_end":49338,"line_start":98,"line_end":98,"column_start":30,"column_end":47},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":439},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":49707,"byte_end":49724,"line_start":109,"line_end":109,"column_start":30,"column_end":47},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":439},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50254,"byte_end":50271,"line_start":126,"line_end":126,"column_start":30,"column_end":47},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":449},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50672,"byte_end":50689,"line_start":136,"line_end":136,"column_start":30,"column_end":47},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":449},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":50850,"byte_end":50857,"line_start":142,"line_end":142,"column_start":6,"column_end":13},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":427},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":59685,"byte_end":59692,"line_start":366,"line_end":366,"column_start":6,"column_end":13},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/wire.rs","byte_start":59907,"byte_end":59914,"line_start":378,"line_end":378,"column_start":15,"column_end":22},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":269},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":1269,"byte_end":1274,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":278}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.23.6/src/lib.rs","byte_start":4117,"byte_end":4126,"line_start":106,"line_end":106,"column_start":23,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":298},"to":{"krate":0,"index":278}}]}