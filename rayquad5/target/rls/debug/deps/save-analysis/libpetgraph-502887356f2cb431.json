{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","petgraph","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=502887356f2cb431","-C","extra-filename=-502887356f2cb431","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","fixedbitset=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libfixedbitset-79349a61153ab8d2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libpetgraph-502887356f2cb431.rmeta"},"prelude":{"crate_id":{"name":"petgraph","disambiguator":[3315239079231450119,958776490011743235]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","num":15,"id":{"name":"fixedbitset","disambiguator":[12136443693809048143,16088621428177435084]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1,"byte_end":5007,"line_start":2,"line_end":227,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1029,"byte_end":1034,"line_start":34,"line_end":34,"column_start":16,"column_end":21},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1057,"byte_end":1065,"line_start":36,"line_end":36,"column_start":21,"column_end":29},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1067,"byte_end":1075,"line_start":36,"line_end":36,"column_start":31,"column_end":39},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8376,"byte_end":8377,"line_start":42,"line_end":42,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":27}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8376,"byte_end":8377,"line_start":42,"line_end":42,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Reversed","parent":{"krate":0,"index":27}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8376,"byte_end":8377,"line_start":42,"line_end":42,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"depth_first_search, DfsEvent","parent":{"krate":0,"index":27}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8376,"byte_end":8377,"line_start":42,"line_end":42,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"DfsPostOrder, Dfs, Bfs, Walker","parent":{"krate":0,"index":27}},{"kind":"Use","ref_id":{"krate":0,"index":1912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76079,"byte_end":76092,"line_start":43,"line_end":43,"column_start":5,"column_end":18},"alias_span":null,"name":"is_isomorphic","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":1917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76098,"byte_end":76120,"line_start":44,"line_end":44,"column_start":5,"column_end":27},"alias_span":null,"name":"is_isomorphic_matching","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":1551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76150,"byte_end":76158,"line_start":46,"line_end":46,"column_start":26,"column_end":34},"alias_span":null,"name":"dijkstra","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":1571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76182,"byte_end":76187,"line_start":47,"line_end":47,"column_start":23,"column_end":28},"alias_span":null,"name":"astar","value":"","parent":{"krate":0,"index":692}},{"kind":"Use","ref_id":{"krate":0,"index":877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":187805,"byte_end":187814,"line_start":16,"line_end":16,"column_start":17,"column_end":26},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":1585}},{"kind":"Use","ref_id":{"krate":0,"index":876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":187816,"byte_end":187825,"line_start":16,"line_end":16,"column_start":28,"column_end":37},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":1585}},{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234557,"byte_end":234562,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":2636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234568,"byte_end":234577,"line_start":11,"line_end":11,"column_start":5,"column_end":14},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":2673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234583,"byte_end":234592,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234598,"byte_end":234605,"line_start":13,"line_end":13,"column_start":5,"column_end":12},"alias_span":null,"name":"DiGraph","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":952},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234611,"byte_end":234618,"line_start":14,"line_end":14,"column_start":5,"column_end":12},"alias_span":null,"name":"UnGraph","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":2178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234911,"byte_end":234914,"line_start":32,"line_end":32,"column_start":5,"column_end":8},"alias_span":null,"name":"Bfs","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":2151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234920,"byte_end":234923,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"alias_span":null,"name":"Dfs","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":2164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234929,"byte_end":234941,"line_start":34,"line_end":34,"column_start":5,"column_end":17},"alias_span":null,"name":"DfsPostOrder","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":3002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234980,"byte_end":234989,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"alias_span":null,"name":"Direction","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":3006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234995,"byte_end":235003,"line_start":39,"line_end":39,"column_start":5,"column_end":13},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":3003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":235009,"byte_end":235017,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"alias_span":null,"name":"Outgoing","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":3027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":235023,"byte_end":235031,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"alias_span":null,"name":"Directed","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":3033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":235037,"byte_end":235047,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"alias_span":null,"name":"Undirected","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":235092,"byte_end":235099,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"alias_span":null,"name":"EdgeRef","value":"","parent":{"krate":0,"index":1973}},{"kind":"Use","ref_id":{"krate":0,"index":2721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1747,"byte_end":1751,"line_start":74,"line_end":74,"column_start":9,"column_end":13},"alias_span":null,"name":"Edge","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":2673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1761,"byte_end":1770,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":2745},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1780,"byte_end":1791,"line_start":76,"line_end":76,"column_start":9,"column_end":20},"alias_span":null,"name":"EdgeIndices","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":2755},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1801,"byte_end":1814,"line_start":77,"line_end":77,"column_start":9,"column_end":22},"alias_span":null,"name":"EdgeReference","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1824,"byte_end":1838,"line_start":78,"line_end":78,"column_start":9,"column_end":23},"alias_span":null,"name":"EdgeReferences","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1848,"byte_end":1862,"line_start":79,"line_end":79,"column_start":9,"column_end":23},"alias_span":null,"name":"EdgeWeightsMut","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1157},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1872,"byte_end":1877,"line_start":80,"line_end":80,"column_start":9,"column_end":14},"alias_span":null,"name":"Edges","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1086},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1887,"byte_end":1896,"line_start":81,"line_end":81,"column_start":9,"column_end":18},"alias_span":null,"name":"Externals","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1906,"byte_end":1912,"line_start":82,"line_end":82,"column_start":9,"column_end":15},"alias_span":null,"name":"Frozen","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1922,"byte_end":1927,"line_start":83,"line_end":83,"column_start":9,"column_end":14},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1937,"byte_end":1946,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"alias_span":null,"name":"Neighbors","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":2710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1956,"byte_end":1960,"line_start":85,"line_end":85,"column_start":9,"column_end":13},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":2636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1970,"byte_end":1979,"line_start":86,"line_end":86,"column_start":9,"column_end":18},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":2735},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1989,"byte_end":2000,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"alias_span":null,"name":"NodeIndices","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2010,"byte_end":2024,"line_start":88,"line_end":88,"column_start":9,"column_end":23},"alias_span":null,"name":"NodeWeightsMut","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1321},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2034,"byte_end":2048,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"alias_span":null,"name":"NodeReferences","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1254},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2058,"byte_end":2071,"line_start":90,"line_end":90,"column_start":9,"column_end":22},"alias_span":null,"name":"WalkNeighbors","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":1243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2081,"byte_end":2091,"line_start":91,"line_end":91,"column_start":9,"column_end":19},"alias_span":null,"name":"GraphIndex","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2101,"byte_end":2110,"line_start":92,"line_end":92,"column_start":9,"column_end":18},"alias_span":null,"name":"IndexType","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":911},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2120,"byte_end":2130,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"alias_span":null,"name":"edge_index","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2140,"byte_end":2150,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"alias_span":null,"name":"node_index","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2160,"byte_end":2169,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"alias_span":null,"name":"DefaultIx","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2179,"byte_end":2186,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"alias_span":null,"name":"DiGraph","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":952},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2196,"byte_end":2203,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"alias_span":null,"name":"UnGraph","value":"","parent":{"krate":0,"index":1992}},{"kind":"Use","ref_id":{"krate":0,"index":3002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3208,"byte_end":3217,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3221,"byte_end":3234,"line_start":144,"line_end":144,"column_start":22,"column_end":35},"name":"EdgeDirection","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1,"byte_end":5007,"line_start":2,"line_end":227,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":27},{"krate":0,"index":603},{"krate":0,"index":692},{"krate":0,"index":846},{"krate":0,"index":1451},{"krate":0,"index":1524},{"krate":0,"index":1536},{"krate":0,"index":1555},{"krate":0,"index":1585},{"krate":0,"index":1838},{"krate":0,"index":1869},{"krate":0,"index":1879},{"krate":0,"index":1948},{"krate":0,"index":1966},{"krate":0,"index":1973},{"krate":0,"index":1992},{"krate":0,"index":2018},{"krate":0,"index":3002},{"krate":0,"index":3024},{"krate":0,"index":3022},{"krate":0,"index":3019},{"krate":0,"index":3020},{"krate":0,"index":3017},{"krate":0,"index":3015},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3009},{"krate":0,"index":3025},{"krate":0,"index":2019},{"krate":0,"index":2022},{"krate":0,"index":3027},{"krate":0,"index":3030},{"krate":0,"index":3028},{"krate":0,"index":3031},{"krate":0,"index":3033},{"krate":0,"index":3036},{"krate":0,"index":3034},{"krate":0,"index":3037},{"krate":0,"index":2023},{"krate":0,"index":2025},{"krate":0,"index":2027},{"krate":0,"index":2029},{"krate":0,"index":2033},{"krate":0,"index":2038},{"krate":0,"index":2043},{"krate":0,"index":2049},{"krate":0,"index":2055}],"decl_id":null,"docs":" **petgraph** is a graph data structure library.","sig":null,"attributes":[{"value":"! **petgraph** is a graph data structure library.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1,"byte_end":52,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":53,"byte_end":56,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! - [`Graph`](./graph/struct.Graph.html) which is an adjacency list graph with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":57,"byte_end":137,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"! arbitrary associated data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":138,"byte_end":168,"line_start":5,"line_end":5,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":169,"byte_end":172,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! - [`StableGraph`](./stable_graph/struct.StableGraph.html) is similar","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":173,"byte_end":245,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! to `Graph`, but it keeps indices stable across removals.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":246,"byte_end":306,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":307,"byte_end":310,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! - [`GraphMap`](./graphmap/struct.GraphMap.html) is an adjacency list graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":311,"byte_end":389,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"! which is backed by a hash table and the node identifiers are the keys","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":390,"byte_end":463,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"! into the table.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":464,"byte_end":483,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"! - [`CSR`](./csr/struct.Csr.html) is a sparse adjacency matrix graph with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":484,"byte_end":560,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"! arbitrary associated data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":561,"byte_end":591,"line_start":14,"line_end":14,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":592,"byte_end":595,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! Optional crate feature: `\"serde-1\"`, see the Readme for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":596,"byte_end":673,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":674,"byte_end":677,"line_start":17,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"visit","qualname":"::visit","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":37},{"krate":0,"index":74},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2213},{"krate":0,"index":2218},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":2223},{"krate":0,"index":2224},{"krate":0,"index":2227},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":194},{"krate":0,"index":202},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2240},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2249},{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2258},{"krate":0,"index":210},{"krate":0,"index":218},{"krate":0,"index":2263},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2272},{"krate":0,"index":2277},{"krate":0,"index":224},{"krate":0,"index":232},{"krate":0,"index":243},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2287},{"krate":0,"index":248},{"krate":0,"index":255},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2298},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2308},{"krate":0,"index":263},{"krate":0,"index":269},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2317},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":278},{"krate":0,"index":286},{"krate":0,"index":291},{"krate":0,"index":295},{"krate":0,"index":299},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2340},{"krate":0,"index":312},{"krate":0,"index":319},{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2351},{"krate":0,"index":327},{"krate":0,"index":543}],"decl_id":null,"docs":" Graph traits and graph traversals.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1167,"byte_end":1179,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"! Graph traits and graph traversals.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":6790,"byte_end":6828,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":6829,"byte_end":6832,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! ### The `Into-` Traits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":6833,"byte_end":6859,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":6860,"byte_end":6863,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Graph traits like [`IntoNeighbors`][in] create iterators and use the same","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":6864,"byte_end":6941,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"! pattern that `IntoIterator` does: the trait takes a reference to a graph,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":6942,"byte_end":7019,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"! and produces an iterator. These traits are quite composable, but with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7020,"byte_end":7097,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"! limitation that they only use shared references to graphs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7098,"byte_end":7160,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7161,"byte_end":7164,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! ### Graph Traversal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7165,"byte_end":7188,"line_start":10,"line_end":10,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7189,"byte_end":7192,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! [`Dfs`](struct.Dfs.html), [`Bfs`][bfs], [`DfsPostOrder`][dfspo] and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7193,"byte_end":7264,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"! [`Topo`][topo]  are basic visitors and they use “walker” methods: the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7265,"byte_end":7342,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"! visitors don't hold the graph as borrowed during traversal, only for the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7343,"byte_end":7419,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"! `.next()` call on the walker. They can be converted to iterators","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7420,"byte_end":7488,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"! through the [`Walker`][w] trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7489,"byte_end":7525,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7526,"byte_end":7529,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! There is also the callback based traversal [`depth_first_search`][dfs].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7530,"byte_end":7605,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7606,"byte_end":7609,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! [bfs]: struct.Bfs.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7610,"byte_end":7636,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"! [dfspo]: struct.DfsPostOrder.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7637,"byte_end":7674,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"! [topo]: struct.Topo.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7675,"byte_end":7703,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"! [dfs]: fn.depth_first_search.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7704,"byte_end":7741,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"! [w]: trait.Walker.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7742,"byte_end":7768,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7769,"byte_end":7772,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! ### Other Graph Traits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7773,"byte_end":7799,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7800,"byte_end":7803,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! The traits are rather loosely coupled at the moment (which is intentional,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7804,"byte_end":7882,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"! but will develop a bit), and there are traits missing that could be added.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7883,"byte_end":7961,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7962,"byte_end":7965,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! Not much is needed to be able to use the visitors on a graph. A graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":7966,"byte_end":8039,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"! needs to define [`GraphBase`][gb], [`IntoNeighbors`][in] and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8040,"byte_end":8104,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"! [`Visitable`][vis] as a minimum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8105,"byte_end":8141,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8142,"byte_end":8145,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! [gb]: trait.GraphBase.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8146,"byte_end":8176,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"! [in]: trait.IntoNeighbors.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8177,"byte_end":8211,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"! [vis]: trait.Visitable.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8212,"byte_end":8243,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":8244,"byte_end":8247,"line_start":38,"line_end":38,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30047,"byte_end":30051,"line_start":8,"line_end":8,"column_start":12,"column_end":16},"name":"Time","qualname":"::visit::dfsvisit::Time","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strictly monotonically increasing event time for a depth first search.\n","sig":null,"attributes":[{"value":"/ Strictly monotonically increasing event time for a depth first search.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":29884,"byte_end":29958,"line_start":6,"line_end":6,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30168,"byte_end":30176,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"name":"Discover","qualname":"::visit::dfsvisit::DfsEvent::Discover","value":"DfsEvent::Discover(N, Time)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2112},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30244,"byte_end":30252,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"name":"TreeEdge","qualname":"::visit::dfsvisit::DfsEvent::TreeEdge","value":"DfsEvent::TreeEdge(N, N)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" An edge of the tree formed by the traversal.\n","sig":null,"attributes":[{"value":"/ An edge of the tree formed by the traversal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30191,"byte_end":30239,"line_start":14,"line_end":14,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2116},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30308,"byte_end":30316,"line_start":17,"line_end":17,"column_start":5,"column_end":13},"name":"BackEdge","qualname":"::visit::dfsvisit::DfsEvent::BackEdge","value":"DfsEvent::BackEdge(N, N)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" An edge to an already visited node.\n","sig":null,"attributes":[{"value":"/ An edge to an already visited node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30264,"byte_end":30303,"line_start":16,"line_end":16,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2120},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30502,"byte_end":30518,"line_start":22,"line_end":22,"column_start":5,"column_end":21},"name":"CrossForwardEdge","qualname":"::visit::dfsvisit::DfsEvent::CrossForwardEdge","value":"DfsEvent::CrossForwardEdge(N, N)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":" A cross or forward edge.","sig":null,"attributes":[{"value":"/ A cross or forward edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30328,"byte_end":30356,"line_start":18,"line_end":18,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30361,"byte_end":30364,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ For an edge *(u, v)*, if the discover time of *v* is greater than *u*,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30369,"byte_end":30443,"line_start":20,"line_end":20,"column_start":5,"column_end":79}},{"value":"/ then it is a forward edge, else a cross edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30448,"byte_end":30497,"line_start":21,"line_end":21,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2124},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30530,"byte_end":30536,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Finish","qualname":"::visit::dfsvisit::DfsEvent::Finish","value":"DfsEvent::Finish(N, Time)","parent":{"krate":0,"index":2106},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30150,"byte_end":30158,"line_start":12,"line_end":12,"column_start":10,"column_end":18},"name":"DfsEvent","qualname":"::visit::dfsvisit::DfsEvent","value":"DfsEvent::{Discover, TreeEdge, BackEdge, CrossForwardEdge, Finish}","parent":null,"children":[{"krate":0,"index":2108},{"krate":0,"index":2112},{"krate":0,"index":2116},{"krate":0,"index":2120},{"krate":0,"index":2124}],"decl_id":null,"docs":" A depth first search (DFS) visitor event.\n","sig":null,"attributes":[{"value":"/ A depth first search (DFS) visitor event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30065,"byte_end":30110,"line_start":10,"line_end":10,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2138},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30883,"byte_end":30891,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Continue","qualname":"::visit::dfsvisit::Control::Continue","value":"Control::Continue","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30897,"byte_end":30902,"line_start":43,"line_end":43,"column_start":5,"column_end":10},"name":"Break","qualname":"::visit::dfsvisit::Control::Break","value":"Control::Break(B)","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30866,"byte_end":30873,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"name":"Control","qualname":"::visit::dfsvisit::Control","value":"Control::{Continue, Break}","parent":null,"children":[{"krate":0,"index":2138},{"krate":0,"index":2140}],"decl_id":null,"docs":" Control flow for callbacks.","sig":null,"attributes":[{"value":"/ Control flow for callbacks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30760,"byte_end":30791,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30792,"byte_end":30795,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ `Break` can carry a value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30796,"byte_end":30826,"line_start":39,"line_end":39,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30942,"byte_end":30950,"line_start":47,"line_end":47,"column_start":12,"column_end":20},"name":"breaking","qualname":"<Control<B>>::breaking","value":"fn () -> Control<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31060,"byte_end":31071,"line_start":49,"line_end":49,"column_start":12,"column_end":23},"name":"break_value","qualname":"<Control<B>>::break_value","value":"fn (self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" Get the value in `Control::Break(_)`, if present.\n","sig":null,"attributes":[{"value":"/ Get the value in `Control::Break(_)`, if present.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30995,"byte_end":31048,"line_start":48,"line_end":48,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":47},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31319,"byte_end":31330,"line_start":60,"line_end":60,"column_start":11,"column_end":22},"name":"ControlFlow","qualname":"::visit::dfsvisit::ControlFlow","value":"ControlFlow","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" Control flow for callbacks.","sig":null,"attributes":[{"value":"/ Control flow for callbacks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31214,"byte_end":31245,"line_start":57,"line_end":57,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31246,"byte_end":31249,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The empty return value `()` is equivalent to continue.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31250,"byte_end":31308,"line_start":59,"line_end":59,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31340,"byte_end":31350,"line_start":61,"line_end":61,"column_start":8,"column_end":18},"name":"continuing","qualname":"::visit::dfsvisit::ControlFlow::continuing","value":"fn () -> Self","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31369,"byte_end":31381,"line_start":62,"line_end":62,"column_start":8,"column_end":20},"name":"should_break","qualname":"::visit::dfsvisit::ControlFlow::should_break","value":"fn (&self) -> bool","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33780,"byte_end":33798,"line_start":148,"line_end":148,"column_start":8,"column_end":26},"name":"depth_first_search","qualname":"::visit::dfsvisit::depth_first_search","value":"fn <G, I, F, C> (graph: G, starts: I, mut visitor: F) -> C","parent":null,"children":[],"decl_id":null,"docs":" A recursive depth first search.","sig":null,"attributes":[{"value":"/ A recursive depth first search.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31972,"byte_end":32007,"line_start":90,"line_end":90,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32008,"byte_end":32011,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Starting points are the nodes in the iterator `starts` (specify just one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32012,"byte_end":32088,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ start vertex *x* by using `Some(x)`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32089,"byte_end":32130,"line_start":93,"line_end":93,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32131,"byte_end":32134,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The traversal emits discovery and finish events for each reachable vertex,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32135,"byte_end":32213,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ and edge classification of each reachable edge. `visitor` is called for each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32214,"byte_end":32294,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/ event, see [`DfsEvent`][de] for possible values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32295,"byte_end":32347,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32348,"byte_end":32351,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ If the return value of the visitor is simply `()`, the visit runs until it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32352,"byte_end":32430,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"/ is finished. If the return value is a `Control<B>`, it can be used to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32431,"byte_end":32504,"line_start":100,"line_end":100,"column_start":1,"column_end":74}},{"value":"/ break the visit early, and the last control value is returned by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32505,"byte_end":32577,"line_start":101,"line_end":101,"column_start":1,"column_end":73}},{"value":"/ function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32578,"byte_end":32591,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32592,"byte_end":32595,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ [de]: enum.DfsEvent.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32596,"byte_end":32624,"line_start":104,"line_end":104,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32625,"byte_end":32628,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32629,"byte_end":32642,"line_start":106,"line_end":106,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32643,"byte_end":32646,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Find a path from vertex 0 to 5, and exit the visit as soon as we reach","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32647,"byte_end":32721,"line_start":108,"line_end":108,"column_start":1,"column_end":75}},{"value":"/ the goal vertex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32722,"byte_end":32742,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32743,"byte_end":32746,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32747,"byte_end":32754,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32755,"byte_end":32784,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ use petgraph::graph::node_index as n;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32785,"byte_end":32826,"line_start":113,"line_end":113,"column_start":1,"column_end":42}},{"value":"/ use petgraph::visit::depth_first_search;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32827,"byte_end":32871,"line_start":114,"line_end":114,"column_start":1,"column_end":45}},{"value":"/ use petgraph::visit::{DfsEvent, Control};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32872,"byte_end":32917,"line_start":115,"line_end":115,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32918,"byte_end":32921,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ let gr: Graph<(), ()> = Graph::from_edges(&[","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32922,"byte_end":32970,"line_start":117,"line_end":117,"column_start":1,"column_end":49}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":32971,"byte_end":33002,"line_start":118,"line_end":118,"column_start":1,"column_end":32}},{"value":"/     (1, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33003,"byte_end":33018,"line_start":119,"line_end":119,"column_start":1,"column_end":16}},{"value":"/     (2, 3), (2, 4),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33019,"byte_end":33042,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/     (4, 0), (4, 5),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33043,"byte_end":33066,"line_start":121,"line_end":121,"column_start":1,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33067,"byte_end":33074,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33075,"byte_end":33078,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ // record each predecessor, mapping node → node","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33079,"byte_end":33132,"line_start":124,"line_end":124,"column_start":1,"column_end":52}},{"value":"/ let mut predecessor = vec![NodeIndex::end(); gr.node_count()];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33133,"byte_end":33199,"line_start":125,"line_end":125,"column_start":1,"column_end":67}},{"value":"/ let start = n(0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33200,"byte_end":33221,"line_start":126,"line_end":126,"column_start":1,"column_end":22}},{"value":"/ let goal = n(5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33222,"byte_end":33242,"line_start":127,"line_end":127,"column_start":1,"column_end":21}},{"value":"/ depth_first_search(&gr, Some(start), |event| {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33243,"byte_end":33293,"line_start":128,"line_end":128,"column_start":1,"column_end":51}},{"value":"/     if let DfsEvent::TreeEdge(u, v) = event {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33294,"byte_end":33343,"line_start":129,"line_end":129,"column_start":1,"column_end":50}},{"value":"/         predecessor[v.index()] = u;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33344,"byte_end":33383,"line_start":130,"line_end":130,"column_start":1,"column_end":40}},{"value":"/         if v == goal {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33384,"byte_end":33410,"line_start":131,"line_end":131,"column_start":1,"column_end":27}},{"value":"/             return Control::Break(v);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33411,"byte_end":33452,"line_start":132,"line_end":132,"column_start":1,"column_end":42}},{"value":"/         }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33453,"byte_end":33466,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33467,"byte_end":33476,"line_start":134,"line_end":134,"column_start":1,"column_end":10}},{"value":"/     Control::Continue","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33477,"byte_end":33502,"line_start":135,"line_end":135,"column_start":1,"column_end":26}},{"value":"/ });","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33503,"byte_end":33510,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33511,"byte_end":33514,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ let mut next = goal;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33515,"byte_end":33539,"line_start":138,"line_end":138,"column_start":1,"column_end":25}},{"value":"/ let mut path = vec![next];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33540,"byte_end":33570,"line_start":139,"line_end":139,"column_start":1,"column_end":31}},{"value":"/ while next != start {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33571,"byte_end":33596,"line_start":140,"line_end":140,"column_start":1,"column_end":26}},{"value":"/     let pred = predecessor[next.index()];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33597,"byte_end":33642,"line_start":141,"line_end":141,"column_start":1,"column_end":46}},{"value":"/     path.push(pred);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33643,"byte_end":33667,"line_start":142,"line_end":142,"column_start":1,"column_end":25}},{"value":"/     next = pred;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33668,"byte_end":33688,"line_start":143,"line_end":143,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33689,"byte_end":33694,"line_start":144,"line_end":144,"column_start":1,"column_end":6}},{"value":"/ path.reverse();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33695,"byte_end":33714,"line_start":145,"line_end":145,"column_start":1,"column_end":20}},{"value":"/ assert_eq!(&path, &[n(0), n(2), n(4), n(5)]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33715,"byte_end":33764,"line_start":146,"line_end":146,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":33765,"byte_end":33772,"line_start":147,"line_end":147,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36542,"byte_end":36545,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"Dfs","qualname":"::visit::traversal::Dfs","value":"Dfs { stack, discovered }","parent":null,"children":[{"krate":0,"index":2154},{"krate":0,"index":2155}],"decl_id":null,"docs":" Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in\n preorder (when they are first discovered).","sig":null,"attributes":[{"value":"/ Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35556,"byte_end":35630,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ preorder (when they are first discovered).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35631,"byte_end":35677,"line_start":8,"line_end":8,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35678,"byte_end":35681,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35682,"byte_end":35757,"line_start":10,"line_end":10,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35758,"byte_end":35770,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35771,"byte_end":35774,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Dfs` is not recursive.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35775,"byte_end":35802,"line_start":13,"line_end":13,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35803,"byte_end":35806,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ `Dfs` does not itself borrow the graph, and because of this you can run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35807,"byte_end":35882,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ a traversal over a graph while still retaining mutable access to it, if you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35883,"byte_end":35962,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ use it like the following example:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":35963,"byte_end":36001,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36002,"byte_end":36005,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36006,"byte_end":36013,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36014,"byte_end":36038,"line_start":20,"line_end":20,"column_start":1,"column_end":25}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36039,"byte_end":36068,"line_start":21,"line_end":21,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36069,"byte_end":36072,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_,()>::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36073,"byte_end":36114,"line_start":23,"line_end":23,"column_start":1,"column_end":42}},{"value":"/ let a = graph.add_node(0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36115,"byte_end":36145,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36146,"byte_end":36149,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut dfs = Dfs::new(&graph, a);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36150,"byte_end":36188,"line_start":26,"line_end":26,"column_start":1,"column_end":39}},{"value":"/ while let Some(nx) = dfs.next(&graph) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36189,"byte_end":36232,"line_start":27,"line_end":27,"column_start":1,"column_end":44}},{"value":"/     // we can access `graph` mutably here still","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36233,"byte_end":36284,"line_start":28,"line_end":28,"column_start":1,"column_end":52}},{"value":"/     graph[nx] += 1;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36285,"byte_end":36308,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36309,"byte_end":36314,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36315,"byte_end":36318,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(graph[a], 1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36319,"byte_end":36347,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36348,"byte_end":36355,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36356,"byte_end":36359,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ **Note:** The algorithm may not behave correctly if nodes are removed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36360,"byte_end":36433,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ during iteration. It may not necessarily visit added nodes or edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36434,"byte_end":36506,"line_start":36,"line_end":36,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36599,"byte_end":36604,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::Dfs::stack","value":"std::vec::Vec<N>","parent":{"krate":0,"index":2151},"children":[],"decl_id":null,"docs":" The stack of nodes to visit\n","sig":null,"attributes":[{"value":"/ The stack of nodes to visit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36559,"byte_end":36590,"line_start":39,"line_end":39,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36658,"byte_end":36668,"line_start":42,"line_end":42,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::Dfs::discovered","value":"VM","parent":{"krate":0,"index":2151},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36618,"byte_end":36649,"line_start":41,"line_end":41,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36890,"byte_end":36893,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Dfs<N, VM>>::new","value":"fn <G> (graph: G, start: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Dfs**, using the graph's visitor map, and put **start**\n in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new **Dfs**, using the graph's visitor map, and put **start**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36764,"byte_end":36838,"line_start":49,"line_end":49,"column_start":5,"column_end":79}},{"value":"/ in the stack of nodes to visit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36843,"byte_end":36878,"line_start":50,"line_end":50,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37139,"byte_end":37149,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Dfs<N, VM>>::from_parts","value":"fn (stack: Vec<N>, discovered: VM) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dfs` from a vector and a visit map\n","sig":null,"attributes":[{"value":"/ Create a `Dfs` from a vector and a visit map","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37079,"byte_end":37127,"line_start":59,"line_end":59,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37325,"byte_end":37330,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"reset","qualname":"<Dfs<N, VM>>::reset","value":"fn <G> (&mut self, graph: G) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the visit state\n","sig":null,"attributes":[{"value":"/ Clear the visit state","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37288,"byte_end":37313,"line_start":67,"line_end":67,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37584,"byte_end":37589,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"empty","qualname":"<Dfs<N, VM>>::empty","value":"fn <G> (graph: G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Dfs** using the graph's visitor map, and no stack.\n","sig":null,"attributes":[{"value":"/ Create a new **Dfs** using the graph's visitor map, and no stack.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37503,"byte_end":37572,"line_start":75,"line_end":75,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37900,"byte_end":37907,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"move_to","qualname":"<Dfs<N, VM>>::move_to","value":"fn (&mut self, start: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Keep the discovered map, but clear the visit stack and restart\n the dfs from a particular node.\n","sig":null,"attributes":[{"value":"/ Keep the discovered map, but clear the visit stack and restart","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37782,"byte_end":37848,"line_start":85,"line_end":85,"column_start":5,"column_end":71}},{"value":"/ the dfs from a particular node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":37853,"byte_end":37888,"line_start":86,"line_end":86,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38130,"byte_end":38134,"line_start":95,"line_end":95,"column_start":12,"column_end":16},"name":"next","qualname":"<Dfs<N, VM>>::next","value":"fn <G> (&mut self, graph: G) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the dfs, or **None** if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the dfs, or **None** if the traversal is done.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38044,"byte_end":38118,"line_start":94,"line_end":94,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38807,"byte_end":38819,"line_start":119,"line_end":119,"column_start":12,"column_end":24},"name":"DfsPostOrder","qualname":"::visit::traversal::DfsPostOrder","value":"DfsPostOrder { stack, discovered, finished }","parent":null,"children":[{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169}],"decl_id":null,"docs":" Visit nodes in a depth-first-search (DFS) emitting nodes in postorder\n (each node after all its descendants have been emitted).","sig":null,"attributes":[{"value":"/ Visit nodes in a depth-first-search (DFS) emitting nodes in postorder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38503,"byte_end":38576,"line_start":111,"line_end":111,"column_start":1,"column_end":74}},{"value":"/ (each node after all its descendants have been emitted).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38577,"byte_end":38637,"line_start":112,"line_end":112,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38638,"byte_end":38641,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ `DfsPostOrder` is not recursive.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38642,"byte_end":38678,"line_start":114,"line_end":114,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38679,"byte_end":38682,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38683,"byte_end":38758,"line_start":116,"line_end":116,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38759,"byte_end":38771,"line_start":117,"line_end":117,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":2167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38873,"byte_end":38878,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::DfsPostOrder::stack","value":"std::vec::Vec<N>","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The stack of nodes to visit\n","sig":null,"attributes":[{"value":"/ The stack of nodes to visit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38833,"byte_end":38864,"line_start":120,"line_end":120,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38932,"byte_end":38942,"line_start":123,"line_end":123,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::DfsPostOrder::discovered","value":"VM","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38892,"byte_end":38923,"line_start":122,"line_end":122,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38990,"byte_end":38998,"line_start":125,"line_end":125,"column_start":9,"column_end":17},"name":"finished","qualname":"::visit::traversal::DfsPostOrder::finished","value":"VM","parent":{"krate":0,"index":2164},"children":[],"decl_id":null,"docs":" The map of finished nodes\n","sig":null,"attributes":[{"value":"/ The map of finished nodes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":38952,"byte_end":38981,"line_start":124,"line_end":124,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39233,"byte_end":39236,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<DfsPostOrder<N, VM>>::new","value":"fn <G> (graph: G, start: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DfsPostOrder` using the graph's visitor map, and put\n `start` in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new `DfsPostOrder` using the graph's visitor map, and put","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39103,"byte_end":39173,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/ `start` in the stack of nodes to visit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39178,"byte_end":39221,"line_start":133,"line_end":133,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39511,"byte_end":39516,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"empty","qualname":"<DfsPostOrder<N, VM>>::empty","value":"fn <G> (graph: G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DfsPostOrder` using the graph's visitor map, and no stack.\n","sig":null,"attributes":[{"value":"/ Create a new `DfsPostOrder` using the graph's visitor map, and no stack.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39423,"byte_end":39499,"line_start":142,"line_end":142,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39796,"byte_end":39801,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"reset","qualname":"<DfsPostOrder<N, VM>>::reset","value":"fn <G> (&mut self, graph: G) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the visit state\n","sig":null,"attributes":[{"value":"/ Clear the visit state","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39759,"byte_end":39784,"line_start":153,"line_end":153,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":40150,"byte_end":40157,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"move_to","qualname":"<DfsPostOrder<N, VM>>::move_to","value":"fn (&mut self, start: N) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Keep the discovered and finished map, but clear the visit stack and restart\n the dfs from a particular node.\n","sig":null,"attributes":[{"value":"/ Keep the discovered and finished map, but clear the visit stack and restart","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":40019,"byte_end":40098,"line_start":162,"line_end":162,"column_start":5,"column_end":84}},{"value":"/ the dfs from a particular node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":40103,"byte_end":40138,"line_start":163,"line_end":163,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":40346,"byte_end":40350,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"next","qualname":"<DfsPostOrder<N, VM>>::next","value":"fn <G> (&mut self, graph: G) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the traversal, or `None` if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the traversal, or `None` if the traversal is done.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":40256,"byte_end":40334,"line_start":170,"line_end":170,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41985,"byte_end":41988,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"Bfs","qualname":"::visit::traversal::Bfs","value":"Bfs { stack, discovered }","parent":null,"children":[{"krate":0,"index":2181},{"krate":0,"index":2182}],"decl_id":null,"docs":" A breadth first search (BFS) of a graph.","sig":null,"attributes":[{"value":"/ A breadth first search (BFS) of a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41083,"byte_end":41127,"line_start":194,"line_end":194,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41128,"byte_end":41131,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ The traversal starts at a given node and only traverses nodes reachable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41132,"byte_end":41207,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/ from it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41208,"byte_end":41220,"line_start":197,"line_end":197,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41221,"byte_end":41224,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ `Bfs` is not recursive.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41225,"byte_end":41252,"line_start":199,"line_end":199,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41253,"byte_end":41256,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ `Bfs` does not itself borrow the graph, and because of this you can run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41257,"byte_end":41332,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/ a traversal over a graph while still retaining mutable access to it, if you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41333,"byte_end":41412,"line_start":202,"line_end":202,"column_start":1,"column_end":80}},{"value":"/ use it like the following example:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41413,"byte_end":41451,"line_start":203,"line_end":203,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41452,"byte_end":41455,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41456,"byte_end":41463,"line_start":205,"line_end":205,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41464,"byte_end":41488,"line_start":206,"line_end":206,"column_start":1,"column_end":25}},{"value":"/ use petgraph::visit::Bfs;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41489,"byte_end":41518,"line_start":207,"line_end":207,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41519,"byte_end":41522,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_,()>::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41523,"byte_end":41564,"line_start":209,"line_end":209,"column_start":1,"column_end":42}},{"value":"/ let a = graph.add_node(0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41565,"byte_end":41595,"line_start":210,"line_end":210,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41596,"byte_end":41599,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ let mut bfs = Bfs::new(&graph, a);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41600,"byte_end":41638,"line_start":212,"line_end":212,"column_start":1,"column_end":39}},{"value":"/ while let Some(nx) = bfs.next(&graph) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41639,"byte_end":41682,"line_start":213,"line_end":213,"column_start":1,"column_end":44}},{"value":"/     // we can access `graph` mutably here still","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41683,"byte_end":41734,"line_start":214,"line_end":214,"column_start":1,"column_end":52}},{"value":"/     graph[nx] += 1;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41735,"byte_end":41758,"line_start":215,"line_end":215,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41759,"byte_end":41764,"line_start":216,"line_end":216,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41765,"byte_end":41768,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(graph[a], 1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41769,"byte_end":41797,"line_start":218,"line_end":218,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41798,"byte_end":41805,"line_start":219,"line_end":219,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41806,"byte_end":41809,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ **Note:** The algorithm may not behave correctly if nodes are removed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41810,"byte_end":41883,"line_start":221,"line_end":221,"column_start":1,"column_end":74}},{"value":"/ during iteration. It may not necessarily visit added nodes or edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":41884,"byte_end":41956,"line_start":222,"line_end":222,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2181},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42042,"byte_end":42047,"line_start":226,"line_end":226,"column_start":9,"column_end":14},"name":"stack","qualname":"::visit::traversal::Bfs::stack","value":"std::collections::VecDeque<N>","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" The queue of nodes to visit\n","sig":null,"attributes":[{"value":"/ The queue of nodes to visit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42002,"byte_end":42033,"line_start":225,"line_end":225,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42106,"byte_end":42116,"line_start":228,"line_end":228,"column_start":9,"column_end":19},"name":"discovered","qualname":"::visit::traversal::Bfs::discovered","value":"VM","parent":{"krate":0,"index":2178},"children":[],"decl_id":null,"docs":" The map of discovered nodes\n","sig":null,"attributes":[{"value":"/ The map of discovered nodes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42066,"byte_end":42097,"line_start":227,"line_end":227,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42338,"byte_end":42341,"line_start":237,"line_end":237,"column_start":12,"column_end":15},"name":"new","qualname":"<Bfs<N, VM>>::new","value":"fn <G> (graph: G, start: N) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new **Bfs**, using the graph's visitor map, and put **start**\n in the stack of nodes to visit.\n","sig":null,"attributes":[{"value":"/ Create a new **Bfs**, using the graph's visitor map, and put **start**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42212,"byte_end":42286,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ in the stack of nodes to visit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42291,"byte_end":42326,"line_start":236,"line_end":236,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42773,"byte_end":42777,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"next","qualname":"<Bfs<N, VM>>::next","value":"fn <G> (&mut self, graph: G) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the bfs, or **None** if the traversal is done.\n","sig":null,"attributes":[{"value":"/ Return the next node in the bfs, or **None** if the traversal is done.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42687,"byte_end":42761,"line_start":250,"line_end":250,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2187},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43452,"byte_end":43456,"line_start":274,"line_end":274,"column_start":12,"column_end":16},"name":"Topo","qualname":"::visit::traversal::Topo","value":"Topo {  }","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2191}],"decl_id":null,"docs":" A topological order traversal for a graph.","sig":null,"attributes":[{"value":"/ A topological order traversal for a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43157,"byte_end":43203,"line_start":268,"line_end":268,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43204,"byte_end":43207,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ **Note** that `Topo` only visits nodes that are not part of cycles,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43208,"byte_end":43279,"line_start":270,"line_end":270,"column_start":1,"column_end":72}},{"value":"/ i.e. nodes in a true DAG. Use other visitors like `DfsPostOrder` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43280,"byte_end":43351,"line_start":271,"line_end":271,"column_start":1,"column_end":72}},{"value":"/ algorithms like kosaraju_scc to handle graphs with possible cycles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43352,"byte_end":43423,"line_start":272,"line_end":272,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43718,"byte_end":43721,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<Topo<N, VM>>::new","value":"fn <G> (graph: G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Topo`, using the graph's visitor map, and put all\n initial nodes in the to visit list.\n","sig":null,"attributes":[{"value":"/ Create a new `Topo`, using the graph's visitor map, and put all","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43595,"byte_end":43662,"line_start":283,"line_end":283,"column_start":5,"column_end":72}},{"value":"/ initial nodes in the to visit list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43667,"byte_end":43706,"line_start":284,"line_end":284,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":44723,"byte_end":44728,"line_start":314,"line_end":314,"column_start":12,"column_end":17},"name":"reset","qualname":"<Topo<N, VM>>::reset","value":"fn <G> (&mut self, graph: G) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear visited state, and put all initial nodes in the to visit list.\n","sig":null,"attributes":[{"value":"/ Clear visited state, and put all initial nodes in the to visit list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":44639,"byte_end":44711,"line_start":313,"line_end":313,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":45284,"byte_end":45288,"line_start":327,"line_end":327,"column_start":12,"column_end":16},"name":"next","qualname":"<Topo<N, VM>>::next","value":"fn <G> (&mut self, g: G) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Return the next node in the current topological order traversal, or\n `None` if the traversal is at the end.","sig":null,"attributes":[{"value":"/ Return the next node in the current topological order traversal, or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":44978,"byte_end":45049,"line_start":322,"line_end":322,"column_start":5,"column_end":76}},{"value":"/ `None` if the traversal is at the end.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":45054,"byte_end":45096,"line_start":323,"line_end":323,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":45101,"byte_end":45104,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ *Note:* The graph may not have a complete topological order, and the only","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":45109,"byte_end":45186,"line_start":325,"line_end":325,"column_start":5,"column_end":82}},{"value":"/ way to know is to run the whole traversal and make sure it visits every node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":45191,"byte_end":45272,"line_start":326,"line_end":326,"column_start":5,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46328,"byte_end":46334,"line_start":355,"line_end":355,"column_start":11,"column_end":17},"name":"Walker","qualname":"::visit::traversal::Walker","value":"Walker<Context>","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"decl_id":null,"docs":" A walker is a traversal state, but where part of the traversal\n information is supplied manually to each next call.","sig":null,"attributes":[{"value":"/ A walker is a traversal state, but where part of the traversal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46083,"byte_end":46149,"line_start":350,"line_end":350,"column_start":1,"column_end":67}},{"value":"/ information is supplied manually to each next call.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46150,"byte_end":46205,"line_start":351,"line_end":351,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46206,"byte_end":46209,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ This for example allows graph traversals that don't hold a borrow of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46210,"byte_end":46286,"line_start":353,"line_end":353,"column_start":1,"column_end":77}},{"value":"/ graph they are traversing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46287,"byte_end":46317,"line_start":354,"line_end":354,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46355,"byte_end":46359,"line_start":356,"line_end":356,"column_start":10,"column_end":14},"name":"Item","qualname":"::visit::traversal::Walker::Item","value":"type Item;","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46401,"byte_end":46410,"line_start":358,"line_end":358,"column_start":8,"column_end":17},"name":"walk_next","qualname":"::visit::traversal::Walker::walk_next","value":"fn (&mut self, context: Context) -> Option<Self::Item>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Advance to the next item\n","sig":null,"attributes":[{"value":"/ Advance to the next item","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46365,"byte_end":46393,"line_start":357,"line_end":357,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46537,"byte_end":46541,"line_start":361,"line_end":361,"column_start":8,"column_end":12},"name":"iter","qualname":"::visit::traversal::Walker::iter","value":"fn (self, context: Context) -> WalkerIter<Self, Context>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Create an iterator out of the walker and given `context`.\n","sig":null,"attributes":[{"value":"/ Create an iterator out of the walker and given `context`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46468,"byte_end":46529,"line_start":360,"line_end":360,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2196},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46844,"byte_end":46854,"line_start":374,"line_end":374,"column_start":12,"column_end":22},"name":"WalkerIter","qualname":"::visit::traversal::WalkerIter","value":"WalkerIter {  }","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2200}],"decl_id":null,"docs":" A walker and its context wrapped into an iterator.\n","sig":null,"attributes":[{"value":"/ A walker and its context wrapped into an iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46754,"byte_end":46808,"line_start":372,"line_end":372,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46982,"byte_end":46989,"line_start":383,"line_end":383,"column_start":12,"column_end":19},"name":"context","qualname":"<WalkerIter<W, C>>::context","value":"fn (&self) -> C","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47051,"byte_end":47060,"line_start":387,"line_end":387,"column_start":12,"column_end":21},"name":"inner_ref","qualname":"<WalkerIter<W, C>>::inner_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47115,"byte_end":47124,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"inner_mut","qualname":"<WalkerIter<W, C>>::inner_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2210},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9130,"byte_end":9139,"line_start":85,"line_end":85,"column_start":11,"column_end":20},"name":"GraphBase","qualname":"::visit::GraphBase","value":"GraphBase","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2212}],"decl_id":null,"docs":" Base graph trait: defines the associated node identifier and\n edge identifier types.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2211},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9319,"byte_end":9325,"line_start":91,"line_end":91,"column_start":10,"column_end":16},"name":"EdgeId","qualname":"::visit::GraphBase::EdgeId","value":"type EdgeId: Copy + PartialEq;","parent":{"krate":0,"index":2210},"children":[],"decl_id":null,"docs":" edge identifier\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2212},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9378,"byte_end":9384,"line_start":93,"line_end":93,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::GraphBase::NodeId","value":"type NodeId: Copy + PartialEq;","parent":{"krate":0,"index":2210},"children":[],"decl_id":null,"docs":" node identifier\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9543,"byte_end":9551,"line_start":101,"line_end":101,"column_start":11,"column_end":19},"name":"GraphRef","qualname":"::visit::GraphRef","value":"GraphRef: Copy + GraphBase","parent":null,"children":[],"decl_id":null,"docs":" A copyable reference to a graph.\n","sig":null,"attributes":[{"value":"/ A copyable reference to a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9496,"byte_end":9532,"line_start":100,"line_end":100,"column_start":1,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":2224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":10624,"byte_end":10637,"line_start":141,"line_end":141,"column_start":11,"column_end":24},"name":"IntoNeighbors","qualname":"::visit::IntoNeighbors","value":"IntoNeighbors: GraphRef","parent":null,"children":[{"krate":0,"index":2225},{"krate":0,"index":2226}],"decl_id":null,"docs":" Access to the neighbors of each node","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2225},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":10678,"byte_end":10687,"line_start":143,"line_end":143,"column_start":10,"column_end":19},"name":"Neighbors","qualname":"::visit::IntoNeighbors::Neighbors","value":"type Neighbors: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":2224},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":10800,"byte_end":10809,"line_start":146,"line_end":146,"column_start":8,"column_end":17},"name":"neighbors","qualname":"::visit::IntoNeighbors::neighbors","value":"fn (self: Self, a: Self::NodeId) -> Self::Neighbors","parent":{"krate":0,"index":2224},"children":[],"decl_id":null,"docs":" Return an iterator of the neighbors of node `a`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":11290,"byte_end":11311,"line_start":161,"line_end":161,"column_start":11,"column_end":32},"name":"IntoNeighborsDirected","qualname":"::visit::IntoNeighborsDirected","value":"IntoNeighborsDirected: IntoNeighbors","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2235}],"decl_id":null,"docs":" Access to the neighbors of each node, through incoming or outgoing edges.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":11357,"byte_end":11374,"line_start":163,"line_end":163,"column_start":10,"column_end":27},"name":"NeighborsDirected","qualname":"::visit::IntoNeighborsDirected::NeighborsDirected","value":"type NeighborsDirected: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":11430,"byte_end":11448,"line_start":165,"line_end":165,"column_start":8,"column_end":26},"name":"neighbors_directed","qualname":"::visit::IntoNeighborsDirected::neighbors_directed","value":"fn (self, n: Self::NodeId, d: Direction) -> Self::NeighborsDirected","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":13415,"byte_end":13424,"line_start":233,"line_end":233,"column_start":11,"column_end":20},"name":"IntoEdges","qualname":"::visit::IntoEdges","value":"IntoEdges: IntoEdgeReferences + IntoNeighbors","parent":null,"children":[{"krate":0,"index":2238},{"krate":0,"index":2239}],"decl_id":null,"docs":" Access to the edges of each node.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":13491,"byte_end":13496,"line_start":235,"line_end":235,"column_start":10,"column_end":15},"name":"Edges","qualname":"::visit::IntoEdges::Edges","value":"type Edges: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":2237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":13553,"byte_end":13558,"line_start":237,"line_end":237,"column_start":8,"column_end":13},"name":"edges","qualname":"::visit::IntoEdges::edges","value":"fn (self, a: Self::NodeId) -> Self::Edges","parent":{"krate":0,"index":2237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14199,"byte_end":14216,"line_start":258,"line_end":258,"column_start":11,"column_end":28},"name":"IntoEdgesDirected","qualname":"::visit::IntoEdgesDirected","value":"IntoEdgesDirected: IntoEdges + IntoNeighborsDirected","parent":null,"children":[{"krate":0,"index":2247},{"krate":0,"index":2248}],"decl_id":null,"docs":" Access to all edges of each node, in the specified direction.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14282,"byte_end":14295,"line_start":260,"line_end":260,"column_start":10,"column_end":23},"name":"EdgesDirected","qualname":"::visit::IntoEdgesDirected::EdgesDirected","value":"type EdgesDirected: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":2246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14352,"byte_end":14366,"line_start":262,"line_end":262,"column_start":8,"column_end":22},"name":"edges_directed","qualname":"::visit::IntoEdgesDirected::edges_directed","value":"fn (self, a: Self::NodeId, dir: Direction) -> Self::EdgesDirected","parent":{"krate":0,"index":2246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14556,"byte_end":14575,"line_start":270,"line_end":270,"column_start":11,"column_end":30},"name":"IntoNodeIdentifiers","qualname":"::visit::IntoNodeIdentifiers","value":"IntoNodeIdentifiers: GraphRef","parent":null,"children":[{"krate":0,"index":2256},{"krate":0,"index":2257}],"decl_id":null,"docs":" Access to the sequence of the graph’s `NodeId`s.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2256},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14616,"byte_end":14631,"line_start":272,"line_end":272,"column_start":10,"column_end":25},"name":"NodeIdentifiers","qualname":"::visit::IntoNodeIdentifiers::NodeIdentifiers","value":"type NodeIdentifiers: Iterator<Item=Self::NodeId>;","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2257},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14687,"byte_end":14703,"line_start":274,"line_end":274,"column_start":8,"column_end":24},"name":"node_identifiers","qualname":"::visit::IntoNodeIdentifiers::node_identifiers","value":"fn (self) -> Self::NodeIdentifiers","parent":{"krate":0,"index":2255},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":15901,"byte_end":15905,"line_start":324,"line_end":324,"column_start":11,"column_end":15},"name":"Data","qualname":"::visit::Data","value":"Data: GraphBase","parent":null,"children":[{"krate":0,"index":2270},{"krate":0,"index":2271}],"decl_id":null,"docs":" Define associated data for nodes and edges\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":15947,"byte_end":15957,"line_start":326,"line_end":326,"column_start":10,"column_end":20},"name":"NodeWeight","qualname":"::visit::Data::NodeWeight","value":"type NodeWeight;","parent":{"krate":0,"index":2269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2271},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":15968,"byte_end":15978,"line_start":327,"line_end":327,"column_start":10,"column_end":20},"name":"EdgeWeight","qualname":"::visit::Data::EdgeWeight","value":"type EdgeWeight;","parent":{"krate":0,"index":2269},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16176,"byte_end":16183,"line_start":337,"line_end":337,"column_start":11,"column_end":18},"name":"EdgeRef","qualname":"::visit::EdgeRef","value":"EdgeRef: Copy","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"decl_id":null,"docs":" An edge reference.","sig":null,"attributes":[{"value":"/ An edge reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16062,"byte_end":16084,"line_start":334,"line_end":334,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16085,"byte_end":16088,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Edge references are used by traits `IntoEdges` and `IntoEdgeReferences`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16089,"byte_end":16165,"line_start":336,"line_end":336,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":225},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16202,"byte_end":16208,"line_start":338,"line_end":338,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::EdgeRef::NodeId","value":"type NodeId;","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16219,"byte_end":16225,"line_start":339,"line_end":339,"column_start":10,"column_end":16},"name":"EdgeId","qualname":"::visit::EdgeRef::EdgeId","value":"type EdgeId;","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":227},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16236,"byte_end":16242,"line_start":340,"line_end":340,"column_start":10,"column_end":16},"name":"Weight","qualname":"::visit::EdgeRef::Weight","value":"type Weight;","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16288,"byte_end":16294,"line_start":342,"line_end":342,"column_start":8,"column_end":14},"name":"source","qualname":"::visit::EdgeRef::source","value":"fn (&self) -> Self::NodeId","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" The source node of the edge.\n","sig":null,"attributes":[{"value":"/ The source node of the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16248,"byte_end":16280,"line_start":341,"line_end":341,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16363,"byte_end":16369,"line_start":344,"line_end":344,"column_start":8,"column_end":14},"name":"target","qualname":"::visit::EdgeRef::target","value":"fn (&self) -> Self::NodeId","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" The target node of the edge.\n","sig":null,"attributes":[{"value":"/ The target node of the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16323,"byte_end":16355,"line_start":343,"line_end":343,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16448,"byte_end":16454,"line_start":346,"line_end":346,"column_start":8,"column_end":14},"name":"weight","qualname":"::visit::EdgeRef::weight","value":"fn (&self) -> &Self::Weight","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" A reference to the weight of the edge.\n","sig":null,"attributes":[{"value":"/ A reference to the weight of the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16398,"byte_end":16440,"line_start":345,"line_end":345,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16520,"byte_end":16522,"line_start":348,"line_end":348,"column_start":8,"column_end":10},"name":"id","qualname":"::visit::EdgeRef::id","value":"fn (&self) -> Self::EdgeId","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" The edge’s identifier.\n","sig":null,"attributes":[{"value":"/ The edge’s identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16484,"byte_end":16512,"line_start":347,"line_end":347,"column_start":5,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16875,"byte_end":16882,"line_start":365,"line_end":365,"column_start":11,"column_end":18},"name":"NodeRef","qualname":"::visit::NodeRef","value":"NodeRef: Copy","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247}],"decl_id":null,"docs":" A node reference.\n","sig":null,"attributes":[{"value":"/ A node reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16843,"byte_end":16864,"line_start":364,"line_end":364,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16901,"byte_end":16907,"line_start":366,"line_end":366,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::visit::NodeRef::NodeId","value":"type NodeId;","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":245},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16918,"byte_end":16924,"line_start":367,"line_end":367,"column_start":10,"column_end":16},"name":"Weight","qualname":"::visit::NodeRef::Weight","value":"type Weight;","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16933,"byte_end":16935,"line_start":368,"line_end":368,"column_start":8,"column_end":10},"name":"id","qualname":"::visit::NodeRef::id","value":"fn (&self) -> Self::NodeId","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16967,"byte_end":16973,"line_start":369,"line_end":369,"column_start":8,"column_end":14},"name":"weight","qualname":"::visit::NodeRef::weight","value":"fn (&self) -> &Self::Weight","parent":{"krate":0,"index":243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17080,"byte_end":17098,"line_start":374,"line_end":374,"column_start":11,"column_end":29},"name":"IntoNodeReferences","qualname":"::visit::IntoNodeReferences","value":"IntoNodeReferences: Data + IntoNodeIdentifiers","parent":null,"children":[{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2286}],"decl_id":null,"docs":" Access to the sequence of the graph’s nodes\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17157,"byte_end":17164,"line_start":376,"line_end":376,"column_start":10,"column_end":17},"name":"NodeRef","qualname":"::visit::IntoNodeReferences::NodeRef","value":"type NodeRef: NodeRef<NodeId=Self::NodeId, Weight=Self::NodeWeight>;","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2285},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17230,"byte_end":17244,"line_start":377,"line_end":377,"column_start":10,"column_end":24},"name":"NodeReferences","qualname":"::visit::IntoNodeReferences::NodeReferences","value":"type NodeReferences: Iterator<Item=Self::NodeRef>;","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17301,"byte_end":17316,"line_start":379,"line_end":379,"column_start":8,"column_end":23},"name":"node_references","qualname":"::visit::IntoNodeReferences::node_references","value":"fn (self) -> Self::NodeReferences","parent":{"krate":0,"index":2283},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17907,"byte_end":17925,"line_start":409,"line_end":409,"column_start":11,"column_end":29},"name":"IntoEdgeReferences","qualname":"::visit::IntoEdgeReferences","value":"IntoEdgeReferences: Data + GraphRef","parent":null,"children":[{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297}],"decl_id":null,"docs":" Access to the sequence of the graph’s edges\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17973,"byte_end":17980,"line_start":411,"line_end":411,"column_start":10,"column_end":17},"name":"EdgeRef","qualname":"::visit::IntoEdgeReferences::EdgeRef","value":"type EdgeRef: EdgeRef<NodeId=Self::NodeId, EdgeId=Self::EdgeId,\n                          Weight=Self::EdgeWeight>;","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18093,"byte_end":18107,"line_start":413,"line_end":413,"column_start":10,"column_end":24},"name":"EdgeReferences","qualname":"::visit::IntoEdgeReferences::EdgeReferences","value":"type EdgeReferences: Iterator<Item=Self::EdgeRef>;","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2297},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18164,"byte_end":18179,"line_start":415,"line_end":415,"column_start":8,"column_end":23},"name":"edge_references","qualname":"::visit::IntoEdgeReferences::edge_references","value":"fn (self) -> Self::EdgeReferences","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2305},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18524,"byte_end":18533,"line_start":432,"line_end":432,"column_start":11,"column_end":20},"name":"GraphProp","qualname":"::visit::GraphProp","value":"GraphProp: GraphBase","parent":null,"children":[{"krate":0,"index":2306},{"krate":0,"index":2307}],"decl_id":null,"docs":" Edge kind property (directed or undirected edges)\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2306},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18612,"byte_end":18620,"line_start":435,"line_end":435,"column_start":10,"column_end":18},"name":"EdgeType","qualname":"::visit::GraphProp::EdgeType","value":"type EdgeType: EdgeType;","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":" The kind edges in the graph.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2307},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18664,"byte_end":18675,"line_start":438,"line_end":438,"column_start":8,"column_end":19},"name":"is_directed","qualname":"::visit::GraphProp::is_directed","value":"fn (&self) -> bool","parent":{"krate":0,"index":2305},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":19648,"byte_end":19661,"line_start":484,"line_end":484,"column_start":15,"column_end":28},"name":"NodeIndexable","qualname":"::visit::NodeIndexable","value":"NodeIndexable: GraphBase","parent":null,"children":[{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316}],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":19825,"byte_end":19835,"line_start":488,"line_end":488,"column_start":12,"column_end":22},"name":"node_bound","qualname":"::visit::NodeIndexable::node_bound","value":"fn (self: &Self) -> usize","parent":{"krate":0,"index":2313},"children":[],"decl_id":null,"docs":" Return an upper bound of the node indices in the graph\n (suitable for the size of a bitmap).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":19915,"byte_end":19923,"line_start":490,"line_end":490,"column_start":12,"column_end":20},"name":"to_index","qualname":"::visit::NodeIndexable::to_index","value":"fn (self: &Self, a: Self::NodeId) -> usize","parent":{"krate":0,"index":2313},"children":[],"decl_id":null,"docs":" Convert `a` to an integer index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20015,"byte_end":20025,"line_start":492,"line_end":492,"column_start":12,"column_end":22},"name":"from_index","qualname":"::visit::NodeIndexable::from_index","value":"fn (self: &Self, i: usize) -> Self::NodeId","parent":{"krate":0,"index":2313},"children":[],"decl_id":null,"docs":" Convert `i` to a node index\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2324},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20174,"byte_end":20183,"line_start":500,"line_end":500,"column_start":11,"column_end":20},"name":"NodeCount","qualname":"::visit::NodeCount","value":"NodeCount: GraphBase","parent":null,"children":[{"krate":0,"index":2325}],"decl_id":null,"docs":" A graph with a known node count.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20223,"byte_end":20233,"line_start":502,"line_end":502,"column_start":8,"column_end":18},"name":"node_count","qualname":"::visit::NodeCount::node_count","value":"fn (self: &Self) -> usize","parent":{"krate":0,"index":2324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20489,"byte_end":20509,"line_start":513,"line_end":513,"column_start":11,"column_end":31},"name":"NodeCompactIndexable","qualname":"::visit::NodeCompactIndexable","value":"NodeCompactIndexable: NodeIndexable + NodeCount","parent":null,"children":[],"decl_id":null,"docs":" The graph’s `NodeId`s map to indices, in a range without holes.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":291},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21083,"byte_end":21091,"line_start":533,"line_end":533,"column_start":11,"column_end":19},"name":"VisitMap","qualname":"::visit::VisitMap","value":"VisitMap<N>","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" A mapping for storing the visited status for NodeId `N`.\n","sig":null,"attributes":[{"value":"/ A mapping for storing the visited status for NodeId `N`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21012,"byte_end":21072,"line_start":532,"line_end":532,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21210,"byte_end":21215,"line_start":537,"line_end":537,"column_start":8,"column_end":13},"name":"visit","qualname":"::visit::VisitMap::visit","value":"fn (&mut self, a: N) -> bool","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":" Mark `a` as visited.","sig":null,"attributes":[{"value":"/ Mark `a` as visited.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21101,"byte_end":21125,"line_start":534,"line_end":534,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21130,"byte_end":21133,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ Return **true** if this is the first visit, false otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21138,"byte_end":21202,"line_start":536,"line_end":536,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21302,"byte_end":21312,"line_start":540,"line_end":540,"column_start":8,"column_end":18},"name":"is_visited","qualname":"::visit::VisitMap::is_visited","value":"fn (&self, a: &N) -> bool","parent":{"krate":0,"index":291},"children":[],"decl_id":null,"docs":" Return whether `a` has been visited before.\n","sig":null,"attributes":[{"value":"/ Return whether `a` has been visited before.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21247,"byte_end":21294,"line_start":539,"line_end":539,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":2336},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22469,"byte_end":22478,"line_start":590,"line_end":590,"column_start":11,"column_end":20},"name":"Visitable","qualname":"::visit::Visitable","value":"Visitable: GraphBase","parent":null,"children":[{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339}],"decl_id":null,"docs":" A graph that can create a map that tracks the visited status of its nodes.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2337},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22552,"byte_end":22555,"line_start":593,"line_end":593,"column_start":10,"column_end":13},"name":"Map","qualname":"::visit::Visitable::Map","value":"type Map: VisitMap<Self::NodeId>;","parent":{"krate":0,"index":2336},"children":[],"decl_id":null,"docs":" The associated map type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22639,"byte_end":22648,"line_start":596,"line_end":596,"column_start":8,"column_end":17},"name":"visit_map","qualname":"::visit::Visitable::visit_map","value":"fn (self: &Self) -> Self::Map","parent":{"krate":0,"index":2336},"children":[],"decl_id":null,"docs":" Create a new visitor map\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22757,"byte_end":22766,"line_start":598,"line_end":598,"column_start":8,"column_end":17},"name":"reset_map","qualname":"::visit::Visitable::reset_map","value":"fn (self: &Self, map: &mut Self::Map) -> ()","parent":{"krate":0,"index":2336},"children":[],"decl_id":null,"docs":" Reset the visitor map (and resize to new size of graph if needed)\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":24832,"byte_end":24850,"line_start":681,"line_end":681,"column_start":11,"column_end":29},"name":"GetAdjacencyMatrix","qualname":"::visit::GetAdjacencyMatrix","value":"GetAdjacencyMatrix: GraphBase","parent":null,"children":[{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"decl_id":null,"docs":" Create or access the adjacency matrix of a graph.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":24937,"byte_end":24946,"line_start":684,"line_end":684,"column_start":10,"column_end":19},"name":"AdjMatrix","qualname":"::visit::GetAdjacencyMatrix::AdjMatrix","value":"type AdjMatrix;","parent":{"krate":0,"index":2347},"children":[],"decl_id":null,"docs":" The associated adjacency matrix type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":25009,"byte_end":25025,"line_start":687,"line_end":687,"column_start":8,"column_end":24},"name":"adjacency_matrix","qualname":"::visit::GetAdjacencyMatrix::adjacency_matrix","value":"fn (self: &Self) -> Self::AdjMatrix","parent":{"krate":0,"index":2347},"children":[],"decl_id":null,"docs":" Create the adjacency matrix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":25179,"byte_end":25190,"line_start":691,"line_end":691,"column_start":8,"column_end":19},"name":"is_adjacent","qualname":"::visit::GetAdjacencyMatrix::is_adjacent","value":"fn (self: &Self, matrix: &Self::AdjMatrix, a: Self::NodeId, b: Self::NodeId) -> bool","parent":{"krate":0,"index":2347},"children":[],"decl_id":null,"docs":" Return true if there is an edge from `a` to `b`, false otherwise.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":48738,"byte_end":48748,"line_start":26,"line_end":26,"column_start":11,"column_end":21},"name":"FilterNode","qualname":"::visit::filter::FilterNode","value":"FilterNode<N>","parent":null,"children":[{"krate":0,"index":353}],"decl_id":null,"docs":" A graph filter for nodes.\n","sig":null,"attributes":[{"value":"/ A graph filter for nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":48698,"byte_end":48727,"line_start":25,"line_end":25,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":48819,"byte_end":48831,"line_start":29,"line_end":29,"column_start":8,"column_end":20},"name":"include_node","qualname":"::visit::filter::FilterNode::include_node","value":"fn (&self, node: N) -> bool","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Return true to have the node be part of the graph\n","sig":null,"attributes":[{"value":"/ Return true to have the node be part of the graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":48758,"byte_end":48811,"line_start":28,"line_end":28,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49520,"byte_end":49532,"line_start":60,"line_end":60,"column_start":12,"column_end":24},"name":"NodeFiltered","qualname":"::visit::filter::NodeFiltered","value":"","parent":null,"children":[],"decl_id":null,"docs":" A node-filtering graph adaptor.\n","sig":null,"attributes":[{"value":"/ A node-filtering graph adaptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49443,"byte_end":49478,"line_start":58,"line_end":58,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49726,"byte_end":49733,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<NodeFiltered<G, F>>::from_fn","value":"fn (graph: G, filter: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `NodeFiltered` adaptor from the closure `filter`.\n","sig":null,"attributes":[{"value":"/ Create an `NodeFiltered` adaptor from the closure `filter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49651,"byte_end":49714,"line_start":66,"line_end":66,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":50393,"byte_end":50414,"line_start":92,"line_end":92,"column_start":12,"column_end":33},"name":"NodeFilteredNeighbors","qualname":"::visit::filter::NodeFilteredNeighbors","value":"NodeFilteredNeighbors {  }","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" A filtered neighbors iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":50347,"byte_end":50381,"line_start":91,"line_end":91,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":52290,"byte_end":52307,"line_start":160,"line_end":160,"column_start":12,"column_end":29},"name":"NodeFilteredNodes","qualname":"::visit::filter::NodeFilteredNodes","value":"NodeFilteredNodes {  }","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"decl_id":null,"docs":" A filtered node references iterator.\n","sig":null,"attributes":[{"value":"/ A filtered node references iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":52238,"byte_end":52278,"line_start":159,"line_end":159,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":434},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":53304,"byte_end":53330,"line_start":199,"line_end":199,"column_start":12,"column_end":38},"name":"NodeFilteredEdgeReferences","qualname":"::visit::filter::NodeFilteredEdgeReferences","value":"NodeFilteredEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":53262,"byte_end":53292,"line_start":198,"line_end":198,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":456},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":54283,"byte_end":54300,"line_start":236,"line_end":236,"column_start":12,"column_end":29},"name":"NodeFilteredEdges","qualname":"::visit::filter::NodeFilteredEdges","value":"NodeFilteredEdges {  }","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":54241,"byte_end":54271,"line_start":235,"line_end":235,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55598,"byte_end":55608,"line_start":288,"line_end":288,"column_start":11,"column_end":21},"name":"FilterEdge","qualname":"::visit::filter::FilterEdge","value":"FilterEdge<Edge>","parent":null,"children":[{"krate":0,"index":481}],"decl_id":null,"docs":" A graph filter for edges\n","sig":null,"attributes":[{"value":"/ A graph filter for edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55559,"byte_end":55587,"line_start":287,"line_end":287,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55682,"byte_end":55694,"line_start":290,"line_end":290,"column_start":8,"column_end":20},"name":"include_edge","qualname":"::visit::filter::FilterEdge::include_edge","value":"fn (&self, edge: Edge) -> bool","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":" Return true to have the edge be part of the graph\n","sig":null,"attributes":[{"value":"/ Return true to have the edge be part of the graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55621,"byte_end":55674,"line_start":289,"line_end":289,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2395},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56217,"byte_end":56229,"line_start":310,"line_end":310,"column_start":12,"column_end":24},"name":"EdgeFiltered","qualname":"::visit::filter::EdgeFiltered","value":"","parent":null,"children":[],"decl_id":null,"docs":" An edge-filtering graph adaptor.","sig":null,"attributes":[{"value":"/ An edge-filtering graph adaptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55858,"byte_end":55894,"line_start":301,"line_end":301,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55895,"byte_end":55898,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ The adaptor may filter out edges. The filter implements the trait","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55899,"byte_end":55968,"line_start":303,"line_end":303,"column_start":1,"column_end":70}},{"value":"/ `FilterEdge`. Closures of type `Fn(G::EdgeRef) -> bool` already","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55969,"byte_end":56036,"line_start":304,"line_end":304,"column_start":1,"column_end":68}},{"value":"/ implement this trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56037,"byte_end":56062,"line_start":305,"line_end":305,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56063,"byte_end":56066,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ The filter may use edge source, target, id, and weight to select whether to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56067,"byte_end":56146,"line_start":307,"line_end":307,"column_start":1,"column_end":80}},{"value":"/ include the edge or not.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56147,"byte_end":56175,"line_start":308,"line_end":308,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56433,"byte_end":56440,"line_start":317,"line_end":317,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<EdgeFiltered<G, F>>::from_fn","value":"fn (graph: G, filter: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EdgeFiltered` adaptor from the closure `filter`.\n","sig":null,"attributes":[{"value":"/ Create an `EdgeFiltered` adaptor from the closure `filter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56358,"byte_end":56421,"line_start":316,"line_end":316,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":57030,"byte_end":57051,"line_start":341,"line_end":341,"column_start":12,"column_end":33},"name":"EdgeFilteredNeighbors","qualname":"::visit::filter::EdgeFilteredNeighbors","value":"EdgeFilteredNeighbors {  }","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"decl_id":null,"docs":" A filtered neighbors iterator.\n","sig":null,"attributes":[{"value":"/ A filtered neighbors iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56984,"byte_end":57018,"line_start":340,"line_end":340,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":527},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":58370,"byte_end":58387,"line_start":393,"line_end":393,"column_start":12,"column_end":29},"name":"EdgeFilteredEdges","qualname":"::visit::filter::EdgeFilteredEdges","value":"EdgeFilteredEdges {  }","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"decl_id":null,"docs":" A filtered edges iterator.\n","sig":null,"attributes":[{"value":"/ A filtered edges iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":58328,"byte_end":58358,"line_start":392,"line_end":392,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":59844,"byte_end":59852,"line_start":28,"line_end":28,"column_start":12,"column_end":20},"name":"Reversed","qualname":"::visit::reversed::Reversed","value":"","parent":null,"children":[],"decl_id":null,"docs":" An edge-reversing graph adaptor.","sig":null,"attributes":[{"value":"/ An edge-reversing graph adaptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":59703,"byte_end":59739,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":59740,"byte_end":59743,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All edges have the opposite direction with `Reversed`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":59744,"byte_end":59802,"line_start":26,"line_end":26,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60905,"byte_end":60926,"line_start":74,"line_end":74,"column_start":12,"column_end":33},"name":"ReversedEdgeReference","qualname":"::visit::reversed::ReversedEdgeReference","value":"","parent":null,"children":[],"decl_id":null,"docs":" A reversed edge reference\n","sig":null,"attributes":[{"value":"/ A reversed edge reference","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60834,"byte_end":60863,"line_start":72,"line_end":72,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":595},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":61788,"byte_end":61810,"line_start":110,"line_end":110,"column_start":12,"column_end":34},"name":"ReversedEdgeReferences","qualname":"::visit::reversed::ReversedEdgeReferences","value":"ReversedEdgeReferences {  }","parent":null,"children":[{"krate":0,"index":597}],"decl_id":null,"docs":" A reversed edge references iterator.\n","sig":null,"attributes":[{"value":"/ A reversed edge references iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":61736,"byte_end":61776,"line_start":109,"line_end":109,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":603},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"data","qualname":"::data","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":613},{"krate":0,"index":2507},{"krate":0,"index":2512},{"krate":0,"index":2517},{"krate":0,"index":2521},{"krate":0,"index":2522},{"krate":0,"index":2525},{"krate":0,"index":2530},{"krate":0,"index":614},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":627},{"krate":0,"index":634},{"krate":0,"index":641},{"krate":0,"index":649},{"krate":0,"index":2534},{"krate":0,"index":2562},{"krate":0,"index":2558},{"krate":0,"index":2550},{"krate":0,"index":2553},{"krate":0,"index":2543},{"krate":0,"index":2546},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":662},{"krate":0,"index":669},{"krate":0,"index":674},{"krate":0,"index":678},{"krate":0,"index":685}],"decl_id":null,"docs":" Graph traits for associated data and graph construction.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1195,"byte_end":1207,"line_start":45,"line_end":45,"column_start":1,"column_end":13}},{"value":"! Graph traits for associated data and graph construction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":62517,"byte_end":62577,"line_start":1,"line_end":1,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":2504},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":62926,"byte_end":62933,"line_start":22,"line_end":22,"column_start":11,"column_end":18},"name":"DataMap","qualname":"::data::DataMap","value":"DataMap: Data","parent":null,"children":[{"krate":0,"index":2505},{"krate":0,"index":2506}],"decl_id":null,"docs":" Access node and edge weights (associated data).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":62968,"byte_end":62979,"line_start":24,"line_end":24,"column_start":8,"column_end":19},"name":"node_weight","qualname":"::data::DataMap::node_weight","value":"fn (self: &Self, id: Self::NodeId) -> Option<&Self::NodeWeight>","parent":{"krate":0,"index":2504},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2506},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63048,"byte_end":63059,"line_start":25,"line_end":25,"column_start":8,"column_end":19},"name":"edge_weight","qualname":"::data::DataMap::edge_weight","value":"fn (self: &Self, id: Self::EdgeId) -> Option<&Self::EdgeWeight>","parent":{"krate":0,"index":2504},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63395,"byte_end":63405,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"DataMapMut","qualname":"::data::DataMapMut","value":"DataMapMut: DataMap","parent":null,"children":[{"krate":0,"index":2523},{"krate":0,"index":2524}],"decl_id":null,"docs":" Access node and edge weights mutably.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63443,"byte_end":63458,"line_start":41,"line_end":41,"column_start":8,"column_end":23},"name":"node_weight_mut","qualname":"::data::DataMapMut::node_weight_mut","value":"fn (self: &mut Self, id: Self::NodeId) -> Option<&mut Self::NodeWeight>","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63535,"byte_end":63550,"line_start":42,"line_end":42,"column_start":8,"column_end":23},"name":"edge_weight_mut","qualname":"::data::DataMapMut::edge_weight_mut","value":"fn (self: &mut Self, id: Self::EdgeId) -> Option<&mut Self::EdgeWeight>","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63820,"byte_end":63825,"line_start":50,"line_end":50,"column_start":11,"column_end":16},"name":"Build","qualname":"::data::Build","value":"Build: Data + NodeCount","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617}],"decl_id":null,"docs":" A graph that can be extended with further nodes and edges\n","sig":null,"attributes":[{"value":"/ A graph that can be extended with further nodes and edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63748,"byte_end":63809,"line_start":49,"line_end":49,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63854,"byte_end":63862,"line_start":51,"line_end":51,"column_start":8,"column_end":16},"name":"add_node","qualname":"::data::Build::add_node","value":"fn (&mut self, weight: Self::NodeWeight) -> Self::NodeId","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64046,"byte_end":64054,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"add_edge","qualname":"::data::Build::add_edge","value":"fn (&mut self, a: Self::NodeId, b: Self::NodeId, weight: Self::EdgeWeight) -> Option<Self::EdgeId>","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Add a new edge. If parallel edges (duplicate) are not allowed and\n the edge already exists, return `None`.\n","sig":null,"attributes":[{"value":"/ Add a new edge. If parallel edges (duplicate) are not allowed and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63921,"byte_end":63990,"line_start":52,"line_end":52,"column_start":5,"column_end":74}},{"value":"/ the edge already exists, return `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63995,"byte_end":64038,"line_start":53,"line_end":53,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64350,"byte_end":64361,"line_start":62,"line_end":62,"column_start":8,"column_end":19},"name":"update_edge","qualname":"::data::Build::update_edge","value":"fn (&mut self, a: Self::NodeId, b: Self::NodeId, weight: Self::EdgeWeight) -> Self::EdgeId","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Add or update the edge from `a` to `b`. Return the id of the affected\n edge.\n","sig":null,"attributes":[{"value":"/ Add or update the edge from `a` to `b`. Return the id of the affected","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64255,"byte_end":64328,"line_start":60,"line_end":60,"column_start":5,"column_end":78}},{"value":"/ edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64333,"byte_end":64342,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":618},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64552,"byte_end":64558,"line_start":69,"line_end":69,"column_start":11,"column_end":17},"name":"Create","qualname":"::data::Create","value":"Create: Build + Default","parent":null,"children":[{"krate":0,"index":619}],"decl_id":null,"docs":" A graph that can be created\n","sig":null,"attributes":[{"value":"/ A graph that can be created","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64510,"byte_end":64541,"line_start":68,"line_end":68,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64586,"byte_end":64599,"line_start":70,"line_end":70,"column_start":8,"column_end":21},"name":"with_capacity","qualname":"::data::Create::with_capacity","value":"fn (nodes: usize, edges: usize) -> Self","parent":{"krate":0,"index":618},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2537},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69383,"byte_end":69387,"line_start":246,"line_end":246,"column_start":5,"column_end":9},"name":"Node","qualname":"::data::Element::Node","value":"Element::Node { weight }","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" A graph node.\n","sig":null,"attributes":[{"value":"/ A graph node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69361,"byte_end":69378,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"StructVariant","id":{"krate":0,"index":2539},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69442,"byte_end":69446,"line_start":250,"line_end":250,"column_start":5,"column_end":9},"name":"Edge","qualname":"::data::Element::Edge","value":"Element::Edge { source, target, weight }","parent":{"krate":0,"index":2534},"children":[],"decl_id":null,"docs":" A graph edge.\n","sig":null,"attributes":[{"value":"/ A graph edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69420,"byte_end":69437,"line_start":249,"line_end":249,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":2534},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69341,"byte_end":69348,"line_start":244,"line_end":244,"column_start":10,"column_end":17},"name":"Element","qualname":"::data::Element","value":"Element::{Node, Edge}","parent":null,"children":[{"krate":0,"index":2537},{"krate":0,"index":2539}],"decl_id":null,"docs":" A graph element.","sig":null,"attributes":[{"value":"/ A graph element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69047,"byte_end":69067,"line_start":238,"line_end":238,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69068,"byte_end":69071,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ A sequence of Elements, for example an iterator, is laid out as follows:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69072,"byte_end":69148,"line_start":240,"line_end":240,"column_start":1,"column_end":77}},{"value":"/ Nodes are implicitly given the index of their appearance in the sequence.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69149,"byte_end":69226,"line_start":241,"line_end":241,"column_start":1,"column_end":78}},{"value":"/ The edges’ source and target fields refer to these indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69227,"byte_end":69292,"line_start":242,"line_end":242,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69582,"byte_end":69594,"line_start":258,"line_end":258,"column_start":11,"column_end":23},"name":"FromElements","qualname":"::data::FromElements","value":"FromElements: Create","parent":null,"children":[{"krate":0,"index":656}],"decl_id":null,"docs":" Create a graph from an iterator of elements.\n","sig":null,"attributes":[{"value":"/ Create a graph from an iterator of elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69523,"byte_end":69571,"line_start":257,"line_end":257,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69613,"byte_end":69626,"line_start":259,"line_end":259,"column_start":8,"column_end":21},"name":"from_elements","qualname":"::data::FromElements::from_elements","value":"fn <I> (iterable: I) -> Self","parent":{"krate":0,"index":655},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":71954,"byte_end":71969,"line_start":341,"line_end":341,"column_start":11,"column_end":26},"name":"ElementIterator","qualname":"::data::ElementIterator","value":"ElementIterator<N, E>: Iterator<Item = Element<N, E>>","parent":null,"children":[{"krate":0,"index":672}],"decl_id":null,"docs":" Iterator adaptors for iterators of `Element`.\n","sig":null,"attributes":[{"value":"/ Iterator adaptors for iterators of `Element`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":71894,"byte_end":71943,"line_start":340,"line_end":340,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72520,"byte_end":72535,"line_start":351,"line_end":351,"column_start":8,"column_end":23},"name":"filter_elements","qualname":"::data::ElementIterator::filter_elements","value":"fn <F> (self, f: F) -> FilterElements<Self, F>","parent":{"krate":0,"index":669},"children":[],"decl_id":null,"docs":" Create an iterator adaptor that filters graph elements.","sig":null,"attributes":[{"value":"/ Create an iterator adaptor that filters graph elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72013,"byte_end":72072,"line_start":342,"line_end":342,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72077,"byte_end":72080,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ The function `f` is called with each element and if its return value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72085,"byte_end":72157,"line_start":344,"line_end":344,"column_start":5,"column_end":77}},{"value":"/ is `true` the element is accepted and if `false` it is removed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72162,"byte_end":72229,"line_start":345,"line_end":345,"column_start":5,"column_end":72}},{"value":"/ `f` is called with mutable references to the node and edge weights,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72234,"byte_end":72305,"line_start":346,"line_end":346,"column_start":5,"column_end":76}},{"value":"/ so that they can be mutated (but the edge endpoints can not).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72310,"byte_end":72375,"line_start":347,"line_end":347,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72380,"byte_end":72383,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ This filter adapts the edge source and target indices in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72388,"byte_end":72452,"line_start":349,"line_end":349,"column_start":5,"column_end":69}},{"value":"/ stream so that they are correct after the removals.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72457,"byte_end":72512,"line_start":350,"line_end":350,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":678},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":73086,"byte_end":73100,"line_start":372,"line_end":372,"column_start":12,"column_end":26},"name":"FilterElements","qualname":"::data::FilterElements","value":"FilterElements {  }","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684}],"decl_id":null,"docs":" An iterator that filters graph elements.","sig":null,"attributes":[{"value":"/ An iterator that filters graph elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72907,"byte_end":72951,"line_start":367,"line_end":367,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72952,"byte_end":72955,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_elements()`][1] for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72956,"byte_end":73011,"line_start":369,"line_end":369,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":73012,"byte_end":73015,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ [1]: trait.ElementIterator.html#method.filter_elements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":73016,"byte_end":73074,"line_start":371,"line_end":371,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":692},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"algo","qualname":"::algo","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":782},{"krate":0,"index":2577},{"krate":0,"index":2585},{"krate":0,"index":2581},{"krate":0,"index":784},{"krate":0,"index":789},{"krate":0,"index":793},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":809},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":822},{"krate":0,"index":2609},{"krate":0,"index":2622},{"krate":0,"index":2619},{"krate":0,"index":2613},{"krate":0,"index":2615},{"krate":0,"index":826},{"krate":0,"index":2625},{"krate":0,"index":2634},{"krate":0,"index":2632},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843}],"decl_id":null,"docs":" Graph algorithms.","sig":null,"attributes":[{"value":"! Graph algorithms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":75277,"byte_end":75298,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":75299,"byte_end":75302,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! It is a goal to gradually migrate the algorithms to be based on graph traits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":75303,"byte_end":75383,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"! so that they are generally applicable. For now, some of these still require","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":75384,"byte_end":75463,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"! the `Graph` type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":75464,"byte_end":75485,"line_start":5,"line_end":5,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":693},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dominators","qualname":"::algo::dominators","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":2566},{"krate":0,"index":2573},{"krate":0,"index":2570},{"krate":0,"index":704},{"krate":0,"index":710},{"krate":0,"index":715},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":733}],"decl_id":null,"docs":" Compute dominators of a control-flow graph.","sig":null,"attributes":[{"value":"! Compute dominators of a control-flow graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94244,"byte_end":94291,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94292,"byte_end":94295,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # The Dominance Relation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94296,"byte_end":94324,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94325,"byte_end":94328,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! In a directed graph with a root node **R**, a node **A** is said to *dominate* a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94329,"byte_end":94413,"line_start":5,"line_end":5,"column_start":1,"column_end":85}},{"value":"! node **B** iff every path from **R** to **B** contains **A**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94414,"byte_end":94479,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94480,"byte_end":94483,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The node **A** is said to *strictly dominate* the node **B** iff **A** dominates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94484,"byte_end":94568,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"! **B** and **A ≠ B**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94569,"byte_end":94595,"line_start":9,"line_end":9,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94596,"byte_end":94599,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! The node **A** is said to be the *immediate dominator* of a node **B** iff it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94600,"byte_end":94681,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"! strictly dominates **B** and there does not exist any node **C** where **A**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94682,"byte_end":94762,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"! dominates **C** and **C** dominates **B**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94763,"byte_end":94809,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2566},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95035,"byte_end":95045,"line_start":22,"line_end":22,"column_start":12,"column_end":22},"name":"Dominators","qualname":"::algo::dominators::Dominators","value":"Dominators {  }","parent":null,"children":[{"krate":0,"index":2568},{"krate":0,"index":2569}],"decl_id":null,"docs":" The dominance relation for some graph and root.\n","sig":null,"attributes":[{"value":"/ The dominance relation for some graph and root.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":94948,"byte_end":94999,"line_start":20,"line_end":20,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95264,"byte_end":95268,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"root","qualname":"<Dominators<N>>::root","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Get the root node used to construct these dominance relations.\n","sig":null,"attributes":[{"value":"/ Get the root node used to construct these dominance relations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95186,"byte_end":95252,"line_start":32,"line_end":32,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95488,"byte_end":95507,"line_start":41,"line_end":41,"column_start":12,"column_end":31},"name":"immediate_dominator","qualname":"<Dominators<N>>::immediate_dominator","value":"fn (&self, node: N) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Get the immediate dominator of the given node.","sig":null,"attributes":[{"value":"/ Get the immediate dominator of the given node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95312,"byte_end":95362,"line_start":37,"line_end":37,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95367,"byte_end":95370,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Returns `None` for any node that is not reachable from the root, and for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95375,"byte_end":95451,"line_start":39,"line_end":39,"column_start":5,"column_end":81}},{"value":"/ the root itself.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95456,"byte_end":95476,"line_start":40,"line_end":40,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95841,"byte_end":95858,"line_start":53,"line_end":53,"column_start":12,"column_end":29},"name":"strict_dominators","qualname":"<Dominators<N>>::strict_dominators","value":"fn (&self, node: N) -> Option<DominatorsIter<N>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the given node's that strict dominators.","sig":null,"attributes":[{"value":"/ Iterate over the given node's that strict dominators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95673,"byte_end":95730,"line_start":49,"line_end":49,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95735,"byte_end":95738,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ If the given node is not reachable from the root, then `None` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95743,"byte_end":95811,"line_start":51,"line_end":51,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95816,"byte_end":95829,"line_start":52,"line_end":52,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96352,"byte_end":96362,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"dominators","qualname":"<Dominators<N>>::dominators","value":"fn (&self, node: N) -> Option<DominatorsIter<N>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all of the given node's dominators (including the given\n node itself).","sig":null,"attributes":[{"value":"/ Iterate over all of the given node's dominators (including the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96147,"byte_end":96219,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/ node itself).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96224,"byte_end":96241,"line_start":65,"line_end":65,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96246,"byte_end":96249,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ If the given node is not reachable from the root, then `None` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96254,"byte_end":96322,"line_start":67,"line_end":67,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96327,"byte_end":96340,"line_start":68,"line_end":68,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96678,"byte_end":96692,"line_start":82,"line_end":82,"column_start":12,"column_end":26},"name":"DominatorsIter","qualname":"::algo::dominators::DominatorsIter","value":"DominatorsIter {  }","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714}],"decl_id":null,"docs":" Iterator for a node's dominators.\n","sig":null,"attributes":[{"value":"/ Iterator for a node's dominators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96629,"byte_end":96666,"line_start":81,"line_end":81,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97718,"byte_end":97729,"line_start":116,"line_end":116,"column_start":8,"column_end":19},"name":"simple_fast","qualname":"::algo::dominators::simple_fast","value":"fn <G> (graph: G, root: G::NodeId) -> Dominators<G::NodeId>","parent":null,"children":[],"decl_id":null,"docs":" This is an implementation of the engineered [\"Simple, Fast Dominance\n Algorithm\"][0] discovered by Cooper et al.","sig":null,"attributes":[{"value":"/ This is an implementation of the engineered [\"Simple, Fast Dominance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97261,"byte_end":97333,"line_start":107,"line_end":107,"column_start":1,"column_end":73}},{"value":"/ Algorithm\"][0] discovered by Cooper et al.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97334,"byte_end":97380,"line_start":108,"line_end":108,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97381,"byte_end":97384,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ This algorithm is **O(|V|²)**, and therefore has slower theoretical running time","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97385,"byte_end":97470,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/ than the Lenguaer-Tarjan algorithm (which is **O(|E| log |V|)**. However,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97471,"byte_end":97548,"line_start":111,"line_end":111,"column_start":1,"column_end":78}},{"value":"/ Cooper et al found it to be faster in practice on control flow graphs of up","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97549,"byte_end":97628,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ to ~30,000 vertices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97629,"byte_end":97653,"line_start":113,"line_end":113,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97654,"byte_end":97657,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ [0]: http://www.cs.rice.edu/~keith/EMBED/dom.pdf","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":97658,"byte_end":97710,"line_start":115,"line_end":115,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":769},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76340,"byte_end":76360,"line_start":52,"line_end":52,"column_start":8,"column_end":28},"name":"connected_components","qualname":"::algo::connected_components","value":"fn <G> (g: G) -> usize","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Return the number of connected components of the graph.","sig":null,"attributes":[{"value":"/ [Generic] Return the number of connected components of the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76190,"byte_end":76259,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76260,"byte_end":76263,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ For a directed graph, this is the *weakly* connected components.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76264,"byte_end":76332,"line_start":51,"line_end":51,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76934,"byte_end":76954,"line_start":72,"line_end":72,"column_start":8,"column_end":28},"name":"is_cyclic_undirected","qualname":"::algo::is_cyclic_undirected","value":"fn <G> (g: G) -> bool","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Return `true` if the input graph contains a cycle.","sig":null,"attributes":[{"value":"/ [Generic] Return `true` if the input graph contains a cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76806,"byte_end":76870,"line_start":69,"line_end":69,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76871,"byte_end":76874,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Always treats the input graph as if undirected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":76875,"byte_end":76926,"line_start":71,"line_end":71,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77918,"byte_end":77926,"line_start":100,"line_end":100,"column_start":8,"column_end":16},"name":"toposort","qualname":"::algo::toposort","value":"fn <G> (g: G, space: Option<&mut DfsSpace<G::NodeId, G::Map>>) -> Result<Vec<G::NodeId>, Cycle<G::NodeId>>","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Perform a topological sort of a directed graph.","sig":null,"attributes":[{"value":"/ [Generic] Perform a topological sort of a directed graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77397,"byte_end":77458,"line_start":89,"line_end":89,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77459,"byte_end":77462,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ If the graph was acyclic, return a vector of nodes in topological order:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77463,"byte_end":77539,"line_start":91,"line_end":91,"column_start":1,"column_end":77}},{"value":"/ each node is ordered before its successors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77540,"byte_end":77587,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ Otherwise, it will return a `Cycle` error. Self loops are also cycles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77588,"byte_end":77662,"line_start":93,"line_end":93,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77663,"byte_end":77666,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ To handle graphs with cycles, use the scc algorithms or `DfsPostOrder`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77667,"byte_end":77741,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/ instead of this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77742,"byte_end":77771,"line_start":96,"line_end":96,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77772,"byte_end":77775,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ If `space` is not `None`, it is used instead of creating a new workspace for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77776,"byte_end":77856,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"/ graph traversal. The implementation is iterative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":77857,"byte_end":77910,"line_start":99,"line_end":99,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":79838,"byte_end":79856,"line_start":158,"line_end":158,"column_start":8,"column_end":26},"name":"is_cyclic_directed","qualname":"::algo::is_cyclic_directed","value":"fn <G> (g: G) -> bool","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Return `true` if the input directed graph contains a cycle.","sig":null,"attributes":[{"value":"/ [Generic] Return `true` if the input directed graph contains a cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":79667,"byte_end":79740,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":79741,"byte_end":79744,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This implementation is recursive; use `toposort` if an alternative is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":79745,"byte_end":79818,"line_start":156,"line_end":156,"column_start":1,"column_end":74}},{"value":"/ needed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":79819,"byte_end":79830,"line_start":157,"line_end":157,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2577},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":80324,"byte_end":80332,"line_start":175,"line_end":175,"column_start":12,"column_end":20},"name":"DfsSpace","qualname":"::algo::DfsSpace","value":"DfsSpace {  }","parent":null,"children":[{"krate":0,"index":2580}],"decl_id":null,"docs":" Workspace for a graph traversal.\n","sig":null,"attributes":[{"value":"/ Workspace for a graph traversal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":80252,"byte_end":80288,"line_start":173,"line_end":173,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":80465,"byte_end":80468,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<DfsSpace<N, VM>>::new","value":"fn <G> (g: G) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81513,"byte_end":81532,"line_start":224,"line_end":224,"column_start":8,"column_end":27},"name":"has_path_connecting","qualname":"::algo::has_path_connecting","value":"fn <G> (g: G, from: G::NodeId, to: G::NodeId, space: Option<&mut DfsSpace<G::NodeId, G::Map>>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Check if there exists a path starting at `from` and reaching `to`.","sig":null,"attributes":[{"value":"/ [Generic] Check if there exists a path starting at `from` and reaching `to`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81253,"byte_end":81333,"line_start":218,"line_end":218,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81334,"byte_end":81337,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ If `from` and `to` are equal, this function returns true.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81338,"byte_end":81399,"line_start":220,"line_end":220,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81400,"byte_end":81403,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ If `space` is not `None`, it is used instead of creating a new workspace for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81404,"byte_end":81484,"line_start":222,"line_end":222,"column_start":1,"column_end":81}},{"value":"/ graph traversal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81485,"byte_end":81505,"line_start":223,"line_end":223,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82017,"byte_end":82020,"line_start":243,"line_end":243,"column_start":8,"column_end":11},"name":"scc","qualname":"::algo::scc","value":"fn <G> (g: G) -> Vec<Vec<G::NodeId>>","parent":null,"children":[],"decl_id":null,"docs":" Renamed to `kosaraju_scc`.\n","sig":null,"attributes":[{"value":"/ Renamed to `kosaraju_scc`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81931,"byte_end":81961,"line_start":241,"line_end":241,"column_start":1,"column_end":31}},{"value":"deprecated(note = \"renamed to kosaraju_scc\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":81962,"byte_end":82009,"line_start":242,"line_end":242,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82685,"byte_end":82697,"line_start":260,"line_end":260,"column_start":8,"column_end":20},"name":"kosaraju_scc","qualname":"::algo::kosaraju_scc","value":"fn <G> (g: G) -> Vec<Vec<G::NodeId>>","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Compute the *strongly connected components* using [Kosaraju's algorithm][1].","sig":null,"attributes":[{"value":"/ [Generic] Compute the *strongly connected components* using [Kosaraju's algorithm][1].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82148,"byte_end":82238,"line_start":249,"line_end":249,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82239,"byte_end":82242,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82243,"byte_end":82304,"line_start":251,"line_end":251,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82305,"byte_end":82308,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ Return a vector where each element is a strongly connected component (scc).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82309,"byte_end":82388,"line_start":253,"line_end":253,"column_start":1,"column_end":80}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82389,"byte_end":82461,"line_start":254,"line_end":254,"column_start":1,"column_end":73}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82462,"byte_end":82521,"line_start":255,"line_end":255,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82522,"byte_end":82525,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82526,"byte_end":82600,"line_start":257,"line_end":257,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82601,"byte_end":82604,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This implementation is iterative and does two passes over the nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":82605,"byte_end":82677,"line_start":259,"line_end":259,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":804},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":84331,"byte_end":84341,"line_start":311,"line_end":311,"column_start":8,"column_end":18},"name":"tarjan_scc","qualname":"::algo::tarjan_scc","value":"fn <G> (g: G) -> Vec<Vec<G::NodeId>>","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Compute the *strongly connected components* using [Tarjan's algorithm][1].","sig":null,"attributes":[{"value":"/ [Generic] Compute the *strongly connected components* using [Tarjan's algorithm][1].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":83770,"byte_end":83858,"line_start":300,"line_end":300,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":83859,"byte_end":83862,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":83863,"byte_end":83952,"line_start":302,"line_end":302,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":83953,"byte_end":83956,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ Return a vector where each element is a strongly connected component (scc).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":83957,"byte_end":84036,"line_start":304,"line_end":304,"column_start":1,"column_end":80}},{"value":"/ The order of node ids within each scc is arbitrary, but the order of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":84037,"byte_end":84109,"line_start":305,"line_end":305,"column_start":1,"column_end":73}},{"value":"/ the sccs is their postorder (reverse topological sort).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":84110,"byte_end":84169,"line_start":306,"line_end":306,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":84170,"byte_end":84173,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ For an undirected graph, the sccs are simply the connected components.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":84174,"byte_end":84248,"line_start":308,"line_end":308,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":84249,"byte_end":84252,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ This implementation is recursive and does one pass over the nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":84253,"byte_end":84323,"line_start":310,"line_end":310,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":87071,"byte_end":87083,"line_start":405,"line_end":405,"column_start":8,"column_end":20},"name":"condensation","qualname":"::algo::condensation","value":"fn <N, E, Ty, Ix> (g: Graph<N, E, Ty, Ix>, make_acyclic: bool) -> Graph<Vec<N>, E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" [Graph] Condense every strongly connected component into a single node and return the result.","sig":null,"attributes":[{"value":"/ [Graph] Condense every strongly connected component into a single node and return the result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":86846,"byte_end":86943,"line_start":401,"line_end":401,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":86944,"byte_end":86947,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ If `make_acyclic` is true, self-loops and multi edges are ignored, guaranteeing that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":86948,"byte_end":87036,"line_start":403,"line_end":403,"column_start":1,"column_end":89}},{"value":"/ the output is acyclic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":87037,"byte_end":87063,"line_start":404,"line_end":404,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":814},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88831,"byte_end":88848,"line_start":452,"line_end":452,"column_start":8,"column_end":25},"name":"min_spanning_tree","qualname":"::algo::min_spanning_tree","value":"fn <G> (g: G) -> MinSpanningTree<G>","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Compute a *minimum spanning tree* of a graph.","sig":null,"attributes":[{"value":"/ [Generic] Compute a *minimum spanning tree* of a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88259,"byte_end":88318,"line_start":440,"line_end":440,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88319,"byte_end":88322,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ The input graph is treated as if undirected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88323,"byte_end":88371,"line_start":442,"line_end":442,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88372,"byte_end":88375,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ Using Kruskal's algorithm with runtime **O(|E| log |E|)**. We actually","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88376,"byte_end":88450,"line_start":444,"line_end":444,"column_start":1,"column_end":75}},{"value":"/ return a minimum spanning forest, i.e. a minimum spanning tree for each connected","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88451,"byte_end":88536,"line_start":445,"line_end":445,"column_start":1,"column_end":86}},{"value":"/ component of the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88537,"byte_end":88564,"line_start":446,"line_end":446,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88565,"byte_end":88568,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ The resulting graph has all the vertices of the input graph (with identical node indices),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88569,"byte_end":88663,"line_start":448,"line_end":448,"column_start":1,"column_end":95}},{"value":"/ and **|V| - c** edges, where **c** is the number of connected components in `g`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88664,"byte_end":88748,"line_start":449,"line_end":449,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88749,"byte_end":88752,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ Use `from_elements` to create a graph from the resulting iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":88753,"byte_end":88823,"line_start":451,"line_end":451,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":89687,"byte_end":89702,"line_start":478,"line_end":478,"column_start":12,"column_end":27},"name":"MinSpanningTree","qualname":"::algo::MinSpanningTree","value":"MinSpanningTree {  }","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821}],"decl_id":null,"docs":" An iterator producing a minimum spanning forest of a graph.\n","sig":null,"attributes":[{"value":"/ An iterator producing a minimum spanning forest of a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":89612,"byte_end":89675,"line_start":477,"line_end":477,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":2609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91324,"byte_end":91329,"line_start":529,"line_end":529,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::algo::Cycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An algorithm error: a cycle was found in the graph.\n","sig":null,"attributes":[{"value":"/ An algorithm error: a cycle was found in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91222,"byte_end":91277,"line_start":527,"line_end":527,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91424,"byte_end":91431,"line_start":533,"line_end":533,"column_start":12,"column_end":19},"name":"node_id","qualname":"<Cycle<N>>::node_id","value":"fn (&self) -> N","parent":null,"children":[],"decl_id":null,"docs":" Return a node id that participates in the cycle\n","sig":null,"attributes":[{"value":"/ Return a node id that participates in the cycle","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91361,"byte_end":91412,"line_start":532,"line_end":532,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91617,"byte_end":91630,"line_start":541,"line_end":541,"column_start":12,"column_end":25},"name":"NegativeCycle","qualname":"::algo::NegativeCycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An algorithm error: a cycle of negative weights was found in the graph.\n","sig":null,"attributes":[{"value":"/ An algorithm error: a cycle of negative weights was found in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91495,"byte_end":91570,"line_start":539,"line_end":539,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":829},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":92173,"byte_end":92185,"line_start":554,"line_end":554,"column_start":8,"column_end":20},"name":"bellman_ford","qualname":"::algo::bellman_ford","value":"fn <G> (g: G, source: G::NodeId) -> Result<(Vec<G::EdgeWeight>, Vec<Option<G::NodeId>>), NegativeCycle>","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Compute shortest paths from node `source` to all other.","sig":null,"attributes":[{"value":"/ [Generic] Compute shortest paths from node `source` to all other.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91637,"byte_end":91706,"line_start":543,"line_end":543,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91707,"byte_end":91710,"line_start":544,"line_end":544,"column_start":1,"column_end":4}},{"value":"/ Using the [Bellman–Ford algorithm][bf]; negative edge costs are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91711,"byte_end":91780,"line_start":545,"line_end":545,"column_start":1,"column_end":68}},{"value":"/ permitted, but the graph must not have a cycle of negative weights","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91781,"byte_end":91851,"line_start":546,"line_end":546,"column_start":1,"column_end":71}},{"value":"/ (in that case it will return an error).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91852,"byte_end":91895,"line_start":547,"line_end":547,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91896,"byte_end":91899,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ On success, return one vec with path costs, and another one which points","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91900,"byte_end":91976,"line_start":549,"line_end":549,"column_start":1,"column_end":77}},{"value":"/ out the predecessor of a node along a shortest path. The vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91977,"byte_end":92045,"line_start":550,"line_end":550,"column_start":1,"column_end":69}},{"value":"/ are indexed by the graph's node indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":92046,"byte_end":92090,"line_start":551,"line_end":551,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":92091,"byte_end":92094,"line_start":552,"line_end":552,"column_start":1,"column_end":4}},{"value":"/ [bf]: https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":92095,"byte_end":92165,"line_start":553,"line_end":553,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93752,"byte_end":93759,"line_start":604,"line_end":604,"column_start":11,"column_end":18},"name":"Measure","qualname":"::algo::Measure","value":"Measure: Debug + PartialOrd + Add<Self, Output = Self> + Default + Clone","parent":null,"children":[],"decl_id":null,"docs":" Associated data that can be used for measures (such as length).\n","sig":null,"attributes":[{"value":"/ Associated data that can be used for measures (such as length).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93674,"byte_end":93741,"line_start":603,"line_end":603,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":837},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93966,"byte_end":93978,"line_start":612,"line_end":612,"column_start":11,"column_end":23},"name":"FloatMeasure","qualname":"::algo::FloatMeasure","value":"FloatMeasure: Measure + Copy","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839}],"decl_id":null,"docs":" A floating-point measure.\n","sig":null,"attributes":[{"value":"/ A floating-point measure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93926,"byte_end":93955,"line_start":611,"line_end":611,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":94005,"byte_end":94009,"line_start":613,"line_end":613,"column_start":8,"column_end":12},"name":"zero","qualname":"::algo::FloatMeasure::zero","value":"fn () -> Self","parent":{"krate":0,"index":837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":94028,"byte_end":94036,"line_start":614,"line_end":614,"column_start":8,"column_end":16},"name":"infinite","qualname":"::algo::FloatMeasure::infinite","value":"fn () -> Self","parent":{"krate":0,"index":837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103668,"byte_end":103677,"line_start":38,"line_end":38,"column_start":10,"column_end":19},"name":"DefaultIx","qualname":"::graph_impl::DefaultIx","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The default integer type for graph indices.\n `u32` is the default to reduce the size of the graph's data and improve\n performance in the common case.","sig":null,"attributes":[{"value":"/ The default integer type for graph indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103394,"byte_end":103441,"line_start":32,"line_end":32,"column_start":1,"column_end":48}},{"value":"/ `u32` is the default to reduce the size of the graph's data and improve","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103442,"byte_end":103517,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ performance in the common case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103518,"byte_end":103553,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103554,"byte_end":103557,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Used for node and edge indices in `Graph` and `StableGraph`, used","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103558,"byte_end":103627,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ for node indices in `Csr`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103628,"byte_end":103658,"line_start":37,"line_end":37,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103872,"byte_end":103881,"line_start":44,"line_end":44,"column_start":18,"column_end":27},"name":"IndexType","qualname":"::graph_impl::IndexType","value":"IndexType: Copy + Default + Hash + Ord + fmt::Debug + 'static","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880}],"decl_id":null,"docs":" Trait for the unsigned integer type used for node and edge indices.","sig":null,"attributes":[{"value":"/ Trait for the unsigned integer type used for node and edge indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103686,"byte_end":103757,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103758,"byte_end":103761,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Marked `unsafe` because: the trait must faithfully preseve","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103762,"byte_end":103824,"line_start":42,"line_end":42,"column_start":1,"column_end":63}},{"value":"/ and convert index values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103825,"byte_end":103854,"line_start":43,"line_end":43,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103944,"byte_end":103947,"line_start":46,"line_end":46,"column_start":8,"column_end":11},"name":"new","qualname":"::graph_impl::IndexType::new","value":"fn (x: usize) -> Self","parent":{"krate":0,"index":877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103974,"byte_end":103979,"line_start":47,"line_end":47,"column_start":8,"column_end":13},"name":"index","qualname":"::graph_impl::IndexType::index","value":"fn (&self) -> usize","parent":{"krate":0,"index":877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":104004,"byte_end":104007,"line_start":48,"line_end":48,"column_start":8,"column_end":11},"name":"max","qualname":"::graph_impl::IndexType::max","value":"fn () -> Self","parent":{"krate":0,"index":877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105036,"byte_end":105045,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"NodeIndex","qualname":"::graph_impl::NodeIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Node identifier.\n","sig":null,"attributes":[{"value":"/ Node identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":104934,"byte_end":104954,"line_start":87,"line_end":87,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105127,"byte_end":105130,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<NodeIndex<Ix>>::new","value":"fn (x: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105106,"byte_end":105115,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105220,"byte_end":105225,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"index","qualname":"<NodeIndex<Ix>>::index","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105199,"byte_end":105208,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105302,"byte_end":105305,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"end","qualname":"<NodeIndex<Ix>>::end","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105281,"byte_end":105290,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105751,"byte_end":105761,"line_start":127,"line_end":127,"column_start":8,"column_end":18},"name":"node_index","qualname":"::graph_impl::node_index","value":"fn <Ix> (index: usize) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Short version of `NodeIndex::new`\n","sig":null,"attributes":[{"value":"/ Short version of `NodeIndex::new`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105706,"byte_end":105743,"line_start":126,"line_end":126,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":911},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105880,"byte_end":105890,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"edge_index","qualname":"::graph_impl::edge_index","value":"fn <Ix> (index: usize) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Short version of `EdgeIndex::new`\n","sig":null,"attributes":[{"value":"/ Short version of `EdgeIndex::new`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105835,"byte_end":105872,"line_start":129,"line_end":129,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106066,"byte_end":106075,"line_start":134,"line_end":134,"column_start":12,"column_end":21},"name":"EdgeIndex","qualname":"::graph_impl::EdgeIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Edge identifier.\n","sig":null,"attributes":[{"value":"/ Edge identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105964,"byte_end":105984,"line_start":132,"line_end":132,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106157,"byte_end":106160,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<EdgeIndex<Ix>>::new","value":"fn (x: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106136,"byte_end":106145,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106250,"byte_end":106255,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"index","qualname":"<EdgeIndex<Ix>>::index","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106229,"byte_end":106238,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106444,"byte_end":106447,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"end","qualname":"<EdgeIndex<Ix>>::end","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" An invalid `EdgeIndex` used to denote absence of an edge, for example\n to end an adjacency list.\n","sig":null,"attributes":[{"value":"/ An invalid `EdgeIndex` used to denote absence of an edge, for example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106311,"byte_end":106384,"line_start":149,"line_end":149,"column_start":5,"column_end":78}},{"value":"/ to end an adjacency list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106389,"byte_end":106418,"line_start":150,"line_end":150,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106423,"byte_end":106432,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107268,"byte_end":107272,"line_start":187,"line_end":187,"column_start":12,"column_end":16},"name":"Node","qualname":"::graph_impl::Node","value":"Node { weight }","parent":null,"children":[{"krate":0,"index":2713},{"krate":0,"index":2714}],"decl_id":null,"docs":" The graph's node type.\n","sig":null,"attributes":[{"value":"/ The graph's node type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107213,"byte_end":107239,"line_start":185,"line_end":185,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2713},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107332,"byte_end":107338,"line_start":189,"line_end":189,"column_start":9,"column_end":15},"name":"weight","qualname":"::graph_impl::Node::weight","value":"N","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" Associated node data.\n","sig":null,"attributes":[{"value":"/ Associated node data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107298,"byte_end":107323,"line_start":188,"line_end":188,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107725,"byte_end":107734,"line_start":205,"line_end":205,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Node<N, Ix>>::next_edge","value":"fn (&self, dir: Direction) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the first edge in the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the first edge in the given direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107632,"byte_end":107713,"line_start":204,"line_end":204,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107877,"byte_end":107881,"line_start":214,"line_end":214,"column_start":12,"column_end":16},"name":"Edge","qualname":"::graph_impl::Edge","value":"Edge { weight }","parent":null,"children":[{"krate":0,"index":2724},{"krate":0,"index":2725},{"krate":0,"index":2727}],"decl_id":null,"docs":" The graph's edge type.\n","sig":null,"attributes":[{"value":"/ The graph's edge type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107822,"byte_end":107848,"line_start":212,"line_end":212,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2724},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107941,"byte_end":107947,"line_start":216,"line_end":216,"column_start":9,"column_end":15},"name":"weight","qualname":"::graph_impl::Edge::weight","value":"E","parent":{"krate":0,"index":2721},"children":[],"decl_id":null,"docs":" Associated edge data.\n","sig":null,"attributes":[{"value":"/ Associated edge data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107907,"byte_end":107932,"line_start":215,"line_end":215,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108420,"byte_end":108429,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Edge<E, Ix>>::next_edge","value":"fn (&self, dir: Direction) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the next edge for the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the next edge for the given direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108327,"byte_end":108408,"line_start":233,"line_end":233,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108563,"byte_end":108569,"line_start":240,"line_end":240,"column_start":12,"column_end":18},"name":"source","qualname":"<Edge<E, Ix>>::source","value":"fn (&self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return the source node index.\n","sig":null,"attributes":[{"value":"/ Return the source node index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108518,"byte_end":108551,"line_start":239,"line_end":239,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108677,"byte_end":108683,"line_start":246,"line_end":246,"column_start":12,"column_end":18},"name":"target","qualname":"<Edge<E, Ix>>::target","value":"fn (&self) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return the target node index.\n","sig":null,"attributes":[{"value":"/ Return the target node index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108632,"byte_end":108665,"line_start":245,"line_end":245,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111846,"byte_end":111851,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"Graph","qualname":"::graph_impl::Graph","value":"Graph {  }","parent":null,"children":[{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947}],"decl_id":null,"docs":" `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","sig":null,"attributes":[{"value":"/ `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108744,"byte_end":108834,"line_start":252,"line_end":252,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108835,"byte_end":108838,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ `Graph` is parameterized over:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108839,"byte_end":108873,"line_start":254,"line_end":254,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108874,"byte_end":108877,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ - Associated data `N` for nodes and `E` for edges, called *weights*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108878,"byte_end":108950,"line_start":256,"line_end":256,"column_start":1,"column_end":73}},{"value":"/   The associated data can be of arbitrary type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108951,"byte_end":109002,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ - Edge type `Ty` that determines whether the graph edges are directed or undirected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109003,"byte_end":109091,"line_start":258,"line_end":258,"column_start":1,"column_end":89}},{"value":"/ - Index type `Ix`, which determines the maximum size of the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109092,"byte_end":109162,"line_start":259,"line_end":259,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109163,"byte_end":109166,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ The graph uses **O(|V| + |E|)** space, and allows fast node and edge insert,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109167,"byte_end":109247,"line_start":261,"line_end":261,"column_start":1,"column_end":81}},{"value":"/ efficient graph search and graph algorithms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109248,"byte_end":109296,"line_start":262,"line_end":262,"column_start":1,"column_end":49}},{"value":"/ It implements **O(e')** edge lookup and edge and node removals, where **e'**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109297,"byte_end":109377,"line_start":263,"line_end":263,"column_start":1,"column_end":81}},{"value":"/ is some local measure of edge count.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109378,"byte_end":109418,"line_start":264,"line_end":264,"column_start":1,"column_end":41}},{"value":"/ Based on the graph datastructure used in rustc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109419,"byte_end":109470,"line_start":265,"line_end":265,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109471,"byte_end":109474,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ Here's an example of building a graph with directed edges, and below","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109475,"byte_end":109547,"line_start":267,"line_end":267,"column_start":1,"column_end":73}},{"value":"/ an illustration of how it could be rendered with graphviz (see","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109548,"byte_end":109614,"line_start":268,"line_end":268,"column_start":1,"column_end":67}},{"value":"/ [`Dot`](../dot/struct.Dot.html)):","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109615,"byte_end":109652,"line_start":269,"line_end":269,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109653,"byte_end":109656,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109657,"byte_end":109664,"line_start":271,"line_end":271,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109665,"byte_end":109689,"line_start":272,"line_end":272,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109690,"byte_end":109693,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ let mut deps = Graph::<&str, &str>::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109694,"byte_end":109740,"line_start":274,"line_end":274,"column_start":1,"column_end":47}},{"value":"/ let pg = deps.add_node(\"petgraph\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109741,"byte_end":109780,"line_start":275,"line_end":275,"column_start":1,"column_end":40}},{"value":"/ let fb = deps.add_node(\"fixedbitset\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109781,"byte_end":109823,"line_start":276,"line_end":276,"column_start":1,"column_end":43}},{"value":"/ let qc = deps.add_node(\"quickcheck\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109824,"byte_end":109865,"line_start":277,"line_end":277,"column_start":1,"column_end":42}},{"value":"/ let rand = deps.add_node(\"rand\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109866,"byte_end":109903,"line_start":278,"line_end":278,"column_start":1,"column_end":38}},{"value":"/ let libc = deps.add_node(\"libc\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109904,"byte_end":109941,"line_start":279,"line_end":279,"column_start":1,"column_end":38}},{"value":"/ deps.extend_with_edges(&[","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109942,"byte_end":109971,"line_start":280,"line_end":280,"column_start":1,"column_end":30}},{"value":"/     (pg, fb), (pg, qc),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":109972,"byte_end":109999,"line_start":281,"line_end":281,"column_start":1,"column_end":28}},{"value":"/     (qc, rand), (rand, libc), (qc, libc),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110000,"byte_end":110045,"line_start":282,"line_end":282,"column_start":1,"column_end":46}},{"value":"/ ]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110046,"byte_end":110053,"line_start":283,"line_end":283,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110054,"byte_end":110061,"line_start":284,"line_end":284,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110062,"byte_end":110065,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ![graph-example](https://bluss.github.io/ndarray/images/graph-example.svg)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110066,"byte_end":110144,"line_start":286,"line_end":286,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110145,"byte_end":110148,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ### Graph Indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110149,"byte_end":110170,"line_start":288,"line_end":288,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110171,"byte_end":110174,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ The graph maintains indices for nodes and edges, and node and edge","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110175,"byte_end":110245,"line_start":290,"line_end":290,"column_start":1,"column_end":71}},{"value":"/ weights may be accessed mutably. Indices range in a compact interval, for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110246,"byte_end":110323,"line_start":291,"line_end":291,"column_start":1,"column_end":78}},{"value":"/ example for *n* nodes indices are 0 to *n* - 1 inclusive.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110324,"byte_end":110385,"line_start":292,"line_end":292,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110386,"byte_end":110389,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ `NodeIndex` and `EdgeIndex` are types that act as references to nodes and edges,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110390,"byte_end":110474,"line_start":294,"line_end":294,"column_start":1,"column_end":85}},{"value":"/ but these are only stable across certain operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110475,"byte_end":110531,"line_start":295,"line_end":295,"column_start":1,"column_end":57}},{"value":"/ **Adding nodes or edges keeps indices stable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110532,"byte_end":110581,"line_start":296,"line_end":296,"column_start":1,"column_end":50}},{"value":"/ Removing nodes or edges may shift other indices.**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110582,"byte_end":110636,"line_start":297,"line_end":297,"column_start":1,"column_end":55}},{"value":"/ Removing a node will force the last node to shift its index to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110637,"byte_end":110703,"line_start":298,"line_end":298,"column_start":1,"column_end":67}},{"value":"/ take its place. Similarly, removing an edge shifts the index of the last edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110704,"byte_end":110786,"line_start":299,"line_end":299,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110787,"byte_end":110790,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ The `Ix` parameter is `u32` by default. The goal is that you can ignore this parameter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110791,"byte_end":110881,"line_start":301,"line_end":301,"column_start":1,"column_end":91}},{"value":"/ completely unless you need a very big graph -- then you can use `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110882,"byte_end":110958,"line_start":302,"line_end":302,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110959,"byte_end":110962,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ ### Pros and Cons of Indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110963,"byte_end":110995,"line_start":304,"line_end":304,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":110996,"byte_end":110999,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ * The fact that the node and edge indices in the graph each are numbered in compact","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111000,"byte_end":111087,"line_start":306,"line_end":306,"column_start":1,"column_end":88}},{"value":"/ intervals (from 0 to *n* - 1 for *n* nodes) simplifies some graph algorithms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111088,"byte_end":111169,"line_start":307,"line_end":307,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111170,"byte_end":111173,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ * You can select graph index integer type after the size of the graph. A smaller","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111174,"byte_end":111258,"line_start":309,"line_end":309,"column_start":1,"column_end":85}},{"value":"/ size may have better performance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111259,"byte_end":111296,"line_start":310,"line_end":310,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111297,"byte_end":111300,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ * Using indices allows mutation while traversing the graph, see `Dfs`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111301,"byte_end":111375,"line_start":312,"line_end":312,"column_start":1,"column_end":75}},{"value":"/ and `.neighbors(a).detach()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111376,"byte_end":111409,"line_start":313,"line_end":313,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111410,"byte_end":111413,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ * You can create several graphs using the equal node indices but with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111414,"byte_end":111487,"line_start":315,"line_end":315,"column_start":1,"column_end":74}},{"value":"/ differing weights or differing edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111488,"byte_end":111529,"line_start":316,"line_end":316,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111530,"byte_end":111533,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ * The `Graph` is a regular rust collection and is `Send` and `Sync` (as long","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111534,"byte_end":111614,"line_start":318,"line_end":318,"column_start":1,"column_end":81}},{"value":"/ as associated data `N` and `E` are).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111615,"byte_end":111655,"line_start":319,"line_end":319,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111656,"byte_end":111659,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ * Some indices shift during node or edge removal, so that is a drawback","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111660,"byte_end":111735,"line_start":321,"line_end":321,"column_start":1,"column_end":76}},{"value":"/ of removing elements. Indices don't allow as much compile time checking as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111736,"byte_end":111814,"line_start":322,"line_end":322,"column_start":1,"column_end":79}},{"value":"/ references.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111815,"byte_end":111830,"line_start":323,"line_end":323,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111831,"byte_end":111834,"line_start":324,"line_end":324,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112112,"byte_end":112119,"line_start":335,"line_end":335,"column_start":10,"column_end":17},"name":"DiGraph","qualname":"::graph_impl::DiGraph","value":"Graph<N, E, Directed, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A `Graph` with directed edges.","sig":null,"attributes":[{"value":"/ A `Graph` with directed edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":111977,"byte_end":112011,"line_start":331,"line_end":331,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112012,"byte_end":112015,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ For example, an edge from *1* to *2* is distinct from an edge from *2* to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112016,"byte_end":112093,"line_start":333,"line_end":333,"column_start":1,"column_end":78}},{"value":"/ *1*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112094,"byte_end":112102,"line_start":334,"line_end":334,"column_start":1,"column_end":9}}]},{"kind":"Type","id":{"krate":0,"index":952},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112317,"byte_end":112324,"line_start":341,"line_end":341,"column_start":10,"column_end":17},"name":"UnGraph","qualname":"::graph_impl::UnGraph","value":"Graph<N, E, Undirected, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A `Graph` with undirected edges.","sig":null,"attributes":[{"value":"/ A `Graph` with undirected edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112172,"byte_end":112208,"line_start":337,"line_end":337,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112209,"byte_end":112212,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ For example, an edge between *1* and *2* is equivalent to an edge between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112213,"byte_end":112290,"line_start":339,"line_end":339,"column_start":1,"column_end":78}},{"value":"/ *2* and *1*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112291,"byte_end":112307,"line_start":340,"line_end":340,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":114988,"byte_end":114991,"line_start":427,"line_end":427,"column_start":12,"column_end":15},"name":"new","qualname":"<Graph<N, E, Directed>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with directed edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` with directed edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":114757,"byte_end":114802,"line_start":423,"line_end":423,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":114807,"byte_end":114810,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method. Use `Graph::with_capacity` or `Graph::default` for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":114815,"byte_end":114899,"line_start":425,"line_end":425,"column_start":5,"column_end":89}},{"value":"/ a constructor that is generic in all the type parameters of `Graph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":114904,"byte_end":114976,"line_start":426,"line_end":426,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115374,"byte_end":115388,"line_start":440,"line_end":440,"column_start":12,"column_end":26},"name":"new_undirected","qualname":"<Graph<N, E, Undirected>>::new_undirected","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with undirected edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` with undirected edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115141,"byte_end":115188,"line_start":436,"line_end":436,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115193,"byte_end":115196,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method. Use `Graph::with_capacity` or `Graph::default` for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115201,"byte_end":115285,"line_start":438,"line_end":438,"column_start":5,"column_end":89}},{"value":"/ a constructor that is generic in all the type parameters of `Graph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115290,"byte_end":115362,"line_start":439,"line_end":439,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115652,"byte_end":115665,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Graph<N, E, Ty, Ix>>::with_capacity","value":"fn (nodes: usize, edges: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` with estimated capacity.\n","sig":null,"attributes":[{"value":"/ Create a new `Graph` with estimated capacity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115591,"byte_end":115640,"line_start":451,"line_end":451,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115942,"byte_end":115952,"line_start":461,"line_end":461,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Graph<N, E, Ty, Ix>>::node_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of nodes (vertices) in the graph.","sig":null,"attributes":[{"value":"/ Return the number of nodes (vertices) in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115832,"byte_end":115887,"line_start":458,"line_end":458,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115892,"byte_end":115895,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115900,"byte_end":115930,"line_start":460,"line_end":460,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116110,"byte_end":116120,"line_start":469,"line_end":469,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Graph<N, E, Ty, Ix>>::edge_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of edges in the graph.","sig":null,"attributes":[{"value":"/ Return the number of edges in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116011,"byte_end":116055,"line_start":466,"line_end":466,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116060,"byte_end":116063,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116068,"byte_end":116098,"line_start":468,"line_end":468,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116253,"byte_end":116264,"line_start":476,"line_end":476,"column_start":12,"column_end":23},"name":"is_directed","qualname":"<Graph<N, E, Ty, Ix>>::is_directed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the graph has directed edges or not.\n","sig":null,"attributes":[{"value":"/ Whether the graph has directed edges or not.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116179,"byte_end":116227,"line_start":474,"line_end":474,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116232,"byte_end":116241,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116624,"byte_end":116632,"line_start":489,"line_end":489,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Graph<N, E, Ty, Ix>>::add_node","value":"fn (&mut self, weight: N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add a node (also called vertex) with associated data `weight` to the graph.","sig":null,"attributes":[{"value":"/ Add a node (also called vertex) with associated data `weight` to the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116323,"byte_end":116402,"line_start":481,"line_end":481,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116407,"byte_end":116410,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116415,"byte_end":116445,"line_start":483,"line_end":483,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116450,"byte_end":116453,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116458,"byte_end":116495,"line_start":485,"line_end":485,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116500,"byte_end":116503,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116508,"byte_end":116583,"line_start":487,"line_end":487,"column_start":5,"column_end":80}},{"value":"/ type (N/A if usize).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":116588,"byte_end":116612,"line_start":488,"line_end":488,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117139,"byte_end":117150,"line_start":502,"line_end":502,"column_start":12,"column_end":23},"name":"node_weight","qualname":"<Graph<N, E, Ty, Ix>>::node_weight","value":"fn (&self, a: NodeIndex<Ix>) -> Option<&N>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for node `a`.","sig":null,"attributes":[{"value":"/ Access the weight for node `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117026,"byte_end":117061,"line_start":499,"line_end":499,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117066,"byte_end":117069,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Also available with indexing syntax: `&graph[a]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117074,"byte_end":117127,"line_start":501,"line_end":501,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117386,"byte_end":117401,"line_start":510,"line_end":510,"column_start":12,"column_end":27},"name":"node_weight_mut","qualname":"<Graph<N, E, Ty, Ix>>::node_weight_mut","value":"fn (&mut self, a: NodeIndex<Ix>) -> Option<&mut N>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for node `a`, mutably.","sig":null,"attributes":[{"value":"/ Access the weight for node `a`, mutably.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117260,"byte_end":117304,"line_start":507,"line_end":507,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117309,"byte_end":117312,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ Also available with indexing syntax: `&mut graph[a]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117317,"byte_end":117374,"line_start":509,"line_end":509,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":118075,"byte_end":118083,"line_start":528,"line_end":528,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Graph<N, E, Ty, Ix>>::add_edge","value":"fn (&mut self, a: NodeIndex<Ix>, b: NodeIndex<Ix>, weight: E) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add an edge from `a` to `b` to the graph, with its associated\n data `weight`.","sig":null,"attributes":[{"value":"/ Add an edge from `a` to `b` to the graph, with its associated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117527,"byte_end":117592,"line_start":515,"line_end":515,"column_start":5,"column_end":70}},{"value":"/ data `weight`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117597,"byte_end":117615,"line_start":516,"line_end":516,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117620,"byte_end":117623,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Return the index of the new edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117628,"byte_end":117665,"line_start":518,"line_end":518,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117670,"byte_end":117673,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117678,"byte_end":117708,"line_start":520,"line_end":520,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117713,"byte_end":117716,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any of the nodes don't exist.<br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117721,"byte_end":117772,"line_start":522,"line_end":522,"column_start":5,"column_end":56}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117777,"byte_end":117852,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ type (N/A if usize).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117857,"byte_end":117881,"line_start":524,"line_end":524,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117886,"byte_end":117889,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ **Note:** `Graph` allows adding parallel (“duplicate”) edges. If you want","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117894,"byte_end":117975,"line_start":526,"line_end":526,"column_start":5,"column_end":82}},{"value":"/ to avoid this, use [`.update_edge(a, b, weight)`](#method.update_edge) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":117980,"byte_end":118063,"line_start":527,"line_end":527,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119434,"byte_end":119445,"line_start":564,"line_end":564,"column_start":12,"column_end":23},"name":"update_edge","qualname":"<Graph<N, E, Ty, Ix>>::update_edge","value":"fn (&mut self, a: NodeIndex<Ix>, b: NodeIndex<Ix>, weight: E) -> EdgeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add or update an edge from `a` to `b`.\n If the edge already exists, its weight is updated.","sig":null,"attributes":[{"value":"/ Add or update an edge from `a` to `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119055,"byte_end":119097,"line_start":555,"line_end":555,"column_start":5,"column_end":47}},{"value":"/ If the edge already exists, its weight is updated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119102,"byte_end":119156,"line_start":556,"line_end":556,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119161,"byte_end":119164,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Return the index of the affected edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119169,"byte_end":119211,"line_start":558,"line_end":558,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119216,"byte_end":119219,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119224,"byte_end":119291,"line_start":560,"line_end":560,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119296,"byte_end":119362,"line_start":561,"line_end":561,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119367,"byte_end":119370,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ **Panics** if any of the nodes don't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119375,"byte_end":119422,"line_start":563,"line_end":563,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119874,"byte_end":119885,"line_start":578,"line_end":578,"column_start":12,"column_end":23},"name":"edge_weight","qualname":"<Graph<N, E, Ty, Ix>>::edge_weight","value":"fn (&self, e: EdgeIndex<Ix>) -> Option<&E>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for edge `e`.","sig":null,"attributes":[{"value":"/ Access the weight for edge `e`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119761,"byte_end":119796,"line_start":575,"line_end":575,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119801,"byte_end":119804,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Also available with indexing syntax: `&graph[e]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119809,"byte_end":119862,"line_start":577,"line_end":577,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120123,"byte_end":120138,"line_start":586,"line_end":586,"column_start":12,"column_end":27},"name":"edge_weight_mut","qualname":"<Graph<N, E, Ty, Ix>>::edge_weight_mut","value":"fn (&mut self, e: EdgeIndex<Ix>) -> Option<&mut E>","parent":null,"children":[],"decl_id":null,"docs":" Access the weight for edge `e`, mutably.","sig":null,"attributes":[{"value":"/ Access the weight for edge `e`, mutably.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":119997,"byte_end":120041,"line_start":583,"line_end":583,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120046,"byte_end":120049,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Also available with indexing syntax: `&mut graph[e]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120054,"byte_end":120111,"line_start":585,"line_end":585,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120325,"byte_end":120339,"line_start":592,"line_end":592,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<Graph<N, E, Ty, Ix>>::edge_endpoints","value":"fn (&self, e: EdgeIndex<Ix>) -> Option<(NodeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the source and target nodes for `e`.\n","sig":null,"attributes":[{"value":"/ Access the source and target nodes for `e`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120266,"byte_end":120313,"line_start":591,"line_end":591,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":121173,"byte_end":121184,"line_start":610,"line_end":610,"column_start":12,"column_end":23},"name":"remove_node","qualname":"<Graph<N, E, Ty, Ix>>::remove_node","value":"fn (&mut self, a: NodeIndex<Ix>) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Remove `a` from the graph if it exists, and return its weight.\n If it doesn't exist in the graph, return `None`.","sig":null,"attributes":[{"value":"/ Remove `a` from the graph if it exists, and return its weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120503,"byte_end":120569,"line_start":598,"line_end":598,"column_start":5,"column_end":71}},{"value":"/ If it doesn't exist in the graph, return `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120574,"byte_end":120626,"line_start":599,"line_end":599,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120631,"byte_end":120634,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ Apart from `a`, this invalidates the last node index in the graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120639,"byte_end":120708,"line_start":601,"line_end":601,"column_start":5,"column_end":74}},{"value":"/ (that node will adopt the removed node index). Edge indices are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120713,"byte_end":120780,"line_start":602,"line_end":602,"column_start":5,"column_end":72}},{"value":"/ invalidated as they would be following the removal of each edge","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120785,"byte_end":120852,"line_start":603,"line_end":603,"column_start":5,"column_end":72}},{"value":"/ with an endpoint in `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120857,"byte_end":120885,"line_start":604,"line_end":604,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120890,"byte_end":120893,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of affected","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120898,"byte_end":120968,"line_start":606,"line_end":606,"column_start":5,"column_end":75}},{"value":"/ edges, including *n* calls to `.remove_edge()` where *n* is the number","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":120973,"byte_end":121047,"line_start":607,"line_end":607,"column_start":5,"column_end":79}},{"value":"/ of edges with an endpoint in `a`, and including the edges with an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":121052,"byte_end":121121,"line_start":608,"line_end":608,"column_start":5,"column_end":74}},{"value":"/ endpoint in the displaced node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":121126,"byte_end":121161,"line_start":609,"line_end":609,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124489,"byte_end":124500,"line_start":696,"line_end":696,"column_start":12,"column_end":23},"name":"remove_edge","qualname":"<Graph<N, E, Ty, Ix>>::remove_edge","value":"fn (&mut self, e: EdgeIndex<Ix>) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":" Remove an edge and return its edge weight, or `None` if it didn't exist.","sig":null,"attributes":[{"value":"/ Remove an edge and return its edge weight, or `None` if it didn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124089,"byte_end":124165,"line_start":689,"line_end":689,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124170,"byte_end":124173,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ Apart from `e`, this invalidates the last edge index in the graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124178,"byte_end":124247,"line_start":691,"line_end":691,"column_start":5,"column_end":74}},{"value":"/ (that edge will adopt the removed edge index).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124252,"byte_end":124302,"line_start":692,"line_end":692,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124307,"byte_end":124310,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the size of four particular edge lists, for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124315,"byte_end":124406,"line_start":694,"line_end":694,"column_start":5,"column_end":96}},{"value":"/ the vertices of `e` and the vertices of another affected edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":124411,"byte_end":124477,"line_start":695,"line_end":695,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126276,"byte_end":126285,"line_start":742,"line_end":742,"column_start":12,"column_end":21},"name":"neighbors","qualname":"<Graph<N, E, Ty, Ix>>::neighbors","value":"fn (&self, a: NodeIndex<Ix>) -> Neighbors<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all nodes with an edge starting from `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all nodes with an edge starting from `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":125791,"byte_end":125858,"line_start":730,"line_end":730,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":125863,"byte_end":125866,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":125871,"byte_end":125913,"line_start":732,"line_end":732,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges from or to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":125918,"byte_end":125963,"line_start":733,"line_end":733,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":125968,"byte_end":125971,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":125976,"byte_end":126037,"line_start":735,"line_end":735,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126042,"byte_end":126087,"line_start":736,"line_end":736,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126092,"byte_end":126095,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors(a).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126100,"byte_end":126172,"line_start":738,"line_end":738,"column_start":5,"column_end":77}},{"value":"/ not borrow from the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126177,"byte_end":126207,"line_start":739,"line_end":739,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126212,"byte_end":126215,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126220,"byte_end":126264,"line_start":741,"line_end":741,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127318,"byte_end":127336,"line_start":766,"line_end":766,"column_start":12,"column_end":30},"name":"neighbors_directed","qualname":"<Graph<N, E, Ty, Ix>>::neighbors_directed","value":"fn (&self, a: NodeIndex<Ix>, dir: Direction) -> Neighbors<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all neighbors that have an edge between them and\n `a`, in the specified direction.\n If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","sig":null,"attributes":[{"value":"/ Return an iterator of all neighbors that have an edge between them and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126393,"byte_end":126467,"line_start":747,"line_end":747,"column_start":5,"column_end":79}},{"value":"/ `a`, in the specified direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126472,"byte_end":126508,"line_start":748,"line_end":748,"column_start":5,"column_end":41}},{"value":"/ If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126513,"byte_end":126592,"line_start":749,"line_end":749,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126597,"byte_end":126600,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ - `Directed`, `Outgoing`: All edges from `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126605,"byte_end":126654,"line_start":751,"line_end":751,"column_start":5,"column_end":54}},{"value":"/ - `Directed`, `Incoming`: All edges to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126659,"byte_end":126706,"line_start":752,"line_end":752,"column_start":5,"column_end":52}},{"value":"/ - `Undirected`: All edges from or to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126711,"byte_end":126756,"line_start":753,"line_end":753,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126761,"byte_end":126764,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126769,"byte_end":126830,"line_start":755,"line_end":755,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126835,"byte_end":126880,"line_start":756,"line_end":756,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126885,"byte_end":126888,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ For a `Directed` graph, neighbors are listed in reverse order of their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126893,"byte_end":126967,"line_start":758,"line_end":758,"column_start":5,"column_end":79}},{"value":"/ addition to the graph, so the most recently added edge's neighbor is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":126972,"byte_end":127044,"line_start":759,"line_end":759,"column_start":5,"column_end":77}},{"value":"/ listed first. The order in an `Undirected` graph is arbitrary.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127049,"byte_end":127115,"line_start":760,"line_end":760,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127120,"byte_end":127123,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors_directed(a, dir).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127128,"byte_end":127214,"line_start":762,"line_end":762,"column_start":5,"column_end":91}},{"value":"/ not borrow from the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127219,"byte_end":127249,"line_start":763,"line_end":763,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127254,"byte_end":127257,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127262,"byte_end":127306,"line_start":765,"line_end":765,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128250,"byte_end":128270,"line_start":791,"line_end":791,"column_start":12,"column_end":32},"name":"neighbors_undirected","qualname":"<Graph<N, E, Ty, Ix>>::neighbors_undirected","value":"fn (&self, a: NodeIndex<Ix>) -> Neighbors<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all neighbors that have an edge between them and\n `a`, in either direction.\n If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","sig":null,"attributes":[{"value":"/ Return an iterator of all neighbors that have an edge between them and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127653,"byte_end":127727,"line_start":777,"line_end":777,"column_start":5,"column_end":79}},{"value":"/ `a`, in either direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127732,"byte_end":127761,"line_start":778,"line_end":778,"column_start":5,"column_end":34}},{"value":"/ If the graph's edges are undirected, this is equivalent to *.neighbors(a)*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127766,"byte_end":127845,"line_start":779,"line_end":779,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127850,"byte_end":127853,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ - `Directed` and `Undirected`: All edges from or to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127858,"byte_end":127918,"line_start":781,"line_end":781,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127923,"byte_end":127926,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127931,"byte_end":127992,"line_start":783,"line_end":783,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":127997,"byte_end":128042,"line_start":784,"line_end":784,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128047,"byte_end":128050,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ Use [`.neighbors_undirected(a).detach()`][1] to get a neighbor walker that does","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128055,"byte_end":128138,"line_start":786,"line_end":786,"column_start":5,"column_end":88}},{"value":"/ not borrow from the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128143,"byte_end":128173,"line_start":787,"line_end":787,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128178,"byte_end":128181,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ [1]: struct.Neighbors.html#method.detach","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128186,"byte_end":128230,"line_start":789,"line_end":789,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128235,"byte_end":128238,"line_start":790,"line_end":790,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128878,"byte_end":128883,"line_start":810,"line_end":810,"column_start":12,"column_end":17},"name":"edges","qualname":"<Graph<N, E, Ty, Ix>>::edges","value":"fn (&self, a: NodeIndex<Ix>) -> Edges<E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128585,"byte_end":128628,"line_start":803,"line_end":803,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128633,"byte_end":128636,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128641,"byte_end":128683,"line_start":805,"line_end":805,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128688,"byte_end":128735,"line_start":806,"line_end":806,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128740,"byte_end":128743,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node doesn't exist.<br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128748,"byte_end":128809,"line_start":808,"line_end":808,"column_start":5,"column_end":66}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128814,"byte_end":128866,"line_start":809,"line_end":809,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129367,"byte_end":129381,"line_start":822,"line_end":822,"column_start":12,"column_end":26},"name":"edges_directed","qualname":"<Graph<N, E, Ty, Ix>>::edges_directed","value":"fn (&self, a: NodeIndex<Ix>, dir: Direction) -> Edges<E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`, in the specified direction.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`, in the specified direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":128983,"byte_end":129054,"line_start":814,"line_end":814,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129059,"byte_end":129062,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ - `Directed`, `Outgoing`: All edges from `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129067,"byte_end":129116,"line_start":816,"line_end":816,"column_start":5,"column_end":54}},{"value":"/ - `Directed`, `Incoming`: All edges to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129121,"byte_end":129168,"line_start":817,"line_end":817,"column_start":5,"column_end":52}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129173,"byte_end":129220,"line_start":818,"line_end":818,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129225,"byte_end":129228,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Produces an empty iterator if the node `a` doesn't exist.<br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129233,"byte_end":129298,"line_start":820,"line_end":820,"column_start":5,"column_end":70}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":129303,"byte_end":129355,"line_start":821,"line_end":821,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130564,"byte_end":130577,"line_start":857,"line_end":857,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Graph<N, E, Ty, Ix>>::contains_edge","value":"fn (&self, a: NodeIndex<Ix>, b: NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lookup if there is an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookup if there is an edge from `a` to `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130354,"byte_end":130401,"line_start":853,"line_end":853,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130406,"byte_end":130409,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130414,"byte_end":130481,"line_start":855,"line_end":855,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130486,"byte_end":130552,"line_start":856,"line_end":856,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130879,"byte_end":130888,"line_start":865,"line_end":865,"column_start":12,"column_end":21},"name":"find_edge","qualname":"<Graph<N, E, Ty, Ix>>::find_edge","value":"fn (&self, a: NodeIndex<Ix>, b: NodeIndex<Ix>) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Lookup an edge from `a` to `b`.","sig":null,"attributes":[{"value":"/ Lookup an edge from `a` to `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130681,"byte_end":130716,"line_start":861,"line_end":861,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130721,"byte_end":130724,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130729,"byte_end":130796,"line_start":863,"line_end":863,"column_start":5,"column_end":72}},{"value":"/ connected to `a` (and `b`, if the graph edges are undirected).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":130801,"byte_end":130867,"line_start":864,"line_end":864,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131967,"byte_end":131987,"line_start":897,"line_end":897,"column_start":12,"column_end":32},"name":"find_edge_undirected","qualname":"<Graph<N, E, Ty, Ix>>::find_edge_undirected","value":"fn (&self, a: NodeIndex<Ix>, b: NodeIndex<Ix>) -> Option<(EdgeIndex<Ix>, Direction)>","parent":null,"children":[],"decl_id":null,"docs":" Lookup an edge between `a` and `b`, in either direction.","sig":null,"attributes":[{"value":"/ Lookup an edge between `a` and `b`, in either direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131624,"byte_end":131684,"line_start":890,"line_end":890,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131689,"byte_end":131692,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ If the graph is undirected, then this is equivalent to `.find_edge()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131697,"byte_end":131771,"line_start":892,"line_end":892,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131776,"byte_end":131779,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ Return the edge index and its directionality, with `Outgoing` meaning","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131784,"byte_end":131857,"line_start":894,"line_end":894,"column_start":5,"column_end":78}},{"value":"/ from `a` to `b` and `Incoming` the reverse,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131862,"byte_end":131909,"line_start":895,"line_end":895,"column_start":5,"column_end":52}},{"value":"/ or `None` if the edge does not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":131914,"byte_end":131955,"line_start":896,"line_end":896,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133242,"byte_end":133251,"line_start":932,"line_end":932,"column_start":12,"column_end":21},"name":"externals","qualname":"<Graph<N, E, Ty, Ix>>::externals","value":"fn (&self, dir: Direction) -> Externals<N, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over either the nodes without edges to them\n (`Incoming`) or from them (`Outgoing`).","sig":null,"attributes":[{"value":"/ Return an iterator over either the nodes without edges to them","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":132726,"byte_end":132792,"line_start":921,"line_end":921,"column_start":5,"column_end":71}},{"value":"/ (`Incoming`) or from them (`Outgoing`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":132797,"byte_end":132840,"line_start":922,"line_end":922,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":132845,"byte_end":132848,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ An *internal* node has both incoming and outgoing edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":132853,"byte_end":132913,"line_start":924,"line_end":924,"column_start":5,"column_end":65}},{"value":"/ The nodes in `.externals(Incoming)` are the source nodes and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":132918,"byte_end":132982,"line_start":925,"line_end":925,"column_start":5,"column_end":69}},{"value":"/ `.externals(Outgoing)` are the sinks of the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":132987,"byte_end":133041,"line_start":926,"line_end":926,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133046,"byte_end":133049,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ For a graph with undirected edges, both the sinks and the sources are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133054,"byte_end":133127,"line_start":928,"line_end":928,"column_start":5,"column_end":78}},{"value":"/ just the nodes without edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133132,"byte_end":133165,"line_start":929,"line_end":929,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133170,"byte_end":133173,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ The whole iteration computes in **O(|V|)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133178,"byte_end":133230,"line_start":931,"line_end":931,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133467,"byte_end":133479,"line_start":938,"line_end":938,"column_start":12,"column_end":24},"name":"node_indices","qualname":"<Graph<N, E, Ty, Ix>>::node_indices","value":"fn (&self) -> NodeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the node indices of the graph\n","sig":null,"attributes":[{"value":"/ Return an iterator over the node indices of the graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133398,"byte_end":133455,"line_start":937,"line_end":937,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133767,"byte_end":133783,"line_start":946,"line_end":946,"column_start":12,"column_end":28},"name":"node_weights_mut","qualname":"<Graph<N, E, Ty, Ix>>::node_weights_mut","value":"fn (&mut self) -> NodeWeightsMut<N, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding mutable access to all node weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding mutable access to all node weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133584,"byte_end":133651,"line_start":942,"line_end":942,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133656,"byte_end":133659,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133664,"byte_end":133733,"line_start":944,"line_end":944,"column_start":5,"column_end":74}},{"value":"/ node indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133738,"byte_end":133755,"line_start":945,"line_end":945,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133962,"byte_end":133974,"line_start":952,"line_end":952,"column_start":12,"column_end":24},"name":"edge_indices","qualname":"<Graph<N, E, Ty, Ix>>::edge_indices","value":"fn (&self) -> EdgeIndices<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the edge indices of the graph\n","sig":null,"attributes":[{"value":"/ Return an iterator over the edge indices of the graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":133893,"byte_end":133950,"line_start":951,"line_end":951,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134212,"byte_end":134227,"line_start":959,"line_end":959,"column_start":12,"column_end":27},"name":"edge_references","qualname":"<Graph<N, E, Ty, Ix>>::edge_references","value":"fn (&self) -> EdgeReferences<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over all edges, in indexed order.","sig":null,"attributes":[{"value":"/ Create an iterator over all edges, in indexed order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134079,"byte_end":134135,"line_start":956,"line_end":956,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134140,"byte_end":134143,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `EdgeReference<E, Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134148,"byte_end":134200,"line_start":958,"line_end":958,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134539,"byte_end":134555,"line_start":969,"line_end":969,"column_start":12,"column_end":28},"name":"edge_weights_mut","qualname":"<Graph<N, E, Ty, Ix>>::edge_weights_mut","value":"fn (&mut self) -> EdgeWeightsMut<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator yielding mutable access to all edge weights.","sig":null,"attributes":[{"value":"/ Return an iterator yielding mutable access to all edge weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134356,"byte_end":134423,"line_start":965,"line_end":965,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134428,"byte_end":134431,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134436,"byte_end":134505,"line_start":967,"line_end":967,"column_start":5,"column_end":74}},{"value":"/ edge indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134510,"byte_end":134527,"line_start":968,"line_end":968,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134831,"byte_end":134840,"line_start":978,"line_end":978,"column_start":12,"column_end":21},"name":"raw_nodes","qualname":"<Graph<N, E, Ty, Ix>>::raw_nodes","value":"fn (&self) -> &[Node<N, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Access the internal node array.\n","sig":null,"attributes":[{"value":"/ Access the internal node array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134784,"byte_end":134819,"line_start":977,"line_end":977,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134950,"byte_end":134959,"line_start":984,"line_end":984,"column_start":12,"column_end":21},"name":"raw_edges","qualname":"<Graph<N, E, Ty, Ix>>::raw_edges","value":"fn (&self) -> &[Edge<E, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Access the internal edge array.\n","sig":null,"attributes":[{"value":"/ Access the internal edge array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":134903,"byte_end":134938,"line_start":983,"line_end":983,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":135100,"byte_end":135116,"line_start":990,"line_end":990,"column_start":12,"column_end":28},"name":"into_nodes_edges","qualname":"<Graph<N, E, Ty, Ix>>::into_nodes_edges","value":"fn (self) -> (Vec<Node<N, Ix>>, Vec<Edge<E, Ix>>)","parent":null,"children":[],"decl_id":null,"docs":" Convert the graph into a vector of Nodes and a vector of Edges\n","sig":null,"attributes":[{"value":"/ Convert the graph into a vector of Nodes and a vector of Edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":135022,"byte_end":135088,"line_start":989,"line_end":989,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":135302,"byte_end":135312,"line_start":995,"line_end":995,"column_start":12,"column_end":22},"name":"first_edge","qualname":"<Graph<N, E, Ty, Ix>>::first_edge","value":"fn (&self, a: NodeIndex<Ix>, dir: Direction) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the first edge in the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the first edge in the given direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":135209,"byte_end":135290,"line_start":994,"line_end":994,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":135769,"byte_end":135778,"line_start":1009,"line_end":1009,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<Graph<N, E, Ty, Ix>>::next_edge","value":"fn (&self, e: EdgeIndex<Ix>, dir: Direction) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Accessor for data structure internals: the next edge for the given direction.\n","sig":null,"attributes":[{"value":"/ Accessor for data structure internals: the next edge for the given direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":135676,"byte_end":135757,"line_start":1008,"line_end":1008,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137276,"byte_end":137291,"line_start":1055,"line_end":1055,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Graph<N, E, Ty, Ix>>::index_twice_mut","value":"fn <T, U> (&mut self, i: T, j: U) -> (&mut <Self as Index<T>>::Output, &mut <Self as Index<U>>::Output)","parent":null,"children":[],"decl_id":null,"docs":" Index the `Graph` by two indices, any combination of\n node or edge indices is fine.","sig":null,"attributes":[{"value":"/ Index the `Graph` by two indices, any combination of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136142,"byte_end":136198,"line_start":1022,"line_end":1022,"column_start":5,"column_end":61}},{"value":"/ node or edge indices is fine.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136203,"byte_end":136236,"line_start":1023,"line_end":1023,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136241,"byte_end":136244,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136249,"byte_end":136318,"line_start":1025,"line_end":1025,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136323,"byte_end":136326,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136331,"byte_end":136338,"line_start":1027,"line_end":1027,"column_start":5,"column_end":12}},{"value":"/ use petgraph::{Graph, Incoming};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136343,"byte_end":136379,"line_start":1028,"line_end":1028,"column_start":5,"column_end":41}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136384,"byte_end":136413,"line_start":1029,"line_end":1029,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136418,"byte_end":136421,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ let mut gr = Graph::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136426,"byte_end":136456,"line_start":1031,"line_end":1031,"column_start":5,"column_end":35}},{"value":"/ let a = gr.add_node(0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136461,"byte_end":136489,"line_start":1032,"line_end":1032,"column_start":5,"column_end":33}},{"value":"/ let b = gr.add_node(0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136494,"byte_end":136522,"line_start":1033,"line_end":1033,"column_start":5,"column_end":33}},{"value":"/ let c = gr.add_node(0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136527,"byte_end":136555,"line_start":1034,"line_end":1034,"column_start":5,"column_end":33}},{"value":"/ gr.add_edge(a, b, 3.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136560,"byte_end":136586,"line_start":1035,"line_end":1035,"column_start":5,"column_end":31}},{"value":"/ gr.add_edge(b, c, 2.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136591,"byte_end":136617,"line_start":1036,"line_end":1036,"column_start":5,"column_end":31}},{"value":"/ gr.add_edge(c, b, 1.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136622,"byte_end":136648,"line_start":1037,"line_end":1037,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136653,"byte_end":136656,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ // walk the graph and sum incoming edges into the node weight","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136661,"byte_end":136726,"line_start":1039,"line_end":1039,"column_start":5,"column_end":70}},{"value":"/ let mut dfs = Dfs::new(&gr, a);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136731,"byte_end":136766,"line_start":1040,"line_end":1040,"column_start":5,"column_end":40}},{"value":"/ while let Some(node) = dfs.next(&gr) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136771,"byte_end":136813,"line_start":1041,"line_end":1041,"column_start":5,"column_end":47}},{"value":"/     // use a walker -- a detached neighbors iterator","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136818,"byte_end":136874,"line_start":1042,"line_end":1042,"column_start":5,"column_end":61}},{"value":"/     let mut edges = gr.neighbors_directed(node, Incoming).detach();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136879,"byte_end":136950,"line_start":1043,"line_end":1043,"column_start":5,"column_end":76}},{"value":"/     while let Some(edge) = edges.next_edge(&gr) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":136955,"byte_end":137008,"line_start":1044,"line_end":1044,"column_start":5,"column_end":58}},{"value":"/         let (nw, ew) = gr.index_twice_mut(node, edge);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137013,"byte_end":137071,"line_start":1045,"line_end":1045,"column_start":5,"column_end":63}},{"value":"/         *nw += *ew;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137076,"byte_end":137099,"line_start":1046,"line_end":1046,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137104,"byte_end":137113,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137118,"byte_end":137123,"line_start":1048,"line_end":1048,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137128,"byte_end":137131,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ // check the result","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137136,"byte_end":137159,"line_start":1050,"line_end":1050,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(gr[a], 0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137164,"byte_end":137190,"line_start":1051,"line_end":1051,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(gr[b], 4.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137195,"byte_end":137221,"line_start":1052,"line_end":1052,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(gr[c], 2.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137226,"byte_end":137252,"line_start":1053,"line_end":1053,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137257,"byte_end":137264,"line_start":1054,"line_end":1054,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137956,"byte_end":137963,"line_start":1074,"line_end":1074,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Graph<N, E, Ty, Ix>>::reverse","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverse the direction of all edges\n","sig":null,"attributes":[{"value":"/ Reverse the direction of all edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":137906,"byte_end":137944,"line_start":1073,"line_end":1073,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138345,"byte_end":138350,"line_start":1088,"line_end":1088,"column_start":12,"column_end":17},"name":"clear","qualname":"<Graph<N, E, Ty, Ix>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all nodes and edges\n","sig":null,"attributes":[{"value":"/ Remove all nodes and edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138303,"byte_end":138333,"line_start":1087,"line_end":1087,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138463,"byte_end":138474,"line_start":1094,"line_end":1094,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Graph<N, E, Ty, Ix>>::clear_edges","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges\n","sig":null,"attributes":[{"value":"/ Remove all edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138431,"byte_end":138451,"line_start":1093,"line_end":1093,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138708,"byte_end":138716,"line_start":1102,"line_end":1102,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Graph<N, E, Ty, Ix>>::capacity","value":"fn (&self) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Return the current node and edge capacity of the graph.\n","sig":null,"attributes":[{"value":"/ Return the current node and edge capacity of the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138637,"byte_end":138696,"line_start":1101,"line_end":1101,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139045,"byte_end":139058,"line_start":1110,"line_end":1110,"column_start":12,"column_end":25},"name":"reserve_nodes","qualname":"<Graph<N, E, Ty, Ix>>::reserve_nodes","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more nodes to be inserted in\n the graph. Graph may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more nodes to be inserted in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138810,"byte_end":138886,"line_start":1106,"line_end":1106,"column_start":5,"column_end":81}},{"value":"/ the graph. Graph may reserve more space to avoid frequent reallocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138891,"byte_end":138967,"line_start":1107,"line_end":1107,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138972,"byte_end":138975,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":138980,"byte_end":139033,"line_start":1109,"line_end":1109,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139377,"byte_end":139390,"line_start":1118,"line_end":1118,"column_start":12,"column_end":25},"name":"reserve_edges","qualname":"<Graph<N, E, Ty, Ix>>::reserve_edges","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more edges to be inserted in\n the graph. Graph may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more edges to be inserted in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139142,"byte_end":139218,"line_start":1114,"line_end":1114,"column_start":5,"column_end":81}},{"value":"/ the graph. Graph may reserve more space to avoid frequent reallocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139223,"byte_end":139299,"line_start":1115,"line_end":1115,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139304,"byte_end":139307,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139312,"byte_end":139365,"line_start":1117,"line_end":1117,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139792,"byte_end":139811,"line_start":1129,"line_end":1129,"column_start":12,"column_end":31},"name":"reserve_exact_nodes","qualname":"<Graph<N, E, Ty, Ix>>::reserve_exact_nodes","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more nodes to be\n inserted in the graph. Does nothing if the capacity is already\n sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more nodes to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139474,"byte_end":139549,"line_start":1122,"line_end":1122,"column_start":5,"column_end":80}},{"value":"/ inserted in the graph. Does nothing if the capacity is already","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139554,"byte_end":139620,"line_start":1123,"line_end":1123,"column_start":5,"column_end":71}},{"value":"/ sufficient.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139625,"byte_end":139640,"line_start":1124,"line_end":1124,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139645,"byte_end":139648,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ Prefer `reserve_nodes` if future insertions are expected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139653,"byte_end":139714,"line_start":1126,"line_end":1126,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139719,"byte_end":139722,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139727,"byte_end":139780,"line_start":1128,"line_end":1128,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140219,"byte_end":140238,"line_start":1140,"line_end":1140,"column_start":12,"column_end":31},"name":"reserve_exact_edges","qualname":"<Graph<N, E, Ty, Ix>>::reserve_exact_edges","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more edges to be\n inserted in the graph.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more edges to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139901,"byte_end":139976,"line_start":1133,"line_end":1133,"column_start":5,"column_end":80}},{"value":"/ inserted in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":139981,"byte_end":140007,"line_start":1134,"line_end":1134,"column_start":5,"column_end":31}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140012,"byte_end":140067,"line_start":1135,"line_end":1135,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140072,"byte_end":140075,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Prefer `reserve_edges` if future insertions are expected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140080,"byte_end":140141,"line_start":1137,"line_end":1137,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140146,"byte_end":140149,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the new capacity overflows `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140154,"byte_end":140207,"line_start":1139,"line_end":1139,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140420,"byte_end":140439,"line_start":1145,"line_end":1145,"column_start":12,"column_end":31},"name":"shrink_to_fit_nodes","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit_nodes","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the underlying nodes collection as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the underlying nodes collection as much as possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140328,"byte_end":140408,"line_start":1144,"line_end":1144,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140592,"byte_end":140611,"line_start":1150,"line_end":1150,"column_start":12,"column_end":31},"name":"shrink_to_fit_edges","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit_edges","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the underlying edges collection as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the underlying edges collection as much as possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140500,"byte_end":140580,"line_start":1149,"line_end":1149,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140742,"byte_end":140755,"line_start":1155,"line_end":1155,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Graph<N, E, Ty, Ix>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the graph as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the graph as much as possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140672,"byte_end":140730,"line_start":1154,"line_end":1154,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141154,"byte_end":141166,"line_start":1167,"line_end":1167,"column_start":12,"column_end":24},"name":"retain_nodes","qualname":"<Graph<N, E, Ty, Ix>>::retain_nodes","value":"fn <F> (&mut self, mut visit: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Keep all nodes that return `true` from the `visit` closure,\n remove the others.","sig":null,"attributes":[{"value":"/ Keep all nodes that return `true` from the `visit` closure,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140852,"byte_end":140915,"line_start":1160,"line_end":1160,"column_start":5,"column_end":68}},{"value":"/ remove the others.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140920,"byte_end":140942,"line_start":1161,"line_end":1161,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140947,"byte_end":140950,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ `visit` is provided a proxy reference to the graph, so that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":140955,"byte_end":141018,"line_start":1163,"line_end":1163,"column_start":5,"column_end":68}},{"value":"/ the graph can be walked and associated data modified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141023,"byte_end":141080,"line_start":1164,"line_end":1164,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141085,"byte_end":141088,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ The order nodes are visited is not specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141093,"byte_end":141142,"line_start":1166,"line_end":1166,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141818,"byte_end":141830,"line_start":1186,"line_end":1186,"column_start":12,"column_end":24},"name":"retain_edges","qualname":"<Graph<N, E, Ty, Ix>>::retain_edges","value":"fn <F> (&mut self, mut visit: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Keep all edges that return `true` from the `visit` closure,\n remove the others.","sig":null,"attributes":[{"value":"/ Keep all edges that return `true` from the `visit` closure,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141516,"byte_end":141579,"line_start":1179,"line_end":1179,"column_start":5,"column_end":68}},{"value":"/ remove the others.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141584,"byte_end":141606,"line_start":1180,"line_end":1180,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141611,"byte_end":141614,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ `visit` is provided a proxy reference to the graph, so that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141619,"byte_end":141682,"line_start":1182,"line_end":1182,"column_start":5,"column_end":68}},{"value":"/ the graph can be walked and associated data modified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141687,"byte_end":141744,"line_start":1183,"line_end":1183,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141749,"byte_end":141752,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ The order edges are visited is not specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":141757,"byte_end":141806,"line_start":1185,"line_end":1185,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142697,"byte_end":142707,"line_start":1216,"line_end":1216,"column_start":12,"column_end":22},"name":"from_edges","qualname":"<Graph<N, E, Ty, Ix>>::from_edges","value":"fn <I> (iterable: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` from an iterable of edges.","sig":null,"attributes":[{"value":"/ Create a new `Graph` from an iterable of edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142181,"byte_end":142232,"line_start":1199,"line_end":1199,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142237,"byte_end":142240,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142245,"byte_end":142292,"line_start":1201,"line_end":1201,"column_start":5,"column_end":52}},{"value":"/ Edge weights `E` may either be specified in the list,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142297,"byte_end":142354,"line_start":1202,"line_end":1202,"column_start":5,"column_end":62}},{"value":"/ or they are filled with default values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142359,"byte_end":142402,"line_start":1203,"line_end":1203,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142407,"byte_end":142410,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142415,"byte_end":142471,"line_start":1205,"line_end":1205,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142476,"byte_end":142479,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142484,"byte_end":142491,"line_start":1207,"line_end":1207,"column_start":5,"column_end":12}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142496,"byte_end":142520,"line_start":1208,"line_end":1208,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142525,"byte_end":142528,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ let gr = Graph::<(), i32>::from_edges(&[","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142533,"byte_end":142577,"line_start":1210,"line_end":1210,"column_start":5,"column_end":49}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142582,"byte_end":142613,"line_start":1211,"line_end":1211,"column_start":5,"column_end":36}},{"value":"/     (1, 2), (1, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142618,"byte_end":142641,"line_start":1212,"line_end":1212,"column_start":5,"column_end":28}},{"value":"/     (2, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142646,"byte_end":142661,"line_start":1213,"line_end":1213,"column_start":5,"column_end":20}},{"value":"/ ]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142666,"byte_end":142673,"line_start":1214,"line_end":1214,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":142678,"byte_end":142685,"line_start":1215,"line_end":1215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143321,"byte_end":143338,"line_start":1234,"line_end":1234,"column_start":12,"column_end":29},"name":"extend_with_edges","qualname":"<Graph<N, E, Ty, Ix>>::extend_with_edges","value":"fn <I> (&mut self, iterable: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extend the graph from an iterable of edges.","sig":null,"attributes":[{"value":"/ Extend the graph from an iterable of edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143023,"byte_end":143070,"line_start":1227,"line_end":1227,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143075,"byte_end":143078,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143083,"byte_end":143130,"line_start":1229,"line_end":1229,"column_start":5,"column_end":52}},{"value":"/ Edge weights `E` may either be specified in the list,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143135,"byte_end":143192,"line_start":1230,"line_end":1230,"column_start":5,"column_end":62}},{"value":"/ or they are filled with default values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143197,"byte_end":143240,"line_start":1231,"line_end":1231,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143245,"byte_end":143248,"line_start":1232,"line_end":1232,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":143253,"byte_end":143309,"line_start":1233,"line_end":1233,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":144256,"byte_end":144259,"line_start":1261,"line_end":1261,"column_start":12,"column_end":15},"name":"map","qualname":"<Graph<N, E, Ty, Ix>>::map","value":"fn <'a, F, G, N2, E2> (&'a self, mut node_map: F, mut edge_map: G) -> Graph<N2, E2, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` by mapping node and\n edge weights to new values.","sig":null,"attributes":[{"value":"/ Create a new `Graph` by mapping node and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":144059,"byte_end":144103,"line_start":1256,"line_end":1256,"column_start":5,"column_end":49}},{"value":"/ edge weights to new values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":144108,"byte_end":144139,"line_start":1257,"line_end":1257,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":144144,"byte_end":144147,"line_start":1258,"line_end":1258,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the same structure and the same","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":144152,"byte_end":144211,"line_start":1259,"line_end":1259,"column_start":5,"column_end":64}},{"value":"/ graph indices as `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":144216,"byte_end":144244,"line_start":1260,"line_end":1260,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145597,"byte_end":145607,"line_start":1293,"line_end":1293,"column_start":12,"column_end":22},"name":"filter_map","qualname":"<Graph<N, E, Ty, Ix>>::filter_map","value":"fn <'a, F, G, N2, E2> (&'a self, mut node_map: F, mut edge_map: G) -> Graph<N2, E2, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` by mapping nodes and edges.\n A node or edge may be mapped to `None` to exclude it from\n the resulting graph.","sig":null,"attributes":[{"value":"/ Create a new `Graph` by mapping nodes and edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":144996,"byte_end":145048,"line_start":1281,"line_end":1281,"column_start":5,"column_end":57}},{"value":"/ A node or edge may be mapped to `None` to exclude it from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145053,"byte_end":145114,"line_start":1282,"line_end":1282,"column_start":5,"column_end":66}},{"value":"/ the resulting graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145119,"byte_end":145143,"line_start":1283,"line_end":1283,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145148,"byte_end":145151,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ Nodes are mapped first with the `node_map` closure, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145156,"byte_end":145216,"line_start":1285,"line_end":1285,"column_start":5,"column_end":65}},{"value":"/ `edge_map` is called for the edges that have not had any endpoint","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145221,"byte_end":145290,"line_start":1286,"line_end":1286,"column_start":5,"column_end":74}},{"value":"/ removed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145295,"byte_end":145307,"line_start":1287,"line_end":1287,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145312,"byte_end":145315,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the structure of a subgraph of the original graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145320,"byte_end":145398,"line_start":1289,"line_end":1289,"column_start":5,"column_end":83}},{"value":"/ If no nodes are removed, the resulting graph has compatible node","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145403,"byte_end":145471,"line_start":1290,"line_end":1290,"column_start":5,"column_end":73}},{"value":"/ indices; if neither nodes nor edges are removed, the result has","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145476,"byte_end":145543,"line_start":1291,"line_end":1291,"column_start":5,"column_end":72}},{"value":"/ the same graph indices as `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":145548,"byte_end":145585,"line_start":1292,"line_end":1292,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":146945,"byte_end":146959,"line_start":1323,"line_end":1323,"column_start":12,"column_end":26},"name":"into_edge_type","qualname":"<Graph<N, E, Ty, Ix>>::into_edge_type","value":"fn <NewTy> (self) -> Graph<N, E, NewTy, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Convert the graph into either undirected or directed. No edge adjustments\n are done, so you may want to go over the result to remove or add edges.","sig":null,"attributes":[{"value":"/ Convert the graph into either undirected or directed. No edge adjustments","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":146733,"byte_end":146810,"line_start":1319,"line_end":1319,"column_start":5,"column_end":82}},{"value":"/ are done, so you may want to go over the result to remove or add edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":146815,"byte_end":146890,"line_start":1320,"line_end":1320,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":146895,"byte_end":146898,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":146903,"byte_end":146933,"line_start":1322,"line_end":1322,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":148209,"byte_end":148218,"line_start":1361,"line_end":1361,"column_start":12,"column_end":21},"name":"Externals","qualname":"::graph_impl::Externals","value":"Externals {  }","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093}],"decl_id":null,"docs":" An iterator over either the nodes without edges to them or from them.\n","sig":null,"attributes":[{"value":"/ An iterator over either the nodes without edges to them or from them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":148124,"byte_end":148197,"line_start":1360,"line_end":1360,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149457,"byte_end":149466,"line_start":1402,"line_end":1402,"column_start":12,"column_end":21},"name":"Neighbors","qualname":"::graph_impl::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107}],"decl_id":null,"docs":" Iterator over the neighbors of a node.","sig":null,"attributes":[{"value":"/ Iterator over the neighbors of a node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149087,"byte_end":149129,"line_start":1392,"line_end":1392,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149130,"byte_end":149133,"line_start":1393,"line_end":1393,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `NodeIndex<Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149134,"byte_end":149179,"line_start":1394,"line_end":1394,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149180,"byte_end":149183,"line_start":1395,"line_end":1395,"column_start":1,"column_end":4}},{"value":"/ Created with [`.neighbors()`][1], [`.neighbors_directed()`][2] or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149184,"byte_end":149253,"line_start":1396,"line_end":1396,"column_start":1,"column_end":70}},{"value":"/ [`.neighbors_undirected()`][3].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149254,"byte_end":149289,"line_start":1397,"line_end":1397,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149290,"byte_end":149293,"line_start":1398,"line_end":1398,"column_start":1,"column_end":4}},{"value":"/ [1]: struct.Graph.html#method.neighbors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149294,"byte_end":149337,"line_start":1399,"line_end":1399,"column_start":1,"column_end":44}},{"value":"/ [2]: struct.Graph.html#method.neighbors_directed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149338,"byte_end":149390,"line_start":1400,"line_end":1400,"column_start":1,"column_end":53}},{"value":"/ [3]: struct.Graph.html#method.neighbors_undirected","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149391,"byte_end":149445,"line_start":1401,"line_end":1401,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":151064,"byte_end":151070,"line_start":1457,"line_end":1457,"column_start":12,"column_end":18},"name":"detach","qualname":"<Neighbors>::detach","value":"fn (&self) -> WalkNeighbors<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return a “walker” object that can be used to step through the\n neighbors and edges from the origin node.","sig":null,"attributes":[{"value":"/ Return a “walker” object that can be used to step through the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150788,"byte_end":150857,"line_start":1452,"line_end":1452,"column_start":5,"column_end":70}},{"value":"/ neighbors and edges from the origin node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150862,"byte_end":150907,"line_start":1453,"line_end":1453,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150912,"byte_end":150915,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ Note: The walker does not borrow from the graph, this is to allow mixing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150920,"byte_end":150996,"line_start":1455,"line_end":1455,"column_start":5,"column_end":81}},{"value":"/ edge walking with mutating the graph's weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":151001,"byte_end":151052,"line_start":1456,"line_end":1456,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1157},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":152719,"byte_end":152724,"line_start":1525,"line_end":1525,"column_start":12,"column_end":17},"name":"Edges","qualname":"::graph_impl::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1167}],"decl_id":null,"docs":" Iterator over the edges of from or to a node\n","sig":null,"attributes":[{"value":"/ Iterator over the edges of from or to a node","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":152659,"byte_end":152707,"line_start":1524,"line_end":1524,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155295,"byte_end":155309,"line_start":1612,"line_end":1612,"column_start":12,"column_end":26},"name":"NodeWeightsMut","qualname":"::graph_impl::NodeWeightsMut","value":"NodeWeightsMut {  }","parent":null,"children":[{"krate":0,"index":1189}],"decl_id":null,"docs":" Iterator yielding mutable access to all node weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding mutable access to all node weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155226,"byte_end":155283,"line_start":1611,"line_end":1611,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155783,"byte_end":155797,"line_start":1631,"line_end":1631,"column_start":12,"column_end":26},"name":"EdgeWeightsMut","qualname":"::graph_impl::EdgeWeightsMut","value":"EdgeWeightsMut {  }","parent":null,"children":[{"krate":0,"index":1202}],"decl_id":null,"docs":" Iterator yielding mutable access to all edge weights.\n","sig":null,"attributes":[{"value":"/ Iterator yielding mutable access to all edge weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155714,"byte_end":155771,"line_start":1630,"line_end":1630,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":1243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157798,"byte_end":157808,"line_start":1709,"line_end":1709,"column_start":11,"column_end":21},"name":"GraphIndex","qualname":"::graph_impl::GraphIndex","value":"GraphIndex: Copy","parent":null,"children":[{"krate":0,"index":1244},{"krate":0,"index":1245}],"decl_id":null,"docs":" A  `GraphIndex` is a node or edge index.\n","sig":null,"attributes":[{"value":"/ A  `GraphIndex` is a node or edge index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157743,"byte_end":157787,"line_start":1708,"line_end":1708,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157844,"byte_end":157849,"line_start":1711,"line_end":1711,"column_start":8,"column_end":13},"name":"index","qualname":"::graph_impl::GraphIndex::index","value":"fn (&self) -> usize","parent":{"krate":0,"index":1243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157893,"byte_end":157906,"line_start":1713,"line_end":1713,"column_start":8,"column_end":21},"name":"is_node_index","qualname":"::graph_impl::GraphIndex::is_node_index","value":"fn () -> bool","parent":{"krate":0,"index":1243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1254},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159402,"byte_end":159415,"line_start":1765,"line_end":1765,"column_start":12,"column_end":25},"name":"WalkNeighbors","qualname":"::graph_impl::WalkNeighbors","value":"WalkNeighbors {  }","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257}],"decl_id":null,"docs":" A “walker” object that can be used to step through the edge list of a node.","sig":null,"attributes":[{"value":"/ A “walker” object that can be used to step through the edge list of a node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158280,"byte_end":158363,"line_start":1730,"line_end":1730,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158364,"byte_end":158367,"line_start":1731,"line_end":1731,"column_start":1,"column_end":4}},{"value":"/ Created with [`.detach()`](struct.Neighbors.html#method.detach).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158368,"byte_end":158436,"line_start":1732,"line_end":1732,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158437,"byte_end":158440,"line_start":1733,"line_end":1733,"column_start":1,"column_end":4}},{"value":"/ The walker does not borrow from the graph, so it lets you step through","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158441,"byte_end":158515,"line_start":1734,"line_end":1734,"column_start":1,"column_end":75}},{"value":"/ neighbors or incident edges while also mutating graph weights, as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158516,"byte_end":158585,"line_start":1735,"line_end":1735,"column_start":1,"column_end":70}},{"value":"/ in the following example:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158586,"byte_end":158615,"line_start":1736,"line_end":1736,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158616,"byte_end":158619,"line_start":1737,"line_end":1737,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158620,"byte_end":158627,"line_start":1738,"line_end":1738,"column_start":1,"column_end":8}},{"value":"/ use petgraph::{Graph, Incoming};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158628,"byte_end":158664,"line_start":1739,"line_end":1739,"column_start":1,"column_end":37}},{"value":"/ use petgraph::visit::Dfs;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158665,"byte_end":158694,"line_start":1740,"line_end":1740,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158695,"byte_end":158698,"line_start":1741,"line_end":1741,"column_start":1,"column_end":4}},{"value":"/ let mut gr = Graph::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158699,"byte_end":158729,"line_start":1742,"line_end":1742,"column_start":1,"column_end":31}},{"value":"/ let a = gr.add_node(0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158730,"byte_end":158758,"line_start":1743,"line_end":1743,"column_start":1,"column_end":29}},{"value":"/ let b = gr.add_node(0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158759,"byte_end":158787,"line_start":1744,"line_end":1744,"column_start":1,"column_end":29}},{"value":"/ let c = gr.add_node(0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158788,"byte_end":158816,"line_start":1745,"line_end":1745,"column_start":1,"column_end":29}},{"value":"/ gr.add_edge(a, b, 3.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158817,"byte_end":158843,"line_start":1746,"line_end":1746,"column_start":1,"column_end":27}},{"value":"/ gr.add_edge(b, c, 2.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158844,"byte_end":158870,"line_start":1747,"line_end":1747,"column_start":1,"column_end":27}},{"value":"/ gr.add_edge(c, b, 1.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158871,"byte_end":158897,"line_start":1748,"line_end":1748,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158898,"byte_end":158901,"line_start":1749,"line_end":1749,"column_start":1,"column_end":4}},{"value":"/ // step through the graph and sum incoming edges into the node weight","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158902,"byte_end":158975,"line_start":1750,"line_end":1750,"column_start":1,"column_end":74}},{"value":"/ let mut dfs = Dfs::new(&gr, a);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158976,"byte_end":159011,"line_start":1751,"line_end":1751,"column_start":1,"column_end":36}},{"value":"/ while let Some(node) = dfs.next(&gr) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159012,"byte_end":159054,"line_start":1752,"line_end":1752,"column_start":1,"column_end":43}},{"value":"/     // use a detached neighbors walker","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159055,"byte_end":159097,"line_start":1753,"line_end":1753,"column_start":1,"column_end":43}},{"value":"/     let mut edges = gr.neighbors_directed(node, Incoming).detach();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159098,"byte_end":159169,"line_start":1754,"line_end":1754,"column_start":1,"column_end":72}},{"value":"/     while let Some(edge) = edges.next_edge(&gr) {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159170,"byte_end":159223,"line_start":1755,"line_end":1755,"column_start":1,"column_end":54}},{"value":"/         gr[node] += gr[edge];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159224,"byte_end":159257,"line_start":1756,"line_end":1756,"column_start":1,"column_end":34}},{"value":"/     }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159258,"byte_end":159267,"line_start":1757,"line_end":1757,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159268,"byte_end":159273,"line_start":1758,"line_end":1758,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159274,"byte_end":159277,"line_start":1759,"line_end":1759,"column_start":1,"column_end":4}},{"value":"/ // check the result","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159278,"byte_end":159301,"line_start":1760,"line_end":1760,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(gr[a], 0.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159302,"byte_end":159328,"line_start":1761,"line_end":1761,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(gr[b], 4.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159329,"byte_end":159355,"line_start":1762,"line_end":1762,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(gr[c], 2.);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159356,"byte_end":159382,"line_start":1763,"line_end":1763,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159383,"byte_end":159390,"line_start":1764,"line_end":1764,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":160072,"byte_end":160076,"line_start":1788,"line_end":1788,"column_start":12,"column_end":16},"name":"next","qualname":"<WalkNeighbors<Ix>>::next","value":"fn <N, E, Ty> (&mut self, g: &Graph<N, E, Ty, Ix>) -> Option<(EdgeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Step to the next edge and its endpoint node in the walk for graph `g`.","sig":null,"attributes":[{"value":"/ Step to the next edge and its endpoint node in the walk for graph `g`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159737,"byte_end":159811,"line_start":1782,"line_end":1782,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159816,"byte_end":159819,"line_start":1783,"line_end":1783,"column_start":5,"column_end":8}},{"value":"/ The next node indices are always the others than the starting point","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159824,"byte_end":159895,"line_start":1784,"line_end":1784,"column_start":5,"column_end":76}},{"value":"/ where the `WalkNeighbors` value was created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159900,"byte_end":159948,"line_start":1785,"line_end":1785,"column_start":5,"column_end":53}},{"value":"/ For an `Outgoing` walk, the target nodes,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159953,"byte_end":159998,"line_start":1786,"line_end":1786,"column_start":5,"column_end":50}},{"value":"/ for an `Incoming` walk, the source nodes of the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":160003,"byte_end":160060,"line_start":1787,"line_end":1787,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":160999,"byte_end":161008,"line_start":1813,"line_end":1813,"column_start":12,"column_end":21},"name":"next_node","qualname":"<WalkNeighbors<Ix>>::next_node","value":"fn <N, E, Ty> (&mut self, g: &Graph<N, E, Ty, Ix>) -> Option<NodeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161156,"byte_end":161165,"line_start":1819,"line_end":1819,"column_start":12,"column_end":21},"name":"next_edge","qualname":"<WalkNeighbors<Ix>>::next_edge","value":"fn <N, E, Ty> (&mut self, g: &Graph<N, E, Ty, Ix>) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2735},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161386,"byte_end":161397,"line_start":1828,"line_end":1828,"column_start":12,"column_end":23},"name":"NodeIndices","qualname":"::graph_impl::NodeIndices","value":"NodeIndices {  }","parent":null,"children":[{"krate":0,"index":2737},{"krate":0,"index":2738}],"decl_id":null,"docs":" Iterator over the node indices of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over the node indices of a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161304,"byte_end":161350,"line_start":1826,"line_end":1826,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2745},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162046,"byte_end":162057,"line_start":1855,"line_end":1855,"column_start":12,"column_end":23},"name":"EdgeIndices","qualname":"::graph_impl::EdgeIndices","value":"EdgeIndices {  }","parent":null,"children":[{"krate":0,"index":2747},{"krate":0,"index":2748}],"decl_id":null,"docs":" Iterator over the edge indices of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over the edge indices of a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161964,"byte_end":162010,"line_start":1853,"line_end":1853,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2755},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162685,"byte_end":162698,"line_start":1882,"line_end":1882,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::graph_impl::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2762}],"decl_id":null,"docs":" Reference to a `Graph` edge.\n","sig":null,"attributes":[{"value":"/ Reference to a `Graph` edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162624,"byte_end":162656,"line_start":1880,"line_end":1880,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1321},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":163605,"byte_end":163619,"line_start":1918,"line_end":1918,"column_start":12,"column_end":26},"name":"NodeReferences","qualname":"::graph_impl::NodeReferences","value":"NodeReferences {  }","parent":null,"children":[{"krate":0,"index":1325}],"decl_id":null,"docs":" Iterator over all nodes of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all nodes of a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":163554,"byte_end":163593,"line_start":1917,"line_end":1917,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164668,"byte_end":164674,"line_start":1959,"line_end":1959,"column_start":12,"column_end":18},"name":"weight","qualname":"<EdgeReference>::weight","value":"fn (&self) -> &'a E","parent":null,"children":[],"decl_id":null,"docs":" Access the edge’s weight.","sig":null,"attributes":[{"value":"/ Access the edge’s weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164497,"byte_end":164528,"line_start":1955,"line_end":1955,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164533,"byte_end":164536,"line_start":1956,"line_end":1956,"column_start":5,"column_end":8}},{"value":"/ **NOTE** that this method offers a longer lifetime","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164541,"byte_end":164595,"line_start":1957,"line_end":1957,"column_start":5,"column_end":59}},{"value":"/ than the trait (unfortunately they don't match yet).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164600,"byte_end":164656,"line_start":1958,"line_end":1958,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":165132,"byte_end":165146,"line_start":1977,"line_end":1977,"column_start":12,"column_end":26},"name":"EdgeReferences","qualname":"::graph_impl::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":1364}],"decl_id":null,"docs":" Iterator over all edges of a graph.\n","sig":null,"attributes":[{"value":"/ Iterator over all edges of a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":165081,"byte_end":165120,"line_start":1976,"line_end":1976,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167278,"byte_end":167281,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<Frozen>::new","value":"fn (gr: &'a mut G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Frozen` from a mutable reference to a graph.\n","sig":null,"attributes":[{"value":"/ Create a new `Frozen` from a mutable reference to a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167204,"byte_end":167266,"line_start":18,"line_end":18,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":168156,"byte_end":168171,"line_start":52,"line_end":52,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Frozen>::index_twice_mut","value":"fn <T, U> (&mut self, i: T, j: U) -> (&mut <Graph<N, E, Ty, Ix> as Index<T>>::Output,\n &mut <Graph<N, E, Ty, Ix> as Index<U>>::Output)","parent":null,"children":[],"decl_id":null,"docs":" Index the `Graph` by two indices, any combination of\n node or edge indices is fine.","sig":null,"attributes":[{"value":"/ Index the `Graph` by two indices, any combination of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167968,"byte_end":168024,"line_start":48,"line_end":48,"column_start":5,"column_end":61}},{"value":"/ node or edge indices is fine.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":168029,"byte_end":168062,"line_start":49,"line_end":49,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":168067,"byte_end":168070,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":168075,"byte_end":168144,"line_start":51,"line_end":51,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166688,"byte_end":166694,"line_start":2034,"line_end":2034,"column_start":12,"column_end":18},"name":"Frozen","qualname":"::graph_impl::Frozen","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Frozen` is a graph wrapper.","sig":null,"attributes":[{"value":"/ `Frozen` is a graph wrapper.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166239,"byte_end":166271,"line_start":2023,"line_end":2023,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166272,"byte_end":166275,"line_start":2024,"line_end":2024,"column_start":1,"column_end":4}},{"value":"/ The `Frozen` only allows shared access (read-only) to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166276,"byte_end":166337,"line_start":2025,"line_end":2025,"column_start":1,"column_end":62}},{"value":"/ underlying graph `G`, but it allows mutable access to its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166338,"byte_end":166399,"line_start":2026,"line_end":2026,"column_start":1,"column_end":62}},{"value":"/ node and edge weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166400,"byte_end":166426,"line_start":2027,"line_end":2027,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166427,"byte_end":166430,"line_start":2028,"line_end":2028,"column_start":1,"column_end":4}},{"value":"/ This is used to ensure immutability of the graph's structure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166431,"byte_end":166495,"line_start":2029,"line_end":2029,"column_start":1,"column_end":65}},{"value":"/ while permitting weights to be both read and written.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166496,"byte_end":166553,"line_start":2030,"line_end":2030,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166554,"byte_end":166557,"line_start":2031,"line_end":2031,"column_start":1,"column_end":4}},{"value":"/ See indexing implementations and the traits `Data` and `DataMap`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166558,"byte_end":166626,"line_start":2032,"line_end":2032,"column_start":1,"column_end":69}},{"value":"/ for read-write access to the graph's weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166627,"byte_end":166676,"line_start":2033,"line_end":2033,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1451},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dot","qualname":"::dot","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":2856},{"krate":0,"index":2873},{"krate":0,"index":2869},{"krate":0,"index":2870},{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":1473},{"krate":0,"index":1478},{"krate":0,"index":1482},{"krate":0,"index":1490},{"krate":0,"index":1496},{"krate":0,"index":1502},{"krate":0,"index":1506},{"krate":0,"index":1510},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1521}],"decl_id":null,"docs":" Simple graphviz dot file format output.\n","sig":null,"attributes":[{"value":"! Simple graphviz dot file format output.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":169742,"byte_end":169785,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1458},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170871,"byte_end":170874,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"Dot","qualname":"::dot::Dot","value":"Dot {  }","parent":null,"children":[{"krate":0,"index":1461},{"krate":0,"index":1462}],"decl_id":null,"docs":" `Dot` implements output to graphviz .dot format for a graph.","sig":null,"attributes":[{"value":"/ `Dot` implements output to graphviz .dot format for a graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":169850,"byte_end":169914,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":169915,"byte_end":169918,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Formatting and options are rather simple, this is mostly intended","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":169919,"byte_end":169988,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/ for debugging. Exact output may change.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":169989,"byte_end":170032,"line_start":10,"line_end":10,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170033,"byte_end":170036,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170037,"byte_end":170051,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170052,"byte_end":170055,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170056,"byte_end":170063,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170064,"byte_end":170088,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"/ use petgraph::dot::{Dot, Config};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170089,"byte_end":170126,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170127,"byte_end":170130,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let mut graph = Graph::<_, ()>::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170131,"byte_end":170173,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/ graph.add_node(\"A\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170174,"byte_end":170198,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"B\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170199,"byte_end":170223,"line_start":20,"line_end":20,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"C\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170224,"byte_end":170248,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/ graph.add_node(\"D\");","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170249,"byte_end":170273,"line_start":22,"line_end":22,"column_start":1,"column_end":25}},{"value":"/ graph.extend_with_edges(&[","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170274,"byte_end":170304,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/     (0, 1), (0, 2), (0, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170305,"byte_end":170336,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/     (1, 2), (1, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170337,"byte_end":170360,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/     (2, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170361,"byte_end":170376,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"/ ]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170377,"byte_end":170384,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170385,"byte_end":170388,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ println!(\"{:?}\", Dot::with_config(&graph, &[Config::EdgeNoLabel]));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170389,"byte_end":170460,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170461,"byte_end":170464,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // In this case the output looks like this:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170465,"byte_end":170512,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/ // ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170513,"byte_end":170520,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ // digraph {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170521,"byte_end":170537,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/ //     0 [label=\"\\\"A\\\"\"]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170538,"byte_end":170566,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/ //     1 [label=\"\\\"B\\\"\"]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170567,"byte_end":170595,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ //     2 [label=\"\\\"C\\\"\"]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170596,"byte_end":170624,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ //     3 [label=\"\\\"D\\\"\"]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170625,"byte_end":170653,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ //     0 -> 1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170654,"byte_end":170671,"line_start":38,"line_end":38,"column_start":1,"column_end":18}},{"value":"/ //     0 -> 2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170672,"byte_end":170689,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/ //     0 -> 3","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170690,"byte_end":170707,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ //     1 -> 2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170708,"byte_end":170725,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ //     1 -> 3","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170726,"byte_end":170743,"line_start":42,"line_end":42,"column_start":1,"column_end":18}},{"value":"/ //     2 -> 3","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170744,"byte_end":170761,"line_start":43,"line_end":43,"column_start":1,"column_end":18}},{"value":"/ // }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170762,"byte_end":170770,"line_start":44,"line_end":44,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170771,"byte_end":170774,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // If you need multiple config options, just list them all in the slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170775,"byte_end":170851,"line_start":46,"line_end":46,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":170852,"byte_end":170859,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171192,"byte_end":171195,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<Dot>::new","value":"fn (graph: G) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dot` formatting wrapper with default configuration.\n","sig":null,"attributes":[{"value":"/ Create a `Dot` formatting wrapper with default configuration.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171115,"byte_end":171180,"line_start":58,"line_end":58,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171341,"byte_end":171352,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Dot>::with_config","value":"fn (graph: G, config: &'a [Config]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dot` formatting wrapper with custom configuration.\n","sig":null,"attributes":[{"value":"/ Create a `Dot` formatting wrapper with custom configuration.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171265,"byte_end":171329,"line_start":63,"line_end":63,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2857},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171674,"byte_end":171688,"line_start":78,"line_end":78,"column_start":5,"column_end":19},"name":"NodeIndexLabel","qualname":"::dot::Config::NodeIndexLabel","value":"Config::NodeIndexLabel","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":" Use indices for node labels.\n","sig":null,"attributes":[{"value":"/ Use indices for node labels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171637,"byte_end":171669,"line_start":77,"line_end":77,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2859},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171731,"byte_end":171745,"line_start":80,"line_end":80,"column_start":5,"column_end":19},"name":"EdgeIndexLabel","qualname":"::dot::Config::EdgeIndexLabel","value":"Config::EdgeIndexLabel","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":" Use indices for edge labels.\n","sig":null,"attributes":[{"value":"/ Use indices for edge labels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171694,"byte_end":171726,"line_start":79,"line_end":79,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2861},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171779,"byte_end":171790,"line_start":82,"line_end":82,"column_start":5,"column_end":16},"name":"EdgeNoLabel","qualname":"::dot::Config::EdgeNoLabel","value":"Config::EdgeNoLabel","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":" Use no edge labels.\n","sig":null,"attributes":[{"value":"/ Use no edge labels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171751,"byte_end":171774,"line_start":81,"line_end":81,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2863},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171815,"byte_end":171826,"line_start":84,"line_end":84,"column_start":5,"column_end":16},"name":"_Incomplete","qualname":"::dot::Config::_Incomplete","value":"Config::_Incomplete(())","parent":{"krate":0,"index":2856},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2856},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171624,"byte_end":171630,"line_start":76,"line_end":76,"column_start":10,"column_end":16},"name":"Config","qualname":"::dot::Config","value":"Config::{NodeIndexLabel, EdgeIndexLabel, EdgeNoLabel, _Incomplete}","parent":null,"children":[{"krate":0,"index":2857},{"krate":0,"index":2859},{"krate":0,"index":2861},{"krate":0,"index":2863}],"decl_id":null,"docs":" `Dot` configuration.","sig":null,"attributes":[{"value":"/ `Dot` configuration.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171482,"byte_end":171506,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171507,"byte_end":171510,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ This enum does not have an exhaustive definition (will be expanded)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171511,"byte_end":171582,"line_start":74,"line_end":74,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":1524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unionfind","qualname":"::unionfind","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":2877},{"krate":0,"index":2884},{"krate":0,"index":2881},{"krate":0,"index":1526},{"krate":0,"index":1528}],"decl_id":null,"docs":" `UnionFind<K>` is a disjoint-set data structure.\n","sig":null,"attributes":[{"value":"! `UnionFind<K>` is a disjoint-set data structure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":175667,"byte_end":175719,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176261,"byte_end":176270,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"UnionFind","qualname":"::unionfind::UnionFind","value":"UnionFind {  }","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2880}],"decl_id":null,"docs":" `UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements\n indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.","sig":null,"attributes":[{"value":"/ `UnionFind<K>` is a disjoint-set data structure. It tracks set membership of *n* elements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":175751,"byte_end":175844,"line_start":5,"line_end":5,"column_start":1,"column_end":94}},{"value":"/ indexed from *0* to *n - 1*. The scalar type is `K` which must be an unsigned integer type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":175845,"byte_end":175940,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":175941,"byte_end":175944,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":175945,"byte_end":176007,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176008,"byte_end":176011,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Too awesome not to quote:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176012,"byte_end":176041,"line_start":10,"line_end":10,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176042,"byte_end":176045,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ “The amortized time per operation is **O(α(n))** where **α(n)** is the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176046,"byte_end":176124,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ inverse of **f(x) = A(x, x)** with **A** being the extremely fast-growing Ackermann function.”","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176125,"byte_end":176225,"line_start":13,"line_end":13,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177045,"byte_end":177048,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<UnionFind<K>>::new","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `UnionFind` of `n` disjoint sets.\n","sig":null,"attributes":[{"value":"/ Create a new `UnionFind` of `n` disjoint sets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176983,"byte_end":177033,"line_start":39,"line_end":39,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177325,"byte_end":177329,"line_start":51,"line_end":51,"column_start":12,"column_end":16},"name":"find","qualname":"<UnionFind<K>>::find","value":"fn (&self, x: K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Return the representative for `x`.","sig":null,"attributes":[{"value":"/ Return the representative for `x`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177223,"byte_end":177261,"line_start":48,"line_end":48,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177266,"byte_end":177269,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` is out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177274,"byte_end":177313,"line_start":50,"line_end":50,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":178021,"byte_end":178029,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"find_mut","qualname":"<UnionFind<K>>::find_mut","value":"fn (&mut self, x: K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Return the representative for `x`.","sig":null,"attributes":[{"value":"/ Return the representative for `x`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177777,"byte_end":177815,"line_start":68,"line_end":68,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177820,"byte_end":177823,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Write back the found representative, flattening the internal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177828,"byte_end":177892,"line_start":70,"line_end":70,"column_start":5,"column_end":69}},{"value":"/ datastructure in the process and quicken future lookups.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177897,"byte_end":177957,"line_start":71,"line_end":71,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177962,"byte_end":177965,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `x` is out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":177970,"byte_end":178009,"line_start":73,"line_end":73,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":178776,"byte_end":178781,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"union","qualname":"<UnionFind<K>>::union","value":"fn (&mut self, x: K, y: K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unify the two sets containing `x` and `y`.","sig":null,"attributes":[{"value":"/ Unify the two sets containing `x` and `y`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":178563,"byte_end":178609,"line_start":96,"line_end":96,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":178614,"byte_end":178617,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Return `false` if the sets were already the same, `true` if they were unified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":178622,"byte_end":178704,"line_start":98,"line_end":98,"column_start":5,"column_end":87}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":178709,"byte_end":178713,"line_start":99,"line_end":99,"column_start":5,"column_end":9}},{"value":"/ **Panics** if `x` or `y` is out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":178718,"byte_end":178764,"line_start":100,"line_end":100,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":179657,"byte_end":179670,"line_start":133,"line_end":133,"column_start":12,"column_end":25},"name":"into_labeling","qualname":"<UnionFind<K>>::into_labeling","value":"fn (mut self) -> Vec<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a vector mapping each element to its representative.\n","sig":null,"attributes":[{"value":"/ Return a vector mapping each element to its representative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":179582,"byte_end":179645,"line_start":132,"line_end":132,"column_start":5,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180839,"byte_end":180847,"line_start":34,"line_end":34,"column_start":8,"column_end":16},"name":"dijkstra","qualname":"::dijkstra::dijkstra","value":"fn <G, F, K> (graph: G, start: G::NodeId, goal: Option<G::NodeId>, mut edge_cost: F) -> HashMap<G::NodeId, K>","parent":null,"children":[],"decl_id":null,"docs":" [Generic] Dijkstra's shortest path algorithm.","sig":null,"attributes":[{"value":"/ [Generic] Dijkstra's shortest path algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180305,"byte_end":180354,"line_start":21,"line_end":21,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180355,"byte_end":180358,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Compute the length of the shortest path from `start` to every reachable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180359,"byte_end":180434,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180435,"byte_end":180444,"line_start":24,"line_end":24,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180445,"byte_end":180448,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`. The function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180449,"byte_end":180524,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ `edge_cost` should return the cost for a particular edge, which is used","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180525,"byte_end":180600,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ to compute path costs. Edge costs must be non-negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180601,"byte_end":180660,"line_start":28,"line_end":28,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180661,"byte_end":180664,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ If `goal` is not `None`, then the algorithm terminates once the `goal` node's","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180665,"byte_end":180746,"line_start":30,"line_end":30,"column_start":1,"column_end":82}},{"value":"/ cost is calculated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180747,"byte_end":180770,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180771,"byte_end":180774,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Returns a `HashMap` that maps `NodeId` to path cost.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dijkstra.rs","byte_start":180775,"byte_end":180831,"line_start":33,"line_end":33,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":184242,"byte_end":184247,"line_start":67,"line_end":67,"column_start":8,"column_end":13},"name":"astar","qualname":"::astar::astar","value":"fn <G, F, H, K, IsGoal> (graph: G, start: G::NodeId, mut is_goal: IsGoal, mut edge_cost: F, mut estimate_cost: H) -> Option<(K, Vec<G::NodeId>)>","parent":null,"children":[],"decl_id":null,"docs":" [Generic] A* shortest path algorithm.","sig":null,"attributes":[{"value":"/ [Generic] A* shortest path algorithm.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":182734,"byte_end":182775,"line_start":23,"line_end":23,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":182776,"byte_end":182779,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Computes the shortest path from `start` to `finish`, including the total path cost.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":182780,"byte_end":182867,"line_start":25,"line_end":25,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":182868,"byte_end":182871,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ `finish` is implicitly given via the `is_goal` callback, which should return `true` if the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":182872,"byte_end":182966,"line_start":27,"line_end":27,"column_start":1,"column_end":95}},{"value":"/ given node is the finish node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":182967,"byte_end":183001,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183002,"byte_end":183005,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The function `edge_cost` should return the cost for a particular edge. Edge costs must be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183006,"byte_end":183099,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"/ non-negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183100,"byte_end":183117,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183118,"byte_end":183121,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The function `estimate_cost` should return the estimated cost to the finish for a particular","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183122,"byte_end":183218,"line_start":33,"line_end":33,"column_start":1,"column_end":97}},{"value":"/ node. For the algorithm to find the actual shortest path, it should be admissible, meaning that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183219,"byte_end":183318,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"/ it should never overestimate the actual cost to get to the nearest goal node. Estimate costs","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183319,"byte_end":183415,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/ must also be non-negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183416,"byte_end":183446,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183447,"byte_end":183450,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The graph should be `Visitable` and implement `IntoEdges`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183451,"byte_end":183513,"line_start":38,"line_end":38,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183514,"byte_end":183517,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183518,"byte_end":183525,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ use petgraph::Graph;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183526,"byte_end":183550,"line_start":41,"line_end":41,"column_start":1,"column_end":25}},{"value":"/ use petgraph::algo::astar;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183551,"byte_end":183581,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183582,"byte_end":183585,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let mut g = Graph::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183586,"byte_end":183615,"line_start":44,"line_end":44,"column_start":1,"column_end":30}},{"value":"/ let a = g.add_node((0., 0.));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183616,"byte_end":183649,"line_start":45,"line_end":45,"column_start":1,"column_end":34}},{"value":"/ let b = g.add_node((2., 0.));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183650,"byte_end":183683,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"/ let c = g.add_node((1., 1.));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183684,"byte_end":183717,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/ let d = g.add_node((0., 2.));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183718,"byte_end":183751,"line_start":48,"line_end":48,"column_start":1,"column_end":34}},{"value":"/ let e = g.add_node((3., 3.));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183752,"byte_end":183785,"line_start":49,"line_end":49,"column_start":1,"column_end":34}},{"value":"/ let f = g.add_node((4., 2.));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183786,"byte_end":183819,"line_start":50,"line_end":50,"column_start":1,"column_end":34}},{"value":"/ g.extend_with_edges(&[","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183820,"byte_end":183846,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"/     (a, b, 2),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183847,"byte_end":183865,"line_start":52,"line_end":52,"column_start":1,"column_end":19}},{"value":"/     (a, d, 4),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183866,"byte_end":183884,"line_start":53,"line_end":53,"column_start":1,"column_end":19}},{"value":"/     (b, c, 1),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183885,"byte_end":183903,"line_start":54,"line_end":54,"column_start":1,"column_end":19}},{"value":"/     (b, f, 7),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183904,"byte_end":183922,"line_start":55,"line_end":55,"column_start":1,"column_end":19}},{"value":"/     (c, e, 5),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183923,"byte_end":183941,"line_start":56,"line_end":56,"column_start":1,"column_end":19}},{"value":"/     (e, f, 1),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183942,"byte_end":183960,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/     (d, e, 1),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183961,"byte_end":183979,"line_start":58,"line_end":58,"column_start":1,"column_end":19}},{"value":"/ ]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183980,"byte_end":183987,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183988,"byte_end":183991,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ let path = astar(&g, a, |finish| finish == f, |e| *e.weight(), |_| 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":183992,"byte_end":184066,"line_start":61,"line_end":61,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(path, Some((6, vec![a, d, e, f])));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":184067,"byte_end":184117,"line_start":62,"line_end":62,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":184118,"byte_end":184125,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":184126,"byte_end":184129,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ Returns the total cost + the path of subsequent `NodeId` from start to finish, if one was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":184130,"byte_end":184223,"line_start":65,"line_end":65,"column_start":1,"column_end":94}},{"value":"/ found.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":184224,"byte_end":184234,"line_start":66,"line_end":66,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":1585},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"csr","qualname":"::csr","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1592},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1602},{"krate":0,"index":1606},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1619},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":2887},{"krate":0,"index":2898},{"krate":0,"index":1623},{"krate":0,"index":1629},{"krate":0,"index":1635},{"krate":0,"index":2904},{"krate":0,"index":2908},{"krate":0,"index":2906},{"krate":0,"index":1643},{"krate":0,"index":1651},{"krate":0,"index":2910},{"krate":0,"index":2925},{"krate":0,"index":2919},{"krate":0,"index":2931},{"krate":0,"index":2941},{"krate":0,"index":1672},{"krate":0,"index":1678},{"krate":0,"index":1683},{"krate":0,"index":1689},{"krate":0,"index":1701},{"krate":0,"index":1709},{"krate":0,"index":1716},{"krate":0,"index":1725},{"krate":0,"index":1737},{"krate":0,"index":1744},{"krate":0,"index":1752},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1768},{"krate":0,"index":2947},{"krate":0,"index":2955},{"krate":0,"index":2951},{"krate":0,"index":1769},{"krate":0,"index":1775},{"krate":0,"index":1783},{"krate":0,"index":1791},{"krate":0,"index":1796},{"krate":0,"index":1803},{"krate":0,"index":1809},{"krate":0,"index":1813},{"krate":0,"index":1818},{"krate":0,"index":1826},{"krate":0,"index":1832}],"decl_id":null,"docs":" Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.\n","sig":null,"attributes":[{"value":"! Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":187335,"byte_end":187402,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":1619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":187940,"byte_end":187949,"line_start":25,"line_end":25,"column_start":10,"column_end":19},"name":"NodeIndex","qualname":"::csr::NodeIndex","value":"Ix","parent":null,"children":[],"decl_id":null,"docs":" Csr node index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Csr node index type, a plain integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":187889,"byte_end":187930,"line_start":24,"line_end":24,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":1621},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188023,"byte_end":188032,"line_start":27,"line_end":27,"column_start":10,"column_end":19},"name":"EdgeIndex","qualname":"::csr::EdgeIndex","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Csr edge index type, a plain integer.\n","sig":null,"attributes":[{"value":"/ Csr edge index type, a plain integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":187972,"byte_end":188013,"line_start":26,"line_end":26,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2887},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188766,"byte_end":188769,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"Csr","qualname":"::csr::Csr","value":"Csr {  }","parent":null,"children":[{"krate":0,"index":2892},{"krate":0,"index":2893},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897}],"decl_id":null,"docs":" Compressed Sparse Row ([`CSR`]) is a sparse adjacency matrix graph.","sig":null,"attributes":[{"value":"/ Compressed Sparse Row ([`CSR`]) is a sparse adjacency matrix graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188084,"byte_end":188155,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188156,"byte_end":188159,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `CSR` is parameterized over:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188160,"byte_end":188192,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188193,"byte_end":188196,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - Associated data `N` for nodes and `E` for edges, called *weights*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188197,"byte_end":188269,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"/   The associated data can be of arbitrary type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188270,"byte_end":188321,"line_start":36,"line_end":36,"column_start":1,"column_end":52}},{"value":"/ - Edge type `Ty` that determines whether the graph edges are directed or undirected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188322,"byte_end":188410,"line_start":37,"line_end":37,"column_start":1,"column_end":89}},{"value":"/ - Index type `Ix`, which determines the maximum size of the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188411,"byte_end":188481,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188482,"byte_end":188485,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188486,"byte_end":188489,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Using **O(|E| + |V|)** space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188490,"byte_end":188523,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188524,"byte_end":188527,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Self loops are allowed, no parallel edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188528,"byte_end":188574,"line_start":43,"line_end":43,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188575,"byte_end":188578,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Fast iteration of the outgoing edges of a vertex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188579,"byte_end":188632,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/ [`CSR`]: https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_(CSR,_CRS_or_Yale_format)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":188633,"byte_end":188737,"line_start":46,"line_end":46,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189811,"byte_end":189814,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Csr<N, E, Ty, Ix>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `Csr`.\n","sig":null,"attributes":[{"value":"/ Create an empty `Csr`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189773,"byte_end":189799,"line_start":87,"line_end":87,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190652,"byte_end":190662,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"with_nodes","qualname":"<Csr<N, E, Ty, Ix>>::with_nodes","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Csr`] with `n` nodes. `N` must implement [`Default`] for the weight of each node.","sig":null,"attributes":[{"value":"/ Create a new [`Csr`] with `n` nodes. `N` must implement [`Default`] for the weight of each node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190036,"byte_end":190136,"line_start":99,"line_end":99,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190141,"byte_end":190144,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ [`Default`]: https://doc.rust-lang.org/nightly/core/default/trait.Default.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190149,"byte_end":190231,"line_start":101,"line_end":101,"column_start":5,"column_end":87}},{"value":"/ [`Csr`]: #struct.Csr.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190236,"byte_end":190265,"line_start":102,"line_end":102,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190270,"byte_end":190273,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190278,"byte_end":190291,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190296,"byte_end":190307,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/ use petgraph::csr::Csr;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190312,"byte_end":190339,"line_start":106,"line_end":106,"column_start":5,"column_end":32}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190344,"byte_end":190373,"line_start":107,"line_end":107,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190378,"byte_end":190381,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190386,"byte_end":190403,"line_start":109,"line_end":109,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190408,"byte_end":190411,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ let graph = Csr::<u8,()>::with_nodes(5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190416,"byte_end":190460,"line_start":111,"line_end":111,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(graph.node_count(),5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190465,"byte_end":190502,"line_start":112,"line_end":112,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(graph.edge_count(),0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190507,"byte_end":190544,"line_start":113,"line_end":113,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190549,"byte_end":190552,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(graph[0],0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190557,"byte_end":190584,"line_start":115,"line_end":115,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(graph[4],0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190589,"byte_end":190616,"line_start":116,"line_end":116,"column_start":5,"column_end":32}},{"value":"/ # }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190621,"byte_end":190628,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190633,"byte_end":190640,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2904},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191055,"byte_end":191069,"line_start":135,"line_end":135,"column_start":12,"column_end":26},"name":"EdgesNotSorted","qualname":"::csr::EdgesNotSorted","value":"EdgesNotSorted {  }","parent":null,"children":[{"krate":0,"index":2905}],"decl_id":null,"docs":" Csr creation error: edges were not in sorted order.\n","sig":null,"attributes":[{"value":"/ Csr creation error: edges were not in sorted order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":190964,"byte_end":191019,"line_start":133,"line_end":133,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191846,"byte_end":191863,"line_start":164,"line_end":164,"column_start":12,"column_end":29},"name":"from_sorted_edges","qualname":"<Csr<N, E, Directed, Ix>>::from_sorted_edges","value":"fn <Edge> (edges: &[Edge]) -> Result<Self, EdgesNotSorted>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Csr` from a sorted sequence of edges","sig":null,"attributes":[{"value":"/ Create a new `Csr` from a sorted sequence of edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191179,"byte_end":191233,"line_start":143,"line_end":143,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191238,"byte_end":191241,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Edges **must** be sorted and unique, where the sort order is the default","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191246,"byte_end":191322,"line_start":145,"line_end":145,"column_start":5,"column_end":81}},{"value":"/ order for the pair *(u, v)* in Rust (*u* has priority).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191327,"byte_end":191386,"line_start":146,"line_end":146,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191391,"byte_end":191394,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(|E| + |V|)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191399,"byte_end":191437,"line_start":148,"line_end":148,"column_start":5,"column_end":43}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191442,"byte_end":191455,"line_start":149,"line_end":149,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191460,"byte_end":191471,"line_start":150,"line_end":150,"column_start":5,"column_end":16}},{"value":"/ use petgraph::csr::Csr;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191476,"byte_end":191503,"line_start":151,"line_end":151,"column_start":5,"column_end":32}},{"value":"/ use petgraph::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191508,"byte_end":191537,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191542,"byte_end":191545,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191550,"byte_end":191567,"line_start":154,"line_end":154,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191572,"byte_end":191575,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let graph = Csr::<(),()>::from_sorted_edges(&[","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191580,"byte_end":191630,"line_start":156,"line_end":156,"column_start":5,"column_end":55}},{"value":"/                     (0, 1), (0, 2),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191635,"byte_end":191674,"line_start":157,"line_end":157,"column_start":5,"column_end":44}},{"value":"/                     (1, 0), (1, 2), (1, 3),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191679,"byte_end":191726,"line_start":158,"line_end":158,"column_start":5,"column_end":52}},{"value":"/                     (2, 0),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191731,"byte_end":191762,"line_start":159,"line_end":159,"column_start":5,"column_end":36}},{"value":"/                     (3, 1),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191767,"byte_end":191798,"line_start":160,"line_end":160,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191803,"byte_end":191810,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ # }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191815,"byte_end":191822,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191827,"byte_end":191834,"line_start":163,"line_end":163,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":194847,"byte_end":194857,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Csr<N, E, Ty, Ix>>::node_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":194921,"byte_end":194931,"line_start":245,"line_end":245,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Csr<N, E, Ty, Ix>>::edge_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195085,"byte_end":195096,"line_start":253,"line_end":253,"column_start":12,"column_end":23},"name":"is_directed","qualname":"<Csr<N, E, Ty, Ix>>::is_directed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195183,"byte_end":195194,"line_start":258,"line_end":258,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Csr<N, E, Ty, Ix>>::clear_edges","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges\n","sig":null,"attributes":[{"value":"/ Remove all edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195151,"byte_end":195171,"line_start":257,"line_end":257,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195509,"byte_end":195517,"line_start":270,"line_end":270,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Csr<N, E, Ty, Ix>>::add_node","value":"fn (&mut self, weight: N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Adds a new node with the given weight, returning the corresponding node index.\n","sig":null,"attributes":[{"value":"/ Adds a new node with the given weight, returning the corresponding node index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195415,"byte_end":195497,"line_start":269,"line_end":269,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195941,"byte_end":195949,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Csr<N, E, Ty, Ix>>::add_edge","value":"fn (&mut self, a: NodeIndex<Ix>, b: NodeIndex<Ix>, weight: E) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the edge was added","sig":null,"attributes":[{"value":"/ Return `true` if the edge was added","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195701,"byte_end":195740,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195745,"byte_end":195748,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ If you add all edges in row-major order, the time complexity","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195753,"byte_end":195817,"line_start":279,"line_end":279,"column_start":5,"column_end":69}},{"value":"/ is **O(|V|·|E|)** for the whole operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195822,"byte_end":195869,"line_start":280,"line_end":280,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195874,"byte_end":195877,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `a` or `b` are out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":195882,"byte_end":195929,"line_start":282,"line_end":282,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":197785,"byte_end":197798,"line_start":338,"line_end":338,"column_start":12,"column_end":25},"name":"contains_edge","qualname":"<Csr<N, E, Ty, Ix>>::contains_edge","value":"fn (&self, a: NodeIndex<Ix>, b: NodeIndex<Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(log |V|)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(log |V|)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":197678,"byte_end":197714,"line_start":335,"line_end":335,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":197719,"byte_end":197722,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":197727,"byte_end":197773,"line_start":337,"line_end":337,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198379,"byte_end":198389,"line_start":356,"line_end":356,"column_start":12,"column_end":22},"name":"out_degree","qualname":"<Csr<N, E, Ty, Ix>>::out_degree","value":"fn (&self, a: NodeIndex<Ix>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198278,"byte_end":198308,"line_start":353,"line_end":353,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198313,"byte_end":198316,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198321,"byte_end":198367,"line_start":355,"line_end":355,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198603,"byte_end":198618,"line_start":364,"line_end":364,"column_start":12,"column_end":27},"name":"neighbors_slice","qualname":"<Csr<N, E, Ty, Ix>>::neighbors_slice","value":"fn (&self, a: NodeIndex<Ix>) -> &[NodeIndex<Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198502,"byte_end":198532,"line_start":361,"line_end":361,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198537,"byte_end":198540,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198545,"byte_end":198591,"line_start":363,"line_end":363,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198809,"byte_end":198820,"line_start":371,"line_end":371,"column_start":12,"column_end":23},"name":"edges_slice","qualname":"<Csr<N, E, Ty, Ix>>::edges_slice","value":"fn (&self, a: NodeIndex<Ix>) -> &[E]","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198708,"byte_end":198738,"line_start":368,"line_end":368,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198743,"byte_end":198746,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198751,"byte_end":198797,"line_start":370,"line_end":370,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199198,"byte_end":199203,"line_start":382,"line_end":382,"column_start":12,"column_end":17},"name":"edges","qualname":"<Csr<N, E, Ty, Ix>>::edges","value":"fn (&self, a: NodeIndex<Ix>) -> Edges<E, Ty, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator of all edges of `a`.","sig":null,"attributes":[{"value":"/ Return an iterator of all edges of `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198912,"byte_end":198955,"line_start":375,"line_end":375,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198960,"byte_end":198963,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ - `Directed`: Outgoing edges from `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":198968,"byte_end":199010,"line_start":377,"line_end":377,"column_start":5,"column_end":47}},{"value":"/ - `Undirected`: All edges connected to `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199015,"byte_end":199062,"line_start":378,"line_end":378,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199067,"byte_end":199070,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the node `a` does not exist.<br>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199075,"byte_end":199125,"line_start":380,"line_end":380,"column_start":5,"column_end":55}},{"value":"/ Iterator element type is `EdgeReference<E, Ty, Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199130,"byte_end":199186,"line_start":381,"line_end":381,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199502,"byte_end":199507,"line_start":394,"line_end":394,"column_start":12,"column_end":17},"name":"Edges","qualname":"::csr::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2931},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199720,"byte_end":199733,"line_start":402,"line_end":402,"column_start":12,"column_end":25},"name":"EdgeReference","qualname":"::csr::EdgeReference","value":"EdgeReference {  }","parent":null,"children":[{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2940}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200333,"byte_end":200339,"line_start":425,"line_end":425,"column_start":12,"column_end":18},"name":"weight","qualname":"<EdgeReference>::weight","value":"fn (&self) -> &'a E","parent":null,"children":[],"decl_id":null,"docs":" Access the edge’s weight.","sig":null,"attributes":[{"value":"/ Access the edge’s weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200162,"byte_end":200193,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200198,"byte_end":200201,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ **NOTE** that this method offers a longer lifetime","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200206,"byte_end":200260,"line_start":423,"line_end":423,"column_start":5,"column_end":59}},{"value":"/ than the trait (unfortunately they don't match yet).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200265,"byte_end":200321,"line_start":424,"line_end":424,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1725},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":202023,"byte_end":202037,"line_start":489,"line_end":489,"column_start":12,"column_end":26},"name":"EdgeReferences","qualname":"::csr::EdgeReferences","value":"EdgeReferences {  }","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":204109,"byte_end":204118,"line_start":566,"line_end":566,"column_start":12,"column_end":21},"name":"Neighbors","qualname":"::csr::Neighbors","value":"Neighbors {  }","parent":null,"children":[{"krate":0,"index":2950}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1809},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205960,"byte_end":205975,"line_start":639,"line_end":639,"column_start":12,"column_end":27},"name":"NodeIdentifiers","qualname":"::csr::NodeIdentifiers","value":"NodeIdentifiers {  }","parent":null,"children":[{"krate":0,"index":1811},{"krate":0,"index":1812}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221686,"byte_end":221699,"line_start":166,"line_end":166,"column_start":8,"column_end":21},"name":"is_isomorphic","qualname":"::isomorphism::is_isomorphic","value":"fn <N, E, Ty, Ix> (g0: &Graph<N, E, Ty, Ix>, g1: &Graph<N, E, Ty, Ix>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" [Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.","sig":null,"attributes":[{"value":"/ [Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221308,"byte_end":221377,"line_start":155,"line_end":155,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221378,"byte_end":221381,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, only matching graph syntactically (graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221382,"byte_end":221451,"line_start":157,"line_end":157,"column_start":1,"column_end":70}},{"value":"/ structure).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221452,"byte_end":221467,"line_start":158,"line_end":158,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221468,"byte_end":221471,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221472,"byte_end":221513,"line_start":160,"line_end":160,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221514,"byte_end":221517,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ **Reference**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221518,"byte_end":221535,"line_start":162,"line_end":162,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221536,"byte_end":221539,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ * Luigi P. Cordella, Pasquale Foggia, Carlo Sansone, Mario Vento;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221540,"byte_end":221609,"line_start":164,"line_end":164,"column_start":1,"column_end":70}},{"value":"/   *A (Sub)Graph Isomorphism Algorithm for Matching Large Graphs*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":221610,"byte_end":221678,"line_start":165,"line_end":165,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":222392,"byte_end":222414,"line_start":185,"line_end":185,"column_start":8,"column_end":30},"name":"is_isomorphic_matching","qualname":"::isomorphism::is_isomorphic_matching","value":"fn <N, E, Ty, Ix, F, G> (g0: &Graph<N, E, Ty, Ix>, g1: &Graph<N, E, Ty, Ix>, mut node_match: F, mut edge_match: G) -> bool","parent":null,"children":[],"decl_id":null,"docs":" [Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.","sig":null,"attributes":[{"value":"/ [Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":222122,"byte_end":222191,"line_start":179,"line_end":179,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":222192,"byte_end":222195,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ Using the VF2 algorithm, examining both syntactic and semantic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":222196,"byte_end":222262,"line_start":181,"line_end":181,"column_start":1,"column_end":67}},{"value":"/ graph isomorphism (graph structure and matching node and edge weights).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":222263,"byte_end":222338,"line_start":182,"line_end":182,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":222339,"byte_end":222342,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ The graphs should not be multigraphs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":222343,"byte_end":222384,"line_start":184,"line_end":184,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":1973},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1980},{"krate":0,"index":1984},{"krate":0,"index":1990}],"decl_id":null,"docs":" Commonly used items.","sig":null,"attributes":[{"value":"! Commonly used items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234442,"byte_end":234466,"line_start":2,"line_end":2,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234467,"byte_end":234470,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234471,"byte_end":234478,"line_start":4,"line_end":4,"column_start":1,"column_end":8}},{"value":"! use petgraph::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234479,"byte_end":234508,"line_start":5,"line_end":5,"column_start":1,"column_end":30}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/prelude.rs","byte_start":234509,"byte_end":234516,"line_start":6,"line_end":6,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1992},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1705,"byte_end":1710,"line_start":72,"line_end":72,"column_start":9,"column_end":14},"name":"graph","qualname":"::graph","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":1993}],"decl_id":null,"docs":" `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.\n","sig":null,"attributes":[{"value":"/ `Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1606,"byte_end":1696,"line_start":71,"line_end":71,"column_start":1,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2690,"byte_end":2698,"line_start":119,"line_end":119,"column_start":5,"column_end":13},"name":"Outgoing","qualname":"::Direction::Outgoing","value":"Direction::Outgoing","parent":{"krate":0,"index":3002},"children":[],"decl_id":null,"docs":" An `Outgoing` edge is an outward edge *from* the current node.\n","sig":null,"attributes":[{"value":"/ An `Outgoing` edge is an outward edge *from* the current node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2619,"byte_end":2685,"line_start":118,"line_end":118,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2777,"byte_end":2785,"line_start":121,"line_end":121,"column_start":5,"column_end":13},"name":"Incoming","qualname":"::Direction::Incoming","value":"Direction::Incoming","parent":{"krate":0,"index":3002},"children":[],"decl_id":null,"docs":" An `Incoming` edge is an inbound edge *to* the current node.\n","sig":null,"attributes":[{"value":"/ An `Incoming` edge is an inbound edge *to* the current node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2708,"byte_end":2772,"line_start":120,"line_end":120,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":3002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2603,"byte_end":2612,"line_start":117,"line_end":117,"column_start":10,"column_end":19},"name":"Direction","qualname":"::Direction","value":"Direction::{Outgoing, Incoming}","parent":null,"children":[{"krate":0,"index":3003},{"krate":0,"index":3006}],"decl_id":null,"docs":" Edge direction.\n","sig":null,"attributes":[{"value":"/ Edge direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2498,"byte_end":2517,"line_start":114,"line_end":114,"column_start":1,"column_end":20}},{"value":"repr(usize)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2579,"byte_end":2593,"line_start":116,"line_end":116,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2900,"byte_end":2908,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"opposite","qualname":"<Direction>::opposite","value":"fn (&self) -> Direction","parent":null,"children":[],"decl_id":null,"docs":" Return the opposite `Direction`.\n","sig":null,"attributes":[{"value":"/ Return the opposite `Direction`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2838,"byte_end":2874,"line_start":127,"line_end":127,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2879,"byte_end":2888,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2021},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3121,"byte_end":3126,"line_start":138,"line_end":138,"column_start":12,"column_end":17},"name":"index","qualname":"<Direction>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return `0` for `Outgoing` and `1` for `Incoming`.\n","sig":null,"attributes":[{"value":"/ Return `0` for `Outgoing` and `1` for `Incoming`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3042,"byte_end":3095,"line_start":136,"line_end":136,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3100,"byte_end":3109,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":3027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3307,"byte_end":3315,"line_start":148,"line_end":148,"column_start":10,"column_end":18},"name":"Directed","qualname":"::Directed","value":"Directed::{}","parent":null,"children":[],"decl_id":null,"docs":" Marker type for a directed graph.\n","sig":null,"attributes":[{"value":"/ Marker type for a directed graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3237,"byte_end":3274,"line_start":146,"line_end":146,"column_start":1,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":3033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3416,"byte_end":3426,"line_start":153,"line_end":153,"column_start":10,"column_end":20},"name":"Undirected","qualname":"::Undirected","value":"Undirected::{}","parent":null,"children":[],"decl_id":null,"docs":" Marker type for an undirected graph.\n","sig":null,"attributes":[{"value":"/ Marker type for an undirected graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3343,"byte_end":3383,"line_start":151,"line_end":151,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":2023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3539,"byte_end":3547,"line_start":157,"line_end":157,"column_start":11,"column_end":19},"name":"EdgeType","qualname":"::EdgeType","value":"EdgeType","parent":null,"children":[{"krate":0,"index":2024}],"decl_id":null,"docs":" A graph's edge type determines whether is has directed edges or not.\n","sig":null,"attributes":[{"value":"/ A graph's edge type determines whether is has directed edges or not.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3456,"byte_end":3528,"line_start":156,"line_end":156,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3557,"byte_end":3568,"line_start":158,"line_end":158,"column_start":8,"column_end":19},"name":"is_directed","qualname":"::EdgeType::is_directed","value":"fn () -> bool","parent":{"krate":0,"index":2023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3927,"byte_end":3943,"line_start":176,"line_end":176,"column_start":11,"column_end":27},"name":"IntoWeightedEdge","qualname":"::IntoWeightedEdge","value":"IntoWeightedEdge<E>","parent":null,"children":[{"krate":0,"index":2031},{"krate":0,"index":2032}],"decl_id":null,"docs":" Convert an element like `(i, j)` or `(i, j, w)` into\n a triple of source, target, edge weight.","sig":null,"attributes":[{"value":"/ Convert an element like `(i, j)` or `(i, j, w)` into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3755,"byte_end":3811,"line_start":172,"line_end":172,"column_start":1,"column_end":57}},{"value":"/ a triple of source, target, edge weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3812,"byte_end":3856,"line_start":173,"line_end":173,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3857,"byte_end":3860,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ For `Graph::from_edges` and `GraphMap::from_edges`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3861,"byte_end":3916,"line_start":175,"line_end":175,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":2031},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3958,"byte_end":3964,"line_start":177,"line_end":177,"column_start":10,"column_end":16},"name":"NodeId","qualname":"::IntoWeightedEdge::NodeId","value":"type NodeId;","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3973,"byte_end":3991,"line_start":178,"line_end":178,"column_start":8,"column_end":26},"name":"into_weighted_edge","qualname":"::IntoWeightedEdge::into_weighted_edge","value":"fn (self) -> (Self::NodeId, Self::NodeId, E)","parent":{"krate":0,"index":2029},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":5797,"byte_end":5806,"line_start":15,"line_end":15,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":5963,"byte_end":5972,"line_start":22,"line_end":22,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":6021,"byte_end":6030,"line_start":24,"line_end":24,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":6196,"byte_end":6205,"line_start":31,"line_end":31,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30918,"byte_end":30925,"line_start":46,"line_end":46,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31537,"byte_end":31544,"line_start":71,"line_end":71,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31735,"byte_end":31741,"line_start":78,"line_end":78,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31909,"byte_end":31916,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36689,"byte_end":36692,"line_start":45,"line_end":45,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39019,"byte_end":39031,"line_start":128,"line_end":128,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42137,"byte_end":42140,"line_start":231,"line_end":231,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43519,"byte_end":43523,"line_start":279,"line_end":279,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46908,"byte_end":46918,"line_start":379,"line_end":379,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47206,"byte_end":47216,"line_start":396,"line_end":396,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47424,"byte_end":47427,"line_start":406,"line_end":406,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47637,"byte_end":47649,"line_start":415,"line_end":415,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47859,"byte_end":47862,"line_start":424,"line_end":424,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":48072,"byte_end":48076,"line_start":433,"line_end":433,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9657,"byte_end":9663,"line_start":105,"line_end":105,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":15092,"byte_end":15097,"line_start":290,"line_end":290,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18807,"byte_end":18812,"line_start":446,"line_end":446,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20623,"byte_end":20628,"line_start":518,"line_end":518,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20938,"byte_end":20943,"line_start":527,"line_end":527,"column_start":45,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21383,"byte_end":21394,"line_start":543,"line_end":543,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21663,"byte_end":21674,"line_start":554,"line_end":554,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21925,"byte_end":21936,"line_start":565,"line_end":565,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22152,"byte_end":22159,"line_start":576,"line_end":576,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22875,"byte_end":22880,"line_start":603,"line_end":603,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":23038,"byte_end":23043,"line_start":610,"line_end":610,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":48889,"byte_end":48890,"line_start":32,"line_end":32,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49084,"byte_end":49095,"line_start":41,"line_end":41,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49309,"byte_end":49316,"line_start":50,"line_end":50,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49566,"byte_end":49578,"line_start":62,"line_end":62,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49835,"byte_end":49847,"line_start":72,"line_end":72,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":50515,"byte_end":50536,"line_start":99,"line_end":99,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":52408,"byte_end":52425,"line_start":167,"line_end":167,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":53438,"byte_end":53464,"line_start":206,"line_end":206,"column_start":32,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":54435,"byte_end":54452,"line_start":245,"line_end":245,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":54849,"byte_end":54861,"line_start":261,"line_end":261,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55755,"byte_end":55756,"line_start":293,"line_end":293,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56263,"byte_end":56275,"line_start":312,"line_end":312,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56542,"byte_end":56554,"line_start":322,"line_end":322,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":57157,"byte_end":57178,"line_start":348,"line_end":348,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":58495,"byte_end":58512,"line_start":400,"line_end":400,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":59898,"byte_end":59906,"line_start":30,"line_end":30,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60004,"byte_end":60012,"line_start":35,"line_end":35,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60100,"byte_end":60108,"line_start":39,"line_end":39,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60349,"byte_end":60357,"line_start":49,"line_end":49,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60640,"byte_end":60648,"line_start":60,"line_end":60,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60977,"byte_end":60998,"line_start":77,"line_end":77,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":61416,"byte_end":61424,"line_start":97,"line_end":97,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":61853,"byte_end":61875,"line_start":114,"line_end":114,"column_start":22,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64668,"byte_end":64673,"line_start":73,"line_end":73,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64798,"byte_end":64803,"line_start":80,"line_end":80,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":65125,"byte_end":65130,"line_start":92,"line_end":92,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":66240,"byte_end":66245,"line_start":130,"line_end":130,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":68382,"byte_end":68387,"line_start":209,"line_end":209,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":70917,"byte_end":70922,"line_start":302,"line_end":302,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72858,"byte_end":72859,"line_start":364,"line_end":364,"column_start":49,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":73209,"byte_end":73223,"line_start":379,"line_end":379,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95136,"byte_end":95146,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96821,"byte_end":96835,"line_start":89,"line_end":89,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":80378,"byte_end":80386,"line_start":179,"line_end":179,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":80642,"byte_end":80650,"line_start":192,"line_end":192,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":89939,"byte_end":89954,"line_start":488,"line_end":488,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":825}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91346,"byte_end":91351,"line_start":531,"line_end":531,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93849,"byte_end":93850,"line_start":607,"line_end":607,"column_start":21,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105086,"byte_end":105095,"line_start":91,"line_end":91,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105476,"byte_end":105485,"line_start":115,"line_end":115,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105577,"byte_end":105586,"line_start":119,"line_end":119,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106116,"byte_end":106125,"line_start":136,"line_end":136,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106617,"byte_end":106626,"line_start":161,"line_end":161,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107453,"byte_end":107457,"line_start":194,"line_end":194,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107614,"byte_end":107618,"line_start":202,"line_end":202,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108125,"byte_end":108129,"line_start":223,"line_end":223,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2733}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108309,"byte_end":108313,"line_start":231,"line_end":231,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112489,"byte_end":112494,"line_start":345,"line_end":345,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112905,"byte_end":112910,"line_start":363,"line_end":363,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":114729,"byte_end":114734,"line_start":421,"line_end":421,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115111,"byte_end":115116,"line_start":434,"line_end":434,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115516,"byte_end":115521,"line_start":447,"line_end":447,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1078},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":148405,"byte_end":148414,"line_start":1367,"line_end":1367,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149658,"byte_end":149667,"line_start":1410,"line_end":1410,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150540,"byte_end":150549,"line_start":1439,"line_end":1439,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2734}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150736,"byte_end":150745,"line_start":1449,"line_end":1449,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":151609,"byte_end":151623,"line_start":1482,"line_end":1482,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":153247,"byte_end":153252,"line_start":1544,"line_end":1544,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1173},{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":154924,"byte_end":154929,"line_start":1596,"line_end":1596,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155433,"byte_end":155447,"line_start":1616,"line_end":1616,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155921,"byte_end":155935,"line_start":1635,"line_end":1635,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":156353,"byte_end":156358,"line_start":1652,"line_end":1652,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":156694,"byte_end":156699,"line_start":1665,"line_end":1665,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157028,"byte_end":157033,"line_start":1678,"line_end":1678,"column_start":45,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157369,"byte_end":157374,"line_start":1691,"line_end":1691,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157614,"byte_end":157619,"line_start":1701,"line_end":1701,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157956,"byte_end":157965,"line_start":1716,"line_end":1716,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158135,"byte_end":158144,"line_start":1723,"line_end":1723,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159505,"byte_end":159518,"line_start":1770,"line_end":1770,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159713,"byte_end":159726,"line_start":1781,"line_end":1781,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1264},{"krate":0,"index":1268},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161506,"byte_end":161517,"line_start":1833,"line_end":1833,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161780,"byte_end":161791,"line_start":1845,"line_end":1845,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161944,"byte_end":161955,"line_start":1851,"line_end":1851,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162166,"byte_end":162177,"line_start":1860,"line_end":1860,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162440,"byte_end":162451,"line_start":1872,"line_end":1872,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162604,"byte_end":162615,"line_start":1878,"line_end":1878,"column_start":43,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162843,"byte_end":162856,"line_start":1888,"line_end":1888,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162959,"byte_end":162972,"line_start":1894,"line_end":1894,"column_start":37,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":163030,"byte_end":163043,"line_start":1896,"line_end":1896,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":163749,"byte_end":163763,"line_start":1922,"line_end":1922,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164121,"byte_end":164135,"line_start":1938,"line_end":1938,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164370,"byte_end":164384,"line_start":1948,"line_end":1948,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164441,"byte_end":164454,"line_start":1952,"line_end":1952,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164738,"byte_end":164751,"line_start":1962,"line_end":1962,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":165276,"byte_end":165290,"line_start":1981,"line_end":1981,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":165759,"byte_end":165773,"line_start":2001,"line_end":2001,"column_start":41,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166117,"byte_end":166131,"line_start":2015,"line_end":2015,"column_start":39,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167184,"byte_end":167190,"line_start":17,"line_end":17,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167472,"byte_end":167478,"line_start":26,"line_end":26,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167577,"byte_end":167583,"line_start":31,"line_end":31,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167738,"byte_end":167744,"line_start":38,"line_end":38,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167881,"byte_end":167887,"line_start":44,"line_end":44,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1442}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171080,"byte_end":171083,"line_start":57,"line_end":57,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1471},{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171968,"byte_end":171971,"line_start":90,"line_end":90,"column_start":13,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1485}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":173809,"byte_end":173812,"line_start":137,"line_end":137,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":174145,"byte_end":174148,"line_start":147,"line_end":147,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":174588,"byte_end":174595,"line_start":162,"line_end":162,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":175185,"byte_end":175192,"line_start":186,"line_end":186,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":175539,"byte_end":175547,"line_start":201,"line_end":201,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1523}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176941,"byte_end":176950,"line_start":36,"line_end":36,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":186694,"byte_end":186705,"line_start":142,"line_end":142,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189189,"byte_end":189192,"line_start":61,"line_end":61,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189364,"byte_end":189367,"line_start":70,"line_end":70,"column_start":51,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189700,"byte_end":189703,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191123,"byte_end":191126,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":194766,"byte_end":194769,"line_start":236,"line_end":236,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1667},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199930,"byte_end":199943,"line_start":410,"line_end":410,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200049,"byte_end":200062,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200103,"byte_end":200116,"line_start":418,"line_end":418,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1688}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200407,"byte_end":200420,"line_start":428,"line_end":428,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200804,"byte_end":200809,"line_start":442,"line_end":442,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1707}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":201324,"byte_end":201327,"line_start":462,"line_end":462,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1714},{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":202339,"byte_end":202353,"line_start":499,"line_end":499,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":203501,"byte_end":203504,"line_start":539,"line_end":539,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1757},{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":203726,"byte_end":203729,"line_start":549,"line_end":549,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":204214,"byte_end":204223,"line_start":570,"line_end":570,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205117,"byte_end":205120,"line_start":604,"line_end":604,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205420,"byte_end":205423,"line_start":613,"line_end":613,"column_start":45,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205536,"byte_end":205539,"line_start":619,"line_end":619,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205769,"byte_end":205772,"line_start":630,"line_end":630,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":206065,"byte_end":206080,"line_start":644,"line_end":644,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":206690,"byte_end":206693,"line_start":671,"line_end":671,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":206866,"byte_end":206869,"line_start":680,"line_end":680,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":213323,"byte_end":213331,"line_start":9,"line_end":9,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":213670,"byte_end":213678,"line_start":25,"line_end":25,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":214485,"byte_end":214486,"line_start":58,"line_end":58,"column_start":27,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":214523,"byte_end":214529,"line_start":61,"line_end":61,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1866}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_utils.rs","byte_start":216472,"byte_end":216473,"line_start":31,"line_end":31,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":217522,"byte_end":217530,"line_start":37,"line_end":37,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1903},{"krate":0,"index":1906},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":223208,"byte_end":223223,"line_start":209,"line_end":209,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1932},{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":223378,"byte_end":223379,"line_start":216,"line_end":216,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/traits_graph.rs","byte_start":232174,"byte_end":232179,"line_start":23,"line_end":23,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2822,"byte_end":2831,"line_start":126,"line_end":126,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2020},{"krate":0,"index":2021}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3601,"byte_end":3609,"line_start":161,"line_end":161,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3685,"byte_end":3695,"line_start":166,"line_end":166,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1188,"byte_end":1193,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":27}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1216,"byte_end":1220,"line_start":46,"line_end":46,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":603}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1231,"byte_end":1235,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":692}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":75495,"byte_end":75505,"line_start":7,"line_end":7,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":693}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1355,"byte_end":1358,"line_start":54,"line_end":54,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1451}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1368,"byte_end":1377,"line_start":55,"line_end":55,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1524}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1412,"byte_end":1415,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1585}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":1596,"byte_end":1603,"line_start":69,"line_end":69,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1973}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":5797,"byte_end":5806,"line_start":15,"line_end":15,"column_start":38,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2061},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":5963,"byte_end":5972,"line_start":22,"line_end":22,"column_start":31,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2061},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":6021,"byte_end":6030,"line_start":24,"line_end":24,"column_start":39,"column_end":48},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2061},"to":{"krate":2,"index":1656}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/scored.rs","byte_start":6196,"byte_end":6205,"line_start":31,"line_end":31,"column_start":32,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2061},"to":{"krate":2,"index":1645}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":30918,"byte_end":30925,"line_start":46,"line_end":46,"column_start":9,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31537,"byte_end":31544,"line_start":71,"line_end":71,"column_start":25,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2136},"to":{"krate":0,"index":47}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31735,"byte_end":31741,"line_start":78,"line_end":78,"column_start":25,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":29432},"to":{"krate":0,"index":47}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/dfsvisit.rs","byte_start":31909,"byte_end":31916,"line_start":86,"line_end":86,"column_start":21,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2136},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":36689,"byte_end":36692,"line_start":45,"line_end":45,"column_start":13,"column_end":16},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":39019,"byte_end":39031,"line_start":128,"line_end":128,"column_start":13,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":42137,"byte_end":42140,"line_start":231,"line_end":231,"column_start":13,"column_end":16},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":43519,"byte_end":43523,"line_start":279,"line_end":279,"column_start":13,"column_end":17},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":46908,"byte_end":46918,"line_start":379,"line_end":379,"column_start":12,"column_end":22},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47206,"byte_end":47216,"line_start":396,"line_end":396,"column_start":25,"column_end":35},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2196},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47424,"byte_end":47427,"line_start":406,"line_end":406,"column_start":23,"column_end":26},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2151},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47637,"byte_end":47649,"line_start":415,"line_end":415,"column_start":23,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2164},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":47859,"byte_end":47862,"line_start":424,"line_end":424,"column_start":23,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2178},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/traversal.rs","byte_start":48072,"byte_end":48076,"line_start":433,"line_end":433,"column_start":23,"column_end":27},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2187},"to":{"krate":0,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9554,"byte_end":9558,"line_start":101,"line_end":101,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":185}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9561,"byte_end":9570,"line_start":101,"line_end":101,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":2210},"to":{"krate":0,"index":185}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":9657,"byte_end":9663,"line_start":105,"line_end":105,"column_start":27,"column_end":33},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1446},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":10640,"byte_end":10648,"line_start":141,"line_end":141,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":185},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":11314,"byte_end":11327,"line_start":161,"line_end":161,"column_start":35,"column_end":48},"kind":"SuperTrait","from":{"krate":0,"index":2224},"to":{"krate":0,"index":2233}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":13427,"byte_end":13445,"line_start":233,"line_end":233,"column_start":23,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2294},"to":{"krate":0,"index":2237}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":13448,"byte_end":13461,"line_start":233,"line_end":233,"column_start":44,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":2224},"to":{"krate":0,"index":2237}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14219,"byte_end":14228,"line_start":258,"line_end":258,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":2237},"to":{"krate":0,"index":2246}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14231,"byte_end":14252,"line_start":258,"line_end":258,"column_start":43,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":2233},"to":{"krate":0,"index":2246}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":14578,"byte_end":14586,"line_start":270,"line_end":270,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":185},"to":{"krate":0,"index":2255}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":15092,"byte_end":15097,"line_start":290,"line_end":290,"column_start":34,"column_end":39},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2324}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":15908,"byte_end":15917,"line_start":324,"line_end":324,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":2210},"to":{"krate":0,"index":2269}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16186,"byte_end":16190,"line_start":337,"line_end":337,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":224}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":16885,"byte_end":16889,"line_start":365,"line_end":365,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":243}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17101,"byte_end":17105,"line_start":374,"line_end":374,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":2269},"to":{"krate":0,"index":2283}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17108,"byte_end":17127,"line_start":374,"line_end":374,"column_start":39,"column_end":58},"kind":"SuperTrait","from":{"krate":0,"index":2255},"to":{"krate":0,"index":2283}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17928,"byte_end":17932,"line_start":409,"line_end":409,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":2269},"to":{"krate":0,"index":2294}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":17935,"byte_end":17943,"line_start":409,"line_end":409,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":185},"to":{"krate":0,"index":2294}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18536,"byte_end":18545,"line_start":432,"line_end":432,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":2210},"to":{"krate":0,"index":2305}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":18807,"byte_end":18812,"line_start":446,"line_end":446,"column_start":34,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2305}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":19664,"byte_end":19673,"line_start":484,"line_end":484,"column_start":31,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":2210},"to":{"krate":0,"index":2313}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20186,"byte_end":20195,"line_start":500,"line_end":500,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":2210},"to":{"krate":0,"index":2324}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20512,"byte_end":20525,"line_start":513,"line_end":513,"column_start":34,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":2313},"to":{"krate":0,"index":2331}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20528,"byte_end":20537,"line_start":513,"line_end":513,"column_start":50,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":2324},"to":{"krate":0,"index":2331}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20623,"byte_end":20628,"line_start":518,"line_end":518,"column_start":38,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2313}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":20938,"byte_end":20943,"line_start":527,"line_end":527,"column_start":45,"column_end":50},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2331}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21383,"byte_end":21394,"line_start":543,"line_end":543,"column_start":45,"column_end":56},"kind":{"Impl":{"id":23}},"from":{"krate":15,"index":130},"to":{"krate":0,"index":291}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21663,"byte_end":21674,"line_start":554,"line_end":554,"column_start":45,"column_end":56},"kind":{"Impl":{"id":24}},"from":{"krate":15,"index":130},"to":{"krate":0,"index":291}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":21925,"byte_end":21936,"line_start":565,"line_end":565,"column_start":27,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":15,"index":130},"to":{"krate":0,"index":291}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22152,"byte_end":22159,"line_start":576,"line_end":576,"column_start":28,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":6233},"to":{"krate":0,"index":291}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22481,"byte_end":22490,"line_start":590,"line_end":590,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":2210},"to":{"krate":0,"index":2336}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":22875,"byte_end":22880,"line_start":603,"line_end":603,"column_start":34,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":23038,"byte_end":23043,"line_start":610,"line_end":610,"column_start":34,"column_end":39},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2336}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/mod.rs","byte_start":24853,"byte_end":24862,"line_start":681,"line_end":681,"column_start":32,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2210},"to":{"krate":0,"index":2347}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":48889,"byte_end":48890,"line_start":32,"line_end":32,"column_start":30,"column_end":31},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":355},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49084,"byte_end":49095,"line_start":41,"line_end":41,"column_start":27,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":15,"index":130},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49309,"byte_end":49316,"line_start":50,"line_end":50,"column_start":30,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":6233},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49566,"byte_end":49578,"line_start":62,"line_end":62,"column_start":12,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":49835,"byte_end":49847,"line_start":72,"line_end":72,"column_start":26,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2357},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":50515,"byte_end":50536,"line_start":99,"line_end":99,"column_start":29,"column_end":50},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":52408,"byte_end":52425,"line_start":167,"line_end":167,"column_start":29,"column_end":46},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":413},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":53438,"byte_end":53464,"line_start":206,"line_end":206,"column_start":32,"column_end":58},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":434},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":54435,"byte_end":54452,"line_start":245,"line_end":245,"column_start":32,"column_end":49},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":456},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":54849,"byte_end":54861,"line_start":261,"line_end":261,"column_start":24,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2357},"to":{"krate":0,"index":2504}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":55755,"byte_end":55756,"line_start":293,"line_end":293,"column_start":30,"column_end":31},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":483},"to":{"krate":0,"index":479}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56263,"byte_end":56275,"line_start":312,"line_end":312,"column_start":12,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2395},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":56542,"byte_end":56554,"line_start":322,"line_end":322,"column_start":26,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2395},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":57157,"byte_end":57178,"line_start":348,"line_end":348,"column_start":29,"column_end":50},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":501},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/filter.rs","byte_start":58495,"byte_end":58512,"line_start":400,"line_end":400,"column_start":32,"column_end":49},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":527},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":59898,"byte_end":59906,"line_start":30,"line_end":30,"column_start":34,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2453},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60004,"byte_end":60012,"line_start":35,"line_end":35,"column_start":32,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2453},"to":{"krate":0,"index":185}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60100,"byte_end":60108,"line_start":39,"line_end":39,"column_start":27,"column_end":35},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2453},"to":{"krate":0,"index":2224}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60349,"byte_end":60357,"line_start":49,"line_end":49,"column_start":35,"column_end":43},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2453},"to":{"krate":0,"index":2233}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60640,"byte_end":60648,"line_start":60,"line_end":60,"column_start":34,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2453},"to":{"krate":0,"index":2336}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":60977,"byte_end":60998,"line_start":77,"line_end":77,"column_start":21,"column_end":42},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2469},"to":{"krate":0,"index":224}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":61416,"byte_end":61424,"line_start":97,"line_end":97,"column_start":32,"column_end":40},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2453},"to":{"krate":0,"index":2294}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/visit/reversed.rs","byte_start":61853,"byte_end":61875,"line_start":114,"line_end":114,"column_start":22,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":595},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":62936,"byte_end":62940,"line_start":22,"line_end":22,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":2269},"to":{"krate":0,"index":2504}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63408,"byte_end":63415,"line_start":39,"line_end":39,"column_start":24,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":2504},"to":{"krate":0,"index":2522}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63828,"byte_end":63832,"line_start":50,"line_end":50,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":2269},"to":{"krate":0,"index":614}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":63835,"byte_end":63844,"line_start":50,"line_end":50,"column_start":26,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":2324},"to":{"krate":0,"index":614}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64561,"byte_end":64566,"line_start":69,"line_end":69,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":614},"to":{"krate":0,"index":618}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64569,"byte_end":64576,"line_start":69,"line_end":69,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1874},"to":{"krate":0,"index":618}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64668,"byte_end":64673,"line_start":73,"line_end":73,"column_start":29,"column_end":34},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2269}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":64798,"byte_end":64803,"line_start":80,"line_end":80,"column_start":32,"column_end":37},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2504}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":65125,"byte_end":65130,"line_start":92,"line_end":92,"column_start":35,"column_end":40},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2522}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":66240,"byte_end":66245,"line_start":130,"line_end":130,"column_start":30,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":614}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":68382,"byte_end":68387,"line_start":209,"line_end":209,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":618}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":69597,"byte_end":69603,"line_start":258,"line_end":258,"column_start":26,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":618},"to":{"krate":0,"index":655}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":70917,"byte_end":70922,"line_start":302,"line_end":302,"column_start":37,"column_end":42},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":655}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":71978,"byte_end":71986,"line_start":341,"line_end":341,"column_start":35,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":4773},"to":{"krate":0,"index":669}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":72858,"byte_end":72859,"line_start":364,"line_end":364,"column_start":49,"column_end":50},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":677},"to":{"krate":0,"index":669}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/data.rs","byte_start":73209,"byte_end":73223,"line_start":379,"line_end":379,"column_start":31,"column_end":45},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":678},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":95136,"byte_end":95146,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/dominators.rs","byte_start":96821,"byte_end":96835,"line_start":89,"line_end":89,"column_start":26,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":710},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":80378,"byte_end":80386,"line_start":179,"line_end":179,"column_start":13,"column_end":21},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":80642,"byte_end":80650,"line_start":192,"line_end":192,"column_start":25,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2577},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":89939,"byte_end":89954,"line_start":488,"line_end":488,"column_start":22,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":816},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":91346,"byte_end":91351,"line_start":531,"line_end":531,"column_start":9,"column_end":14},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93762,"byte_end":93767,"line_start":604,"line_end":604,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":834}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93770,"byte_end":93780,"line_start":604,"line_end":604,"column_start":29,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1656},"to":{"krate":0,"index":834}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93783,"byte_end":93786,"line_start":604,"line_end":604,"column_start":42,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":1946},"to":{"krate":0,"index":834}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93808,"byte_end":93815,"line_start":604,"line_end":604,"column_start":67,"column_end":74},"kind":"SuperTrait","from":{"krate":2,"index":1874},"to":{"krate":0,"index":834}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93818,"byte_end":93823,"line_start":604,"line_end":604,"column_start":77,"column_end":82},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":834}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93849,"byte_end":93850,"line_start":607,"line_end":607,"column_start":21,"column_end":22},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":836},"to":{"krate":0,"index":834}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93981,"byte_end":93988,"line_start":612,"line_end":612,"column_start":26,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":834},"to":{"krate":0,"index":837}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/algo/mod.rs","byte_start":93991,"byte_end":93995,"line_start":612,"line_end":612,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":837}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103884,"byte_end":103888,"line_start":44,"line_end":44,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103891,"byte_end":103898,"line_start":44,"line_end":44,"column_start":37,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":1874},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103901,"byte_end":103905,"line_start":44,"line_end":44,"column_start":47,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":6169},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103908,"byte_end":103911,"line_start":44,"line_end":44,"column_start":54,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":1645},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":103919,"byte_end":103924,"line_start":44,"line_end":44,"column_start":65,"column_end":70},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105086,"byte_end":105095,"line_start":91,"line_end":91,"column_start":21,"column_end":30},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105476,"byte_end":105485,"line_start":115,"line_end":115,"column_start":34,"column_end":43},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2636},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":105577,"byte_end":105586,"line_start":119,"line_end":119,"column_start":37,"column_end":46},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2636},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106116,"byte_end":106125,"line_start":136,"line_end":136,"column_start":21,"column_end":30},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":106617,"byte_end":106626,"line_start":161,"line_end":161,"column_start":37,"column_end":46},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2673},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107453,"byte_end":107457,"line_start":194,"line_end":194,"column_start":23,"column_end":27},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2710},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":107614,"byte_end":107618,"line_start":202,"line_end":202,"column_start":24,"column_end":28},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108125,"byte_end":108129,"line_start":223,"line_end":223,"column_start":23,"column_end":27},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":108309,"byte_end":108313,"line_start":231,"line_end":231,"column_start":24,"column_end":28},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112489,"byte_end":112494,"line_start":345,"line_end":345,"column_start":41,"column_end":46},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":112905,"byte_end":112910,"line_start":363,"line_end":363,"column_start":35,"column_end":40},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":114729,"byte_end":114734,"line_start":421,"line_end":421,"column_start":12,"column_end":17},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115111,"byte_end":115116,"line_start":434,"line_end":434,"column_start":12,"column_end":17},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":115516,"byte_end":115521,"line_start":447,"line_end":447,"column_start":20,"column_end":25},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":148405,"byte_end":148414,"line_start":1367,"line_end":1367,"column_start":38,"column_end":47},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":149658,"byte_end":149667,"line_start":1410,"line_end":1410,"column_start":30,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1101},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150540,"byte_end":150549,"line_start":1439,"line_end":1439,"column_start":27,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1101},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":150736,"byte_end":150745,"line_start":1449,"line_end":1449,"column_start":17,"column_end":26},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1101},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":151609,"byte_end":151623,"line_start":1482,"line_end":1482,"column_start":17,"column_end":31},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":153247,"byte_end":153252,"line_start":1544,"line_end":1544,"column_start":34,"column_end":39},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1157},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":154924,"byte_end":154929,"line_start":1596,"line_end":1596,"column_start":31,"column_end":36},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1157},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155433,"byte_end":155447,"line_start":1616,"line_end":1616,"column_start":30,"column_end":44},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1185},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":155921,"byte_end":155935,"line_start":1635,"line_end":1635,"column_start":30,"column_end":44},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":156353,"byte_end":156358,"line_start":1652,"line_end":1652,"column_start":45,"column_end":50},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":156694,"byte_end":156699,"line_start":1665,"line_end":1665,"column_start":48,"column_end":53},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157028,"byte_end":157033,"line_start":1678,"line_end":1678,"column_start":45,"column_end":50},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157369,"byte_end":157374,"line_start":1691,"line_end":1691,"column_start":48,"column_end":53},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157614,"byte_end":157619,"line_start":1701,"line_end":1701,"column_start":32,"column_end":37},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157811,"byte_end":157815,"line_start":1709,"line_end":1709,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":1243}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":157956,"byte_end":157965,"line_start":1716,"line_end":1716,"column_start":36,"column_end":45},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2636},"to":{"krate":0,"index":1243}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":158135,"byte_end":158144,"line_start":1723,"line_end":1723,"column_start":36,"column_end":45},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2673},"to":{"krate":0,"index":1243}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159505,"byte_end":159518,"line_start":1770,"line_end":1770,"column_start":20,"column_end":33},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1254},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":159713,"byte_end":159726,"line_start":1781,"line_end":1781,"column_start":21,"column_end":34},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161506,"byte_end":161517,"line_start":1833,"line_end":1833,"column_start":34,"column_end":45},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2735},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161780,"byte_end":161791,"line_start":1845,"line_end":1845,"column_start":45,"column_end":56},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2735},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":161944,"byte_end":161955,"line_start":1851,"line_end":1851,"column_start":43,"column_end":54},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2735},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162166,"byte_end":162177,"line_start":1860,"line_end":1860,"column_start":34,"column_end":45},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2745},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162440,"byte_end":162451,"line_start":1872,"line_end":1872,"column_start":45,"column_end":56},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2745},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162604,"byte_end":162615,"line_start":1878,"line_end":1878,"column_start":43,"column_end":54},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2745},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162843,"byte_end":162856,"line_start":1888,"line_end":1888,"column_start":38,"column_end":51},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2755},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":162959,"byte_end":162972,"line_start":1894,"line_end":1894,"column_start":37,"column_end":50},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2755},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":163030,"byte_end":163043,"line_start":1896,"line_end":1896,"column_start":42,"column_end":55},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2755},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":163749,"byte_end":163763,"line_start":1922,"line_end":1922,"column_start":30,"column_end":44},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1321},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164121,"byte_end":164135,"line_start":1938,"line_end":1938,"column_start":41,"column_end":55},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1321},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164370,"byte_end":164384,"line_start":1948,"line_end":1948,"column_start":39,"column_end":53},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1321},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164441,"byte_end":164454,"line_start":1952,"line_end":1952,"column_start":17,"column_end":30},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":164738,"byte_end":164751,"line_start":1962,"line_end":1962,"column_start":29,"column_end":42},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2755},"to":{"krate":0,"index":224}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":165276,"byte_end":165290,"line_start":1981,"line_end":1981,"column_start":30,"column_end":44},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1360},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":165759,"byte_end":165773,"line_start":2001,"line_end":2001,"column_start":41,"column_end":55},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1360},"to":{"krate":2,"index":4699}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/mod.rs","byte_start":166117,"byte_end":166131,"line_start":2015,"line_end":2015,"column_start":39,"column_end":53},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1360},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167184,"byte_end":167190,"line_start":17,"line_end":17,"column_start":13,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167472,"byte_end":167478,"line_start":26,"line_end":26,"column_start":23,"column_end":29},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1446},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167577,"byte_end":167583,"line_start":31,"line_end":31,"column_start":29,"column_end":35},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1446},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167738,"byte_end":167744,"line_start":38,"line_end":38,"column_start":32,"column_end":38},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1446},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/graph_impl/frozen.rs","byte_start":167881,"byte_end":167887,"line_start":44,"line_end":44,"column_start":24,"column_end":30},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171080,"byte_end":171083,"line_start":57,"line_end":57,"column_start":13,"column_end":16},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":171968,"byte_end":171971,"line_start":90,"line_end":90,"column_start":13,"column_end":16},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":173809,"byte_end":173812,"line_start":137,"line_end":137,"column_start":30,"column_end":33},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1458},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":174145,"byte_end":174148,"line_start":147,"line_end":147,"column_start":28,"column_end":31},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1458},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":174588,"byte_end":174595,"line_start":162,"line_end":162,"column_start":24,"column_end":31},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1502},"to":{"krate":2,"index":5939}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":175185,"byte_end":175192,"line_start":186,"line_end":186,"column_start":26,"column_end":33},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1510},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/dot.rs","byte_start":175539,"byte_end":175547,"line_start":201,"line_end":201,"column_start":26,"column_end":34},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1517},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/unionfind.rs","byte_start":176941,"byte_end":176950,"line_start":36,"line_end":36,"column_start":9,"column_end":18},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/astar.rs","byte_start":186694,"byte_end":186705,"line_start":142,"line_end":142,"column_start":9,"column_end":20},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189189,"byte_end":189192,"line_start":61,"line_end":61,"column_start":32,"column_end":35},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2887},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189364,"byte_end":189367,"line_start":70,"line_end":70,"column_start":51,"column_end":54},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2887},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":189700,"byte_end":189703,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":2887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":191123,"byte_end":191126,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":194766,"byte_end":194769,"line_start":236,"line_end":236,"column_start":20,"column_end":23},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2887},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":199930,"byte_end":199943,"line_start":410,"line_end":410,"column_start":37,"column_end":50},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":2931},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200049,"byte_end":200062,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2931},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200103,"byte_end":200116,"line_start":418,"line_end":418,"column_start":21,"column_end":34},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200407,"byte_end":200420,"line_start":428,"line_end":428,"column_start":33,"column_end":46},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2931},"to":{"krate":0,"index":224}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":200804,"byte_end":200809,"line_start":442,"line_end":442,"column_start":34,"column_end":39},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2910},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":201324,"byte_end":201327,"line_start":462,"line_end":462,"column_start":29,"column_end":32},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2887},"to":{"krate":0,"index":2269}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":202339,"byte_end":202353,"line_start":499,"line_end":499,"column_start":34,"column_end":48},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1725},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":203501,"byte_end":203504,"line_start":539,"line_end":539,"column_start":34,"column_end":37},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2887},"to":{"krate":0,"index":2210}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":203726,"byte_end":203729,"line_start":549,"line_end":549,"column_start":34,"column_end":37},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2887},"to":{"krate":0,"index":2336}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":204214,"byte_end":204223,"line_start":570,"line_end":570,"column_start":27,"column_end":36},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2947},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205117,"byte_end":205120,"line_start":604,"line_end":604,"column_start":38,"column_end":41},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2887},"to":{"krate":0,"index":2313}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205420,"byte_end":205423,"line_start":613,"line_end":613,"column_start":45,"column_end":48},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2887},"to":{"krate":0,"index":2331}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205536,"byte_end":205539,"line_start":619,"line_end":619,"column_start":45,"column_end":48},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2887},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":205769,"byte_end":205772,"line_start":630,"line_end":630,"column_start":48,"column_end":51},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2887},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":206065,"byte_end":206080,"line_start":644,"line_end":644,"column_start":23,"column_end":38},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1809},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":206690,"byte_end":206693,"line_start":671,"line_end":671,"column_start":34,"column_end":37},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2887},"to":{"krate":0,"index":2324}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/csr.rs","byte_start":206866,"byte_end":206869,"line_start":680,"line_end":680,"column_start":34,"column_end":37},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2887},"to":{"krate":0,"index":2305}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":213323,"byte_end":213331,"line_start":9,"line_end":9,"column_start":37,"column_end":45},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1841},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":213670,"byte_end":213678,"line_start":25,"line_end":25,"column_start":24,"column_end":32},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1852},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":214254,"byte_end":214262,"line_start":47,"line_end":47,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":4773},"to":{"krate":0,"index":1859}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":214485,"byte_end":214486,"line_start":58,"line_end":58,"column_start":27,"column_end":28},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1862},"to":{"krate":0,"index":1859}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_format.rs","byte_start":214523,"byte_end":214529,"line_start":61,"line_end":61,"column_start":13,"column_end":19},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_utils.rs","byte_start":215625,"byte_end":215633,"line_start":2,"line_end":2,"column_start":26,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":4773},"to":{"krate":0,"index":1870}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/iter_utils.rs","byte_start":216472,"byte_end":216473,"line_start":31,"line_end":31,"column_start":26,"column_end":27},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1878},"to":{"krate":0,"index":1870}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":217522,"byte_end":217530,"line_start":37,"line_end":37,"column_start":14,"column_end":22},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":223208,"byte_end":223223,"line_start":209,"line_end":209,"column_start":32,"column_end":47},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1928},"to":{"krate":0,"index":1924}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/isomorphism.rs","byte_start":223378,"byte_end":223379,"line_start":216,"line_end":216,"column_start":35,"column_end":36},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1936},"to":{"krate":0,"index":1924}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/traits_graph.rs","byte_start":232174,"byte_end":232179,"line_start":23,"line_end":23,"column_start":43,"column_end":48},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":940},"to":{"krate":0,"index":2347}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":2822,"byte_end":2831,"line_start":126,"line_end":126,"column_start":6,"column_end":15},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3601,"byte_end":3609,"line_start":161,"line_end":161,"column_start":19,"column_end":27},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3027},"to":{"krate":0,"index":2023}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/petgraph-0.4.13/src/lib.rs","byte_start":3685,"byte_end":3695,"line_start":166,"line_end":166,"column_start":19,"column_end":29},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3033},"to":{"krate":0,"index":2023}}]}