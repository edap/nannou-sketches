{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","daggy","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=8e82934181c11104","-C","extra-filename=-8e82934181c11104","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","petgraph=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libpetgraph-502887356f2cb431.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libdaggy-8e82934181c11104.rmeta"},"prelude":{"crate_id":{"name":"daggy","disambiguator":[1013770809337084085,13972747579097955032]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":15,"id":{"name":"petgraph","disambiguator":[3315239079231450119,958776490011743235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","num":16,"id":{"name":"fixedbitset","disambiguator":[12136443693809048143,16088621428177435084]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":0,"byte_end":22312,"line_start":1,"line_end":561,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":2673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1038,"byte_end":1047,"line_start":24,"line_end":24,"column_start":27,"column_end":36},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":2636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1049,"byte_end":1058,"line_start":24,"line_end":24,"column_start":38,"column_end":47},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":1198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1060,"byte_end":1074,"line_start":24,"line_end":24,"column_start":49,"column_end":63},"alias_span":null,"name":"EdgeWeightsMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":1185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1076,"byte_end":1090,"line_start":24,"line_end":24,"column_start":65,"column_end":79},"alias_span":null,"name":"NodeWeightsMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1109,"byte_end":1115,"line_start":25,"line_end":25,"column_start":17,"column_end":23},"alias_span":null,"name":"Walker","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":0,"byte_end":22312,"line_start":1,"line_end":561,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":633},{"krate":0,"index":644},{"krate":0,"index":639},{"krate":0,"index":241},{"krate":0,"index":248},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":649},{"krate":0,"index":659},{"krate":0,"index":656},{"krate":0,"index":653},{"krate":0,"index":264},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":313},{"krate":0,"index":318},{"krate":0,"index":324},{"krate":0,"index":329},{"krate":0,"index":335},{"krate":0,"index":341},{"krate":0,"index":346},{"krate":0,"index":349}],"decl_id":null,"docs":" **daggy** is a directed acyclic graph data structure library.","sig":null,"attributes":[{"value":"! **daggy** is a directed acyclic graph data structure library.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":0,"byte_end":65,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":66,"byte_end":69,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The most prominent type is [**Dag**](./struct.Dag.html) - a wrapper around [petgraph]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":70,"byte_end":159,"line_start":3,"line_end":3,"column_start":1,"column_end":90}},{"value":"! (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/index.html)'s [**Graph**]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":160,"byte_end":256,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"! (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/graph/struct.Graph.html)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":257,"byte_end":352,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"! data structure, exposing a refined API targeted towards directed acyclic graph related","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":353,"byte_end":443,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"! functionality.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":444,"byte_end":462,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":463,"byte_end":466,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! The [**Walker** trait](./walker/trait.Walker.html) defines a variety of useful methods for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":467,"byte_end":561,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"! traversing any graph type. Its methods behave similarly to iterator types, however **Walker**s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":562,"byte_end":660,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"! do not require borrowing the graph. This means that we can still safely mutably borrow from the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":661,"byte_end":760,"line_start":11,"line_end":11,"column_start":1,"column_end":100}},{"value":"! graph whilst we traverse it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":761,"byte_end":793,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":795,"byte_end":818,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"warn(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":819,"byte_end":841,"line_start":15,"line_end":15,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":23},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"walker","qualname":"::walker","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":352},{"krate":0,"index":364},{"krate":0,"index":359},{"krate":0,"index":84},{"krate":0,"index":89},{"krate":0,"index":369},{"krate":0,"index":384},{"krate":0,"index":378},{"krate":0,"index":96},{"krate":0,"index":390},{"krate":0,"index":399},{"krate":0,"index":395},{"krate":0,"index":104},{"krate":0,"index":403},{"krate":0,"index":415},{"krate":0,"index":410},{"krate":0,"index":111},{"krate":0,"index":121},{"krate":0,"index":420},{"krate":0,"index":429},{"krate":0,"index":425},{"krate":0,"index":128},{"krate":0,"index":433},{"krate":0,"index":442},{"krate":0,"index":438},{"krate":0,"index":135},{"krate":0,"index":446},{"krate":0,"index":459},{"krate":0,"index":454},{"krate":0,"index":143},{"krate":0,"index":464},{"krate":0,"index":477},{"krate":0,"index":472},{"krate":0,"index":149},{"krate":0,"index":482},{"krate":0,"index":495},{"krate":0,"index":490},{"krate":0,"index":155},{"krate":0,"index":500},{"krate":0,"index":509},{"krate":0,"index":505},{"krate":0,"index":162},{"krate":0,"index":513},{"krate":0,"index":527},{"krate":0,"index":521},{"krate":0,"index":170},{"krate":0,"index":177},{"krate":0,"index":533},{"krate":0,"index":547},{"krate":0,"index":541},{"krate":0,"index":184},{"krate":0,"index":553},{"krate":0,"index":567},{"krate":0,"index":561},{"krate":0,"index":191},{"krate":0,"index":573},{"krate":0,"index":587},{"krate":0,"index":581},{"krate":0,"index":198},{"krate":0,"index":205},{"krate":0,"index":593},{"krate":0,"index":607},{"krate":0,"index":601},{"krate":0,"index":213},{"krate":0,"index":613},{"krate":0,"index":627},{"krate":0,"index":621},{"krate":0,"index":221}],"decl_id":null,"docs":" **Walker** is a trait providing a variety of useful methods for traversing graph types.\n","sig":null,"attributes":[{"value":"! **Walker** is a trait providing a variety of useful methods for traversing graph types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22314,"byte_end":22405,"line_start":1,"line_end":1,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":30},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22576,"byte_end":22585,"line_start":11,"line_end":11,"column_start":10,"column_end":19},"name":"IndexPair","qualname":"::walker::IndexPair","value":"(EdgeIndex<Ix>, NodeIndex<Ix>)","parent":null,"children":[],"decl_id":null,"docs":" Short-hand for an edge node index pair.\n","sig":null,"attributes":[{"value":"/ Short-hand for an edge node index pair.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22523,"byte_end":22566,"line_start":10,"line_end":10,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23104,"byte_end":23110,"line_start":21,"line_end":21,"column_start":11,"column_end":17},"name":"Walker","qualname":"::walker::Walker","value":"Walker<G>","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":83}],"decl_id":null,"docs":" A trait providing a variety of useful methods for traversing some graph type **G**.","sig":null,"attributes":[{"value":"/ A trait providing a variety of useful methods for traversing some graph type **G**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22626,"byte_end":22713,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22714,"byte_end":22717,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ **Walker** can be likened to the std **Iterator** trait. It's methods behave similarly, but it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22718,"byte_end":22816,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ is different in that it takes a reference to some graph as an argument to its \"next\" method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22817,"byte_end":22913,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22914,"byte_end":22917,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ **Walker** method return types (besides the iterators) never borrow the graph. This means that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":22918,"byte_end":23016,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ we can still safely mutably borrow from the graph whilst we traverse it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23017,"byte_end":23093,"line_start":20,"line_end":20,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23191,"byte_end":23196,"line_start":23,"line_end":23,"column_start":10,"column_end":15},"name":"Index","qualname":"::walker::Walker::Index","value":"type Index: IndexType;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The unsigned integer type used for node and edge indices.\n","sig":null,"attributes":[{"value":"/ The unsigned integer type used for node and edge indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23120,"byte_end":23181,"line_start":22,"line_end":22,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23334,"byte_end":23338,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"next","qualname":"::walker::Walker::next","value":"fn (&mut self, graph: &G) -> Option<IndexPair<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given\n **Graph**.\n","sig":null,"attributes":[{"value":"/ Fetch the `EdgeIndex` and `NodeIndex` to the next neighbour in our walk through the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23214,"byte_end":23307,"line_start":25,"line_end":25,"column_start":5,"column_end":98}},{"value":"/ **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23312,"byte_end":23326,"line_start":26,"line_end":26,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23477,"byte_end":23486,"line_start":31,"line_end":31,"column_start":8,"column_end":17},"name":"next_edge","qualname":"::walker::Walker::next_edge","value":"fn (&mut self, graph: &G) -> Option<EdgeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The next edge in our walk for the given **Graph**.\n","sig":null,"attributes":[{"value":"/ The next edge in our walk for the given **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23401,"byte_end":23455,"line_start":29,"line_end":29,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23460,"byte_end":23469,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23673,"byte_end":23682,"line_start":37,"line_end":37,"column_start":8,"column_end":17},"name":"next_node","qualname":"::walker::Walker::next_node","value":"fn (&mut self, graph: &G) -> Option<NodeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The next node in our walk for the given **Graph**.\n","sig":null,"attributes":[{"value":"/ The next node in our walk for the given **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23597,"byte_end":23651,"line_start":35,"line_end":35,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23656,"byte_end":23665,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23878,"byte_end":23883,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"count","qualname":"::walker::Walker::count","value":"fn (mut self, graph: &G) -> usize","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Counts all the steps in the entire walk of the given graph.\n","sig":null,"attributes":[{"value":"/ Counts all the steps in the entire walk of the given graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23793,"byte_end":23856,"line_start":41,"line_end":41,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":23861,"byte_end":23870,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24167,"byte_end":24171,"line_start":53,"line_end":53,"column_start":8,"column_end":12},"name":"last","qualname":"::walker::Walker::last","value":"fn (mut self, graph: &G) -> Option<IndexPair<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Walks the whole walk until reaching and returning the last edge node pair.\n","sig":null,"attributes":[{"value":"/ Walks the whole walk until reaching and returning the last edge node pair.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24067,"byte_end":24145,"line_start":51,"line_end":51,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24150,"byte_end":24159,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24514,"byte_end":24523,"line_start":63,"line_end":63,"column_start":8,"column_end":17},"name":"last_edge","qualname":"::walker::Walker::last_edge","value":"fn (self, graph: &G) -> Option<EdgeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Walks the whole walk until reaching and returning the last edge.\n","sig":null,"attributes":[{"value":"/ Walks the whole walk until reaching and returning the last edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24424,"byte_end":24492,"line_start":61,"line_end":61,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24497,"byte_end":24506,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24737,"byte_end":24746,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"last_node","qualname":"::walker::Walker::last_node","value":"fn (self, graph: &G) -> Option<NodeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Walks the whole walk until reaching and returning the last node.\n","sig":null,"attributes":[{"value":"/ Walks the whole walk until reaching and returning the last node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24647,"byte_end":24715,"line_start":67,"line_end":67,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24720,"byte_end":24729,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24964,"byte_end":24967,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"nth","qualname":"::walker::Walker::nth","value":"fn (mut self, graph: &G, n: usize) -> Option<IndexPair<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Walks \"n\" number of steps and produces the resulting edge node pair.\n","sig":null,"attributes":[{"value":"/ Walks \"n\" number of steps and produces the resulting edge node pair.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24870,"byte_end":24942,"line_start":73,"line_end":73,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":24947,"byte_end":24956,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25283,"byte_end":25291,"line_start":86,"line_end":86,"column_start":8,"column_end":16},"name":"nth_edge","qualname":"::walker::Walker::nth_edge","value":"fn (self, graph: &G, n: usize) -> Option<EdgeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Walks \"n\" number of steps and produces the resulting edge.\n","sig":null,"attributes":[{"value":"/ Walks \"n\" number of steps and produces the resulting edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25199,"byte_end":25261,"line_start":84,"line_end":84,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25266,"byte_end":25275,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25523,"byte_end":25531,"line_start":94,"line_end":94,"column_start":8,"column_end":16},"name":"nth_node","qualname":"::walker::Walker::nth_node","value":"fn (self, graph: &G, n: usize) -> Option<NodeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Walks \"n\" number of steps and produces the resulting node.\n","sig":null,"attributes":[{"value":"/ Walks \"n\" number of steps and produces the resulting node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25439,"byte_end":25501,"line_start":92,"line_end":92,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25506,"byte_end":25515,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25796,"byte_end":25801,"line_start":102,"line_end":102,"column_start":8,"column_end":13},"name":"chain","qualname":"::walker::Walker::chain","value":"fn <O> (self, other: O) -> Chain<G, Self::Index, Self, O>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Produces a walker that will walk the entirey of `self` before walking the entirey of other.\n","sig":null,"attributes":[{"value":"/ Produces a walker that will walk the entirey of `self` before walking the entirey of other.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25679,"byte_end":25774,"line_start":100,"line_end":100,"column_start":5,"column_end":100}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":25779,"byte_end":25788,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26296,"byte_end":26302,"line_start":117,"line_end":117,"column_start":8,"column_end":14},"name":"filter","qualname":"::walker::Walker::filter","value":"fn <P> (self, predicate: P) -> Filter<Self, P>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Creates a walker that applies the predicate to each element returned by this walker.\n The only elements that will be yielded are those that make the predicate evaluate to true.\n","sig":null,"attributes":[{"value":"/ Creates a walker that applies the predicate to each element returned by this walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26087,"byte_end":26175,"line_start":114,"line_end":114,"column_start":5,"column_end":93}},{"value":"/ The only elements that will be yielded are those that make the predicate evaluate to true.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26180,"byte_end":26274,"line_start":115,"line_end":115,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26279,"byte_end":26288,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26676,"byte_end":26684,"line_start":129,"line_end":129,"column_start":8,"column_end":16},"name":"peekable","qualname":"::walker::Walker::peekable","value":"fn (self) -> Peekable<G, Self::Index, Self>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.\n","sig":null,"attributes":[{"value":"/ Creates a walker that has a `.peek(&graph)` method that returns an optional next neighbor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26560,"byte_end":26654,"line_start":127,"line_end":127,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26659,"byte_end":26668,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27072,"byte_end":27082,"line_start":140,"line_end":140,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::walker::Walker::skip_while","value":"fn <P> (self, predicate: P) -> SkipWhile<Self, P>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Creates a walker that invokes the predicate on elements until it returns false. Once the\n predicate returns false, that element and all further elements are yielded.\n","sig":null,"attributes":[{"value":"/ Creates a walker that invokes the predicate on elements until it returns false. Once the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26874,"byte_end":26966,"line_start":137,"line_end":137,"column_start":5,"column_end":97}},{"value":"/ predicate returns false, that element and all further elements are yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":26971,"byte_end":27050,"line_start":138,"line_end":138,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27055,"byte_end":27064,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27559,"byte_end":27569,"line_start":153,"line_end":153,"column_start":8,"column_end":18},"name":"take_while","qualname":"::walker::Walker::take_while","value":"fn <P> (self, predicate: P) -> TakeWhile<Self, P>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Creates a walker that yields elements so long as the predicate returns true. After the\n predicate returns false for the first time, no further elements will be yielded.\n","sig":null,"attributes":[{"value":"/ Creates a walker that yields elements so long as the predicate returns true. After the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27358,"byte_end":27448,"line_start":150,"line_end":150,"column_start":5,"column_end":95}},{"value":"/ predicate returns false for the first time, no further elements will be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27453,"byte_end":27537,"line_start":151,"line_end":151,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27542,"byte_end":27551,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27973,"byte_end":27977,"line_start":166,"line_end":166,"column_start":8,"column_end":12},"name":"skip","qualname":"::walker::Walker::skip","value":"fn (self, n: usize) -> Skip<G, Self::Index, Self>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Creates a walker that skips the first n steps of this walk, and then yields all further\n steps.\n","sig":null,"attributes":[{"value":"/ Creates a walker that skips the first n steps of this walk, and then yields all further","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27845,"byte_end":27936,"line_start":163,"line_end":163,"column_start":5,"column_end":96}},{"value":"/ steps.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27941,"byte_end":27951,"line_start":164,"line_end":164,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":27956,"byte_end":27965,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28282,"byte_end":28286,"line_start":177,"line_end":177,"column_start":8,"column_end":12},"name":"take","qualname":"::walker::Walker::take","value":"fn (self, n: usize) -> Take<G, Self::Index, Self>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Creates a walker that yields the first n steps of this walk.\n","sig":null,"attributes":[{"value":"/ Creates a walker that yields the first n steps of this walk.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28196,"byte_end":28260,"line_start":175,"line_end":175,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28265,"byte_end":28274,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28596,"byte_end":28599,"line_start":188,"line_end":188,"column_start":8,"column_end":11},"name":"all","qualname":"::walker::Walker::all","value":"fn <P> (&mut self, graph: &G, mut predicate: P) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Tests whether the predicate holds true for all steps in the walk.\n","sig":null,"attributes":[{"value":"/ Tests whether the predicate holds true for all steps in the walk.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28505,"byte_end":28574,"line_start":186,"line_end":186,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28579,"byte_end":28588,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29071,"byte_end":29074,"line_start":203,"line_end":203,"column_start":8,"column_end":11},"name":"any","qualname":"::walker::Walker::any","value":"fn <P> (&mut self, graph: &G, mut predicate: P) -> bool","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Tests whether any step in the walk satisfies the given predicate.","sig":null,"attributes":[{"value":"/ Tests whether any step in the walk satisfies the given predicate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28912,"byte_end":28981,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28986,"byte_end":28989,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Does not step the walker past the first found step.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":28994,"byte_end":29049,"line_start":201,"line_end":201,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29054,"byte_end":29063,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29558,"byte_end":29562,"line_start":218,"line_end":218,"column_start":8,"column_end":12},"name":"find","qualname":"::walker::Walker::find","value":"fn <P> (&mut self, graph: &G, mut predicate: P) -> Option<IndexPair<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the first edge node index pair satisfying the specified predicate.\n \n Does not consume the walker past the first found step.\n","sig":null,"attributes":[{"value":"/ Returns the first edge node index pair satisfying the specified predicate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29386,"byte_end":29464,"line_start":214,"line_end":214,"column_start":5,"column_end":83}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29469,"byte_end":29473,"line_start":215,"line_end":215,"column_start":5,"column_end":9}},{"value":"/ Does not consume the walker past the first found step.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29478,"byte_end":29536,"line_start":216,"line_end":216,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29541,"byte_end":29550,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30062,"byte_end":30071,"line_start":233,"line_end":233,"column_start":8,"column_end":17},"name":"find_edge","qualname":"::walker::Walker::find_edge","value":"fn <P> (&mut self, graph: &G, predicate: P) -> Option<EdgeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the edge index satisfying the specified predicate.\n \n Does not consume the walker past the first found step.\n","sig":null,"attributes":[{"value":"/ Returns the edge index satisfying the specified predicate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29906,"byte_end":29968,"line_start":229,"line_end":229,"column_start":5,"column_end":67}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29973,"byte_end":29977,"line_start":230,"line_end":230,"column_start":5,"column_end":9}},{"value":"/ Does not consume the walker past the first found step.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":29982,"byte_end":30040,"line_start":231,"line_end":231,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30045,"byte_end":30054,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30453,"byte_end":30462,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"find_node","qualname":"::walker::Walker::find_node","value":"fn <P> (&mut self, graph: &G, predicate: P) -> Option<NodeIndex<Self::Index>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Returns the node index satisfying the specified predicate.\n \n Does not consume the walker past the first found step.\n","sig":null,"attributes":[{"value":"/ Returns the node index satisfying the specified predicate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30297,"byte_end":30359,"line_start":239,"line_end":239,"column_start":5,"column_end":67}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30364,"byte_end":30368,"line_start":240,"line_end":240,"column_start":5,"column_end":9}},{"value":"/ Does not consume the walker past the first found step.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30373,"byte_end":30431,"line_start":241,"line_end":241,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30436,"byte_end":30445,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30743,"byte_end":30748,"line_start":251,"line_end":251,"column_start":8,"column_end":13},"name":"cycle","qualname":"::walker::Walker::cycle","value":"fn (self) -> Cycle<G, Self::Index, Self>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Repeats the walker endlessly.\n","sig":null,"attributes":[{"value":"/ Repeats the walker endlessly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30688,"byte_end":30721,"line_start":249,"line_end":249,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":30726,"byte_end":30735,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31213,"byte_end":31217,"line_start":266,"line_end":266,"column_start":8,"column_end":12},"name":"fold","qualname":"::walker::Walker::fold","value":"fn <B, F> (mut self, init: B, graph: &G, mut f: F) -> B","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Performs a fold operation over the entire walker, returning the eventual state at the end\n of the walk.\n \n This operation is sometimes called 'reduce' or 'inject'.\n","sig":null,"attributes":[{"value":"/ Performs a fold operation over the entire walker, returning the eventual state at the end","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31003,"byte_end":31096,"line_start":261,"line_end":261,"column_start":5,"column_end":98}},{"value":"/ of the walk.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31101,"byte_end":31117,"line_start":262,"line_end":262,"column_start":5,"column_end":21}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31122,"byte_end":31126,"line_start":263,"line_end":263,"column_start":5,"column_end":9}},{"value":"/ This operation is sometimes called 'reduce' or 'inject'.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31131,"byte_end":31191,"line_start":264,"line_end":264,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31196,"byte_end":31205,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31729,"byte_end":31736,"line_start":280,"line_end":280,"column_start":8,"column_end":15},"name":"inspect","qualname":"::walker::Walker::inspect","value":"fn <F> (self, f: F) -> Inspect<Self, F>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Creates a walker that calls a function with a reference to each index pair before yielding\n them. This is often useful for debugging a walker pipeline.\n","sig":null,"attributes":[{"value":"/ Creates a walker that calls a function with a reference to each index pair before yielding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31545,"byte_end":31639,"line_start":277,"line_end":277,"column_start":5,"column_end":99}},{"value":"/ them. This is often useful for debugging a walker pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31644,"byte_end":31707,"line_start":278,"line_end":278,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31712,"byte_end":31721,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32105,"byte_end":32109,"line_start":294,"line_end":294,"column_start":8,"column_end":12},"name":"iter","qualname":"::walker::Walker::iter","value":"fn (self, graph: &G) -> Iter<G, Self::Index, Self>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Converts the walker into an iterator yielding index pairs.","sig":null,"attributes":[{"value":"/ Converts the walker into an iterator yielding index pairs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":31964,"byte_end":32026,"line_start":290,"line_end":290,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32031,"byte_end":32034,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ The returned iterator borrows the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32039,"byte_end":32083,"line_start":292,"line_end":292,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32088,"byte_end":32097,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32566,"byte_end":32578,"line_start":309,"line_end":309,"column_start":8,"column_end":20},"name":"iter_weights","qualname":"::walker::Walker::iter_weights","value":"fn (self, graph: &G) -> IterWeights<G, Self::Index, Self>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for\n the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.","sig":null,"attributes":[{"value":"/ Converts the walker into an iterator yielding `(&e, &n)`, where `e` is the edge weight for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32311,"byte_end":32405,"line_start":304,"line_end":304,"column_start":5,"column_end":99}},{"value":"/ the next `EdgeIndex` and `n` is the node weight for the next `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32410,"byte_end":32487,"line_start":305,"line_end":305,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32492,"byte_end":32495,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ The returned iterator borrows the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32500,"byte_end":32544,"line_start":307,"line_end":307,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":32549,"byte_end":32558,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33135,"byte_end":33144,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"name":"Recursive","qualname":"::walker::Recursive","value":"Recursive {  }","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358}],"decl_id":null,"docs":" Recursively walks a graph using the recursive function `recursive_fn`.\n","sig":null,"attributes":[{"value":"/ Recursively walks a graph using the recursive function `recursive_fn`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33025,"byte_end":33099,"line_start":329,"line_end":329,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33375,"byte_end":33378,"line_start":340,"line_end":340,"column_start":12,"column_end":15},"name":"new","qualname":"<Recursive<G, Ix, F>>::new","value":"fn (start: NodeIndex<Ix>, recursive_fn: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new **Recursive** **Walker** starting from the node at the given index.\n","sig":null,"attributes":[{"value":"/ Construct a new **Recursive** **Walker** starting from the node at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33276,"byte_end":33363,"line_start":339,"line_end":339,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":34191,"byte_end":34196,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"Chain","qualname":"::walker::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"decl_id":null,"docs":" Walks the entirety of `a` before walking the entirety of `b`.\n","sig":null,"attributes":[{"value":"/ Walks the entirety of `a` before walking the entirety of `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":34090,"byte_end":34155,"line_start":369,"line_end":369,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":390},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35036,"byte_end":35042,"line_start":402,"line_end":402,"column_start":12,"column_end":18},"name":"Filter","qualname":"::walker::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394}],"decl_id":null,"docs":" A walker that applies some given predicate to each element returned by its walker.\n The only index pairs that will be yielded are those that make the predicate evaluate to true.\n","sig":null,"attributes":[{"value":"/ A walker that applies some given predicate to each element returned by its walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":34816,"byte_end":34902,"line_start":399,"line_end":399,"column_start":1,"column_end":87}},{"value":"/ The only index pairs that will be yielded are those that make the predicate evaluate to true.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":34903,"byte_end":35000,"line_start":400,"line_end":400,"column_start":1,"column_end":98}}]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35664,"byte_end":35672,"line_start":428,"line_end":428,"column_start":12,"column_end":20},"name":"Peekable","qualname":"::walker::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409}],"decl_id":null,"docs":" A walker that has a `.peek(&graph)` method that returns an optional next neighbor.\n","sig":null,"attributes":[{"value":"/ A walker that has a `.peek(&graph)` method that returns an optional next neighbor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35542,"byte_end":35628,"line_start":426,"line_end":426,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36010,"byte_end":36014,"line_start":442,"line_end":442,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<G, Ix, W>>::peek","value":"fn (&mut self, graph: &G) -> Option<IndexPair<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" The edge node index pair of the neighbor at the next step in our walk of the given graph.\n","sig":null,"attributes":[{"value":"/ The edge node index pair of the neighbor at the next step in our walk of the given graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35891,"byte_end":35984,"line_start":440,"line_end":440,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35989,"byte_end":35998,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36315,"byte_end":36324,"line_start":451,"line_end":451,"column_start":12,"column_end":21},"name":"peek_edge","qualname":"<Peekable<G, Ix, W>>::peek_edge","value":"fn (&mut self, graph: &G) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" The edge index of the neighbor at the next step in our walk of the given graph.\n","sig":null,"attributes":[{"value":"/ The edge index of the neighbor at the next step in our walk of the given graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36206,"byte_end":36289,"line_start":449,"line_end":449,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36294,"byte_end":36303,"line_start":450,"line_end":450,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36535,"byte_end":36544,"line_start":457,"line_end":457,"column_start":12,"column_end":21},"name":"peek_node","qualname":"<Peekable<G, Ix, W>>::peek_node","value":"fn (&mut self, graph: &G) -> Option<NodeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" The node index of the neighbor at the next step in our walk of the given graph.\n","sig":null,"attributes":[{"value":"/ The node index of the neighbor at the next step in our walk of the given graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36426,"byte_end":36509,"line_start":455,"line_end":455,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36514,"byte_end":36523,"line_start":456,"line_end":456,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":420},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":37152,"byte_end":37161,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::walker::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"decl_id":null,"docs":" A walker that invokes the predicate on elements until it returns false. Once the predicate\n returns false, that element and all further elements are yielded.\n","sig":null,"attributes":[{"value":"/ A walker that invokes the predicate on elements until it returns false. Once the predicate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36952,"byte_end":37046,"line_start":478,"line_end":478,"column_start":1,"column_end":95}},{"value":"/ returns false, that element and all further elements are yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":37047,"byte_end":37116,"line_start":479,"line_end":479,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":38074,"byte_end":38083,"line_start":513,"line_end":513,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::walker::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437}],"decl_id":null,"docs":" A walker that yields elements so long as the predicate returns true. After the\n predicate returns false for the first time, no further elements will be yielded.\n","sig":null,"attributes":[{"value":"/ A walker that yields elements so long as the predicate returns true. After the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":37871,"byte_end":37953,"line_start":510,"line_end":510,"column_start":1,"column_end":83}},{"value":"/ predicate returns false for the first time, no further elements will be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":37954,"byte_end":38038,"line_start":511,"line_end":511,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":38941,"byte_end":38945,"line_start":543,"line_end":543,"column_start":12,"column_end":16},"name":"Skip","qualname":"::walker::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"decl_id":null,"docs":" A walker that skips the first n steps of this walk, and then yields all further steps.\n","sig":null,"attributes":[{"value":"/ A walker that skips the first n steps of this walk, and then yields all further steps.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":38815,"byte_end":38905,"line_start":541,"line_end":541,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":39553,"byte_end":39557,"line_start":571,"line_end":571,"column_start":12,"column_end":16},"name":"Take","qualname":"::walker::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" A walker that yields the first n steps of this walk.\n","sig":null,"attributes":[{"value":"/ A walker that yields the first n steps of this walk.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":39461,"byte_end":39517,"line_start":569,"line_end":569,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40110,"byte_end":40115,"line_start":598,"line_end":598,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::walker::Cycle","value":"Cycle {  }","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489}],"decl_id":null,"docs":" A walker that repeats its internal walker endlessly.\n","sig":null,"attributes":[{"value":"/ A walker that repeats its internal walker endlessly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40018,"byte_end":40074,"line_start":596,"line_end":596,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40760,"byte_end":40767,"line_start":624,"line_end":624,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::walker::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504}],"decl_id":null,"docs":" A walker that calls a function with a reference to each index pair before yielding them.\n This is often useful for debugging a walker pipeline.\n","sig":null,"attributes":[{"value":"/ A walker that calls a function with a reference to each index pair before yielding them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40574,"byte_end":40666,"line_start":621,"line_end":621,"column_start":1,"column_end":93}},{"value":"/ This is often useful for debugging a walker pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40667,"byte_end":40724,"line_start":622,"line_end":622,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":513},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41299,"byte_end":41303,"line_start":648,"line_end":648,"column_start":12,"column_end":16},"name":"Iter","qualname":"::walker::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"decl_id":null,"docs":" An iterator yielding index pairs produced by its internal walker and graph.\n","sig":null,"attributes":[{"value":"/ An iterator yielding index pairs produced by its internal walker and graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41184,"byte_end":41263,"line_start":646,"line_end":646,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41521,"byte_end":41526,"line_start":658,"line_end":658,"column_start":12,"column_end":17},"name":"edges","qualname":"<Iter>::edges","value":"fn (self) -> IterEdges<'a, G, Ix, W>","parent":null,"children":[],"decl_id":null,"docs":" Convert to an iterator that only yields the edge indices.\n","sig":null,"attributes":[{"value":"/ Convert to an iterator that only yields the edge indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41434,"byte_end":41495,"line_start":656,"line_end":656,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41500,"byte_end":41509,"line_start":657,"line_end":657,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41824,"byte_end":41829,"line_start":669,"line_end":669,"column_start":12,"column_end":17},"name":"nodes","qualname":"<Iter>::nodes","value":"fn (self) -> IterNodes<'a, G, Ix, W>","parent":null,"children":[],"decl_id":null,"docs":" Convert to an iterator that only yields the node indices.\n","sig":null,"attributes":[{"value":"/ Convert to an iterator that only yields the node indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41737,"byte_end":41798,"line_start":667,"line_end":667,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41803,"byte_end":41812,"line_start":668,"line_end":668,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":533},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42459,"byte_end":42468,"line_start":695,"line_end":695,"column_start":12,"column_end":21},"name":"IterEdges","qualname":"::walker::IterEdges","value":"IterEdges {  }","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"decl_id":null,"docs":" An iterator yielding edge indices produced by its internal walker and graph.\n","sig":null,"attributes":[{"value":"/ An iterator yielding edge indices produced by its internal walker and graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42343,"byte_end":42423,"line_start":693,"line_end":693,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":553},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42989,"byte_end":42998,"line_start":716,"line_end":716,"column_start":12,"column_end":21},"name":"IterNodes","qualname":"::walker::IterNodes","value":"IterNodes {  }","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560}],"decl_id":null,"docs":" An iterator yielding node indices produced by its internal walker and graph.\n","sig":null,"attributes":[{"value":"/ An iterator yielding node indices produced by its internal walker and graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42873,"byte_end":42953,"line_start":714,"line_end":714,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43550,"byte_end":43561,"line_start":738,"line_end":738,"column_start":12,"column_end":23},"name":"IterWeights","qualname":"::walker::IterWeights","value":"IterWeights {  }","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580}],"decl_id":null,"docs":" An iterator yielding weights associated with the index pairs produced by its internal walker\n and graph.\n","sig":null,"attributes":[{"value":"/ An iterator yielding weights associated with the index pairs produced by its internal walker","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43403,"byte_end":43499,"line_start":735,"line_end":735,"column_start":1,"column_end":97}},{"value":"/ and graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43500,"byte_end":43514,"line_start":736,"line_end":736,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43769,"byte_end":43774,"line_start":747,"line_end":747,"column_start":12,"column_end":17},"name":"edges","qualname":"<IterWeights>::edges","value":"fn (self) -> IterEdgeWeights<'a, G, Ix, W>","parent":null,"children":[],"decl_id":null,"docs":" Convert to an iterator yielding only the edge weights.\n","sig":null,"attributes":[{"value":"/ Convert to an iterator yielding only the edge weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43699,"byte_end":43757,"line_start":746,"line_end":746,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":44074,"byte_end":44079,"line_start":757,"line_end":757,"column_start":12,"column_end":17},"name":"nodes","qualname":"<IterWeights>::nodes","value":"fn (self) -> IterNodeWeights<'a, G, Ix, W>","parent":null,"children":[],"decl_id":null,"docs":" Convert to an iterator yielding only the node weights.\n","sig":null,"attributes":[{"value":"/ Convert to an iterator yielding only the node weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":44004,"byte_end":44062,"line_start":756,"line_end":756,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":593},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":44947,"byte_end":44962,"line_start":786,"line_end":786,"column_start":12,"column_end":27},"name":"IterEdgeWeights","qualname":"::walker::IterEdgeWeights","value":"IterEdgeWeights {  }","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600}],"decl_id":null,"docs":" An iterator yielding edge weights associated with the indices produced by its internal walker\n and graph.\n","sig":null,"attributes":[{"value":"/ An iterator yielding edge weights associated with the indices produced by its internal walker","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":44799,"byte_end":44896,"line_start":783,"line_end":783,"column_start":1,"column_end":98}},{"value":"/ and graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":44897,"byte_end":44911,"line_start":784,"line_end":784,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":45604,"byte_end":45619,"line_start":809,"line_end":809,"column_start":12,"column_end":27},"name":"IterNodeWeights","qualname":"::walker::IterNodeWeights","value":"IterNodeWeights {  }","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"decl_id":null,"docs":" An iterator yielding node weights associated with the indices produced by its internal walker\n and graph.\n","sig":null,"attributes":[{"value":"/ An iterator yielding node weights associated with the indices produced by its internal walker","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":45456,"byte_end":45553,"line_start":806,"line_end":806,"column_start":1,"column_end":98}},{"value":"/ and graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":45554,"byte_end":45568,"line_start":807,"line_end":807,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1323,"byte_end":1331,"line_start":34,"line_end":34,"column_start":10,"column_end":18},"name":"PetGraph","qualname":"::PetGraph","value":"pg::Graph<N, E, pg::Directed, Ix>","parent":null,"children":[],"decl_id":null,"docs":" The Petgraph to be used internally within the Dag for storing/managing nodes and edges.\n","sig":null,"attributes":[{"value":"/ The Petgraph to be used internally within the Dag for storing/managing nodes and edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1222,"byte_end":1313,"line_start":33,"line_end":33,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1448,"byte_end":1456,"line_start":37,"line_end":37,"column_start":10,"column_end":18},"name":"RawNodes","qualname":"::RawNodes","value":"&'a [pg::graph::Node<N, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Read only access into a **Dag**'s internal node array.\n","sig":null,"attributes":[{"value":"/ Read only access into a **Dag**'s internal node array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1380,"byte_end":1438,"line_start":36,"line_end":36,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1568,"byte_end":1576,"line_start":39,"line_end":39,"column_start":10,"column_end":18},"name":"RawEdges","qualname":"::RawEdges","value":"&'a [pg::graph::Edge<E, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Read only access into a **Dag**'s internal edge array.\n","sig":null,"attributes":[{"value":"/ Read only access into a **Dag**'s internal edge array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1500,"byte_end":1558,"line_start":38,"line_end":38,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2940,"byte_end":2943,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"Dag","qualname":"::Dag","value":"Dag {  }","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638}],"decl_id":null,"docs":" A Directed acyclic graph (DAG) data structure.","sig":null,"attributes":[{"value":"/ A Directed acyclic graph (DAG) data structure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1622,"byte_end":1672,"line_start":42,"line_end":42,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1673,"byte_end":1676,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Dag is a thin wrapper around petgraph's `Graph` data structure, providing a refined API for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1677,"byte_end":1772,"line_start":44,"line_end":44,"column_start":1,"column_end":96}},{"value":"/ dealing specifically with DAGs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1773,"byte_end":1808,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1809,"byte_end":1812,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note: The following documentation is adapted from petgraph's [**Graph** documentation]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1813,"byte_end":1903,"line_start":47,"line_end":47,"column_start":1,"column_end":91}},{"value":"/ (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/graph/struct.Graph.html).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1904,"byte_end":2000,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2001,"byte_end":2004,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ **Dag** is parameterized over the node weight **N**, edge weight **E** and index type **Ix**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2005,"byte_end":2102,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2103,"byte_end":2106,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ **NodeIndex** is a type that acts as a reference to nodes, but these are only stable across","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2107,"byte_end":2202,"line_start":52,"line_end":52,"column_start":1,"column_end":96}},{"value":"/ certain operations. **Removing nodes may shift other indices.** Adding kids to the **Dag**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2203,"byte_end":2297,"line_start":53,"line_end":53,"column_start":1,"column_end":95}},{"value":"/ keeps all indices stable, but removing a node will force the last node to shift its index to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2298,"byte_end":2394,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ take its place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2395,"byte_end":2414,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2415,"byte_end":2418,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The fact that the node indices in the **Dag** are numbered in a compact interval from 0 to *n*-1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2419,"byte_end":2519,"line_start":57,"line_end":57,"column_start":1,"column_end":101}},{"value":"/ simplifies some graph algorithms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2520,"byte_end":2557,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2558,"byte_end":2561,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The **Ix** parameter is u32 by default. The goal is that you can ignore this parameter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2562,"byte_end":2652,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"/ completely unless you need a very large **Dag** -- then you can use usize.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2653,"byte_end":2731,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2732,"byte_end":2735,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ The **Dag** also offers methods for accessing the underlying **Graph**, which can be useful","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2736,"byte_end":2831,"line_start":63,"line_end":63,"column_start":1,"column_end":96}},{"value":"/ for taking advantage of petgraph's various graph-related algorithms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":2832,"byte_end":2904,"line_start":64,"line_end":64,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3196,"byte_end":3204,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"Children","qualname":"::Children","value":"Children {  }","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247}],"decl_id":null,"docs":" A **Walker** type that can be used to step through the children of some parent node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that can be used to step through the children of some parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3096,"byte_end":3184,"line_start":72,"line_end":72,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3430,"byte_end":3437,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"Parents","qualname":"::Parents","value":"Parents {  }","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"decl_id":null,"docs":" A **Walker** type that can be used to step through the parents of some child node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that can be used to step through the parents of some child node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3332,"byte_end":3418,"line_start":80,"line_end":80,"column_start":1,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3666,"byte_end":3677,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"EdgeIndices","qualname":"::EdgeIndices","value":"EdgeIndices {  }","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.\n","sig":null,"attributes":[{"value":"/ An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3564,"byte_end":3654,"line_start":87,"line_end":87,"column_start":1,"column_end":91}}]},{"kind":"Type","id":{"krate":0,"index":259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3857,"byte_end":3870,"line_start":94,"line_end":94,"column_start":10,"column_end":23},"name":"RecursiveWalk","qualname":"::RecursiveWalk","value":"walker::Recursive<Dag<N, E, Ix>, Ix, F>","parent":null,"children":[],"decl_id":null,"docs":" An alias to simplify the **Recursive** **Walker** type returned by **Dag**.\n","sig":null,"attributes":[{"value":"/ An alias to simplify the **Recursive** **Walker** type returned by **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3768,"byte_end":3847,"line_start":93,"line_end":93,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4096,"byte_end":4106,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"WouldCycle","qualname":"::WouldCycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error returned by the `Dag::add_edge` method in the case that adding an edge would have\n caused the graph to cycle.\n","sig":null,"attributes":[{"value":"/ An error returned by the `Dag::add_edge` method in the case that adding an edge would have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":3929,"byte_end":4023,"line_start":97,"line_end":97,"column_start":1,"column_end":95}},{"value":"/ caused the graph to cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4024,"byte_end":4054,"line_start":98,"line_end":98,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4218,"byte_end":4221,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<Dag<N, E, Ix>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty `Dag`.\n","sig":null,"attributes":[{"value":"/ Create a new, empty `Dag`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4176,"byte_end":4206,"line_start":105,"line_end":105,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4365,"byte_end":4378,"line_start":111,"line_end":111,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Dag<N, E, Ix>>::with_capacity","value":"fn (nodes: usize, edges: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Dag` with estimated capacity for its node and edge Vecs.\n","sig":null,"attributes":[{"value":"/ Create a new `Dag` with estimated capacity for its node and edge Vecs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4279,"byte_end":4353,"line_start":110,"line_end":110,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4617,"byte_end":4622,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"clear","qualname":"<Dag<N, E, Ix>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all nodes and edges from the **Dag**.\n","sig":null,"attributes":[{"value":"/ Removes all nodes and edges from the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4556,"byte_end":4605,"line_start":118,"line_end":118,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4732,"byte_end":4742,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Dag<N, E, Ix>>::node_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of nodes in the **Dag**.\n","sig":null,"attributes":[{"value":"/ The total number of nodes in the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4675,"byte_end":4720,"line_start":123,"line_end":123,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4862,"byte_end":4872,"line_start":129,"line_end":129,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Dag<N, E, Ix>>::edge_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of edgees in the **Dag**.\n","sig":null,"attributes":[{"value":"/ The total number of edgees in the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4804,"byte_end":4850,"line_start":128,"line_end":128,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5132,"byte_end":5137,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"graph","qualname":"<Dag<N, E, Ix>>::graph","value":"fn (&self) -> &PetGraph<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the `Dag`'s underlying `PetGraph<N, Ix>`.\n All existing indices may be used to index into this `PetGraph` the same way they may be\n used to index into the `Dag`.\n","sig":null,"attributes":[{"value":"/ Borrow the `Dag`'s underlying `PetGraph<N, Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4934,"byte_end":4986,"line_start":133,"line_end":133,"column_start":5,"column_end":57}},{"value":"/ All existing indices may be used to index into this `PetGraph` the same way they may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4991,"byte_end":5082,"line_start":134,"line_end":134,"column_start":5,"column_end":96}},{"value":"/ used to index into the `Dag`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5087,"byte_end":5120,"line_start":135,"line_end":135,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5414,"byte_end":5424,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"into_graph","qualname":"<Dag<N, E, Ix>>::into_graph","value":"fn (self) -> PetGraph<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the `Dag` and return the internal `PetGraph`.\n All existing indices may be used to index into this `PetGraph` the same way they may be\n used to index into the `Dag`.\n","sig":null,"attributes":[{"value":"/ Take ownership of the `Dag` and return the internal `PetGraph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5201,"byte_end":5268,"line_start":140,"line_end":140,"column_start":5,"column_end":72}},{"value":"/ All existing indices may be used to index into this `PetGraph` the same way they may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5273,"byte_end":5364,"line_start":141,"line_end":141,"column_start":5,"column_end":96}},{"value":"/ used to index into the `Dag`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5369,"byte_end":5402,"line_start":142,"line_end":142,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6074,"byte_end":6082,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Dag<N, E, Ix>>::add_node","value":"fn (&mut self, weight: N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add a new node to the `Dag` with the given weight.","sig":null,"attributes":[{"value":"/ Add a new node to the `Dag` with the given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5518,"byte_end":5572,"line_start":148,"line_end":148,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5577,"byte_end":5580,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5585,"byte_end":5615,"line_start":150,"line_end":150,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5620,"byte_end":5623,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the new node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5628,"byte_end":5666,"line_start":152,"line_end":152,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5671,"byte_end":5674,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a new node and immediately adding a single edge to that node from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5679,"byte_end":5775,"line_start":154,"line_end":154,"column_start":5,"column_end":101}},{"value":"/ some other node, consider using the [add_child](./struct.Dag.html#method.add_child) or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5780,"byte_end":5870,"line_start":155,"line_end":155,"column_start":5,"column_end":95}},{"value":"/ [add_parent](./struct.Dag.html#method.add_parent) methods instead for better performance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5875,"byte_end":5968,"line_start":156,"line_end":156,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5973,"byte_end":5976,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":5981,"byte_end":6062,"line_start":158,"line_end":158,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7618,"byte_end":7626,"line_start":189,"line_end":189,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Dag<N, E, Ix>>::add_edge","value":"fn (&mut self, a: NodeIndex<Ix>, b: NodeIndex<Ix>, weight: E) -> Result<EdgeIndex<Ix>, WouldCycle<E>>","parent":null,"children":[],"decl_id":null,"docs":" Add a new directed edge to the `Dag` with the given weight.","sig":null,"attributes":[{"value":"/ Add a new directed edge to the `Dag` with the given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6171,"byte_end":6234,"line_start":163,"line_end":163,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6239,"byte_end":6242,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ The added edge will be in the direction `a` -> `b`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6247,"byte_end":6301,"line_start":165,"line_end":165,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6306,"byte_end":6309,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Checks if the edge would create a cycle in the Graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6314,"byte_end":6371,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6376,"byte_end":6379,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ If adding the edge **would not** cause the graph to cycle, the edge will be added and its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6384,"byte_end":6477,"line_start":169,"line_end":169,"column_start":5,"column_end":98}},{"value":"/ `EdgeIndex` returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6482,"byte_end":6507,"line_start":170,"line_end":170,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6512,"byte_end":6515,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ If adding the edge **would** cause the graph to cycle, the edge will not be added and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6520,"byte_end":6609,"line_start":172,"line_end":172,"column_start":5,"column_end":94}},{"value":"/ instead a `WouldCycle<E>` error with the given weight will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6614,"byte_end":6689,"line_start":173,"line_end":173,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6694,"byte_end":6697,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ In the worst case, petgraph's [`is_cyclic_directed`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6702,"byte_end":6758,"line_start":175,"line_end":175,"column_start":5,"column_end":61}},{"value":"/ (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/algo/fn.is_cyclic_directed.html)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6763,"byte_end":6866,"line_start":176,"line_end":176,"column_start":5,"column_end":108}},{"value":"/ function is used to check whether or not adding the edge would create a cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6871,"byte_end":6953,"line_start":177,"line_end":177,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6958,"byte_end":6961,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ **Note:** Dag allows adding parallel (\"duplicate\") edges. If you want to avoid this, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":6966,"byte_end":7058,"line_start":179,"line_end":179,"column_start":5,"column_end":97}},{"value":"/ [`update_edge`](./struct.Dag.html#method.update_edge) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7063,"byte_end":7129,"line_start":180,"line_end":180,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7134,"byte_end":7137,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a new node and immediately adding a single edge to that node from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7142,"byte_end":7238,"line_start":182,"line_end":182,"column_start":5,"column_end":101}},{"value":"/ some other node, consider using the [add_child](./struct.Dag.html#method.add_child) or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7243,"byte_end":7333,"line_start":183,"line_end":183,"column_start":5,"column_end":95}},{"value":"/ [add_parent](./struct.Dag.html#method.add_parent) methods instead for better performance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7338,"byte_end":7431,"line_start":184,"line_end":184,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7436,"byte_end":7439,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ **Panics** if either `a` or `b` do not exist within the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7444,"byte_end":7512,"line_start":186,"line_end":186,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7517,"byte_end":7520,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":7525,"byte_end":7606,"line_start":188,"line_end":188,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9862,"byte_end":9871,"line_start":232,"line_end":232,"column_start":12,"column_end":21},"name":"add_edges","qualname":"<Dag<N, E, Ix>>::add_edges","value":"fn <I> (&mut self, edges: I) -> Result<EdgeIndices<Ix>, WouldCycle<Vec<E>>>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given directed edges to the `Dag`, each with their own given weight.","sig":null,"attributes":[{"value":"/ Adds the given directed edges to the `Dag`, each with their own given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8056,"byte_end":8137,"line_start":201,"line_end":201,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8142,"byte_end":8145,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ The given iterator should yield a `NodeIndex` pair along with a weight for each Edge to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8150,"byte_end":8244,"line_start":203,"line_end":203,"column_start":5,"column_end":99}},{"value":"/ added in a tuple.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8249,"byte_end":8270,"line_start":204,"line_end":204,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8275,"byte_end":8278,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ If we were to describe the tuple as *(a, b, weight)*, the connection would be directed as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8283,"byte_end":8376,"line_start":206,"line_end":206,"column_start":5,"column_end":98}},{"value":"/ follows:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8381,"byte_end":8393,"line_start":207,"line_end":207,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8398,"byte_end":8401,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ *a -> b*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8406,"byte_end":8418,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8423,"byte_end":8426,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This method behaves similarly to the [`add_edge`](./struct.Dag.html#method.add_edge)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8431,"byte_end":8519,"line_start":211,"line_end":211,"column_start":5,"column_end":93}},{"value":"/ method, however rather than checking whether or not a cycle has been created after adding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8524,"byte_end":8617,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ each edge, it only checks after all edges have been added. This makes it a slightly more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8622,"byte_end":8714,"line_start":213,"line_end":213,"column_start":5,"column_end":97}},{"value":"/ performant and ergonomic option that repeatedly calling `add_edge`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8719,"byte_end":8790,"line_start":214,"line_end":214,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8795,"byte_end":8798,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ If adding the edges **would not** cause the graph to cycle, the edges will be added and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8803,"byte_end":8894,"line_start":216,"line_end":216,"column_start":5,"column_end":96}},{"value":"/ their indices returned in an `EdgeIndices` iterator, yielding indices for each edge in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8899,"byte_end":8993,"line_start":217,"line_end":217,"column_start":5,"column_end":99}},{"value":"/ same order that they were given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":8998,"byte_end":9034,"line_start":218,"line_end":218,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9039,"byte_end":9042,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ If adding the edges **would** cause the graph to cycle, the edges will not be added and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9047,"byte_end":9138,"line_start":220,"line_end":220,"column_start":5,"column_end":96}},{"value":"/ instead a `WouldCycle<Vec<E>>` error with the unused weights will be returned. The order of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9143,"byte_end":9238,"line_start":221,"line_end":221,"column_start":5,"column_end":100}},{"value":"/ the returned `Vec` will be the reverse of the given order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9243,"byte_end":9305,"line_start":222,"line_end":222,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9310,"byte_end":9313,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ **Note:** Dag allows adding parallel (\"duplicate\") edges. If you want to avoid this, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9318,"byte_end":9410,"line_start":224,"line_end":224,"column_start":5,"column_end":97}},{"value":"/ [`update_edges`](./struct.Dag.html#method.update_edges) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9415,"byte_end":9483,"line_start":225,"line_end":225,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9488,"byte_end":9491,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a series of new nodes and edges to a single node, consider using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9496,"byte_end":9591,"line_start":227,"line_end":227,"column_start":5,"column_end":100}},{"value":"/  the [add_child](./struct.Dag.html#method.add_child) or [add_parent]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9596,"byte_end":9668,"line_start":228,"line_end":228,"column_start":5,"column_end":77}},{"value":"/  (./struct.Dag.html#method.add_parent) methods instead for greater convenience.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9673,"byte_end":9756,"line_start":229,"line_end":229,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9761,"byte_end":9764,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":9769,"byte_end":9850,"line_start":231,"line_end":231,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12071,"byte_end":12082,"line_start":285,"line_end":285,"column_start":12,"column_end":23},"name":"update_edge","qualname":"<Dag<N, E, Ix>>::update_edge","value":"fn (&mut self, a: NodeIndex<Ix>, b: NodeIndex<Ix>, weight: E) -> Result<EdgeIndex<Ix>, WouldCycle<E>>","parent":null,"children":[],"decl_id":null,"docs":" Update the edge from nodes `a` -> `b` with the given weight.","sig":null,"attributes":[{"value":"/ Update the edge from nodes `a` -> `b` with the given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11097,"byte_end":11161,"line_start":266,"line_end":266,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11166,"byte_end":11169,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ If the edge doesn't already exist, it will be added using the `add_edge` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11174,"byte_end":11258,"line_start":268,"line_end":268,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11263,"byte_end":11266,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Please read the [`add_edge`](./struct.Dag.html#method.add_edge) for more important details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11271,"byte_end":11366,"line_start":270,"line_end":270,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11371,"byte_end":11374,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Checks if the edge would create a cycle in the Graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11379,"byte_end":11436,"line_start":272,"line_end":272,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11441,"byte_end":11444,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(t + e)** time where \"t\" is the complexity of `add_edge` and e is the number","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11449,"byte_end":11544,"line_start":274,"line_end":274,"column_start":5,"column_end":100}},{"value":"/ of edges connected to the nodes a and b.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11549,"byte_end":11593,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11598,"byte_end":11601,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the edge, or a `WouldCycle` error if adding the edge would create a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11606,"byte_end":11698,"line_start":277,"line_end":277,"column_start":5,"column_end":97}},{"value":"/ cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11703,"byte_end":11713,"line_start":278,"line_end":278,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11718,"byte_end":11721,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a new node and immediately adding a single edge to that node from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11726,"byte_end":11822,"line_start":280,"line_end":280,"column_start":5,"column_end":101}},{"value":"/ some parent node, consider using the [`add_child`](./struct.Dag.html#method.add_child)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11827,"byte_end":11917,"line_start":281,"line_end":281,"column_start":5,"column_end":95}},{"value":"/ method instead for greater convenience.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11922,"byte_end":11965,"line_start":282,"line_end":282,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11970,"byte_end":11973,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":11978,"byte_end":12059,"line_start":284,"line_end":284,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12675,"byte_end":12684,"line_start":301,"line_end":301,"column_start":12,"column_end":21},"name":"find_edge","qualname":"<Dag<N, E, Ix>>::find_edge","value":"fn (&self, a: NodeIndex<Ix>, b: NodeIndex<Ix>) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Find and return the index to the edge that describes `a` -> `b` if there is one.","sig":null,"attributes":[{"value":"/ Find and return the index to the edge that describes `a` -> `b` if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12455,"byte_end":12539,"line_start":297,"line_end":297,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12544,"byte_end":12547,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges connected to the nodes `a`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12552,"byte_end":12646,"line_start":299,"line_end":299,"column_start":5,"column_end":99}},{"value":"/ and `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12651,"byte_end":12663,"line_start":300,"line_end":300,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12877,"byte_end":12891,"line_start":306,"line_end":306,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<Dag<N, E, Ix>>::edge_endpoints","value":"fn (&self, e: EdgeIndex<Ix>) -> Option<(NodeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the parent and child nodes for the given `EdgeIndex`.\n","sig":null,"attributes":[{"value":"/ Access the parent and child nodes for the given `EdgeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":12801,"byte_end":12865,"line_start":305,"line_end":305,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13042,"byte_end":13053,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Dag<N, E, Ix>>::clear_edges","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges.\n","sig":null,"attributes":[{"value":"/ Remove all edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13009,"byte_end":13030,"line_start":310,"line_end":310,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13752,"byte_end":13762,"line_start":329,"line_end":329,"column_start":12,"column_end":22},"name":"add_parent","qualname":"<Dag<N, E, Ix>>::add_parent","value":"fn (&mut self, child: NodeIndex<Ix>, edge: E, node: N) -> (EdgeIndex<Ix>, NodeIndex<Ix>)","parent":null,"children":[],"decl_id":null,"docs":" Add a new edge and parent node to the node at the given `NodeIndex`.\n Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.","sig":null,"attributes":[{"value":"/ Add a new edge and parent node to the node at the given `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13111,"byte_end":13183,"line_start":315,"line_end":315,"column_start":5,"column_end":77}},{"value":"/ Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13188,"byte_end":13255,"line_start":316,"line_end":316,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13260,"byte_end":13263,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ node -> edge -> child","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13268,"byte_end":13293,"line_start":318,"line_end":318,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13298,"byte_end":13301,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13306,"byte_end":13336,"line_start":320,"line_end":320,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13341,"byte_end":13344,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ This is faster than using `add_node` and `add_edge`. This is because we don't have to check","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13349,"byte_end":13444,"line_start":322,"line_end":322,"column_start":5,"column_end":100}},{"value":"/ if the graph would cycle when adding an edge to the new node, as we know it it will be the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13449,"byte_end":13543,"line_start":323,"line_end":323,"column_start":5,"column_end":99}},{"value":"/ only edge connected to that node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13548,"byte_end":13585,"line_start":324,"line_end":324,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13590,"byte_end":13593,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the given child node doesn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13598,"byte_end":13651,"line_start":326,"line_end":326,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13656,"byte_end":13659,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":13664,"byte_end":13740,"line_start":328,"line_end":328,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14675,"byte_end":14684,"line_start":351,"line_end":351,"column_start":12,"column_end":21},"name":"add_child","qualname":"<Dag<N, E, Ix>>::add_child","value":"fn (&mut self, parent: NodeIndex<Ix>, edge: E, node: N) -> (EdgeIndex<Ix>, NodeIndex<Ix>)","parent":null,"children":[],"decl_id":null,"docs":" Add a new edge and child node to the node at the given `NodeIndex`.\n Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.","sig":null,"attributes":[{"value":"/ Add a new edge and child node to the node at the given `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14034,"byte_end":14105,"line_start":337,"line_end":337,"column_start":5,"column_end":76}},{"value":"/ Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14110,"byte_end":14177,"line_start":338,"line_end":338,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14182,"byte_end":14185,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ child -> edge -> node","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14190,"byte_end":14215,"line_start":340,"line_end":340,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14220,"byte_end":14223,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14228,"byte_end":14258,"line_start":342,"line_end":342,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14263,"byte_end":14266,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ This is faster than using `add_node` and `add_edge`. This is because we don't have to check","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14271,"byte_end":14366,"line_start":344,"line_end":344,"column_start":5,"column_end":100}},{"value":"/ if the graph would cycle when adding an edge to the new node, as we know it it will be the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14371,"byte_end":14465,"line_start":345,"line_end":345,"column_start":5,"column_end":99}},{"value":"/ only edge connected to that node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14470,"byte_end":14507,"line_start":346,"line_end":346,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14512,"byte_end":14515,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the given parent node doesn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14520,"byte_end":14574,"line_start":348,"line_end":348,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14579,"byte_end":14582,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14587,"byte_end":14663,"line_start":350,"line_end":350,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15020,"byte_end":15031,"line_start":360,"line_end":360,"column_start":12,"column_end":23},"name":"node_weight","qualname":"<Dag<N, E, Ix>>::node_weight","value":"fn (&self, node: NodeIndex<Ix>) -> Option<&N>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the weight from the node at the given index.\n","sig":null,"attributes":[{"value":"/ Borrow the weight from the node at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":14953,"byte_end":15008,"line_start":359,"line_end":359,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15199,"byte_end":15214,"line_start":365,"line_end":365,"column_start":12,"column_end":27},"name":"node_weight_mut","qualname":"<Dag<N, E, Ix>>::node_weight_mut","value":"fn (&mut self, node: NodeIndex<Ix>) -> Option<&mut N>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrow the weight from the node at the given index.\n","sig":null,"attributes":[{"value":"/ Mutably borrow the weight from the node at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15124,"byte_end":15187,"line_start":364,"line_end":364,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15369,"byte_end":15378,"line_start":370,"line_end":370,"column_start":12,"column_end":21},"name":"raw_nodes","qualname":"<Dag<N, E, Ix>>::raw_nodes","value":"fn (&self) -> RawNodes<N, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Read from the internal node array.\n","sig":null,"attributes":[{"value":"/ Read from the internal node array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15319,"byte_end":15357,"line_start":369,"line_end":369,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15617,"byte_end":15633,"line_start":377,"line_end":377,"column_start":12,"column_end":28},"name":"node_weights_mut","qualname":"<Dag<N, E, Ix>>::node_weights_mut","value":"fn (&mut self) -> NodeWeightsMut<N, Ix>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding mutable access to all node weights.","sig":null,"attributes":[{"value":"/ An iterator yielding mutable access to all node weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15449,"byte_end":15509,"line_start":374,"line_end":374,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15514,"byte_end":15517,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their node indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15522,"byte_end":15605,"line_start":376,"line_end":376,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15788,"byte_end":15799,"line_start":382,"line_end":382,"column_start":12,"column_end":23},"name":"edge_weight","qualname":"<Dag<N, E, Ix>>::edge_weight","value":"fn (&self, edge: EdgeIndex<Ix>) -> Option<&E>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the weight from the edge at the given index.\n","sig":null,"attributes":[{"value":"/ Borrow the weight from the edge at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15721,"byte_end":15776,"line_start":381,"line_end":381,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15967,"byte_end":15982,"line_start":387,"line_end":387,"column_start":12,"column_end":27},"name":"edge_weight_mut","qualname":"<Dag<N, E, Ix>>::edge_weight_mut","value":"fn (&mut self, edge: EdgeIndex<Ix>) -> Option<&mut E>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrow the weight from the edge at the given index.\n","sig":null,"attributes":[{"value":"/ Mutably borrow the weight from the edge at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":15892,"byte_end":15955,"line_start":386,"line_end":386,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16137,"byte_end":16146,"line_start":392,"line_end":392,"column_start":12,"column_end":21},"name":"raw_edges","qualname":"<Dag<N, E, Ix>>::raw_edges","value":"fn (&self) -> RawEdges<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Read from the internal edge array.\n","sig":null,"attributes":[{"value":"/ Read from the internal edge array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16087,"byte_end":16125,"line_start":391,"line_end":391,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16385,"byte_end":16401,"line_start":399,"line_end":399,"column_start":12,"column_end":28},"name":"edge_weights_mut","qualname":"<Dag<N, E, Ix>>::edge_weights_mut","value":"fn (&mut self) -> EdgeWeightsMut<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding mutable access to all edge weights.","sig":null,"attributes":[{"value":"/ An iterator yielding mutable access to all edge weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16217,"byte_end":16277,"line_start":396,"line_end":396,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16282,"byte_end":16285,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their edge indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16290,"byte_end":16373,"line_start":398,"line_end":398,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16718,"byte_end":16733,"line_start":408,"line_end":408,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Dag<N, E, Ix>>::index_twice_mut","value":"fn <A, B> (&mut self, a: A, b: B) -> (&mut <PetGraph<N, E, Ix> as Index<A>>::Output,\n &mut <PetGraph<N, E, Ix> as Index<B>>::Output)","parent":null,"children":[],"decl_id":null,"docs":" Index the `Dag` by two indices.\n \n Both indices can be either `NodeIndex`s, `EdgeIndex`s or a combination of the two.","sig":null,"attributes":[{"value":"/ Index the `Dag` by two indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16489,"byte_end":16524,"line_start":403,"line_end":403,"column_start":5,"column_end":40}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16529,"byte_end":16533,"line_start":404,"line_end":404,"column_start":5,"column_end":9}},{"value":"/ Both indices can be either `NodeIndex`s, `EdgeIndex`s or a combination of the two.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16538,"byte_end":16624,"line_start":405,"line_end":405,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16629,"byte_end":16632,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":16637,"byte_end":16706,"line_start":407,"line_end":407,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17243,"byte_end":17254,"line_start":421,"line_end":421,"column_start":12,"column_end":23},"name":"remove_node","qualname":"<Dag<N, E, Ix>>::remove_node","value":"fn (&mut self, node: NodeIndex<Ix>) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Remove the node at the given index from the `Dag` and return it if it exists.","sig":null,"attributes":[{"value":"/ Remove the node at the given index from the `Dag` and return it if it exists.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17046,"byte_end":17127,"line_start":418,"line_end":418,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17132,"byte_end":17135,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Note: Calling this may shift (and in turn invalidate) previously returned node indices!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17140,"byte_end":17231,"line_start":420,"line_end":420,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17605,"byte_end":17616,"line_start":429,"line_end":429,"column_start":12,"column_end":23},"name":"remove_edge","qualname":"<Dag<N, E, Ix>>::remove_edge","value":"fn (&mut self, e: EdgeIndex<Ix>) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":" Remove an edge and return its weight, or `None` if it didn't exist.\n \n Computes in **O(e')** time, where **e'** is the size of four particular edge lists, for the\n nodes of **e** and the nodes of another affected edge.\n","sig":null,"attributes":[{"value":"/ Remove an edge and return its weight, or `None` if it didn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17350,"byte_end":17421,"line_start":425,"line_end":425,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17426,"byte_end":17430,"line_start":426,"line_end":426,"column_start":5,"column_end":9}},{"value":"/ Computes in **O(e')** time, where **e'** is the size of four particular edge lists, for the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17435,"byte_end":17530,"line_start":427,"line_end":427,"column_start":5,"column_end":100}},{"value":"/ nodes of **e** and the nodes of another affected edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17535,"byte_end":17593,"line_start":428,"line_end":428,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18272,"byte_end":18279,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"parents","qualname":"<Dag<N, E, Ix>>::parents","value":"fn (&self, child: NodeIndex<Ix>) -> Parents<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that may be used to step through the parents of the given child node.","sig":null,"attributes":[{"value":"/ A **Walker** type that may be used to step through the parents of the given child node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17706,"byte_end":17797,"line_start":433,"line_end":433,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17802,"byte_end":17805,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ Unlike iterator types, **Walker**s do not require borrowing the internal **Graph**. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17810,"byte_end":17902,"line_start":435,"line_end":435,"column_start":5,"column_end":97}},{"value":"/ makes them useful for traversing the **Graph** while still being able to mutably borrow it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":17907,"byte_end":18002,"line_start":436,"line_end":436,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18007,"byte_end":18010,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ If you require an iterator, use one of the **Walker** methods for converting this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18015,"byte_end":18100,"line_start":438,"line_end":438,"column_start":5,"column_end":90}},{"value":"/ **Walker** into a similarly behaving **Iterator** type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18105,"byte_end":18164,"line_start":439,"line_end":439,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18169,"byte_end":18172,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ See the [**Walker**](./walker/trait.Walker.html) trait for more useful methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18177,"byte_end":18260,"line_start":441,"line_end":441,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":19125,"byte_end":19133,"line_start":460,"line_end":460,"column_start":12,"column_end":20},"name":"children","qualname":"<Dag<N, E, Ix>>::children","value":"fn (&self, parent: NodeIndex<Ix>) -> Children<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A \"walker\" object that may be used to step through the children of the given parent node.","sig":null,"attributes":[{"value":"/ A \"walker\" object that may be used to step through the children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18557,"byte_end":18650,"line_start":451,"line_end":451,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18655,"byte_end":18658,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Unlike iterator types, **Walker**s do not require borrowing the internal **Graph**. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18663,"byte_end":18755,"line_start":453,"line_end":453,"column_start":5,"column_end":97}},{"value":"/ makes them useful for traversing the **Graph** while still being able to mutably borrow it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18760,"byte_end":18855,"line_start":454,"line_end":454,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18860,"byte_end":18863,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ If you require an iterator, use one of the **Walker** methods for converting this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18868,"byte_end":18953,"line_start":456,"line_end":456,"column_start":5,"column_end":90}},{"value":"/ **Walker** into a similarly behaving **Iterator** type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":18958,"byte_end":19017,"line_start":457,"line_end":457,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":19022,"byte_end":19025,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ See the [**Walker**](./walker/trait.Walker.html) trait for more useful methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":19030,"byte_end":19113,"line_start":459,"line_end":459,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":19611,"byte_end":19625,"line_start":472,"line_end":472,"column_start":12,"column_end":26},"name":"recursive_walk","qualname":"<Dag<N, E, Ix>>::recursive_walk","value":"fn <F> (&self, start: NodeIndex<Ix>, recursive_fn: F) -> RecursiveWalk<N, E, Ix, F>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":19415,"byte_end":19503,"line_start":469,"line_end":469,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":19508,"byte_end":19511,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ See the [**Walker**](./walker/trait.Walker.html) trait for more useful methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":19516,"byte_end":19599,"line_start":471,"line_end":471,"column_start":5,"column_end":88}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33249,"byte_end":33258,"line_start":337,"line_end":337,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33696,"byte_end":33705,"line_start":353,"line_end":353,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":34333,"byte_end":34338,"line_start":379,"line_end":379,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35120,"byte_end":35126,"line_start":408,"line_end":408,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35806,"byte_end":35814,"line_start":435,"line_end":435,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36675,"byte_end":36683,"line_start":464,"line_end":464,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":37253,"byte_end":37262,"line_start":487,"line_end":487,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":38175,"byte_end":38184,"line_start":519,"line_end":519,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":39083,"byte_end":39087,"line_start":551,"line_end":551,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":39695,"byte_end":39699,"line_start":579,"line_end":579,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40247,"byte_end":40252,"line_start":606,"line_end":606,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40837,"byte_end":40844,"line_start":630,"line_end":630,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41408,"byte_end":41412,"line_start":654,"line_end":654,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42071,"byte_end":42075,"line_start":680,"line_end":680,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42586,"byte_end":42595,"line_start":701,"line_end":701,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43116,"byte_end":43125,"line_start":722,"line_end":722,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43666,"byte_end":43677,"line_start":744,"line_end":744,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":44340,"byte_end":44351,"line_start":768,"line_end":768,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":45080,"byte_end":45095,"line_start":792,"line_end":792,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":45737,"byte_end":45752,"line_start":815,"line_end":815,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4135,"byte_end":4138,"line_start":103,"line_end":103,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":20493,"byte_end":20496,"line_start":495,"line_end":495,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":20679,"byte_end":20682,"line_start":502,"line_end":502,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":20857,"byte_end":20860,"line_start":508,"line_end":508,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21043,"byte_end":21046,"line_start":515,"line_end":515,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21223,"byte_end":21231,"line_start":522,"line_end":522,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21483,"byte_end":21490,"line_start":532,"line_end":532,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21724,"byte_end":21735,"line_start":543,"line_end":543,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21940,"byte_end":21950,"line_start":551,"line_end":551,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":22142,"byte_end":22152,"line_start":557,"line_end":557,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":1212,"byte_end":1218,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":23}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33249,"byte_end":33258,"line_start":337,"line_end":337,"column_start":16,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":33696,"byte_end":33705,"line_start":353,"line_end":353,"column_start":30,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":352},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":34333,"byte_end":34338,"line_start":379,"line_end":379,"column_start":33,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":369},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35120,"byte_end":35126,"line_start":408,"line_end":408,"column_start":33,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":390},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":35806,"byte_end":35814,"line_start":435,"line_end":435,"column_start":16,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":36675,"byte_end":36683,"line_start":464,"line_end":464,"column_start":30,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":403},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":37253,"byte_end":37262,"line_start":487,"line_end":487,"column_start":33,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":420},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":38175,"byte_end":38184,"line_start":519,"line_end":519,"column_start":33,"column_end":42},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":433},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":39083,"byte_end":39087,"line_start":551,"line_end":551,"column_start":30,"column_end":34},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":446},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":39695,"byte_end":39699,"line_start":579,"line_end":579,"column_start":30,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":464},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40247,"byte_end":40252,"line_start":606,"line_end":606,"column_start":30,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":482},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":40837,"byte_end":40844,"line_start":630,"line_end":630,"column_start":33,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":500},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":41408,"byte_end":41412,"line_start":654,"line_end":654,"column_start":20,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42071,"byte_end":42075,"line_start":680,"line_end":680,"column_start":33,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":513},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":42586,"byte_end":42595,"line_start":701,"line_end":701,"column_start":33,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":533},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43116,"byte_end":43125,"line_start":722,"line_end":722,"column_start":33,"column_end":42},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":553},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":43666,"byte_end":43677,"line_start":744,"line_end":744,"column_start":20,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":44340,"byte_end":44351,"line_start":768,"line_end":768,"column_start":33,"column_end":44},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":573},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":45080,"byte_end":45095,"line_start":792,"line_end":792,"column_start":33,"column_end":48},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":593},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/walker.rs","byte_start":45737,"byte_end":45752,"line_start":815,"line_end":815,"column_start":33,"column_end":48},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":613},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":4135,"byte_end":4138,"line_start":103,"line_end":103,"column_start":16,"column_end":19},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":633},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":20493,"byte_end":20496,"line_start":495,"line_end":495,"column_start":41,"column_end":44},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":20679,"byte_end":20682,"line_start":502,"line_end":502,"column_start":44,"column_end":47},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":20857,"byte_end":20860,"line_start":508,"line_end":508,"column_start":41,"column_end":44},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21043,"byte_end":21046,"line_start":515,"line_end":515,"column_start":44,"column_end":47},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21223,"byte_end":21231,"line_start":522,"line_end":522,"column_start":42,"column_end":50},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":241},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21483,"byte_end":21490,"line_start":532,"line_end":532,"column_start":42,"column_end":49},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":248},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21724,"byte_end":21735,"line_start":543,"line_end":543,"column_start":23,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":255},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":21940,"byte_end":21950,"line_start":551,"line_end":551,"column_start":33,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":649},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.5.0/src/lib.rs","byte_start":22142,"byte_end":22152,"line_start":557,"line_end":557,"column_start":33,"column_end":43},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":649},"to":{"krate":1,"index":1624}}]}