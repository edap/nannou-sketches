{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","euclid","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=fec85484d424f385","-C","extra-filename=-fec85484d424f385","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","num_traits=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libnum_traits-512b604bf456237b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libeuclid-fec85484d424f385.rmeta"},"prelude":{"crate_id":{"name":"euclid","disambiguator":[4195212546274456087,10846459731701608461]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":4,"id":{"name":"num_traits","disambiguator":[2136015123687830033,9735163811384062178]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":5,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":6,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":7,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":8,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":9,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":10,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":12,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":13,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":14,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":427,"byte_end":4585,"line_start":10,"line_end":117,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3687},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1894,"byte_end":1899,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"alias_span":null,"name":"Angle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1923,"byte_end":1928,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"alias_span":null,"name":"Box2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":576},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1954,"byte_end":1971,"line_start":45,"line_end":45,"column_start":25,"column_end":42},"alias_span":null,"name":"HomogeneousVector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3729},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2029,"byte_end":2037,"line_start":47,"line_end":47,"column_start":26,"column_end":34},"alias_span":null,"name":"NonEmpty","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1329},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2062,"byte_end":2068,"line_start":48,"line_end":48,"column_start":24,"column_end":30},"alias_span":null,"name":"point2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1332},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2070,"byte_end":2076,"line_start":48,"line_end":48,"column_start":32,"column_end":38},"alias_span":null,"name":"point3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2078,"byte_end":2085,"line_start":48,"line_end":48,"column_start":40,"column_end":47},"alias_span":null,"name":"Point2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2087,"byte_end":2094,"line_start":48,"line_end":48,"column_start":49,"column_end":56},"alias_span":null,"name":"Point3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1817},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2119,"byte_end":2124,"line_start":49,"line_end":49,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2154,"byte_end":2165,"line_start":50,"line_end":50,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2195,"byte_end":2206,"line_start":51,"line_end":51,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2232,"byte_end":2237,"line_start":52,"line_end":52,"column_start":25,"column_end":30},"alias_span":null,"name":"bvec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2239,"byte_end":2244,"line_start":52,"line_end":52,"column_start":32,"column_end":37},"alias_span":null,"name":"bvec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2246,"byte_end":2258,"line_start":52,"line_end":52,"column_start":39,"column_end":51},"alias_span":null,"name":"BoolVector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2260,"byte_end":2272,"line_start":52,"line_end":52,"column_start":53,"column_end":65},"alias_span":null,"name":"BoolVector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2299,"byte_end":2303,"line_start":53,"line_end":53,"column_start":25,"column_end":29},"alias_span":null,"name":"vec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2305,"byte_end":2309,"line_start":53,"line_end":53,"column_start":31,"column_end":35},"alias_span":null,"name":"vec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2311,"byte_end":2319,"line_start":53,"line_end":53,"column_start":37,"column_end":45},"alias_span":null,"name":"Vector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2321,"byte_end":2329,"line_start":53,"line_end":53,"column_start":47,"column_end":55},"alias_span":null,"name":"Vector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2356,"byte_end":2361,"line_start":55,"line_end":55,"column_start":24,"column_end":29},"alias_span":null,"name":"box3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":388},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2363,"byte_end":2368,"line_start":55,"line_end":55,"column_start":31,"column_end":36},"alias_span":null,"name":"Box3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2393,"byte_end":2397,"line_start":56,"line_end":56,"column_start":23,"column_end":27},"alias_span":null,"name":"rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2399,"byte_end":2403,"line_start":56,"line_end":56,"column_start":29,"column_end":33},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2428,"byte_end":2444,"line_start":57,"line_end":57,"column_start":23,"column_end":39},"alias_span":null,"name":"RigidTransform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2472,"byte_end":2482,"line_start":58,"line_end":58,"column_start":27,"column_end":37},"alias_span":null,"name":"Rotation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2484,"byte_end":2494,"line_start":58,"line_end":58,"column_start":39,"column_end":49},"alias_span":null,"name":"Rotation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1944},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2526,"byte_end":2539,"line_start":59,"line_end":59,"column_start":30,"column_end":43},"alias_span":null,"name":"SideOffsets2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2563,"byte_end":2568,"line_start":60,"line_end":60,"column_start":23,"column_end":28},"alias_span":null,"name":"size2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2570,"byte_end":2575,"line_start":60,"line_end":60,"column_start":30,"column_end":35},"alias_span":null,"name":"size3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2079},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2577,"byte_end":2583,"line_start":60,"line_end":60,"column_start":37,"column_end":43},"alias_span":null,"name":"Size2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2275},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2585,"byte_end":2591,"line_start":60,"line_end":60,"column_start":45,"column_end":51},"alias_span":null,"name":"Size3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2893},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2623,"byte_end":2636,"line_start":61,"line_end":61,"column_start":30,"column_end":43},"alias_span":null,"name":"Translation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2638,"byte_end":2651,"line_start":61,"line_end":61,"column_start":45,"column_end":58},"alias_span":null,"name":"Translation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2675,"byte_end":2679,"line_start":62,"line_end":62,"column_start":22,"column_end":26},"alias_span":null,"name":"Trig","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":427,"byte_end":4585,"line_start":10,"line_end":117,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":22},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":151},{"krate":0,"index":158},{"krate":0,"index":163},{"krate":0,"index":361},{"krate":0,"index":559},{"krate":0,"index":636},{"krate":0,"index":797},{"krate":0,"index":840},{"krate":0,"index":860},{"krate":0,"index":1335},{"krate":0,"index":1555},{"krate":0,"index":1603},{"krate":0,"index":1797},{"krate":0,"index":1926},{"krate":0,"index":2044},{"krate":0,"index":2471},{"krate":0,"index":2643},{"krate":0,"index":2862},{"krate":0,"index":3112},{"krate":0,"index":3121},{"krate":0,"index":3914},{"krate":0,"index":3934},{"krate":0,"index":3933},{"krate":0,"index":3931},{"krate":0,"index":3929},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3921},{"krate":0,"index":3919},{"krate":0,"index":3916},{"krate":0,"index":3645}],"decl_id":null,"docs":" A collection of strongly typed math tools for computer graphics with an inclination\n towards 2d graphics and layout.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":450,"byte_end":456,"line_start":10,"line_end":10,"column_start":24,"column_end":30}},{"value":"! A collection of strongly typed math tools for computer graphics with an inclination","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":460,"byte_end":547,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"! towards 2d graphics and layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":548,"byte_end":583,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":584,"byte_end":587,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! All types are generic over the scalar type of their component (`f32`, `i32`, etc.),","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":588,"byte_end":675,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"! and tagged with a generic Unit parameter which is useful to prevent mixing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":676,"byte_end":754,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"! values from different spaces. For example it should not be legal to translate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":755,"byte_end":836,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"! a screen-space position by a world-space vector and this can be expressed using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":837,"byte_end":920,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"! the generic Unit parameter.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":921,"byte_end":952,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":953,"byte_end":956,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! This unit system is not mandatory and all structures have an alias","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":957,"byte_end":1027,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"! with the default unit: `UnknownUnit`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1028,"byte_end":1069,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"! for example ```default::Point2D<T>``` is equivalent to ```Point2D<T, UnknownUnit>```.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1070,"byte_end":1159,"line_start":23,"line_end":23,"column_start":1,"column_end":90}},{"value":"! Client code typically creates a set of aliases for each type and doesn't need","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1160,"byte_end":1241,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"! to deal with the specifics of typed units further. For example:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1242,"byte_end":1309,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1310,"byte_end":1313,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1314,"byte_end":1325,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"! use euclid::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1326,"byte_end":1344,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"! pub struct ScreenSpace;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1345,"byte_end":1372,"line_start":29,"line_end":29,"column_start":1,"column_end":28}},{"value":"! pub type ScreenPoint = Point2D<f32, ScreenSpace>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1373,"byte_end":1426,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"! pub type ScreenSize = Size2D<f32, ScreenSpace>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1427,"byte_end":1478,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"! pub struct WorldSpace;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1479,"byte_end":1505,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"! pub type WorldPoint = Point3D<f32, WorldSpace>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1506,"byte_end":1557,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"! pub type ProjectionMatrix = Transform3D<f32, WorldSpace, ScreenSpace>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1558,"byte_end":1632,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"! // etc...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1633,"byte_end":1646,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1647,"byte_end":1654,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1655,"byte_end":1658,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! All euclid types are marked `#[repr(C)]` in order to facilitate exposing them to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1659,"byte_end":1743,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"! foreign function interfaces (provided the underlying scalar type is also `repr(C)`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1744,"byte_end":1832,"line_start":39,"line_end":39,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1833,"byte_end":1836,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":1837,"byte_end":1870,"line_start":41,"line_end":41,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":3687},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6593,"byte_end":6598,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Angle","qualname":"::angle::Angle","value":"Angle { radians }","parent":null,"children":[{"krate":0,"index":3689}],"decl_id":null,"docs":" An angle in radians\n","sig":null,"attributes":[{"value":"/ An angle in radians","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6423,"byte_end":6446,"line_start":19,"line_end":19,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":3689},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6612,"byte_end":6619,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"name":"radians","qualname":"::angle::Angle::radians","value":"T","parent":{"krate":0,"index":3687},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6671,"byte_end":6678,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"radians","qualname":"<Angle<T>>::radians","value":"fn (radians: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6650,"byte_end":6659,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6759,"byte_end":6762,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"get","qualname":"<Angle<T>>::get","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6738,"byte_end":6747,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6869,"byte_end":6876,"line_start":43,"line_end":43,"column_start":12,"column_end":19},"name":"degrees","qualname":"<Angle<T>>::degrees","value":"fn (deg: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6848,"byte_end":6857,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7002,"byte_end":7012,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"to_degrees","qualname":"<Angle<T>>::to_degrees","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6981,"byte_end":6990,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7266,"byte_end":7274,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"positive","qualname":"<Angle<T>>::positive","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the [0..2*PI[ range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the [0..2*PI[ range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7208,"byte_end":7254,"line_start":59,"line_end":59,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7535,"byte_end":7541,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"signed","qualname":"<Angle<T>>::signed","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the ]-PI..PI] range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the ]-PI..PI] range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7477,"byte_end":7523,"line_start":69,"line_end":69,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7928,"byte_end":7936,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Angle<T>>::angle_to","value":"fn (&self, to: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the shortest signed angle between two angles.","sig":null,"attributes":[{"value":"/ Returns the shortest signed angle between two angles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7804,"byte_end":7861,"line_start":85,"line_end":85,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7866,"byte_end":7869,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Takes wrapping and signs into account.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7874,"byte_end":7916,"line_start":87,"line_end":87,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8222,"byte_end":8226,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Angle<T>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linear interpolation between two angles, using the shortest path.\n","sig":null,"attributes":[{"value":"/ Linear interpolation between two angles, using the shortest path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8141,"byte_end":8210,"line_start":96,"line_end":96,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8403,"byte_end":8410,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"sin_cos","qualname":"<Angle<T>>::sin_cos","value":"fn (self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Returns (sin(self), cos(self)).\n","sig":null,"attributes":[{"value":"/ Returns (sin(self), cos(self)).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8356,"byte_end":8391,"line_start":106,"line_end":106,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8518,"byte_end":8522,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"zero","qualname":"<Angle<T>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8651,"byte_end":8653,"line_start":125,"line_end":125,"column_start":12,"column_end":14},"name":"pi","qualname":"<Angle<T>>::pi","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8716,"byte_end":8722,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"two_pi","qualname":"<Angle<T>>::two_pi","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8795,"byte_end":8804,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"frac_pi_2","qualname":"<Angle<T>>::frac_pi_2","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8874,"byte_end":8883,"line_start":137,"line_end":137,"column_start":12,"column_end":21},"name":"frac_pi_3","qualname":"<Angle<T>>::frac_pi_3","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8953,"byte_end":8962,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"frac_pi_4","qualname":"<Angle<T>>::frac_pi_4","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9153,"byte_end":9157,"line_start":152,"line_end":152,"column_start":12,"column_end":16},"name":"cast","qualname":"<Angle<T>>::cast","value":"fn <NewT> (&self) -> Angle<NewT>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9075,"byte_end":9127,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9132,"byte_end":9141,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9314,"byte_end":9322,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Angle<T>>::try_cast","value":"fn <NewT> (&self) -> Option<Angle<NewT>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9241,"byte_end":9302,"line_start":156,"line_end":156,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9548,"byte_end":9554,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Angle<T>>::to_f32","value":"fn (&self) -> Angle<f32>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle to `f32`.\n","sig":null,"attributes":[{"value":"/ Cast angle to `f32`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9498,"byte_end":9522,"line_start":163,"line_end":163,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9527,"byte_end":9536,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9656,"byte_end":9662,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Angle<T>>::to_f64","value":"fn (&self) -> Angle<f64>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle `f64`.\n","sig":null,"attributes":[{"value":"/ Cast angle `f64`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9609,"byte_end":9630,"line_start":169,"line_end":169,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9635,"byte_end":9644,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxeq","qualname":"::approxeq","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":157},{"krate":0,"index":3723},{"krate":0,"index":3726}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":152},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14219,"byte_end":14227,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"ApproxEq","qualname":"::approxeq::ApproxEq","value":"ApproxEq<Eps>","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"decl_id":null,"docs":" Trait for testing approximate equality\n","sig":null,"attributes":[{"value":"/ Trait for testing approximate equality","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14166,"byte_end":14208,"line_start":10,"line_end":10,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14272,"byte_end":14286,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"approx_epsilon","qualname":"::approxeq::ApproxEq::approx_epsilon","value":"fn () -> Eps","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Default epsilon value\n","sig":null,"attributes":[{"value":"/ Default epsilon value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14239,"byte_end":14264,"line_start":12,"line_end":12,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14424,"byte_end":14437,"line_start":17,"line_end":17,"column_start":8,"column_end":21},"name":"approx_eq_eps","qualname":"::approxeq::ApproxEq::approx_eq_eps","value":"fn (&self, other: &Self, approx_epsilon: &Eps) -> bool","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n a provided epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14302,"byte_end":14382,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14387,"byte_end":14416,"line_start":16,"line_end":16,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14629,"byte_end":14638,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"approx_eq","qualname":"::approxeq::ApproxEq::approx_eq","value":"fn (&self, other: &Self) -> bool","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n the `approx_epsilon()` epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14495,"byte_end":14575,"line_start":19,"line_end":19,"column_start":5,"column_end":85}},{"value":"/ the `approx_epsilon()` epsilon value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxeq.rs","byte_start":14580,"byte_end":14621,"line_start":20,"line_end":20,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":158},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxord.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxord","qualname":"::approxord","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxord.rs","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":161}],"decl_id":null,"docs":" Utilities for testing approximate ordering - especially true for\n floating point types, where NaN's cannot be ordered.\n","sig":null,"attributes":[{"value":"! Utilities for testing approximate ordering - especially true for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxord.rs","byte_start":15615,"byte_end":15683,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"! floating point types, where NaN's cannot be ordered.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxord.rs","byte_start":15684,"byte_end":15740,"line_start":11,"line_end":11,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":159},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxord.rs","byte_start":15749,"byte_end":15752,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"min","qualname":"::approxord::min","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/approxord.rs","byte_start":15852,"byte_end":15855,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"max","qualname":"::approxord::max","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18626,"byte_end":18631,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"Box2D","qualname":"::box2d::Box2D","value":"Box2D { min, max }","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":" An axis aligned rectangle represented by its minimum and maximum coordinates.","sig":null,"attributes":[{"value":"/ An axis aligned rectangle represented by its minimum and maximum coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17227,"byte_end":17308,"line_start":31,"line_end":31,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17309,"byte_end":17312,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ That struct is similar to the [`Rect`] struct, but stores rectangle as two corners","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17313,"byte_end":17399,"line_start":33,"line_end":33,"column_start":1,"column_end":87}},{"value":"/ instead of origin point and size. Such representation has several advantages over","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17400,"byte_end":17485,"line_start":34,"line_end":34,"column_start":1,"column_end":86}},{"value":"/ [`Rect`] representation:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17486,"byte_end":17514,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ - Several operations are more efficient with `Box2D`, including [`intersection`],","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17515,"byte_end":17600,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"/   [`union`], and point-in-rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17601,"byte_end":17636,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/ - The representation is more symmetric, since it stores two quantities of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17637,"byte_end":17718,"line_start":38,"line_end":38,"column_start":1,"column_end":82}},{"value":"/   same kind (two points) rather than a point and a dimension (width/height).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17719,"byte_end":17799,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ - The representation is less susceptible to overflow. With [`Rect`], computation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17800,"byte_end":17884,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/   of second point can overflow for a large range of values of origin and size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17885,"byte_end":17967,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/   However, with `Box2D`, computation of [`size`] cannot overflow if the coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":17968,"byte_end":18055,"line_start":42,"line_end":42,"column_start":1,"column_end":88}},{"value":"/   are signed and the resulting size is unsigned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18056,"byte_end":18108,"line_start":43,"line_end":43,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18109,"byte_end":18112,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ A known disadvantage of `Box2D` is that translating the rectangle requires translating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18113,"byte_end":18203,"line_start":45,"line_end":45,"column_start":1,"column_end":91}},{"value":"/ both points, whereas translating [`Rect`] only requires translating one point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18204,"byte_end":18286,"line_start":46,"line_end":46,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18287,"byte_end":18290,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ [`Rect`]: struct.Rect.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18291,"byte_end":18321,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/ [`intersection`]: #method.intersection","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18322,"byte_end":18364,"line_start":49,"line_end":49,"column_start":1,"column_end":43}},{"value":"/ [`union`]: #method.union","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18365,"byte_end":18393,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/ [`size`]: #method.size","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18394,"byte_end":18420,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18421,"byte_end":18431,"line_start":52,"line_end":52,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18648,"byte_end":18651,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"name":"min","qualname":"::box2d::Box2D::min","value":"point::Point2D<T, U>","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18676,"byte_end":18679,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"name":"max","qualname":"::box2d::Box2D::max","value":"point::Point2D<T, U>","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19814,"byte_end":19817,"line_start":108,"line_end":108,"column_start":18,"column_end":21},"name":"new","qualname":"<Box2D<T, U>>::new","value":"fn (min: Point2D<T, U>, max: Point2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19766,"byte_end":19782,"line_start":106,"line_end":106,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19787,"byte_end":19796,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20213,"byte_end":20224,"line_start":122,"line_end":122,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box2D<T, U>>::is_negative","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative area.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19958,"byte_end":20006,"line_start":117,"line_end":117,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20011,"byte_end":20014,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20019,"byte_end":20111,"line_start":119,"line_end":119,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20116,"byte_end":20187,"line_start":120,"line_end":120,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20192,"byte_end":20201,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20387,"byte_end":20407,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"is_empty_or_negative","qualname":"<Box2D<T, U>>::is_empty_or_negative","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero or negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20312,"byte_end":20361,"line_start":126,"line_end":126,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20366,"byte_end":20375,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20570,"byte_end":20580,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box2D<T, U>>::intersects","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two boxes intersect.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the two boxes intersect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20498,"byte_end":20544,"line_start":132,"line_end":132,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20549,"byte_end":20558,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21006,"byte_end":21014,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box2D<T, U>>::contains","value":"fn (&self, p: Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the point. Points are considered\n in the box if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the point. Points are considered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20776,"byte_end":20848,"line_start":141,"line_end":141,"column_start":5,"column_end":77}},{"value":"/ in the box if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20853,"byte_end":20932,"line_start":142,"line_end":142,"column_start":5,"column_end":84}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20937,"byte_end":20980,"line_start":143,"line_end":143,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":20985,"byte_end":20994,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21372,"byte_end":21384,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box2D<T, U>>::contains_box","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the interior of the other box. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the interior of the other box. Always","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21148,"byte_end":21225,"line_start":149,"line_end":149,"column_start":5,"column_end":82}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21230,"byte_end":21306,"line_start":150,"line_end":150,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21311,"byte_end":21346,"line_start":151,"line_end":151,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21351,"byte_end":21360,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21722,"byte_end":21734,"line_start":167,"line_end":167,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box2D<T, U>>::to_non_empty","value":"fn (&self) -> Option<NonEmpty<Self>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21701,"byte_end":21710,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22032,"byte_end":22044,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box2D<T, U>>::intersection","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes.","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21887,"byte_end":21930,"line_start":174,"line_end":174,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21935,"byte_end":21938,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The result is a negative box if the boxes do not intersect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21943,"byte_end":22006,"line_start":176,"line_end":176,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22011,"byte_end":22020,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22400,"byte_end":22416,"line_start":187,"line_end":187,"column_start":12,"column_end":28},"name":"try_intersection","qualname":"<Box2D<T, U>>::try_intersection","value":"fn (&self, other: &Self) -> Option<NonEmpty<Self>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes, returning `None` if the boxes do not intersect.\n","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes, returning `None` if the boxes do not intersect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22283,"byte_end":22374,"line_start":185,"line_end":185,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22379,"byte_end":22388,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22665,"byte_end":22670,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"union","qualname":"<Box2D<T, U>>::union","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22644,"byte_end":22653,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23051,"byte_end":23060,"line_start":212,"line_end":212,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box2D<T, U>>::translate","value":"fn (&self, by: Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box, translated by a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22976,"byte_end":23025,"line_start":210,"line_end":210,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23030,"byte_end":23039,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23287,"byte_end":23291,"line_start":225,"line_end":225,"column_start":12,"column_end":16},"name":"size","qualname":"<Box2D<T, U>>::size","value":"fn (&self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23266,"byte_end":23275,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23389,"byte_end":23394,"line_start":230,"line_end":230,"column_start":12,"column_end":17},"name":"width","qualname":"<Box2D<T, U>>::width","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23368,"byte_end":23377,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23473,"byte_end":23479,"line_start":235,"line_end":235,"column_start":12,"column_end":18},"name":"height","qualname":"<Box2D<T, U>>::height","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23452,"byte_end":23461,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23558,"byte_end":23565,"line_start":240,"line_end":240,"column_start":12,"column_end":19},"name":"to_rect","qualname":"<Box2D<T, U>>::to_rect","value":"fn (&self) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23537,"byte_end":23546,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23886,"byte_end":23893,"line_start":255,"line_end":255,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box2D<T, U>>::inflate","value":"fn (&self, width: T, height: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23774,"byte_end":23844,"line_start":252,"line_end":252,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23849,"byte_end":23858,"line_start":253,"line_end":253,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23863,"byte_end":23874,"line_start":254,"line_end":254,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24329,"byte_end":24338,"line_start":266,"line_end":266,"column_start":12,"column_end":21},"name":"inner_box","qualname":"<Box2D<T, U>>::inner_box","value":"fn (&self, offsets: SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner box.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24101,"byte_end":24153,"line_start":262,"line_end":262,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24158,"byte_end":24161,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal, vertical","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24166,"byte_end":24237,"line_start":264,"line_end":264,"column_start":5,"column_end":76}},{"value":"/ and applicate offsets must not be larger than the original side length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24242,"byte_end":24317,"line_start":265,"line_end":265,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24686,"byte_end":24695,"line_start":276,"line_end":276,"column_start":12,"column_end":21},"name":"outer_box","qualname":"<Box2D<T, U>>::outer_box","value":"fn (&self, offsets: SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the b and position of an outer box.","sig":null,"attributes":[{"value":"/ Calculate the b and position of an outer box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24549,"byte_end":24598,"line_start":273,"line_end":273,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24603,"byte_end":24606,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded box is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24611,"byte_end":24674,"line_start":275,"line_end":275,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":25052,"byte_end":25061,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box2D<T, U>>::from_size","value":"fn (size: Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box2D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box2D of the given size, at offset zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24972,"byte_end":25026,"line_start":288,"line_end":288,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":25031,"byte_end":25040,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":25310,"byte_end":25321,"line_start":297,"line_end":297,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box2D<T, U>>::from_points","value":"fn <I> (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":25231,"byte_end":25298,"line_start":296,"line_end":296,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26357,"byte_end":26361,"line_start":339,"line_end":339,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box2D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box and another box.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box and another box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26273,"byte_end":26331,"line_start":337,"line_end":337,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26336,"byte_end":26345,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26580,"byte_end":26586,"line_start":348,"line_end":348,"column_start":12,"column_end":18},"name":"center","qualname":"<Box2D<T, U>>::center","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26820,"byte_end":26824,"line_start":359,"line_end":359,"column_start":12,"column_end":16},"name":"area","qualname":"<Box2D<T, U>>::area","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26799,"byte_end":26808,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27016,"byte_end":27020,"line_start":370,"line_end":370,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box2D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26961,"byte_end":27004,"line_start":369,"line_end":369,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27211,"byte_end":27219,"line_start":381,"line_end":381,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box2D<T, U>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27148,"byte_end":27185,"line_start":379,"line_end":379,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27190,"byte_end":27199,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29137,"byte_end":29147,"line_start":458,"line_end":458,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box2D<T, U>>::to_untyped","value":"fn (&self) -> Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29057,"byte_end":29111,"line_start":456,"line_end":456,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29116,"byte_end":29125,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29320,"byte_end":29332,"line_start":464,"line_end":464,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box2D<T, U>>::from_untyped","value":"fn (c: &Box2D<T, UnknownUnit>) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29258,"byte_end":29294,"line_start":462,"line_end":462,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29299,"byte_end":29308,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29510,"byte_end":29519,"line_start":470,"line_end":470,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box2D<T, U>>::cast_unit","value":"fn <V> (&self) -> Box2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29467,"byte_end":29484,"line_start":468,"line_end":468,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29489,"byte_end":29498,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29642,"byte_end":29647,"line_start":475,"line_end":475,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box2D<T, U>>::scale","value":"fn <S> (&self, x: S, y: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29621,"byte_end":29630,"line_start":474,"line_end":474,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30305,"byte_end":30309,"line_start":493,"line_end":493,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box2D<T, U>>::cast","value":"fn <NewT> (&self) -> Box2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29925,"byte_end":29999,"line_start":487,"line_end":487,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30004,"byte_end":30007,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30012,"byte_end":30099,"line_start":489,"line_end":489,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30104,"byte_end":30192,"line_start":490,"line_end":490,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30197,"byte_end":30279,"line_start":491,"line_end":491,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30284,"byte_end":30293,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30791,"byte_end":30799,"line_start":502,"line_end":502,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box2D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Box2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30416,"byte_end":30499,"line_start":497,"line_end":497,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30504,"byte_end":30507,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30512,"byte_end":30599,"line_start":499,"line_end":499,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30604,"byte_end":30692,"line_start":500,"line_end":500,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":30697,"byte_end":30779,"line_start":501,"line_end":501,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31111,"byte_end":31117,"line_start":513,"line_end":513,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box2D<T, U>>::to_f32","value":"fn (&self) -> Box2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31058,"byte_end":31085,"line_start":511,"line_end":511,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31090,"byte_end":31099,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31228,"byte_end":31234,"line_start":519,"line_end":519,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box2D<T, U>>::to_f64","value":"fn (&self) -> Box2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31175,"byte_end":31202,"line_start":517,"line_end":517,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31207,"byte_end":31216,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31591,"byte_end":31599,"line_start":529,"line_end":529,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box2D<T, U>>::to_usize","value":"fn (&self) -> Box2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31292,"byte_end":31349,"line_start":523,"line_end":523,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31354,"byte_end":31357,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31362,"byte_end":31437,"line_start":525,"line_end":525,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31442,"byte_end":31517,"line_start":526,"line_end":526,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31522,"byte_end":31565,"line_start":527,"line_end":527,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31570,"byte_end":31579,"line_start":528,"line_end":528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31956,"byte_end":31962,"line_start":539,"line_end":539,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box2D<T, U>>::to_u32","value":"fn (&self) -> Box2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31659,"byte_end":31714,"line_start":533,"line_end":533,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31719,"byte_end":31722,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31727,"byte_end":31802,"line_start":535,"line_end":535,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31807,"byte_end":31882,"line_start":536,"line_end":536,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31887,"byte_end":31930,"line_start":537,"line_end":537,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":31935,"byte_end":31944,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32317,"byte_end":32323,"line_start":549,"line_end":549,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box2D<T, U>>::to_i32","value":"fn (&self) -> Box2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32020,"byte_end":32075,"line_start":543,"line_end":543,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32080,"byte_end":32083,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32088,"byte_end":32163,"line_start":545,"line_end":545,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32168,"byte_end":32243,"line_start":546,"line_end":546,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32248,"byte_end":32291,"line_start":547,"line_end":547,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32296,"byte_end":32305,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32678,"byte_end":32684,"line_start":559,"line_end":559,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box2D<T, U>>::to_i64","value":"fn (&self) -> Box2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32381,"byte_end":32436,"line_start":553,"line_end":553,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32441,"byte_end":32444,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32449,"byte_end":32524,"line_start":555,"line_end":555,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32529,"byte_end":32604,"line_start":556,"line_end":556,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32609,"byte_end":32652,"line_start":557,"line_end":557,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32657,"byte_end":32666,"line_start":558,"line_end":558,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33333,"byte_end":33338,"line_start":578,"line_end":578,"column_start":12,"column_end":17},"name":"round","qualname":"<Box2D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with edges rounded to integer coordinates, such that\n the returned box has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box with edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32789,"byte_end":32858,"line_start":568,"line_end":568,"column_start":5,"column_end":74}},{"value":"/ the returned box has the same set of pixel centers as the original","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32863,"byte_end":32933,"line_start":569,"line_end":569,"column_start":5,"column_end":75}},{"value":"/ one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32938,"byte_end":32946,"line_start":570,"line_end":570,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32951,"byte_end":32984,"line_start":571,"line_end":571,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32989,"byte_end":33051,"line_start":572,"line_end":572,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33056,"byte_end":33128,"line_start":573,"line_end":573,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33133,"byte_end":33165,"line_start":574,"line_end":574,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33170,"byte_end":33253,"line_start":575,"line_end":575,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33258,"byte_end":33305,"line_start":576,"line_end":576,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33310,"byte_end":33321,"line_start":577,"line_end":577,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33632,"byte_end":33640,"line_start":590,"line_end":590,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box2D<T, U>>::round_in","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box contains the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33476,"byte_end":33551,"line_start":587,"line_end":587,"column_start":5,"column_end":80}},{"value":"/ the original box contains the resulting box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33556,"byte_end":33604,"line_start":588,"line_end":588,"column_start":5,"column_end":53}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33609,"byte_end":33620,"line_start":589,"line_end":589,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33930,"byte_end":33939,"line_start":599,"line_end":599,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box2D<T, U>>::round_out","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box is contained in the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33767,"byte_end":33842,"line_start":596,"line_end":596,"column_start":5,"column_end":80}},{"value":"/ the original box is contained in the resulting box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33847,"byte_end":33902,"line_start":597,"line_end":597,"column_start":5,"column_end":60}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33907,"byte_end":33918,"line_start":598,"line_end":598,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42483,"byte_end":42488,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"Box3D","qualname":"::box3d::Box3D","value":"Box3D { min, max }","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" An axis aligned 3D box represented by its minimum and maximum coordinates.\n","sig":null,"attributes":[{"value":"/ An axis aligned 3D box represented by its minimum and maximum coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42199,"byte_end":42277,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42278,"byte_end":42288,"line_start":30,"line_end":30,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":391},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42505,"byte_end":42508,"line_start":37,"line_end":37,"column_start":9,"column_end":12},"name":"min","qualname":"::box3d::Box3D::min","value":"point::Point3D<T, U>","parent":{"krate":0,"index":388},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":392},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42533,"byte_end":42536,"line_start":38,"line_end":38,"column_start":9,"column_end":12},"name":"max","qualname":"::box3d::Box3D::max","value":"point::Point3D<T, U>","parent":{"krate":0,"index":388},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43671,"byte_end":43674,"line_start":86,"line_end":86,"column_start":18,"column_end":21},"name":"new","qualname":"<Box3D<T, U>>::new","value":"fn (min: Point3D<T, U>, max: Point3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43623,"byte_end":43639,"line_start":84,"line_end":84,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43644,"byte_end":43653,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44072,"byte_end":44083,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box3D<T, U>>::is_negative","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative volume.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative volume.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43815,"byte_end":43865,"line_start":95,"line_end":95,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43870,"byte_end":43873,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43878,"byte_end":43970,"line_start":97,"line_end":97,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43975,"byte_end":44046,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44051,"byte_end":44060,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44273,"byte_end":44293,"line_start":106,"line_end":106,"column_start":12,"column_end":32},"name":"is_empty_or_negative","qualname":"<Box3D<T, U>>::is_empty_or_negative","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero or negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44198,"byte_end":44247,"line_start":104,"line_end":104,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44252,"byte_end":44261,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44432,"byte_end":44442,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box3D<T, U>>::intersects","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44411,"byte_end":44420,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44952,"byte_end":44960,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box3D<T, U>>::contains","value":"fn (&self, other: Point3D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the point. Points are considered\n in the box3d if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the point. Points are considered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44718,"byte_end":44792,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ in the box3d if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44797,"byte_end":44878,"line_start":121,"line_end":121,"column_start":5,"column_end":86}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44883,"byte_end":44926,"line_start":122,"line_end":122,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":44931,"byte_end":44940,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45453,"byte_end":45465,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box3D<T, U>>::contains_box","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the interior of the other box3d. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box3d is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the interior of the other box3d. Always","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45223,"byte_end":45304,"line_start":133,"line_end":133,"column_start":5,"column_end":86}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45309,"byte_end":45385,"line_start":134,"line_end":134,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box3d is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45390,"byte_end":45427,"line_start":135,"line_end":135,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45432,"byte_end":45441,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45893,"byte_end":45905,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box3D<T, U>>::to_non_empty","value":"fn (&self) -> Option<NonEmpty<Self>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45872,"byte_end":45881,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":46080,"byte_end":46096,"line_start":162,"line_end":162,"column_start":12,"column_end":28},"name":"try_intersection","qualname":"<Box3D<T, U>>::try_intersection","value":"fn (&self, other: &Self) -> Option<NonEmpty<Self>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":46059,"byte_end":46068,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":46286,"byte_end":46298,"line_start":170,"line_end":170,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box3D<T, U>>::intersection","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":46855,"byte_end":46860,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"union","qualname":"<Box3D<T, U>>::union","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing both of the provided boxes.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing both of the provided boxes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":46762,"byte_end":46829,"line_start":186,"line_end":186,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":46834,"byte_end":46843,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47451,"byte_end":47460,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box3D<T, U>>::translate","value":"fn (&self, by: Vector3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box3d, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box3d, translated by a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47358,"byte_end":47409,"line_start":208,"line_end":208,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47414,"byte_end":47423,"line_start":209,"line_end":209,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47428,"byte_end":47439,"line_start":210,"line_end":210,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47687,"byte_end":47691,"line_start":224,"line_end":224,"column_start":12,"column_end":16},"name":"size","qualname":"<Box3D<T, U>>::size","value":"fn (&self) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47666,"byte_end":47675,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47891,"byte_end":47896,"line_start":233,"line_end":233,"column_start":12,"column_end":17},"name":"width","qualname":"<Box3D<T, U>>::width","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47870,"byte_end":47879,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47975,"byte_end":47981,"line_start":238,"line_end":238,"column_start":12,"column_end":18},"name":"height","qualname":"<Box3D<T, U>>::height","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47954,"byte_end":47963,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48060,"byte_end":48065,"line_start":243,"line_end":243,"column_start":12,"column_end":17},"name":"depth","qualname":"<Box3D<T, U>>::depth","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48039,"byte_end":48048,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48323,"byte_end":48330,"line_start":255,"line_end":255,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box3D<T, U>>::inflate","value":"fn (&self, width: T, height: T, depth: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48211,"byte_end":48281,"line_start":252,"line_end":252,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48286,"byte_end":48295,"line_start":253,"line_end":253,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48300,"byte_end":48311,"line_start":254,"line_end":254,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48740,"byte_end":48749,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box3D<T, U>>::from_size","value":"fn (size: Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box3D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box3D of the given size, at offset zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48660,"byte_end":48714,"line_start":267,"line_end":267,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48719,"byte_end":48728,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48998,"byte_end":49009,"line_start":276,"line_end":276,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box3D<T, U>>::from_points","value":"fn <I> (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48919,"byte_end":48986,"line_start":275,"line_end":275,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50234,"byte_end":50238,"line_start":324,"line_end":324,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box3D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box3d and another box3d.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box3d and another box3d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50146,"byte_end":50208,"line_start":322,"line_end":322,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50213,"byte_end":50222,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50457,"byte_end":50463,"line_start":333,"line_end":333,"column_start":12,"column_end":18},"name":"center","qualname":"<Box3D<T, U>>::center","value":"fn (&self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50697,"byte_end":50703,"line_start":344,"line_end":344,"column_start":12,"column_end":18},"name":"volume","qualname":"<Box3D<T, U>>::volume","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50676,"byte_end":50685,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50828,"byte_end":50835,"line_start":350,"line_end":350,"column_start":12,"column_end":19},"name":"xy_area","qualname":"<Box3D<T, U>>::xy_area","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50807,"byte_end":50816,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50947,"byte_end":50954,"line_start":356,"line_end":356,"column_start":12,"column_end":19},"name":"yz_area","qualname":"<Box3D<T, U>>::yz_area","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50926,"byte_end":50935,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51066,"byte_end":51073,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"xz_area","qualname":"<Box3D<T, U>>::xz_area","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51045,"byte_end":51054,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51264,"byte_end":51268,"line_start":373,"line_end":373,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box3D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51209,"byte_end":51252,"line_start":372,"line_end":372,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51461,"byte_end":51469,"line_start":384,"line_end":384,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box3D<T, U>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the volume is zero.\n","sig":null,"attributes":[{"value":"/ Returns true if the volume is zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51396,"byte_end":51435,"line_start":382,"line_end":382,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51440,"byte_end":51449,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53467,"byte_end":53477,"line_start":463,"line_end":463,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box3D<T, U>>::to_untyped","value":"fn (&self) -> Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53387,"byte_end":53441,"line_start":461,"line_end":461,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53446,"byte_end":53455,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53691,"byte_end":53703,"line_start":472,"line_end":472,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box3D<T, U>>::from_untyped","value":"fn (c: &Box3D<T, UnknownUnit>) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53629,"byte_end":53665,"line_start":470,"line_end":470,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53670,"byte_end":53679,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53922,"byte_end":53931,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box3D<T, U>>::cast_unit","value":"fn <V> (&self) -> Box3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53879,"byte_end":53896,"line_start":479,"line_end":479,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53901,"byte_end":53910,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54054,"byte_end":54059,"line_start":486,"line_end":486,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box3D<T, U>>::scale","value":"fn <S> (&self, x: S, y: S, z: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54033,"byte_end":54042,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54761,"byte_end":54765,"line_start":504,"line_end":504,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box3D<T, U>>::cast","value":"fn <NewT> (&self) -> Box3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54381,"byte_end":54455,"line_start":498,"line_end":498,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54460,"byte_end":54463,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54468,"byte_end":54555,"line_start":500,"line_end":500,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54560,"byte_end":54648,"line_start":501,"line_end":501,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54653,"byte_end":54735,"line_start":502,"line_end":502,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54740,"byte_end":54749,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55247,"byte_end":55255,"line_start":513,"line_end":513,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box3D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Box3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54872,"byte_end":54955,"line_start":508,"line_end":508,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54960,"byte_end":54963,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54968,"byte_end":55055,"line_start":510,"line_end":510,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55060,"byte_end":55148,"line_start":511,"line_end":511,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55153,"byte_end":55235,"line_start":512,"line_end":512,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55569,"byte_end":55575,"line_start":524,"line_end":524,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box3D<T, U>>::to_f32","value":"fn (&self) -> Box3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box3d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55514,"byte_end":55543,"line_start":522,"line_end":522,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55548,"byte_end":55557,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55688,"byte_end":55694,"line_start":530,"line_end":530,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box3D<T, U>>::to_f64","value":"fn (&self) -> Box3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box3d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55633,"byte_end":55662,"line_start":528,"line_end":528,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55667,"byte_end":55676,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56055,"byte_end":56063,"line_start":540,"line_end":540,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box3D<T, U>>::to_usize","value":"fn (&self) -> Box3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box3d, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55752,"byte_end":55811,"line_start":534,"line_end":534,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55816,"byte_end":55819,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55824,"byte_end":55901,"line_start":536,"line_end":536,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55906,"byte_end":55981,"line_start":537,"line_end":537,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":55986,"byte_end":56029,"line_start":538,"line_end":538,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56034,"byte_end":56043,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56424,"byte_end":56430,"line_start":550,"line_end":550,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box3D<T, U>>::to_u32","value":"fn (&self) -> Box3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box3d, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56123,"byte_end":56180,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56185,"byte_end":56188,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56193,"byte_end":56270,"line_start":546,"line_end":546,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56275,"byte_end":56350,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56355,"byte_end":56398,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56403,"byte_end":56412,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56789,"byte_end":56795,"line_start":560,"line_end":560,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box3D<T, U>>::to_i32","value":"fn (&self) -> Box3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box3d, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56488,"byte_end":56545,"line_start":554,"line_end":554,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56550,"byte_end":56553,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56558,"byte_end":56635,"line_start":556,"line_end":556,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56640,"byte_end":56715,"line_start":557,"line_end":557,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56720,"byte_end":56763,"line_start":558,"line_end":558,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56768,"byte_end":56777,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57154,"byte_end":57160,"line_start":570,"line_end":570,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box3D<T, U>>::to_i64","value":"fn (&self) -> Box3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box3d, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56853,"byte_end":56910,"line_start":564,"line_end":564,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56915,"byte_end":56918,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":56923,"byte_end":57000,"line_start":566,"line_end":566,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57005,"byte_end":57080,"line_start":567,"line_end":567,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57085,"byte_end":57128,"line_start":568,"line_end":568,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57133,"byte_end":57142,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57813,"byte_end":57818,"line_start":589,"line_end":589,"column_start":12,"column_end":17},"name":"round","qualname":"<Box3D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with edges rounded to integer coordinates, such that\n the returned box3d has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box3d with edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57265,"byte_end":57336,"line_start":579,"line_end":579,"column_start":5,"column_end":76}},{"value":"/ the returned box3d has the same set of pixel centers as the original","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57341,"byte_end":57413,"line_start":580,"line_end":580,"column_start":5,"column_end":77}},{"value":"/ one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57418,"byte_end":57426,"line_start":581,"line_end":581,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57431,"byte_end":57464,"line_start":582,"line_end":582,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57469,"byte_end":57531,"line_start":583,"line_end":583,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57536,"byte_end":57608,"line_start":584,"line_end":584,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57613,"byte_end":57645,"line_start":585,"line_end":585,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57650,"byte_end":57733,"line_start":586,"line_end":586,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57738,"byte_end":57785,"line_start":587,"line_end":587,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57790,"byte_end":57801,"line_start":588,"line_end":588,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58118,"byte_end":58126,"line_start":601,"line_end":601,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box3D<T, U>>::round_in","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d contains the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57956,"byte_end":58033,"line_start":598,"line_end":598,"column_start":5,"column_end":82}},{"value":"/ the original box3d contains the resulting box3d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58038,"byte_end":58090,"line_start":599,"line_end":599,"column_start":5,"column_end":57}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58095,"byte_end":58106,"line_start":600,"line_end":600,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58419,"byte_end":58428,"line_start":611,"line_end":611,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box3D<T, U>>::round_out","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d is contained in the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58250,"byte_end":58327,"line_start":608,"line_end":608,"column_start":5,"column_end":82}},{"value":"/ the original box3d is contained in the resulting box3d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58332,"byte_end":58391,"line_start":609,"line_end":609,"column_start":5,"column_end":64}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58396,"byte_end":58407,"line_start":610,"line_end":610,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58803,"byte_end":58808,"line_start":629,"line_end":629,"column_start":8,"column_end":13},"name":"box3d","qualname":"::box3d::box3d","value":"fn <T, U> (min_x: T, min_y: T, min_z: T, max_x: T, max_y: T, max_z: T) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58712,"byte_end":58795,"line_start":628,"line_end":628,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":576},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68727,"byte_end":68744,"line_start":25,"line_end":25,"column_start":12,"column_end":29},"name":"HomogeneousVector","qualname":"::homogen::HomogeneousVector","value":"HomogeneousVector { x, y, z, w, _unit }","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583}],"decl_id":null,"docs":" Homogeneous vector in 3D space.\n","sig":null,"attributes":[{"value":"/ Homogeneous vector in 3D space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68669,"byte_end":68704,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68705,"byte_end":68715,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":579},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68761,"byte_end":68762,"line_start":26,"line_end":26,"column_start":9,"column_end":10},"name":"x","qualname":"::homogen::HomogeneousVector::x","value":"T","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68775,"byte_end":68776,"line_start":27,"line_end":27,"column_start":9,"column_end":10},"name":"y","qualname":"::homogen::HomogeneousVector::y","value":"T","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":581},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68789,"byte_end":68790,"line_start":28,"line_end":28,"column_start":9,"column_end":10},"name":"z","qualname":"::homogen::HomogeneousVector::z","value":"T","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68803,"byte_end":68804,"line_start":29,"line_end":29,"column_start":9,"column_end":10},"name":"w","qualname":"::homogen::HomogeneousVector::w","value":"T","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":583},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68836,"byte_end":68841,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"name":"_unit","qualname":"::homogen::HomogeneousVector::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":576},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70595,"byte_end":70598,"line_start":107,"line_end":107,"column_start":18,"column_end":21},"name":"new","qualname":"<HomogeneousVector<T, U>>::new","value":"fn (x: T, y: T, z: T, w: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70517,"byte_end":70563,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70568,"byte_end":70577,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71000,"byte_end":71010,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"to_point2d","qualname":"<HomogeneousVector<T, U>>::to_point2d","value":"fn (&self) -> Option<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 2D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 2D point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70860,"byte_end":70896,"line_start":119,"line_end":119,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70901,"byte_end":70904,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70909,"byte_end":70974,"line_start":121,"line_end":121,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70979,"byte_end":70988,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71337,"byte_end":71347,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_point3d","qualname":"<HomogeneousVector<T, U>>::to_point3d","value":"fn (&self) -> Option<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 3D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 3D point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71197,"byte_end":71233,"line_start":131,"line_end":131,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71238,"byte_end":71241,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71246,"byte_end":71311,"line_start":133,"line_end":133,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71316,"byte_end":71325,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75447,"byte_end":75453,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"Length","qualname":"::length::Length","value":"","parent":null,"children":[],"decl_id":null,"docs":" A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","sig":null,"attributes":[{"value":"/ A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":74759,"byte_end":74852,"line_start":26,"line_end":26,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":74853,"byte_end":74856,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `T` can be any numeric type, for example a primitive type like `u64` or `f32`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":74857,"byte_end":74939,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":74940,"byte_end":74943,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `Unit` is not used in the representation of a `Length` value. It is used only at compile time","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":74944,"byte_end":75041,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ to ensure that a `Length` stored with one unit is converted explicitly before being used in an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75042,"byte_end":75140,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/ expression that requires a different unit.  It may be a type without values, such as an empty","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75141,"byte_end":75238,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ enum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75239,"byte_end":75248,"line_start":33,"line_end":33,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75249,"byte_end":75252,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ You can multiply a `Length` by a `scale::Scale` to convert it from one unit to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75253,"byte_end":75335,"line_start":35,"line_end":35,"column_start":1,"column_end":83}},{"value":"/ another. See the [`Scale`] docs for an example.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75336,"byte_end":75387,"line_start":36,"line_end":36,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75388,"byte_end":75391,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`Scale`]: struct.Scale.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75392,"byte_end":75424,"line_start":38,"line_end":38,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75425,"byte_end":75435,"line_start":39,"line_end":39,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76332,"byte_end":76335,"line_start":79,"line_end":79,"column_start":18,"column_end":21},"name":"new","qualname":"<Length<T, U>>::new","value":"fn (x: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Associate a value with a unit of measure.\n","sig":null,"attributes":[{"value":"/ Associate a value with a unit of measure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76255,"byte_end":76300,"line_start":77,"line_end":77,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76305,"byte_end":76314,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76502,"byte_end":76505,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"get","qualname":"<Length<T, U>>::get","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unpack the underlying value from the wrapper, cloning it.\n","sig":null,"attributes":[{"value":"/ Unpack the underlying value from the wrapper, cloning it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76429,"byte_end":76490,"line_start":85,"line_end":85,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76597,"byte_end":76606,"line_start":92,"line_end":92,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Length<T, U>>::cast_unit","value":"fn <V> (&self) -> Length<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76554,"byte_end":76571,"line_start":90,"line_end":90,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76576,"byte_end":76585,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77259,"byte_end":77263,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Length<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this length and another length.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this length and another length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76682,"byte_end":76746,"line_start":96,"line_end":96,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76751,"byte_end":76754,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76759,"byte_end":76772,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76777,"byte_end":76780,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76785,"byte_end":76796,"line_start":100,"line_end":100,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Length;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76801,"byte_end":76833,"line_start":101,"line_end":101,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76838,"byte_end":76841,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let from = Length::new(0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76846,"byte_end":76878,"line_start":103,"line_end":103,"column_start":5,"column_end":37}},{"value":"/ let to = Length::new(8.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76883,"byte_end":76913,"line_start":104,"line_end":104,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76918,"byte_end":76921,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), Length::new(-8.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76926,"byte_end":76981,"line_start":106,"line_end":106,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), Length::new( 0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76986,"byte_end":77041,"line_start":107,"line_end":107,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), Length::new( 4.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77046,"byte_end":77101,"line_start":108,"line_end":108,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), Length::new( 8.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77106,"byte_end":77161,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), Length::new(16.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77166,"byte_end":77221,"line_start":110,"line_end":110,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77226,"byte_end":77233,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77238,"byte_end":77247,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77640,"byte_end":77644,"line_start":125,"line_end":125,"column_start":12,"column_end":16},"name":"cast","qualname":"<Length<T, U>>::cast","value":"fn <NewT> (&self) -> Length<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77540,"byte_end":77614,"line_start":123,"line_end":123,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77619,"byte_end":77628,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77827,"byte_end":77835,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Length<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Length<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77732,"byte_end":77815,"line_start":129,"line_end":129,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":3729},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89452,"byte_end":89460,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"NonEmpty","qualname":"::nonempty::NonEmpty","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89633,"byte_end":89636,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"get","qualname":"<NonEmpty<T>>::get","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89612,"byte_end":89621,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89810,"byte_end":89815,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"union","qualname":"<NonEmpty<Rect<T, U>>>::union","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89789,"byte_end":89798,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89952,"byte_end":89965,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"contains_rect","qualname":"<NonEmpty<Rect<T, U>>>::contains_rect","value":"fn (&self, rect: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89931,"byte_end":89940,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90197,"byte_end":90206,"line_start":45,"line_end":45,"column_start":12,"column_end":21},"name":"translate","qualname":"<NonEmpty<Rect<T, U>>>::translate","value":"fn (&self, by: Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90176,"byte_end":90185,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90384,"byte_end":90389,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"union","qualname":"<NonEmpty<Box2D<T, U>>>::union","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90363,"byte_end":90372,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90567,"byte_end":90579,"line_start":61,"line_end":61,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<NonEmpty<Box2D<T, U>>>::contains_box","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this box contains the interior of the other box.\n","sig":null,"attributes":[{"value":"/ Returns true if this box contains the interior of the other box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90473,"byte_end":90541,"line_start":59,"line_end":59,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90546,"byte_end":90555,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90877,"byte_end":90886,"line_start":74,"line_end":74,"column_start":12,"column_end":21},"name":"translate","qualname":"<NonEmpty<Box2D<T, U>>>::translate","value":"fn (&self, by: Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90856,"byte_end":90865,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91064,"byte_end":91069,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"union","qualname":"<NonEmpty<Box3D<T, U>>>::union","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91043,"byte_end":91052,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91247,"byte_end":91259,"line_start":90,"line_end":90,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<NonEmpty<Box3D<T, U>>>::contains_box","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this box contains the interior of the other box.\n","sig":null,"attributes":[{"value":"/ Returns true if this box contains the interior of the other box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91153,"byte_end":91221,"line_start":88,"line_end":88,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91226,"byte_end":91235,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91639,"byte_end":91648,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"translate","qualname":"<NonEmpty<Box3D<T, U>>>::translate","value":"fn (&self, by: Vector3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91618,"byte_end":91627,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":3756},{"krate":0,"index":3758},{"krate":0,"index":3760},{"krate":0,"index":3762},{"krate":0,"index":3764},{"krate":0,"index":3766},{"krate":0,"index":3768},{"krate":0,"index":3770},{"krate":0,"index":3772},{"krate":0,"index":3774},{"krate":0,"index":3776},{"krate":0,"index":3778},{"krate":0,"index":3780},{"krate":0,"index":3782},{"krate":0,"index":3784},{"krate":0,"index":3786},{"krate":0,"index":3788},{"krate":0,"index":3790},{"krate":0,"index":3792},{"krate":0,"index":3794},{"krate":0,"index":3796},{"krate":0,"index":3798},{"krate":0,"index":3800},{"krate":0,"index":3802},{"krate":0,"index":3804},{"krate":0,"index":3806},{"krate":0,"index":3808},{"krate":0,"index":3810},{"krate":0,"index":3812},{"krate":0,"index":3814}],"decl_id":null,"docs":" A one-dimensional length, tagged with its units.\n","sig":null,"attributes":[{"value":"! A one-dimensional length, tagged with its units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":95986,"byte_end":96038,"line_start":9,"line_end":9,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97167,"byte_end":97171,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"Zero","qualname":"::num::Zero","value":"Zero","parent":null,"children":[{"krate":0,"index":843}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97181,"byte_end":97185,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"zero","qualname":"::num::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":842},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97312,"byte_end":97315,"line_start":38,"line_end":38,"column_start":11,"column_end":14},"name":"One","qualname":"::num::One","value":"One","parent":null,"children":[{"krate":0,"index":848}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97325,"byte_end":97328,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"one","qualname":"::num::One::one","value":"fn () -> Self","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":852},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97511,"byte_end":97516,"line_start":49,"line_end":49,"column_start":11,"column_end":16},"name":"Round","qualname":"::num::Round","value":"Round: Copy","parent":null,"children":[{"krate":0,"index":853}],"decl_id":null,"docs":" Defines the nearest integer value to the original value.\n","sig":null,"attributes":[{"value":"/ Defines the nearest integer value to the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97440,"byte_end":97500,"line_start":48,"line_end":48,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97681,"byte_end":97686,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"round","qualname":"::num::Round::round","value":"fn (self) -> Self","parent":{"krate":0,"index":852},"children":[],"decl_id":null,"docs":" Rounds to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds to the nearest integer value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97529,"byte_end":97569,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97574,"byte_end":97577,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97582,"byte_end":97657,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97662,"byte_end":97673,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":854},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97786,"byte_end":97791,"line_start":57,"line_end":57,"column_start":11,"column_end":16},"name":"Floor","qualname":"::num::Floor","value":"Floor: Copy","parent":null,"children":[{"krate":0,"index":855}],"decl_id":null,"docs":" Defines the biggest integer equal or lower than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97704,"byte_end":97775,"line_start":56,"line_end":56,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97989,"byte_end":97994,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"floor","qualname":"::num::Floor::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":854},"children":[],"decl_id":null,"docs":" Rounds to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97804,"byte_end":97877,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97882,"byte_end":97885,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97890,"byte_end":97965,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97970,"byte_end":97981,"line_start":61,"line_end":61,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":856},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98097,"byte_end":98101,"line_start":65,"line_end":65,"column_start":11,"column_end":15},"name":"Ceil","qualname":"::num::Ceil","value":"Ceil: Copy","parent":null,"children":[{"krate":0,"index":857}],"decl_id":null,"docs":" Defines the smallest integer equal or greater than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98012,"byte_end":98086,"line_start":64,"line_end":64,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98302,"byte_end":98306,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"ceil","qualname":"::num::Ceil::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":856},"children":[],"decl_id":null,"docs":" Rounds to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98114,"byte_end":98190,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98195,"byte_end":98198,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98203,"byte_end":98278,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98283,"byte_end":98294,"line_start":69,"line_end":69,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100477,"byte_end":100484,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Point2D","qualname":"::point::Point2D","value":"Point2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901}],"decl_id":null,"docs":" A 2d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Point tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100420,"byte_end":100454,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100455,"byte_end":100465,"line_start":30,"line_end":30,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100501,"byte_end":100502,"line_start":32,"line_end":32,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point2D::x","value":"T","parent":{"krate":0,"index":896},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":900},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100515,"byte_end":100516,"line_start":33,"line_end":33,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point2D::y","value":"T","parent":{"krate":0,"index":896},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100548,"byte_end":100553,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":896},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102692,"byte_end":102698,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point2D<T, U>>::origin","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102618,"byte_end":102666,"line_start":127,"line_end":127,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102671,"byte_end":102680,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102867,"byte_end":102871,"line_start":138,"line_end":138,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point2D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102796,"byte_end":102841,"line_start":136,"line_end":136,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102846,"byte_end":102855,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103027,"byte_end":103030,"line_start":147,"line_end":147,"column_start":18,"column_end":21},"name":"new","qualname":"<Point2D<T, U>>::new","value":"fn (x: T, y: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102949,"byte_end":102995,"line_start":145,"line_end":145,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103000,"byte_end":103009,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103245,"byte_end":103257,"line_start":157,"line_end":157,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point2D<T, U>>::from_lengths","value":"fn (x: Length<T, U>, y: Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103154,"byte_end":103219,"line_start":155,"line_end":155,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103224,"byte_end":103233,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103400,"byte_end":103412,"line_start":163,"line_end":163,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point2D<T, U>>::from_untyped","value":"fn (p: Point2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103338,"byte_end":103374,"line_start":161,"line_end":161,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103379,"byte_end":103388,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103613,"byte_end":103619,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"extend","qualname":"<Point2D<T, U>>::extend","value":"fn (&self, z: T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d point from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d point from this one, using the specified z value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103522,"byte_end":103587,"line_start":169,"line_end":169,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103592,"byte_end":103601,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103827,"byte_end":103836,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point2D<T, U>>::to_vector","value":"fn (&self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103697,"byte_end":103731,"line_start":175,"line_end":175,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103736,"byte_end":103739,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin from this point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103744,"byte_end":103801,"line_start":177,"line_end":177,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103806,"byte_end":103815,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104261,"byte_end":104263,"line_start":200,"line_end":200,"column_start":12,"column_end":14},"name":"yx","qualname":"<Point2D<T, U>>::yx","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103982,"byte_end":103999,"line_start":187,"line_end":187,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104004,"byte_end":104007,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104012,"byte_end":104025,"line_start":189,"line_end":189,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104030,"byte_end":104033,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104038,"byte_end":104049,"line_start":191,"line_end":191,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104054,"byte_end":104090,"line_start":192,"line_end":192,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104095,"byte_end":104109,"line_start":193,"line_end":193,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104114,"byte_end":104117,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104122,"byte_end":104168,"line_start":195,"line_end":195,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104173,"byte_end":104176,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.yx(), point2(-8, 1));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104181,"byte_end":104223,"line_start":197,"line_end":197,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104228,"byte_end":104235,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104240,"byte_end":104249,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104694,"byte_end":104704,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point2D<T, U>>::to_untyped","value":"fn (&self) -> Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104323,"byte_end":104377,"line_start":204,"line_end":204,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104382,"byte_end":104385,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104390,"byte_end":104403,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104408,"byte_end":104411,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104416,"byte_end":104427,"line_start":208,"line_end":208,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104432,"byte_end":104468,"line_start":209,"line_end":209,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104473,"byte_end":104487,"line_start":210,"line_end":210,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104492,"byte_end":104495,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104500,"byte_end":104546,"line_start":212,"line_end":212,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104551,"byte_end":104554,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104559,"byte_end":104605,"line_start":214,"line_end":214,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104610,"byte_end":104656,"line_start":215,"line_end":215,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104661,"byte_end":104668,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104673,"byte_end":104682,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105177,"byte_end":105186,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point2D<T, U>>::cast_unit","value":"fn <V> (&self) -> Point2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104783,"byte_end":104831,"line_start":222,"line_end":222,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104836,"byte_end":104839,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104844,"byte_end":104857,"line_start":224,"line_end":224,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104862,"byte_end":104865,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104870,"byte_end":104881,"line_start":226,"line_end":226,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104886,"byte_end":104922,"line_start":227,"line_end":227,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104927,"byte_end":104941,"line_start":228,"line_end":228,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104946,"byte_end":104960,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104965,"byte_end":104968,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":104973,"byte_end":105019,"line_start":231,"line_end":231,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105024,"byte_end":105027,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105032,"byte_end":105083,"line_start":233,"line_end":233,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105088,"byte_end":105139,"line_start":234,"line_end":234,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105144,"byte_end":105151,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105156,"byte_end":105165,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105556,"byte_end":105564,"line_start":254,"line_end":254,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point2D<T, U>>::to_array","value":"fn (&self) -> [T; 2]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105258,"byte_end":105294,"line_start":241,"line_end":241,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105299,"byte_end":105302,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105307,"byte_end":105320,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105325,"byte_end":105328,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105333,"byte_end":105344,"line_start":245,"line_end":245,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105349,"byte_end":105385,"line_start":246,"line_end":246,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105390,"byte_end":105404,"line_start":247,"line_end":247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105409,"byte_end":105412,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105417,"byte_end":105463,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105468,"byte_end":105471,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105476,"byte_end":105518,"line_start":251,"line_end":251,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105523,"byte_end":105530,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105535,"byte_end":105544,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105917,"byte_end":105925,"line_start":271,"line_end":271,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point2D<T, U>>::to_tuple","value":"fn (&self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105620,"byte_end":105655,"line_start":258,"line_end":258,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105660,"byte_end":105663,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105668,"byte_end":105681,"line_start":260,"line_end":260,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105686,"byte_end":105689,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105694,"byte_end":105705,"line_start":262,"line_end":262,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105710,"byte_end":105746,"line_start":263,"line_end":263,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105751,"byte_end":105765,"line_start":264,"line_end":264,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105770,"byte_end":105773,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105778,"byte_end":105824,"line_start":266,"line_end":266,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105829,"byte_end":105832,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105837,"byte_end":105879,"line_start":268,"line_end":268,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105884,"byte_end":105891,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105896,"byte_end":105905,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106068,"byte_end":106073,"line_start":277,"line_end":277,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Point2D<T, U>>::to_3d","value":"fn (&self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d point with z-coordinate equals to zero.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d point with z-coordinate equals to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":105981,"byte_end":106042,"line_start":275,"line_end":275,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106047,"byte_end":106056,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106549,"byte_end":106554,"line_start":296,"line_end":296,"column_start":12,"column_end":17},"name":"round","qualname":"<Point2D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106187,"byte_end":106242,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106247,"byte_end":106250,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106255,"byte_end":106330,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106335,"byte_end":106338,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106343,"byte_end":106354,"line_start":288,"line_end":288,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106359,"byte_end":106384,"line_start":289,"line_end":289,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106389,"byte_end":106403,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106408,"byte_end":106411,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).round(), point2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106416,"byte_end":106495,"line_start":292,"line_end":292,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106500,"byte_end":106507,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106512,"byte_end":106521,"line_start":294,"line_end":294,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106526,"byte_end":106537,"line_start":295,"line_end":295,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107058,"byte_end":107062,"line_start":315,"line_end":315,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point2D<T, U>>::ceil","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106662,"byte_end":106753,"line_start":303,"line_end":303,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106758,"byte_end":106761,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106766,"byte_end":106841,"line_start":305,"line_end":305,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106846,"byte_end":106849,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106854,"byte_end":106865,"line_start":307,"line_end":307,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106870,"byte_end":106895,"line_start":308,"line_end":308,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106900,"byte_end":106914,"line_start":309,"line_end":309,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106919,"byte_end":106922,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).ceil(), point2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":106927,"byte_end":107004,"line_start":311,"line_end":311,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107009,"byte_end":107016,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107021,"byte_end":107030,"line_start":313,"line_end":313,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107035,"byte_end":107046,"line_start":314,"line_end":314,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107563,"byte_end":107568,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point2D<T, U>>::floor","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107167,"byte_end":107255,"line_start":322,"line_end":322,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107260,"byte_end":107263,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107268,"byte_end":107343,"line_start":324,"line_end":324,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107348,"byte_end":107351,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107356,"byte_end":107367,"line_start":326,"line_end":326,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107372,"byte_end":107397,"line_start":327,"line_end":327,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107402,"byte_end":107416,"line_start":328,"line_end":328,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107421,"byte_end":107424,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).floor(), point2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107429,"byte_end":107509,"line_start":330,"line_end":330,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107514,"byte_end":107521,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107526,"byte_end":107535,"line_start":332,"line_end":332,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107540,"byte_end":107551,"line_start":333,"line_end":333,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108317,"byte_end":108321,"line_start":359,"line_end":359,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point2D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107676,"byte_end":107738,"line_start":341,"line_end":341,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107743,"byte_end":107746,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107751,"byte_end":107764,"line_start":343,"line_end":343,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107769,"byte_end":107772,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107777,"byte_end":107788,"line_start":345,"line_end":345,"column_start":5,"column_end":16}},{"value":"/ use euclid::point2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107793,"byte_end":107816,"line_start":346,"line_end":346,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point2D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107821,"byte_end":107854,"line_start":347,"line_end":347,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107859,"byte_end":107862,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let from: Point2D<_> = point2(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107867,"byte_end":107912,"line_start":349,"line_end":349,"column_start":5,"column_end":50}},{"value":"/ let to:  Point2D<_> = point2(8.0, -4.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107917,"byte_end":107961,"line_start":350,"line_end":350,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107966,"byte_end":107969,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point2(-8.0,  24.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":107974,"byte_end":108031,"line_start":352,"line_end":352,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point2( 0.0,  10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108036,"byte_end":108093,"line_start":353,"line_end":353,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point2( 4.0,   3.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108098,"byte_end":108155,"line_start":354,"line_end":354,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point2( 8.0,  -4.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108160,"byte_end":108217,"line_start":355,"line_end":355,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point2(16.0, -18.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108222,"byte_end":108279,"line_start":356,"line_end":356,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108284,"byte_end":108291,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108296,"byte_end":108305,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108624,"byte_end":108627,"line_start":370,"line_end":370,"column_start":12,"column_end":15},"name":"min","qualname":"<Point2D<T, U>>::min","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108603,"byte_end":108612,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108748,"byte_end":108751,"line_start":375,"line_end":375,"column_start":12,"column_end":15},"name":"max","qualname":"<Point2D<T, U>>::max","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108727,"byte_end":108736,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109045,"byte_end":109050,"line_start":384,"line_end":384,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point2D<T, U>>::clamp","value":"fn (&self, start: Self, end: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108851,"byte_end":108921,"line_start":379,"line_end":379,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108926,"byte_end":108962,"line_start":380,"line_end":380,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108967,"byte_end":108970,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108975,"byte_end":109019,"line_start":382,"line_end":382,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109024,"byte_end":109033,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109592,"byte_end":109596,"line_start":399,"line_end":399,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point2D<T, U>>::cast","value":"fn <NewT> (&self) -> Point2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109212,"byte_end":109286,"line_start":393,"line_end":393,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109291,"byte_end":109294,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109299,"byte_end":109386,"line_start":395,"line_end":395,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109391,"byte_end":109479,"line_start":396,"line_end":396,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109484,"byte_end":109566,"line_start":397,"line_end":397,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109571,"byte_end":109580,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110060,"byte_end":110068,"line_start":408,"line_end":408,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point2D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Point2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109685,"byte_end":109768,"line_start":403,"line_end":403,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109773,"byte_end":109776,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109781,"byte_end":109868,"line_start":405,"line_end":405,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109873,"byte_end":109961,"line_start":406,"line_end":406,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109966,"byte_end":110048,"line_start":407,"line_end":407,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110384,"byte_end":110390,"line_start":419,"line_end":419,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point2D<T, U>>::to_f32","value":"fn (&self) -> Point2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110329,"byte_end":110358,"line_start":417,"line_end":417,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110363,"byte_end":110372,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110505,"byte_end":110511,"line_start":425,"line_end":425,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point2D<T, U>>::to_f64","value":"fn (&self) -> Point2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110450,"byte_end":110479,"line_start":423,"line_end":423,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110484,"byte_end":110493,"line_start":424,"line_end":424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110865,"byte_end":110873,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point2D<T, U>>::to_usize","value":"fn (&self) -> Point2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110571,"byte_end":110630,"line_start":429,"line_end":429,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110635,"byte_end":110638,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110643,"byte_end":110719,"line_start":431,"line_end":431,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110724,"byte_end":110798,"line_start":432,"line_end":432,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110803,"byte_end":110839,"line_start":433,"line_end":433,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110844,"byte_end":110853,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111227,"byte_end":111233,"line_start":445,"line_end":445,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point2D<T, U>>::to_u32","value":"fn (&self) -> Point2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110935,"byte_end":110992,"line_start":439,"line_end":439,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":110997,"byte_end":111000,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111005,"byte_end":111081,"line_start":441,"line_end":441,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111086,"byte_end":111160,"line_start":442,"line_end":442,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111165,"byte_end":111201,"line_start":443,"line_end":443,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111206,"byte_end":111215,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111583,"byte_end":111589,"line_start":455,"line_end":455,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point2D<T, U>>::to_i32","value":"fn (&self) -> Point2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111293,"byte_end":111348,"line_start":449,"line_end":449,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111353,"byte_end":111356,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111361,"byte_end":111437,"line_start":451,"line_end":451,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111442,"byte_end":111516,"line_start":452,"line_end":452,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111521,"byte_end":111557,"line_start":453,"line_end":453,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111562,"byte_end":111571,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111939,"byte_end":111945,"line_start":465,"line_end":465,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point2D<T, U>>::to_i64","value":"fn (&self) -> Point2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111649,"byte_end":111704,"line_start":459,"line_end":459,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111709,"byte_end":111712,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111717,"byte_end":111793,"line_start":461,"line_end":461,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111798,"byte_end":111872,"line_start":462,"line_end":462,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111877,"byte_end":111913,"line_start":463,"line_end":463,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":111918,"byte_end":111927,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112082,"byte_end":112090,"line_start":472,"line_end":472,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point2D<T, U>>::add_size","value":"fn (&self, other: &Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112061,"byte_end":112070,"line_start":471,"line_end":471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112279,"byte_end":112290,"line_start":479,"line_end":479,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point2D<T, U>>::distance_to","value":"fn (self, other: Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112258,"byte_end":112267,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117628,"byte_end":117635,"line_start":703,"line_end":703,"column_start":12,"column_end":19},"name":"Point3D","qualname":"::point::Point3D","value":"Point3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116}],"decl_id":null,"docs":" A 3d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Point tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117571,"byte_end":117605,"line_start":701,"line_end":701,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117606,"byte_end":117616,"line_start":702,"line_end":702,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117652,"byte_end":117653,"line_start":704,"line_end":704,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point3D::x","value":"T","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1114},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117666,"byte_end":117667,"line_start":705,"line_end":705,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point3D::y","value":"T","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117680,"byte_end":117681,"line_start":706,"line_end":706,"column_start":9,"column_end":10},"name":"z","qualname":"::point::Point3D::z","value":"T","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1116},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117713,"byte_end":117718,"line_start":708,"line_end":708,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120067,"byte_end":120073,"line_start":811,"line_end":811,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point3D<T, U>>::origin","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119993,"byte_end":120041,"line_start":809,"line_end":809,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120046,"byte_end":120055,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120256,"byte_end":120260,"line_start":820,"line_end":820,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point3D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120185,"byte_end":120230,"line_start":818,"line_end":818,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120235,"byte_end":120244,"line_start":819,"line_end":819,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120416,"byte_end":120419,"line_start":829,"line_end":829,"column_start":18,"column_end":21},"name":"new","qualname":"<Point3D<T, U>>::new","value":"fn (x: T, y: T, z: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120338,"byte_end":120384,"line_start":827,"line_end":827,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120389,"byte_end":120398,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120655,"byte_end":120667,"line_start":840,"line_end":840,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point3D<T, U>>::from_lengths","value":"fn (x: Length<T, U>, y: Length<T, U>, z: Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120564,"byte_end":120629,"line_start":838,"line_end":838,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120634,"byte_end":120643,"line_start":839,"line_end":839,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120832,"byte_end":120844,"line_start":846,"line_end":846,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point3D<T, U>>::from_untyped","value":"fn (p: Point3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120770,"byte_end":120806,"line_start":844,"line_end":844,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120811,"byte_end":120820,"line_start":845,"line_end":845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121087,"byte_end":121096,"line_start":856,"line_end":856,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point3D<T, U>>::to_vector","value":"fn (&self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120959,"byte_end":120993,"line_start":852,"line_end":852,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120998,"byte_end":121001,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin to this point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121006,"byte_end":121061,"line_start":854,"line_end":854,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121066,"byte_end":121075,"line_start":855,"line_end":855,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121352,"byte_end":121354,"line_start":867,"line_end":867,"column_start":12,"column_end":14},"name":"xy","qualname":"<Point3D<T, U>>::xy","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and y coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121265,"byte_end":121326,"line_start":865,"line_end":865,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121331,"byte_end":121340,"line_start":866,"line_end":866,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121510,"byte_end":121512,"line_start":873,"line_end":873,"column_start":12,"column_end":14},"name":"xz","qualname":"<Point3D<T, U>>::xz","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121423,"byte_end":121484,"line_start":871,"line_end":871,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121489,"byte_end":121498,"line_start":872,"line_end":872,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121668,"byte_end":121670,"line_start":879,"line_end":879,"column_start":12,"column_end":14},"name":"yz","qualname":"<Point3D<T, U>>::yz","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121581,"byte_end":121642,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121647,"byte_end":121656,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122046,"byte_end":122054,"line_start":896,"line_end":896,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point3D<T, U>>::to_array","value":"fn (&self) -> [T; 3]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121739,"byte_end":121778,"line_start":883,"line_end":883,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121783,"byte_end":121786,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121791,"byte_end":121804,"line_start":885,"line_end":885,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121809,"byte_end":121812,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121817,"byte_end":121828,"line_start":887,"line_end":887,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121833,"byte_end":121869,"line_start":888,"line_end":888,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121874,"byte_end":121888,"line_start":889,"line_end":889,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121893,"byte_end":121896,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121901,"byte_end":121950,"line_start":891,"line_end":891,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121955,"byte_end":121958,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8, 0]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":121963,"byte_end":122008,"line_start":893,"line_end":893,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122013,"byte_end":122020,"line_start":894,"line_end":894,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122025,"byte_end":122034,"line_start":895,"line_end":895,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122139,"byte_end":122150,"line_start":901,"line_end":901,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Point3D<T, U>>::to_array_4d","value":"fn (&self) -> [T; 4]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122118,"byte_end":122127,"line_start":900,"line_end":900,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122562,"byte_end":122570,"line_start":921,"line_end":921,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point3D<T, U>>::to_tuple","value":"fn (&self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122256,"byte_end":122294,"line_start":908,"line_end":908,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122299,"byte_end":122302,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122307,"byte_end":122320,"line_start":910,"line_end":910,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122325,"byte_end":122328,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122333,"byte_end":122344,"line_start":912,"line_end":912,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122349,"byte_end":122385,"line_start":913,"line_end":913,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122390,"byte_end":122404,"line_start":914,"line_end":914,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122409,"byte_end":122412,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122417,"byte_end":122466,"line_start":916,"line_end":916,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122471,"byte_end":122474,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8, 0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122479,"byte_end":122524,"line_start":918,"line_end":918,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122529,"byte_end":122536,"line_start":919,"line_end":919,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122541,"byte_end":122550,"line_start":920,"line_end":920,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122658,"byte_end":122669,"line_start":926,"line_end":926,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Point3D<T, U>>::to_tuple_4d","value":"fn (&self) -> (T, T, T, T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122637,"byte_end":122646,"line_start":925,"line_end":925,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123206,"byte_end":123216,"line_start":948,"line_end":948,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point3D<T, U>>::to_untyped","value":"fn (&self) -> Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122781,"byte_end":122835,"line_start":933,"line_end":933,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122840,"byte_end":122843,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122848,"byte_end":122861,"line_start":935,"line_end":935,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122866,"byte_end":122869,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122874,"byte_end":122885,"line_start":937,"line_end":937,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122890,"byte_end":122926,"line_start":938,"line_end":938,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122931,"byte_end":122945,"line_start":939,"line_end":939,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122950,"byte_end":122953,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":122958,"byte_end":123007,"line_start":941,"line_end":941,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123012,"byte_end":123015,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123020,"byte_end":123066,"line_start":943,"line_end":943,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123071,"byte_end":123117,"line_start":944,"line_end":944,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.z, point.to_untyped().z);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123122,"byte_end":123168,"line_start":945,"line_end":945,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123173,"byte_end":123180,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123185,"byte_end":123194,"line_start":947,"line_end":947,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123756,"byte_end":123765,"line_start":968,"line_end":968,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point3D<T, U>>::cast_unit","value":"fn <V> (&self) -> Point3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123303,"byte_end":123351,"line_start":952,"line_end":952,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123356,"byte_end":123359,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123364,"byte_end":123377,"line_start":954,"line_end":954,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123382,"byte_end":123385,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123390,"byte_end":123401,"line_start":956,"line_end":956,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123406,"byte_end":123442,"line_start":957,"line_end":957,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123447,"byte_end":123461,"line_start":958,"line_end":958,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123466,"byte_end":123480,"line_start":959,"line_end":959,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123485,"byte_end":123488,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123493,"byte_end":123542,"line_start":961,"line_end":961,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123547,"byte_end":123550,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123555,"byte_end":123606,"line_start":963,"line_end":963,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123611,"byte_end":123662,"line_start":964,"line_end":964,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.z, point.cast_unit::<Cm>().z);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123667,"byte_end":123718,"line_start":965,"line_end":965,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123723,"byte_end":123730,"line_start":966,"line_end":966,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123735,"byte_end":123744,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123899,"byte_end":123904,"line_start":974,"line_end":974,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Point3D<T, U>>::to_2d","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d point.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123845,"byte_end":123873,"line_start":972,"line_end":972,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123878,"byte_end":123887,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124332,"byte_end":124337,"line_start":990,"line_end":990,"column_start":12,"column_end":17},"name":"round","qualname":"<Point3D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":123960,"byte_end":124015,"line_start":978,"line_end":978,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124020,"byte_end":124023,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124028,"byte_end":124103,"line_start":980,"line_end":980,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124108,"byte_end":124111,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124116,"byte_end":124127,"line_start":982,"line_end":982,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124132,"byte_end":124157,"line_start":983,"line_end":983,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124162,"byte_end":124176,"line_start":984,"line_end":984,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124181,"byte_end":124184,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).round(), point3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124189,"byte_end":124278,"line_start":986,"line_end":986,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124283,"byte_end":124290,"line_start":987,"line_end":987,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124295,"byte_end":124304,"line_start":988,"line_end":988,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124309,"byte_end":124320,"line_start":989,"line_end":989,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124867,"byte_end":124871,"line_start":1009,"line_end":1009,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point3D<T, U>>::ceil","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124461,"byte_end":124552,"line_start":997,"line_end":997,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124557,"byte_end":124560,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124565,"byte_end":124640,"line_start":999,"line_end":999,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124645,"byte_end":124648,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124653,"byte_end":124664,"line_start":1001,"line_end":1001,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124669,"byte_end":124694,"line_start":1002,"line_end":1002,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124699,"byte_end":124713,"line_start":1003,"line_end":1003,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124718,"byte_end":124721,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), point3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124726,"byte_end":124813,"line_start":1005,"line_end":1005,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124818,"byte_end":124825,"line_start":1006,"line_end":1006,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124830,"byte_end":124839,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124844,"byte_end":124855,"line_start":1008,"line_end":1008,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125397,"byte_end":125402,"line_start":1028,"line_end":1028,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point3D<T, U>>::floor","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":124991,"byte_end":125079,"line_start":1016,"line_end":1016,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125084,"byte_end":125087,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125092,"byte_end":125167,"line_start":1018,"line_end":1018,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125172,"byte_end":125175,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125180,"byte_end":125191,"line_start":1020,"line_end":1020,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125196,"byte_end":125221,"line_start":1021,"line_end":1021,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125226,"byte_end":125240,"line_start":1022,"line_end":1022,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125245,"byte_end":125248,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).floor(), point3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125253,"byte_end":125343,"line_start":1024,"line_end":1024,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125348,"byte_end":125355,"line_start":1025,"line_end":1025,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125360,"byte_end":125369,"line_start":1026,"line_end":1026,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125374,"byte_end":125385,"line_start":1027,"line_end":1027,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126209,"byte_end":126213,"line_start":1053,"line_end":1053,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point3D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125526,"byte_end":125588,"line_start":1035,"line_end":1035,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125593,"byte_end":125596,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125601,"byte_end":125614,"line_start":1037,"line_end":1037,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125619,"byte_end":125622,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125627,"byte_end":125638,"line_start":1039,"line_end":1039,"column_start":5,"column_end":16}},{"value":"/ use euclid::point3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125643,"byte_end":125666,"line_start":1040,"line_end":1040,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point3D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125671,"byte_end":125704,"line_start":1041,"line_end":1041,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125709,"byte_end":125712,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let from: Point3D<_> = point3(0.0, 10.0, -1.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125717,"byte_end":125768,"line_start":1043,"line_end":1043,"column_start":5,"column_end":56}},{"value":"/ let to:  Point3D<_> = point3(8.0, -4.0,  0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125773,"byte_end":125823,"line_start":1044,"line_end":1044,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125828,"byte_end":125831,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125836,"byte_end":125899,"line_start":1046,"line_end":1046,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125904,"byte_end":125967,"line_start":1047,"line_end":1047,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":125972,"byte_end":126035,"line_start":1048,"line_end":1048,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126040,"byte_end":126103,"line_start":1049,"line_end":1049,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point3(16.0, -18.0,  1.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126108,"byte_end":126171,"line_start":1050,"line_end":1050,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126176,"byte_end":126183,"line_start":1051,"line_end":1051,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126188,"byte_end":126197,"line_start":1052,"line_end":1052,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126593,"byte_end":126596,"line_start":1068,"line_end":1068,"column_start":12,"column_end":15},"name":"min","qualname":"<Point3D<T, U>>::min","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126572,"byte_end":126581,"line_start":1067,"line_end":1067,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126786,"byte_end":126789,"line_start":1077,"line_end":1077,"column_start":12,"column_end":15},"name":"max","qualname":"<Point3D<T, U>>::max","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126765,"byte_end":126774,"line_start":1076,"line_end":1076,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127152,"byte_end":127157,"line_start":1090,"line_end":1090,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point3D<T, U>>::clamp","value":"fn (&self, start: Self, end: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126958,"byte_end":127028,"line_start":1085,"line_end":1085,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127033,"byte_end":127069,"line_start":1086,"line_end":1086,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127074,"byte_end":127077,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127082,"byte_end":127126,"line_start":1088,"line_end":1088,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127131,"byte_end":127140,"line_start":1089,"line_end":1089,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127699,"byte_end":127703,"line_start":1105,"line_end":1105,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point3D<T, U>>::cast","value":"fn <NewT> (&self) -> Point3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127319,"byte_end":127393,"line_start":1099,"line_end":1099,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127398,"byte_end":127401,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127406,"byte_end":127493,"line_start":1101,"line_end":1101,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127498,"byte_end":127586,"line_start":1102,"line_end":1102,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127591,"byte_end":127673,"line_start":1103,"line_end":1103,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127678,"byte_end":127687,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128167,"byte_end":128175,"line_start":1114,"line_end":1114,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point3D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Point3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127792,"byte_end":127875,"line_start":1109,"line_end":1109,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127880,"byte_end":127883,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127888,"byte_end":127975,"line_start":1111,"line_end":1111,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127980,"byte_end":128068,"line_start":1112,"line_end":1112,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128073,"byte_end":128155,"line_start":1113,"line_end":1113,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128573,"byte_end":128579,"line_start":1129,"line_end":1129,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point3D<T, U>>::to_f32","value":"fn (&self) -> Point3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128518,"byte_end":128547,"line_start":1127,"line_end":1127,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128552,"byte_end":128561,"line_start":1128,"line_end":1128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128694,"byte_end":128700,"line_start":1135,"line_end":1135,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point3D<T, U>>::to_f64","value":"fn (&self) -> Point3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128639,"byte_end":128668,"line_start":1133,"line_end":1133,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128673,"byte_end":128682,"line_start":1134,"line_end":1134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129054,"byte_end":129062,"line_start":1145,"line_end":1145,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point3D<T, U>>::to_usize","value":"fn (&self) -> Point3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128760,"byte_end":128819,"line_start":1139,"line_end":1139,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128824,"byte_end":128827,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128832,"byte_end":128908,"line_start":1141,"line_end":1141,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128913,"byte_end":128987,"line_start":1142,"line_end":1142,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":128992,"byte_end":129028,"line_start":1143,"line_end":1143,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129033,"byte_end":129042,"line_start":1144,"line_end":1144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129416,"byte_end":129422,"line_start":1155,"line_end":1155,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point3D<T, U>>::to_u32","value":"fn (&self) -> Point3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129124,"byte_end":129181,"line_start":1149,"line_end":1149,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129186,"byte_end":129189,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129194,"byte_end":129270,"line_start":1151,"line_end":1151,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129275,"byte_end":129349,"line_start":1152,"line_end":1152,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129354,"byte_end":129390,"line_start":1153,"line_end":1153,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129395,"byte_end":129404,"line_start":1154,"line_end":1154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129774,"byte_end":129780,"line_start":1165,"line_end":1165,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point3D<T, U>>::to_i32","value":"fn (&self) -> Point3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129482,"byte_end":129539,"line_start":1159,"line_end":1159,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129544,"byte_end":129547,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129552,"byte_end":129628,"line_start":1161,"line_end":1161,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129633,"byte_end":129707,"line_start":1162,"line_end":1162,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129712,"byte_end":129748,"line_start":1163,"line_end":1163,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129753,"byte_end":129762,"line_start":1164,"line_end":1164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130132,"byte_end":130138,"line_start":1175,"line_end":1175,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point3D<T, U>>::to_i64","value":"fn (&self) -> Point3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` point, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129840,"byte_end":129897,"line_start":1169,"line_end":1169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129902,"byte_end":129905,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129910,"byte_end":129986,"line_start":1171,"line_end":1171,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":129991,"byte_end":130065,"line_start":1172,"line_end":1172,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130070,"byte_end":130106,"line_start":1173,"line_end":1173,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130111,"byte_end":130120,"line_start":1174,"line_end":1174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130275,"byte_end":130283,"line_start":1182,"line_end":1182,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point3D<T, U>>::add_size","value":"fn (&self, other: &Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130254,"byte_end":130263,"line_start":1181,"line_end":1181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130541,"byte_end":130552,"line_start":1193,"line_end":1193,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point3D<T, U>>::distance_to","value":"fn (self, other: Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130520,"byte_end":130529,"line_start":1192,"line_end":1192,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1329},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136658,"byte_end":136664,"line_start":1451,"line_end":1451,"column_start":14,"column_end":20},"name":"point2","qualname":"::point::point2","value":"fn <T, U> (x: T, y: T) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point2D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point2D::new(x, y)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136595,"byte_end":136634,"line_start":1449,"line_end":1449,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136635,"byte_end":136644,"line_start":1450,"line_end":1450,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1332},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136838,"byte_end":136844,"line_start":1461,"line_end":1461,"column_start":14,"column_end":20},"name":"point3","qualname":"::point::point3","value":"fn <T, U> (x: T, y: T, z: T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point3D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point3D::new(x, y)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136775,"byte_end":136814,"line_start":1459,"line_end":1459,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136815,"byte_end":136824,"line_start":1460,"line_end":1460,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151309,"byte_end":151313,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect { origin, size }","parent":null,"children":[{"krate":0,"index":1363},{"krate":0,"index":1364}],"decl_id":null,"docs":" A 2d Rectangle optionally tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Rectangle optionally tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151054,"byte_end":151103,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151104,"byte_end":151114,"line_start":31,"line_end":31,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1363},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151330,"byte_end":151336,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"name":"origin","qualname":"::rect::Rect::origin","value":"point::Point2D<T, U>","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1364},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151361,"byte_end":151365,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"size","qualname":"::rect::Rect::size","value":"size::Size2D<T, U>","parent":{"krate":0,"index":1360},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152702,"byte_end":152705,"line_start":94,"line_end":94,"column_start":18,"column_end":21},"name":"new","qualname":"<Rect<T, U>>::new","value":"fn (origin: Point2D<T, U>, size: Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152654,"byte_end":152670,"line_start":92,"line_end":92,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152675,"byte_end":152684,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152914,"byte_end":152918,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"zero","qualname":"<Rect<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152845,"byte_end":152888,"line_start":103,"line_end":103,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152893,"byte_end":152902,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153074,"byte_end":153083,"line_start":111,"line_end":111,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Rect<T, U>>::from_size","value":"fn (size: Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rect of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a rect of the given size, at offset zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152995,"byte_end":153048,"line_start":109,"line_end":109,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153053,"byte_end":153062,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153292,"byte_end":153295,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"name":"min","qualname":"<Rect<T, U>>::min","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153271,"byte_end":153280,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153374,"byte_end":153377,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"max","qualname":"<Rect<T, U>>::max","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153353,"byte_end":153362,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153468,"byte_end":153473,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"max_x","qualname":"<Rect<T, U>>::max_x","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153447,"byte_end":153456,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153560,"byte_end":153565,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"min_x","qualname":"<Rect<T, U>>::min_x","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153539,"byte_end":153548,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153634,"byte_end":153639,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"max_y","qualname":"<Rect<T, U>>::max_y","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153613,"byte_end":153622,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153727,"byte_end":153732,"line_start":149,"line_end":149,"column_start":12,"column_end":17},"name":"min_y","qualname":"<Rect<T, U>>::min_y","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153706,"byte_end":153715,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153801,"byte_end":153806,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect<T, U>>::width","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153780,"byte_end":153789,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153877,"byte_end":153883,"line_start":159,"line_end":159,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect<T, U>>::height","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153856,"byte_end":153865,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153955,"byte_end":153962,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Rect<T, U>>::x_range","value":"fn (&self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153934,"byte_end":153943,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154051,"byte_end":154058,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Rect<T, U>>::y_range","value":"fn (&self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154030,"byte_end":154039,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154223,"byte_end":154232,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"translate","qualname":"<Rect<T, U>>::translate","value":"fn (&self, by: Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same rectangle, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same rectangle, translated by a vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154126,"byte_end":154181,"line_start":173,"line_end":173,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154186,"byte_end":154195,"line_start":174,"line_end":174,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154200,"byte_end":154211,"line_start":175,"line_end":175,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154349,"byte_end":154357,"line_start":181,"line_end":181,"column_start":12,"column_end":20},"name":"to_box2d","qualname":"<Rect<T, U>>::to_box2d","value":"fn (&self) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154328,"byte_end":154337,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154781,"byte_end":154789,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"contains","qualname":"<Rect<T, U>>::contains","value":"fn (&self, p: Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the point. Points are considered\n in the rectangle if they are on the left or top edge, but outside if they\n are on the right or bottom edge.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the point. Points are considered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154556,"byte_end":154632,"line_start":193,"line_end":193,"column_start":5,"column_end":81}},{"value":"/ in the rectangle if they are on the left or top edge, but outside if they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154637,"byte_end":154714,"line_start":194,"line_end":194,"column_start":5,"column_end":82}},{"value":"/ are on the right or bottom edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154719,"byte_end":154755,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154760,"byte_end":154769,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154893,"byte_end":154903,"line_start":202,"line_end":202,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Rect<T, U>>::intersects","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154872,"byte_end":154881,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155121,"byte_end":155133,"line_start":212,"line_end":212,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Rect<T, U>>::intersection","value":"fn (&self, other: &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155100,"byte_end":155109,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155485,"byte_end":155492,"line_start":228,"line_end":228,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Rect<T, U>>::inflate","value":"fn (&self, width: T, height: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155448,"byte_end":155457,"line_start":226,"line_end":226,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155462,"byte_end":155473,"line_start":227,"line_end":227,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156090,"byte_end":156103,"line_start":247,"line_end":247,"column_start":12,"column_end":25},"name":"contains_rect","qualname":"<Rect<T, U>>::contains_rect","value":"fn (&self, rect: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the interior of rect. Always\n returns true if rect is empty, and always returns false if rect is\n nonempty but this rectangle is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the interior of rect. Always","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155871,"byte_end":155943,"line_start":243,"line_end":243,"column_start":5,"column_end":77}},{"value":"/ returns true if rect is empty, and always returns false if rect is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155948,"byte_end":156018,"line_start":244,"line_end":244,"column_start":5,"column_end":75}},{"value":"/ nonempty but this rectangle is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156023,"byte_end":156064,"line_start":245,"line_end":245,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156069,"byte_end":156078,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156750,"byte_end":156760,"line_start":265,"line_end":265,"column_start":12,"column_end":22},"name":"inner_rect","qualname":"<Rect<T, U>>::inner_rect","value":"fn (&self, offsets: SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156478,"byte_end":156536,"line_start":260,"line_end":260,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156541,"byte_end":156544,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal and vertical","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156549,"byte_end":156623,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ offsets must not be larger than the original side length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156628,"byte_end":156689,"line_start":263,"line_end":263,"column_start":5,"column_end":66}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156694,"byte_end":156738,"line_start":264,"line_end":264,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157510,"byte_end":157520,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"outer_rect","qualname":"<Rect<T, U>>::outer_rect","value":"fn (&self, offsets: SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an outer rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an outer rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157309,"byte_end":157367,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157372,"byte_end":157375,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded rectangle is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157380,"byte_end":157449,"line_start":285,"line_end":285,"column_start":5,"column_end":74}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157454,"byte_end":157498,"line_start":286,"line_end":286,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158490,"byte_end":158501,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Rect<T, U>>::from_points","value":"fn <I> (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest rectangle defined by the top/bottom/left/right-most\n points provided as parameter.","sig":null,"attributes":[{"value":"/ Returns the smallest rectangle defined by the top/bottom/left/right-most","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157930,"byte_end":158006,"line_start":302,"line_end":302,"column_start":5,"column_end":81}},{"value":"/ points provided as parameter.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158011,"byte_end":158044,"line_start":303,"line_end":303,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158049,"byte_end":158052,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Note: This function has a behavior that can be surprising because","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158057,"byte_end":158126,"line_start":305,"line_end":305,"column_start":5,"column_end":74}},{"value":"/ the right-most and bottom-most points are exactly on the edge","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158131,"byte_end":158196,"line_start":306,"line_end":306,"column_start":5,"column_end":70}},{"value":"/ of the rectangle while the `contains` function is has exclusive","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158201,"byte_end":158268,"line_start":307,"line_end":307,"column_start":5,"column_end":72}},{"value":"/ semantic on these edges. This means that the right-most and bottom-most","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158273,"byte_end":158348,"line_start":308,"line_end":308,"column_start":5,"column_end":80}},{"value":"/ points provided to `from_points` will count as not contained by the rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158353,"byte_end":158430,"line_start":309,"line_end":309,"column_start":5,"column_end":82}},{"value":"/ This behavior may change in the future.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158435,"byte_end":158478,"line_start":310,"line_end":310,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158862,"byte_end":158866,"line_start":326,"line_end":326,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rect<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this rectangle and another rectangle.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this rectangle and another rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158766,"byte_end":158836,"line_start":324,"line_end":324,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158841,"byte_end":158850,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159127,"byte_end":159133,"line_start":338,"line_end":338,"column_start":12,"column_end":18},"name":"center","qualname":"<Rect<T, U>>::center","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159388,"byte_end":159393,"line_start":349,"line_end":349,"column_start":12,"column_end":17},"name":"union","qualname":"<Rect<T, U>>::union","value":"fn (&self, other: &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159367,"byte_end":159376,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159695,"byte_end":159700,"line_start":363,"line_end":363,"column_start":12,"column_end":17},"name":"scale","qualname":"<Rect<T, U>>::scale","value":"fn <S> (&self, x: S, y: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159674,"byte_end":159683,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160037,"byte_end":160041,"line_start":376,"line_end":376,"column_start":12,"column_end":16},"name":"area","qualname":"<Rect<T, U>>::area","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160016,"byte_end":160025,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160219,"byte_end":160227,"line_start":383,"line_end":383,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Rect<T, U>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, regardless of the origin's value.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, regardless of the origin's value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160136,"byte_end":160207,"line_start":382,"line_end":382,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160398,"byte_end":160418,"line_start":390,"line_end":390,"column_start":12,"column_end":32},"name":"is_empty_or_negative","qualname":"<Rect<T, U>>::is_empty_or_negative","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160377,"byte_end":160386,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160561,"byte_end":160573,"line_start":397,"line_end":397,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Rect<T, U>>::to_non_empty","value":"fn (&self) -> Option<NonEmpty<Self>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160540,"byte_end":160549,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162549,"byte_end":162559,"line_start":475,"line_end":475,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rect<T, U>>::to_untyped","value":"fn (&self) -> Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162469,"byte_end":162523,"line_start":473,"line_end":473,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162528,"byte_end":162537,"line_start":474,"line_end":474,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162734,"byte_end":162746,"line_start":481,"line_end":481,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rect<T, U>>::from_untyped","value":"fn (r: &Rect<T, UnknownUnit>) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162672,"byte_end":162708,"line_start":479,"line_end":479,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162713,"byte_end":162722,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162959,"byte_end":162968,"line_start":490,"line_end":490,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rect<T, U>>::cast_unit","value":"fn <V> (&self) -> Rect<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162916,"byte_end":162933,"line_start":488,"line_end":488,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162938,"byte_end":162947,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163494,"byte_end":163498,"line_start":502,"line_end":502,"column_start":12,"column_end":16},"name":"cast","qualname":"<Rect<T, U>>::cast","value":"fn <NewT> (&self) -> Rect<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163114,"byte_end":163188,"line_start":496,"line_end":496,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163193,"byte_end":163196,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163201,"byte_end":163288,"line_start":498,"line_end":498,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163293,"byte_end":163381,"line_start":499,"line_end":499,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163386,"byte_end":163468,"line_start":500,"line_end":500,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163473,"byte_end":163482,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163982,"byte_end":163990,"line_start":511,"line_end":511,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Rect<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Rect<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163607,"byte_end":163690,"line_start":506,"line_end":506,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163695,"byte_end":163698,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163703,"byte_end":163790,"line_start":508,"line_end":508,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163795,"byte_end":163883,"line_start":509,"line_end":509,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163888,"byte_end":163970,"line_start":510,"line_end":510,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164326,"byte_end":164332,"line_start":522,"line_end":522,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Rect<T, U>>::to_f32","value":"fn (&self) -> Rect<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164267,"byte_end":164300,"line_start":520,"line_end":520,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164305,"byte_end":164314,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164448,"byte_end":164454,"line_start":528,"line_end":528,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Rect<T, U>>::to_f64","value":"fn (&self) -> Rect<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164389,"byte_end":164422,"line_start":526,"line_end":526,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164427,"byte_end":164436,"line_start":527,"line_end":527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164821,"byte_end":164829,"line_start":538,"line_end":538,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Rect<T, U>>::to_usize","value":"fn (&self) -> Rect<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` rectangle, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164511,"byte_end":164574,"line_start":532,"line_end":532,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164579,"byte_end":164582,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164587,"byte_end":164667,"line_start":534,"line_end":534,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164672,"byte_end":164747,"line_start":535,"line_end":535,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164752,"byte_end":164795,"line_start":536,"line_end":536,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164800,"byte_end":164809,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165196,"byte_end":165202,"line_start":548,"line_end":548,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Rect<T, U>>::to_u32","value":"fn (&self) -> Rect<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` rectangle, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164888,"byte_end":164949,"line_start":542,"line_end":542,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164954,"byte_end":164957,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":164962,"byte_end":165042,"line_start":544,"line_end":544,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165047,"byte_end":165122,"line_start":545,"line_end":545,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165127,"byte_end":165170,"line_start":546,"line_end":546,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165175,"byte_end":165184,"line_start":547,"line_end":547,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165567,"byte_end":165573,"line_start":558,"line_end":558,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Rect<T, U>>::to_u64","value":"fn (&self) -> Rect<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` rectangle, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165259,"byte_end":165320,"line_start":552,"line_end":552,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165325,"byte_end":165328,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165333,"byte_end":165413,"line_start":554,"line_end":554,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165418,"byte_end":165493,"line_start":555,"line_end":555,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165498,"byte_end":165541,"line_start":556,"line_end":556,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165546,"byte_end":165555,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165938,"byte_end":165944,"line_start":568,"line_end":568,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Rect<T, U>>::to_i32","value":"fn (&self) -> Rect<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` rectangle, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165630,"byte_end":165691,"line_start":562,"line_end":562,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165696,"byte_end":165699,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165704,"byte_end":165784,"line_start":564,"line_end":564,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165789,"byte_end":165864,"line_start":565,"line_end":565,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165869,"byte_end":165912,"line_start":566,"line_end":566,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":165917,"byte_end":165926,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166309,"byte_end":166315,"line_start":578,"line_end":578,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Rect<T, U>>::to_i64","value":"fn (&self) -> Rect<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` rectangle, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166001,"byte_end":166062,"line_start":572,"line_end":572,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166067,"byte_end":166070,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166075,"byte_end":166155,"line_start":574,"line_end":574,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166160,"byte_end":166235,"line_start":575,"line_end":575,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166240,"byte_end":166283,"line_start":576,"line_end":576,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166288,"byte_end":166297,"line_start":577,"line_end":577,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1545},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167310,"byte_end":167315,"line_start":601,"line_end":601,"column_start":12,"column_end":17},"name":"round","qualname":"<Rect<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the returned rectangle has the same set of pixel centers as the original\n one.\n Edges at offset 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166462,"byte_end":166537,"line_start":584,"line_end":584,"column_start":5,"column_end":80}},{"value":"/ the returned rectangle has the same set of pixel centers as the original","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166542,"byte_end":166618,"line_start":585,"line_end":585,"column_start":5,"column_end":81}},{"value":"/ one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166623,"byte_end":166631,"line_start":586,"line_end":586,"column_start":5,"column_end":13}},{"value":"/ Edges at offset 0.5 round up.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166636,"byte_end":166669,"line_start":587,"line_end":587,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166674,"byte_end":166736,"line_start":588,"line_end":588,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166741,"byte_end":166813,"line_start":589,"line_end":589,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166818,"byte_end":166850,"line_start":590,"line_end":590,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166855,"byte_end":166938,"line_start":591,"line_end":591,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166943,"byte_end":166990,"line_start":592,"line_end":592,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166995,"byte_end":166998,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167003,"byte_end":167020,"line_start":594,"line_end":594,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167025,"byte_end":167110,"line_start":595,"line_end":595,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167115,"byte_end":167201,"line_start":596,"line_end":596,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167206,"byte_end":167237,"line_start":597,"line_end":597,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167242,"byte_end":167245,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167250,"byte_end":167282,"line_start":599,"line_end":599,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167287,"byte_end":167298,"line_start":600,"line_end":600,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167846,"byte_end":167854,"line_start":615,"line_end":615,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Rect<T, U>>::round_in","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle contains the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167386,"byte_end":167461,"line_start":605,"line_end":605,"column_start":5,"column_end":80}},{"value":"/ the original rectangle contains the resulting rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167466,"byte_end":167526,"line_start":606,"line_end":606,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167531,"byte_end":167534,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167539,"byte_end":167556,"line_start":608,"line_end":608,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167561,"byte_end":167646,"line_start":609,"line_end":609,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167651,"byte_end":167737,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167742,"byte_end":167773,"line_start":611,"line_end":611,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167778,"byte_end":167781,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167786,"byte_end":167818,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167823,"byte_end":167834,"line_start":614,"line_end":614,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168395,"byte_end":168404,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Rect<T, U>>::round_out","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle is contained in the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":167928,"byte_end":168003,"line_start":619,"line_end":619,"column_start":5,"column_end":80}},{"value":"/ the original rectangle is contained in the resulting rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168008,"byte_end":168075,"line_start":620,"line_end":620,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168080,"byte_end":168083,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168088,"byte_end":168105,"line_start":622,"line_end":622,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168110,"byte_end":168195,"line_start":623,"line_end":623,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168200,"byte_end":168286,"line_start":624,"line_end":624,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168291,"byte_end":168322,"line_start":625,"line_end":625,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168327,"byte_end":168330,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168335,"byte_end":168367,"line_start":627,"line_end":627,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168372,"byte_end":168383,"line_start":628,"line_end":628,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168707,"byte_end":168711,"line_start":644,"line_end":644,"column_start":14,"column_end":18},"name":"rect","qualname":"::rect::rect","value":"fn <T, U> (x: T, y: T, w: T, h: T) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168624,"byte_end":168693,"line_start":643,"line_end":643,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":3816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178903,"byte_end":178919,"line_start":23,"line_end":23,"column_start":12,"column_end":28},"name":"RigidTransform3D","qualname":"::rigid::RigidTransform3D","value":"RigidTransform3D { rotation, translation }","parent":null,"children":[{"krate":0,"index":3820},{"krate":0,"index":3821}],"decl_id":null,"docs":" A rigid transformation. All lengths are preserved under such a transformation.","sig":null,"attributes":[{"value":"/ A rigid transformation. All lengths are preserved under such a transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178395,"byte_end":178477,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178478,"byte_end":178481,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178482,"byte_end":178485,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Internally, this is a rotation and a translation, with the rotation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178486,"byte_end":178557,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ applied first (i.e. `Rotation * Translation`, in row-vector notation)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178558,"byte_end":178631,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178632,"byte_end":178635,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This can be more efficient to use over full matrices, especially if you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178636,"byte_end":178711,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ have to deal with the decomposed quantities often.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178712,"byte_end":178766,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178881,"byte_end":178891,"line_start":22,"line_end":22,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178943,"byte_end":178951,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"rotation","qualname":"::rigid::RigidTransform3D::rotation","value":"rotation::Rotation3D<T, Src, Dst>","parent":{"krate":0,"index":3816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":178986,"byte_end":178997,"line_start":25,"line_end":25,"column_start":9,"column_end":20},"name":"translation","qualname":"::rigid::RigidTransform3D::translation","value":"vector::Vector3D<T, Dst>","parent":{"krate":0,"index":3816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179182,"byte_end":179185,"line_start":31,"line_end":31,"column_start":18,"column_end":21},"name":"new","qualname":"<RigidTransform3D<T, Src, Dst>>::new","value":"fn (rotation: Rotation3D<T, Src, Dst>, translation: Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `rotation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `rotation` applies first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179074,"byte_end":179150,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179155,"byte_end":179164,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179410,"byte_end":179419,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<RigidTransform3D<T, Src, Dst>>::cast_unit","value":"fn <Src2, Dst2> (&self) -> RigidTransform3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179762,"byte_end":179770,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"identity","qualname":"<RigidTransform3D<T, Src, Dst>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an identity transform\n","sig":null,"attributes":[{"value":"/ Construct an identity transform","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179701,"byte_end":179736,"line_start":49,"line_end":49,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179741,"byte_end":179750,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":180013,"byte_end":180030,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"new_from_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::new_from_reversed","value":"fn (translation: Vector3D<T, Src>, rotation: Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `translation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `translation` applies first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179908,"byte_end":179987,"line_start":58,"line_end":58,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179992,"byte_end":180001,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":180588,"byte_end":180601,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"from_rotation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_rotation","value":"fn (rotation: Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":180567,"byte_end":180576,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":180769,"byte_end":180785,"line_start":89,"line_end":89,"column_start":12,"column_end":28},"name":"from_translation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_translation","value":"fn (translation: Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":180748,"byte_end":180757,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181106,"byte_end":181124,"line_start":100,"line_end":100,"column_start":12,"column_end":30},"name":"decompose_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::decompose_reversed","value":"fn (&self) -> (Vector3D<T, Src>, Rotation3D<T, Src, Dst>)","parent":null,"children":[],"decl_id":null,"docs":" Decompose this into a translation and an rotation to be applied in the opposite order","sig":null,"attributes":[{"value":"/ Decompose this into a translation and an rotation to be applied in the opposite order","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":180934,"byte_end":181023,"line_start":96,"line_end":96,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181028,"byte_end":181031,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ i.e., the translation is applied _first_","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181036,"byte_end":181080,"line_start":98,"line_end":98,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181085,"byte_end":181094,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181736,"byte_end":181750,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"post_transform","qualname":"<RigidTransform3D<T, Src, Dst>>::post_transform","value":"fn <Dst2> (&self, other: &RigidTransform3D<T, Dst, Dst2>) -> RigidTransform3D<T, Src, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two transforms such that\n other's transformation applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two transforms such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181506,"byte_end":181568,"line_start":112,"line_end":112,"column_start":5,"column_end":67}},{"value":"/ other's transformation applies after self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181573,"byte_end":181636,"line_start":113,"line_end":113,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181641,"byte_end":181644,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ i.e., this produces `self * other` in row-vector notation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181649,"byte_end":181710,"line_start":115,"line_end":115,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":181715,"byte_end":181724,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1587},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":182821,"byte_end":182834,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"pre_transform","qualname":"<RigidTransform3D<T, Src, Dst>>::pre_transform","value":"fn <Src2> (&self, other: &RigidTransform3D<T, Src2, Src>) -> RigidTransform3D<T, Src2, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two transforms such that\n self's transformation applies after other's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two transforms such that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":182591,"byte_end":182653,"line_start":142,"line_end":142,"column_start":5,"column_end":67}},{"value":"/ self's transformation applies after other's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":182658,"byte_end":182721,"line_start":143,"line_end":143,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":182726,"byte_end":182729,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ i.e., this produces `other * self` in row-vector notation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":182734,"byte_end":182795,"line_start":145,"line_end":145,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":182800,"byte_end":182809,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":183050,"byte_end":183057,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"inverse","qualname":"<RigidTransform3D<T, Src, Dst>>::inverse","value":"fn (&self) -> RigidTransform3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation\n","sig":null,"attributes":[{"value":"/ Inverts the transformation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":182994,"byte_end":183024,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":183029,"byte_end":183038,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":183608,"byte_end":183620,"line_start":172,"line_end":172,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<RigidTransform3D<T, Src, Dst>>::to_transform","value":"fn (&self) -> Transform3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":183891,"byte_end":183901,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::to_untyped","value":"fn (&self) -> RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":183811,"byte_end":183865,"line_start":181,"line_end":181,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":183870,"byte_end":183879,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":184176,"byte_end":184188,"line_start":192,"line_end":192,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::from_untyped","value":"fn (transform: &RigidTransform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":184114,"byte_end":184150,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":184155,"byte_end":184164,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188600,"byte_end":188610,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"Rotation2D","qualname":"::rotation::Rotation2D","value":"Rotation2D { angle, _unit }","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640}],"decl_id":null,"docs":" A transform that can represent rotations in 2d, represented as an angle in radians.\n","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 2d, represented as an angle in radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188271,"byte_end":188358,"line_start":23,"line_end":23,"column_start":1,"column_end":88}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188359,"byte_end":188369,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188659,"byte_end":188664,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"angle","qualname":"::rotation::Rotation2D::angle","value":"T","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Angle in radians\n","sig":null,"attributes":[{"value":"/ Angle in radians","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188630,"byte_end":188650,"line_start":34,"line_end":34,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188696,"byte_end":188701,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189511,"byte_end":189514,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Rotation2D<T, Src, Dst>>::new","value":"fn (angle: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189437,"byte_end":189485,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189490,"byte_end":189499,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189710,"byte_end":189717,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"radians","qualname":"<Rotation2D<T, Src, Dst>>::radians","value":"fn (angle: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189650,"byte_end":189698,"line_start":81,"line_end":81,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189850,"byte_end":189858,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation2D<T, Src, Dst>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189790,"byte_end":189824,"line_start":86,"line_end":86,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189829,"byte_end":189838,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190441,"byte_end":190450,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation2D<T, Src, Dst>>::cast_unit","value":"fn <Src2, Dst2> (&self) -> Rotation2D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189998,"byte_end":190046,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190051,"byte_end":190054,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190059,"byte_end":190072,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190077,"byte_end":190080,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190085,"byte_end":190096,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190101,"byte_end":190130,"line_start":102,"line_end":102,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190135,"byte_end":190152,"line_start":103,"line_end":103,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190157,"byte_end":190174,"line_start":104,"line_end":104,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190179,"byte_end":190182,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190187,"byte_end":190205,"line_start":106,"line_end":106,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190210,"byte_end":190228,"line_start":107,"line_end":107,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190233,"byte_end":190236,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190241,"byte_end":190313,"line_start":109,"line_end":109,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190318,"byte_end":190321,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.cast_unit::<Local2, World2>().angle);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190326,"byte_end":190403,"line_start":111,"line_end":111,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190408,"byte_end":190415,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190420,"byte_end":190429,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190984,"byte_end":190994,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation2D<T, Src, Dst>>::to_untyped","value":"fn (&self) -> Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190606,"byte_end":190660,"line_start":121,"line_end":121,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190665,"byte_end":190668,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190673,"byte_end":190686,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190691,"byte_end":190694,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190699,"byte_end":190710,"line_start":125,"line_end":125,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190715,"byte_end":190744,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190749,"byte_end":190766,"line_start":127,"line_end":127,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190771,"byte_end":190788,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190793,"byte_end":190796,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190801,"byte_end":190873,"line_start":130,"line_end":130,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190878,"byte_end":190881,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.to_untyped().angle);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190886,"byte_end":190946,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190951,"byte_end":190958,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":190963,"byte_end":190972,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191506,"byte_end":191518,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation2D<T, Src, Dst>>::from_untyped","value":"fn (r: &Rotation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191083,"byte_end":191119,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191124,"byte_end":191127,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191132,"byte_end":191145,"line_start":141,"line_end":141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191150,"byte_end":191153,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191158,"byte_end":191169,"line_start":143,"line_end":143,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191174,"byte_end":191203,"line_start":144,"line_end":144,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191208,"byte_end":191236,"line_start":145,"line_end":145,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191241,"byte_end":191258,"line_start":146,"line_end":146,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191263,"byte_end":191280,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191285,"byte_end":191288,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation2D<_, UnknownUnit, UnknownUnit> = Rotation2D::radians(42);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191293,"byte_end":191372,"line_start":149,"line_end":149,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191377,"byte_end":191380,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.angle, Rotation2D::<_, Local, World>::from_untyped(&rot).angle);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191385,"byte_end":191468,"line_start":151,"line_end":151,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191473,"byte_end":191480,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191485,"byte_end":191494,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191739,"byte_end":191748,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"get_angle","qualname":"<Rotation2D<T, Src, Dst>>::get_angle","value":"fn (&self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns self.angle as a strongly typed `Angle<T>`.\n","sig":null,"attributes":[{"value":"/ Returns self.angle as a strongly typed `Angle<T>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191673,"byte_end":191727,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191971,"byte_end":191976,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Rotation2D<T, Src, Dst>>::to_3d","value":"fn (&self) -> Rotation3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3d rotation (around the z axis) from this 2d rotation.\n","sig":null,"attributes":[{"value":"/ Creates a 3d rotation (around the z axis) from this 2d rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191877,"byte_end":191945,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191950,"byte_end":191959,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192138,"byte_end":192145,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation2D<T, Src, Dst>>::inverse","value":"fn (&self) -> Rotation2D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192071,"byte_end":192112,"line_start":176,"line_end":176,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192117,"byte_end":192126,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192341,"byte_end":192351,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Rotation2D<T, Src, Dst>>::pre_rotate","value":"fn <NewSrc> (&self, other: &Rotation2D<T, NewSrc, Src>) -> Rotation2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing the other rotation followed by this rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing the other rotation followed by this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192234,"byte_end":192315,"line_start":182,"line_end":182,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192320,"byte_end":192329,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192630,"byte_end":192641,"line_start":193,"line_end":193,"column_start":12,"column_end":23},"name":"post_rotate","qualname":"<Rotation2D<T, Src, Dst>>::post_rotate","value":"fn <NewDst> (&self, other: &Rotation2D<T, Dst, NewDst>) -> Rotation2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing this rotation followed by the other rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing this rotation followed by the other rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192523,"byte_end":192604,"line_start":191,"line_end":191,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192609,"byte_end":192618,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192975,"byte_end":192990,"line_start":204,"line_end":204,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Rotation2D<T, Src, Dst>>::transform_point","value":"fn (&self, point: Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192790,"byte_end":192850,"line_start":200,"line_end":200,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192855,"byte_end":192858,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192863,"byte_end":192949,"line_start":202,"line_end":202,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":192954,"byte_end":192963,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193370,"byte_end":193386,"line_start":213,"line_end":213,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Rotation2D<T, Src, Dst>>::transform_vector","value":"fn (&self, vector: Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193184,"byte_end":193245,"line_start":209,"line_end":209,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193250,"byte_end":193253,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193258,"byte_end":193344,"line_start":211,"line_end":211,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193349,"byte_end":193358,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193727,"byte_end":193739,"line_start":224,"line_end":224,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation2D<T, Src, Dst>>::to_transform","value":"fn (&self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193646,"byte_end":193701,"line_start":222,"line_end":222,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193706,"byte_end":193715,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194592,"byte_end":194602,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"Rotation3D","qualname":"::rotation::Rotation3D","value":"Rotation3D { i, j, k, r, _unit }","parent":null,"children":[{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711}],"decl_id":null,"docs":" A transform that can represent rotations in 3d, represented as a quaternion.","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 3d, represented as a quaternion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193841,"byte_end":193921,"line_start":229,"line_end":229,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193922,"byte_end":193925,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ Most methods expect the quaternion to be normalized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193926,"byte_end":193982,"line_start":231,"line_end":231,"column_start":1,"column_end":57}},{"value":"/ When in doubt, use `unit_quaternion` instead of `quaternion` to create","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193983,"byte_end":194057,"line_start":232,"line_end":232,"column_start":1,"column_end":75}},{"value":"/ a rotation as the former will ensure that its result is normalized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194058,"byte_end":194129,"line_start":233,"line_end":233,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194130,"byte_end":194133,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ Some people use the `x, y, z, w` (or `w, x, y, z`) notations. The equivalence is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194134,"byte_end":194218,"line_start":235,"line_end":235,"column_start":1,"column_end":85}},{"value":"/ as follows: `x -> i`, `y -> j`, `z -> k`, `w -> r`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194219,"byte_end":194274,"line_start":236,"line_end":236,"column_start":1,"column_end":56}},{"value":"/ The memory layout of this type corresponds to the `x, y, z, w` notation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194275,"byte_end":194350,"line_start":237,"line_end":237,"column_start":1,"column_end":76}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194351,"byte_end":194361,"line_start":238,"line_end":238,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1707},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194684,"byte_end":194685,"line_start":249,"line_end":249,"column_start":9,"column_end":10},"name":"i","qualname":"::rotation::Rotation3D::i","value":"T","parent":{"krate":0,"index":1703},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `i`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `i`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194622,"byte_end":194675,"line_start":248,"line_end":248,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1708},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194756,"byte_end":194757,"line_start":251,"line_end":251,"column_start":9,"column_end":10},"name":"j","qualname":"::rotation::Rotation3D::j","value":"T","parent":{"krate":0,"index":1703},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `j`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `j`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194694,"byte_end":194747,"line_start":250,"line_end":250,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1709},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194828,"byte_end":194829,"line_start":253,"line_end":253,"column_start":9,"column_end":10},"name":"k","qualname":"::rotation::Rotation3D::k","value":"T","parent":{"krate":0,"index":1703},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `k`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `k`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194766,"byte_end":194819,"line_start":252,"line_end":252,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194865,"byte_end":194866,"line_start":255,"line_end":255,"column_start":9,"column_end":10},"name":"r","qualname":"::rotation::Rotation3D::r","value":"T","parent":{"krate":0,"index":1703},"children":[],"decl_id":null,"docs":" The real part.\n","sig":null,"attributes":[{"value":"/ The real part.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194838,"byte_end":194856,"line_start":254,"line_end":254,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1711},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194898,"byte_end":194903,"line_start":257,"line_end":257,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":1703},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196297,"byte_end":196307,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"quaternion","qualname":"<Rotation3D<T, Src, Dst>>::quaternion","value":"fn (a: T, b: T, c: T, r: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195847,"byte_end":195910,"line_start":298,"line_end":298,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195915,"byte_end":195918,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195923,"byte_end":196004,"line_start":300,"line_end":300,"column_start":5,"column_end":86}},{"value":"/ where `a`, `b` and `c` describe the vector part and the last parameter `r` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196009,"byte_end":196090,"line_start":301,"line_end":301,"column_start":5,"column_end":86}},{"value":"/ the real part.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196095,"byte_end":196113,"line_start":302,"line_end":302,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196118,"byte_end":196121,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ The resulting quaternion is not necessarily normalized. See [`unit_quaternion`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196126,"byte_end":196210,"line_start":304,"line_end":304,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196215,"byte_end":196218,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ [`unit_quaternion`]: #method.unit_quaternion","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196223,"byte_end":196271,"line_start":306,"line_end":306,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196276,"byte_end":196285,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1741},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196545,"byte_end":196553,"line_start":320,"line_end":320,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation3D<T, Src, Dst>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196485,"byte_end":196519,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196524,"byte_end":196533,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196830,"byte_end":196841,"line_start":334,"line_end":334,"column_start":12,"column_end":23},"name":"vector_part","qualname":"<Rotation3D<T, Src, Dst>>::vector_part","value":"fn (&self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector part (i, j, k) of this quaternion.\n","sig":null,"attributes":[{"value":"/ Returns the vector part (i, j, k) of this quaternion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196747,"byte_end":196804,"line_start":332,"line_end":332,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196809,"byte_end":196818,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197595,"byte_end":197604,"line_start":358,"line_end":358,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation3D<T, Src, Dst>>::cast_unit","value":"fn <Src2, Dst2> (&self) -> Rotation3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196927,"byte_end":196975,"line_start":338,"line_end":338,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196980,"byte_end":196983,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196988,"byte_end":197001,"line_start":340,"line_end":340,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197006,"byte_end":197009,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197014,"byte_end":197025,"line_start":342,"line_end":342,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197030,"byte_end":197059,"line_start":343,"line_end":343,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197064,"byte_end":197081,"line_start":344,"line_end":344,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197086,"byte_end":197103,"line_start":345,"line_end":345,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197108,"byte_end":197111,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197116,"byte_end":197134,"line_start":347,"line_end":347,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197139,"byte_end":197157,"line_start":348,"line_end":348,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197162,"byte_end":197165,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197170,"byte_end":197253,"line_start":350,"line_end":350,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197258,"byte_end":197261,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.cast_unit::<Local2, World2>().i);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197266,"byte_end":197335,"line_start":352,"line_end":352,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.j, to_world.cast_unit::<Local2, World2>().j);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197340,"byte_end":197409,"line_start":353,"line_end":353,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.k, to_world.cast_unit::<Local2, World2>().k);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197414,"byte_end":197483,"line_start":354,"line_end":354,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.r, to_world.cast_unit::<Local2, World2>().r);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197488,"byte_end":197557,"line_start":355,"line_end":355,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197562,"byte_end":197569,"line_start":356,"line_end":356,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197574,"byte_end":197583,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198373,"byte_end":198383,"line_start":385,"line_end":385,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation3D<T, Src, Dst>>::to_untyped","value":"fn (&self) -> Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197821,"byte_end":197875,"line_start":368,"line_end":368,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197880,"byte_end":197883,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197888,"byte_end":197901,"line_start":370,"line_end":370,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197906,"byte_end":197909,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197914,"byte_end":197925,"line_start":372,"line_end":372,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197930,"byte_end":197959,"line_start":373,"line_end":373,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197964,"byte_end":197981,"line_start":374,"line_end":374,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":197986,"byte_end":198003,"line_start":375,"line_end":375,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198008,"byte_end":198011,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198016,"byte_end":198099,"line_start":377,"line_end":377,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198104,"byte_end":198107,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.to_untyped().i);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198112,"byte_end":198164,"line_start":379,"line_end":379,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.j, to_world.to_untyped().j);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198169,"byte_end":198221,"line_start":380,"line_end":380,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.k, to_world.to_untyped().k);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198226,"byte_end":198278,"line_start":381,"line_end":381,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.r, to_world.to_untyped().r);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198283,"byte_end":198335,"line_start":382,"line_end":382,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198340,"byte_end":198347,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198352,"byte_end":198361,"line_start":384,"line_end":384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1751},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199138,"byte_end":199150,"line_start":407,"line_end":407,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation3D<T, Src, Dst>>::from_untyped","value":"fn (r: &Rotation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198472,"byte_end":198508,"line_start":389,"line_end":389,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198513,"byte_end":198516,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198521,"byte_end":198534,"line_start":391,"line_end":391,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198539,"byte_end":198542,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198547,"byte_end":198558,"line_start":393,"line_end":393,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198563,"byte_end":198592,"line_start":394,"line_end":394,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198597,"byte_end":198625,"line_start":395,"line_end":395,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198630,"byte_end":198647,"line_start":396,"line_end":396,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198652,"byte_end":198669,"line_start":397,"line_end":397,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198674,"byte_end":198677,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation3D<_, UnknownUnit, UnknownUnit> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198682,"byte_end":198772,"line_start":399,"line_end":399,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198777,"byte_end":198780,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.i, Rotation3D::<_, Local, World>::from_untyped(&rot).i);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198785,"byte_end":198860,"line_start":401,"line_end":401,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.j, Rotation3D::<_, Local, World>::from_untyped(&rot).j);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198865,"byte_end":198940,"line_start":402,"line_end":402,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.k, Rotation3D::<_, Local, World>::from_untyped(&rot).k);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":198945,"byte_end":199020,"line_start":403,"line_end":403,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.r, Rotation3D::<_, Local, World>::from_untyped(&rot).r);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199025,"byte_end":199100,"line_start":404,"line_end":404,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199105,"byte_end":199112,"line_start":405,"line_end":405,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199117,"byte_end":199126,"line_start":406,"line_end":406,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199637,"byte_end":199652,"line_start":422,"line_end":422,"column_start":12,"column_end":27},"name":"unit_quaternion","qualname":"<Rotation3D<T, Src, Dst>>::unit_quaternion","value":"fn (i: T, j: T, k: T, r: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation and normalizes it.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation and normalizes it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199305,"byte_end":199386,"line_start":416,"line_end":416,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199391,"byte_end":199394,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199399,"byte_end":199480,"line_start":418,"line_end":418,"column_start":5,"column_end":86}},{"value":"/ before normalization, where `a`, `b` and `c` describe the vector part and the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199485,"byte_end":199566,"line_start":419,"line_end":419,"column_start":5,"column_end":86}},{"value":"/ last parameter `r` is the real part.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199571,"byte_end":199611,"line_start":420,"line_end":420,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199616,"byte_end":199625,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199802,"byte_end":199813,"line_start":427,"line_end":427,"column_start":12,"column_end":23},"name":"around_axis","qualname":"<Rotation3D<T, Src, Dst>>::around_axis","value":"fn (axis: Vector3D<T, Src>, angle: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around a given axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around a given axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199747,"byte_end":199790,"line_start":426,"line_end":426,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200131,"byte_end":200139,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"around_x","qualname":"<Rotation3D<T, Src, Dst>>::around_x","value":"fn (angle: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the x axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the x axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200078,"byte_end":200119,"line_start":434,"line_end":434,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200404,"byte_end":200412,"line_start":443,"line_end":443,"column_start":12,"column_end":20},"name":"around_y","qualname":"<Rotation3D<T, Src, Dst>>::around_y","value":"fn (angle: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the y axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200351,"byte_end":200392,"line_start":442,"line_end":442,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200677,"byte_end":200685,"line_start":451,"line_end":451,"column_start":12,"column_end":20},"name":"around_z","qualname":"<Rotation3D<T, Src, Dst>>::around_z","value":"fn (angle: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the z axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the z axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200624,"byte_end":200665,"line_start":450,"line_end":450,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201245,"byte_end":201250,"line_start":465,"line_end":465,"column_start":12,"column_end":17},"name":"euler","qualname":"<Rotation3D<T, Src, Dst>>::euler","value":"fn (roll: Angle<T>, pitch: Angle<T>, yaw: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from Euler angles.","sig":null,"attributes":[{"value":"/ Creates a rotation from Euler angles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200897,"byte_end":200938,"line_start":458,"line_end":458,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200943,"byte_end":200946,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ The rotations are applied in roll then pitch then yaw order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":200951,"byte_end":201015,"line_start":460,"line_end":460,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201020,"byte_end":201023,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/  - Roll (also called bank) is a rotation around the x axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201028,"byte_end":201091,"line_start":462,"line_end":462,"column_start":5,"column_end":68}},{"value":"/  - Pitch (also called bearing) is a rotation around the y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201096,"byte_end":201163,"line_start":463,"line_end":463,"column_start":5,"column_end":72}},{"value":"/  - Yaw (also called heading) is a rotation around the z axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201168,"byte_end":201233,"line_start":464,"line_end":464,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201816,"byte_end":201823,"line_start":482,"line_end":482,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation3D<T, Src, Dst>>::inverse","value":"fn (&self) -> Rotation3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201749,"byte_end":201790,"line_start":480,"line_end":480,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201795,"byte_end":201804,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202004,"byte_end":202008,"line_start":488,"line_end":488,"column_start":12,"column_end":16},"name":"norm","qualname":"<Rotation3D<T, Src, Dst>>::norm","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the norm of this quaternion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201937,"byte_end":201978,"line_start":486,"line_end":486,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":201983,"byte_end":201992,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202143,"byte_end":202154,"line_start":494,"line_end":494,"column_start":12,"column_end":23},"name":"square_norm","qualname":"<Rotation3D<T, Src, Dst>>::square_norm","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the squared norm of this quaternion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202068,"byte_end":202117,"line_start":492,"line_end":492,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202122,"byte_end":202131,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1765},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202422,"byte_end":202431,"line_start":502,"line_end":502,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Rotation3D<T, Src, Dst>>::normalize","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a [unit quaternion] from this one.","sig":null,"attributes":[{"value":"/ Returns a [unit quaternion] from this one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202258,"byte_end":202304,"line_start":498,"line_end":498,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202309,"byte_end":202312,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ [unit quaternion]: https://en.wikipedia.org/wiki/Quaternion#Unit_quaternion","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202317,"byte_end":202396,"line_start":500,"line_end":500,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202401,"byte_end":202410,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202635,"byte_end":202648,"line_start":510,"line_end":510,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Rotation3D<T, Src, Dst>>::is_normalized","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if [norm] of this quaternion is (approximately) one.","sig":null,"attributes":[{"value":"/ Returns `true` if [norm] of this quaternion is (approximately) one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202501,"byte_end":202572,"line_start":506,"line_end":506,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202577,"byte_end":202580,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ [norm]: #method.norm","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202585,"byte_end":202609,"line_start":508,"line_end":508,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202614,"byte_end":202623,"line_start":509,"line_end":509,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202973,"byte_end":202978,"line_start":521,"line_end":521,"column_start":12,"column_end":17},"name":"slerp","qualname":"<Rotation3D<T, Src, Dst>>::slerp","value":"fn (&self, other: &Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Spherical linear interpolation between this rotation and another rotation.","sig":null,"attributes":[{"value":"/ Spherical linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202823,"byte_end":202901,"line_start":518,"line_end":518,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202906,"byte_end":202909,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ `t` is expected to be between zero and one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":202914,"byte_end":202961,"line_start":520,"line_end":520,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":204240,"byte_end":204244,"line_start":562,"line_end":562,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rotation3D<T, Src, Dst>>::lerp","value":"fn (&self, other: &Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Basic Linear interpolation between this rotation and another rotation.\n","sig":null,"attributes":[{"value":"/ Basic Linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":204140,"byte_end":204214,"line_start":560,"line_end":560,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":204219,"byte_end":204228,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":204552,"byte_end":204569,"line_start":570,"line_end":570,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point3d","value":"fn (&self, point: Point3D<T, Src>) -> Point3D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":204381,"byte_end":204441,"line_start":567,"line_end":567,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":204446,"byte_end":204449,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":204454,"byte_end":204540,"line_start":569,"line_end":569,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205317,"byte_end":205334,"line_start":590,"line_end":590,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point2d","value":"fn (&self, point: Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205101,"byte_end":205192,"line_start":586,"line_end":586,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205197,"byte_end":205200,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205205,"byte_end":205291,"line_start":588,"line_end":588,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205296,"byte_end":205305,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205674,"byte_end":205692,"line_start":601,"line_end":601,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector3d","value":"fn (&self, vector: Vector3D<T, Src>) -> Vector3D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205487,"byte_end":205548,"line_start":597,"line_end":597,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205553,"byte_end":205556,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205561,"byte_end":205648,"line_start":599,"line_end":599,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205653,"byte_end":205662,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":206077,"byte_end":206095,"line_start":612,"line_end":612,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector2d","value":"fn (&self, vector: Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205859,"byte_end":205951,"line_start":608,"line_end":608,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205956,"byte_end":205959,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":205964,"byte_end":206051,"line_start":610,"line_end":610,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":206056,"byte_end":206065,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":206334,"byte_end":206346,"line_start":621,"line_end":621,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation3D<T, Src, Dst>>::to_transform","value":"fn (&self) -> Transform3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":206253,"byte_end":206308,"line_start":619,"line_end":619,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":206313,"byte_end":206322,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":207414,"byte_end":207424,"line_start":661,"line_end":661,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Rotation3D<T, Src, Dst>>::pre_rotate","value":"fn <NewSrc> (&self, other: &Rotation3D<T, NewSrc, Src>) -> Rotation3D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing the other rotation followed by this rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing the other rotation followed by this rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":207321,"byte_end":207402,"line_start":660,"line_end":660,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":208122,"byte_end":208133,"line_start":679,"line_end":679,"column_start":12,"column_end":23},"name":"post_rotate","qualname":"<Rotation3D<T, Src, Dst>>::post_rotate","value":"fn <NewDst> (&self, other: &Rotation3D<T, Dst, NewDst>) -> Rotation3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing this rotation followed by the other rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing this rotation followed by the other rotation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":208015,"byte_end":208096,"line_start":677,"line_end":677,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":208101,"byte_end":208110,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1817},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220277,"byte_end":220282,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Scale","qualname":"::scale::Scale","value":"","parent":null,"children":[],"decl_id":null,"docs":" A scaling factor between two different units of measurement.","sig":null,"attributes":[{"value":"/ A scaling factor between two different units of measurement.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219310,"byte_end":219374,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219375,"byte_end":219378,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is effectively a type-safe float, intended to be used in combination with other types like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219379,"byte_end":219478,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ `length::Length` to enforce conversion between systems of measurement at compile time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219479,"byte_end":219569,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219570,"byte_end":219573,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `Src` and `Dst` represent the units before and after multiplying a value by a `Scale`. They","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219574,"byte_end":219669,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ may be types without values, such as empty enums.  For example:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219670,"byte_end":219737,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219738,"byte_end":219741,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219742,"byte_end":219753,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219754,"byte_end":219776,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ use euclid::Length;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219777,"byte_end":219800,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219801,"byte_end":219816,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/ enum Inch {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219817,"byte_end":219834,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219835,"byte_end":219838,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let mm_per_inch: Scale<f32, Inch, Mm> = Scale::new(25.4);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219839,"byte_end":219900,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219901,"byte_end":219904,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let one_foot: Length<f32, Inch> = Length::new(12.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219905,"byte_end":219961,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"/ let one_foot_in_mm: Length<f32, Mm> = one_foot * mm_per_inch;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":219962,"byte_end":220027,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220028,"byte_end":220035,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220036,"byte_end":220046,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220419,"byte_end":220422,"line_start":55,"line_end":55,"column_start":18,"column_end":21},"name":"new","qualname":"<Scale<T, Src, Dst>>::new","value":"fn (x: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220392,"byte_end":220401,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220850,"byte_end":220865,"line_start":73,"line_end":73,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Scale<T, Src, Dst>>::transform_point","value":"fn (&self, point: Point2D<T, Src>) -> Point2D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220480,"byte_end":220534,"line_start":59,"line_end":59,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220539,"byte_end":220542,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220547,"byte_end":220560,"line_start":61,"line_end":61,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220565,"byte_end":220568,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220573,"byte_end":220584,"line_start":63,"line_end":63,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, point2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220589,"byte_end":220621,"line_start":64,"line_end":64,"column_start":5,"column_end":37}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220626,"byte_end":220641,"line_start":65,"line_end":65,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220646,"byte_end":220661,"line_start":66,"line_end":66,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220666,"byte_end":220669,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220674,"byte_end":220725,"line_start":68,"line_end":68,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220730,"byte_end":220733,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_point(point2(42, -42)), point2(420, -420));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220738,"byte_end":220812,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220817,"byte_end":220824,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220829,"byte_end":220838,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221406,"byte_end":221422,"line_start":94,"line_end":94,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Scale<T, Src, Dst>>::transform_vector","value":"fn (&self, vec: Vector2D<T, Src>) -> Vector2D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221040,"byte_end":221095,"line_start":80,"line_end":80,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221100,"byte_end":221103,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221108,"byte_end":221121,"line_start":82,"line_end":82,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221126,"byte_end":221129,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221134,"byte_end":221145,"line_start":84,"line_end":84,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, vec2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221150,"byte_end":221180,"line_start":85,"line_end":85,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221185,"byte_end":221200,"line_start":86,"line_end":86,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221205,"byte_end":221220,"line_start":87,"line_end":87,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221225,"byte_end":221228,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221233,"byte_end":221284,"line_start":89,"line_end":89,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221289,"byte_end":221292,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_vector(vec2(42, -42)), vec2(420, -420));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221297,"byte_end":221368,"line_start":91,"line_end":91,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221373,"byte_end":221380,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221385,"byte_end":221394,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221961,"byte_end":221975,"line_start":115,"line_end":115,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Scale<T, Src, Dst>>::transform_size","value":"fn (&self, size: Size2D<T, Src>) -> Size2D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221594,"byte_end":221649,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221654,"byte_end":221657,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221662,"byte_end":221675,"line_start":103,"line_end":103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221680,"byte_end":221683,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221688,"byte_end":221699,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, size2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221704,"byte_end":221735,"line_start":106,"line_end":106,"column_start":5,"column_end":36}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221740,"byte_end":221755,"line_start":107,"line_end":107,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221760,"byte_end":221775,"line_start":108,"line_end":108,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221780,"byte_end":221783,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221788,"byte_end":221839,"line_start":110,"line_end":110,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221844,"byte_end":221847,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_size(size2(42, -42)), size2(420, -420));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221852,"byte_end":221923,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221928,"byte_end":221935,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":221940,"byte_end":221949,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222530,"byte_end":222544,"line_start":136,"line_end":136,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Scale<T, Src, Dst>>::transform_rect","value":"fn (&self, rect: &Rect<T, Src>) -> Rect<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given rect transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given rect transformed by this scale.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222153,"byte_end":222206,"line_start":122,"line_end":122,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222211,"byte_end":222214,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222219,"byte_end":222232,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222237,"byte_end":222240,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222245,"byte_end":222256,"line_start":126,"line_end":126,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, rect};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222261,"byte_end":222291,"line_start":127,"line_end":127,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222296,"byte_end":222311,"line_start":128,"line_end":128,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222316,"byte_end":222331,"line_start":129,"line_end":129,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222336,"byte_end":222339,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222344,"byte_end":222395,"line_start":131,"line_end":131,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222400,"byte_end":222403,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_rect(&rect(1, 2, 42, -42)), rect(10, 20, 420, -420));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222408,"byte_end":222492,"line_start":133,"line_end":133,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222497,"byte_end":222504,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222509,"byte_end":222518,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222831,"byte_end":222838,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Scale<T, Src, Dst>>::inverse","value":"fn (&self) -> Scale<T::Output, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this scale.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this scale.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222767,"byte_end":222805,"line_start":146,"line_end":146,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222810,"byte_end":222819,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223477,"byte_end":223488,"line_start":173,"line_end":173,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Scale<T, Src, Dst>>::is_identity","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this scale has no effect.","sig":null,"attributes":[{"value":"/ Returns `true` if this scale has no effect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":222959,"byte_end":223006,"line_start":155,"line_end":155,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223011,"byte_end":223014,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223019,"byte_end":223032,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223037,"byte_end":223040,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223045,"byte_end":223056,"line_start":159,"line_end":159,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223061,"byte_end":223083,"line_start":160,"line_end":160,"column_start":5,"column_end":27}},{"value":"/ use euclid::num::One;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223088,"byte_end":223113,"line_start":161,"line_end":161,"column_start":5,"column_end":30}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223118,"byte_end":223133,"line_start":162,"line_end":162,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223138,"byte_end":223153,"line_start":163,"line_end":163,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223158,"byte_end":223161,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Mm, Cm> = Scale::new(0.1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223166,"byte_end":223222,"line_start":165,"line_end":165,"column_start":5,"column_end":61}},{"value":"/ let mm_per_mm: Scale<f32, Mm, Mm> = Scale::new(1.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223227,"byte_end":223283,"line_start":166,"line_end":166,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223288,"byte_end":223291,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.is_identity(), false);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223296,"byte_end":223343,"line_start":168,"line_end":168,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(mm_per_mm.is_identity(), true);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223348,"byte_end":223394,"line_start":169,"line_end":169,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(mm_per_mm, Scale::one());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223399,"byte_end":223439,"line_start":170,"line_end":170,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223444,"byte_end":223451,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223456,"byte_end":223465,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223655,"byte_end":223658,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"get","qualname":"<Scale<T, Src, Dst>>::get","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223634,"byte_end":223643,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224015,"byte_end":224018,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"inv","qualname":"<Scale<T, Src, Dst>>::inv","value":"fn (&self) -> Scale<T::Output, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" The inverse Scale (1.0 / self).","sig":null,"attributes":[{"value":"/ The inverse Scale (1.0 / self).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223707,"byte_end":223742,"line_start":187,"line_end":187,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223747,"byte_end":223750,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223755,"byte_end":223768,"line_start":189,"line_end":189,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223773,"byte_end":223776,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223781,"byte_end":223792,"line_start":191,"line_end":191,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223797,"byte_end":223819,"line_start":192,"line_end":192,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223824,"byte_end":223839,"line_start":193,"line_end":193,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223844,"byte_end":223859,"line_start":194,"line_end":194,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223864,"byte_end":223867,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Cm, Mm> = Scale::new(0.1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223872,"byte_end":223928,"line_start":196,"line_end":196,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223933,"byte_end":223936,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.inv(), Scale::new(10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223941,"byte_end":223991,"line_start":198,"line_end":198,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223996,"byte_end":224003,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225116,"byte_end":225120,"line_start":238,"line_end":238,"column_start":12,"column_end":16},"name":"cast","qualname":"<Scale<T, Src, Dst>>::cast","value":"fn <NewT> (&self) -> Scale<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224237,"byte_end":224311,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224316,"byte_end":224319,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224324,"byte_end":224336,"line_start":212,"line_end":212,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224341,"byte_end":224344,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224349,"byte_end":224426,"line_start":214,"line_end":214,"column_start":5,"column_end":82}},{"value":"/ method panics. Use `try_cast` if that must be case.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224431,"byte_end":224486,"line_start":215,"line_end":215,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224491,"byte_end":224494,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224499,"byte_end":224512,"line_start":217,"line_end":217,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224517,"byte_end":224520,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224525,"byte_end":224536,"line_start":219,"line_end":219,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224541,"byte_end":224563,"line_start":220,"line_end":220,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224568,"byte_end":224583,"line_start":221,"line_end":221,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224588,"byte_end":224603,"line_start":222,"line_end":222,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224608,"byte_end":224611,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224616,"byte_end":224667,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224672,"byte_end":224675,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.cast::<f32>(), Scale::new(10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224680,"byte_end":224734,"line_start":226,"line_end":226,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224739,"byte_end":224746,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ That conversion will panic, because `i32` not enough to store such big numbers:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224751,"byte_end":224834,"line_start":228,"line_end":228,"column_start":5,"column_end":88}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224839,"byte_end":224863,"line_start":229,"line_end":229,"column_start":5,"column_end":29}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224868,"byte_end":224890,"line_start":230,"line_end":230,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};// millimeter = 10^-2 meters","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224895,"byte_end":224938,"line_start":231,"line_end":231,"column_start":5,"column_end":48}},{"value":"/ enum Em {};// exameter   = 10^18 meters","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224943,"byte_end":224986,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224991,"byte_end":224994,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ // Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224999,"byte_end":225012,"line_start":234,"line_end":234,"column_start":5,"column_end":18}},{"value":"/ let to_em: Scale<i32, Mm, Em> = Scale::new(10e20).cast();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225017,"byte_end":225078,"line_start":235,"line_end":235,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225083,"byte_end":225090,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225095,"byte_end":225104,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225894,"byte_end":225902,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Scale<T, Src, Dst>>::try_cast","value":"fn <NewT> (&self) -> Option<Scale<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n If the source value cannot be represented by the target type `NewT`, then `None`\n is returned.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225214,"byte_end":225297,"line_start":242,"line_end":242,"column_start":5,"column_end":88}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then `None`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225302,"byte_end":225386,"line_start":243,"line_end":243,"column_start":5,"column_end":89}},{"value":"/ is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225391,"byte_end":225407,"line_start":244,"line_end":244,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225412,"byte_end":225415,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225420,"byte_end":225433,"line_start":246,"line_end":246,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225438,"byte_end":225441,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225446,"byte_end":225457,"line_start":248,"line_end":248,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225462,"byte_end":225484,"line_start":249,"line_end":249,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225489,"byte_end":225504,"line_start":250,"line_end":250,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225509,"byte_end":225524,"line_start":251,"line_end":251,"column_start":5,"column_end":20}},{"value":"/ enum Em {};// Exameter = 10^18 meters","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225529,"byte_end":225570,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225575,"byte_end":225578,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225583,"byte_end":225634,"line_start":254,"line_end":254,"column_start":5,"column_end":56}},{"value":"/ let to_em: Scale<f32, Mm, Em> = Scale::new(10e20);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225639,"byte_end":225693,"line_start":255,"line_end":255,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225698,"byte_end":225701,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.try_cast::<f32>(), Some(Scale::new(10.0)));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225706,"byte_end":225770,"line_start":257,"line_end":257,"column_start":5,"column_end":69}},{"value":"/ // Integer to small to store that number","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225775,"byte_end":225819,"line_start":258,"line_end":258,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(to_em.try_cast::<i32>(), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225824,"byte_end":225870,"line_start":259,"line_end":259,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":225875,"byte_end":225882,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":1852},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226156,"byte_end":226159,"line_start":268,"line_end":268,"column_start":15,"column_end":18},"name":"ONE","qualname":"::scale::Scale::<f32, Src, Dst>::ONE","value":"Self","parent":{"krate":0,"index":1849},"children":[],"decl_id":null,"docs":" Identity scaling, could be used to safely transit from one space to another.\n","sig":null,"attributes":[{"value":"/ Identity scaling, could be used to safely transit from one space to another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226061,"byte_end":226141,"line_start":267,"line_end":267,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1944},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230770,"byte_end":230783,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"SideOffsets2D","qualname":"::side_offsets::SideOffsets2D","value":"SideOffsets2D { top, right, bottom, left, _unit }","parent":null,"children":[{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951}],"decl_id":null,"docs":" A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,\n and margins in CSS, optionally tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230414,"byte_end":230509,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ and margins in CSS, optionally tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230510,"byte_end":230564,"line_start":26,"line_end":26,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230565,"byte_end":230575,"line_start":27,"line_end":27,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230800,"byte_end":230803,"line_start":34,"line_end":34,"column_start":9,"column_end":12},"name":"top","qualname":"::side_offsets::SideOffsets2D::top","value":"T","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230816,"byte_end":230821,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"right","qualname":"::side_offsets::SideOffsets2D::right","value":"T","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1949},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230834,"byte_end":230840,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"bottom","qualname":"::side_offsets::SideOffsets2D::bottom","value":"T","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1950},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230853,"byte_end":230857,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"left","qualname":"::side_offsets::SideOffsets2D::left","value":"T","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230889,"byte_end":230894,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"_unit","qualname":"::side_offsets::SideOffsets2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232612,"byte_end":232615,"line_start":109,"line_end":109,"column_start":18,"column_end":21},"name":"new","qualname":"<SideOffsets2D<T, U>>::new","value":"fn (top: T, right: T, bottom: T, left: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a scalar for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a scalar for each side.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232445,"byte_end":232491,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232496,"byte_end":232499,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232504,"byte_end":232568,"line_start":107,"line_end":107,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232573,"byte_end":232594,"line_start":108,"line_end":108,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232982,"byte_end":232994,"line_start":123,"line_end":123,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<SideOffsets2D<T, U>>::from_lengths","value":"fn (top: Length<T, U>, right: Length<T, U>, bottom: Length<T, U>, left: Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a typed Length for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a typed Length for each side.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232815,"byte_end":232867,"line_start":119,"line_end":119,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232872,"byte_end":232875,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232880,"byte_end":232944,"line_start":121,"line_end":121,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232949,"byte_end":232970,"line_start":122,"line_end":122,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233490,"byte_end":233508,"line_start":137,"line_end":137,"column_start":12,"column_end":30},"name":"from_vectors_outer","qualname":"<SideOffsets2D<T, U>>::from_vectors_outer","value":"fn (min: Vector2D<T, U>, max: Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233198,"byte_end":233259,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233264,"byte_end":233267,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The outer rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233272,"byte_end":233349,"line_start":134,"line_end":134,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233354,"byte_end":233429,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233434,"byte_end":233478,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234076,"byte_end":234094,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"name":"from_vectors_inner","qualname":"<SideOffsets2D<T, U>>::from_vectors_inner","value":"fn (min: Vector2D<T, U>, max: Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233784,"byte_end":233845,"line_start":150,"line_end":150,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233850,"byte_end":233853,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The inner rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233858,"byte_end":233935,"line_start":152,"line_end":152,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":233940,"byte_end":234015,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234020,"byte_end":234064,"line_start":154,"line_end":154,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234430,"byte_end":234437,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<SideOffsets2D<T, U>>::is_zero","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all side offsets are zero.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all side offsets are zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234370,"byte_end":234418,"line_start":168,"line_end":168,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234767,"byte_end":234779,"line_start":180,"line_end":180,"column_start":12,"column_end":24},"name":"new_all_same","qualname":"<SideOffsets2D<T, U>>::new_all_same","value":"fn (all: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a scalar value directly.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a scalar value directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234671,"byte_end":234755,"line_start":179,"line_end":179,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234943,"byte_end":234963,"line_start":185,"line_end":185,"column_start":12,"column_end":32},"name":"from_length_all_same","qualname":"<SideOffsets2D<T, U>>::from_length_all_same","value":"fn (all: Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a typed Length.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a typed Length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234856,"byte_end":234931,"line_start":184,"line_end":184,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235129,"byte_end":235139,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"horizontal","qualname":"<SideOffsets2D<T, U>>::horizontal","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235203,"byte_end":235211,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"vertical","qualname":"<SideOffsets2D<T, U>>::vertical","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235697,"byte_end":235701,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"zero","qualname":"<SideOffsets2D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235642,"byte_end":235685,"line_start":219,"line_end":219,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":2079},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242248,"byte_end":242254,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"Size2D","qualname":"::size::Size2D","value":"Size2D { width, height, _unit }","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084}],"decl_id":null,"docs":" A 2d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d size tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242192,"byte_end":242225,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242226,"byte_end":242236,"line_start":30,"line_end":30,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2082},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242363,"byte_end":242368,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size2D::width","value":"T","parent":{"krate":0,"index":2079},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis (usually horizontal).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis (usually horizontal).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242267,"byte_end":242354,"line_start":32,"line_end":32,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":2083},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242471,"byte_end":242477,"line_start":35,"line_end":35,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size2D::height","value":"T","parent":{"krate":0,"index":2079},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis (usually vertical).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis (usually vertical).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242377,"byte_end":242462,"line_start":34,"line_end":34,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":2084},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242509,"byte_end":242514,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2079},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244890,"byte_end":244894,"line_start":135,"line_end":135,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size2D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244723,"byte_end":244794,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244799,"byte_end":244802,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244807,"byte_end":244864,"line_start":133,"line_end":133,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244869,"byte_end":244878,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245066,"byte_end":245069,"line_start":144,"line_end":144,"column_start":18,"column_end":21},"name":"new","qualname":"<Size2D<T, U>>::new","value":"fn (width: T, height: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244997,"byte_end":245034,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245039,"byte_end":245048,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245288,"byte_end":245300,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size2D<T, U>>::from_lengths","value":"fn (width: Length<T, U>, height: Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245209,"byte_end":245262,"line_start":151,"line_end":151,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245267,"byte_end":245276,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245466,"byte_end":245478,"line_start":159,"line_end":159,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size2D<T, U>>::from_untyped","value":"fn (p: Size2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245404,"byte_end":245440,"line_start":157,"line_end":157,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245445,"byte_end":245454,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245696,"byte_end":245704,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size2D<T, U>>::to_array","value":"fn (&self) -> [T; 2]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of two elements (width, then height).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245600,"byte_end":245670,"line_start":165,"line_end":165,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245675,"byte_end":245684,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245864,"byte_end":245872,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size2D<T, U>>::to_tuple","value":"fn (&self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a tuple of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as a tuple of two elements (width, then height).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245769,"byte_end":245838,"line_start":171,"line_end":171,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245843,"byte_end":245852,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246018,"byte_end":246027,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size2D<T, U>>::to_vector","value":"fn (&self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width and height.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width and height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245937,"byte_end":245992,"line_start":177,"line_end":177,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245997,"byte_end":246006,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246184,"byte_end":246194,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size2D<T, U>>::to_untyped","value":"fn (&self) -> Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246104,"byte_end":246158,"line_start":183,"line_end":183,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246163,"byte_end":246172,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246309,"byte_end":246318,"line_start":191,"line_end":191,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size2D<T, U>>::cast_unit","value":"fn <V> (&self) -> Size2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246266,"byte_end":246283,"line_start":189,"line_end":189,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246288,"byte_end":246297,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246762,"byte_end":246767,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"name":"round","qualname":"<Size2D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246403,"byte_end":246458,"line_start":195,"line_end":195,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246463,"byte_end":246466,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246471,"byte_end":246546,"line_start":197,"line_end":197,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246551,"byte_end":246554,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246559,"byte_end":246570,"line_start":199,"line_end":199,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246575,"byte_end":246599,"line_start":200,"line_end":200,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246604,"byte_end":246618,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246623,"byte_end":246626,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).round(), size2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246631,"byte_end":246708,"line_start":203,"line_end":203,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246713,"byte_end":246720,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246725,"byte_end":246734,"line_start":205,"line_end":205,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246739,"byte_end":246750,"line_start":206,"line_end":206,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247282,"byte_end":247286,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size2D<T, U>>::ceil","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246889,"byte_end":246980,"line_start":214,"line_end":214,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246985,"byte_end":246988,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":246993,"byte_end":247068,"line_start":216,"line_end":216,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247073,"byte_end":247076,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247081,"byte_end":247092,"line_start":218,"line_end":218,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247097,"byte_end":247121,"line_start":219,"line_end":219,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247126,"byte_end":247140,"line_start":220,"line_end":220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247145,"byte_end":247148,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).ceil(), size2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247153,"byte_end":247228,"line_start":222,"line_end":222,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247233,"byte_end":247240,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247245,"byte_end":247254,"line_start":224,"line_end":224,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247259,"byte_end":247270,"line_start":225,"line_end":225,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247798,"byte_end":247803,"line_start":245,"line_end":245,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size2D<T, U>>::floor","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247405,"byte_end":247493,"line_start":233,"line_end":233,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247498,"byte_end":247501,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247506,"byte_end":247581,"line_start":235,"line_end":235,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247586,"byte_end":247589,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247594,"byte_end":247605,"line_start":237,"line_end":237,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247610,"byte_end":247634,"line_start":238,"line_end":238,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247639,"byte_end":247653,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247658,"byte_end":247661,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).floor(), size2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247666,"byte_end":247744,"line_start":241,"line_end":241,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247749,"byte_end":247756,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247761,"byte_end":247770,"line_start":243,"line_end":243,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247775,"byte_end":247786,"line_start":244,"line_end":244,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247992,"byte_end":247996,"line_start":253,"line_end":253,"column_start":12,"column_end":16},"name":"area","qualname":"<Size2D<T, U>>::area","value":"fn (&self) -> T::Output","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of both components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of both components","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":247925,"byte_end":247980,"line_start":252,"line_end":252,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248736,"byte_end":248740,"line_start":278,"line_end":278,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size2D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this size and another size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248093,"byte_end":248168,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248173,"byte_end":248176,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248181,"byte_end":248194,"line_start":262,"line_end":262,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248199,"byte_end":248202,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248207,"byte_end":248218,"line_start":264,"line_end":264,"column_start":5,"column_end":16}},{"value":"/ use euclid::size2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248223,"byte_end":248245,"line_start":265,"line_end":265,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size2D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248250,"byte_end":248282,"line_start":266,"line_end":266,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248287,"byte_end":248290,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let from: Size2D<_> = size2(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248295,"byte_end":248338,"line_start":268,"line_end":268,"column_start":5,"column_end":48}},{"value":"/ let to:  Size2D<_> = size2(8.0, -4.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248343,"byte_end":248385,"line_start":269,"line_end":269,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248390,"byte_end":248393,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size2(-8.0,  24.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248398,"byte_end":248454,"line_start":271,"line_end":271,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size2( 0.0,  10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248459,"byte_end":248515,"line_start":272,"line_end":272,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size2( 4.0,   3.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248520,"byte_end":248576,"line_start":273,"line_end":273,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size2( 8.0,  -4.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248581,"byte_end":248637,"line_start":274,"line_end":274,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size2(16.0, -18.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248642,"byte_end":248698,"line_start":275,"line_end":275,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248703,"byte_end":248710,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248715,"byte_end":248724,"line_start":277,"line_end":277,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249366,"byte_end":249370,"line_start":294,"line_end":294,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size2D<T, U>>::cast","value":"fn <NewT> (&self) -> Size2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248986,"byte_end":249060,"line_start":288,"line_end":288,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249065,"byte_end":249068,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249073,"byte_end":249160,"line_start":290,"line_end":290,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249165,"byte_end":249253,"line_start":291,"line_end":291,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249258,"byte_end":249340,"line_start":292,"line_end":292,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249345,"byte_end":249354,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249833,"byte_end":249841,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size2D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Size2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249458,"byte_end":249541,"line_start":298,"line_end":298,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249546,"byte_end":249549,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249554,"byte_end":249641,"line_start":300,"line_end":300,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249646,"byte_end":249734,"line_start":301,"line_end":301,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":249739,"byte_end":249821,"line_start":302,"line_end":302,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250169,"byte_end":250175,"line_start":314,"line_end":314,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size2D<T, U>>::to_f32","value":"fn (&self) -> Size2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250115,"byte_end":250143,"line_start":312,"line_end":312,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250148,"byte_end":250157,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250288,"byte_end":250294,"line_start":320,"line_end":320,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size2D<T, U>>::to_f64","value":"fn (&self) -> Size2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250234,"byte_end":250262,"line_start":318,"line_end":318,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250267,"byte_end":250276,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250644,"byte_end":250652,"line_start":330,"line_end":330,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size2D<T, U>>::to_usize","value":"fn (&self) -> Size2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250353,"byte_end":250410,"line_start":324,"line_end":324,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250415,"byte_end":250418,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250423,"byte_end":250498,"line_start":326,"line_end":326,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250503,"byte_end":250577,"line_start":327,"line_end":327,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250582,"byte_end":250618,"line_start":328,"line_end":328,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250623,"byte_end":250632,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251003,"byte_end":251009,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size2D<T, U>>::to_u32","value":"fn (&self) -> Size2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250713,"byte_end":250769,"line_start":334,"line_end":334,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250774,"byte_end":250777,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250782,"byte_end":250857,"line_start":336,"line_end":336,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250862,"byte_end":250936,"line_start":337,"line_end":337,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250941,"byte_end":250977,"line_start":338,"line_end":338,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":250982,"byte_end":250991,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251358,"byte_end":251364,"line_start":350,"line_end":350,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Size2D<T, U>>::to_u64","value":"fn (&self) -> Size2D<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251068,"byte_end":251124,"line_start":344,"line_end":344,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251129,"byte_end":251132,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251137,"byte_end":251212,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251217,"byte_end":251291,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251296,"byte_end":251332,"line_start":348,"line_end":348,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251337,"byte_end":251346,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251713,"byte_end":251719,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size2D<T, U>>::to_i32","value":"fn (&self) -> Size2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251423,"byte_end":251479,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251484,"byte_end":251487,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251492,"byte_end":251567,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251572,"byte_end":251646,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251651,"byte_end":251687,"line_start":358,"line_end":358,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251692,"byte_end":251701,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252068,"byte_end":252074,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size2D<T, U>>::to_i64","value":"fn (&self) -> Size2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251778,"byte_end":251834,"line_start":364,"line_end":364,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251839,"byte_end":251842,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251847,"byte_end":251922,"line_start":366,"line_end":366,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":251927,"byte_end":252001,"line_start":367,"line_end":367,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252006,"byte_end":252042,"line_start":368,"line_end":368,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252047,"byte_end":252056,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252437,"byte_end":252440,"line_start":381,"line_end":381,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size2D<T, U>>::abs","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252169,"byte_end":252219,"line_start":376,"line_end":376,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252224,"byte_end":252227,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252232,"byte_end":252320,"line_start":378,"line_end":378,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252325,"byte_end":252328,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252333,"byte_end":252425,"line_start":380,"line_end":380,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252628,"byte_end":252639,"line_start":386,"line_end":386,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size2D<T, U>>::is_positive","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if both components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if both components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252520,"byte_end":252616,"line_start":385,"line_end":385,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252878,"byte_end":252881,"line_start":394,"line_end":394,"column_start":12,"column_end":15},"name":"min","qualname":"<Size2D<T, U>>::min","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252770,"byte_end":252852,"line_start":392,"line_end":392,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252857,"byte_end":252866,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253106,"byte_end":253109,"line_start":400,"line_end":400,"column_start":12,"column_end":15},"name":"max","qualname":"<Size2D<T, U>>::max","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252998,"byte_end":253080,"line_start":398,"line_end":398,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253085,"byte_end":253094,"line_start":399,"line_end":399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253419,"byte_end":253424,"line_start":409,"line_end":409,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size2D<T, U>>::clamp","value":"fn (&self, start: Self, end: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253226,"byte_end":253295,"line_start":404,"line_end":404,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253300,"byte_end":253336,"line_start":405,"line_end":405,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253341,"byte_end":253344,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253349,"byte_end":253393,"line_start":407,"line_end":407,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253398,"byte_end":253407,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253631,"byte_end":253643,"line_start":417,"line_end":417,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size2D<T, U>>::greater_than","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater then\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253541,"byte_end":253619,"line_start":416,"line_end":416,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253898,"byte_end":253908,"line_start":425,"line_end":425,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size2D<T, U>>::lower_than","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower then\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":253810,"byte_end":253886,"line_start":424,"line_end":424,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254151,"byte_end":254171,"line_start":433,"line_end":433,"column_start":12,"column_end":32},"name":"is_empty_or_negative","qualname":"<Size2D<T, U>>::is_empty_or_negative","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero or negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254075,"byte_end":254139,"line_start":432,"line_end":432,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254541,"byte_end":254546,"line_start":446,"line_end":446,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size2D<T, U>>::equal","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254458,"byte_end":254529,"line_start":445,"line_end":445,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254802,"byte_end":254811,"line_start":454,"line_end":454,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size2D<T, U>>::not_equal","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254715,"byte_end":254790,"line_start":453,"line_end":453,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":258422,"byte_end":258427,"line_start":604,"line_end":604,"column_start":14,"column_end":19},"name":"size2","qualname":"::size::size2","value":"fn <T, U> (w: T, h: T) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size2D::new(w, h)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size2D::new(w, h)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":258360,"byte_end":258398,"line_start":602,"line_end":602,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":258399,"byte_end":258408,"line_start":603,"line_end":603,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2275},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265342,"byte_end":265348,"line_start":868,"line_end":868,"column_start":12,"column_end":18},"name":"Size3D","qualname":"::size::Size3D","value":"Size3D { width, height, depth, _unit }","parent":null,"children":[{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281}],"decl_id":null,"docs":" A 3d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d size tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265286,"byte_end":265319,"line_start":866,"line_end":866,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265320,"byte_end":265330,"line_start":867,"line_end":867,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2278},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265436,"byte_end":265441,"line_start":870,"line_end":870,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size3D::width","value":"T","parent":{"krate":0,"index":2275},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265361,"byte_end":265427,"line_start":869,"line_end":869,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265525,"byte_end":265531,"line_start":872,"line_end":872,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size3D::height","value":"T","parent":{"krate":0,"index":2275},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265450,"byte_end":265516,"line_start":871,"line_end":871,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265615,"byte_end":265620,"line_start":874,"line_end":874,"column_start":9,"column_end":14},"name":"depth","qualname":"::size::Size3D::depth","value":"T","parent":{"krate":0,"index":2275},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `z` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `z` axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265540,"byte_end":265606,"line_start":873,"line_end":873,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265652,"byte_end":265657,"line_start":876,"line_end":876,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2275},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268192,"byte_end":268196,"line_start":978,"line_end":978,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size3D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268039,"byte_end":268110,"line_start":975,"line_end":975,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268115,"byte_end":268118,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268123,"byte_end":268180,"line_start":977,"line_end":977,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268382,"byte_end":268385,"line_start":987,"line_end":987,"column_start":18,"column_end":21},"name":"new","qualname":"<Size3D<T, U>>::new","value":"fn (width: T, height: T, depth: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268313,"byte_end":268350,"line_start":985,"line_end":985,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268355,"byte_end":268364,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268634,"byte_end":268646,"line_start":998,"line_end":998,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size3D<T, U>>::from_lengths","value":"fn (width: Length<T, U>, height: Length<T, U>, depth: Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268555,"byte_end":268608,"line_start":996,"line_end":996,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268613,"byte_end":268622,"line_start":997,"line_end":997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268842,"byte_end":268854,"line_start":1004,"line_end":1004,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size3D<T, U>>::from_untyped","value":"fn (p: Size3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268780,"byte_end":268816,"line_start":1002,"line_end":1002,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268821,"byte_end":268830,"line_start":1003,"line_end":1003,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2323},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269095,"byte_end":269103,"line_start":1012,"line_end":1012,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size3D<T, U>>::to_array","value":"fn (&self) -> [T; 3]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268985,"byte_end":269069,"line_start":1010,"line_end":1010,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269074,"byte_end":269083,"line_start":1011,"line_end":1011,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269290,"byte_end":269298,"line_start":1018,"line_end":1018,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size3D<T, U>>::to_tuple","value":"fn (&self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269180,"byte_end":269264,"line_start":1016,"line_end":1016,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269269,"byte_end":269278,"line_start":1017,"line_end":1017,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2326},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269466,"byte_end":269475,"line_start":1024,"line_end":1024,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size3D<T, U>>::to_vector","value":"fn (&self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width, height and depth.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width, height and depth.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269378,"byte_end":269440,"line_start":1022,"line_end":1022,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269445,"byte_end":269454,"line_start":1023,"line_end":1023,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269644,"byte_end":269654,"line_start":1030,"line_end":1030,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size3D<T, U>>::to_untyped","value":"fn (&self) -> Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269564,"byte_end":269618,"line_start":1028,"line_end":1028,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269623,"byte_end":269632,"line_start":1029,"line_end":1029,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269769,"byte_end":269778,"line_start":1036,"line_end":1036,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size3D<T, U>>::cast_unit","value":"fn <V> (&self) -> Size3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269726,"byte_end":269743,"line_start":1034,"line_end":1034,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269748,"byte_end":269757,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2330},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270244,"byte_end":270249,"line_start":1052,"line_end":1052,"column_start":12,"column_end":17},"name":"round","qualname":"<Size3D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269875,"byte_end":269930,"line_start":1040,"line_end":1040,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269935,"byte_end":269938,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":269943,"byte_end":270018,"line_start":1042,"line_end":1042,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270023,"byte_end":270026,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270031,"byte_end":270042,"line_start":1044,"line_end":1044,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270047,"byte_end":270071,"line_start":1045,"line_end":1045,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270076,"byte_end":270090,"line_start":1046,"line_end":1046,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270095,"byte_end":270098,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).round(), size3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270103,"byte_end":270190,"line_start":1048,"line_end":1048,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270195,"byte_end":270202,"line_start":1049,"line_end":1049,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270207,"byte_end":270216,"line_start":1050,"line_end":1050,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270221,"byte_end":270232,"line_start":1051,"line_end":1051,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270794,"byte_end":270798,"line_start":1071,"line_end":1071,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size3D<T, U>>::ceil","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270391,"byte_end":270482,"line_start":1059,"line_end":1059,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270487,"byte_end":270490,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270495,"byte_end":270570,"line_start":1061,"line_end":1061,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270575,"byte_end":270578,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270583,"byte_end":270594,"line_start":1063,"line_end":1063,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270599,"byte_end":270623,"line_start":1064,"line_end":1064,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270628,"byte_end":270642,"line_start":1065,"line_end":1065,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270647,"byte_end":270650,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), size3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270655,"byte_end":270740,"line_start":1067,"line_end":1067,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270745,"byte_end":270752,"line_start":1068,"line_end":1068,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270757,"byte_end":270766,"line_start":1069,"line_end":1069,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270771,"byte_end":270782,"line_start":1070,"line_end":1070,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2332},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271339,"byte_end":271344,"line_start":1090,"line_end":1090,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size3D<T, U>>::floor","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":270936,"byte_end":271024,"line_start":1078,"line_end":1078,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271029,"byte_end":271032,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271037,"byte_end":271112,"line_start":1080,"line_end":1080,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271117,"byte_end":271120,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271125,"byte_end":271136,"line_start":1082,"line_end":1082,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271141,"byte_end":271165,"line_start":1083,"line_end":1083,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271170,"byte_end":271184,"line_start":1084,"line_end":1084,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271189,"byte_end":271192,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).floor(), size3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271197,"byte_end":271285,"line_start":1086,"line_end":1086,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271290,"byte_end":271297,"line_start":1087,"line_end":1087,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271302,"byte_end":271311,"line_start":1088,"line_end":1088,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271316,"byte_end":271327,"line_start":1089,"line_end":1089,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271552,"byte_end":271558,"line_start":1098,"line_end":1098,"column_start":12,"column_end":18},"name":"volume","qualname":"<Size3D<T, U>>::volume","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of all components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of all components","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271486,"byte_end":271540,"line_start":1097,"line_end":1097,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272342,"byte_end":272346,"line_start":1123,"line_end":1123,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size3D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this size and another size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271672,"byte_end":271732,"line_start":1105,"line_end":1105,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271737,"byte_end":271740,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271745,"byte_end":271758,"line_start":1107,"line_end":1107,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271763,"byte_end":271766,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271771,"byte_end":271782,"line_start":1109,"line_end":1109,"column_start":5,"column_end":16}},{"value":"/ use euclid::size3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271787,"byte_end":271809,"line_start":1110,"line_end":1110,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size3D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271814,"byte_end":271846,"line_start":1111,"line_end":1111,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271851,"byte_end":271854,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ let from: Size3D<_> = size3(0.0, 10.0, -1.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271859,"byte_end":271908,"line_start":1113,"line_end":1113,"column_start":5,"column_end":54}},{"value":"/ let to:  Size3D<_> = size3(8.0, -4.0,  0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271913,"byte_end":271961,"line_start":1114,"line_end":1114,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271966,"byte_end":271969,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":271974,"byte_end":272036,"line_start":1116,"line_end":1116,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272041,"byte_end":272103,"line_start":1117,"line_end":1117,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272108,"byte_end":272170,"line_start":1118,"line_end":1118,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272175,"byte_end":272237,"line_start":1119,"line_end":1119,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size3(16.0, -18.0,  1.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272242,"byte_end":272304,"line_start":1120,"line_end":1120,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272309,"byte_end":272316,"line_start":1121,"line_end":1121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272321,"byte_end":272330,"line_start":1122,"line_end":1122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272972,"byte_end":272976,"line_start":1139,"line_end":1139,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size3D<T, U>>::cast","value":"fn <NewT> (&self) -> Size3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272592,"byte_end":272666,"line_start":1133,"line_end":1133,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272671,"byte_end":272674,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272679,"byte_end":272766,"line_start":1135,"line_end":1135,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272771,"byte_end":272859,"line_start":1136,"line_end":1136,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272864,"byte_end":272946,"line_start":1137,"line_end":1137,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272951,"byte_end":272960,"line_start":1138,"line_end":1138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273439,"byte_end":273447,"line_start":1148,"line_end":1148,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size3D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Size3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273064,"byte_end":273147,"line_start":1143,"line_end":1143,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273152,"byte_end":273155,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273160,"byte_end":273247,"line_start":1145,"line_end":1145,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273252,"byte_end":273340,"line_start":1146,"line_end":1146,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273345,"byte_end":273427,"line_start":1147,"line_end":1147,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273861,"byte_end":273867,"line_start":1163,"line_end":1163,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size3D<T, U>>::to_f32","value":"fn (&self) -> Size3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273807,"byte_end":273835,"line_start":1161,"line_end":1161,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273840,"byte_end":273849,"line_start":1162,"line_end":1162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2343},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273980,"byte_end":273986,"line_start":1169,"line_end":1169,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size3D<T, U>>::to_f64","value":"fn (&self) -> Size3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273926,"byte_end":273954,"line_start":1167,"line_end":1167,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":273959,"byte_end":273968,"line_start":1168,"line_end":1168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2344},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274336,"byte_end":274344,"line_start":1179,"line_end":1179,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size3D<T, U>>::to_usize","value":"fn (&self) -> Size3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274045,"byte_end":274102,"line_start":1173,"line_end":1173,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274107,"byte_end":274110,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274115,"byte_end":274190,"line_start":1175,"line_end":1175,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274195,"byte_end":274269,"line_start":1176,"line_end":1176,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274274,"byte_end":274310,"line_start":1177,"line_end":1177,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274315,"byte_end":274324,"line_start":1178,"line_end":1178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274695,"byte_end":274701,"line_start":1189,"line_end":1189,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size3D<T, U>>::to_u32","value":"fn (&self) -> Size3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274405,"byte_end":274461,"line_start":1183,"line_end":1183,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274466,"byte_end":274469,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274474,"byte_end":274549,"line_start":1185,"line_end":1185,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274554,"byte_end":274628,"line_start":1186,"line_end":1186,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274633,"byte_end":274669,"line_start":1187,"line_end":1187,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274674,"byte_end":274683,"line_start":1188,"line_end":1188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275050,"byte_end":275056,"line_start":1199,"line_end":1199,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size3D<T, U>>::to_i32","value":"fn (&self) -> Size3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274760,"byte_end":274816,"line_start":1193,"line_end":1193,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274821,"byte_end":274824,"line_start":1194,"line_end":1194,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274829,"byte_end":274904,"line_start":1195,"line_end":1195,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274909,"byte_end":274983,"line_start":1196,"line_end":1196,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":274988,"byte_end":275024,"line_start":1197,"line_end":1197,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275029,"byte_end":275038,"line_start":1198,"line_end":1198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275405,"byte_end":275411,"line_start":1209,"line_end":1209,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size3D<T, U>>::to_i64","value":"fn (&self) -> Size3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275115,"byte_end":275171,"line_start":1203,"line_end":1203,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275176,"byte_end":275179,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275184,"byte_end":275259,"line_start":1205,"line_end":1205,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275264,"byte_end":275338,"line_start":1206,"line_end":1206,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275343,"byte_end":275379,"line_start":1207,"line_end":1207,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275384,"byte_end":275393,"line_start":1208,"line_end":1208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275774,"byte_end":275777,"line_start":1220,"line_end":1220,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size3D<T, U>>::abs","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275506,"byte_end":275556,"line_start":1215,"line_end":1215,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275561,"byte_end":275564,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275569,"byte_end":275657,"line_start":1217,"line_end":1217,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275662,"byte_end":275665,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275670,"byte_end":275762,"line_start":1219,"line_end":1219,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275982,"byte_end":275993,"line_start":1225,"line_end":1225,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size3D<T, U>>::is_positive","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275875,"byte_end":275970,"line_start":1224,"line_end":1224,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276260,"byte_end":276263,"line_start":1233,"line_end":1233,"column_start":12,"column_end":15},"name":"min","qualname":"<Size3D<T, U>>::min","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276152,"byte_end":276234,"line_start":1231,"line_end":1231,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276239,"byte_end":276248,"line_start":1232,"line_end":1232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276565,"byte_end":276568,"line_start":1243,"line_end":1243,"column_start":12,"column_end":15},"name":"max","qualname":"<Size3D<T, U>>::max","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276457,"byte_end":276539,"line_start":1241,"line_end":1241,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276544,"byte_end":276553,"line_start":1242,"line_end":1242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276955,"byte_end":276960,"line_start":1256,"line_end":1256,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size3D<T, U>>::clamp","value":"fn (&self, start: Self, end: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276762,"byte_end":276831,"line_start":1251,"line_end":1251,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276836,"byte_end":276872,"line_start":1252,"line_end":1252,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276877,"byte_end":276880,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276885,"byte_end":276929,"line_start":1254,"line_end":1254,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276934,"byte_end":276943,"line_start":1255,"line_end":1255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2359},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277167,"byte_end":277179,"line_start":1264,"line_end":1264,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size3D<T, U>>::greater_than","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277077,"byte_end":277155,"line_start":1263,"line_end":1263,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277475,"byte_end":277485,"line_start":1273,"line_end":1273,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size3D<T, U>>::lower_than","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277387,"byte_end":277463,"line_start":1272,"line_end":1272,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2361},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277769,"byte_end":277789,"line_start":1282,"line_end":1282,"column_start":12,"column_end":32},"name":"is_empty_or_negative","qualname":"<Size3D<T, U>>::is_empty_or_negative","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero or negative.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277693,"byte_end":277757,"line_start":1281,"line_end":1281,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2365},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278074,"byte_end":278079,"line_start":1293,"line_end":1293,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size3D<T, U>>::equal","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277991,"byte_end":278062,"line_start":1292,"line_end":1292,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278377,"byte_end":278386,"line_start":1302,"line_end":1302,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size3D<T, U>>::not_equal","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278290,"byte_end":278365,"line_start":1301,"line_end":1301,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283806,"byte_end":283811,"line_start":1535,"line_end":1535,"column_start":14,"column_end":19},"name":"size3","qualname":"::size::size3","value":"fn <T, U> (w: T, h: T, d: T) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size3D::new(w, h, d)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size3D::new(w, h, d)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283741,"byte_end":283782,"line_start":1533,"line_end":1533,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283783,"byte_end":283792,"line_start":1534,"line_end":1534,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291445,"byte_end":291456,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"Transform2D","qualname":"::transform2d::Transform2D","value":"Transform2D { m11, m12, m21, m22, m31, m32, _unit }","parent":null,"children":[{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511}],"decl_id":null,"docs":" A 2d transform stored as a 3 by 2 matrix in row-major order in memory.","sig":null,"attributes":[{"value":"/ A 2d transform stored as a 3 by 2 matrix in row-major order in memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290505,"byte_end":290579,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290580,"byte_end":290583,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290584,"byte_end":290671,"line_start":33,"line_end":33,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290672,"byte_end":290715,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform2D<f32, WorldSpace, ScreenSpace>::transform_point4d`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290716,"byte_end":290795,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ takes a `Point2D<f32, WorldSpace>` and returns a `Point2D<f32, ScreenSpace>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290796,"byte_end":290877,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290878,"byte_end":290881,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290882,"byte_end":290967,"line_start":38,"line_end":38,"column_start":1,"column_end":86}},{"value":"/ A pre-transformation corresponds to adding an operation that is applied before","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":290968,"byte_end":291050,"line_start":39,"line_end":39,"column_start":1,"column_end":83}},{"value":"/ the rest of the transformation, while a post-transformation adds an operation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291051,"byte_end":291132,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/ that is applied after.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291133,"byte_end":291159,"line_start":41,"line_end":41,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291160,"byte_end":291163,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ These transforms are for working with _row vectors_, so the matrix math for transforming","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291164,"byte_end":291256,"line_start":43,"line_end":43,"column_start":1,"column_end":93}},{"value":"/ a vector is `v * T`. If your library is using column vectors, use `row_major` functions when you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291257,"byte_end":291357,"line_start":44,"line_end":44,"column_start":1,"column_end":101}},{"value":"/ are asked for `column_major` representations and vice versa.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291358,"byte_end":291422,"line_start":45,"line_end":45,"column_start":1,"column_end":65}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291423,"byte_end":291433,"line_start":46,"line_end":46,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2505},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291480,"byte_end":291483,"line_start":48,"line_end":48,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform2d::Transform2D::m11","value":"T","parent":{"krate":0,"index":2501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2506},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291492,"byte_end":291495,"line_start":48,"line_end":48,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform2d::Transform2D::m12","value":"T","parent":{"krate":0,"index":2501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2507},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291508,"byte_end":291511,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform2d::Transform2D::m21","value":"T","parent":{"krate":0,"index":2501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2508},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291520,"byte_end":291523,"line_start":49,"line_end":49,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform2d::Transform2D::m22","value":"T","parent":{"krate":0,"index":2501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2509},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291536,"byte_end":291539,"line_start":50,"line_end":50,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform2d::Transform2D::m31","value":"T","parent":{"krate":0,"index":2501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2510},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291548,"byte_end":291551,"line_start":50,"line_end":50,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform2d::Transform2D::m32","value":"T","parent":{"krate":0,"index":2501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2511},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291583,"byte_end":291588,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform2d::Transform2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2501},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294047,"byte_end":294056,"line_start":142,"line_end":142,"column_start":18,"column_end":27},"name":"row_major","qualname":"<Transform2D<T, Src, Dst>>::row_major","value":"fn (m11: T, m12: T, m21: T, m22: T, m31: T, m32: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its matrix elements in row-major order.","sig":null,"attributes":[{"value":"/ Create a transform specifying its matrix elements in row-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293731,"byte_end":293804,"line_start":137,"line_end":137,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293809,"byte_end":293812,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293817,"byte_end":293889,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293894,"byte_end":293977,"line_start":140,"line_end":140,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `column_major`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293982,"byte_end":294029,"line_start":141,"line_end":141,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294572,"byte_end":294584,"line_start":156,"line_end":156,"column_start":18,"column_end":30},"name":"column_major","qualname":"<Transform2D<T, Src, Dst>>::column_major","value":"fn (m11: T, m21: T, m31: T, m12: T, m22: T, m32: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its matrix elements in column-major order.","sig":null,"attributes":[{"value":"/ Create a transform specifying its matrix elements in column-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294256,"byte_end":294332,"line_start":151,"line_end":151,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294337,"byte_end":294340,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294345,"byte_end":294417,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294422,"byte_end":294505,"line_start":154,"line_end":154,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `row_major`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294510,"byte_end":294554,"line_start":155,"line_end":155,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295111,"byte_end":295120,"line_start":173,"line_end":173,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform2D<T, Src, Dst>>::approx_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294785,"byte_end":294866,"line_start":166,"line_end":166,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294871,"byte_end":294901,"line_start":167,"line_end":167,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294906,"byte_end":294909,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294914,"byte_end":294994,"line_start":169,"line_end":169,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":294999,"byte_end":295002,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295007,"byte_end":295085,"line_start":171,"line_end":171,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295090,"byte_end":295099,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295582,"byte_end":295595,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform2D<T, Src, Dst>>::approx_eq_eps","value":"fn (&self, other: &Self, eps: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295245,"byte_end":295326,"line_start":178,"line_end":178,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295331,"byte_end":295360,"line_start":179,"line_end":179,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295365,"byte_end":295368,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295373,"byte_end":295457,"line_start":181,"line_end":181,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295462,"byte_end":295465,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295470,"byte_end":295556,"line_start":183,"line_end":183,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295561,"byte_end":295570,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296200,"byte_end":296218,"line_start":199,"line_end":199,"column_start":12,"column_end":30},"name":"to_row_major_array","qualname":"<Transform2D<T, Src, Dst>>::to_row_major_array","value":"fn (&self) -> [T; 6]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms in row-major order (the order\n in which the transform is actually laid out in memory).","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms in row-major order (the order","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295792,"byte_end":295876,"line_start":192,"line_end":192,"column_start":5,"column_end":89}},{"value":"/ in which the transform is actually laid out in memory).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295881,"byte_end":295940,"line_start":193,"line_end":193,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295945,"byte_end":295948,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295953,"byte_end":296025,"line_start":195,"line_end":195,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296030,"byte_end":296113,"line_start":196,"line_end":196,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `to_column_major_array`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296118,"byte_end":296174,"line_start":197,"line_end":197,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296179,"byte_end":296188,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2550},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296698,"byte_end":296719,"line_start":213,"line_end":213,"column_start":12,"column_end":33},"name":"to_column_major_array","qualname":"<Transform2D<T, Src, Dst>>::to_column_major_array","value":"fn (&self) -> [T; 6]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms in column-major order.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms in column-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296364,"byte_end":296441,"line_start":207,"line_end":207,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296446,"byte_end":296449,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296454,"byte_end":296526,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296531,"byte_end":296614,"line_start":210,"line_end":210,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `to_row_major_array`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296619,"byte_end":296672,"line_start":211,"line_end":211,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296677,"byte_end":296686,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297300,"byte_end":297313,"line_start":229,"line_end":229,"column_start":12,"column_end":25},"name":"to_row_arrays","qualname":"<Transform2D<T, Src, Dst>>::to_row_arrays","value":"fn (&self) -> [[T; 2]; 3]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's 3 rows in (in row-major order)\n as arrays.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's 3 rows in (in row-major order)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296853,"byte_end":296932,"line_start":220,"line_end":220,"column_start":5,"column_end":84}},{"value":"/ as arrays.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296937,"byte_end":296951,"line_start":221,"line_end":221,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296956,"byte_end":296959,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method to interface with other libraries like glium.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":296964,"byte_end":297042,"line_start":223,"line_end":223,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297047,"byte_end":297050,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297055,"byte_end":297127,"line_start":225,"line_end":225,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297132,"byte_end":297215,"line_start":226,"line_end":226,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), this will return column major arrays.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297220,"byte_end":297274,"line_start":227,"line_end":227,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297279,"byte_end":297288,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297799,"byte_end":297819,"line_start":243,"line_end":243,"column_start":12,"column_end":32},"name":"from_row_major_array","qualname":"<Transform2D<T, Src, Dst>>::from_row_major_array","value":"fn (array: [T; 6]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a transform from an array of 6 elements in row-major order.","sig":null,"attributes":[{"value":"/ Creates a transform from an array of 6 elements in row-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297471,"byte_end":297542,"line_start":237,"line_end":237,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297547,"byte_end":297550,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297555,"byte_end":297627,"line_start":239,"line_end":239,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297632,"byte_end":297715,"line_start":240,"line_end":240,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), please provide a column major array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297720,"byte_end":297773,"line_start":241,"line_end":241,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297778,"byte_end":297787,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298312,"byte_end":298327,"line_start":257,"line_end":257,"column_start":12,"column_end":27},"name":"from_row_arrays","qualname":"<Transform2D<T, Src, Dst>>::from_row_arrays","value":"fn (array: [[T; 2]; 3]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a transform from 3 rows of 2 elements (row-major order).","sig":null,"attributes":[{"value":"/ Creates a transform from 3 rows of 2 elements (row-major order).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":297987,"byte_end":298055,"line_start":251,"line_end":251,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298060,"byte_end":298063,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298068,"byte_end":298140,"line_start":253,"line_end":253,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298145,"byte_end":298228,"line_start":254,"line_end":254,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), please provide a column major array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298233,"byte_end":298286,"line_start":255,"line_end":255,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298291,"byte_end":298300,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298598,"byte_end":298608,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform2D<T, Src, Dst>>::to_untyped","value":"fn (&self) -> Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298518,"byte_end":298572,"line_start":265,"line_end":265,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298577,"byte_end":298586,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298872,"byte_end":298884,"line_start":277,"line_end":277,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform2D<T, Src, Dst>>::from_untyped","value":"fn (p: &Transform2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298810,"byte_end":298846,"line_start":275,"line_end":275,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":298851,"byte_end":298860,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299157,"byte_end":299168,"line_start":287,"line_end":287,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform2D<T, Src, Dst>>::with_source","value":"fn <NewSrc> (&self) -> Transform2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299071,"byte_end":299131,"line_start":285,"line_end":285,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299136,"byte_end":299145,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2564},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299457,"byte_end":299473,"line_start":297,"line_end":297,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform2D<T, Src, Dst>>::with_destination","value":"fn <NewDst> (&self) -> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299366,"byte_end":299431,"line_start":295,"line_end":295,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299436,"byte_end":299445,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2566},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299735,"byte_end":299740,"line_start":306,"line_end":306,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Transform2D<T, Src, Dst>>::to_3d","value":"fn (&self) -> Transform3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3D transform from the current transform\n","sig":null,"attributes":[{"value":"/ Create a 3D transform from the current transform","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299671,"byte_end":299723,"line_start":305,"line_end":305,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300083,"byte_end":300087,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform2D<T, Src, Dst>>::cast","value":"fn <NewT> (&self) -> Transform2D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299983,"byte_end":300057,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300062,"byte_end":300071,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300282,"byte_end":300290,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform2D<T, Src, Dst>>::try_cast","value":"fn <NewT> (&self) -> Option<Transform2D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300187,"byte_end":300270,"line_start":321,"line_end":321,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301072,"byte_end":301080,"line_start":352,"line_end":352,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform2D<T, Src, Dst>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an identity matrix:","sig":null,"attributes":[{"value":"/ Create an identity matrix:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300944,"byte_end":300974,"line_start":344,"line_end":344,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300979,"byte_end":300982,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300987,"byte_end":300998,"line_start":346,"line_end":346,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301003,"byte_end":301010,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301015,"byte_end":301022,"line_start":348,"line_end":348,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301027,"byte_end":301034,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301039,"byte_end":301046,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301051,"byte_end":301060,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301851,"byte_end":301865,"line_start":378,"line_end":378,"column_start":12,"column_end":26},"name":"post_transform","qualname":"<Transform2D<T, Src, Dst>>::post_transform","value":"fn <NewDst> (&self, mat: &Transform2D<T, Dst, NewDst>) -> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301626,"byte_end":301707,"line_start":373,"line_end":373,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301712,"byte_end":301752,"line_start":374,"line_end":374,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301757,"byte_end":301760,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to self * mat","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301765,"byte_end":301823,"line_start":376,"line_end":376,"column_start":5,"column_end":63}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301828,"byte_end":301839,"line_start":377,"line_end":377,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302582,"byte_end":302595,"line_start":397,"line_end":397,"column_start":12,"column_end":25},"name":"pre_transform","qualname":"<Transform2D<T, Src, Dst>>::pre_transform","value":"fn <NewSrc> (&self, mat: &Transform2D<T, NewSrc, Src>) -> Transform2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies before self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302342,"byte_end":302423,"line_start":391,"line_end":391,"column_start":5,"column_end":86}},{"value":"/ applies before self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302428,"byte_end":302469,"line_start":392,"line_end":392,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302474,"byte_end":302477,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to mat * self","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302482,"byte_end":302540,"line_start":394,"line_end":394,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302545,"byte_end":302554,"line_start":395,"line_end":395,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302559,"byte_end":302570,"line_start":396,"line_end":396,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2593},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302998,"byte_end":303016,"line_start":415,"line_end":415,"column_start":12,"column_end":30},"name":"create_translation","qualname":"<Transform2D<T, Src, Dst>>::create_translation","value":"fn (x: T, y: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d translation transform:","sig":null,"attributes":[{"value":"/ Create a 2d translation transform:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302862,"byte_end":302900,"line_start":407,"line_end":407,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302905,"byte_end":302908,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302913,"byte_end":302924,"line_start":409,"line_end":409,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302929,"byte_end":302936,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302941,"byte_end":302948,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ x y","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302953,"byte_end":302960,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302965,"byte_end":302972,"line_start":413,"line_end":413,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302977,"byte_end":302986,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303349,"byte_end":303363,"line_start":429,"line_end":429,"column_start":12,"column_end":26},"name":"post_translate","qualname":"<Transform2D<T, Src, Dst>>::post_translate","value":"fn (&self, v: Vector2D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303217,"byte_end":303307,"line_start":426,"line_end":426,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303312,"byte_end":303321,"line_start":427,"line_end":427,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303326,"byte_end":303337,"line_start":428,"line_end":428,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2597},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303685,"byte_end":303698,"line_start":439,"line_end":439,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform2D<T, Src, Dst>>::pre_translate","value":"fn (&self, v: Vector2D<T, Src>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303552,"byte_end":303643,"line_start":436,"line_end":436,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303648,"byte_end":303657,"line_start":437,"line_end":437,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303662,"byte_end":303673,"line_start":438,"line_end":438,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2602},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304143,"byte_end":304158,"line_start":454,"line_end":454,"column_start":12,"column_end":27},"name":"create_rotation","qualname":"<Transform2D<T, Src, Dst>>::create_rotation","value":"fn (theta: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation transform.\n","sig":null,"attributes":[{"value":"/ Returns a rotation transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304084,"byte_end":304117,"line_start":452,"line_end":452,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304122,"byte_end":304131,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2603},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304541,"byte_end":304552,"line_start":468,"line_end":468,"column_start":12,"column_end":23},"name":"post_rotate","qualname":"<Transform2D<T, Src, Dst>>::post_rotate","value":"fn (&self, theta: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304412,"byte_end":304499,"line_start":465,"line_end":465,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304504,"byte_end":304513,"line_start":466,"line_end":466,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304518,"byte_end":304529,"line_start":467,"line_end":467,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2604},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304794,"byte_end":304804,"line_start":475,"line_end":475,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform2D<T, Src, Dst>>::pre_rotate","value":"fn (&self, theta: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304664,"byte_end":304752,"line_start":472,"line_end":472,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304757,"byte_end":304766,"line_start":473,"line_end":473,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304771,"byte_end":304782,"line_start":474,"line_end":474,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305153,"byte_end":305165,"line_start":490,"line_end":490,"column_start":12,"column_end":24},"name":"create_scale","qualname":"<Transform2D<T, Src, Dst>>::create_scale","value":"fn (x: T, y: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d scale transform:","sig":null,"attributes":[{"value":"/ Create a 2d scale transform:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305023,"byte_end":305055,"line_start":482,"line_end":482,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305060,"byte_end":305063,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305068,"byte_end":305079,"line_start":484,"line_end":484,"column_start":5,"column_end":16}},{"value":"/ x 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305084,"byte_end":305091,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ 0 y","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305096,"byte_end":305103,"line_start":486,"line_end":486,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305108,"byte_end":305115,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305120,"byte_end":305127,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305132,"byte_end":305141,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305496,"byte_end":305506,"line_start":506,"line_end":506,"column_start":12,"column_end":22},"name":"post_scale","qualname":"<Transform2D<T, Src, Dst>>::post_scale","value":"fn (&self, x: T, y: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale after self's transformation and returns the resulting transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305370,"byte_end":305454,"line_start":503,"line_end":503,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305459,"byte_end":305468,"line_start":504,"line_end":504,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305473,"byte_end":305484,"line_start":505,"line_end":505,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305810,"byte_end":305819,"line_start":516,"line_end":516,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform2D<T, Src, Dst>>::pre_scale","value":"fn (&self, x: T, y: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale before self's transformation and returns the resulting transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305683,"byte_end":305768,"line_start":513,"line_end":513,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305773,"byte_end":305782,"line_start":514,"line_end":514,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":305787,"byte_end":305798,"line_start":515,"line_end":515,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2617},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306388,"byte_end":306403,"line_start":538,"line_end":538,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Transform2D<T, Src, Dst>>::transform_point","value":"fn (&self, point: Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this transform.","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306217,"byte_end":306275,"line_start":533,"line_end":533,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306280,"byte_end":306283,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `p * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306288,"byte_end":306346,"line_start":535,"line_end":535,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306351,"byte_end":306360,"line_start":536,"line_end":536,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306365,"byte_end":306376,"line_start":537,"line_end":537,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2618},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306795,"byte_end":306811,"line_start":550,"line_end":550,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Transform2D<T, Src, Dst>>::transform_vector","value":"fn (&self, vec: Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this matrix.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306626,"byte_end":306682,"line_start":545,"line_end":545,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306687,"byte_end":306690,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `v * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306695,"byte_end":306753,"line_start":547,"line_end":547,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306758,"byte_end":306767,"line_start":548,"line_end":548,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306772,"byte_end":306783,"line_start":549,"line_end":549,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307131,"byte_end":307145,"line_start":559,"line_end":559,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Transform2D<T, Src, Dst>>::transform_rect","value":"fn (&self, rect: &Rect<T, Src>) -> Rect<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306975,"byte_end":307070,"line_start":555,"line_end":555,"column_start":5,"column_end":100}},{"value":"/ transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307075,"byte_end":307089,"line_start":556,"line_end":556,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307094,"byte_end":307103,"line_start":557,"line_end":557,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307108,"byte_end":307119,"line_start":558,"line_end":558,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307772,"byte_end":307783,"line_start":580,"line_end":580,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform2D<T, Src, Dst>>::determinant","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes and returns the determinant of this transform.\n","sig":null,"attributes":[{"value":"/ Computes and returns the determinant of this transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307701,"byte_end":307760,"line_start":579,"line_end":579,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307953,"byte_end":307966,"line_start":586,"line_end":586,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform2D<T, Src, Dst>>::is_invertible","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307859,"byte_end":307927,"line_start":584,"line_end":584,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307932,"byte_end":307941,"line_start":585,"line_end":585,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2626},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":308112,"byte_end":308119,"line_start":592,"line_end":592,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform2D<T, Src, Dst>>::inverse","value":"fn (&self) -> Option<Transform2D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":308038,"byte_end":308084,"line_start":590,"line_end":590,"column_start":5,"column_end":51}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":308089,"byte_end":308100,"line_start":591,"line_end":591,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317506,"byte_end":317517,"line_start":49,"line_end":49,"column_start":12,"column_end":23},"name":"Transform3D","qualname":"::transform3d::Transform3D","value":"Transform3D { m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, _unit }","parent":null,"children":[{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2685},{"krate":0,"index":2686},{"krate":0,"index":2687},{"krate":0,"index":2688},{"krate":0,"index":2689},{"krate":0,"index":2690},{"krate":0,"index":2691},{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699}],"decl_id":null,"docs":" A 3d transform stored as a 4 by 4 matrix in row-major order in memory.","sig":null,"attributes":[{"value":"/ A 3d transform stored as a 4 by 4 matrix in row-major order in memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316566,"byte_end":316640,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316641,"byte_end":316644,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316645,"byte_end":316732,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316733,"byte_end":316776,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform3D<f32, WorldSpace, ScreenSpace>::transform_point3d`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316777,"byte_end":316856,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ takes a `Point3D<f32, WorldSpace>` and returns a `Point3D<f32, ScreenSpace>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316857,"byte_end":316938,"line_start":38,"line_end":38,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316939,"byte_end":316942,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":316943,"byte_end":317028,"line_start":40,"line_end":40,"column_start":1,"column_end":86}},{"value":"/ A pre-transformation corresponds to adding an operation that is applied before","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317029,"byte_end":317111,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/ the rest of the transformation, while a post-transformation adds an operation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317112,"byte_end":317193,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ that is applied after.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317194,"byte_end":317220,"line_start":43,"line_end":43,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317221,"byte_end":317224,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ These transforms are for working with _row vectors_, so the matrix math for transforming","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317225,"byte_end":317317,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/ a vector is `v * T`. If your library is using column vectors, use `row_major` functions when you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317318,"byte_end":317418,"line_start":46,"line_end":46,"column_start":1,"column_end":101}},{"value":"/ are asked for `column_major` representations and vice versa.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317419,"byte_end":317483,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317484,"byte_end":317494,"line_start":48,"line_end":48,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2683},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317541,"byte_end":317544,"line_start":50,"line_end":50,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform3d::Transform3D::m11","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2684},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317553,"byte_end":317556,"line_start":50,"line_end":50,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform3d::Transform3D::m12","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2685},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317565,"byte_end":317568,"line_start":50,"line_end":50,"column_start":33,"column_end":36},"name":"m13","qualname":"::transform3d::Transform3D::m13","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2686},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317577,"byte_end":317580,"line_start":50,"line_end":50,"column_start":45,"column_end":48},"name":"m14","qualname":"::transform3d::Transform3D::m14","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2687},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317593,"byte_end":317596,"line_start":51,"line_end":51,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform3d::Transform3D::m21","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317605,"byte_end":317608,"line_start":51,"line_end":51,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform3d::Transform3D::m22","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2689},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317617,"byte_end":317620,"line_start":51,"line_end":51,"column_start":33,"column_end":36},"name":"m23","qualname":"::transform3d::Transform3D::m23","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2690},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317629,"byte_end":317632,"line_start":51,"line_end":51,"column_start":45,"column_end":48},"name":"m24","qualname":"::transform3d::Transform3D::m24","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317645,"byte_end":317648,"line_start":52,"line_end":52,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform3d::Transform3D::m31","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2692},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317657,"byte_end":317660,"line_start":52,"line_end":52,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform3d::Transform3D::m32","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2693},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317669,"byte_end":317672,"line_start":52,"line_end":52,"column_start":33,"column_end":36},"name":"m33","qualname":"::transform3d::Transform3D::m33","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2694},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317681,"byte_end":317684,"line_start":52,"line_end":52,"column_start":45,"column_end":48},"name":"m34","qualname":"::transform3d::Transform3D::m34","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2695},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317697,"byte_end":317700,"line_start":53,"line_end":53,"column_start":9,"column_end":12},"name":"m41","qualname":"::transform3d::Transform3D::m41","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317709,"byte_end":317712,"line_start":53,"line_end":53,"column_start":21,"column_end":24},"name":"m42","qualname":"::transform3d::Transform3D::m42","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2697},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317721,"byte_end":317724,"line_start":53,"line_end":53,"column_start":33,"column_end":36},"name":"m43","qualname":"::transform3d::Transform3D::m43","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2698},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317733,"byte_end":317736,"line_start":53,"line_end":53,"column_start":45,"column_end":48},"name":"m44","qualname":"::transform3d::Transform3D::m44","value":"T","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317768,"byte_end":317773,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform3d::Transform3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2679},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2728},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321696,"byte_end":321705,"line_start":183,"line_end":183,"column_start":18,"column_end":27},"name":"row_major","qualname":"<Transform3D<T, Src, Dst>>::row_major","value":"fn (m11: T, m12: T, m13: T, m14: T, m21: T, m22: T, m23: T, m24: T, m31: T, m32: T, m33: T, m34: T, m41: T, m42: T, m43: T, m44: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its components in row-major order.","sig":null,"attributes":[{"value":"/ Create a transform specifying its components in row-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321142,"byte_end":321210,"line_start":173,"line_end":173,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321215,"byte_end":321218,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ For example, the translation terms m41, m42, m43 on the last row with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321223,"byte_end":321300,"line_start":175,"line_end":175,"column_start":5,"column_end":82}},{"value":"/ row-major convention) are the 13rd, 14th and 15th parameters.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321305,"byte_end":321370,"line_start":176,"line_end":176,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321375,"byte_end":321378,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321383,"byte_end":321455,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321460,"byte_end":321543,"line_start":179,"line_end":179,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `column_major`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321548,"byte_end":321595,"line_start":180,"line_end":180,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321600,"byte_end":321609,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322384,"byte_end":322396,"line_start":208,"line_end":208,"column_start":12,"column_end":24},"name":"row_major_2d","qualname":"<Transform3D<T, Src, Dst>>::row_major_2d","value":"fn (m11: T, m12: T, m21: T, m22: T, m41: T, m42: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 4 by 4 transform representing a 2d transformation, specifying its components\n in row-major order:","sig":null,"attributes":[{"value":"/ Create a 4 by 4 transform representing a 2d transformation, specifying its components","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322105,"byte_end":322194,"line_start":198,"line_end":198,"column_start":5,"column_end":94}},{"value":"/ in row-major order:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322199,"byte_end":322222,"line_start":199,"line_end":199,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322227,"byte_end":322230,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322235,"byte_end":322246,"line_start":201,"line_end":201,"column_start":5,"column_end":16}},{"value":"/ m11  m12   0   0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322251,"byte_end":322271,"line_start":202,"line_end":202,"column_start":5,"column_end":25}},{"value":"/ m21  m22   0   0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322276,"byte_end":322296,"line_start":203,"line_end":203,"column_start":5,"column_end":25}},{"value":"/   0    0   1   0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322301,"byte_end":322321,"line_start":204,"line_end":204,"column_start":5,"column_end":25}},{"value":"/ m41  m42   0   1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322326,"byte_end":322346,"line_start":205,"line_end":205,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322351,"byte_end":322358,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322363,"byte_end":322372,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323300,"byte_end":323312,"line_start":233,"line_end":233,"column_start":18,"column_end":30},"name":"column_major","qualname":"<Transform3D<T, Src, Dst>>::column_major","value":"fn (m11: T, m21: T, m31: T, m41: T, m12: T, m22: T, m32: T, m42: T, m13: T, m23: T, m33: T, m43: T, m14: T, m24: T, m34: T, m44: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its components in column-major order.","sig":null,"attributes":[{"value":"/ Create a transform specifying its components in column-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322742,"byte_end":322813,"line_start":223,"line_end":223,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322818,"byte_end":322821,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ For example, the translation terms m41, m42, m43 on the last column with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322826,"byte_end":322906,"line_start":225,"line_end":225,"column_start":5,"column_end":85}},{"value":"/ column-major convention) are the 4th, 8th and 12nd parameters.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322911,"byte_end":322977,"line_start":226,"line_end":226,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322982,"byte_end":322985,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":322990,"byte_end":323062,"line_start":228,"line_end":228,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323067,"byte_end":323150,"line_start":229,"line_end":229,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `row_major`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323155,"byte_end":323199,"line_start":230,"line_end":230,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323204,"byte_end":323213,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2733},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323891,"byte_end":323896,"line_start":252,"line_end":252,"column_start":12,"column_end":17},"name":"is_2d","qualname":"<Transform3D<T, Src, Dst>>::is_2d","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this transform can be represented with a `Transform2D`.","sig":null,"attributes":[{"value":"/ Returns `true` if this transform can be represented with a `Transform2D`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323712,"byte_end":323789,"line_start":248,"line_end":248,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323794,"byte_end":323797,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#2d-transform>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323802,"byte_end":323865,"line_start":250,"line_end":250,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":323870,"byte_end":323879,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2738},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324711,"byte_end":324729,"line_start":273,"line_end":273,"column_start":12,"column_end":30},"name":"to_row_major_array","qualname":"<Transform3D<T, Src, Dst>>::to_row_major_array","value":"fn (&self) -> [T; 16]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms in row-major order (the order\n in which the transform is actually laid out in memory).","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms in row-major order (the order","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324303,"byte_end":324387,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/ in which the transform is actually laid out in memory).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324392,"byte_end":324451,"line_start":267,"line_end":267,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324456,"byte_end":324459,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324464,"byte_end":324536,"line_start":269,"line_end":269,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324541,"byte_end":324624,"line_start":270,"line_end":270,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `to_column_major_array`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324629,"byte_end":324685,"line_start":271,"line_end":271,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324690,"byte_end":324699,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2740},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325322,"byte_end":325343,"line_start":288,"line_end":288,"column_start":12,"column_end":33},"name":"to_column_major_array","qualname":"<Transform3D<T, Src, Dst>>::to_column_major_array","value":"fn (&self) -> [T; 16]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms in column-major order.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms in column-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324988,"byte_end":325065,"line_start":282,"line_end":282,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325070,"byte_end":325073,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325078,"byte_end":325150,"line_start":284,"line_end":284,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325155,"byte_end":325238,"line_start":285,"line_end":285,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `to_row_major_array`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325243,"byte_end":325296,"line_start":286,"line_end":286,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325301,"byte_end":325310,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326046,"byte_end":326059,"line_start":306,"line_end":306,"column_start":12,"column_end":25},"name":"to_row_arrays","qualname":"<Transform3D<T, Src, Dst>>::to_row_arrays","value":"fn (&self) -> [[T; 4]; 4]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's 4 rows in (in row-major order)\n as arrays.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's 4 rows in (in row-major order)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325602,"byte_end":325681,"line_start":297,"line_end":297,"column_start":5,"column_end":84}},{"value":"/ as arrays.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325686,"byte_end":325700,"line_start":298,"line_end":298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325705,"byte_end":325708,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method to interface with other libraries like glium.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325713,"byte_end":325791,"line_start":300,"line_end":300,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325796,"byte_end":325799,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325804,"byte_end":325876,"line_start":302,"line_end":302,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325881,"byte_end":325964,"line_start":303,"line_end":303,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `to_column_arrays`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":325969,"byte_end":326020,"line_start":304,"line_end":304,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326025,"byte_end":326034,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2745},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326807,"byte_end":326823,"line_start":324,"line_end":324,"column_start":12,"column_end":28},"name":"to_column_arrays","qualname":"<Transform3D<T, Src, Dst>>::to_column_arrays","value":"fn (&self) -> [[T; 4]; 4]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's 4 columns in (in row-major order,\n or 4 rows in column-major order) as arrays.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's 4 columns in (in row-major order,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326330,"byte_end":326412,"line_start":315,"line_end":315,"column_start":5,"column_end":87}},{"value":"/ or 4 rows in column-major order) as arrays.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326417,"byte_end":326464,"line_start":316,"line_end":316,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326469,"byte_end":326472,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method to interface with other libraries like glium.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326477,"byte_end":326555,"line_start":318,"line_end":318,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326560,"byte_end":326563,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326568,"byte_end":326640,"line_start":320,"line_end":320,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326645,"byte_end":326728,"line_start":321,"line_end":321,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), then please use `to_row_arrays`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326733,"byte_end":326781,"line_start":322,"line_end":322,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":326786,"byte_end":326795,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327437,"byte_end":327447,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform3D<T, Src, Dst>>::from_array","value":"fn (array: [T; 16]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a transform from an array of 16 elements in row-major order.","sig":null,"attributes":[{"value":"/ Creates a transform from an array of 16 elements in row-major order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327094,"byte_end":327166,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327171,"byte_end":327174,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327179,"byte_end":327251,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327256,"byte_end":327339,"line_start":336,"line_end":336,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), please provide column-major data to this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327344,"byte_end":327411,"line_start":337,"line_end":337,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327416,"byte_end":327425,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328080,"byte_end":328095,"line_start":354,"line_end":354,"column_start":12,"column_end":27},"name":"from_row_arrays","qualname":"<Transform3D<T, Src, Dst>>::from_row_arrays","value":"fn (array: [[T; 4]; 4]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a transform from 4 rows of 4 elements (row-major order).","sig":null,"attributes":[{"value":"/ Creates a transform from 4 rows of 4 elements (row-major order).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327742,"byte_end":327810,"line_start":348,"line_end":348,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327815,"byte_end":327818,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Beware: This library is written with the assumption that row vectors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327823,"byte_end":327895,"line_start":350,"line_end":350,"column_start":5,"column_end":77}},{"value":"/ are being used. If your matrices use column vectors (i.e. transforming a vector","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327900,"byte_end":327983,"line_start":351,"line_end":351,"column_start":5,"column_end":88}},{"value":"/ is `T * v`), please provide column-major data to tis function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":327988,"byte_end":328054,"line_start":352,"line_end":352,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328059,"byte_end":328068,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2753},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328490,"byte_end":328502,"line_start":365,"line_end":365,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform3D<T, Src, Dst>>::from_untyped","value":"fn (m: &Transform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328428,"byte_end":328464,"line_start":363,"line_end":363,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328469,"byte_end":328478,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2754},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328852,"byte_end":328862,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform3D<T, Src, Dst>>::to_untyped","value":"fn (&self) -> Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328772,"byte_end":328826,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":328831,"byte_end":328840,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2755},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":329263,"byte_end":329274,"line_start":387,"line_end":387,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform3D<T, Src, Dst>>::with_source","value":"fn <NewSrc> (&self) -> Transform3D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":329177,"byte_end":329237,"line_start":385,"line_end":385,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":329242,"byte_end":329251,"line_start":386,"line_end":386,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":329675,"byte_end":329691,"line_start":398,"line_end":398,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform3D<T, Src, Dst>>::with_destination","value":"fn <NewDst> (&self) -> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":329584,"byte_end":329649,"line_start":396,"line_end":396,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":329654,"byte_end":329663,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330290,"byte_end":330295,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Transform3D<T, Src, Dst>>::to_2d","value":"fn (&self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Create a 2D transform picking the relevant terms from this transform.","sig":null,"attributes":[{"value":"/ Create a 2D transform picking the relevant terms from this transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330001,"byte_end":330074,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330079,"byte_end":330082,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ This method assumes that self represents a 2d transformation, callers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330087,"byte_end":330160,"line_start":409,"line_end":409,"column_start":5,"column_end":78}},{"value":"/ should check that [`self.is_2d()`] returns `true` beforehand.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330165,"byte_end":330230,"line_start":410,"line_end":410,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330235,"byte_end":330238,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ [`self.is_2d()`]: #method.is_2d","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330243,"byte_end":330278,"line_start":412,"line_end":412,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2764},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330711,"byte_end":330719,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform3D<T, Src, Dst>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity matrix:","sig":null,"attributes":[{"value":"/ Creates an identity matrix:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330554,"byte_end":330585,"line_start":426,"line_end":426,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330590,"byte_end":330593,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330598,"byte_end":330609,"line_start":428,"line_end":428,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330614,"byte_end":330625,"line_start":429,"line_end":429,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330630,"byte_end":330641,"line_start":430,"line_end":430,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330646,"byte_end":330657,"line_start":431,"line_end":431,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330662,"byte_end":330673,"line_start":432,"line_end":432,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330678,"byte_end":330685,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330690,"byte_end":330699,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331256,"byte_end":331267,"line_start":453,"line_end":453,"column_start":12,"column_end":23},"name":"create_skew","qualname":"<Transform3D<T, Src, Dst>>::create_skew","value":"fn (alpha: Angle<T>, beta: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d skew transform.","sig":null,"attributes":[{"value":"/ Create a 2d skew transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331137,"byte_end":331168,"line_start":450,"line_end":450,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331173,"byte_end":331176,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#funcdef-skew>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331181,"byte_end":331244,"line_start":452,"line_end":452,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2769},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331850,"byte_end":331868,"line_start":477,"line_end":477,"column_start":12,"column_end":30},"name":"create_perspective","qualname":"<Transform3D<T, Src, Dst>>::create_perspective","value":"fn (d: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a simple perspective projection transform:","sig":null,"attributes":[{"value":"/ Create a simple perspective projection transform:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331660,"byte_end":331713,"line_start":469,"line_end":469,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331718,"byte_end":331721,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331726,"byte_end":331737,"line_start":471,"line_end":471,"column_start":5,"column_end":16}},{"value":"/ 1   0   0   0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331742,"byte_end":331759,"line_start":472,"line_end":472,"column_start":5,"column_end":22}},{"value":"/ 0   1   0   0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331764,"byte_end":331781,"line_start":473,"line_end":473,"column_start":5,"column_end":22}},{"value":"/ 0   0   1 -1/d","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331786,"byte_end":331804,"line_start":474,"line_end":474,"column_start":5,"column_end":23}},{"value":"/ 0   0   0   1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331809,"byte_end":331826,"line_start":475,"line_end":475,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":331831,"byte_end":331838,"line_start":476,"line_end":476,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332584,"byte_end":332598,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"post_transform","qualname":"<Transform3D<T, Src, Dst>>::post_transform","value":"fn <NewDst> (&self, mat: &Transform3D<T, Dst, NewDst>) -> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332359,"byte_end":332440,"line_start":499,"line_end":499,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332445,"byte_end":332485,"line_start":500,"line_end":500,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332490,"byte_end":332493,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to self * mat","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332498,"byte_end":332556,"line_start":502,"line_end":502,"column_start":5,"column_end":63}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332561,"byte_end":332572,"line_start":503,"line_end":503,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334594,"byte_end":334607,"line_start":534,"line_end":534,"column_start":12,"column_end":25},"name":"pre_transform","qualname":"<Transform3D<T, Src, Dst>>::pre_transform","value":"fn <NewSrc> (&self, mat: &Transform3D<T, NewSrc, Src>) -> Transform3D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies before self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334354,"byte_end":334435,"line_start":528,"line_end":528,"column_start":5,"column_end":86}},{"value":"/ applies before self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334440,"byte_end":334481,"line_start":529,"line_end":529,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334486,"byte_end":334489,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to mat * self","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334494,"byte_end":334552,"line_start":531,"line_end":531,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334557,"byte_end":334566,"line_start":532,"line_end":532,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334571,"byte_end":334582,"line_start":533,"line_end":533,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335039,"byte_end":335057,"line_start":553,"line_end":553,"column_start":12,"column_end":30},"name":"create_translation","qualname":"<Transform3D<T, Src, Dst>>::create_translation","value":"fn (x: T, y: T, z: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d translation transform:","sig":null,"attributes":[{"value":"/ Create a 3d translation transform:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334875,"byte_end":334913,"line_start":544,"line_end":544,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334918,"byte_end":334921,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334926,"byte_end":334937,"line_start":546,"line_end":546,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334942,"byte_end":334953,"line_start":547,"line_end":547,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334958,"byte_end":334969,"line_start":548,"line_end":548,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334974,"byte_end":334985,"line_start":549,"line_end":549,"column_start":5,"column_end":16}},{"value":"/ x y z 1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334990,"byte_end":335001,"line_start":550,"line_end":550,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335006,"byte_end":335013,"line_start":551,"line_end":551,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335018,"byte_end":335027,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335446,"byte_end":335459,"line_start":567,"line_end":567,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform3D<T, Src, Dst>>::pre_translate","value":"fn (&self, v: Vector3D<T, Src>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied before self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335338,"byte_end":335418,"line_start":565,"line_end":565,"column_start":5,"column_end":85}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335423,"byte_end":335434,"line_start":566,"line_end":566,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335759,"byte_end":335773,"line_start":576,"line_end":576,"column_start":12,"column_end":26},"name":"post_translate","qualname":"<Transform3D<T, Src, Dst>>::post_translate","value":"fn (&self, v: Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied after self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335652,"byte_end":335731,"line_start":574,"line_end":574,"column_start":5,"column_end":84}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":335736,"byte_end":335747,"line_start":575,"line_end":575,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2793},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":336303,"byte_end":336318,"line_start":591,"line_end":591,"column_start":12,"column_end":27},"name":"create_rotation","qualname":"<Transform3D<T, Src, Dst>>::create_rotation","value":"fn (x: T, y: T, z: T, theta: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d rotation transform from an angle / axis.\n The supplied axis must be normalized.\n","sig":null,"attributes":[{"value":"/ Create a 3d rotation transform from an angle / axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":336189,"byte_end":336245,"line_start":589,"line_end":589,"column_start":5,"column_end":61}},{"value":"/ The supplied axis must be normalized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":336250,"byte_end":336291,"line_start":590,"line_end":590,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337300,"byte_end":337311,"line_start":628,"line_end":628,"column_start":12,"column_end":23},"name":"post_rotate","qualname":"<Transform3D<T, Src, Dst>>::post_rotate","value":"fn (&self, x: T, y: T, z: T, theta: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied after self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337196,"byte_end":337272,"line_start":626,"line_end":626,"column_start":5,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337277,"byte_end":337288,"line_start":627,"line_end":627,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2795},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337555,"byte_end":337565,"line_start":634,"line_end":634,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform3D<T, Src, Dst>>::pre_rotate","value":"fn (&self, x: T, y: T, z: T, theta: Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied before self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337450,"byte_end":337527,"line_start":632,"line_end":632,"column_start":5,"column_end":82}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337532,"byte_end":337543,"line_start":633,"line_end":633,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337994,"byte_end":338006,"line_start":653,"line_end":653,"column_start":12,"column_end":24},"name":"create_scale","qualname":"<Transform3D<T, Src, Dst>>::create_scale","value":"fn (x: T, y: T, z: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d scale transform:","sig":null,"attributes":[{"value":"/ Create a 3d scale transform:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337836,"byte_end":337868,"line_start":644,"line_end":644,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337873,"byte_end":337876,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337881,"byte_end":337892,"line_start":646,"line_end":646,"column_start":5,"column_end":16}},{"value":"/ x 0 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337897,"byte_end":337908,"line_start":647,"line_end":647,"column_start":5,"column_end":16}},{"value":"/ 0 y 0 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337913,"byte_end":337924,"line_start":648,"line_end":648,"column_start":5,"column_end":16}},{"value":"/ 0 0 z 0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337929,"byte_end":337940,"line_start":649,"line_end":649,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337945,"byte_end":337956,"line_start":650,"line_end":650,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337961,"byte_end":337968,"line_start":651,"line_end":651,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337973,"byte_end":337982,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":338389,"byte_end":338398,"line_start":667,"line_end":667,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform3D<T, Src, Dst>>::pre_scale","value":"fn (&self, x: T, y: T, z: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied before self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":338287,"byte_end":338361,"line_start":665,"line_end":665,"column_start":5,"column_end":79}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":338366,"byte_end":338377,"line_start":666,"line_end":666,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2804},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":338922,"byte_end":338932,"line_start":681,"line_end":681,"column_start":12,"column_end":22},"name":"post_scale","qualname":"<Transform3D<T, Src, Dst>>::post_scale","value":"fn (&self, x: T, y: T, z: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied after self's transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":338821,"byte_end":338894,"line_start":679,"line_end":679,"column_start":5,"column_end":78}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":338899,"byte_end":338910,"line_start":680,"line_end":680,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2809},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339535,"byte_end":339564,"line_start":700,"line_end":700,"column_start":12,"column_end":41},"name":"transform_point2d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d_homogeneous","value":"fn (&self, p: Point2D<T, Src>) -> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 2d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 2d point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339262,"byte_end":339339,"line_start":694,"line_end":694,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339344,"byte_end":339347,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339352,"byte_end":339438,"line_start":696,"line_end":696,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339443,"byte_end":339446,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `p * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339451,"byte_end":339509,"line_start":698,"line_end":698,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339514,"byte_end":339523,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2810},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340248,"byte_end":340265,"line_start":718,"line_end":718,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d","value":"fn (&self, p: Point2D<T, Src>) -> Option<Point2D<T, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339932,"byte_end":340023,"line_start":711,"line_end":711,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340028,"byte_end":340052,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340057,"byte_end":340060,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340065,"byte_end":340151,"line_start":714,"line_end":714,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340156,"byte_end":340159,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `p * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340164,"byte_end":340222,"line_start":716,"line_end":716,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340227,"byte_end":340236,"line_start":717,"line_end":717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2811},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341054,"byte_end":341072,"line_start":740,"line_end":740,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector2d","value":"fn (&self, v: Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this matrix.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340799,"byte_end":340858,"line_start":734,"line_end":734,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340863,"byte_end":340866,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340871,"byte_end":340957,"line_start":736,"line_end":736,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340962,"byte_end":340965,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `v * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":340970,"byte_end":341028,"line_start":738,"line_end":738,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341033,"byte_end":341042,"line_start":739,"line_end":739,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2812},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341521,"byte_end":341550,"line_start":753,"line_end":753,"column_start":12,"column_end":41},"name":"transform_point3d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d_homogeneous","value":"fn (&self, p: Point3D<T, Src>) -> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 3d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 3d point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341248,"byte_end":341325,"line_start":747,"line_end":747,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341330,"byte_end":341333,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341338,"byte_end":341424,"line_start":749,"line_end":749,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341429,"byte_end":341432,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `p * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341437,"byte_end":341495,"line_start":751,"line_end":751,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341500,"byte_end":341509,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342302,"byte_end":342319,"line_start":771,"line_end":771,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d","value":"fn (&self, p: Point3D<T, Src>) -> Option<Point3D<T, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":341986,"byte_end":342077,"line_start":764,"line_end":764,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342082,"byte_end":342106,"line_start":765,"line_end":765,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342111,"byte_end":342114,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342119,"byte_end":342205,"line_start":767,"line_end":767,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342210,"byte_end":342213,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `p * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342218,"byte_end":342276,"line_start":769,"line_end":769,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342281,"byte_end":342290,"line_start":770,"line_end":770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2814},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342763,"byte_end":342781,"line_start":784,"line_end":784,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector3d","value":"fn (&self, v: Vector3D<T, Src>) -> Vector3D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this matrix.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342508,"byte_end":342567,"line_start":778,"line_end":778,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342572,"byte_end":342575,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342580,"byte_end":342666,"line_start":780,"line_end":780,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342671,"byte_end":342674,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to `v * self`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342679,"byte_end":342737,"line_start":782,"line_end":782,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":342742,"byte_end":342751,"line_start":783,"line_end":783,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2815},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":343237,"byte_end":343251,"line_start":794,"line_end":794,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Transform3D<T, Src, Dst>>::transform_rect","value":"fn (&self, rect: &Rect<T, Src>) -> Option<Rect<T, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":343053,"byte_end":343148,"line_start":792,"line_end":792,"column_start":5,"column_end":100}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":343153,"byte_end":343225,"line_start":793,"line_end":793,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":344008,"byte_end":344013,"line_start":821,"line_end":821,"column_start":12,"column_end":17},"name":"ortho","qualname":"<Transform3D<T, Src, Dst>>::ortho","value":"fn (left: T, right: T, bottom: T, top: T, near: T, far: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an orthogonal projection transform.\n","sig":null,"attributes":[{"value":"/ Create an orthogonal projection transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":343950,"byte_end":343996,"line_start":820,"line_end":820,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":344862,"byte_end":344881,"line_start":840,"line_end":840,"column_start":12,"column_end":31},"name":"is_backface_visible","qualname":"<Transform3D<T, Src, Dst>>::is_backface_visible","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether shapes on the XY plane with Z pointing towards the\n screen transformed by this matrix would be facing back.\n","sig":null,"attributes":[{"value":"/ Check whether shapes on the XY plane with Z pointing towards the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":344718,"byte_end":344786,"line_start":838,"line_end":838,"column_start":5,"column_end":73}},{"value":"/ screen transformed by this matrix would be facing back.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":344791,"byte_end":344850,"line_start":839,"line_end":839,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":345382,"byte_end":345395,"line_start":852,"line_end":852,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform3D<T, Src, Dst>>::is_invertible","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":345288,"byte_end":345356,"line_start":850,"line_end":850,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":345361,"byte_end":345370,"line_start":851,"line_end":851,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":345525,"byte_end":345532,"line_start":857,"line_end":857,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform3D<T, Src, Dst>>::inverse","value":"fn (&self) -> Option<Transform3D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":345467,"byte_end":345513,"line_start":856,"line_end":856,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":349333,"byte_end":349344,"line_start":937,"line_end":937,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform3D<T, Src, Dst>>::determinant","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute the determinant of the transform.\n","sig":null,"attributes":[{"value":"/ Compute the determinant of the transform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":349276,"byte_end":349321,"line_start":936,"line_end":936,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":350727,"byte_end":350732,"line_start":966,"line_end":966,"column_start":12,"column_end":17},"name":"mul_s","qualname":"<Transform3D<T, Src, Dst>>::mul_s","value":"fn (&self, x: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies all of the transform's component by a scalar and returns the result.\n","sig":null,"attributes":[{"value":"/ Multiplies all of the transform's component by a scalar and returns the result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":350616,"byte_end":350699,"line_start":964,"line_end":964,"column_start":5,"column_end":88}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":350704,"byte_end":350715,"line_start":965,"line_end":965,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":351160,"byte_end":351170,"line_start":976,"line_end":976,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Transform3D<T, Src, Dst>>::from_scale","value":"fn (scale: Scale<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to create a scale transform from a `Scale`.\n","sig":null,"attributes":[{"value":"/ Convenience function to create a scale transform from a `Scale`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":351080,"byte_end":351148,"line_start":975,"line_end":975,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":351487,"byte_end":351500,"line_start":986,"line_end":986,"column_start":12,"column_end":25},"name":"project_to_2d","qualname":"<Transform3D<T, Src, Dst>>::project_to_2d","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a projection of this transform in 2d space.\n","sig":null,"attributes":[{"value":"/ Returns a projection of this transform in 2d space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":351420,"byte_end":351475,"line_start":985,"line_end":985,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":352997,"byte_end":353001,"line_start":1025,"line_end":1025,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform3D<T, Src, Dst>>::cast","value":"fn <NewT> (&self) -> Transform3D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":352897,"byte_end":352971,"line_start":1023,"line_end":1023,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":352976,"byte_end":352985,"line_start":1024,"line_end":1024,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2838},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":353196,"byte_end":353204,"line_start":1030,"line_end":1030,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform3D<T, Src, Dst>>::try_cast","value":"fn <NewT> (&self) -> Option<Transform3D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":353101,"byte_end":353184,"line_start":1029,"line_end":1029,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2844},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354739,"byte_end":354748,"line_start":1061,"line_end":1061,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform3D<T, Src, Dst>>::approx_eq","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354413,"byte_end":354494,"line_start":1054,"line_end":1054,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354499,"byte_end":354529,"line_start":1055,"line_end":1055,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354534,"byte_end":354537,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354542,"byte_end":354622,"line_start":1057,"line_end":1057,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354627,"byte_end":354630,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354635,"byte_end":354713,"line_start":1059,"line_end":1059,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354718,"byte_end":354727,"line_start":1060,"line_end":1060,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":355184,"byte_end":355197,"line_start":1072,"line_end":1072,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform3D<T, Src, Dst>>::approx_eq_eps","value":"fn (&self, other: &Self, eps: &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354847,"byte_end":354928,"line_start":1065,"line_end":1065,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354933,"byte_end":354962,"line_start":1066,"line_end":1066,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354967,"byte_end":354970,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354975,"byte_end":355059,"line_start":1068,"line_end":1068,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":355064,"byte_end":355067,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":355072,"byte_end":355158,"line_start":1070,"line_end":1070,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":355163,"byte_end":355172,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2893},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370368,"byte_end":370381,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"Translation2D","qualname":"::translation::Translation2D","value":"Translation2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":2897},{"krate":0,"index":2898},{"krate":0,"index":2899}],"decl_id":null,"docs":" A 2d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 2d transformation from a space to another that can only express translations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369467,"byte_end":369550,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369551,"byte_end":369554,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector2D is the ability to cast","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369555,"byte_end":369627,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369628,"byte_end":369674,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369675,"byte_end":369678,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369679,"byte_end":369691,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369692,"byte_end":369695,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369696,"byte_end":369703,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use euclid::{Translation2D, Point2D, point2};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369704,"byte_end":369753,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ struct ParentSpace;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369754,"byte_end":369777,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ struct ChildSpace;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369778,"byte_end":369800,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ type ScrollOffset = Translation2D<i32, ParentSpace, ChildSpace>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369801,"byte_end":369869,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ type ParentPoint = Point2D<i32, ParentSpace>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369870,"byte_end":369919,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/ type ChildPoint = Point2D<i32, ChildSpace>;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369920,"byte_end":369967,"line_start":35,"line_end":35,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369968,"byte_end":369971,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let scrolling = ScrollOffset::new(0, 100);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":369972,"byte_end":370018,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ let p1: ParentPoint = point2(0, 0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370019,"byte_end":370058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ let p2: ChildPoint = scrolling.transform_point(p1);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370059,"byte_end":370114,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370115,"byte_end":370122,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370123,"byte_end":370126,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370127,"byte_end":370137,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2897},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370405,"byte_end":370406,"line_start":52,"line_end":52,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation2D::x","value":"T","parent":{"krate":0,"index":2893},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370419,"byte_end":370420,"line_start":53,"line_end":53,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation2D::y","value":"T","parent":{"krate":0,"index":2893},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370452,"byte_end":370457,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2893},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371297,"byte_end":371300,"line_start":93,"line_end":93,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation2D<T, Src, Dst>>::new","value":"fn (x: T, y: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371270,"byte_end":371279,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2929},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371517,"byte_end":371525,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation2D<T, Src, Dst>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (both `x` and `y` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (both `x` and `y` is `zero()`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371430,"byte_end":371491,"line_start":101,"line_end":101,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371496,"byte_end":371505,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372073,"byte_end":372084,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation2D<T, Src, Dst>>::is_identity","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (both x and y is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (both x and y is `zero()`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371620,"byte_end":371685,"line_start":110,"line_end":110,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371690,"byte_end":371693,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371698,"byte_end":371709,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation2D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371714,"byte_end":371753,"line_start":113,"line_end":113,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371758,"byte_end":371761,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation2D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371766,"byte_end":371835,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation2D::new(0, 0).is_identity(), true);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371840,"byte_end":371901,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(Translation2D::new(1, 0).is_identity(), false);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371906,"byte_end":371968,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(Translation2D::new(0, 1).is_identity(), false);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371973,"byte_end":372035,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372040,"byte_end":372047,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372052,"byte_end":372061,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2931},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372277,"byte_end":372291,"line_start":131,"line_end":131,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation2D<T, Src, Dst>>::transform_size","value":"fn (&self, s: Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372221,"byte_end":372251,"line_start":129,"line_end":129,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372256,"byte_end":372265,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372495,"byte_end":372504,"line_start":139,"line_end":139,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation2D<T, Src, Dst>>::to_vector","value":"fn (&self) -> Vector2D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 2D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 2D vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372443,"byte_end":372469,"line_start":137,"line_end":137,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372474,"byte_end":372483,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372636,"byte_end":372644,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation2D<T, Src, Dst>>::to_array","value":"fn (&self) -> [T; 2]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372574,"byte_end":372610,"line_start":143,"line_end":143,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372615,"byte_end":372624,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372761,"byte_end":372769,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation2D<T, Src, Dst>>::to_tuple","value":"fn (&self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372700,"byte_end":372735,"line_start":149,"line_end":149,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372740,"byte_end":372749,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372905,"byte_end":372915,"line_start":157,"line_end":157,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation2D<T, Src, Dst>>::to_untyped","value":"fn (&self) -> Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372825,"byte_end":372879,"line_start":155,"line_end":155,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372884,"byte_end":372893,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373156,"byte_end":373168,"line_start":167,"line_end":167,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation2D<T, Src, Dst>>::from_untyped","value":"fn (t: &Translation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373094,"byte_end":373130,"line_start":165,"line_end":165,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373135,"byte_end":373144,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373428,"byte_end":373440,"line_start":177,"line_end":177,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation2D<T, Src, Dst>>::to_transform","value":"fn (&self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373344,"byte_end":373402,"line_start":175,"line_end":175,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373407,"byte_end":373416,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2943},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373615,"byte_end":373630,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Translation2D<T, Src, Dst>>::transform_point","value":"fn (&self, p: Point2D<T, Src>) -> Point2D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373549,"byte_end":373589,"line_start":184,"line_end":184,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373594,"byte_end":373603,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373841,"byte_end":373855,"line_start":195,"line_end":195,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation2D<T, Src, Dst>>::transform_rect","value":"fn (&self, r: &Rect<T, Src>) -> Rect<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373771,"byte_end":373815,"line_start":193,"line_end":193,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":373820,"byte_end":373829,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2945},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374151,"byte_end":374164,"line_start":207,"line_end":207,"column_start":12,"column_end":25},"name":"transform_box","qualname":"<Translation2D<T, Src, Dst>>::transform_box","value":"fn (&self, r: &Box2D<T, Src>) -> Box2D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374084,"byte_end":374125,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374130,"byte_end":374139,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374441,"byte_end":374448,"line_start":219,"line_end":219,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation2D<T, Src, Dst>>::inverse","value":"fn (&self) -> Translation2D<T::Output, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374377,"byte_end":374415,"line_start":217,"line_end":217,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374420,"byte_end":374429,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376931,"byte_end":376944,"line_start":304,"line_end":304,"column_start":12,"column_end":25},"name":"Translation3D","qualname":"::translation::Translation3D","value":"Translation3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":3005},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008}],"decl_id":null,"docs":" A 3d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 3d transformation from a space to another that can only express translations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376701,"byte_end":376784,"line_start":299,"line_end":299,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376785,"byte_end":376788,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector3D is the ability to cast","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376789,"byte_end":376861,"line_start":301,"line_end":301,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376862,"byte_end":376908,"line_start":302,"line_end":302,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376909,"byte_end":376919,"line_start":303,"line_end":303,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3005},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376968,"byte_end":376969,"line_start":305,"line_end":305,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation3D::x","value":"T","parent":{"krate":0,"index":3001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376982,"byte_end":376983,"line_start":306,"line_end":306,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation3D::y","value":"T","parent":{"krate":0,"index":3001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3007},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376996,"byte_end":376997,"line_start":307,"line_end":307,"column_start":9,"column_end":10},"name":"z","qualname":"::translation::Translation3D::z","value":"T","parent":{"krate":0,"index":3001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3008},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":377029,"byte_end":377034,"line_start":309,"line_end":309,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3001},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378715,"byte_end":378718,"line_start":381,"line_end":381,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation3D<T, Src, Dst>>::new","value":"fn (x: T, y: T, z: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378688,"byte_end":378697,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378956,"byte_end":378964,"line_start":392,"line_end":392,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation3D<T, Src, Dst>>::identity","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (`x`, `y` and `z` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378869,"byte_end":378930,"line_start":390,"line_end":390,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378935,"byte_end":378944,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379615,"byte_end":379626,"line_start":411,"line_end":411,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation3D<T, Src, Dst>>::is_identity","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (`x`, `y` and `z` is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379079,"byte_end":379148,"line_start":399,"line_end":399,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379153,"byte_end":379156,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379161,"byte_end":379172,"line_start":401,"line_end":401,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation3D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379177,"byte_end":379216,"line_start":402,"line_end":402,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379221,"byte_end":379224,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation3D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379229,"byte_end":379298,"line_start":404,"line_end":404,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 0).is_identity(), true);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379303,"byte_end":379367,"line_start":405,"line_end":405,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(Translation3D::new(1, 0, 0).is_identity(), false);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379372,"byte_end":379437,"line_start":406,"line_end":406,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 1, 0).is_identity(), false);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379442,"byte_end":379507,"line_start":407,"line_end":407,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 1).is_identity(), false);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379512,"byte_end":379577,"line_start":408,"line_end":408,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379582,"byte_end":379589,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379594,"byte_end":379603,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379835,"byte_end":379849,"line_start":421,"line_end":421,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation3D<T, Src, Dst>>::transform_size","value":"fn (self, s: Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379779,"byte_end":379809,"line_start":419,"line_end":419,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379814,"byte_end":379823,"line_start":420,"line_end":420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3045},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380052,"byte_end":380061,"line_start":429,"line_end":429,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation3D<T, Src, Dst>>::to_vector","value":"fn (&self) -> Vector3D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 3D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 3D vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380000,"byte_end":380026,"line_start":427,"line_end":427,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380031,"byte_end":380040,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3046},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380204,"byte_end":380212,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation3D<T, Src, Dst>>::to_array","value":"fn (&self) -> [T; 3]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380139,"byte_end":380178,"line_start":433,"line_end":433,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380183,"byte_end":380192,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3048},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380340,"byte_end":380348,"line_start":441,"line_end":441,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation3D<T, Src, Dst>>::to_tuple","value":"fn (&self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380276,"byte_end":380314,"line_start":439,"line_end":439,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380319,"byte_end":380328,"line_start":440,"line_end":440,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3049},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380495,"byte_end":380505,"line_start":447,"line_end":447,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation3D<T, Src, Dst>>::to_untyped","value":"fn (&self) -> Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380415,"byte_end":380469,"line_start":445,"line_end":445,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380474,"byte_end":380483,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380769,"byte_end":380781,"line_start":458,"line_end":458,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation3D<T, Src, Dst>>::from_untyped","value":"fn (t: &Translation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380707,"byte_end":380743,"line_start":456,"line_end":456,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380748,"byte_end":380757,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3051},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381061,"byte_end":381073,"line_start":469,"line_end":469,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation3D<T, Src, Dst>>::to_transform","value":"fn (&self) -> Transform3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":380977,"byte_end":381035,"line_start":467,"line_end":467,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381040,"byte_end":381049,"line_start":468,"line_end":468,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381248,"byte_end":381265,"line_start":478,"line_end":478,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Translation3D<T, Src, Dst>>::transform_point3d","value":"fn (&self, p: &Point3D<T, Src>) -> Point3D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381182,"byte_end":381222,"line_start":476,"line_end":476,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381227,"byte_end":381236,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3053},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381487,"byte_end":381504,"line_start":487,"line_end":487,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Translation3D<T, Src, Dst>>::transform_point2d","value":"fn (&self, p: &Point2D<T, Src>) -> Point2D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381421,"byte_end":381461,"line_start":485,"line_end":485,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381466,"byte_end":381475,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381713,"byte_end":381728,"line_start":496,"line_end":496,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Translation3D<T, Src, Dst>>::transform_box2d","value":"fn (&self, b: &Box2D<T, Src>) -> Box2D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381646,"byte_end":381687,"line_start":494,"line_end":494,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381692,"byte_end":381701,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3055},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382014,"byte_end":382029,"line_start":508,"line_end":508,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Translation3D<T, Src, Dst>>::transform_box3d","value":"fn (&self, b: &Box3D<T, Src>) -> Box3D<T::Output, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a 3D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 3D box and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381947,"byte_end":381988,"line_start":506,"line_end":506,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":381993,"byte_end":382002,"line_start":507,"line_end":507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382318,"byte_end":382332,"line_start":520,"line_end":520,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation3D<T, Src, Dst>>::transform_rect","value":"fn (&self, r: &Rect<T, Src>) -> Rect<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382248,"byte_end":382292,"line_start":518,"line_end":518,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382297,"byte_end":382306,"line_start":519,"line_end":519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3057},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382620,"byte_end":382627,"line_start":532,"line_end":532,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation3D<T, Src, Dst>>::inverse","value":"fn (&self) -> Translation3D<T::Output, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382556,"byte_end":382594,"line_start":530,"line_end":530,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382599,"byte_end":382608,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":392883,"byte_end":392887,"line_start":11,"line_end":11,"column_start":11,"column_end":15},"name":"Trig","qualname":"::trig::Trig","value":"Trig","parent":null,"children":[{"krate":0,"index":3114},{"krate":0,"index":3115},{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3119}],"decl_id":null,"docs":" Trait for basic trigonometry functions, so they can be used on generic numeric types\n","sig":null,"attributes":[{"value":"/ Trait for basic trigonometry functions, so they can be used on generic numeric types","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":392784,"byte_end":392872,"line_start":10,"line_end":10,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3114},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":392897,"byte_end":392900,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"sin","qualname":"::trig::Trig::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":392923,"byte_end":392926,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"cos","qualname":"::trig::Trig::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3116},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":392949,"byte_end":392952,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"tan","qualname":"::trig::Trig::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3117},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":392975,"byte_end":392985,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"fast_atan2","qualname":"::trig::Trig::fast_atan2","value":"fn (y: Self, x: Self) -> Self","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":393020,"byte_end":393038,"line_start":16,"line_end":16,"column_start":8,"column_end":26},"name":"degrees_to_radians","qualname":"::trig::Trig::degrees_to_radians","value":"fn (deg: Self) -> Self","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3119},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/trig.rs","byte_start":393066,"byte_end":393084,"line_start":17,"line_end":17,"column_start":8,"column_end":26},"name":"radians_to_degrees","qualname":"::trig::Trig::radians_to_degrees","value":"fn (rad: Self) -> Self","parent":{"krate":0,"index":3113},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396227,"byte_end":396235,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Vector2D","qualname":"::vector::Vector2D","value":"Vector2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169}],"decl_id":null,"docs":" A 2d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Vector tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396169,"byte_end":396204,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396205,"byte_end":396215,"line_start":34,"line_end":34,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396308,"byte_end":396309,"line_start":37,"line_end":37,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector2D::x","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396248,"byte_end":396299,"line_start":36,"line_end":36,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396376,"byte_end":396377,"line_start":39,"line_end":39,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector2D::y","value":"T","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396318,"byte_end":396367,"line_start":38,"line_end":38,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396409,"byte_end":396414,"line_start":41,"line_end":41,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":3164},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3208},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398698,"byte_end":398702,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector2D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398624,"byte_end":398672,"line_start":137,"line_end":137,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398677,"byte_end":398686,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3209},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398885,"byte_end":398888,"line_start":148,"line_end":148,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector2D<T, U>>::new","value":"fn (x: T, y: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398807,"byte_end":398853,"line_start":146,"line_end":146,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398858,"byte_end":398867,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3210},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399064,"byte_end":399085,"line_start":157,"line_end":157,"column_start":12,"column_end":33},"name":"from_angle_and_length","qualname":"<Vector2D<T, U>>::from_angle_and_length","value":"fn (angle: Angle<T>, length: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking angle and length\n","sig":null,"attributes":[{"value":"/ Constructor taking angle and length","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399013,"byte_end":399052,"line_start":156,"line_end":156,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3211},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399356,"byte_end":399368,"line_start":166,"line_end":166,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector2D<T, U>>::from_lengths","value":"fn (x: Length<T, U>, y: Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399264,"byte_end":399330,"line_start":164,"line_end":164,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399335,"byte_end":399344,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3212},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399510,"byte_end":399522,"line_start":172,"line_end":172,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector2D<T, U>>::from_untyped","value":"fn (p: Vector2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unit-less value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unit-less value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399447,"byte_end":399484,"line_start":170,"line_end":170,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399489,"byte_end":399498,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400166,"byte_end":400169,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector2D<T, U>>::abs","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399596,"byte_end":399659,"line_start":176,"line_end":176,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399664,"byte_end":399667,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399672,"byte_end":399685,"line_start":178,"line_end":178,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399690,"byte_end":399693,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399698,"byte_end":399709,"line_start":180,"line_end":180,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399714,"byte_end":399740,"line_start":181,"line_end":181,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399745,"byte_end":399768,"line_start":182,"line_end":182,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399773,"byte_end":399786,"line_start":183,"line_end":183,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399791,"byte_end":399794,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, U>(-1, 2).abs(), vec2(1, 2));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399799,"byte_end":399853,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399858,"byte_end":399861,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ let vec = vec2::<_, U>(f32::NAN, -f32::MAX).abs();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399866,"byte_end":399920,"line_start":187,"line_end":187,"column_start":5,"column_end":59}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399925,"byte_end":399953,"line_start":188,"line_end":188,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, f32::MAX);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399958,"byte_end":399990,"line_start":189,"line_end":189,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":399995,"byte_end":400002,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400007,"byte_end":400010,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400015,"byte_end":400027,"line_start":192,"line_end":192,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400032,"byte_end":400035,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400040,"byte_end":400119,"line_start":194,"line_end":194,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400124,"byte_end":400154,"line_start":195,"line_end":195,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3214},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400314,"byte_end":400317,"line_start":205,"line_end":205,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector2D<T, U>>::dot","value":"fn (self, other: Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400272,"byte_end":400288,"line_start":203,"line_end":203,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400293,"byte_end":400302,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3215},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400571,"byte_end":400576,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector2D<T, U>>::cross","value":"fn (self, other: Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].\n","sig":null,"attributes":[{"value":"/ Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400459,"byte_end":400545,"line_start":212,"line_end":212,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400550,"byte_end":400559,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3219},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400846,"byte_end":400852,"line_start":225,"line_end":225,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vector2D<T, U>>::extend","value":"fn (&self, z: T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d vector from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d vector from this one, using the specified z value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400754,"byte_end":400820,"line_start":223,"line_end":223,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400825,"byte_end":400834,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3220},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401053,"byte_end":401061,"line_start":233,"line_end":233,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector2D<T, U>>::to_point","value":"fn (&self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400929,"byte_end":400963,"line_start":229,"line_end":229,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400968,"byte_end":400971,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400976,"byte_end":401027,"line_start":231,"line_end":231,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401032,"byte_end":401041,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401248,"byte_end":401250,"line_start":243,"line_end":243,"column_start":12,"column_end":14},"name":"yx","qualname":"<Vector2D<T, U>>::yx","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.\n","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401205,"byte_end":401222,"line_start":241,"line_end":241,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401227,"byte_end":401236,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401367,"byte_end":401374,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"to_size","qualname":"<Vector2D<T, U>>::to_size","value":"fn (&self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a size.\n","sig":null,"attributes":[{"value":"/ Cast this vector into a size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401308,"byte_end":401341,"line_start":247,"line_end":247,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401346,"byte_end":401355,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401521,"byte_end":401531,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector2D<T, U>>::to_untyped","value":"fn (&self) -> Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401441,"byte_end":401495,"line_start":253,"line_end":253,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401500,"byte_end":401509,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401653,"byte_end":401662,"line_start":261,"line_end":261,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector2D<T, U>>::cast_unit","value":"fn <V> (&self) -> Vector2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401609,"byte_end":401627,"line_start":259,"line_end":259,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401632,"byte_end":401641,"line_start":260,"line_end":260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401795,"byte_end":401803,"line_start":267,"line_end":267,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector2D<T, U>>::to_array","value":"fn (&self) -> [T; 2]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401733,"byte_end":401769,"line_start":265,"line_end":265,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401774,"byte_end":401783,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3228},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401920,"byte_end":401928,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector2D<T, U>>::to_tuple","value":"fn (&self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401859,"byte_end":401894,"line_start":271,"line_end":271,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401899,"byte_end":401908,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402081,"byte_end":402086,"line_start":279,"line_end":279,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Vector2D<T, U>>::to_3d","value":"fn (&self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d vector with `z` coordinate equals to `T::zero()`.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d vector with `z` coordinate equals to `T::zero()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":401984,"byte_end":402055,"line_start":277,"line_end":277,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402060,"byte_end":402069,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402555,"byte_end":402560,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector2D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402199,"byte_end":402254,"line_start":286,"line_end":286,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402259,"byte_end":402262,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402267,"byte_end":402342,"line_start":288,"line_end":288,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402347,"byte_end":402350,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402355,"byte_end":402366,"line_start":290,"line_end":290,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402371,"byte_end":402394,"line_start":291,"line_end":291,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402399,"byte_end":402413,"line_start":292,"line_end":292,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402418,"byte_end":402421,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).round(), vec2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402426,"byte_end":402501,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402506,"byte_end":402513,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402518,"byte_end":402527,"line_start":296,"line_end":296,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402532,"byte_end":402543,"line_start":297,"line_end":297,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403056,"byte_end":403060,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector2D<T, U>>::ceil","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402666,"byte_end":402757,"line_start":305,"line_end":305,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402762,"byte_end":402765,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402770,"byte_end":402845,"line_start":307,"line_end":307,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402850,"byte_end":402853,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402858,"byte_end":402869,"line_start":309,"line_end":309,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402874,"byte_end":402897,"line_start":310,"line_end":310,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402902,"byte_end":402916,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402921,"byte_end":402924,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).ceil(), vec2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":402929,"byte_end":403002,"line_start":313,"line_end":313,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403007,"byte_end":403014,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403019,"byte_end":403028,"line_start":315,"line_end":315,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403033,"byte_end":403044,"line_start":316,"line_end":316,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403553,"byte_end":403558,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector2D<T, U>>::floor","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403163,"byte_end":403251,"line_start":324,"line_end":324,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403256,"byte_end":403259,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403264,"byte_end":403339,"line_start":326,"line_end":326,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403344,"byte_end":403347,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403352,"byte_end":403363,"line_start":328,"line_end":328,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403368,"byte_end":403391,"line_start":329,"line_end":329,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403396,"byte_end":403410,"line_start":330,"line_end":330,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403415,"byte_end":403418,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).floor(), vec2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403423,"byte_end":403499,"line_start":332,"line_end":332,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403504,"byte_end":403511,"line_start":333,"line_end":333,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403516,"byte_end":403525,"line_start":334,"line_end":334,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403530,"byte_end":403541,"line_start":335,"line_end":335,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403899,"byte_end":403916,"line_start":348,"line_end":348,"column_start":12,"column_end":29},"name":"angle_from_x_axis","qualname":"<Vector2D<T, U>>::angle_from_x_axis","value":"fn (&self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and the x axis.\n Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`\n is `+y` axis.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and the x axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403664,"byte_end":403728,"line_start":343,"line_end":343,"column_start":5,"column_end":69}},{"value":"/ Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403733,"byte_end":403807,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ is `+y` axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403812,"byte_end":403829,"line_start":345,"line_end":345,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403834,"byte_end":403837,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":403842,"byte_end":403887,"line_start":347,"line_end":347,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404118,"byte_end":404130,"line_start":357,"line_end":357,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector2D<T, U>>::to_transform","value":"fn (&self) -> Transform2D<T, U, U>","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units.\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404037,"byte_end":404092,"line_start":355,"line_end":355,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404097,"byte_end":404106,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404425,"byte_end":404438,"line_start":371,"line_end":371,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector2D<T, U>>::square_length","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404359,"byte_end":404399,"line_start":369,"line_end":369,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404404,"byte_end":404413,"line_start":370,"line_end":370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3239},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404659,"byte_end":404678,"line_start":379,"line_end":379,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector2D<T, U>>::project_onto_vector","value":"fn (&self, onto: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404506,"byte_end":404557,"line_start":375,"line_end":375,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404562,"byte_end":404565,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404570,"byte_end":404633,"line_start":377,"line_end":377,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404638,"byte_end":404647,"line_start":378,"line_end":378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404978,"byte_end":404986,"line_start":389,"line_end":389,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector2D<T, U>>::angle_to","value":"fn (&self, other: Self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and another vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404840,"byte_end":404908,"line_start":386,"line_end":386,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404913,"byte_end":404916,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404921,"byte_end":404966,"line_start":388,"line_end":388,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405251,"byte_end":405257,"line_start":400,"line_end":400,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector2D<T, U>>::length","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405195,"byte_end":405225,"line_start":398,"line_end":398,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405230,"byte_end":405239,"line_start":399,"line_end":399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3245},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405408,"byte_end":405417,"line_start":407,"line_end":407,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector2D<T, U>>::normalize","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405319,"byte_end":405366,"line_start":404,"line_end":404,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405371,"byte_end":405380,"line_start":405,"line_end":405,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405385,"byte_end":405396,"line_start":406,"line_end":406,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405707,"byte_end":405720,"line_start":417,"line_end":417,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector2D<T, U>>::try_normalize","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405474,"byte_end":405521,"line_start":411,"line_end":411,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405526,"byte_end":405529,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405534,"byte_end":405627,"line_start":413,"line_end":413,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405632,"byte_end":405665,"line_start":414,"line_end":414,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405670,"byte_end":405679,"line_start":415,"line_end":415,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405684,"byte_end":405695,"line_start":416,"line_end":416,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406024,"byte_end":406040,"line_start":429,"line_end":429,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector2D<T, U>>::robust_normalize","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405892,"byte_end":405982,"line_start":426,"line_end":426,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405987,"byte_end":405996,"line_start":427,"line_end":427,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406001,"byte_end":406012,"line_start":428,"line_end":428,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406352,"byte_end":406367,"line_start":441,"line_end":441,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector2D<T, U>>::with_max_length","value":"fn (&self, max_length: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406276,"byte_end":406326,"line_start":439,"line_end":439,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406331,"byte_end":406340,"line_start":440,"line_end":440,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406684,"byte_end":406699,"line_start":452,"line_end":452,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector2D<T, U>>::with_min_length","value":"fn (&self, min_length: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406605,"byte_end":406658,"line_start":450,"line_end":450,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406663,"byte_end":406672,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3250},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407027,"byte_end":407039,"line_start":463,"line_end":463,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector2D<T, U>>::clamp_length","value":"fn (&self, min: T, max: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":406937,"byte_end":407001,"line_start":461,"line_end":461,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407006,"byte_end":407015,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3254},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407928,"byte_end":407932,"line_start":491,"line_end":491,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector2D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407283,"byte_end":407362,"line_start":473,"line_end":473,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407367,"byte_end":407370,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407375,"byte_end":407388,"line_start":475,"line_end":475,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407393,"byte_end":407396,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407401,"byte_end":407412,"line_start":477,"line_end":477,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec2;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407417,"byte_end":407438,"line_start":478,"line_end":478,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector2D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407443,"byte_end":407477,"line_start":479,"line_end":479,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407482,"byte_end":407485,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ let from: Vector2D<_> = vec2(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407490,"byte_end":407534,"line_start":481,"line_end":481,"column_start":5,"column_end":49}},{"value":"/ let to:  Vector2D<_> = vec2(8.0, -4.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407539,"byte_end":407582,"line_start":482,"line_end":482,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407587,"byte_end":407590,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec2(-8.0,  24.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407595,"byte_end":407650,"line_start":484,"line_end":484,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec2( 0.0,  10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407655,"byte_end":407710,"line_start":485,"line_end":485,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec2( 4.0,   3.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407715,"byte_end":407770,"line_start":486,"line_end":486,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec2( 8.0,  -4.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407775,"byte_end":407830,"line_start":487,"line_end":487,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec2(16.0, -18.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407835,"byte_end":407890,"line_start":488,"line_end":488,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407895,"byte_end":407902,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407907,"byte_end":407916,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408151,"byte_end":408158,"line_start":498,"line_end":498,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector2D<T, U>>::reflect","value":"fn (&self, normal: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408050,"byte_end":408125,"line_start":496,"line_end":496,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408130,"byte_end":408139,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408442,"byte_end":408445,"line_start":507,"line_end":507,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector2D<T, U>>::min","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408330,"byte_end":408416,"line_start":505,"line_end":505,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408421,"byte_end":408430,"line_start":506,"line_end":506,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408655,"byte_end":408658,"line_start":513,"line_end":513,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector2D<T, U>>::max","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408543,"byte_end":408629,"line_start":511,"line_end":511,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408634,"byte_end":408643,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408954,"byte_end":408959,"line_start":522,"line_end":522,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector2D<T, U>>::clamp","value":"fn (&self, start: Self, end: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408756,"byte_end":408830,"line_start":517,"line_end":517,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408835,"byte_end":408871,"line_start":518,"line_end":518,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408876,"byte_end":408879,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408884,"byte_end":408928,"line_start":520,"line_end":520,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408933,"byte_end":408942,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409180,"byte_end":409192,"line_start":531,"line_end":531,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector2D<T, U>>::greater_than","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409076,"byte_end":409154,"line_start":529,"line_end":529,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409159,"byte_end":409168,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3263},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409443,"byte_end":409453,"line_start":540,"line_end":540,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector2D<T, U>>::lower_than","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409341,"byte_end":409417,"line_start":538,"line_end":538,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409422,"byte_end":409431,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3267},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409740,"byte_end":409745,"line_start":551,"line_end":551,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector2D<T, U>>::equal","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409643,"byte_end":409714,"line_start":549,"line_end":549,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409719,"byte_end":409728,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409997,"byte_end":410006,"line_start":560,"line_end":560,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector2D<T, U>>::not_equal","value":"fn (&self, other: Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409896,"byte_end":409971,"line_start":558,"line_end":558,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409976,"byte_end":409985,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3272},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410584,"byte_end":410588,"line_start":575,"line_end":575,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector2D<T, U>>::cast","value":"fn <NewT> (&self) -> Vector2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410203,"byte_end":410277,"line_start":569,"line_end":569,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410282,"byte_end":410285,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410290,"byte_end":410378,"line_start":571,"line_end":571,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410383,"byte_end":410471,"line_start":572,"line_end":572,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410476,"byte_end":410558,"line_start":573,"line_end":573,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410563,"byte_end":410572,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3274},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411054,"byte_end":411062,"line_start":584,"line_end":584,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector2D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Vector2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410678,"byte_end":410761,"line_start":579,"line_end":579,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410766,"byte_end":410769,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410774,"byte_end":410862,"line_start":581,"line_end":581,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410867,"byte_end":410955,"line_start":582,"line_end":582,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410960,"byte_end":411042,"line_start":583,"line_end":583,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411388,"byte_end":411394,"line_start":595,"line_end":595,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector2D<T, U>>::to_f32","value":"fn (&self) -> Vector2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411332,"byte_end":411362,"line_start":593,"line_end":593,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411367,"byte_end":411376,"line_start":594,"line_end":594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3277},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411511,"byte_end":411517,"line_start":601,"line_end":601,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector2D<T, U>>::to_f64","value":"fn (&self) -> Vector2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411455,"byte_end":411485,"line_start":599,"line_end":599,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411490,"byte_end":411499,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3278},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411875,"byte_end":411883,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector2D<T, U>>::to_usize","value":"fn (&self) -> Vector2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411578,"byte_end":411638,"line_start":605,"line_end":605,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411643,"byte_end":411646,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411651,"byte_end":411729,"line_start":607,"line_end":607,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411734,"byte_end":411808,"line_start":608,"line_end":608,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411813,"byte_end":411849,"line_start":609,"line_end":609,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411854,"byte_end":411863,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412241,"byte_end":412247,"line_start":621,"line_end":621,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector2D<T, U>>::to_u32","value":"fn (&self) -> Vector2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":411946,"byte_end":412004,"line_start":615,"line_end":615,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412009,"byte_end":412012,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412017,"byte_end":412095,"line_start":617,"line_end":617,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412100,"byte_end":412174,"line_start":618,"line_end":618,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412179,"byte_end":412215,"line_start":619,"line_end":619,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412220,"byte_end":412229,"line_start":620,"line_end":620,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412601,"byte_end":412607,"line_start":631,"line_end":631,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector2D<T, U>>::to_i32","value":"fn (&self) -> Vector2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412308,"byte_end":412364,"line_start":625,"line_end":625,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412369,"byte_end":412372,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412377,"byte_end":412455,"line_start":627,"line_end":627,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412460,"byte_end":412534,"line_start":628,"line_end":628,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412539,"byte_end":412575,"line_start":629,"line_end":629,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412580,"byte_end":412589,"line_start":630,"line_end":630,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412961,"byte_end":412967,"line_start":641,"line_end":641,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector2D<T, U>>::to_i64","value":"fn (&self) -> Vector2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412668,"byte_end":412724,"line_start":635,"line_end":635,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412729,"byte_end":412732,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412737,"byte_end":412815,"line_start":637,"line_end":637,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412820,"byte_end":412894,"line_start":638,"line_end":638,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412899,"byte_end":412935,"line_start":639,"line_end":639,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":412940,"byte_end":412949,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417183,"byte_end":417191,"line_start":821,"line_end":821,"column_start":12,"column_end":20},"name":"Vector3D","qualname":"::vector::Vector3D","value":"Vector3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":3387},{"krate":0,"index":3388},{"krate":0,"index":3389},{"krate":0,"index":3390}],"decl_id":null,"docs":" A 3d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Vector tagged with a unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417125,"byte_end":417160,"line_start":819,"line_end":819,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417161,"byte_end":417171,"line_start":820,"line_end":820,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3387},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417264,"byte_end":417265,"line_start":823,"line_end":823,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector3D::x","value":"T","parent":{"krate":0,"index":3384},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417204,"byte_end":417255,"line_start":822,"line_end":822,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3388},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417332,"byte_end":417333,"line_start":825,"line_end":825,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector3D::y","value":"T","parent":{"krate":0,"index":3384},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417274,"byte_end":417323,"line_start":824,"line_end":824,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3389},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417397,"byte_end":417398,"line_start":827,"line_end":827,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::Vector3D::z","value":"T","parent":{"krate":0,"index":3384},"children":[],"decl_id":null,"docs":" The `z` (traditionally, depth) coordinate.\n","sig":null,"attributes":[{"value":"/ The `z` (traditionally, depth) coordinate.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417342,"byte_end":417388,"line_start":826,"line_end":826,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":3390},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417430,"byte_end":417435,"line_start":829,"line_end":829,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":3384},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3429},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419964,"byte_end":419968,"line_start":934,"line_end":934,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector3D<T, U>>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419890,"byte_end":419938,"line_start":932,"line_end":932,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419943,"byte_end":419952,"line_start":933,"line_end":933,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420156,"byte_end":420159,"line_start":943,"line_end":943,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector3D<T, U>>::new","value":"fn (x: T, y: T, z: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420078,"byte_end":420124,"line_start":941,"line_end":941,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420129,"byte_end":420138,"line_start":942,"line_end":942,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3431},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420397,"byte_end":420409,"line_start":954,"line_end":954,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector3D<T, U>>::from_lengths","value":"fn (x: Length<T, U>, y: Length<T, U>, z: Length<T, U>) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420305,"byte_end":420371,"line_start":952,"line_end":952,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420376,"byte_end":420385,"line_start":953,"line_end":953,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420582,"byte_end":420594,"line_start":960,"line_end":960,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector3D<T, U>>::from_untyped","value":"fn (p: Vector3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420520,"byte_end":420556,"line_start":958,"line_end":958,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420561,"byte_end":420570,"line_start":959,"line_end":959,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421286,"byte_end":421289,"line_start":985,"line_end":985,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector3D<T, U>>::abs","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420673,"byte_end":420736,"line_start":964,"line_end":964,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420741,"byte_end":420744,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420749,"byte_end":420762,"line_start":966,"line_end":966,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420767,"byte_end":420770,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420775,"byte_end":420786,"line_start":968,"line_end":968,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420791,"byte_end":420817,"line_start":969,"line_end":969,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420822,"byte_end":420845,"line_start":970,"line_end":970,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420850,"byte_end":420863,"line_start":971,"line_end":971,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420868,"byte_end":420871,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, U>(-1, 0, 2).abs(), vec3(1, 0, 2));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420876,"byte_end":420936,"line_start":973,"line_end":973,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420941,"byte_end":420944,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ let vec = vec3::<_, U>(f32::NAN, 0.0, -f32::MAX).abs();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":420949,"byte_end":421008,"line_start":975,"line_end":975,"column_start":5,"column_end":64}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421013,"byte_end":421041,"line_start":976,"line_end":976,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, 0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421046,"byte_end":421073,"line_start":977,"line_end":977,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec.z, f32::MAX);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421078,"byte_end":421110,"line_start":978,"line_end":978,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421115,"byte_end":421122,"line_start":979,"line_end":979,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421127,"byte_end":421130,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421135,"byte_end":421147,"line_start":981,"line_end":981,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421152,"byte_end":421155,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421160,"byte_end":421239,"line_start":983,"line_end":983,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421244,"byte_end":421274,"line_start":984,"line_end":984,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421448,"byte_end":421451,"line_start":994,"line_end":994,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector3D<T, U>>::dot","value":"fn (self, other: Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421406,"byte_end":421422,"line_start":992,"line_end":992,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421427,"byte_end":421436,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421692,"byte_end":421697,"line_start":1005,"line_end":1005,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector3D<T, U>>::cross","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Cross product.\n","sig":null,"attributes":[{"value":"/ Cross product.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421648,"byte_end":421666,"line_start":1003,"line_end":1003,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421671,"byte_end":421680,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422093,"byte_end":422101,"line_start":1020,"line_end":1020,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector3D<T, U>>::to_point","value":"fn (&self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421969,"byte_end":422003,"line_start":1016,"line_end":1016,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422008,"byte_end":422011,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422016,"byte_end":422067,"line_start":1018,"line_end":1018,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422072,"byte_end":422081,"line_start":1019,"line_end":1019,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422267,"byte_end":422269,"line_start":1026,"line_end":1026,"column_start":12,"column_end":14},"name":"xy","qualname":"<Vector3D<T, U>>::xy","value":"fn (&self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422178,"byte_end":422241,"line_start":1024,"line_end":1024,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422246,"byte_end":422255,"line_start":1025,"line_end":1025,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3441},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422426,"byte_end":422428,"line_start":1032,"line_end":1032,"column_start":12,"column_end":14},"name":"xz","qualname":"<Vector3D<T, U>>::xz","value":"fn (&self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422337,"byte_end":422400,"line_start":1030,"line_end":1030,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422405,"byte_end":422414,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422585,"byte_end":422587,"line_start":1038,"line_end":1038,"column_start":12,"column_end":14},"name":"yz","qualname":"<Vector3D<T, U>>::yz","value":"fn (&self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422496,"byte_end":422559,"line_start":1036,"line_end":1036,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422564,"byte_end":422573,"line_start":1037,"line_end":1037,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3443},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422720,"byte_end":422728,"line_start":1044,"line_end":1044,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector3D<T, U>>::to_array","value":"fn (&self) -> [T; 3]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422655,"byte_end":422694,"line_start":1042,"line_end":1042,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422699,"byte_end":422708,"line_start":1043,"line_end":1043,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3445},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422860,"byte_end":422871,"line_start":1050,"line_end":1050,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Vector3D<T, U>>::to_array_4d","value":"fn (&self) -> [T; 4]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y, z and 0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422792,"byte_end":422834,"line_start":1048,"line_end":1048,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422839,"byte_end":422848,"line_start":1049,"line_end":1049,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423044,"byte_end":423052,"line_start":1059,"line_end":1059,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector3D<T, U>>::to_tuple","value":"fn (&self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":422980,"byte_end":423018,"line_start":1057,"line_end":1057,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423023,"byte_end":423032,"line_start":1058,"line_end":1058,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423186,"byte_end":423197,"line_start":1065,"line_end":1065,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Vector3D<T, U>>::to_tuple_4d","value":"fn (&self) -> (T, T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y, z and 0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423119,"byte_end":423160,"line_start":1063,"line_end":1063,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423165,"byte_end":423174,"line_start":1064,"line_end":1064,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3449},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423392,"byte_end":423402,"line_start":1074,"line_end":1074,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector3D<T, U>>::to_untyped","value":"fn (&self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423312,"byte_end":423366,"line_start":1072,"line_end":1072,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423371,"byte_end":423380,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423532,"byte_end":423541,"line_start":1080,"line_end":1080,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector3D<T, U>>::cast_unit","value":"fn <V> (&self) -> Vector3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423488,"byte_end":423506,"line_start":1078,"line_end":1078,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423511,"byte_end":423520,"line_start":1079,"line_end":1079,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423675,"byte_end":423680,"line_start":1086,"line_end":1086,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Vector3D<T, U>>::to_2d","value":"fn (&self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d vector.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423620,"byte_end":423649,"line_start":1084,"line_end":1084,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423654,"byte_end":423663,"line_start":1085,"line_end":1085,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424103,"byte_end":424108,"line_start":1102,"line_end":1102,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector3D<T, U>>::round","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423737,"byte_end":423792,"line_start":1090,"line_end":1090,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423797,"byte_end":423800,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423805,"byte_end":423880,"line_start":1092,"line_end":1092,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423885,"byte_end":423888,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423893,"byte_end":423904,"line_start":1094,"line_end":1094,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423909,"byte_end":423932,"line_start":1095,"line_end":1095,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423937,"byte_end":423951,"line_start":1096,"line_end":1096,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423956,"byte_end":423959,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).round(), vec3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":423964,"byte_end":424049,"line_start":1098,"line_end":1098,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424054,"byte_end":424061,"line_start":1099,"line_end":1099,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424066,"byte_end":424075,"line_start":1100,"line_end":1100,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424080,"byte_end":424091,"line_start":1101,"line_end":1101,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424630,"byte_end":424634,"line_start":1121,"line_end":1121,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector3D<T, U>>::ceil","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424230,"byte_end":424321,"line_start":1109,"line_end":1109,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424326,"byte_end":424329,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424334,"byte_end":424409,"line_start":1111,"line_end":1111,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424414,"byte_end":424417,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424422,"byte_end":424433,"line_start":1113,"line_end":1113,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424438,"byte_end":424461,"line_start":1114,"line_end":1114,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424466,"byte_end":424480,"line_start":1115,"line_end":1115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424485,"byte_end":424488,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), vec3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424493,"byte_end":424576,"line_start":1117,"line_end":1117,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424581,"byte_end":424588,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424593,"byte_end":424602,"line_start":1119,"line_end":1119,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424607,"byte_end":424618,"line_start":1120,"line_end":1120,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3455},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425152,"byte_end":425157,"line_start":1140,"line_end":1140,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector3D<T, U>>::floor","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424752,"byte_end":424840,"line_start":1128,"line_end":1128,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424845,"byte_end":424848,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424853,"byte_end":424928,"line_start":1130,"line_end":1130,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424933,"byte_end":424936,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424941,"byte_end":424952,"line_start":1132,"line_end":1132,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424957,"byte_end":424980,"line_start":1133,"line_end":1133,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":424985,"byte_end":424999,"line_start":1134,"line_end":1134,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425004,"byte_end":425007,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).floor(), vec3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425012,"byte_end":425098,"line_start":1136,"line_end":1136,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425103,"byte_end":425110,"line_start":1137,"line_end":1137,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425115,"byte_end":425124,"line_start":1138,"line_end":1138,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425129,"byte_end":425140,"line_start":1139,"line_end":1139,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3456},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425359,"byte_end":425371,"line_start":1149,"line_end":1149,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector3D<T, U>>::to_transform","value":"fn (&self) -> Transform3D<T, U, U>","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425279,"byte_end":425333,"line_start":1147,"line_end":1147,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425338,"byte_end":425347,"line_start":1148,"line_end":1148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3460},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425674,"byte_end":425687,"line_start":1163,"line_end":1163,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector3D<T, U>>::square_length","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425608,"byte_end":425648,"line_start":1161,"line_end":1161,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425653,"byte_end":425662,"line_start":1162,"line_end":1162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3461},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425926,"byte_end":425945,"line_start":1171,"line_end":1171,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector3D<T, U>>::project_onto_vector","value":"fn (&self, onto: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425773,"byte_end":425824,"line_start":1167,"line_end":1167,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425829,"byte_end":425832,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425837,"byte_end":425900,"line_start":1169,"line_end":1169,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425905,"byte_end":425914,"line_start":1170,"line_end":1170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426282,"byte_end":426290,"line_start":1183,"line_end":1183,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector3D<T, U>>::angle_to","value":"fn (&self, other: Self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the positive angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the positive angle between this vector and another vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426144,"byte_end":426214,"line_start":1180,"line_end":1180,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426219,"byte_end":426222,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between 0 and PI.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426227,"byte_end":426270,"line_start":1182,"line_end":1182,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3466},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426544,"byte_end":426550,"line_start":1195,"line_end":1195,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector3D<T, U>>::length","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426488,"byte_end":426518,"line_start":1193,"line_end":1193,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426523,"byte_end":426532,"line_start":1194,"line_end":1194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426700,"byte_end":426709,"line_start":1202,"line_end":1202,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector3D<T, U>>::normalize","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426612,"byte_end":426658,"line_start":1199,"line_end":1199,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426663,"byte_end":426672,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426677,"byte_end":426688,"line_start":1201,"line_end":1201,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426999,"byte_end":427012,"line_start":1212,"line_end":1212,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector3D<T, U>>::try_normalize","value":"fn (self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426766,"byte_end":426813,"line_start":1206,"line_end":1206,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426818,"byte_end":426821,"line_start":1207,"line_end":1207,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426826,"byte_end":426919,"line_start":1208,"line_end":1208,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426924,"byte_end":426957,"line_start":1209,"line_end":1209,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426962,"byte_end":426971,"line_start":1210,"line_end":1210,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426976,"byte_end":426987,"line_start":1211,"line_end":1211,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427316,"byte_end":427332,"line_start":1224,"line_end":1224,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector3D<T, U>>::robust_normalize","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427184,"byte_end":427274,"line_start":1221,"line_end":1221,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427279,"byte_end":427288,"line_start":1222,"line_end":1222,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427293,"byte_end":427304,"line_start":1223,"line_end":1223,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427644,"byte_end":427659,"line_start":1236,"line_end":1236,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector3D<T, U>>::with_max_length","value":"fn (&self, max_length: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427568,"byte_end":427618,"line_start":1234,"line_end":1234,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427623,"byte_end":427632,"line_start":1235,"line_end":1235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3471},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427976,"byte_end":427991,"line_start":1247,"line_end":1247,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector3D<T, U>>::with_min_length","value":"fn (&self, min_length: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427897,"byte_end":427950,"line_start":1245,"line_end":1245,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":427955,"byte_end":427964,"line_start":1246,"line_end":1246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428319,"byte_end":428331,"line_start":1258,"line_end":1258,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector3D<T, U>>::clamp_length","value":"fn (&self, min: T, max: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428229,"byte_end":428293,"line_start":1256,"line_end":1256,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428298,"byte_end":428307,"line_start":1257,"line_end":1257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429262,"byte_end":429266,"line_start":1286,"line_end":1286,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector3D<T, U>>::lerp","value":"fn (&self, other: Self, t: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428575,"byte_end":428654,"line_start":1268,"line_end":1268,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428659,"byte_end":428662,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428667,"byte_end":428680,"line_start":1270,"line_end":1270,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428685,"byte_end":428688,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428693,"byte_end":428704,"line_start":1272,"line_end":1272,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec3;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428709,"byte_end":428730,"line_start":1273,"line_end":1273,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector3D;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428735,"byte_end":428769,"line_start":1274,"line_end":1274,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428774,"byte_end":428777,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ let from: Vector3D<_> = vec3(0.0, 10.0, -1.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428782,"byte_end":428832,"line_start":1276,"line_end":1276,"column_start":5,"column_end":55}},{"value":"/ let to:  Vector3D<_> = vec3(8.0, -4.0,  0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428837,"byte_end":428886,"line_start":1277,"line_end":1277,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428891,"byte_end":428894,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428899,"byte_end":428960,"line_start":1279,"line_end":1279,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428965,"byte_end":429026,"line_start":1280,"line_end":1280,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429031,"byte_end":429092,"line_start":1281,"line_end":1281,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429097,"byte_end":429158,"line_start":1282,"line_end":1282,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec3(16.0, -18.0,  1.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429163,"byte_end":429224,"line_start":1283,"line_end":1283,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429229,"byte_end":429236,"line_start":1284,"line_end":1284,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429241,"byte_end":429250,"line_start":1285,"line_end":1285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3477},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429485,"byte_end":429492,"line_start":1293,"line_end":1293,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector3D<T, U>>::reflect","value":"fn (&self, normal: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429384,"byte_end":429459,"line_start":1291,"line_end":1291,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429464,"byte_end":429473,"line_start":1292,"line_end":1292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3481},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429776,"byte_end":429779,"line_start":1302,"line_end":1302,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector3D<T, U>>::min","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429664,"byte_end":429750,"line_start":1300,"line_end":1300,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429755,"byte_end":429764,"line_start":1301,"line_end":1301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430058,"byte_end":430061,"line_start":1312,"line_end":1312,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector3D<T, U>>::max","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429946,"byte_end":430032,"line_start":1310,"line_end":1310,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430037,"byte_end":430046,"line_start":1311,"line_end":1311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430426,"byte_end":430431,"line_start":1325,"line_end":1325,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector3D<T, U>>::clamp","value":"fn (&self, start: Self, end: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430228,"byte_end":430302,"line_start":1320,"line_end":1320,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430307,"byte_end":430343,"line_start":1321,"line_end":1321,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430348,"byte_end":430351,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430356,"byte_end":430400,"line_start":1323,"line_end":1323,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430405,"byte_end":430414,"line_start":1324,"line_end":1324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430652,"byte_end":430664,"line_start":1334,"line_end":1334,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector3D<T, U>>::greater_than","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430548,"byte_end":430626,"line_start":1332,"line_end":1332,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430631,"byte_end":430640,"line_start":1333,"line_end":1333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3485},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430948,"byte_end":430958,"line_start":1344,"line_end":1344,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector3D<T, U>>::lower_than","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430846,"byte_end":430922,"line_start":1342,"line_end":1342,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":430927,"byte_end":430936,"line_start":1343,"line_end":1343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3489},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431278,"byte_end":431283,"line_start":1356,"line_end":1356,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector3D<T, U>>::equal","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431181,"byte_end":431252,"line_start":1354,"line_end":1354,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431257,"byte_end":431266,"line_start":1355,"line_end":1355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431569,"byte_end":431578,"line_start":1366,"line_end":1366,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector3D<T, U>>::not_equal","value":"fn (&self, other: Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431468,"byte_end":431543,"line_start":1364,"line_end":1364,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431548,"byte_end":431557,"line_start":1365,"line_end":1365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3494},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432190,"byte_end":432194,"line_start":1382,"line_end":1382,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector3D<T, U>>::cast","value":"fn <NewT> (&self) -> Vector3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431809,"byte_end":431883,"line_start":1376,"line_end":1376,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431888,"byte_end":431891,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431896,"byte_end":431984,"line_start":1378,"line_end":1378,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431989,"byte_end":432077,"line_start":1379,"line_end":1379,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432082,"byte_end":432164,"line_start":1380,"line_end":1380,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432169,"byte_end":432178,"line_start":1381,"line_end":1381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432660,"byte_end":432668,"line_start":1391,"line_end":1391,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector3D<T, U>>::try_cast","value":"fn <NewT> (&self) -> Option<Vector3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432284,"byte_end":432367,"line_start":1386,"line_end":1386,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432372,"byte_end":432375,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432380,"byte_end":432468,"line_start":1388,"line_end":1388,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432473,"byte_end":432561,"line_start":1389,"line_end":1389,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":432566,"byte_end":432648,"line_start":1390,"line_end":1390,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3498},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433067,"byte_end":433073,"line_start":1406,"line_end":1406,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector3D<T, U>>::to_f32","value":"fn (&self) -> Vector3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433011,"byte_end":433041,"line_start":1404,"line_end":1404,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433046,"byte_end":433055,"line_start":1405,"line_end":1405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3499},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433190,"byte_end":433196,"line_start":1412,"line_end":1412,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector3D<T, U>>::to_f64","value":"fn (&self) -> Vector3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433134,"byte_end":433164,"line_start":1410,"line_end":1410,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433169,"byte_end":433178,"line_start":1411,"line_end":1411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433554,"byte_end":433562,"line_start":1422,"line_end":1422,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector3D<T, U>>::to_usize","value":"fn (&self) -> Vector3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433257,"byte_end":433317,"line_start":1416,"line_end":1416,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433322,"byte_end":433325,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433330,"byte_end":433408,"line_start":1418,"line_end":1418,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433413,"byte_end":433487,"line_start":1419,"line_end":1419,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433492,"byte_end":433528,"line_start":1420,"line_end":1420,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433533,"byte_end":433542,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433920,"byte_end":433926,"line_start":1432,"line_end":1432,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector3D<T, U>>::to_u32","value":"fn (&self) -> Vector3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433625,"byte_end":433683,"line_start":1426,"line_end":1426,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433688,"byte_end":433691,"line_start":1427,"line_end":1427,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433696,"byte_end":433774,"line_start":1428,"line_end":1428,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433779,"byte_end":433853,"line_start":1429,"line_end":1429,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433858,"byte_end":433894,"line_start":1430,"line_end":1430,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433899,"byte_end":433908,"line_start":1431,"line_end":1431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434282,"byte_end":434288,"line_start":1442,"line_end":1442,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector3D<T, U>>::to_i32","value":"fn (&self) -> Vector3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":433987,"byte_end":434045,"line_start":1436,"line_end":1436,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434050,"byte_end":434053,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434058,"byte_end":434136,"line_start":1438,"line_end":1438,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434141,"byte_end":434215,"line_start":1439,"line_end":1439,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434220,"byte_end":434256,"line_start":1440,"line_end":1440,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434261,"byte_end":434270,"line_start":1441,"line_end":1441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3503},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434644,"byte_end":434650,"line_start":1452,"line_end":1452,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector3D<T, U>>::to_i64","value":"fn (&self) -> Vector3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` vector, truncating decimals if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434349,"byte_end":434407,"line_start":1446,"line_end":1446,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434412,"byte_end":434415,"line_start":1447,"line_end":1447,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434420,"byte_end":434498,"line_start":1448,"line_end":1448,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434503,"byte_end":434577,"line_start":1449,"line_end":1449,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434582,"byte_end":434618,"line_start":1450,"line_end":1450,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434623,"byte_end":434632,"line_start":1451,"line_end":1451,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439374,"byte_end":439386,"line_start":1650,"line_end":1650,"column_start":12,"column_end":24},"name":"BoolVector2D","qualname":"::vector::BoolVector2D","value":"BoolVector2D { x, y }","parent":null,"children":[{"krate":0,"index":3878},{"krate":0,"index":3879}],"decl_id":null,"docs":" A 2d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 2d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439239,"byte_end":439311,"line_start":1648,"line_end":1648,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3878},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439397,"byte_end":439398,"line_start":1651,"line_end":1651,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector2D::x","value":"bool","parent":{"krate":0,"index":3877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439414,"byte_end":439415,"line_start":1652,"line_end":1652,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector2D::y","value":"bool","parent":{"krate":0,"index":3877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439561,"byte_end":439573,"line_start":1657,"line_end":1657,"column_start":12,"column_end":24},"name":"BoolVector3D","qualname":"::vector::BoolVector3D","value":"BoolVector3D { x, y, z }","parent":null,"children":[{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3898}],"decl_id":null,"docs":" A 3d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 3d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439426,"byte_end":439498,"line_start":1655,"line_end":1655,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439584,"byte_end":439585,"line_start":1658,"line_end":1658,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector3D::x","value":"bool","parent":{"krate":0,"index":3895},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3897},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439601,"byte_end":439602,"line_start":1659,"line_end":1659,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector3D::y","value":"bool","parent":{"krate":0,"index":3895},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439618,"byte_end":439619,"line_start":1660,"line_end":1660,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::BoolVector3D::z","value":"bool","parent":{"krate":0,"index":3895},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3603},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439750,"byte_end":439753,"line_start":1666,"line_end":1666,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector2D>::all","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439654,"byte_end":439724,"line_start":1664,"line_end":1664,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439729,"byte_end":439738,"line_start":1665,"line_end":1665,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3604},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439902,"byte_end":439905,"line_start":1672,"line_end":1672,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector2D>::any","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439807,"byte_end":439876,"line_start":1670,"line_end":1670,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439881,"byte_end":439890,"line_start":1671,"line_end":1671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3605},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440077,"byte_end":440081,"line_start":1678,"line_end":1678,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector2D>::none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439959,"byte_end":440051,"line_start":1676,"line_end":1676,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440056,"byte_end":440065,"line_start":1677,"line_end":1677,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440219,"byte_end":440222,"line_start":1684,"line_end":1684,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector2D>::and","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440130,"byte_end":440193,"line_start":1682,"line_end":1682,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440198,"byte_end":440207,"line_start":1683,"line_end":1683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440453,"byte_end":440455,"line_start":1693,"line_end":1693,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector2D>::or","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440365,"byte_end":440427,"line_start":1691,"line_end":1691,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440432,"byte_end":440441,"line_start":1692,"line_end":1692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3608},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440700,"byte_end":440703,"line_start":1702,"line_end":1702,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector2D>::not","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440598,"byte_end":440674,"line_start":1700,"line_end":1700,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440679,"byte_end":440688,"line_start":1701,"line_end":1701,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441026,"byte_end":441038,"line_start":1712,"line_end":1712,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector2D>::select_point","value":"fn <T, U> (&self, a: Point2D<T, U>, b: Point2D<T, U>) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440813,"byte_end":440905,"line_start":1709,"line_end":1709,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":440910,"byte_end":441000,"line_start":1710,"line_end":1710,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441005,"byte_end":441014,"line_start":1711,"line_end":1711,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441446,"byte_end":441459,"line_start":1722,"line_end":1722,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector2D>::select_vector","value":"fn <T, U> (&self, a: Vector2D<T, U>, b: Vector2D<T, U>) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441232,"byte_end":441325,"line_start":1719,"line_end":1719,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441330,"byte_end":441420,"line_start":1720,"line_end":1720,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441425,"byte_end":441434,"line_start":1721,"line_end":1721,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441866,"byte_end":441877,"line_start":1732,"line_end":1732,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector2D>::select_size","value":"fn <T, U> (&self, a: Size2D<T, U>, b: Size2D<T, U>) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441654,"byte_end":441745,"line_start":1729,"line_end":1729,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441750,"byte_end":441840,"line_start":1730,"line_end":1730,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":441845,"byte_end":441854,"line_start":1731,"line_end":1731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442203,"byte_end":442206,"line_start":1743,"line_end":1743,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector3D>::all","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442107,"byte_end":442177,"line_start":1741,"line_end":1741,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442182,"byte_end":442191,"line_start":1742,"line_end":1742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3620},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442365,"byte_end":442368,"line_start":1749,"line_end":1749,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector3D>::any","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442270,"byte_end":442339,"line_start":1747,"line_end":1747,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442344,"byte_end":442353,"line_start":1748,"line_end":1748,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3621},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442550,"byte_end":442554,"line_start":1755,"line_end":1755,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector3D>::none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442432,"byte_end":442524,"line_start":1753,"line_end":1753,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442529,"byte_end":442538,"line_start":1754,"line_end":1754,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442692,"byte_end":442695,"line_start":1761,"line_end":1761,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector3D>::and","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442603,"byte_end":442666,"line_start":1759,"line_end":1759,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442671,"byte_end":442680,"line_start":1760,"line_end":1760,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442960,"byte_end":442962,"line_start":1771,"line_end":1771,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector3D>::or","value":"fn (&self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442872,"byte_end":442934,"line_start":1769,"line_end":1769,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442939,"byte_end":442948,"line_start":1770,"line_end":1770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443241,"byte_end":443244,"line_start":1781,"line_end":1781,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector3D>::not","value":"fn (&self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443139,"byte_end":443215,"line_start":1779,"line_end":1779,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443220,"byte_end":443229,"line_start":1780,"line_end":1780,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443591,"byte_end":443603,"line_start":1792,"line_end":1792,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector3D>::select_point","value":"fn <T, U> (&self, a: Point3D<T, U>, b: Point3D<T, U>) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443378,"byte_end":443470,"line_start":1789,"line_end":1789,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443475,"byte_end":443565,"line_start":1790,"line_end":1790,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443570,"byte_end":443579,"line_start":1791,"line_end":1791,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444055,"byte_end":444068,"line_start":1803,"line_end":1803,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector3D>::select_vector","value":"fn <T, U> (&self, a: Vector3D<T, U>, b: Vector3D<T, U>) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443841,"byte_end":443934,"line_start":1800,"line_end":1800,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":443939,"byte_end":444029,"line_start":1801,"line_end":1801,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444034,"byte_end":444043,"line_start":1802,"line_end":1802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444535,"byte_end":444546,"line_start":1815,"line_end":1815,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector3D>::select_size","value":"fn <T, U> (&self, a: Size3D<T, U>, b: Size3D<T, U>) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444307,"byte_end":444398,"line_start":1811,"line_end":1811,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444403,"byte_end":444493,"line_start":1812,"line_end":1812,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444498,"byte_end":444507,"line_start":1813,"line_end":1813,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444512,"byte_end":444523,"line_start":1814,"line_end":1814,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444896,"byte_end":444898,"line_start":1825,"line_end":1825,"column_start":12,"column_end":14},"name":"xy","qualname":"<BoolVector3D>::xy","value":"fn (&self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444806,"byte_end":444870,"line_start":1823,"line_end":1823,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":444875,"byte_end":444884,"line_start":1824,"line_end":1824,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445104,"byte_end":445106,"line_start":1834,"line_end":1834,"column_start":12,"column_end":14},"name":"xz","qualname":"<BoolVector3D>::xz","value":"fn (&self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445014,"byte_end":445078,"line_start":1832,"line_end":1832,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445083,"byte_end":445092,"line_start":1833,"line_end":1833,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445312,"byte_end":445314,"line_start":1843,"line_end":1843,"column_start":12,"column_end":14},"name":"yz","qualname":"<BoolVector3D>::yz","value":"fn (&self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's y and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's y and z coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445222,"byte_end":445286,"line_start":1841,"line_end":1841,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445291,"byte_end":445300,"line_start":1842,"line_end":1842,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":3637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445474,"byte_end":445478,"line_start":1853,"line_end":1853,"column_start":8,"column_end":12},"name":"vec2","qualname":"::vector::vec2","value":"fn <T, U> (x: T, y: T) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445428,"byte_end":445456,"line_start":1851,"line_end":1851,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445457,"byte_end":445466,"line_start":1852,"line_end":1852,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445637,"byte_end":445641,"line_start":1863,"line_end":1863,"column_start":8,"column_end":12},"name":"vec3","qualname":"::vector::vec3","value":"fn <T, U> (x: T, y: T, z: T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445591,"byte_end":445619,"line_start":1861,"line_end":1861,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445620,"byte_end":445629,"line_start":1862,"line_end":1862,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445831,"byte_end":445836,"line_start":1874,"line_end":1874,"column_start":8,"column_end":13},"name":"bvec2","qualname":"::vector::bvec2","value":"fn (x: bool, y: bool) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector2D { x, y }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector2D { x, y }`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445771,"byte_end":445813,"line_start":1872,"line_end":1872,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445814,"byte_end":445823,"line_start":1873,"line_end":1873,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445965,"byte_end":445970,"line_start":1880,"line_end":1880,"column_start":8,"column_end":13},"name":"bvec3","qualname":"::vector::bvec3","value":"fn (x: bool, y: bool, z: bool) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector3D { x, y, z }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector3D { x, y, z }`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445902,"byte_end":445947,"line_start":1878,"line_end":1878,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":445948,"byte_end":445957,"line_start":1879,"line_end":1879,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3914},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3099,"byte_end":3110,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"UnknownUnit","qualname":"::UnknownUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default unit.\n","sig":null,"attributes":[{"value":"/ The default unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2989,"byte_end":3010,"line_start":89,"line_end":89,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":3645},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3121,"byte_end":3128,"line_start":93,"line_end":93,"column_start":9,"column_end":16},"name":"default","qualname":"::default","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","parent":null,"children":[{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3649},{"krate":0,"index":3651},{"krate":0,"index":3653},{"krate":0,"index":3655},{"krate":0,"index":3657},{"krate":0,"index":3659},{"krate":0,"index":3661},{"krate":0,"index":3663},{"krate":0,"index":3665},{"krate":0,"index":3667},{"krate":0,"index":3669},{"krate":0,"index":3671},{"krate":0,"index":3673},{"krate":0,"index":3675},{"krate":0,"index":3677},{"krate":0,"index":3679},{"krate":0,"index":3681},{"krate":0,"index":3683},{"krate":0,"index":3685}],"decl_id":null,"docs":" A set of aliases for all types, tagged with the default unknown unit.\n","sig":null,"attributes":[{"value":"! A set of aliases for all types, tagged with the default unknown unit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3135,"byte_end":3208,"line_start":94,"line_end":94,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":3647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3251,"byte_end":3257,"line_start":97,"line_end":97,"column_start":14,"column_end":20},"name":"Length","qualname":"::default::Length","value":"super::Length<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3307,"byte_end":3314,"line_start":98,"line_end":98,"column_start":14,"column_end":21},"name":"Point2D","qualname":"::default::Point2D","value":"super::Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3365,"byte_end":3372,"line_start":99,"line_end":99,"column_start":14,"column_end":21},"name":"Point3D","qualname":"::default::Point3D","value":"super::Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3653},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3423,"byte_end":3431,"line_start":100,"line_end":100,"column_start":14,"column_end":22},"name":"Vector2D","qualname":"::default::Vector2D","value":"super::Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3483,"byte_end":3491,"line_start":101,"line_end":101,"column_start":14,"column_end":22},"name":"Vector3D","qualname":"::default::Vector3D","value":"super::Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3657},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3543,"byte_end":3560,"line_start":102,"line_end":102,"column_start":14,"column_end":31},"name":"HomogeneousVector","qualname":"::default::HomogeneousVector","value":"super::HomogeneousVector<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3621,"byte_end":3627,"line_start":103,"line_end":103,"column_start":14,"column_end":20},"name":"Size2D","qualname":"::default::Size2D","value":"super::Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3677,"byte_end":3683,"line_start":104,"line_end":104,"column_start":14,"column_end":20},"name":"Size3D","qualname":"::default::Size3D","value":"super::Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3733,"byte_end":3737,"line_start":105,"line_end":105,"column_start":14,"column_end":18},"name":"Rect","qualname":"::default::Rect","value":"super::Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3665},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3785,"byte_end":3790,"line_start":106,"line_end":106,"column_start":14,"column_end":19},"name":"Box2D","qualname":"::default::Box2D","value":"super::Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3667},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3839,"byte_end":3844,"line_start":107,"line_end":107,"column_start":14,"column_end":19},"name":"Box3D","qualname":"::default::Box3D","value":"super::Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3893,"byte_end":3906,"line_start":108,"line_end":108,"column_start":14,"column_end":27},"name":"SideOffsets2D","qualname":"::default::SideOffsets2D","value":"super::SideOffsets2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":3963,"byte_end":3974,"line_start":109,"line_end":109,"column_start":14,"column_end":25},"name":"Transform2D","qualname":"::default::Transform2D","value":"super::Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":4042,"byte_end":4053,"line_start":110,"line_end":110,"column_start":14,"column_end":25},"name":"Transform3D","qualname":"::default::Transform3D","value":"super::Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3675},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":4121,"byte_end":4131,"line_start":111,"line_end":111,"column_start":14,"column_end":24},"name":"Rotation2D","qualname":"::default::Rotation2D","value":"super::Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3677},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":4198,"byte_end":4208,"line_start":112,"line_end":112,"column_start":14,"column_end":24},"name":"Rotation3D","qualname":"::default::Rotation3D","value":"super::Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":4275,"byte_end":4288,"line_start":113,"line_end":113,"column_start":14,"column_end":27},"name":"Translation2D","qualname":"::default::Translation2D","value":"super::Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":4358,"byte_end":4371,"line_start":114,"line_end":114,"column_start":14,"column_end":27},"name":"Translation3D","qualname":"::default::Translation3D","value":"super::Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3683},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":4441,"byte_end":4446,"line_start":115,"line_end":115,"column_start":14,"column_end":19},"name":"Scale","qualname":"::default::Scale","value":"super::Scale<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3685},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":4508,"byte_end":4524,"line_start":116,"line_end":116,"column_start":14,"column_end":30},"name":"RigidTransform3D","qualname":"::default::RigidTransform3D","value":"super::RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6635,"byte_end":6640,"line_start":26,"line_end":26,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6814,"byte_end":6819,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7087,"byte_end":7092,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7631,"byte_end":7636,"line_start":75,"line_end":75,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8321,"byte_end":8326,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8477,"byte_end":8482,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8586,"byte_end":8591,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9031,"byte_end":9036,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9751,"byte_end":9756,"line_start":176,"line_end":176,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9936,"byte_end":9941,"line_start":183,"line_end":183,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10089,"byte_end":10094,"line_start":189,"line_end":189,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10287,"byte_end":10292,"line_start":196,"line_end":196,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10440,"byte_end":10445,"line_start":202,"line_end":202,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10612,"byte_end":10617,"line_start":210,"line_end":210,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10801,"byte_end":10806,"line_start":218,"line_end":218,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10934,"byte_end":10939,"line_start":224,"line_end":224,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":11123,"byte_end":11128,"line_start":232,"line_end":232,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":11250,"byte_end":11255,"line_start":238,"line_end":238,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":11396,"byte_end":11401,"line_start":245,"line_end":245,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18725,"byte_end":18730,"line_start":63,"line_end":63,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18869,"byte_end":18874,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18913,"byte_end":18918,"line_start":72,"line_end":72,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19056,"byte_end":19061,"line_start":78,"line_end":78,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19201,"byte_end":19206,"line_start":84,"line_end":84,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19255,"byte_end":19260,"line_start":86,"line_end":86,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19492,"byte_end":19497,"line_start":95,"line_end":95,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19748,"byte_end":19753,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19915,"byte_end":19920,"line_start":113,"line_end":113,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21651,"byte_end":21656,"line_start":162,"line_end":162,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22918,"byte_end":22923,"line_start":206,"line_end":206,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23208,"byte_end":23213,"line_start":220,"line_end":220,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23695,"byte_end":23700,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24915,"byte_end":24920,"line_start":284,"line_end":284,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26176,"byte_end":26181,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26494,"byte_end":26499,"line_start":344,"line_end":344,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26720,"byte_end":26725,"line_start":354,"line_end":354,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26924,"byte_end":26929,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27106,"byte_end":27111,"line_start":375,"line_end":375,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27342,"byte_end":27347,"line_start":386,"line_end":386,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27574,"byte_end":27579,"line_start":395,"line_end":395,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27723,"byte_end":27728,"line_start":402,"line_end":402,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27955,"byte_end":27960,"line_start":411,"line_end":411,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28124,"byte_end":28129,"line_start":418,"line_end":418,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28386,"byte_end":28391,"line_start":427,"line_end":427,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28594,"byte_end":28599,"line_start":435,"line_end":435,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28856,"byte_end":28861,"line_start":444,"line_end":444,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29020,"byte_end":29025,"line_start":452,"line_end":452,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29907,"byte_end":29912,"line_start":486,"line_end":486,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32751,"byte_end":32756,"line_start":564,"line_end":564,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33431,"byte_end":33436,"line_start":583,"line_end":583,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":34098,"byte_end":34103,"line_start":606,"line_end":606,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42582,"byte_end":42587,"line_start":41,"line_end":41,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42726,"byte_end":42731,"line_start":48,"line_end":48,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42770,"byte_end":42775,"line_start":50,"line_end":50,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42913,"byte_end":42918,"line_start":56,"line_end":56,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43058,"byte_end":43063,"line_start":62,"line_end":62,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43112,"byte_end":43117,"line_start":64,"line_end":64,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43349,"byte_end":43354,"line_start":73,"line_end":73,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43605,"byte_end":43610,"line_start":83,"line_end":83,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43772,"byte_end":43777,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45822,"byte_end":45827,"line_start":148,"line_end":148,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47300,"byte_end":47305,"line_start":204,"line_end":204,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47608,"byte_end":47613,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48132,"byte_end":48137,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48603,"byte_end":48608,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50049,"byte_end":50054,"line_start":318,"line_end":318,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50371,"byte_end":50376,"line_start":329,"line_end":329,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50597,"byte_end":50602,"line_start":339,"line_end":339,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51172,"byte_end":51177,"line_start":368,"line_end":368,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51354,"byte_end":51359,"line_start":378,"line_end":378,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51620,"byte_end":51625,"line_start":389,"line_end":389,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51852,"byte_end":51857,"line_start":398,"line_end":398,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52027,"byte_end":52032,"line_start":406,"line_end":406,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52259,"byte_end":52264,"line_start":415,"line_end":415,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52454,"byte_end":52459,"line_start":423,"line_end":423,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52716,"byte_end":52721,"line_start":432,"line_end":432,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52924,"byte_end":52929,"line_start":440,"line_end":440,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53186,"byte_end":53191,"line_start":449,"line_end":449,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53350,"byte_end":53355,"line_start":457,"line_end":457,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54363,"byte_end":54368,"line_start":497,"line_end":497,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57227,"byte_end":57232,"line_start":575,"line_end":575,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57911,"byte_end":57916,"line_start":594,"line_end":594,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58584,"byte_end":58589,"line_start":619,"line_end":619,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68888,"byte_end":68905,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68944,"byte_end":68961,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":69997,"byte_end":70014,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70062,"byte_end":70079,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70271,"byte_end":70288,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70487,"byte_end":70504,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70830,"byte_end":70847,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71654,"byte_end":71671,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71849,"byte_end":71866,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72043,"byte_end":72060,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72234,"byte_end":72251,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72417,"byte_end":72434,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72713,"byte_end":72730,"line_start":187,"line_end":187,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75538,"byte_end":75544,"line_start":42,"line_end":42,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75662,"byte_end":75668,"line_start":48,"line_end":48,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76236,"byte_end":76242,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76410,"byte_end":76416,"line_start":84,"line_end":84,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77521,"byte_end":77527,"line_start":122,"line_end":122,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77985,"byte_end":77991,"line_start":135,"line_end":135,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78132,"byte_end":78138,"line_start":141,"line_end":141,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78269,"byte_end":78275,"line_start":147,"line_end":147,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78400,"byte_end":78406,"line_start":154,"line_end":154,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78534,"byte_end":78540,"line_start":161,"line_end":161,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78741,"byte_end":78747,"line_start":170,"line_end":170,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78879,"byte_end":78885,"line_start":177,"line_end":177,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79094,"byte_end":79100,"line_start":186,"line_end":186,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79278,"byte_end":79284,"line_start":193,"line_end":193,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79581,"byte_end":79587,"line_start":204,"line_end":204,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79809,"byte_end":79815,"line_start":214,"line_end":214,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80044,"byte_end":80050,"line_start":224,"line_end":224,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80199,"byte_end":80205,"line_start":232,"line_end":232,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80434,"byte_end":80440,"line_start":242,"line_end":242,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80618,"byte_end":80624,"line_start":250,"line_end":250,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80876,"byte_end":80882,"line_start":260,"line_end":260,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81094,"byte_end":81100,"line_start":270,"line_end":270,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81273,"byte_end":81279,"line_start":279,"line_end":279,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81404,"byte_end":81410,"line_start":285,"line_end":285,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81549,"byte_end":81555,"line_start":291,"line_end":291,"column_start":23,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81590,"byte_end":81596,"line_start":293,"line_end":293,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81715,"byte_end":81721,"line_start":299,"line_end":299,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81851,"byte_end":81857,"line_start":306,"line_end":306,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89498,"byte_end":89506,"line_start":13,"line_end":13,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89594,"byte_end":89602,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89688,"byte_end":89696,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90303,"byte_end":90311,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90788,"byte_end":90796,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90983,"byte_end":90991,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91550,"byte_end":91558,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97235,"byte_end":97236,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97376,"byte_end":97377,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100600,"byte_end":100607,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100646,"byte_end":100653,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101533,"byte_end":101540,"line_start":81,"line_end":81,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101588,"byte_end":101595,"line_start":83,"line_end":83,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101745,"byte_end":101752,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101966,"byte_end":101973,"line_start":104,"line_end":104,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102157,"byte_end":102164,"line_start":110,"line_end":110,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102474,"byte_end":102481,"line_start":120,"line_end":120,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102598,"byte_end":102605,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103502,"byte_end":103509,"line_start":168,"line_end":168,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108583,"byte_end":108590,"line_start":368,"line_end":368,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109192,"byte_end":109199,"line_start":392,"line_end":392,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112041,"byte_end":112048,"line_start":470,"line_end":470,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112238,"byte_end":112245,"line_start":477,"line_end":477,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112382,"byte_end":112389,"line_start":484,"line_end":484,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112569,"byte_end":112576,"line_start":493,"line_end":493,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112816,"byte_end":112823,"line_start":502,"line_end":502,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113010,"byte_end":113017,"line_start":510,"line_end":510,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113268,"byte_end":113275,"line_start":519,"line_end":519,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113415,"byte_end":113422,"line_start":526,"line_end":526,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113632,"byte_end":113639,"line_start":535,"line_end":535,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113879,"byte_end":113886,"line_start":544,"line_end":544,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114073,"byte_end":114080,"line_start":552,"line_end":552,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114331,"byte_end":114338,"line_start":561,"line_end":561,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114489,"byte_end":114496,"line_start":568,"line_end":568,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114725,"byte_end":114732,"line_start":577,"line_end":577,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114890,"byte_end":114897,"line_start":584,"line_end":584,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115152,"byte_end":115159,"line_start":593,"line_end":593,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115342,"byte_end":115349,"line_start":601,"line_end":601,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1053},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115578,"byte_end":115585,"line_start":610,"line_end":610,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115743,"byte_end":115750,"line_start":617,"line_end":617,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1063},{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116005,"byte_end":116012,"line_start":626,"line_end":626,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116186,"byte_end":116193,"line_start":634,"line_end":634,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116300,"byte_end":116307,"line_start":641,"line_end":641,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116464,"byte_end":116471,"line_start":649,"line_end":649,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116626,"byte_end":116633,"line_start":657,"line_end":657,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116816,"byte_end":116823,"line_start":665,"line_end":665,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117148,"byte_end":117155,"line_start":677,"line_end":677,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117256,"byte_end":117263,"line_start":683,"line_end":683,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117368,"byte_end":117375,"line_start":689,"line_end":689,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117476,"byte_end":117483,"line_start":695,"line_end":695,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117804,"byte_end":117811,"line_start":713,"line_end":713,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117850,"byte_end":117857,"line_start":715,"line_end":715,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":118795,"byte_end":118802,"line_start":758,"line_end":758,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":118850,"byte_end":118857,"line_start":760,"line_end":760,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119028,"byte_end":119035,"line_start":769,"line_end":769,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119237,"byte_end":119244,"line_start":780,"line_end":780,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1139}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119495,"byte_end":119502,"line_start":790,"line_end":790,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119829,"byte_end":119836,"line_start":802,"line_end":802,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119973,"byte_end":119980,"line_start":808,"line_end":808,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120939,"byte_end":120946,"line_start":851,"line_end":851,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126552,"byte_end":126559,"line_start":1066,"line_end":1066,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127299,"byte_end":127306,"line_start":1098,"line_end":1098,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130234,"byte_end":130241,"line_start":1180,"line_end":1180,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130500,"byte_end":130507,"line_start":1191,"line_end":1191,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130644,"byte_end":130651,"line_start":1198,"line_end":1198,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1207},{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130840,"byte_end":130847,"line_start":1207,"line_end":1207,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131156,"byte_end":131163,"line_start":1220,"line_end":1220,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131381,"byte_end":131388,"line_start":1229,"line_end":1229,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1221},{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131657,"byte_end":131664,"line_start":1238,"line_end":1238,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131804,"byte_end":131811,"line_start":1245,"line_end":1245,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132039,"byte_end":132046,"line_start":1254,"line_end":1254,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132355,"byte_end":132362,"line_start":1267,"line_end":1267,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1240}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132580,"byte_end":132587,"line_start":1276,"line_end":1276,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1244},{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132856,"byte_end":132863,"line_start":1285,"line_end":1285,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133014,"byte_end":133021,"line_start":1292,"line_end":1292,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133313,"byte_end":133320,"line_start":1305,"line_end":1305,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133539,"byte_end":133546,"line_start":1314,"line_end":1314,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133874,"byte_end":133881,"line_start":1327,"line_end":1327,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134028,"byte_end":134035,"line_start":1334,"line_end":1334,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134327,"byte_end":134334,"line_start":1347,"line_end":1347,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134553,"byte_end":134560,"line_start":1356,"line_end":1356,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134888,"byte_end":134895,"line_start":1369,"line_end":1369,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135033,"byte_end":135040,"line_start":1376,"line_end":1376,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135147,"byte_end":135154,"line_start":1383,"line_end":1383,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135311,"byte_end":135318,"line_start":1391,"line_end":1391,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135473,"byte_end":135480,"line_start":1399,"line_end":1399,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135663,"byte_end":135670,"line_start":1407,"line_end":1407,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136129,"byte_end":136136,"line_start":1425,"line_end":1425,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136245,"byte_end":136252,"line_start":1431,"line_end":1431,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136366,"byte_end":136373,"line_start":1437,"line_end":1437,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136488,"byte_end":136495,"line_start":1443,"line_end":1443,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151410,"byte_end":151414,"line_start":42,"line_end":42,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151557,"byte_end":151561,"line_start":49,"line_end":49,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151600,"byte_end":151604,"line_start":51,"line_end":51,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151746,"byte_end":151750,"line_start":57,"line_end":57,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151898,"byte_end":151902,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151951,"byte_end":151955,"line_start":65,"line_end":65,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1387}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152238,"byte_end":152242,"line_start":75,"line_end":75,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152519,"byte_end":152523,"line_start":85,"line_end":85,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152637,"byte_end":152641,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1399}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152809,"byte_end":152813,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153214,"byte_end":153218,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154486,"byte_end":154490,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155009,"byte_end":155013,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155370,"byte_end":155374,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155794,"byte_end":155798,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156380,"byte_end":156384,"line_start":256,"line_end":256,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157231,"byte_end":157235,"line_start":279,"line_end":279,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157853,"byte_end":157857,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158670,"byte_end":158674,"line_start":320,"line_end":320,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159042,"byte_end":159046,"line_start":334,"line_end":334,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159269,"byte_end":159273,"line_start":344,"line_end":344,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159657,"byte_end":159661,"line_start":361,"line_end":361,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159999,"byte_end":160003,"line_start":374,"line_end":374,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160119,"byte_end":160123,"line_start":381,"line_end":381,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160360,"byte_end":160364,"line_start":388,"line_end":388,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160523,"byte_end":160527,"line_start":395,"line_end":395,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160760,"byte_end":160764,"line_start":406,"line_end":406,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160993,"byte_end":160997,"line_start":415,"line_end":415,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161141,"byte_end":161145,"line_start":422,"line_end":422,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1495},{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161374,"byte_end":161378,"line_start":431,"line_end":431,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161542,"byte_end":161546,"line_start":438,"line_end":438,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1505},{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161805,"byte_end":161809,"line_start":447,"line_end":447,"column_start":61,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1510}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162016,"byte_end":162020,"line_start":455,"line_end":455,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162279,"byte_end":162283,"line_start":464,"line_end":464,"column_start":61,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162452,"byte_end":162456,"line_start":472,"line_end":472,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163097,"byte_end":163101,"line_start":495,"line_end":495,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166445,"byte_end":166449,"line_start":583,"line_end":583,"column_start":76,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168511,"byte_end":168515,"line_start":634,"line_end":634,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179038,"byte_end":179054,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179367,"byte_end":179383,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179665,"byte_end":179681,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":184522,"byte_end":184538,"line_start":201,"line_end":201,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":184714,"byte_end":184730,"line_start":208,"line_end":208,"column_start":67,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":1602}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188764,"byte_end":188774,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188827,"byte_end":188837,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1649}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189019,"byte_end":189029,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189091,"byte_end":189101,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189252,"byte_end":189262,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189407,"byte_end":189417,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189968,"byte_end":189978,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191623,"byte_end":191633,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191847,"byte_end":191857,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1697}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193529,"byte_end":193539,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194966,"byte_end":194976,"line_start":260,"line_end":260,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195029,"byte_end":195039,"line_start":262,"line_end":262,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1720}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195306,"byte_end":195316,"line_start":274,"line_end":274,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195378,"byte_end":195388,"line_start":276,"line_end":276,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195594,"byte_end":195604,"line_start":285,"line_end":285,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195817,"byte_end":195827,"line_start":297,"line_end":297,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1740},{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196698,"byte_end":196708,"line_start":328,"line_end":328,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1750},{"krate":0,"index":1751}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199255,"byte_end":199265,"line_start":412,"line_end":412,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":209170,"byte_end":209180,"line_start":723,"line_end":723,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":209450,"byte_end":209460,"line_start":733,"line_end":733,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":209707,"byte_end":209717,"line_start":743,"line_end":743,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1795},{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220367,"byte_end":220372,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223609,"byte_end":223614,"line_start":181,"line_end":181,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224212,"byte_end":224217,"line_start":209,"line_end":209,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1845},{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226034,"byte_end":226039,"line_start":266,"line_end":266,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226286,"byte_end":226291,"line_start":273,"line_end":273,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1858},{"krate":0,"index":1859}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226514,"byte_end":226519,"line_start":283,"line_end":283,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1864},{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226754,"byte_end":226759,"line_start":293,"line_end":293,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1870},{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227117,"byte_end":227122,"line_start":305,"line_end":305,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1876}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227257,"byte_end":227262,"line_start":311,"line_end":311,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227325,"byte_end":227330,"line_start":313,"line_end":313,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1885}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227485,"byte_end":227490,"line_start":319,"line_end":319,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1890}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227625,"byte_end":227630,"line_start":325,"line_end":325,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227763,"byte_end":227768,"line_start":331,"line_end":331,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227831,"byte_end":227836,"line_start":333,"line_end":333,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227991,"byte_end":227996,"line_start":339,"line_end":339,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":228141,"byte_end":228146,"line_start":345,"line_end":345,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":228263,"byte_end":228268,"line_start":351,"line_end":351,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":228398,"byte_end":228403,"line_start":357,"line_end":357,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1925}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230941,"byte_end":230954,"line_start":42,"line_end":42,"column_start":27,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230993,"byte_end":231006,"line_start":44,"line_end":44,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231290,"byte_end":231303,"line_start":56,"line_end":56,"column_start":19,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231351,"byte_end":231364,"line_start":58,"line_end":58,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1965}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231620,"byte_end":231633,"line_start":70,"line_end":70,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1969}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231873,"byte_end":231886,"line_start":82,"line_end":82,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232130,"byte_end":232143,"line_start":92,"line_end":92,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232419,"byte_end":232432,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234645,"byte_end":234658,"line_start":178,"line_end":178,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1990},{"krate":0,"index":1991}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235056,"byte_end":235069,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235285,"byte_end":235298,"line_start":203,"line_end":203,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2000},{"krate":0,"index":2001}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235616,"byte_end":235629,"line_start":218,"line_end":218,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2005}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235841,"byte_end":235854,"line_start":225,"line_end":225,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2009},{"krate":0,"index":2010}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":236214,"byte_end":236227,"line_start":239,"line_end":239,"column_start":48,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2014}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":236493,"byte_end":236506,"line_start":249,"line_end":249,"column_start":56,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2019},{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":236904,"byte_end":236917,"line_start":263,"line_end":263,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":2024}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":237064,"byte_end":237077,"line_start":270,"line_end":270,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2028},{"krate":0,"index":2029}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":237437,"byte_end":237450,"line_start":284,"line_end":284,"column_start":48,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2033}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":237716,"byte_end":237729,"line_start":294,"line_end":294,"column_start":56,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2038},{"krate":0,"index":2039}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":238127,"byte_end":238140,"line_start":308,"line_end":308,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242561,"byte_end":242567,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242606,"byte_end":242612,"line_start":42,"line_end":42,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2091}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":243651,"byte_end":243657,"line_start":85,"line_end":85,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":243705,"byte_end":243711,"line_start":87,"line_end":87,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":243879,"byte_end":243885,"line_start":96,"line_end":96,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2102}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244072,"byte_end":244078,"line_start":106,"line_end":106,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244305,"byte_end":244311,"line_start":114,"line_end":114,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2111}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244582,"byte_end":244588,"line_start":124,"line_end":124,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2115}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244704,"byte_end":244710,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245581,"byte_end":245587,"line_start":164,"line_end":164,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2126},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248967,"byte_end":248973,"line_start":287,"line_end":287,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2143},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252150,"byte_end":252156,"line_start":375,"line_end":375,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2155},{"krate":0,"index":2156}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252751,"byte_end":252757,"line_start":391,"line_end":391,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254439,"byte_end":254445,"line_start":444,"line_end":444,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255006,"byte_end":255012,"line_start":462,"line_end":462,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2174}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255171,"byte_end":255177,"line_start":470,"line_end":470,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255334,"byte_end":255340,"line_start":478,"line_end":478,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2182}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255499,"byte_end":255505,"line_start":486,"line_end":486,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255633,"byte_end":255639,"line_start":493,"line_end":493,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255818,"byte_end":255824,"line_start":502,"line_end":502,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2195},{"krate":0,"index":2196}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256055,"byte_end":256061,"line_start":511,"line_end":511,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256233,"byte_end":256239,"line_start":519,"line_end":519,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256470,"byte_end":256476,"line_start":528,"line_end":528,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2209}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256659,"byte_end":256665,"line_start":536,"line_end":536,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2213},{"krate":0,"index":2214}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256899,"byte_end":256905,"line_start":545,"line_end":545,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257100,"byte_end":257106,"line_start":553,"line_end":553,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2223},{"krate":0,"index":2224}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257374,"byte_end":257380,"line_start":562,"line_end":562,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2228}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257527,"byte_end":257533,"line_start":569,"line_end":569,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2232},{"krate":0,"index":2233}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257767,"byte_end":257773,"line_start":578,"line_end":578,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2237}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257968,"byte_end":257974,"line_start":586,"line_end":586,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2242},{"krate":0,"index":2243}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":258242,"byte_end":258248,"line_start":595,"line_end":595,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2247}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259006,"byte_end":259012,"line_start":630,"line_end":630,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2254}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259137,"byte_end":259143,"line_start":637,"line_end":637,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259267,"byte_end":259273,"line_start":644,"line_end":644,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2265}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259391,"byte_end":259397,"line_start":651,"line_end":651,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2270}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259521,"byte_end":259527,"line_start":658,"line_end":658,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2274}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265704,"byte_end":265710,"line_start":879,"line_end":879,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265749,"byte_end":265755,"line_start":881,"line_end":881,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2288}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":266754,"byte_end":266760,"line_start":924,"line_end":924,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":266808,"byte_end":266814,"line_start":926,"line_end":926,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267011,"byte_end":267017,"line_start":935,"line_end":935,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2299}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267232,"byte_end":267238,"line_start":946,"line_end":946,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2304}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267532,"byte_end":267538,"line_start":956,"line_end":956,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2308}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267878,"byte_end":267884,"line_start":968,"line_end":968,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268020,"byte_end":268026,"line_start":974,"line_end":974,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268966,"byte_end":268972,"line_start":1009,"line_end":1009,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2323},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272573,"byte_end":272579,"line_start":1132,"line_end":1132,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275487,"byte_end":275493,"line_start":1214,"line_end":1214,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2351},{"krate":0,"index":2352}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276133,"byte_end":276139,"line_start":1230,"line_end":1230,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277972,"byte_end":277978,"line_start":1291,"line_end":1291,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2365},{"krate":0,"index":2366}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278623,"byte_end":278629,"line_start":1311,"line_end":1311,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2370}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278788,"byte_end":278794,"line_start":1319,"line_end":1319,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2374}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278951,"byte_end":278957,"line_start":1327,"line_end":1327,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2378}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279116,"byte_end":279122,"line_start":1335,"line_end":1335,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2382}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279264,"byte_end":279270,"line_start":1342,"line_end":1342,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2386},{"krate":0,"index":2387}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279462,"byte_end":279468,"line_start":1351,"line_end":1351,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2391},{"krate":0,"index":2392}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279772,"byte_end":279778,"line_start":1364,"line_end":1364,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2396}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279985,"byte_end":279991,"line_start":1373,"line_end":1373,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2400},{"krate":0,"index":2401}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":280295,"byte_end":280301,"line_start":1386,"line_end":1386,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2405}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":280519,"byte_end":280525,"line_start":1395,"line_end":1395,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2409},{"krate":0,"index":2410}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":280834,"byte_end":280840,"line_start":1408,"line_end":1408,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2414}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281072,"byte_end":281078,"line_start":1417,"line_end":1417,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2419},{"krate":0,"index":2420}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281423,"byte_end":281429,"line_start":1430,"line_end":1430,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2424}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281576,"byte_end":281582,"line_start":1437,"line_end":1437,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2429}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281891,"byte_end":281897,"line_start":1450,"line_end":1450,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":282129,"byte_end":282135,"line_start":1459,"line_end":1459,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2438},{"krate":0,"index":2439}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":282480,"byte_end":282486,"line_start":1472,"line_end":1472,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2443}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283063,"byte_end":283069,"line_start":1498,"line_end":1498,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2447}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283199,"byte_end":283205,"line_start":1505,"line_end":1505,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2452}],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283341,"byte_end":283347,"line_start":1512,"line_end":1512,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2458}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283474,"byte_end":283480,"line_start":1519,"line_end":1519,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2463}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283622,"byte_end":283628,"line_start":1526,"line_end":1526,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291651,"byte_end":291662,"line_start":55,"line_end":55,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291715,"byte_end":291726,"line_start":57,"line_end":57,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2520}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293001,"byte_end":293012,"line_start":107,"line_end":107,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293074,"byte_end":293085,"line_start":109,"line_end":109,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2529}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293416,"byte_end":293427,"line_start":122,"line_end":122,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293700,"byte_end":293711,"line_start":136,"line_end":136,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295761,"byte_end":295772,"line_start":191,"line_end":191,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2555},{"krate":0,"index":2557},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2564},{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299952,"byte_end":299963,"line_start":314,"line_end":314,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2573}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300888,"byte_end":300899,"line_start":340,"line_end":340,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2579},{"krate":0,"index":2580}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301540,"byte_end":301551,"line_start":369,"line_end":369,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2585},{"krate":0,"index":2587}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302806,"byte_end":302817,"line_start":403,"line_end":403,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2593},{"krate":0,"index":2596},{"krate":0,"index":2597}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303966,"byte_end":303977,"line_start":448,"line_end":448,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304992,"byte_end":305003,"line_start":481,"line_end":481,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2609},{"krate":0,"index":2611},{"krate":0,"index":2612}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306131,"byte_end":306142,"line_start":529,"line_end":529,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307572,"byte_end":307583,"line_start":575,"line_end":575,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":308725,"byte_end":308736,"line_start":615,"line_end":615,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2631}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":308944,"byte_end":308955,"line_start":624,"line_end":624,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2636},{"krate":0,"index":2637}],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":309541,"byte_end":309552,"line_start":637,"line_end":637,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317836,"byte_end":317847,"line_start":58,"line_end":58,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317900,"byte_end":317911,"line_start":60,"line_end":60,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":319782,"byte_end":319793,"line_start":123,"line_end":123,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":319855,"byte_end":319866,"line_start":125,"line_end":125,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2717}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":320567,"byte_end":320578,"line_start":148,"line_end":148,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2722}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321111,"byte_end":321122,"line_start":172,"line_end":172,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2728},{"krate":0,"index":2729},{"krate":0,"index":2732},{"krate":0,"index":2733}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324272,"byte_end":324283,"line_start":265,"line_end":265,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2745},{"krate":0,"index":2748},{"krate":0,"index":2750},{"krate":0,"index":2753},{"krate":0,"index":2754},{"krate":0,"index":2755},{"krate":0,"index":2757},{"krate":0,"index":2759}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330498,"byte_end":330509,"line_start":422,"line_end":422,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2764},{"krate":0,"index":2765},{"krate":0,"index":2766},{"krate":0,"index":2769}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332273,"byte_end":332284,"line_start":495,"line_end":495,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2776},{"krate":0,"index":2778}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334819,"byte_end":334830,"line_start":540,"line_end":540,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2784},{"krate":0,"index":2787},{"krate":0,"index":2788}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":336047,"byte_end":336058,"line_start":585,"line_end":585,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2795}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337780,"byte_end":337791,"line_start":640,"line_end":640,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2800},{"krate":0,"index":2803},{"krate":0,"index":2804}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339176,"byte_end":339187,"line_start":690,"line_end":690,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2809},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2815}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":343723,"byte_end":343734,"line_start":810,"line_end":810,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":351309,"byte_end":351320,"line_start":981,"line_end":981,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2831}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":352866,"byte_end":352877,"line_start":1022,"line_end":1022,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2836},{"krate":0,"index":2838}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354382,"byte_end":354393,"line_start":1053,"line_end":1053,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2844},{"krate":0,"index":2845}],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":355361,"byte_end":355372,"line_start":1078,"line_end":1078,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2850},{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":356306,"byte_end":356317,"line_start":1094,"line_end":1094,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2856}],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":356511,"byte_end":356522,"line_start":1103,"line_end":1103,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2861}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370520,"byte_end":370533,"line_start":58,"line_end":58,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370586,"byte_end":370599,"line_start":60,"line_end":60,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2908}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370807,"byte_end":370820,"line_start":70,"line_end":70,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370882,"byte_end":370895,"line_start":72,"line_end":72,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2917}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371059,"byte_end":371072,"line_start":81,"line_end":81,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371237,"byte_end":371250,"line_start":91,"line_end":91,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2928},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2931}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372410,"byte_end":372423,"line_start":136,"line_end":136,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945},{"krate":0,"index":2946}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374648,"byte_end":374661,"line_start":227,"line_end":227,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2953}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374949,"byte_end":374962,"line_start":235,"line_end":235,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2958}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375175,"byte_end":375188,"line_start":242,"line_end":242,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":2964},{"krate":0,"index":2965}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375476,"byte_end":375489,"line_start":250,"line_end":250,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":2970}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375679,"byte_end":375692,"line_start":257,"line_end":257,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2975}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375842,"byte_end":375855,"line_start":263,"line_end":263,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2980}],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376002,"byte_end":376015,"line_start":269,"line_end":269,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":2985}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376199,"byte_end":376212,"line_start":278,"line_end":278,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2990}],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376353,"byte_end":376366,"line_start":287,"line_end":287,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2995}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376559,"byte_end":376572,"line_start":293,"line_end":293,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3000}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":377097,"byte_end":377110,"line_start":312,"line_end":312,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":377163,"byte_end":377176,"line_start":314,"line_end":314,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3017}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378180,"byte_end":378193,"line_start":357,"line_end":357,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378255,"byte_end":378268,"line_start":359,"line_end":359,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3026}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378453,"byte_end":378466,"line_start":368,"line_end":368,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3031}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378655,"byte_end":378668,"line_start":379,"line_end":379,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379967,"byte_end":379980,"line_start":426,"line_end":426,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3045},{"krate":0,"index":3046},{"krate":0,"index":3048},{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3054},{"krate":0,"index":3055},{"krate":0,"index":3056},{"krate":0,"index":3057}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382836,"byte_end":382849,"line_start":540,"line_end":540,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3063},{"krate":0,"index":3064}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383155,"byte_end":383168,"line_start":548,"line_end":548,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3069}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383408,"byte_end":383421,"line_start":556,"line_end":556,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3075},{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383727,"byte_end":383740,"line_start":564,"line_end":564,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3081}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383957,"byte_end":383970,"line_start":572,"line_end":572,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3086}],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384125,"byte_end":384138,"line_start":578,"line_end":578,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3091}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384293,"byte_end":384306,"line_start":584,"line_end":584,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3096}],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384498,"byte_end":384511,"line_start":593,"line_end":593,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3101}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384652,"byte_end":384665,"line_start":602,"line_end":602,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3106}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384871,"byte_end":384884,"line_start":608,"line_end":608,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3111}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396499,"byte_end":396507,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396546,"byte_end":396554,"line_start":48,"line_end":48,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3176}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397442,"byte_end":397450,"line_start":89,"line_end":89,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397497,"byte_end":397505,"line_start":91,"line_end":91,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3183}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397637,"byte_end":397645,"line_start":97,"line_end":97,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3187}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397792,"byte_end":397800,"line_start":104,"line_end":104,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397997,"byte_end":398005,"line_start":112,"line_end":112,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3196}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398189,"byte_end":398197,"line_start":118,"line_end":118,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3200}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398477,"byte_end":398485,"line_start":130,"line_end":130,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398603,"byte_end":398611,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3211},{"krate":0,"index":3212},{"krate":0,"index":3213},{"krate":0,"index":3214},{"krate":0,"index":3215}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400733,"byte_end":400741,"line_start":222,"line_end":222,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3219},{"krate":0,"index":3220},{"krate":0,"index":3221},{"krate":0,"index":3222},{"krate":0,"index":3223},{"krate":0,"index":3224},{"krate":0,"index":3226},{"krate":0,"index":3228},{"krate":0,"index":3229},{"krate":0,"index":3230},{"krate":0,"index":3231},{"krate":0,"index":3232},{"krate":0,"index":3233},{"krate":0,"index":3234}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404277,"byte_end":404285,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3238},{"krate":0,"index":3239},{"krate":0,"index":3240}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405174,"byte_end":405182,"line_start":397,"line_end":397,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3246},{"krate":0,"index":3247},{"krate":0,"index":3248},{"krate":0,"index":3249},{"krate":0,"index":3250}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407183,"byte_end":407191,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3254},{"krate":0,"index":3255}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408309,"byte_end":408317,"line_start":504,"line_end":504,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409622,"byte_end":409630,"line_start":548,"line_end":548,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3267},{"krate":0,"index":3268}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410182,"byte_end":410190,"line_start":568,"line_end":568,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3272},{"krate":0,"index":3274},{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3278},{"krate":0,"index":3279},{"krate":0,"index":3280},{"krate":0,"index":3281}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413050,"byte_end":413058,"line_start":646,"line_end":646,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3285},{"krate":0,"index":3286}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413223,"byte_end":413231,"line_start":655,"line_end":655,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3290},{"krate":0,"index":3291}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413464,"byte_end":413472,"line_start":664,"line_end":664,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3295}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413602,"byte_end":413610,"line_start":671,"line_end":671,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3299},{"krate":0,"index":3300}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413850,"byte_end":413858,"line_start":680,"line_end":680,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":3304}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413999,"byte_end":414007,"line_start":687,"line_end":687,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3308},{"krate":0,"index":3309}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414235,"byte_end":414243,"line_start":696,"line_end":696,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3313}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414401,"byte_end":414409,"line_start":703,"line_end":703,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3318},{"krate":0,"index":3319}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414663,"byte_end":414671,"line_start":712,"line_end":712,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3323}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414854,"byte_end":414862,"line_start":720,"line_end":720,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3327},{"krate":0,"index":3328}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415090,"byte_end":415098,"line_start":729,"line_end":729,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3332}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415256,"byte_end":415264,"line_start":736,"line_end":736,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3337},{"krate":0,"index":3338}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415518,"byte_end":415526,"line_start":745,"line_end":745,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3342}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415702,"byte_end":415710,"line_start":753,"line_end":753,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3346}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415870,"byte_end":415878,"line_start":761,"line_end":761,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3350}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416036,"byte_end":416044,"line_start":769,"line_end":769,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3354}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416231,"byte_end":416239,"line_start":777,"line_end":777,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3358},{"krate":0,"index":3359}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416562,"byte_end":416570,"line_start":789,"line_end":789,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3364}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416671,"byte_end":416679,"line_start":795,"line_end":795,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3370}],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416782,"byte_end":416790,"line_start":801,"line_end":801,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3375}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416891,"byte_end":416899,"line_start":807,"line_end":807,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3379}],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417019,"byte_end":417027,"line_start":813,"line_end":813,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3383}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417523,"byte_end":417531,"line_start":834,"line_end":834,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417570,"byte_end":417578,"line_start":836,"line_end":836,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3397}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418524,"byte_end":418532,"line_start":879,"line_end":879,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418579,"byte_end":418587,"line_start":881,"line_end":881,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3404}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418740,"byte_end":418748,"line_start":887,"line_end":887,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3408}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418919,"byte_end":418927,"line_start":895,"line_end":895,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3413}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419129,"byte_end":419137,"line_start":903,"line_end":903,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3417}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419388,"byte_end":419396,"line_start":913,"line_end":913,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3421}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419723,"byte_end":419731,"line_start":925,"line_end":925,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3425}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419869,"byte_end":419877,"line_start":931,"line_end":931,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3429},{"krate":0,"index":3430},{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3434}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421627,"byte_end":421635,"line_start":1002,"line_end":1002,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3445},{"krate":0,"index":3447},{"krate":0,"index":3448},{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3452},{"krate":0,"index":3453},{"krate":0,"index":3454},{"krate":0,"index":3455},{"krate":0,"index":3456}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425526,"byte_end":425534,"line_start":1157,"line_end":1157,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3460},{"krate":0,"index":3461}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426123,"byte_end":426131,"line_start":1179,"line_end":1179,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3465},{"krate":0,"index":3466},{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428475,"byte_end":428483,"line_start":1264,"line_end":1264,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3476},{"krate":0,"index":3477}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429643,"byte_end":429651,"line_start":1299,"line_end":1299,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3484},{"krate":0,"index":3485}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431160,"byte_end":431168,"line_start":1353,"line_end":1353,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3489},{"krate":0,"index":3490}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431788,"byte_end":431796,"line_start":1375,"line_end":1375,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3494},{"krate":0,"index":3496},{"krate":0,"index":3498},{"krate":0,"index":3499},{"krate":0,"index":3500},{"krate":0,"index":3501},{"krate":0,"index":3502},{"krate":0,"index":3503}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434733,"byte_end":434741,"line_start":1457,"line_end":1457,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3507},{"krate":0,"index":3508}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434915,"byte_end":434923,"line_start":1466,"line_end":1466,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3512},{"krate":0,"index":3513}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435165,"byte_end":435173,"line_start":1475,"line_end":1475,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3517}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435303,"byte_end":435311,"line_start":1482,"line_end":1482,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3521},{"krate":0,"index":3522}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435569,"byte_end":435577,"line_start":1491,"line_end":1491,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":3526}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435718,"byte_end":435726,"line_start":1498,"line_end":1498,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3530},{"krate":0,"index":3531}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436025,"byte_end":436033,"line_start":1511,"line_end":1511,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3535}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436191,"byte_end":436199,"line_start":1518,"line_end":1518,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3540},{"krate":0,"index":3541}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436526,"byte_end":436534,"line_start":1531,"line_end":1531,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3545}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436752,"byte_end":436760,"line_start":1540,"line_end":1540,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3549},{"krate":0,"index":3550}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437059,"byte_end":437067,"line_start":1553,"line_end":1553,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3554}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437225,"byte_end":437233,"line_start":1560,"line_end":1560,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3559},{"krate":0,"index":3560}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437560,"byte_end":437568,"line_start":1573,"line_end":1573,"column_start":61,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":3564}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437779,"byte_end":437787,"line_start":1582,"line_end":1582,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3568}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437947,"byte_end":437955,"line_start":1590,"line_end":1590,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3572}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438113,"byte_end":438121,"line_start":1598,"line_end":1598,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3576}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438308,"byte_end":438316,"line_start":1606,"line_end":1606,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3580},{"krate":0,"index":3581}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438773,"byte_end":438781,"line_start":1624,"line_end":1624,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438890,"byte_end":438898,"line_start":1630,"line_end":1630,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3592}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439010,"byte_end":439018,"line_start":1636,"line_end":1636,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3597}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439133,"byte_end":439141,"line_start":1642,"line_end":1642,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3601}],"docs":"","sig":null,"attributes":[]},{"id":570,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439635,"byte_end":439647,"line_start":1663,"line_end":1663,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609},{"krate":0,"index":3612},{"krate":0,"index":3615}],"docs":"","sig":null,"attributes":[]},{"id":571,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442088,"byte_end":442100,"line_start":1740,"line_end":1740,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3619},{"krate":0,"index":3620},{"krate":0,"index":3621},{"krate":0,"index":3622},{"krate":0,"index":3623},{"krate":0,"index":3624},{"krate":0,"index":3625},{"krate":0,"index":3628},{"krate":0,"index":3631},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2727,"byte_end":2735,"line_start":68,"line_end":68,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":151}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2745,"byte_end":2754,"line_start":69,"line_end":69,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":158}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/lib.rs","byte_start":2825,"byte_end":2828,"line_start":75,"line_end":75,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":840}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6635,"byte_end":6640,"line_start":26,"line_end":26,"column_start":9,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":6814,"byte_end":6819,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7087,"byte_end":7092,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":7631,"byte_end":7636,"line_start":75,"line_end":75,"column_start":9,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8321,"byte_end":8326,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8477,"byte_end":8482,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":8586,"byte_end":8591,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9031,"byte_end":9036,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9751,"byte_end":9756,"line_start":176,"line_end":176,"column_start":37,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":9936,"byte_end":9941,"line_start":183,"line_end":183,"column_start":37,"column_end":42},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10089,"byte_end":10094,"line_start":189,"line_end":189,"column_start":47,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10287,"byte_end":10292,"line_start":196,"line_end":196,"column_start":37,"column_end":42},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10440,"byte_end":10445,"line_start":202,"line_end":202,"column_start":47,"column_end":52},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10612,"byte_end":10617,"line_start":210,"line_end":210,"column_start":40,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10801,"byte_end":10806,"line_start":218,"line_end":218,"column_start":40,"column_end":45},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":10934,"byte_end":10939,"line_start":224,"line_end":224,"column_start":40,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":11123,"byte_end":11128,"line_start":232,"line_end":232,"column_start":40,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":11250,"byte_end":11255,"line_start":238,"line_end":238,"column_start":34,"column_end":39},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3687},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/angle.rs","byte_start":11396,"byte_end":11401,"line_start":245,"line_end":245,"column_start":38,"column_end":43},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3687},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18725,"byte_end":18730,"line_start":63,"line_end":63,"column_start":27,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18869,"byte_end":18874,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":18913,"byte_end":18918,"line_start":72,"line_end":72,"column_start":29,"column_end":34},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19056,"byte_end":19061,"line_start":78,"line_end":78,"column_start":37,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19201,"byte_end":19206,"line_start":84,"line_end":84,"column_start":23,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19255,"byte_end":19260,"line_start":86,"line_end":86,"column_start":39,"column_end":44},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19492,"byte_end":19497,"line_start":95,"line_end":95,"column_start":43,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19748,"byte_end":19753,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":19915,"byte_end":19920,"line_start":113,"line_end":113,"column_start":12,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":21651,"byte_end":21656,"line_start":162,"line_end":162,"column_start":12,"column_end":17},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":22918,"byte_end":22923,"line_start":206,"line_end":206,"column_start":12,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23208,"byte_end":23213,"line_start":220,"line_end":220,"column_start":12,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":23695,"byte_end":23700,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":24915,"byte_end":24920,"line_start":284,"line_end":284,"column_start":12,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26176,"byte_end":26181,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26494,"byte_end":26499,"line_start":344,"line_end":344,"column_start":12,"column_end":17},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26720,"byte_end":26725,"line_start":354,"line_end":354,"column_start":12,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":26924,"byte_end":26929,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27106,"byte_end":27111,"line_start":375,"line_end":375,"column_start":12,"column_end":17},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27342,"byte_end":27347,"line_start":386,"line_end":386,"column_start":36,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27574,"byte_end":27579,"line_start":395,"line_end":395,"column_start":48,"column_end":53},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27723,"byte_end":27728,"line_start":402,"line_end":402,"column_start":36,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":27955,"byte_end":27960,"line_start":411,"line_end":411,"column_start":48,"column_end":53},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28124,"byte_end":28129,"line_start":418,"line_end":418,"column_start":56,"column_end":61},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28386,"byte_end":28391,"line_start":427,"line_end":427,"column_start":61,"column_end":66},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28594,"byte_end":28599,"line_start":435,"line_end":435,"column_start":56,"column_end":61},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":28856,"byte_end":28861,"line_start":444,"line_end":444,"column_start":61,"column_end":66},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29020,"byte_end":29025,"line_start":452,"line_end":452,"column_start":12,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":29907,"byte_end":29912,"line_start":486,"line_end":486,"column_start":28,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":32751,"byte_end":32756,"line_start":564,"line_end":564,"column_start":12,"column_end":17},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":33431,"byte_end":33436,"line_start":583,"line_end":583,"column_start":12,"column_end":17},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box2d.rs","byte_start":34098,"byte_end":34103,"line_start":606,"line_end":606,"column_start":35,"column_end":40},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":194},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42582,"byte_end":42587,"line_start":41,"line_end":41,"column_start":27,"column_end":32},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42726,"byte_end":42731,"line_start":48,"line_end":48,"column_start":27,"column_end":32},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42770,"byte_end":42775,"line_start":50,"line_end":50,"column_start":29,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":42913,"byte_end":42918,"line_start":56,"line_end":56,"column_start":37,"column_end":42},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43058,"byte_end":43063,"line_start":62,"line_end":62,"column_start":23,"column_end":28},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43112,"byte_end":43117,"line_start":64,"line_end":64,"column_start":39,"column_end":44},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43349,"byte_end":43354,"line_start":73,"line_end":73,"column_start":43,"column_end":48},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43605,"byte_end":43610,"line_start":83,"line_end":83,"column_start":12,"column_end":17},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":43772,"byte_end":43777,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":45822,"byte_end":45827,"line_start":148,"line_end":148,"column_start":12,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47300,"byte_end":47305,"line_start":204,"line_end":204,"column_start":12,"column_end":17},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":47608,"byte_end":47613,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48132,"byte_end":48137,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":48603,"byte_end":48608,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50049,"byte_end":50054,"line_start":318,"line_end":318,"column_start":12,"column_end":17},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50371,"byte_end":50376,"line_start":329,"line_end":329,"column_start":12,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":50597,"byte_end":50602,"line_start":339,"line_end":339,"column_start":12,"column_end":17},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51172,"byte_end":51177,"line_start":368,"line_end":368,"column_start":12,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51354,"byte_end":51359,"line_start":378,"line_end":378,"column_start":12,"column_end":17},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51620,"byte_end":51625,"line_start":389,"line_end":389,"column_start":36,"column_end":41},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":51852,"byte_end":51857,"line_start":398,"line_end":398,"column_start":48,"column_end":53},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52027,"byte_end":52032,"line_start":406,"line_end":406,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52259,"byte_end":52264,"line_start":415,"line_end":415,"column_start":48,"column_end":53},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52454,"byte_end":52459,"line_start":423,"line_end":423,"column_start":56,"column_end":61},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52716,"byte_end":52721,"line_start":432,"line_end":432,"column_start":61,"column_end":66},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":52924,"byte_end":52929,"line_start":440,"line_end":440,"column_start":56,"column_end":61},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53186,"byte_end":53191,"line_start":449,"line_end":449,"column_start":61,"column_end":66},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":53350,"byte_end":53355,"line_start":457,"line_end":457,"column_start":12,"column_end":17},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":54363,"byte_end":54368,"line_start":497,"line_end":497,"column_start":28,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57227,"byte_end":57232,"line_start":575,"line_end":575,"column_start":12,"column_end":17},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":57911,"byte_end":57916,"line_start":594,"line_end":594,"column_start":12,"column_end":17},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/box3d.rs","byte_start":58584,"byte_end":58589,"line_start":619,"line_end":619,"column_start":35,"column_end":40},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":388},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68888,"byte_end":68905,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":68944,"byte_end":68961,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":69997,"byte_end":70014,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70062,"byte_end":70079,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70271,"byte_end":70288,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70487,"byte_end":70504,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":70830,"byte_end":70847,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71654,"byte_end":71671,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":71849,"byte_end":71866,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72043,"byte_end":72060,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72234,"byte_end":72251,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72417,"byte_end":72434,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/homogen.rs","byte_start":72713,"byte_end":72730,"line_start":187,"line_end":187,"column_start":43,"column_end":60},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":576},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75538,"byte_end":75544,"line_start":42,"line_end":42,"column_start":29,"column_end":35},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":75662,"byte_end":75668,"line_start":48,"line_end":48,"column_start":27,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76236,"byte_end":76242,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":76410,"byte_end":76416,"line_start":84,"line_end":84,"column_start":19,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77521,"byte_end":77527,"line_start":122,"line_end":122,"column_start":29,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":77985,"byte_end":77991,"line_start":135,"line_end":135,"column_start":39,"column_end":45},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78132,"byte_end":78138,"line_start":141,"line_end":141,"column_start":43,"column_end":49},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78269,"byte_end":78275,"line_start":147,"line_end":147,"column_start":33,"column_end":39},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78400,"byte_end":78406,"line_start":154,"line_end":154,"column_start":27,"column_end":33},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78534,"byte_end":78540,"line_start":161,"line_end":161,"column_start":25,"column_end":31},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78741,"byte_end":78747,"line_start":170,"line_end":170,"column_start":37,"column_end":43},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":78879,"byte_end":78885,"line_start":177,"line_end":177,"column_start":25,"column_end":31},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79094,"byte_end":79100,"line_start":186,"line_end":186,"column_start":37,"column_end":43},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79278,"byte_end":79284,"line_start":193,"line_end":193,"column_start":39,"column_end":45},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":661},"to":{"krate":4,"index":431}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79581,"byte_end":79587,"line_start":204,"line_end":204,"column_start":48,"column_end":54},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":79809,"byte_end":79815,"line_start":214,"line_end":214,"column_start":28,"column_end":34},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80044,"byte_end":80050,"line_start":224,"line_end":224,"column_start":56,"column_end":62},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80199,"byte_end":80205,"line_start":232,"line_end":232,"column_start":28,"column_end":34},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80434,"byte_end":80440,"line_start":242,"line_end":242,"column_start":56,"column_end":62},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80618,"byte_end":80624,"line_start":250,"line_end":250,"column_start":52,"column_end":58},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":80876,"byte_end":80882,"line_start":260,"line_end":260,"column_start":52,"column_end":58},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81094,"byte_end":81100,"line_start":270,"line_end":270,"column_start":25,"column_end":31},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81273,"byte_end":81279,"line_start":279,"line_end":279,"column_start":37,"column_end":43},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81404,"byte_end":81410,"line_start":285,"line_end":285,"column_start":39,"column_end":45},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1656}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81549,"byte_end":81555,"line_start":291,"line_end":291,"column_start":23,"column_end":29},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81590,"byte_end":81596,"line_start":293,"line_end":293,"column_start":25,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":661},"to":{"krate":1,"index":1645}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81715,"byte_end":81721,"line_start":299,"line_end":299,"column_start":27,"column_end":33},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":661},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/length.rs","byte_start":81851,"byte_end":81857,"line_start":306,"line_end":306,"column_start":41,"column_end":47},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":661},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89498,"byte_end":89506,"line_start":13,"line_end":13,"column_start":19,"column_end":27},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3729},"to":{"krate":1,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89594,"byte_end":89602,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":89688,"byte_end":89696,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90303,"byte_end":90311,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90788,"byte_end":90796,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":90983,"byte_end":90991,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/nonempty.rs","byte_start":91550,"byte_end":91558,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97235,"byte_end":97236,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":845},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97376,"byte_end":97377,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":850},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97518,"byte_end":97522,"line_start":49,"line_end":49,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1893},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":97793,"byte_end":97797,"line_start":57,"line_end":57,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1893},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/num.rs","byte_start":98103,"byte_end":98107,"line_start":65,"line_end":65,"column_start":17,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1893},"to":{"krate":0,"index":856}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100600,"byte_end":100607,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":100646,"byte_end":100653,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101533,"byte_end":101540,"line_start":81,"line_end":81,"column_start":19,"column_end":26},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101588,"byte_end":101595,"line_start":83,"line_end":83,"column_start":26,"column_end":33},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101745,"byte_end":101752,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":101966,"byte_end":101973,"line_start":104,"line_end":104,"column_start":39,"column_end":46},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102157,"byte_end":102164,"line_start":110,"line_end":110,"column_start":43,"column_end":50},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102474,"byte_end":102481,"line_start":120,"line_end":120,"column_start":33,"column_end":40},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":102598,"byte_end":102605,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":103502,"byte_end":103509,"line_start":168,"line_end":168,"column_start":18,"column_end":25},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":108583,"byte_end":108590,"line_start":368,"line_end":368,"column_start":24,"column_end":31},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":109192,"byte_end":109199,"line_start":392,"line_end":392,"column_start":28,"column_end":35},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112041,"byte_end":112048,"line_start":470,"line_end":470,"column_start":39,"column_end":46},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112238,"byte_end":112245,"line_start":477,"line_end":477,"column_start":40,"column_end":47},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112382,"byte_end":112389,"line_start":484,"line_end":484,"column_start":25,"column_end":32},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112569,"byte_end":112576,"line_start":493,"line_end":493,"column_start":39,"column_end":46},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":112816,"byte_end":112823,"line_start":502,"line_end":502,"column_start":51,"column_end":58},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113010,"byte_end":113017,"line_start":510,"line_end":510,"column_start":41,"column_end":48},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113268,"byte_end":113275,"line_start":519,"line_end":519,"column_start":69,"column_end":76},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113415,"byte_end":113422,"line_start":526,"line_end":526,"column_start":25,"column_end":32},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113632,"byte_end":113639,"line_start":535,"line_end":535,"column_start":39,"column_end":46},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":113879,"byte_end":113886,"line_start":544,"line_end":544,"column_start":51,"column_end":58},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114073,"byte_end":114080,"line_start":552,"line_end":552,"column_start":41,"column_end":48},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114331,"byte_end":114338,"line_start":561,"line_end":561,"column_start":69,"column_end":76},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114489,"byte_end":114496,"line_start":568,"line_end":568,"column_start":36,"column_end":43},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114725,"byte_end":114732,"line_start":577,"line_end":577,"column_start":56,"column_end":63},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":114890,"byte_end":114897,"line_start":584,"line_end":584,"column_start":56,"column_end":63},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115152,"byte_end":115159,"line_start":593,"line_end":593,"column_start":61,"column_end":68},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115342,"byte_end":115349,"line_start":601,"line_end":601,"column_start":36,"column_end":43},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115578,"byte_end":115585,"line_start":610,"line_end":610,"column_start":56,"column_end":63},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":115743,"byte_end":115750,"line_start":617,"line_end":617,"column_start":56,"column_end":63},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116005,"byte_end":116012,"line_start":626,"line_end":626,"column_start":61,"column_end":68},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116186,"byte_end":116193,"line_start":634,"line_end":634,"column_start":27,"column_end":34},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":896},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116300,"byte_end":116307,"line_start":641,"line_end":641,"column_start":29,"column_end":36},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":896},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116464,"byte_end":116471,"line_start":649,"line_end":649,"column_start":27,"column_end":34},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":896},"to":{"krate":0,"index":856}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116626,"byte_end":116633,"line_start":657,"line_end":657,"column_start":29,"column_end":36},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":896},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":116816,"byte_end":116823,"line_start":665,"line_end":665,"column_start":53,"column_end":60},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":896},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117148,"byte_end":117155,"line_start":677,"line_end":677,"column_start":29,"column_end":36},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117256,"byte_end":117263,"line_start":683,"line_end":683,"column_start":29,"column_end":36},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117368,"byte_end":117375,"line_start":689,"line_end":689,"column_start":29,"column_end":36},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117476,"byte_end":117483,"line_start":695,"line_end":695,"column_start":29,"column_end":36},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":896},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117804,"byte_end":117811,"line_start":713,"line_end":713,"column_start":27,"column_end":34},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":117850,"byte_end":117857,"line_start":715,"line_end":715,"column_start":29,"column_end":36},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":118795,"byte_end":118802,"line_start":758,"line_end":758,"column_start":19,"column_end":26},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":118850,"byte_end":118857,"line_start":760,"line_end":760,"column_start":26,"column_end":33},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119028,"byte_end":119035,"line_start":769,"line_end":769,"column_start":21,"column_end":28},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119237,"byte_end":119244,"line_start":780,"line_end":780,"column_start":39,"column_end":46},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119495,"byte_end":119502,"line_start":790,"line_end":790,"column_start":43,"column_end":50},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119829,"byte_end":119836,"line_start":802,"line_end":802,"column_start":33,"column_end":40},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":119973,"byte_end":119980,"line_start":808,"line_end":808,"column_start":12,"column_end":19},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":120939,"byte_end":120946,"line_start":851,"line_end":851,"column_start":18,"column_end":25},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":126552,"byte_end":126559,"line_start":1066,"line_end":1066,"column_start":24,"column_end":31},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":127299,"byte_end":127306,"line_start":1098,"line_end":1098,"column_start":28,"column_end":35},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130234,"byte_end":130241,"line_start":1180,"line_end":1180,"column_start":39,"column_end":46},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130500,"byte_end":130507,"line_start":1191,"line_end":1191,"column_start":40,"column_end":47},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130644,"byte_end":130651,"line_start":1198,"line_end":1198,"column_start":25,"column_end":32},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":130840,"byte_end":130847,"line_start":1207,"line_end":1207,"column_start":39,"column_end":46},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131156,"byte_end":131163,"line_start":1220,"line_end":1220,"column_start":51,"column_end":58},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131381,"byte_end":131388,"line_start":1229,"line_end":1229,"column_start":41,"column_end":48},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131657,"byte_end":131664,"line_start":1238,"line_end":1238,"column_start":69,"column_end":76},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":131804,"byte_end":131811,"line_start":1245,"line_end":1245,"column_start":25,"column_end":32},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132039,"byte_end":132046,"line_start":1254,"line_end":1254,"column_start":39,"column_end":46},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132355,"byte_end":132362,"line_start":1267,"line_end":1267,"column_start":51,"column_end":58},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132580,"byte_end":132587,"line_start":1276,"line_end":1276,"column_start":41,"column_end":48},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":132856,"byte_end":132863,"line_start":1285,"line_end":1285,"column_start":69,"column_end":76},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133014,"byte_end":133021,"line_start":1292,"line_end":1292,"column_start":36,"column_end":43},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133313,"byte_end":133320,"line_start":1305,"line_end":1305,"column_start":48,"column_end":55},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133539,"byte_end":133546,"line_start":1314,"line_end":1314,"column_start":56,"column_end":63},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":133874,"byte_end":133881,"line_start":1327,"line_end":1327,"column_start":61,"column_end":68},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134028,"byte_end":134035,"line_start":1334,"line_end":1334,"column_start":36,"column_end":43},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134327,"byte_end":134334,"line_start":1347,"line_end":1347,"column_start":48,"column_end":55},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134553,"byte_end":134560,"line_start":1356,"line_end":1356,"column_start":56,"column_end":63},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":134888,"byte_end":134895,"line_start":1369,"line_end":1369,"column_start":61,"column_end":68},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135033,"byte_end":135040,"line_start":1376,"line_end":1376,"column_start":27,"column_end":34},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1110},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135147,"byte_end":135154,"line_start":1383,"line_end":1383,"column_start":29,"column_end":36},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1110},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135311,"byte_end":135318,"line_start":1391,"line_end":1391,"column_start":27,"column_end":34},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":1110},"to":{"krate":0,"index":856}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135473,"byte_end":135480,"line_start":1399,"line_end":1399,"column_start":29,"column_end":36},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":1110},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":135663,"byte_end":135670,"line_start":1407,"line_end":1407,"column_start":53,"column_end":60},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":1110},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136129,"byte_end":136136,"line_start":1425,"line_end":1425,"column_start":29,"column_end":36},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136245,"byte_end":136252,"line_start":1431,"line_end":1431,"column_start":29,"column_end":36},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136366,"byte_end":136373,"line_start":1437,"line_end":1437,"column_start":32,"column_end":39},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/point.rs","byte_start":136488,"byte_end":136495,"line_start":1443,"line_end":1443,"column_start":32,"column_end":39},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151410,"byte_end":151414,"line_start":42,"line_end":42,"column_start":27,"column_end":31},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151557,"byte_end":151561,"line_start":49,"line_end":49,"column_start":27,"column_end":31},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151600,"byte_end":151604,"line_start":51,"line_end":51,"column_start":29,"column_end":33},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151746,"byte_end":151750,"line_start":57,"line_end":57,"column_start":37,"column_end":41},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151898,"byte_end":151902,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":151951,"byte_end":151955,"line_start":65,"line_end":65,"column_start":39,"column_end":43},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152238,"byte_end":152242,"line_start":75,"line_end":75,"column_start":43,"column_end":47},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152519,"byte_end":152523,"line_start":85,"line_end":85,"column_start":33,"column_end":37},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152637,"byte_end":152641,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":152809,"byte_end":152813,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":153214,"byte_end":153218,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":154486,"byte_end":154490,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155009,"byte_end":155013,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155370,"byte_end":155374,"line_start":222,"line_end":222,"column_start":12,"column_end":16},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":155794,"byte_end":155798,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":156380,"byte_end":156384,"line_start":256,"line_end":256,"column_start":12,"column_end":16},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157231,"byte_end":157235,"line_start":279,"line_end":279,"column_start":12,"column_end":16},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":157853,"byte_end":157857,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":158670,"byte_end":158674,"line_start":320,"line_end":320,"column_start":12,"column_end":16},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159042,"byte_end":159046,"line_start":334,"line_end":334,"column_start":12,"column_end":16},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159269,"byte_end":159273,"line_start":344,"line_end":344,"column_start":12,"column_end":16},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159657,"byte_end":159661,"line_start":361,"line_end":361,"column_start":12,"column_end":16},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":159999,"byte_end":160003,"line_start":374,"line_end":374,"column_start":39,"column_end":43},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160119,"byte_end":160123,"line_start":381,"line_end":381,"column_start":30,"column_end":34},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160360,"byte_end":160364,"line_start":388,"line_end":388,"column_start":31,"column_end":35},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160523,"byte_end":160527,"line_start":395,"line_end":395,"column_start":38,"column_end":42},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160760,"byte_end":160764,"line_start":406,"line_end":406,"column_start":36,"column_end":40},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":160993,"byte_end":160997,"line_start":415,"line_end":415,"column_start":48,"column_end":52},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161141,"byte_end":161145,"line_start":422,"line_end":422,"column_start":36,"column_end":40},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161374,"byte_end":161378,"line_start":431,"line_end":431,"column_start":48,"column_end":52},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161542,"byte_end":161546,"line_start":438,"line_end":438,"column_start":56,"column_end":60},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":161805,"byte_end":161809,"line_start":447,"line_end":447,"column_start":61,"column_end":65},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162016,"byte_end":162020,"line_start":455,"line_end":455,"column_start":56,"column_end":60},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162279,"byte_end":162283,"line_start":464,"line_end":464,"column_start":61,"column_end":65},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":162452,"byte_end":162456,"line_start":472,"line_end":472,"column_start":18,"column_end":22},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":163097,"byte_end":163101,"line_start":495,"line_end":495,"column_start":28,"column_end":32},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":166445,"byte_end":166449,"line_start":583,"line_end":583,"column_start":76,"column_end":80},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rect.rs","byte_start":168511,"byte_end":168515,"line_start":634,"line_end":634,"column_start":35,"column_end":39},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179038,"byte_end":179054,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":3816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179367,"byte_end":179383,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":3816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":179665,"byte_end":179681,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":3816},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":184522,"byte_end":184538,"line_start":201,"line_end":201,"column_start":9,"column_end":25},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":3816},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rigid.rs","byte_start":184714,"byte_end":184730,"line_start":208,"line_end":208,"column_start":67,"column_end":83},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":3816},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188764,"byte_end":188774,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":1635},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":188827,"byte_end":188837,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":1635},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189019,"byte_end":189029,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":1635},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189091,"byte_end":189101,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":1635},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189252,"byte_end":189262,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":1635},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189407,"byte_end":189417,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":189968,"byte_end":189978,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191623,"byte_end":191633,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":191847,"byte_end":191857,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":193529,"byte_end":193539,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":194966,"byte_end":194976,"line_start":260,"line_end":260,"column_start":34,"column_end":44},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":1703},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195029,"byte_end":195039,"line_start":262,"line_end":262,"column_start":36,"column_end":46},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":1703},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195306,"byte_end":195316,"line_start":274,"line_end":274,"column_start":26,"column_end":36},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":1703},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195378,"byte_end":195388,"line_start":276,"line_end":276,"column_start":33,"column_end":43},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":1703},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195594,"byte_end":195604,"line_start":285,"line_end":285,"column_start":28,"column_end":38},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1703},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":195817,"byte_end":195827,"line_start":297,"line_end":297,"column_start":19,"column_end":29},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":1703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":196698,"byte_end":196708,"line_start":328,"line_end":328,"column_start":19,"column_end":29},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":1703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":199255,"byte_end":199265,"line_start":412,"line_end":412,"column_start":19,"column_end":29},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":1703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":209170,"byte_end":209180,"line_start":723,"line_end":723,"column_start":46,"column_end":56},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":1703},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":209450,"byte_end":209460,"line_start":733,"line_end":733,"column_start":50,"column_end":60},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":1703},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/rotation.rs","byte_start":209707,"byte_end":209717,"line_start":743,"line_end":743,"column_start":35,"column_end":45},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":1703},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":220367,"byte_end":220372,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":1817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":223609,"byte_end":223614,"line_start":181,"line_end":181,"column_start":26,"column_end":31},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":1817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":224212,"byte_end":224217,"line_start":209,"line_end":209,"column_start":36,"column_end":41},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":1817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226034,"byte_end":226039,"line_start":266,"line_end":266,"column_start":16,"column_end":21},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":1817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226286,"byte_end":226291,"line_start":273,"line_end":273,"column_start":47,"column_end":52},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226514,"byte_end":226519,"line_start":283,"line_end":283,"column_start":32,"column_end":37},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":226754,"byte_end":226759,"line_start":293,"line_end":293,"column_start":32,"column_end":37},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227117,"byte_end":227122,"line_start":305,"line_end":305,"column_start":44,"column_end":49},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227257,"byte_end":227262,"line_start":311,"line_end":311,"column_start":30,"column_end":35},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227325,"byte_end":227330,"line_start":313,"line_end":313,"column_start":46,"column_end":51},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1656}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227485,"byte_end":227490,"line_start":319,"line_end":319,"column_start":32,"column_end":37},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1645}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227625,"byte_end":227630,"line_start":325,"line_end":325,"column_start":36,"column_end":41},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227763,"byte_end":227768,"line_start":331,"line_end":331,"column_start":34,"column_end":39},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227831,"byte_end":227836,"line_start":333,"line_end":333,"column_start":46,"column_end":51},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":227991,"byte_end":227996,"line_start":339,"line_end":339,"column_start":50,"column_end":55},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":228141,"byte_end":228146,"line_start":345,"line_end":345,"column_start":40,"column_end":45},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":228263,"byte_end":228268,"line_start":351,"line_end":351,"column_start":34,"column_end":39},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":1817},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/scale.rs","byte_start":228398,"byte_end":228403,"line_start":357,"line_end":357,"column_start":32,"column_end":37},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":1817},"to":{"krate":0,"index":847}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230941,"byte_end":230954,"line_start":42,"line_end":42,"column_start":27,"column_end":40},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":230993,"byte_end":231006,"line_start":44,"line_end":44,"column_start":29,"column_end":42},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231290,"byte_end":231303,"line_start":56,"line_end":56,"column_start":19,"column_end":32},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231351,"byte_end":231364,"line_start":58,"line_end":58,"column_start":26,"column_end":39},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231620,"byte_end":231633,"line_start":70,"line_end":70,"column_start":21,"column_end":34},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":231873,"byte_end":231886,"line_start":82,"line_end":82,"column_start":39,"column_end":52},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232130,"byte_end":232143,"line_start":92,"line_end":92,"column_start":33,"column_end":46},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":232419,"byte_end":232432,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":234645,"byte_end":234658,"line_start":178,"line_end":178,"column_start":18,"column_end":31},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235056,"byte_end":235069,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235285,"byte_end":235298,"line_start":203,"line_end":203,"column_start":20,"column_end":33},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235616,"byte_end":235629,"line_start":218,"line_end":218,"column_start":18,"column_end":31},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":235841,"byte_end":235854,"line_start":225,"line_end":225,"column_start":36,"column_end":49},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":236214,"byte_end":236227,"line_start":239,"line_end":239,"column_start":48,"column_end":61},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":236493,"byte_end":236506,"line_start":249,"line_end":249,"column_start":56,"column_end":69},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":236904,"byte_end":236917,"line_start":263,"line_end":263,"column_start":61,"column_end":74},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":237064,"byte_end":237077,"line_start":270,"line_end":270,"column_start":36,"column_end":49},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":237437,"byte_end":237450,"line_start":284,"line_end":284,"column_start":48,"column_end":61},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":237716,"byte_end":237729,"line_start":294,"line_end":294,"column_start":56,"column_end":69},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/side_offsets.rs","byte_start":238127,"byte_end":238140,"line_start":308,"line_end":308,"column_start":61,"column_end":74},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242561,"byte_end":242567,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":242606,"byte_end":242612,"line_start":42,"line_end":42,"column_start":29,"column_end":35},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":243651,"byte_end":243657,"line_start":85,"line_end":85,"column_start":19,"column_end":25},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":243705,"byte_end":243711,"line_start":87,"line_end":87,"column_start":26,"column_end":32},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":243879,"byte_end":243885,"line_start":96,"line_end":96,"column_start":21,"column_end":27},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244072,"byte_end":244078,"line_start":106,"line_end":106,"column_start":39,"column_end":45},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244305,"byte_end":244311,"line_start":114,"line_end":114,"column_start":43,"column_end":49},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244582,"byte_end":244588,"line_start":124,"line_end":124,"column_start":33,"column_end":39},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":244704,"byte_end":244710,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":2079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":245581,"byte_end":245587,"line_start":164,"line_end":164,"column_start":18,"column_end":24},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":2079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":248967,"byte_end":248973,"line_start":287,"line_end":287,"column_start":28,"column_end":34},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":2079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252150,"byte_end":252156,"line_start":375,"line_end":375,"column_start":20,"column_end":26},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":2079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":252751,"byte_end":252757,"line_start":391,"line_end":391,"column_start":24,"column_end":30},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":2079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":254439,"byte_end":254445,"line_start":444,"line_end":444,"column_start":23,"column_end":29},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":2079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255006,"byte_end":255012,"line_start":462,"line_end":462,"column_start":29,"column_end":35},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":2079},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255171,"byte_end":255177,"line_start":470,"line_end":470,"column_start":27,"column_end":33},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2079},"to":{"krate":0,"index":856}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255334,"byte_end":255340,"line_start":478,"line_end":478,"column_start":29,"column_end":35},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":2079},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255499,"byte_end":255505,"line_start":486,"line_end":486,"column_start":27,"column_end":33},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2079},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255633,"byte_end":255639,"line_start":493,"line_end":493,"column_start":25,"column_end":31},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":255818,"byte_end":255824,"line_start":502,"line_end":502,"column_start":25,"column_end":31},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256055,"byte_end":256061,"line_start":511,"line_end":511,"column_start":37,"column_end":43},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256233,"byte_end":256239,"line_start":519,"line_end":519,"column_start":25,"column_end":31},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256470,"byte_end":256476,"line_start":528,"line_end":528,"column_start":37,"column_end":43},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256659,"byte_end":256665,"line_start":536,"line_end":536,"column_start":36,"column_end":42},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":256899,"byte_end":256905,"line_start":545,"line_end":545,"column_start":48,"column_end":54},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257100,"byte_end":257106,"line_start":553,"line_end":553,"column_start":56,"column_end":62},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257374,"byte_end":257380,"line_start":562,"line_end":562,"column_start":61,"column_end":67},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257527,"byte_end":257533,"line_start":569,"line_end":569,"column_start":36,"column_end":42},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257767,"byte_end":257773,"line_start":578,"line_end":578,"column_start":48,"column_end":54},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":257968,"byte_end":257974,"line_start":586,"line_end":586,"column_start":56,"column_end":62},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":258242,"byte_end":258248,"line_start":595,"line_end":595,"column_start":61,"column_end":67},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259006,"byte_end":259012,"line_start":630,"line_end":630,"column_start":37,"column_end":43},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259137,"byte_end":259143,"line_start":637,"line_end":637,"column_start":29,"column_end":35},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259267,"byte_end":259273,"line_start":644,"line_end":644,"column_start":29,"column_end":35},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259391,"byte_end":259397,"line_start":651,"line_end":651,"column_start":29,"column_end":35},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":259521,"byte_end":259527,"line_start":658,"line_end":658,"column_start":29,"column_end":35},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":2079},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265704,"byte_end":265710,"line_start":879,"line_end":879,"column_start":27,"column_end":33},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":265749,"byte_end":265755,"line_start":881,"line_end":881,"column_start":29,"column_end":35},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":266754,"byte_end":266760,"line_start":924,"line_end":924,"column_start":19,"column_end":25},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":266808,"byte_end":266814,"line_start":926,"line_end":926,"column_start":26,"column_end":32},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267011,"byte_end":267017,"line_start":935,"line_end":935,"column_start":21,"column_end":27},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267232,"byte_end":267238,"line_start":946,"line_end":946,"column_start":39,"column_end":45},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267532,"byte_end":267538,"line_start":956,"line_end":956,"column_start":43,"column_end":49},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":267878,"byte_end":267884,"line_start":968,"line_end":968,"column_start":33,"column_end":39},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268020,"byte_end":268026,"line_start":974,"line_end":974,"column_start":12,"column_end":18},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":268966,"byte_end":268972,"line_start":1009,"line_end":1009,"column_start":18,"column_end":24},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":272573,"byte_end":272579,"line_start":1132,"line_end":1132,"column_start":28,"column_end":34},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":275487,"byte_end":275493,"line_start":1214,"line_end":1214,"column_start":20,"column_end":26},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":276133,"byte_end":276139,"line_start":1230,"line_end":1230,"column_start":24,"column_end":30},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":277972,"byte_end":277978,"line_start":1291,"line_end":1291,"column_start":23,"column_end":29},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278623,"byte_end":278629,"line_start":1311,"line_end":1311,"column_start":29,"column_end":35},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2275},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278788,"byte_end":278794,"line_start":1319,"line_end":1319,"column_start":27,"column_end":33},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2275},"to":{"krate":0,"index":856}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":278951,"byte_end":278957,"line_start":1327,"line_end":1327,"column_start":29,"column_end":35},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2275},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279116,"byte_end":279122,"line_start":1335,"line_end":1335,"column_start":27,"column_end":33},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2275},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279264,"byte_end":279270,"line_start":1342,"line_end":1342,"column_start":25,"column_end":31},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279462,"byte_end":279468,"line_start":1351,"line_end":1351,"column_start":25,"column_end":31},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279772,"byte_end":279778,"line_start":1364,"line_end":1364,"column_start":37,"column_end":43},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":279985,"byte_end":279991,"line_start":1373,"line_end":1373,"column_start":25,"column_end":31},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":280295,"byte_end":280301,"line_start":1386,"line_end":1386,"column_start":37,"column_end":43},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":280519,"byte_end":280525,"line_start":1395,"line_end":1395,"column_start":36,"column_end":42},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":280834,"byte_end":280840,"line_start":1408,"line_end":1408,"column_start":48,"column_end":54},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281072,"byte_end":281078,"line_start":1417,"line_end":1417,"column_start":56,"column_end":62},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281423,"byte_end":281429,"line_start":1430,"line_end":1430,"column_start":61,"column_end":67},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281576,"byte_end":281582,"line_start":1437,"line_end":1437,"column_start":36,"column_end":42},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":281891,"byte_end":281897,"line_start":1450,"line_end":1450,"column_start":48,"column_end":54},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":282129,"byte_end":282135,"line_start":1459,"line_end":1459,"column_start":56,"column_end":62},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":282480,"byte_end":282486,"line_start":1472,"line_end":1472,"column_start":61,"column_end":67},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283063,"byte_end":283069,"line_start":1498,"line_end":1498,"column_start":37,"column_end":43},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283199,"byte_end":283205,"line_start":1505,"line_end":1505,"column_start":29,"column_end":35},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283341,"byte_end":283347,"line_start":1512,"line_end":1512,"column_start":29,"column_end":35},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283474,"byte_end":283480,"line_start":1519,"line_end":1519,"column_start":32,"column_end":38},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/size.rs","byte_start":283622,"byte_end":283628,"line_start":1526,"line_end":1526,"column_start":32,"column_end":38},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":2275},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291651,"byte_end":291662,"line_start":55,"line_end":55,"column_start":34,"column_end":45},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":2501},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":291715,"byte_end":291726,"line_start":57,"line_end":57,"column_start":36,"column_end":47},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":2501},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293001,"byte_end":293012,"line_start":107,"line_end":107,"column_start":26,"column_end":37},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":2501},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293074,"byte_end":293085,"line_start":109,"line_end":109,"column_start":33,"column_end":44},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":2501},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293416,"byte_end":293427,"line_start":122,"line_end":122,"column_start":28,"column_end":39},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":2501},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":293700,"byte_end":293711,"line_start":136,"line_end":136,"column_start":19,"column_end":30},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":295761,"byte_end":295772,"line_start":191,"line_end":191,"column_start":25,"column_end":36},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":299952,"byte_end":299963,"line_start":314,"line_end":314,"column_start":35,"column_end":46},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":300888,"byte_end":300899,"line_start":340,"line_end":340,"column_start":19,"column_end":30},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":301540,"byte_end":301551,"line_start":369,"line_end":369,"column_start":19,"column_end":30},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":302806,"byte_end":302817,"line_start":403,"line_end":403,"column_start":19,"column_end":30},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":303966,"byte_end":303977,"line_start":448,"line_end":448,"column_start":19,"column_end":30},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":304992,"byte_end":305003,"line_start":481,"line_end":481,"column_start":19,"column_end":30},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":306131,"byte_end":306142,"line_start":529,"line_end":529,"column_start":19,"column_end":30},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":307572,"byte_end":307583,"line_start":575,"line_end":575,"column_start":19,"column_end":30},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":2501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":308725,"byte_end":308736,"line_start":615,"line_end":615,"column_start":32,"column_end":43},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":2501},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":308944,"byte_end":308955,"line_start":624,"line_end":624,"column_start":48,"column_end":59},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":2501},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform2d.rs","byte_start":309541,"byte_end":309552,"line_start":637,"line_end":637,"column_start":34,"column_end":45},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":2501},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317836,"byte_end":317847,"line_start":58,"line_end":58,"column_start":34,"column_end":45},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":2679},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":317900,"byte_end":317911,"line_start":60,"line_end":60,"column_start":36,"column_end":47},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":2679},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":319782,"byte_end":319793,"line_start":123,"line_end":123,"column_start":26,"column_end":37},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":2679},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":319855,"byte_end":319866,"line_start":125,"line_end":125,"column_start":33,"column_end":44},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":2679},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":320567,"byte_end":320578,"line_start":148,"line_end":148,"column_start":28,"column_end":39},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":2679},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":321111,"byte_end":321122,"line_start":172,"line_end":172,"column_start":19,"column_end":30},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":324272,"byte_end":324283,"line_start":265,"line_end":265,"column_start":25,"column_end":36},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":330498,"byte_end":330509,"line_start":422,"line_end":422,"column_start":20,"column_end":31},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":332273,"byte_end":332284,"line_start":495,"line_end":495,"column_start":20,"column_end":31},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":334819,"byte_end":334830,"line_start":540,"line_end":540,"column_start":20,"column_end":31},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":336047,"byte_end":336058,"line_start":585,"line_end":585,"column_start":19,"column_end":30},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":337780,"byte_end":337791,"line_start":640,"line_end":640,"column_start":19,"column_end":30},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":339176,"byte_end":339187,"line_start":690,"line_end":690,"column_start":19,"column_end":30},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":343723,"byte_end":343734,"line_start":810,"line_end":810,"column_start":20,"column_end":31},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":351309,"byte_end":351320,"line_start":981,"line_end":981,"column_start":20,"column_end":31},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":352866,"byte_end":352877,"line_start":1022,"line_end":1022,"column_start":35,"column_end":46},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":354382,"byte_end":354393,"line_start":1053,"line_end":1053,"column_start":32,"column_end":43},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":2679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":355361,"byte_end":355372,"line_start":1078,"line_end":1078,"column_start":48,"column_end":59},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":2679},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":356306,"byte_end":356317,"line_start":1094,"line_end":1094,"column_start":32,"column_end":43},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":2679},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/transform3d.rs","byte_start":356511,"byte_end":356522,"line_start":1103,"line_end":1103,"column_start":34,"column_end":45},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":2679},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370520,"byte_end":370533,"line_start":58,"line_end":58,"column_start":34,"column_end":47},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370586,"byte_end":370599,"line_start":60,"line_end":60,"column_start":36,"column_end":49},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370807,"byte_end":370820,"line_start":70,"line_end":70,"column_start":26,"column_end":39},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":370882,"byte_end":370895,"line_start":72,"line_end":72,"column_start":33,"column_end":46},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371059,"byte_end":371072,"line_start":81,"line_end":81,"column_start":28,"column_end":41},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":371237,"byte_end":371250,"line_start":91,"line_end":91,"column_start":19,"column_end":32},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":2893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":372410,"byte_end":372423,"line_start":136,"line_end":136,"column_start":25,"column_end":38},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":2893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374648,"byte_end":374661,"line_start":227,"line_end":227,"column_start":69,"column_end":82},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":374949,"byte_end":374962,"line_start":235,"line_end":235,"column_start":72,"column_end":85},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375175,"byte_end":375188,"line_start":242,"line_end":242,"column_start":69,"column_end":82},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375476,"byte_end":375489,"line_start":250,"line_end":250,"column_start":72,"column_end":85},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375679,"byte_end":375692,"line_start":257,"line_end":257,"column_start":46,"column_end":59},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":375842,"byte_end":375855,"line_start":263,"line_end":263,"column_start":46,"column_end":59},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376002,"byte_end":376015,"line_start":269,"line_end":269,"column_start":54,"column_end":67},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376199,"byte_end":376212,"line_start":278,"line_end":278,"column_start":31,"column_end":44},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376353,"byte_end":376366,"line_start":287,"line_end":287,"column_start":46,"column_end":59},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":376559,"byte_end":376572,"line_start":293,"line_end":293,"column_start":50,"column_end":63},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":2893},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":377097,"byte_end":377110,"line_start":312,"line_end":312,"column_start":34,"column_end":47},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":377163,"byte_end":377176,"line_start":314,"line_end":314,"column_start":36,"column_end":49},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378180,"byte_end":378193,"line_start":357,"line_end":357,"column_start":26,"column_end":39},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378255,"byte_end":378268,"line_start":359,"line_end":359,"column_start":33,"column_end":46},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378453,"byte_end":378466,"line_start":368,"line_end":368,"column_start":28,"column_end":41},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":378655,"byte_end":378668,"line_start":379,"line_end":379,"column_start":19,"column_end":32},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":3001},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":379967,"byte_end":379980,"line_start":426,"line_end":426,"column_start":25,"column_end":38},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":3001},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":382836,"byte_end":382849,"line_start":540,"line_end":540,"column_start":69,"column_end":82},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383155,"byte_end":383168,"line_start":548,"line_end":548,"column_start":72,"column_end":85},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383408,"byte_end":383421,"line_start":556,"line_end":556,"column_start":69,"column_end":82},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383727,"byte_end":383740,"line_start":564,"line_end":564,"column_start":72,"column_end":85},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":383957,"byte_end":383970,"line_start":572,"line_end":572,"column_start":46,"column_end":59},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384125,"byte_end":384138,"line_start":578,"line_end":578,"column_start":46,"column_end":59},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384293,"byte_end":384306,"line_start":584,"line_end":584,"column_start":54,"column_end":67},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384498,"byte_end":384511,"line_start":593,"line_end":593,"column_start":31,"column_end":44},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384652,"byte_end":384665,"line_start":602,"line_end":602,"column_start":46,"column_end":59},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/translation.rs","byte_start":384871,"byte_end":384884,"line_start":608,"line_end":608,"column_start":50,"column_end":63},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":3001},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396499,"byte_end":396507,"line_start":46,"line_end":46,"column_start":27,"column_end":35},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":396546,"byte_end":396554,"line_start":48,"line_end":48,"column_start":29,"column_end":37},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397442,"byte_end":397450,"line_start":89,"line_end":89,"column_start":23,"column_end":31},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397497,"byte_end":397505,"line_start":91,"line_end":91,"column_start":37,"column_end":45},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397637,"byte_end":397645,"line_start":97,"line_end":97,"column_start":27,"column_end":35},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397792,"byte_end":397800,"line_start":104,"line_end":104,"column_start":27,"column_end":35},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":397997,"byte_end":398005,"line_start":112,"line_end":112,"column_start":39,"column_end":47},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398189,"byte_end":398197,"line_start":118,"line_end":118,"column_start":43,"column_end":51},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398477,"byte_end":398485,"line_start":130,"line_end":130,"column_start":33,"column_end":41},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":398603,"byte_end":398611,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":400733,"byte_end":400741,"line_start":222,"line_end":222,"column_start":18,"column_end":26},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":404277,"byte_end":404285,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":405174,"byte_end":405182,"line_start":397,"line_end":397,"column_start":19,"column_end":27},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":407183,"byte_end":407191,"line_start":469,"line_end":469,"column_start":12,"column_end":20},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":408309,"byte_end":408317,"line_start":504,"line_end":504,"column_start":24,"column_end":32},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":409622,"byte_end":409630,"line_start":548,"line_end":548,"column_start":23,"column_end":31},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":410182,"byte_end":410190,"line_start":568,"line_end":568,"column_start":28,"column_end":36},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413050,"byte_end":413058,"line_start":646,"line_end":646,"column_start":25,"column_end":33},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413223,"byte_end":413231,"line_start":655,"line_end":655,"column_start":25,"column_end":33},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413464,"byte_end":413472,"line_start":664,"line_end":664,"column_start":53,"column_end":61},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413602,"byte_end":413610,"line_start":671,"line_end":671,"column_start":25,"column_end":33},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413850,"byte_end":413858,"line_start":680,"line_end":680,"column_start":69,"column_end":77},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":413999,"byte_end":414007,"line_start":687,"line_end":687,"column_start":36,"column_end":44},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414235,"byte_end":414243,"line_start":696,"line_end":696,"column_start":56,"column_end":64},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414401,"byte_end":414409,"line_start":703,"line_end":703,"column_start":56,"column_end":64},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414663,"byte_end":414671,"line_start":712,"line_end":712,"column_start":61,"column_end":69},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":414854,"byte_end":414862,"line_start":720,"line_end":720,"column_start":36,"column_end":44},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415090,"byte_end":415098,"line_start":729,"line_end":729,"column_start":56,"column_end":64},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415256,"byte_end":415264,"line_start":736,"line_end":736,"column_start":56,"column_end":64},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415518,"byte_end":415526,"line_start":745,"line_end":745,"column_start":61,"column_end":69},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415702,"byte_end":415710,"line_start":753,"line_end":753,"column_start":29,"column_end":37},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":415870,"byte_end":415878,"line_start":761,"line_end":761,"column_start":27,"column_end":35},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":856}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416036,"byte_end":416044,"line_start":769,"line_end":769,"column_start":29,"column_end":37},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416231,"byte_end":416239,"line_start":777,"line_end":777,"column_start":54,"column_end":62},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416562,"byte_end":416570,"line_start":789,"line_end":789,"column_start":29,"column_end":37},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416671,"byte_end":416679,"line_start":795,"line_end":795,"column_start":29,"column_end":37},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416782,"byte_end":416790,"line_start":801,"line_end":801,"column_start":29,"column_end":37},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":416891,"byte_end":416899,"line_start":807,"line_end":807,"column_start":29,"column_end":37},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417019,"byte_end":417027,"line_start":813,"line_end":813,"column_start":35,"column_end":43},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":3164},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417523,"byte_end":417531,"line_start":834,"line_end":834,"column_start":27,"column_end":35},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":417570,"byte_end":417578,"line_start":836,"line_end":836,"column_start":29,"column_end":37},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418524,"byte_end":418532,"line_start":879,"line_end":879,"column_start":23,"column_end":31},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418579,"byte_end":418587,"line_start":881,"line_end":881,"column_start":37,"column_end":45},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418740,"byte_end":418748,"line_start":887,"line_end":887,"column_start":27,"column_end":35},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":418919,"byte_end":418927,"line_start":895,"line_end":895,"column_start":27,"column_end":35},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":3384},"to":{"krate":0,"index":842}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419129,"byte_end":419137,"line_start":903,"line_end":903,"column_start":39,"column_end":47},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419388,"byte_end":419396,"line_start":913,"line_end":913,"column_start":43,"column_end":51},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419723,"byte_end":419731,"line_start":925,"line_end":925,"column_start":33,"column_end":41},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":419869,"byte_end":419877,"line_start":931,"line_end":931,"column_start":12,"column_end":20},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":421627,"byte_end":421635,"line_start":1002,"line_end":1002,"column_start":18,"column_end":26},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":425526,"byte_end":425534,"line_start":1157,"line_end":1157,"column_start":12,"column_end":20},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":426123,"byte_end":426131,"line_start":1179,"line_end":1179,"column_start":19,"column_end":27},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":428475,"byte_end":428483,"line_start":1264,"line_end":1264,"column_start":12,"column_end":20},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":429643,"byte_end":429651,"line_start":1299,"line_end":1299,"column_start":24,"column_end":32},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431160,"byte_end":431168,"line_start":1353,"line_end":1353,"column_start":23,"column_end":31},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":431788,"byte_end":431796,"line_start":1375,"line_end":1375,"column_start":28,"column_end":36},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":3384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434733,"byte_end":434741,"line_start":1457,"line_end":1457,"column_start":25,"column_end":33},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1973}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":434915,"byte_end":434923,"line_start":1466,"line_end":1466,"column_start":25,"column_end":33},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1946}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435165,"byte_end":435173,"line_start":1475,"line_end":1475,"column_start":53,"column_end":61},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1979}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435303,"byte_end":435311,"line_start":1482,"line_end":1482,"column_start":25,"column_end":33},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1951}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435569,"byte_end":435577,"line_start":1491,"line_end":1491,"column_start":69,"column_end":77},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":435718,"byte_end":435726,"line_start":1498,"line_end":1498,"column_start":36,"column_end":44},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436025,"byte_end":436033,"line_start":1511,"line_end":1511,"column_start":56,"column_end":64},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436191,"byte_end":436199,"line_start":1518,"line_end":1518,"column_start":56,"column_end":64},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1956}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436526,"byte_end":436534,"line_start":1531,"line_end":1531,"column_start":61,"column_end":69},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1987}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":436752,"byte_end":436760,"line_start":1540,"line_end":1540,"column_start":36,"column_end":44},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437059,"byte_end":437067,"line_start":1553,"line_end":1553,"column_start":56,"column_end":64},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437225,"byte_end":437233,"line_start":1560,"line_end":1560,"column_start":56,"column_end":64},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1961}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437560,"byte_end":437568,"line_start":1573,"line_end":1573,"column_start":61,"column_end":69},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1991}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437779,"byte_end":437787,"line_start":1582,"line_end":1582,"column_start":29,"column_end":37},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":3384},"to":{"krate":0,"index":852}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":437947,"byte_end":437955,"line_start":1590,"line_end":1590,"column_start":27,"column_end":35},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":3384},"to":{"krate":0,"index":856}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438113,"byte_end":438121,"line_start":1598,"line_end":1598,"column_start":29,"column_end":37},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":3384},"to":{"krate":0,"index":854}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438308,"byte_end":438316,"line_start":1606,"line_end":1606,"column_start":54,"column_end":62},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":3384},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438773,"byte_end":438781,"line_start":1624,"line_end":1624,"column_start":29,"column_end":37},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":438890,"byte_end":438898,"line_start":1630,"line_end":1630,"column_start":29,"column_end":37},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439010,"byte_end":439018,"line_start":1636,"line_end":1636,"column_start":32,"column_end":40},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439133,"byte_end":439141,"line_start":1642,"line_end":1642,"column_start":32,"column_end":40},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":3384},"to":{"krate":1,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":439635,"byte_end":439647,"line_start":1663,"line_end":1663,"column_start":6,"column_end":18},"kind":{"Impl":{"id":570}},"from":{"krate":0,"index":3877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.20.14/src/vector.rs","byte_start":442088,"byte_end":442100,"line_start":1740,"line_end":1740,"column_start":6,"column_end":18},"kind":{"Impl":{"id":571}},"from":{"krate":0,"index":3895},"to":{"krate":4294967295,"index":4294967295}}]}