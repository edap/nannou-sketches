{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","conrod_core","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=1ecc6dabef746803","-C","extra-filename=-1ecc6dabef746803","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","conrod_derive=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libconrod_derive-388d0cbe714b8056.so","--extern","copypasta=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libcopypasta-53360ab9de79c94a.rmeta","--extern","daggy=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libdaggy-8e82934181c11104.rmeta","--extern","fnv=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libfnv-9b31701b1af6da9d.rmeta","--extern","instant=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libinstant-bc499d551fa55abb.rmeta","--extern","num=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libnum-b4f21c3ed55ee21b.rmeta","--extern","input=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libinput-214384f9503d088e.rmeta","--extern","rusttype=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/librusttype-986f361e31b9b668.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libconrod_core-1ecc6dabef746803.rmeta"},"prelude":{"crate_id":{"name":"conrod_core","disambiguator":[3669700690814996850,4083983147112921473]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":15,"id":{"name":"conrod_derive","disambiguator":[9342511705839896519,7872944015647106597]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":16,"id":{"name":"daggy","disambiguator":[1013770809337084085,13972747579097955032]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":17,"id":{"name":"petgraph","disambiguator":[3315239079231450119,958776490011743235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":18,"id":{"name":"fixedbitset","disambiguator":[12136443693809048143,16088621428177435084]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":19,"id":{"name":"fnv","disambiguator":[14281685175553729897,390416791569617835]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":20,"id":{"name":"num","disambiguator":[4845004307707135205,1049910000399833287]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":21,"id":{"name":"num_bigint","disambiguator":[4986794666047575125,10821525405673859681]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":22,"id":{"name":"num_integer","disambiguator":[6180277847919311141,9508011011995319903]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":23,"id":{"name":"num_traits","disambiguator":[2136015123687830033,9735163811384062178]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":24,"id":{"name":"num_complex","disambiguator":[14161839126359287092,9104376030932332877]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":25,"id":{"name":"num_iter","disambiguator":[6584923289254514014,2865933681195123743]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":26,"id":{"name":"num_rational","disambiguator":[3692822974015002852,1929092048819883759]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":27,"id":{"name":"input","disambiguator":[5540246849700381785,6377906306683581924]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":28,"id":{"name":"bitflags","disambiguator":[381175081479133518,10994153786536176848]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":29,"id":{"name":"serde_derive","disambiguator":[4068705472082037422,6216815937653911113]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":30,"id":{"name":"serde","disambiguator":[16461157006250760294,16969646198258567013]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":31,"id":{"name":"viewport","disambiguator":[4951742417841838600,11974149403952088686]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":32,"id":{"name":"float","disambiguator":[7058803201048799360,15073071385537191820]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":33,"id":{"name":"rusttype","disambiguator":[8321851766944748726,10627738263869689343]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":34,"id":{"name":"approx","disambiguator":[3974204333726389161,9801222716720129469]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":35,"id":{"name":"ordered_float","disambiguator":[11999856798631254802,9466996267134285281]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":36,"id":{"name":"linked_hash_map","disambiguator":[2338188053214421811,62691985004639161]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":37,"id":{"name":"rustc_hash","disambiguator":[642462796696129389,1517420890865137522]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":38,"id":{"name":"crossbeam_deque","disambiguator":[5235303285713816219,1168591414518111885]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":39,"id":{"name":"crossbeam_epoch","disambiguator":[17163470530562775512,8709529870593392442]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":40,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":41,"id":{"name":"maybe_uninit","disambiguator":[9925295721960399709,5075810066591430732]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":42,"id":{"name":"crossbeam_utils","disambiguator":[12815700305172623123,14563506393251252287]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":43,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":44,"id":{"name":"memoffset","disambiguator":[2892690869131483658,14795605606618073579]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":45,"id":{"name":"scopeguard","disambiguator":[5081943333480440636,9076196664652206448]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":46,"id":{"name":"stb_truetype","disambiguator":[7859580680744222542,12689058129209723278]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":47,"id":{"name":"byteorder","disambiguator":[10719404080946289605,17148540255389135738]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":48,"id":{"name":"num_cpus","disambiguator":[5911647018467507976,7042850928943217931]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":49,"id":{"name":"libc","disambiguator":[7997064065336242500,8511025302220419458]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":50,"id":{"name":"copypasta","disambiguator":[12885462965552187201,14801356417931910637]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":51,"id":{"name":"smithay_clipboard","disambiguator":[1720983756907955291,4120069654822330779]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":52,"id":{"name":"nix","disambiguator":[15620197577567632531,14544443222869993471]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":53,"id":{"name":"void","disambiguator":[15288213692648777334,766411746124632892]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":54,"id":{"name":"smithay_client_toolkit","disambiguator":[6299729684330695960,594554865109829038]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":55,"id":{"name":"dlib","disambiguator":[3572392270384705459,10284649347613603682]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":56,"id":{"name":"libloading","disambiguator":[11641301825938901659,14827736444180748540]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":57,"id":{"name":"andrew","disambiguator":[18257031280259246793,2503471863536104115]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":58,"id":{"name":"line_drawing","disambiguator":[4535907520618111930,15715399478272792272]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":59,"id":{"name":"rusttype","disambiguator":[14243846864571247546,14119812811183285507]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":60,"id":{"name":"walkdir","disambiguator":[15836095841209596364,100417286177859557]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":61,"id":{"name":"same_file","disambiguator":[3476162871963927227,13059679438823549728]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":62,"id":{"name":"xdg","disambiguator":[7453588217950002805,11507294192943688732]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":63,"id":{"name":"xml","disambiguator":[15017834915304358724,772194227792966984]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":64,"id":{"name":"memmap","disambiguator":[3175860337248092939,5153411100839449853]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":65,"id":{"name":"wayland_client","disambiguator":[6311827216580410303,9016086078008703494]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":66,"id":{"name":"calloop","disambiguator":[4271121796891661057,3960389200219368413]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":67,"id":{"name":"mio","disambiguator":[10752672390248736491,3541940276479623666]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":68,"id":{"name":"net2","disambiguator":[15724288642931917556,10167986607080482737]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":69,"id":{"name":"iovec","disambiguator":[2383767226138008962,8111536067661003810]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":70,"id":{"name":"slab","disambiguator":[4729543071339994363,11740316045407999008]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":71,"id":{"name":"log","disambiguator":[2463566853520751095,647246307195811942]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":72,"id":{"name":"mio_extras","disambiguator":[14790969942441726164,5662599318725477735]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":73,"id":{"name":"lazycell","disambiguator":[9872127294747603159,6643548488606914393]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":74,"id":{"name":"wayland_commons","disambiguator":[7793301036586629500,1033779467939928083]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":75,"id":{"name":"wayland_sys","disambiguator":[10467944146308249229,7230107118439387192]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":76,"id":{"name":"wayland_protocols","disambiguator":[9409596664844979507,15923066989530266284]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":77,"id":{"name":"x11_clipboard","disambiguator":[8496550220409904580,9917863987564031944]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","num":78,"id":{"name":"xcb","disambiguator":[15072210138273375568,9612976937841548783]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","num":79,"id":{"name":"instant","disambiguator":[6200477003012787208,15772367084207058342]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":0,"byte_end":1062,"line_start":1,"line_end":46,"column_start":1,"column_end":24}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":4551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":481,"byte_end":486,"line_start":19,"line_end":19,"column_start":17,"column_end":22},"alias_span":null,"name":"Color","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":488,"byte_end":497,"line_start":19,"line_end":19,"column_start":24,"column_end":33},"alias_span":null,"name":"Colorable","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":523,"byte_end":524,"line_start":20,"line_end":20,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":543,"byte_end":552,"line_start":21,"line_end":21,"column_start":18,"column_end":27},"alias_span":null,"name":"Bordering","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":554,"byte_end":564,"line_start":21,"line_end":21,"column_start":29,"column_end":39},"alias_span":null,"name":"Borderable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":583,"byte_end":591,"line_start":22,"line_end":22,"column_start":17,"column_end":25},"alias_span":null,"name":"FontSize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":593,"byte_end":602,"line_start":22,"line_end":22,"column_start":27,"column_end":36},"alias_span":null,"name":"Labelable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":624,"byte_end":634,"line_start":23,"line_end":23,"column_start":20,"column_end":30},"alias_span":null,"name":"Dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":636,"byte_end":641,"line_start":23,"line_end":23,"column_start":32,"column_end":37},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5576},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":643,"byte_end":651,"line_start":23,"line_end":23,"column_start":39,"column_end":47},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":653,"byte_end":665,"line_start":23,"line_end":23,"column_start":49,"column_end":61},"alias_span":null,"name":"Positionable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":667,"byte_end":672,"line_start":23,"line_end":23,"column_start":63,"column_end":68},"alias_span":null,"name":"Range","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":674,"byte_end":678,"line_start":23,"line_end":23,"column_start":70,"column_end":74},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":680,"byte_end":686,"line_start":23,"line_end":23,"column_start":76,"column_end":82},"alias_span":null,"name":"Scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":978},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":688,"byte_end":696,"line_start":23,"line_end":23,"column_start":84,"column_end":92},"alias_span":null,"name":"Sizeable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":714,"byte_end":719,"line_start":24,"line_end":24,"column_start":16,"column_end":21},"alias_span":null,"name":"Theme","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":734,"byte_end":736,"line_start":25,"line_end":25,"column_start":14,"column_end":16},"alias_span":null,"name":"Ui","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":738,"byte_end":744,"line_start":25,"line_end":25,"column_start":18,"column_end":24},"alias_span":null,"name":"UiCell","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":746,"byte_end":755,"line_start":25,"line_end":25,"column_start":26,"column_end":35},"alias_span":null,"name":"UiBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1806},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":775,"byte_end":781,"line_start":26,"line_end":26,"column_start":18,"column_end":24},"alias_span":null,"name":"scroll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4445},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":783,"byte_end":789,"line_start":26,"line_end":26,"column_start":26,"column_end":32},"alias_span":null,"name":"Widget","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":32},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":39986,"byte_end":39992,"line_start":13,"line_end":13,"column_start":16,"column_end":22},"alias_span":null,"name":"Walker","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":4970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40021,"byte_end":40031,"line_start":14,"line_end":14,"column_start":28,"column_end":38},"alias_span":null,"name":"DepthOrder","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":27,"index":2125},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142014,"byte_end":142025,"line_start":104,"line_end":104,"column_start":20,"column_end":31},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142029,"byte_end":142035,"line_start":104,"line_end":104,"column_start":35,"column_end":41},"name":"Button","value":"","parent":{"krate":0,"index":457}},{"kind":"Use","ref_id":{"krate":0,"index":5063},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135550,"byte_end":135555,"line_start":23,"line_end":23,"column_start":22,"column_end":27},"alias_span":null,"name":"State","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":0,"index":5276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135579,"byte_end":135585,"line_start":24,"line_end":24,"column_start":23,"column_end":29},"alias_span":null,"name":"Global","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":0,"index":5383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135608,"byte_end":135613,"line_start":25,"line_end":25,"column_start":22,"column_end":27},"alias_span":null,"name":"Touch","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":0,"index":5151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135637,"byte_end":135643,"line_start":26,"line_end":26,"column_start":23,"column_end":29},"alias_span":null,"name":"Widget","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":692},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135693,"byte_end":135704,"line_start":29,"line_end":29,"column_start":33,"column_end":44},"alias_span":null,"name":"ModifierKey","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":2769},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135749,"byte_end":135755,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"alias_span":null,"name":"Button","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135761,"byte_end":135777,"line_start":33,"line_end":33,"column_start":5,"column_end":21},"alias_span":null,"name":"ControllerButton","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135783,"byte_end":135801,"line_start":34,"line_end":34,"column_start":5,"column_end":23},"alias_span":null,"name":"ControllerAxisArgs","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":40},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135807,"byte_end":135815,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"alias_span":null,"name":"keyboard","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135821,"byte_end":135824,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":2125},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135830,"byte_end":135841,"line_start":37,"line_end":37,"column_start":5,"column_end":16},"alias_span":null,"name":"MouseButton","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":27,"index":2475},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135847,"byte_end":135857,"line_start":38,"line_end":38,"column_start":5,"column_end":15},"alias_span":null,"name":"RenderArgs","value":"","parent":{"krate":0,"index":443}},{"kind":"Use","ref_id":{"krate":0,"index":5512},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197843,"byte_end":197847,"line_start":6,"line_end":6,"column_start":23,"column_end":27},"alias_span":null,"name":"Edge","value":"","parent":{"krate":0,"index":757}},{"kind":"Use","ref_id":{"krate":0,"index":5500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197849,"byte_end":197854,"line_start":6,"line_end":6,"column_start":29,"column_end":34},"alias_span":null,"name":"Range","value":"","parent":{"krate":0,"index":757}},{"kind":"Use","ref_id":{"krate":0,"index":5540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197878,"byte_end":197884,"line_start":7,"line_end":7,"column_start":22,"column_end":28},"alias_span":null,"name":"Corner","value":"","parent":{"krate":0,"index":757}},{"kind":"Use","ref_id":{"krate":0,"index":5528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197886,"byte_end":197890,"line_start":7,"line_end":7,"column_start":30,"column_end":34},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":757}},{"kind":"Use","ref_id":{"krate":33,"index":801},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301484,"byte_end":301489,"line_start":7,"line_end":7,"column_start":20,"column_end":25},"alias_span":null,"name":"Glyph","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":33,"index":775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301491,"byte_end":301498,"line_start":7,"line_end":7,"column_start":27,"column_end":34},"alias_span":null,"name":"GlyphId","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":33,"index":914},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301500,"byte_end":301509,"line_start":7,"line_end":7,"column_start":36,"column_end":45},"alias_span":null,"name":"GlyphIter","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":33,"index":925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301511,"byte_end":301521,"line_start":7,"line_end":7,"column_start":47,"column_end":57},"alias_span":null,"name":"LayoutIter","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":33,"index":892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301523,"byte_end":301528,"line_start":7,"line_end":7,"column_start":59,"column_end":64},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":33,"index":182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301560,"byte_end":301565,"line_start":8,"line_end":8,"column_start":30,"column_end":35},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301569,"byte_end":301579,"line_start":8,"line_end":8,"column_start":39,"column_end":49},"name":"GlyphCache","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":33,"index":398},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301662,"byte_end":301667,"line_start":12,"line_end":12,"column_start":24,"column_end":29},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":33,"index":528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301669,"byte_end":301673,"line_start":12,"line_end":12,"column_start":31,"column_end":35},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":33,"index":442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301675,"byte_end":301681,"line_start":12,"line_end":12,"column_start":37,"column_end":43},"alias_span":null,"name":"Vector","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":33,"index":138},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301683,"byte_end":301692,"line_start":12,"line_end":12,"column_start":45,"column_end":54},"alias_span":null,"name":"gpu_cache","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":33,"index":6},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301694,"byte_end":301699,"line_start":12,"line_end":12,"column_start":56,"column_end":61},"alias_span":null,"name":"point","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":33,"index":8},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301701,"byte_end":301707,"line_start":12,"line_end":12,"column_start":63,"column_end":69},"alias_span":null,"name":"vector","value":"","parent":{"krate":0,"index":1156}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436886,"byte_end":436888,"line_start":15,"line_end":15,"column_start":19,"column_end":21},"alias_span":null,"name":"Id","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":1846},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436923,"byte_end":436927,"line_start":17,"line_end":17,"column_start":33,"column_end":37},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436929,"byte_end":436933,"line_start":17,"line_end":17,"column_start":39,"column_end":43},"alias_span":null,"name":"Line","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":1923},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436969,"byte_end":436973,"line_start":18,"line_end":18,"column_start":34,"column_end":38},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436975,"byte_end":436980,"line_start":18,"line_end":18,"column_start":40,"column_end":45},"alias_span":null,"name":"Image","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":1947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437021,"byte_end":437025,"line_start":19,"line_end":19,"column_start":39,"column_end":43},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6144},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437027,"byte_end":437036,"line_start":19,"line_end":19,"column_start":45,"column_end":54},"alias_span":null,"name":"PointPath","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":2015},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437080,"byte_end":437084,"line_start":20,"line_end":20,"column_start":42,"column_end":46},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6181},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437086,"byte_end":437092,"line_start":20,"line_end":20,"column_start":48,"column_end":54},"alias_span":null,"name":"Circle","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":2032},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437134,"byte_end":437138,"line_start":21,"line_end":21,"column_start":40,"column_end":44},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437140,"byte_end":437144,"line_start":21,"line_end":21,"column_start":46,"column_end":50},"alias_span":null,"name":"Oval","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":2105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437189,"byte_end":437193,"line_start":22,"line_end":22,"column_start":43,"column_end":47},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6265},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437195,"byte_end":437202,"line_start":22,"line_end":22,"column_start":49,"column_end":56},"alias_span":null,"name":"Polygon","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":2174},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437249,"byte_end":437253,"line_start":23,"line_end":23,"column_start":45,"column_end":49},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437255,"byte_end":437264,"line_start":23,"line_end":23,"column_start":51,"column_end":60},"alias_span":null,"name":"Rectangle","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":2203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437311,"byte_end":437315,"line_start":24,"line_end":24,"column_start":45,"column_end":49},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437317,"byte_end":437326,"line_start":24,"line_end":24,"column_start":51,"column_end":60},"alias_span":null,"name":"Triangles","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":2340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437361,"byte_end":437365,"line_start":25,"line_end":25,"column_start":33,"column_end":37},"alias_span":null,"name":"self","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437367,"byte_end":437371,"line_start":25,"line_end":25,"column_start":39,"column_end":43},"alias_span":null,"name":"Text","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6550},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437409,"byte_end":437426,"line_start":27,"line_end":27,"column_start":35,"column_end":52},"alias_span":null,"name":"BorderedRectangle","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437450,"byte_end":437456,"line_start":28,"line_end":28,"column_start":23,"column_end":29},"alias_span":null,"name":"Button","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6758},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437480,"byte_end":437486,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"alias_span":null,"name":"Canvas","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6905},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437520,"byte_end":437535,"line_start":30,"line_end":30,"column_start":33,"column_end":48},"alias_span":null,"name":"CollapsibleArea","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":7006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437567,"byte_end":437579,"line_start":31,"line_end":31,"column_start":31,"column_end":43},"alias_span":null,"name":"DropDownList","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":7136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437612,"byte_end":437626,"line_start":32,"line_end":32,"column_start":32,"column_end":46},"alias_span":null,"name":"EnvelopeEditor","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":7338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437658,"byte_end":437671,"line_start":33,"line_end":33,"column_start":31,"column_end":44},"alias_span":null,"name":"FileNavigator","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":7453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437693,"byte_end":437697,"line_start":34,"line_end":34,"column_start":21,"column_end":25},"alias_span":null,"name":"Grid","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":7552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437719,"byte_end":437723,"line_start":35,"line_end":35,"column_start":21,"column_end":25},"alias_span":null,"name":"List","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":7691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437752,"byte_end":437762,"line_start":36,"line_end":36,"column_start":28,"column_end":38},"alias_span":null,"name":"ListSelect","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":7784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437786,"byte_end":437792,"line_start":37,"line_end":37,"column_start":23,"column_end":29},"alias_span":null,"name":"Matrix","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437815,"byte_end":437820,"line_start":38,"line_end":38,"column_start":22,"column_end":27},"alias_span":null,"name":"Graph","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437851,"byte_end":437863,"line_start":39,"line_end":39,"column_start":30,"column_end":42},"alias_span":null,"name":"NumberDialer","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437890,"byte_end":437898,"line_start":40,"line_end":40,"column_start":26,"column_end":34},"alias_span":null,"name":"PlotPath","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437928,"byte_end":437939,"line_start":41,"line_end":41,"column_start":29,"column_end":40},"alias_span":null,"name":"RangeSlider","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":437974,"byte_end":437990,"line_start":42,"line_end":42,"column_start":34,"column_end":50},"alias_span":null,"name":"RoundedRectangle","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438017,"byte_end":438026,"line_start":43,"line_end":43,"column_start":26,"column_end":35},"alias_span":null,"name":"Scrollbar","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8525},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438050,"byte_end":438056,"line_start":44,"line_end":44,"column_start":23,"column_end":29},"alias_span":null,"name":"Slider","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8599},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438078,"byte_end":438082,"line_start":45,"line_end":45,"column_start":21,"column_end":25},"alias_span":null,"name":"Tabs","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438108,"byte_end":438115,"line_start":46,"line_end":46,"column_start":25,"column_end":32},"alias_span":null,"name":"TextBox","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8768},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438142,"byte_end":438150,"line_start":47,"line_end":47,"column_start":26,"column_end":34},"alias_span":null,"name":"TextEdit","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438177,"byte_end":438185,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"alias_span":null,"name":"TitleBar","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":8968},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438209,"byte_end":438215,"line_start":49,"line_end":49,"column_start":23,"column_end":29},"alias_span":null,"name":"Toggle","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":9056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438239,"byte_end":438244,"line_start":50,"line_end":50,"column_start":23,"column_end":28},"alias_span":null,"name":"XYPad","value":"","parent":{"krate":0,"index":1702}},{"kind":"Use","ref_id":{"krate":0,"index":6078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":536901,"byte_end":536908,"line_start":9,"line_end":9,"column_start":22,"column_end":29},"alias_span":null,"name":"Pattern","value":"","parent":{"krate":0,"index":1947}},{"kind":"Use","ref_id":{"krate":0,"index":6064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":536931,"byte_end":536936,"line_start":10,"line_end":10,"column_start":22,"column_end":27},"alias_span":null,"name":"Style","value":"","parent":{"krate":0,"index":1947}},{"kind":"Use","ref_id":{"krate":0,"index":7252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682420,"byte_end":682433,"line_start":23,"line_end":23,"column_start":31,"column_end":44},"alias_span":null,"name":"DirectoryView","value":"","parent":{"krate":0,"index":2799}},{"kind":"Use","ref_id":{"krate":0,"index":7847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783009,"byte_end":783013,"line_start":13,"line_end":13,"column_start":22,"column_end":26},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":3345}},{"kind":"Use","ref_id":{"krate":0,"index":7919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783015,"byte_end":783027,"line_start":13,"line_end":13,"column_start":28,"column_end":40},"alias_span":null,"name":"SocketLayout","value":"","parent":{"krate":0,"index":3345}},{"kind":"Use","ref_id":{"krate":0,"index":7934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783029,"byte_end":783039,"line_start":13,"line_end":13,"column_start":42,"column_end":52},"alias_span":null,"name":"SocketSide","value":"","parent":{"krate":0,"index":3345}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":0,"byte_end":1062,"line_start":1,"line_end":46,"column_start":1,"column_end":24},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":51},{"krate":0,"index":146},{"krate":0,"index":201},{"krate":0,"index":407},{"krate":0,"index":411},{"krate":0,"index":443},{"krate":0,"index":652},{"krate":0,"index":673},{"krate":0,"index":757},{"krate":0,"index":1012},{"krate":0,"index":1144},{"krate":0,"index":1433},{"krate":0,"index":1459},{"krate":0,"index":1623},{"krate":0,"index":1702},{"krate":0,"index":4540}],"decl_id":null,"docs":" # Conrod","sig":null,"attributes":[{"value":"! # Conrod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":0,"byte_end":12,"line_start":1,"line_end":1,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":13,"byte_end":16,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! An easy-to-use, immediate-mode, 2D GUI library featuring a range of useful widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":17,"byte_end":104,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":105,"byte_end":108,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! If you are new to Conrod, we recommend checking out [The Guide](./guide/index.html).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":109,"byte_end":197,"line_start":5,"line_end":5,"column_start":1,"column_end":89}},{"value":"deny(unsafe_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":199,"byte_end":220,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":221,"byte_end":259,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"warn(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":260,"byte_end":282,"line_start":9,"line_end":9,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1271,"byte_end":1277,"line_start":9,"line_end":9,"column_start":5,"column_end":11},"name":"Border","qualname":"::border::Bordering::Border","value":"Bordering::Border(f64, Color)","parent":{"krate":0,"index":4541},"children":[],"decl_id":null,"docs":" Border width and color.\n","sig":null,"attributes":[{"value":"/ Border width and color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1239,"byte_end":1266,"line_start":8,"line_end":8,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1314,"byte_end":1322,"line_start":11,"line_end":11,"column_start":5,"column_end":13},"name":"NoBorder","qualname":"::border::Bordering::NoBorder","value":"Bordering::NoBorder","parent":{"krate":0,"index":4541},"children":[],"decl_id":null,"docs":" No border.\n","sig":null,"attributes":[{"value":"/ No border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1295,"byte_end":1309,"line_start":10,"line_end":10,"column_start":5,"column_end":19}}]},{"kind":"Enum","id":{"krate":0,"index":4541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1223,"byte_end":1232,"line_start":7,"line_end":7,"column_start":10,"column_end":19},"name":"Bordering","qualname":"::border::Bordering","value":"Bordering::{Border, NoBorder}","parent":null,"children":[{"krate":0,"index":4542},{"krate":0,"index":4546}],"decl_id":null,"docs":" To be used as a parameter for defining the aesthetic\n of the widget border.\n","sig":null,"attributes":[{"value":"/ To be used as a parameter for defining the aesthetic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1108,"byte_end":1164,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ of the widget border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1165,"byte_end":1190,"line_start":5,"line_end":5,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1376,"byte_end":1386,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"Borderable","qualname":"::border::Borderable","value":"Borderable: Sized","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" Widgets that may display a border.\n","sig":null,"attributes":[{"value":"/ Widgets that may display a border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1327,"byte_end":1365,"line_start":14,"line_end":14,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1450,"byte_end":1456,"line_start":18,"line_end":18,"column_start":8,"column_end":14},"name":"border","qualname":"::border::Borderable::border","value":"fn (self, width: f64) -> Self","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Set the width of the widget's border.\n","sig":null,"attributes":[{"value":"/ Set the width of the widget's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1401,"byte_end":1442,"line_start":17,"line_end":17,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1538,"byte_end":1550,"line_start":21,"line_end":21,"column_start":8,"column_end":20},"name":"border_color","qualname":"::border::Borderable::border_color","value":"fn (self, color: Color) -> Self","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Set the color of the widget's border.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1489,"byte_end":1530,"line_start":20,"line_end":20,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1651,"byte_end":1662,"line_start":24,"line_end":24,"column_start":8,"column_end":19},"name":"border_rgba","qualname":"::border::Borderable::border_rgba","value":"fn (self, r: f32, g: f32, b: f32, a: f32) -> Self","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Set the color of the widget's border with rgba values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's border with rgba values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1585,"byte_end":1643,"line_start":23,"line_end":23,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1831,"byte_end":1841,"line_start":29,"line_end":29,"column_start":8,"column_end":18},"name":"border_rgb","qualname":"::border::Borderable::border_rgb","value":"fn (self, r: f32, g: f32, b: f32) -> Self","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Set the color of the widget's border with rgb values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's border with rgb values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1766,"byte_end":1823,"line_start":28,"line_end":28,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1999,"byte_end":2010,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"border_hsla","qualname":"::border::Borderable::border_hsla","value":"fn (self, h: f32, s: f32, l: f32, a: f32) -> Self","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Set the color of the widget's border with hsla values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's border with hsla values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1933,"byte_end":1991,"line_start":33,"line_end":33,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":2179,"byte_end":2189,"line_start":39,"line_end":39,"column_start":8,"column_end":18},"name":"border_hsl","qualname":"::border::Borderable::border_hsl","value":"fn (self, h: f32, s: f32, l: f32) -> Self","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Set the color of the widget's border with hsl values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's border with hsl values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":2114,"byte_end":2171,"line_start":38,"line_end":38,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"color","qualname":"::color","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":4551},{"krate":0,"index":4569},{"krate":0,"index":4570},{"krate":0,"index":4568},{"krate":0,"index":4566},{"krate":0,"index":4564},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":4573},{"krate":0,"index":4587},{"krate":0,"index":4585},{"krate":0,"index":4583},{"krate":0,"index":4579},{"krate":0,"index":4580},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":4588},{"krate":0,"index":4602},{"krate":0,"index":4600},{"krate":0,"index":4598},{"krate":0,"index":4594},{"krate":0,"index":4595},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":4603},{"krate":0,"index":4618},{"krate":0,"index":4616},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"decl_id":null,"docs":" \n A library providing simple `Color` and `Gradient` types along with useful transformations and\n presets.","sig":null,"attributes":[{"value":"! ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2281,"byte_end":2285,"line_start":1,"line_end":1,"column_start":1,"column_end":5}},{"value":"! A library providing simple `Color` and `Gradient` types along with useful transformations and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2286,"byte_end":2383,"line_start":2,"line_end":2,"column_start":1,"column_end":98}},{"value":"! presets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2384,"byte_end":2396,"line_start":3,"line_end":3,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2397,"byte_end":2400,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2401,"byte_end":2404,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! Inspiration taken from [elm-lang's color module]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2405,"byte_end":2457,"line_start":6,"line_end":6,"column_start":1,"column_end":53}},{"value":"! (https://github.com/elm-lang/core/blob/62b22218c42fb8ccc996c86bea450a14991ab815/src/Color.elm)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2458,"byte_end":2556,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2557,"byte_end":2560,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2561,"byte_end":2564,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! Module for working with colors. Includes [RGB](https://en.wikipedia.org/wiki/RGB_color_model)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2565,"byte_end":2662,"line_start":10,"line_end":10,"column_start":1,"column_end":98}},{"value":"! and [HSL](http://en.wikipedia.org/wiki/HSL_and_HSV) creation, gradients and built-in names.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2663,"byte_end":2758,"line_start":11,"line_end":11,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2759,"byte_end":2762,"line_start":12,"line_end":12,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3017,"byte_end":3021,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Color::Rgba","value":"Color::Rgba(f32, f32, f32, f32)","parent":{"krate":0,"index":4551},"children":[],"decl_id":null,"docs":" Red, Green, Blue, Alpha - All values' scales represented between 0.0 and 1.0.\n","sig":null,"attributes":[{"value":"/ Red, Green, Blue, Alpha - All values' scales represented between 0.0 and 1.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2931,"byte_end":3012,"line_start":20,"line_end":20,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4558},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3143,"byte_end":3147,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"Hsla","qualname":"::color::Color::Hsla","value":"Color::Hsla(f32, f32, f32, f32)","parent":{"krate":0,"index":4551},"children":[],"decl_id":null,"docs":" Hue, Saturation, Lightness, Alpha - all valuess scales represented between 0.0 and 1.0.\n","sig":null,"attributes":[{"value":"/ Hue, Saturation, Lightness, Alpha - all valuess scales represented between 0.0 and 1.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3047,"byte_end":3138,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":4551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2919,"byte_end":2924,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Color","qualname":"::color::Color","value":"Color::{Rgba, Hsla}","parent":null,"children":[{"krate":0,"index":4552},{"krate":0,"index":4558}],"decl_id":null,"docs":" Color supporting RGB and HSL variants.\n","sig":null,"attributes":[{"value":"/ Color supporting RGB and HSL variants.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":2826,"byte_end":2868,"line_start":17,"line_end":17,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":57},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3210,"byte_end":3216,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Colour","qualname":"::color::Colour","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Regional spelling alias.\n","sig":null,"attributes":[{"value":"/ Regional spelling alias.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3172,"byte_end":3200,"line_start":26,"line_end":26,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":58},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3376,"byte_end":3380,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"rgba","qualname":"::color::rgba","value":"fn (r: f32, g: f32, b: f32, a: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Create RGB colors with an alpha component for transparency.\n The alpha component is specified with numbers between 0 and 1.\n","sig":null,"attributes":[{"value":"/ Create RGB colors with an alpha component for transparency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3228,"byte_end":3291,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/ The alpha component is specified with numbers between 0 and 1.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3292,"byte_end":3358,"line_start":31,"line_end":31,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3359,"byte_end":3368,"line_start":32,"line_end":32,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3529,"byte_end":3532,"line_start":40,"line_end":40,"column_start":8,"column_end":11},"name":"rgb","qualname":"::color::rgb","value":"fn (r: f32, g: f32, b: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Create RGB colors from numbers between 0.0 and 1.0.\n","sig":null,"attributes":[{"value":"/ Create RGB colors from numbers between 0.0 and 1.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3456,"byte_end":3511,"line_start":38,"line_end":38,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3512,"byte_end":3521,"line_start":39,"line_end":39,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":60},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3750,"byte_end":3760,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"rgba_bytes","qualname":"::color::rgba_bytes","value":"fn (r: u8, g: u8, b: u8, a: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Create RGB colors from numbers between 0 and 255 inclusive.\n The alpha component is specified with numbers between 0 and 1.\n","sig":null,"attributes":[{"value":"/ Create RGB colors from numbers between 0 and 255 inclusive.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3602,"byte_end":3665,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/ The alpha component is specified with numbers between 0 and 1.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3666,"byte_end":3732,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3733,"byte_end":3742,"line_start":47,"line_end":47,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3959,"byte_end":3968,"line_start":55,"line_end":55,"column_start":8,"column_end":17},"name":"rgb_bytes","qualname":"::color::rgb_bytes","value":"fn (r: u8, g: u8, b: u8) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Create RGB colors from numbers between 0 and 255 inclusive.\n","sig":null,"attributes":[{"value":"/ Create RGB colors from numbers between 0 and 255 inclusive.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3878,"byte_end":3941,"line_start":53,"line_end":53,"column_start":1,"column_end":64}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":3942,"byte_end":3951,"line_start":54,"line_end":54,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4163,"byte_end":4167,"line_start":63,"line_end":63,"column_start":8,"column_end":12},"name":"hsla","qualname":"::color::hsla","value":"fn (hue: f32, saturation: f32, lightness: f32, alpha: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV) with an alpha component for\n transparency.\n","sig":null,"attributes":[{"value":"/ Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV) with an alpha component for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4034,"byte_end":4127,"line_start":60,"line_end":60,"column_start":1,"column_end":94}},{"value":"/ transparency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4128,"byte_end":4145,"line_start":61,"line_end":61,"column_start":1,"column_end":18}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4146,"byte_end":4155,"line_start":62,"line_end":62,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4972,"byte_end":4975,"line_start":80,"line_end":80,"column_start":8,"column_end":11},"name":"hsl","qualname":"::color::hsl","value":"fn (hue: f32, saturation: f32, lightness: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV). This gives you access to colors\n more like a color wheel, where all hues are arranged in a circle that you specify with radians.\n \n   red        = hsl(degrees(0.0)   , 1.0 , 0.5)\n   green      = hsl(degrees(120.0) , 1.0 , 0.5)\n   blue       = hsl(degrees(240.0) , 1.0 , 0.5)\n   pastel_red = hsl(degrees(0.0)   , 0.7 , 0.7)","sig":null,"attributes":[{"value":"/ Create [HSL colors](http://en.wikipedia.org/wiki/HSL_and_HSV). This gives you access to colors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4325,"byte_end":4423,"line_start":68,"line_end":68,"column_start":1,"column_end":99}},{"value":"/ more like a color wheel, where all hues are arranged in a circle that you specify with radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4424,"byte_end":4523,"line_start":69,"line_end":69,"column_start":1,"column_end":100}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4524,"byte_end":4528,"line_start":70,"line_end":70,"column_start":1,"column_end":5}},{"value":"/   red        = hsl(degrees(0.0)   , 1.0 , 0.5)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4529,"byte_end":4579,"line_start":71,"line_end":71,"column_start":1,"column_end":51}},{"value":"/   green      = hsl(degrees(120.0) , 1.0 , 0.5)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4580,"byte_end":4630,"line_start":72,"line_end":72,"column_start":1,"column_end":51}},{"value":"/   blue       = hsl(degrees(240.0) , 1.0 , 0.5)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4631,"byte_end":4681,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/   pastel_red = hsl(degrees(0.0)   , 0.7 , 0.7)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4682,"byte_end":4732,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4733,"byte_end":4736,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ To cycle through all colors, just cycle through degrees. The saturation level is how vibrant","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4737,"byte_end":4833,"line_start":76,"line_end":76,"column_start":1,"column_end":97}},{"value":"/ the color is, like a dial between grey and bright colors. The lightness level is a dial between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4834,"byte_end":4933,"line_start":77,"line_end":77,"column_start":1,"column_end":100}},{"value":"/ white and black.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4934,"byte_end":4954,"line_start":78,"line_end":78,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":4955,"byte_end":4964,"line_start":79,"line_end":79,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5150,"byte_end":5159,"line_start":86,"line_end":86,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::color::grayscale","value":"fn (p: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Produce a gray based on the input. 0.0 is white, 1.0 is black.\n","sig":null,"attributes":[{"value":"/ Produce a gray based on the input. 0.0 is white, 1.0 is black.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5076,"byte_end":5142,"line_start":85,"line_end":85,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5293,"byte_end":5302,"line_start":90,"line_end":90,"column_start":8,"column_end":17},"name":"greyscale","qualname":"::color::greyscale","value":"fn (p: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Produce a gray based on the input. 0.0 is white, 1.0 is black.\n","sig":null,"attributes":[{"value":"/ Produce a gray based on the input. 0.0 is white, 1.0 is black.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5219,"byte_end":5285,"line_start":89,"line_end":89,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5658,"byte_end":5668,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"complement","qualname":"<Color>::complement","value":"fn (self) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Produce a complementary color. The two colors will accent each other. This is the same as\n rotating the hue by 180 degrees.\n","sig":null,"attributes":[{"value":"/ Produce a complementary color. The two colors will accent each other. This is the same as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5512,"byte_end":5605,"line_start":103,"line_end":103,"column_start":5,"column_end":98}},{"value":"/ rotating the hue by 180 degrees.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5610,"byte_end":5646,"line_start":104,"line_end":104,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":6025,"byte_end":6034,"line_start":116,"line_end":116,"column_start":12,"column_end":21},"name":"luminance","qualname":"<Color>::luminance","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Calculate and return the luminance of the Color.\n","sig":null,"attributes":[{"value":"/ Calculate and return the luminance of the Color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5961,"byte_end":6013,"line_start":115,"line_end":115,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":6386,"byte_end":6400,"line_start":125,"line_end":125,"column_start":12,"column_end":26},"name":"plain_contrast","qualname":"<Color>::plain_contrast","value":"fn (self) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Return either black or white, depending which contrasts the Color the most. This will be\n useful for determining a readable color for text on any given background Color.\n","sig":null,"attributes":[{"value":"/ Return either black or white, depending which contrasts the Color the most. This will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":6194,"byte_end":6286,"line_start":123,"line_end":123,"column_start":5,"column_end":97}},{"value":"/ useful for determining a readable color for text on any given background Color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":6291,"byte_end":6374,"line_start":124,"line_end":124,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":6896,"byte_end":6902,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"name":"to_hsl","qualname":"<Color>::to_hsl","value":"fn (self) -> Hsla","parent":null,"children":[],"decl_id":null,"docs":" Extract the components of a color in the HSL format.\n","sig":null,"attributes":[{"value":"/ Extract the components of a color in the HSL format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":6828,"byte_end":6884,"line_start":140,"line_end":140,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":7228,"byte_end":7234,"line_start":152,"line_end":152,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<Color>::to_rgb","value":"fn (self) -> Rgba","parent":null,"children":[],"decl_id":null,"docs":" Extract the components of a color in the RGB format.\n","sig":null,"attributes":[{"value":"/ Extract the components of a color in the RGB format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":7160,"byte_end":7216,"line_start":151,"line_end":151,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":7586,"byte_end":7592,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"name":"to_fsa","qualname":"<Color>::to_fsa","value":"fn (self) -> [f32; 4]","parent":null,"children":[],"decl_id":null,"docs":" Extract the components of a color in the RGB format within a fixed-size array.\n","sig":null,"attributes":[{"value":"/ Extract the components of a color in the RGB format within a fixed-size array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":7492,"byte_end":7574,"line_start":162,"line_end":162,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":7775,"byte_end":7786,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"to_byte_fsa","qualname":"<Color>::to_byte_fsa","value":"fn (self) -> [u8; 4]","parent":null,"children":[],"decl_id":null,"docs":" Same as `to_fsa`, except r, g, b and a are represented in byte form.\n","sig":null,"attributes":[{"value":"/ Same as `to_fsa`, except r, g, b and a are represented in byte form.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":7691,"byte_end":7763,"line_start":168,"line_end":168,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":8321,"byte_end":8335,"line_start":183,"line_end":183,"column_start":12,"column_end":26},"name":"with_luminance","qualname":"<Color>::with_luminance","value":"fn (self, l: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Return the same color but with the given luminance.\n","sig":null,"attributes":[{"value":"/ Return the same color but with the given luminance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":8254,"byte_end":8309,"line_start":182,"line_end":182,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":8537,"byte_end":8542,"line_start":189,"line_end":189,"column_start":12,"column_end":17},"name":"alpha","qualname":"<Color>::alpha","value":"fn (self, alpha: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Return the same color but with the alpha multiplied by the given alpha.\n","sig":null,"attributes":[{"value":"/ Return the same color but with the alpha multiplied by the given alpha.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":8450,"byte_end":8525,"line_start":188,"line_end":188,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":8821,"byte_end":8831,"line_start":197,"line_end":197,"column_start":12,"column_end":22},"name":"with_alpha","qualname":"<Color>::with_alpha","value":"fn (self, a: f32) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Return the same color but with the given alpha.\n","sig":null,"attributes":[{"value":"/ Return the same color but with the given alpha.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":8758,"byte_end":8809,"line_start":196,"line_end":196,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":9093,"byte_end":9104,"line_start":205,"line_end":205,"column_start":12,"column_end":23},"name":"highlighted","qualname":"<Color>::highlighted","value":"fn (self) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Return a highlighted version of the current Color.\n","sig":null,"attributes":[{"value":"/ Return a highlighted version of the current Color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":9027,"byte_end":9081,"line_start":204,"line_end":204,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":9717,"byte_end":9724,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"clicked","qualname":"<Color>::clicked","value":"fn (&self) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Return a clicked version of the current Color.\n","sig":null,"attributes":[{"value":"/ Return a clicked version of the current Color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":9655,"byte_end":9705,"line_start":221,"line_end":221,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10310,"byte_end":10316,"line_start":239,"line_end":239,"column_start":12,"column_end":18},"name":"invert","qualname":"<Color>::invert","value":"fn (self) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Return the Color's invert.\n","sig":null,"attributes":[{"value":"/ Return the Color's invert.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10268,"byte_end":10298,"line_start":238,"line_end":238,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10495,"byte_end":10498,"line_start":245,"line_end":245,"column_start":12,"column_end":15},"name":"red","qualname":"<Color>::red","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Return the red value.\n","sig":null,"attributes":[{"value":"/ Return the red value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10458,"byte_end":10483,"line_start":244,"line_end":244,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10621,"byte_end":10626,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"green","qualname":"<Color>::green","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Return the green value.\n","sig":null,"attributes":[{"value":"/ Return the green value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10582,"byte_end":10609,"line_start":250,"line_end":250,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10748,"byte_end":10752,"line_start":257,"line_end":257,"column_start":12,"column_end":16},"name":"blue","qualname":"<Color>::blue","value":"fn (&self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Return the blue value.\n","sig":null,"attributes":[{"value":"/ Return the blue value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10710,"byte_end":10736,"line_start":256,"line_end":256,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10870,"byte_end":10877,"line_start":263,"line_end":263,"column_start":12,"column_end":19},"name":"set_red","qualname":"<Color>::set_red","value":"fn (&mut self, r: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the red value.\n","sig":null,"attributes":[{"value":"/ Set the red value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10836,"byte_end":10858,"line_start":262,"line_end":262,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11026,"byte_end":11035,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"set_green","qualname":"<Color>::set_green","value":"fn (&mut self, g: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the green value.\n","sig":null,"attributes":[{"value":"/ Set the green value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":10990,"byte_end":11014,"line_start":268,"line_end":268,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11183,"byte_end":11191,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"set_blue","qualname":"<Color>::set_blue","value":"fn (&mut self, b: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the blue value.\n","sig":null,"attributes":[{"value":"/ Set the blue value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11148,"byte_end":11171,"line_start":274,"line_end":274,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":4573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11415,"byte_end":11419,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"name":"Hsla","qualname":"::color::Hsla","value":"","parent":null,"children":[],"decl_id":null,"docs":" The parts of HSL along with an alpha for transparency.\n","sig":null,"attributes":[{"value":"/ The parts of HSL along with an alpha for transparency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11304,"byte_end":11362,"line_start":283,"line_end":283,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":4588},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11782,"byte_end":11786,"line_start":303,"line_end":303,"column_start":12,"column_end":16},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":" The parts of RGB along with an alpha for transparency.\n","sig":null,"attributes":[{"value":"/ The parts of RGB along with an alpha for transparency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11671,"byte_end":11729,"line_start":301,"line_end":301,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":12221,"byte_end":12232,"line_start":328,"line_end":328,"column_start":8,"column_end":19},"name":"f32_to_byte","qualname":"::color::f32_to_byte","value":"fn (c: f32) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Convert an f32 color to a byte.\n","sig":null,"attributes":[{"value":"/ Convert an f32 color to a byte.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":12168,"byte_end":12203,"line_start":326,"line_end":326,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":12204,"byte_end":12213,"line_start":327,"line_end":327,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":12323,"byte_end":12333,"line_start":332,"line_end":332,"column_start":8,"column_end":18},"name":"rgb_to_hsl","qualname":"::color::rgb_to_hsl","value":"fn (r: f32, g: f32, b: f32) -> (f32, f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" Pure function for converting rgb to hsl.\n","sig":null,"attributes":[{"value":"/ Pure function for converting rgb to hsl.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":12271,"byte_end":12315,"line_start":331,"line_end":331,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":13086,"byte_end":13096,"line_start":354,"line_end":354,"column_start":8,"column_end":18},"name":"hsl_to_rgb","qualname":"::color::hsl_to_rgb","value":"fn (hue: f32, saturation: f32, lightness: f32) -> (f32, f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" Pure function for converting hsl to rgb.\n","sig":null,"attributes":[{"value":"/ Pure function for converting hsl to rgb.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":13034,"byte_end":13078,"line_start":353,"line_end":353,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4604},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14003,"byte_end":14009,"line_start":378,"line_end":378,"column_start":5,"column_end":11},"name":"Linear","qualname":"::color::Gradient::Linear","value":"Gradient::Linear((f64, f64), (f64, f64), Vec<(f64, Color)>)","parent":{"krate":0,"index":4603},"children":[],"decl_id":null,"docs":" Takes a start and end point and then a series of color stops that indicate how to\n interpolate between the start and end points.\n","sig":null,"attributes":[{"value":"/ Takes a start and end point and then a series of color stops that indicate how to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":13859,"byte_end":13944,"line_start":376,"line_end":376,"column_start":5,"column_end":90}},{"value":"/ interpolate between the start and end points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":13949,"byte_end":13998,"line_start":377,"line_end":377,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14276,"byte_end":14282,"line_start":382,"line_end":382,"column_start":5,"column_end":11},"name":"Radial","qualname":"::color::Gradient::Radial","value":"Gradient::Radial((f64, f64), f64, (f64, f64), f64, Vec<(f64, Color)>)","parent":{"krate":0,"index":4603},"children":[],"decl_id":null,"docs":" First takes a start point and inner radius. Then takes an end point and outer radius.\n It then takes a series of color stops that indicate how to interpolate between the\n inner and outer circles.\n","sig":null,"attributes":[{"value":"/ First takes a start point and inner radius. Then takes an end point and outer radius.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14058,"byte_end":14147,"line_start":379,"line_end":379,"column_start":5,"column_end":94}},{"value":"/ It then takes a series of color stops that indicate how to interpolate between the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14152,"byte_end":14238,"line_start":380,"line_end":380,"column_start":5,"column_end":91}},{"value":"/ inner and outer circles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14243,"byte_end":14271,"line_start":381,"line_end":381,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":4603},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":13844,"byte_end":13852,"line_start":375,"line_end":375,"column_start":10,"column_end":18},"name":"Gradient","qualname":"::color::Gradient","value":"Gradient::{Linear, Radial}","parent":null,"children":[{"krate":0,"index":4604},{"krate":0,"index":4609}],"decl_id":null,"docs":" Linear or Radial Gradient.\n","sig":null,"attributes":[{"value":"/ Linear or Radial Gradient.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":13780,"byte_end":13810,"line_start":373,"line_end":373,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14378,"byte_end":14384,"line_start":387,"line_end":387,"column_start":8,"column_end":14},"name":"linear","qualname":"::color::linear","value":"fn (start: (f64, f64), end: (f64, f64), colors: Vec<(f64, Color)>) -> Gradient","parent":null,"children":[],"decl_id":null,"docs":" Create a linear gradient.\n","sig":null,"attributes":[{"value":"/ Create a linear gradient.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14341,"byte_end":14370,"line_start":386,"line_end":386,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14545,"byte_end":14551,"line_start":393,"line_end":393,"column_start":8,"column_end":14},"name":"radial","qualname":"::color::radial","value":"fn (start: (f64, f64), start_r: f64, end: (f64, f64), end_r: f64, colors: Vec<(f64, Color)>) -> Gradient","parent":null,"children":[],"decl_id":null,"docs":" Create a radial gradient. \n","sig":null,"attributes":[{"value":"/ Create a radial gradient. ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":14507,"byte_end":14537,"line_start":392,"line_end":392,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15342,"byte_end":15351,"line_start":413,"line_end":413,"column_start":11,"column_end":20},"name":"LIGHT_RED","qualname":"::color::LIGHT_RED","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Scarlet Red - Light - #EF2929                         \n","sig":null,"attributes":[{"value":"/ Scarlet Red - Light - #EF2929                         ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15273,"byte_end":15331,"line_start":412,"line_end":412,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15463,"byte_end":15466,"line_start":415,"line_end":415,"column_start":11,"column_end":14},"name":"RED","qualname":"::color::RED","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Scarlet Red - Regular - #CC0000                       \n","sig":null,"attributes":[{"value":"/ Scarlet Red - Regular - #CC0000                       ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15394,"byte_end":15452,"line_start":414,"line_end":414,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15582,"byte_end":15590,"line_start":417,"line_end":417,"column_start":11,"column_end":19},"name":"DARK_RED","qualname":"::color::DARK_RED","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Scarlet Red - Dark - #A30000                          \n","sig":null,"attributes":[{"value":"/ Scarlet Red - Dark - #A30000                          ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15513,"byte_end":15571,"line_start":416,"line_end":416,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15702,"byte_end":15714,"line_start":420,"line_end":420,"column_start":11,"column_end":23},"name":"LIGHT_ORANGE","qualname":"::color::LIGHT_ORANGE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Orange - Light - #FCAF3E                              \n","sig":null,"attributes":[{"value":"/ Orange - Light - #FCAF3E                              ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15633,"byte_end":15691,"line_start":419,"line_end":419,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15824,"byte_end":15830,"line_start":422,"line_end":422,"column_start":11,"column_end":17},"name":"ORANGE","qualname":"::color::ORANGE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Orange - Regular - #F57900                            \n","sig":null,"attributes":[{"value":"/ Orange - Regular - #F57900                            ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15755,"byte_end":15813,"line_start":421,"line_end":421,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15945,"byte_end":15956,"line_start":424,"line_end":424,"column_start":11,"column_end":22},"name":"DARK_ORANGE","qualname":"::color::DARK_ORANGE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Orange - Dark - #CE5C00                               \n","sig":null,"attributes":[{"value":"/ Orange - Dark - #CE5C00                               ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15876,"byte_end":15934,"line_start":423,"line_end":423,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16066,"byte_end":16078,"line_start":427,"line_end":427,"column_start":11,"column_end":23},"name":"LIGHT_YELLOW","qualname":"::color::LIGHT_YELLOW","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Butter - Light - #FCE94F                              \n","sig":null,"attributes":[{"value":"/ Butter - Light - #FCE94F                              ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":15997,"byte_end":16055,"line_start":426,"line_end":426,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":114},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16188,"byte_end":16194,"line_start":429,"line_end":429,"column_start":11,"column_end":17},"name":"YELLOW","qualname":"::color::YELLOW","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Butter - Regular - #EDD400                            \n","sig":null,"attributes":[{"value":"/ Butter - Regular - #EDD400                            ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16119,"byte_end":16177,"line_start":428,"line_end":428,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16309,"byte_end":16320,"line_start":431,"line_end":431,"column_start":11,"column_end":22},"name":"DARK_YELLOW","qualname":"::color::DARK_YELLOW","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Butter - Dark - #C4A000                               \n","sig":null,"attributes":[{"value":"/ Butter - Dark - #C4A000                               ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16240,"byte_end":16298,"line_start":430,"line_end":430,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16431,"byte_end":16442,"line_start":434,"line_end":434,"column_start":11,"column_end":22},"name":"LIGHT_GREEN","qualname":"::color::LIGHT_GREEN","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Chameleon - Light - #8AE234                           \n","sig":null,"attributes":[{"value":"/ Chameleon - Light - #8AE234                           ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16362,"byte_end":16420,"line_start":433,"line_end":433,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":117},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16554,"byte_end":16559,"line_start":436,"line_end":436,"column_start":11,"column_end":16},"name":"GREEN","qualname":"::color::GREEN","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Chameleon - Regular - #73D216                         \n","sig":null,"attributes":[{"value":"/ Chameleon - Regular - #73D216                         ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16485,"byte_end":16543,"line_start":435,"line_end":435,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16676,"byte_end":16686,"line_start":438,"line_end":438,"column_start":11,"column_end":21},"name":"DARK_GREEN","qualname":"::color::DARK_GREEN","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Chameleon - Dark - #4E9A06                            \n","sig":null,"attributes":[{"value":"/ Chameleon - Dark - #4E9A06                            ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16607,"byte_end":16665,"line_start":437,"line_end":437,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16797,"byte_end":16807,"line_start":441,"line_end":441,"column_start":11,"column_end":21},"name":"LIGHT_BLUE","qualname":"::color::LIGHT_BLUE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Sky Blue - Light - #729FCF                            \n","sig":null,"attributes":[{"value":"/ Sky Blue - Light - #729FCF                            ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16728,"byte_end":16786,"line_start":440,"line_end":440,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16920,"byte_end":16924,"line_start":443,"line_end":443,"column_start":11,"column_end":15},"name":"BLUE","qualname":"::color::BLUE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Sky Blue - Regular - #3465A4                          \n","sig":null,"attributes":[{"value":"/ Sky Blue - Regular - #3465A4                          ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16851,"byte_end":16909,"line_start":442,"line_end":442,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":121},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17042,"byte_end":17051,"line_start":445,"line_end":445,"column_start":11,"column_end":20},"name":"DARK_BLUE","qualname":"::color::DARK_BLUE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Sky Blue - Dark - #204A87                             \n","sig":null,"attributes":[{"value":"/ Sky Blue - Dark - #204A87                             ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":16973,"byte_end":17031,"line_start":444,"line_end":444,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17164,"byte_end":17176,"line_start":448,"line_end":448,"column_start":11,"column_end":23},"name":"LIGHT_PURPLE","qualname":"::color::LIGHT_PURPLE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Plum - Light - #AD7FA8                                \n","sig":null,"attributes":[{"value":"/ Plum - Light - #AD7FA8                                ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17095,"byte_end":17153,"line_start":447,"line_end":447,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":123},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17287,"byte_end":17293,"line_start":450,"line_end":450,"column_start":11,"column_end":17},"name":"PURPLE","qualname":"::color::PURPLE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Plum - Regular - #75507B                              \n","sig":null,"attributes":[{"value":"/ Plum - Regular - #75507B                              ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17218,"byte_end":17276,"line_start":449,"line_end":449,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":124},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17409,"byte_end":17420,"line_start":452,"line_end":452,"column_start":11,"column_end":22},"name":"DARK_PURPLE","qualname":"::color::DARK_PURPLE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Plum - Dark - #5C3566                                 \n","sig":null,"attributes":[{"value":"/ Plum - Dark - #5C3566                                 ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17340,"byte_end":17398,"line_start":451,"line_end":451,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":125},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17531,"byte_end":17542,"line_start":455,"line_end":455,"column_start":11,"column_end":22},"name":"LIGHT_BROWN","qualname":"::color::LIGHT_BROWN","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Chocolate - Light - #E9B96E                           \n","sig":null,"attributes":[{"value":"/ Chocolate - Light - #E9B96E                           ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17462,"byte_end":17520,"line_start":454,"line_end":454,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17654,"byte_end":17659,"line_start":457,"line_end":457,"column_start":11,"column_end":16},"name":"BROWN","qualname":"::color::BROWN","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Chocolate - Regular - #C17D11                         \n","sig":null,"attributes":[{"value":"/ Chocolate - Regular - #C17D11                         ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17585,"byte_end":17643,"line_start":456,"line_end":456,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":127},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17776,"byte_end":17786,"line_start":459,"line_end":459,"column_start":11,"column_end":21},"name":"DARK_BROWN","qualname":"::color::DARK_BROWN","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Chocolate - Dark - #8F5902                            \n","sig":null,"attributes":[{"value":"/ Chocolate - Dark - #8F5902                            ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17707,"byte_end":17765,"line_start":458,"line_end":458,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":128},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17897,"byte_end":17902,"line_start":462,"line_end":462,"column_start":11,"column_end":16},"name":"BLACK","qualname":"::color::BLACK","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Straight Black.                                       \n","sig":null,"attributes":[{"value":"/ Straight Black.                                       ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17828,"byte_end":17886,"line_start":461,"line_end":461,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18014,"byte_end":18019,"line_start":464,"line_end":464,"column_start":11,"column_end":16},"name":"WHITE","qualname":"::color::WHITE","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Straight White.                                       \n","sig":null,"attributes":[{"value":"/ Straight White.                                       ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":17945,"byte_end":18003,"line_start":463,"line_end":463,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":130},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18138,"byte_end":18148,"line_start":467,"line_end":467,"column_start":11,"column_end":21},"name":"LIGHT_GRAY","qualname":"::color::LIGHT_GRAY","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Alluminium - Light                                    \n","sig":null,"attributes":[{"value":"/ Alluminium - Light                                    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18069,"byte_end":18127,"line_start":466,"line_end":466,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":131},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18261,"byte_end":18265,"line_start":469,"line_end":469,"column_start":11,"column_end":15},"name":"GRAY","qualname":"::color::GRAY","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Alluminium - Regular                                  \n","sig":null,"attributes":[{"value":"/ Alluminium - Regular                                  ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18192,"byte_end":18250,"line_start":468,"line_end":468,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":132},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18384,"byte_end":18393,"line_start":471,"line_end":471,"column_start":11,"column_end":20},"name":"DARK_GRAY","qualname":"::color::DARK_GRAY","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Alluminium - Dark                                     \n","sig":null,"attributes":[{"value":"/ Alluminium - Dark                                     ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18315,"byte_end":18373,"line_start":470,"line_end":470,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18508,"byte_end":18518,"line_start":474,"line_end":474,"column_start":11,"column_end":21},"name":"LIGHT_GREY","qualname":"::color::LIGHT_GREY","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Aluminium - Light - #EEEEEC                           \n","sig":null,"attributes":[{"value":"/ Aluminium - Light - #EEEEEC                           ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18439,"byte_end":18497,"line_start":473,"line_end":473,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18631,"byte_end":18635,"line_start":476,"line_end":476,"column_start":11,"column_end":15},"name":"GREY","qualname":"::color::GREY","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Aluminium - Regular - #D3D7CF                         \n","sig":null,"attributes":[{"value":"/ Aluminium - Regular - #D3D7CF                         ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18562,"byte_end":18620,"line_start":475,"line_end":475,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":135},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18754,"byte_end":18763,"line_start":478,"line_end":478,"column_start":11,"column_end":20},"name":"DARK_GREY","qualname":"::color::DARK_GREY","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Aluminium - Dark - #BABDB6                            \n","sig":null,"attributes":[{"value":"/ Aluminium - Dark - #BABDB6                            ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18685,"byte_end":18743,"line_start":477,"line_end":477,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18878,"byte_end":18892,"line_start":481,"line_end":481,"column_start":11,"column_end":25},"name":"LIGHT_CHARCOAL","qualname":"::color::LIGHT_CHARCOAL","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Charcoal - Light - #888A85                            \n","sig":null,"attributes":[{"value":"/ Charcoal - Light - #888A85                            ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18809,"byte_end":18867,"line_start":480,"line_end":480,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19001,"byte_end":19009,"line_start":483,"line_end":483,"column_start":11,"column_end":19},"name":"CHARCOAL","qualname":"::color::CHARCOAL","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Charcoal - Regular - #555753                          \n","sig":null,"attributes":[{"value":"/ Charcoal - Regular - #555753                          ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":18932,"byte_end":18990,"line_start":482,"line_end":482,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19121,"byte_end":19134,"line_start":485,"line_end":485,"column_start":11,"column_end":24},"name":"DARK_CHARCOAL","qualname":"::color::DARK_CHARCOAL","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Charcoal - Dark - #2E3436                             \n","sig":null,"attributes":[{"value":"/ Charcoal - Dark - #2E3436                             ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19052,"byte_end":19110,"line_start":484,"line_end":484,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":139},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19199,"byte_end":19210,"line_start":488,"line_end":488,"column_start":11,"column_end":22},"name":"TRANSPARENT","qualname":"::color::TRANSPARENT","value":"Color","parent":null,"children":[],"decl_id":null,"docs":" Transparent\n","sig":null,"attributes":[{"value":"/ Transparent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19173,"byte_end":19188,"line_start":487,"line_end":487,"column_start":1,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19300,"byte_end":19309,"line_start":491,"line_end":491,"column_start":11,"column_end":20},"name":"Colorable","qualname":"::color::Colorable","value":"Colorable: Sized","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"decl_id":null,"docs":" Types that can be colored.\n","sig":null,"attributes":[{"value":"/ Types that can be colored.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19259,"byte_end":19289,"line_start":490,"line_end":490,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19364,"byte_end":19369,"line_start":494,"line_end":494,"column_start":8,"column_end":13},"name":"color","qualname":"::color::Colorable::color","value":"fn (self, color: Color) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Set the color of the widget.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19324,"byte_end":19356,"line_start":493,"line_end":493,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19461,"byte_end":19465,"line_start":497,"line_end":497,"column_start":8,"column_end":12},"name":"rgba","qualname":"::color::Colorable::rgba","value":"fn (self, r: f32, g: f32, b: f32, a: f32) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Set the color of the widget from rgba values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget from rgba values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19404,"byte_end":19453,"line_start":496,"line_end":496,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19618,"byte_end":19621,"line_start":502,"line_end":502,"column_start":8,"column_end":11},"name":"rgb","qualname":"::color::Colorable::rgb","value":"fn (self, r: f32, g: f32, b: f32) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Set the color of the widget from rgb values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget from rgb values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19562,"byte_end":19610,"line_start":501,"line_end":501,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19763,"byte_end":19767,"line_start":507,"line_end":507,"column_start":8,"column_end":12},"name":"hsla","qualname":"::color::Colorable::hsla","value":"fn (self, h: f32, s: f32, l: f32, a: f32) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Set the color of the widget from hsla values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget from hsla values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19706,"byte_end":19755,"line_start":506,"line_end":506,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19920,"byte_end":19923,"line_start":512,"line_end":512,"column_start":8,"column_end":11},"name":"hsl","qualname":"::color::Colorable::hsl","value":"fn (self, h: f32, s: f32, l: f32) -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Set the color of the widget from hsl values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget from hsl values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19864,"byte_end":19912,"line_start":511,"line_end":511,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":146},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"event","qualname":"::event","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":4620},{"krate":0,"index":4651},{"krate":0,"index":4649},{"krate":0,"index":4645},{"krate":0,"index":4646},{"krate":0,"index":4653},{"krate":0,"index":4666},{"krate":0,"index":4662},{"krate":0,"index":4663},{"krate":0,"index":4660},{"krate":0,"index":4668},{"krate":0,"index":4726},{"krate":0,"index":4722},{"krate":0,"index":4723},{"krate":0,"index":4720},{"krate":0,"index":4728},{"krate":0,"index":4774},{"krate":0,"index":4770},{"krate":0,"index":4771},{"krate":0,"index":4768},{"krate":0,"index":4776},{"krate":0,"index":4785},{"krate":0,"index":4781},{"krate":0,"index":4782},{"krate":0,"index":4779},{"krate":0,"index":4787},{"krate":0,"index":4798},{"krate":0,"index":4796},{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4790},{"krate":0,"index":4799},{"krate":0,"index":4818},{"krate":0,"index":4816},{"krate":0,"index":4812},{"krate":0,"index":4813},{"krate":0,"index":4810},{"krate":0,"index":4819},{"krate":0,"index":4830},{"krate":0,"index":4828},{"krate":0,"index":4824},{"krate":0,"index":4825},{"krate":0,"index":4822},{"krate":0,"index":4831},{"krate":0,"index":4843},{"krate":0,"index":4841},{"krate":0,"index":4837},{"krate":0,"index":4838},{"krate":0,"index":4835},{"krate":0,"index":4844},{"krate":0,"index":4855},{"krate":0,"index":4853},{"krate":0,"index":4849},{"krate":0,"index":4850},{"krate":0,"index":4847},{"krate":0,"index":4856},{"krate":0,"index":4867},{"krate":0,"index":4865},{"krate":0,"index":4861},{"krate":0,"index":4862},{"krate":0,"index":4859},{"krate":0,"index":4868},{"krate":0,"index":4880},{"krate":0,"index":4878},{"krate":0,"index":4874},{"krate":0,"index":4875},{"krate":0,"index":4872},{"krate":0,"index":4881},{"krate":0,"index":4892},{"krate":0,"index":4890},{"krate":0,"index":4886},{"krate":0,"index":4887},{"krate":0,"index":4884},{"krate":0,"index":4893},{"krate":0,"index":4909},{"krate":0,"index":4907},{"krate":0,"index":4903},{"krate":0,"index":4904},{"krate":0,"index":4901},{"krate":0,"index":4910},{"krate":0,"index":4922},{"krate":0,"index":4920},{"krate":0,"index":4916},{"krate":0,"index":4917},{"krate":0,"index":4914},{"krate":0,"index":4923},{"krate":0,"index":4935},{"krate":0,"index":4933},{"krate":0,"index":4929},{"krate":0,"index":4930},{"krate":0,"index":4927},{"krate":0,"index":4936},{"krate":0,"index":4947},{"krate":0,"index":4945},{"krate":0,"index":4941},{"krate":0,"index":4942},{"krate":0,"index":4939},{"krate":0,"index":4948},{"krate":0,"index":4960},{"krate":0,"index":4958},{"krate":0,"index":4954},{"krate":0,"index":4955},{"krate":0,"index":4952},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199}],"decl_id":null,"docs":" Contains all types used to describe the input events that `Widget`s may handle.","sig":null,"attributes":[{"value":"! Contains all types used to describe the input events that `Widget`s may handle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21076,"byte_end":21159,"line_start":1,"line_end":1,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21160,"byte_end":21163,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The two primary types of this module are:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21164,"byte_end":21209,"line_start":3,"line_end":3,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21210,"byte_end":21213,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! - `Input`: conrod's input type passed by the user to `Ui::handle_event` in order to drive the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21214,"byte_end":21311,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"! `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21312,"byte_end":21321,"line_start":6,"line_end":6,"column_start":1,"column_end":10}},{"value":"! - `Event`: enumerates all possible events interpreted by conrod that may be propagated to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21322,"byte_end":21415,"line_start":7,"line_end":7,"column_start":1,"column_end":94}},{"value":"! widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21416,"byte_end":21428,"line_start":8,"line_end":8,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21429,"byte_end":21432,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! The Event System","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21433,"byte_end":21453,"line_start":10,"line_end":10,"column_start":1,"column_end":21}},{"value":"! ----------------","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21454,"byte_end":21474,"line_start":11,"line_end":11,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21475,"byte_end":21478,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Conrod's event system looks like this:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21479,"byte_end":21521,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21522,"byte_end":21525,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! *Input -> Ui -> Event -> Widget*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21526,"byte_end":21562,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21563,"byte_end":21566,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! The **Ui** receives **Input**s such as `Press` and `Release` via the `Ui::handle_event` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21567,"byte_end":21666,"line_start":17,"line_end":17,"column_start":1,"column_end":100}},{"value":"! It interprets these **Input**s to create higher-level **Event**s such as `DoubleClick`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21667,"byte_end":21758,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"! `WidgetCapturesKeyboard`, etc. These **Event**s are stored and then fed to each **Widget** when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21759,"byte_end":21858,"line_start":19,"line_end":19,"column_start":1,"column_end":100}},{"value":"! `Ui::set_widgets` is called. At the end of `Ui::set_widgets` the stored **Event**s are flushed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21859,"byte_end":21957,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"! ready for the next incoming **Input**s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":21958,"byte_end":22001,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22002,"byte_end":22005,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! Conrod uses the `pistoncore-input` crate's `Input` type. There are a few reasons for this:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22006,"byte_end":22100,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22101,"byte_end":22104,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! 1. This `Input` type already provides a number of useful variants of events that we wish to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22105,"byte_end":22200,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"!    provide and handle within conrod, and we do not yet see any great need to re-write it and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22201,"byte_end":22297,"line_start":26,"line_end":26,"column_start":1,"column_end":97}},{"value":"!    duplicate code.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22298,"byte_end":22320,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"! 2. The `Input` type is already compatible with all `pistoncore-window` backends including","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22321,"byte_end":22414,"line_start":28,"line_end":28,"column_start":1,"column_end":94}},{"value":"!    `glfw_window`, `sdl2_window` and `glutin_window`. That said, co-ordinates and scroll","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22415,"byte_end":22506,"line_start":29,"line_end":29,"column_start":1,"column_end":92}},{"value":"!    directions may need to be translated to conrod's orientation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22507,"byte_end":22575,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"! 3. The `pistoncore-input` crate also provides a `GenericEvent` trait which allows us to easily","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22576,"byte_end":22674,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"!    provide a blanket implementation of `ToRawEvent` for all event types that already implement","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22675,"byte_end":22773,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"!    this trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22774,"byte_end":22792,"line_start":33,"line_end":33,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22793,"byte_end":22796,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! Because we use the `pistoncore-input` `Event` type, we also re-export its associated data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22797,"byte_end":22890,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"! types (`Button`, `ControllerAxisArgs`, `Key`, etc).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":22891,"byte_end":22946,"line_start":36,"line_end":36,"column_start":1,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4621},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24231,"byte_end":24236,"line_start":62,"line_end":62,"column_start":5,"column_end":10},"name":"Press","qualname":"::event::Input::Press","value":"Input::Press(input::Button)","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" A button on some input device was pressed.\n","sig":null,"attributes":[{"value":"/ A button on some input device was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24180,"byte_end":24226,"line_start":61,"line_end":61,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24309,"byte_end":24316,"line_start":64,"line_end":64,"column_start":5,"column_end":12},"name":"Release","qualname":"::event::Input::Release","value":"Input::Release(input::Button)","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" A button on some input device was released.\n","sig":null,"attributes":[{"value":"/ A button on some input device was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24257,"byte_end":24304,"line_start":63,"line_end":63,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4627},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24394,"byte_end":24400,"line_start":66,"line_end":66,"column_start":5,"column_end":11},"name":"Resize","qualname":"::event::Input::Resize","value":"Input::Resize(f64, f64)","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" The window was received to the given dimensions.\n","sig":null,"attributes":[{"value":"/ The window was received to the given dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24337,"byte_end":24389,"line_start":65,"line_end":65,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24493,"byte_end":24499,"line_start":68,"line_end":68,"column_start":5,"column_end":11},"name":"Motion","qualname":"::event::Input::Motion","value":"Input::Motion(input::Motion)","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" Some motion input was received (e.g. moving mouse or joystick axis).\n","sig":null,"attributes":[{"value":"/ Some motion input was received (e.g. moving mouse or joystick axis).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24416,"byte_end":24488,"line_start":67,"line_end":67,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24563,"byte_end":24568,"line_start":70,"line_end":70,"column_start":5,"column_end":10},"name":"Touch","qualname":"::event::Input::Touch","value":"Input::Touch(input::Touch)","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" Input from a touch surface/screen.\n","sig":null,"attributes":[{"value":"/ Input from a touch surface/screen.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24520,"byte_end":24558,"line_start":69,"line_end":69,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24647,"byte_end":24651,"line_start":72,"line_end":72,"column_start":5,"column_end":9},"name":"Text","qualname":"::event::Input::Text","value":"Input::Text(String)","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" Text input was received, usually via the keyboard.\n","sig":null,"attributes":[{"value":"/ Text input was received, usually via the keyboard.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24588,"byte_end":24642,"line_start":71,"line_end":71,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24711,"byte_end":24716,"line_start":74,"line_end":74,"column_start":5,"column_end":10},"name":"Focus","qualname":"::event::Input::Focus","value":"Input::Focus(bool)","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" The window was focused or lost focus.\n","sig":null,"attributes":[{"value":"/ The window was focused or lost focus.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24665,"byte_end":24706,"line_start":73,"line_end":73,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24768,"byte_end":24774,"line_start":76,"line_end":76,"column_start":5,"column_end":11},"name":"Redraw","qualname":"::event::Input::Redraw","value":"Input::Redraw","parent":{"krate":0,"index":4620},"children":[],"decl_id":null,"docs":" The backed requested to redraw.\n","sig":null,"attributes":[{"value":"/ The backed requested to redraw.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24728,"byte_end":24763,"line_start":75,"line_end":75,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":4620},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24168,"byte_end":24173,"line_start":60,"line_end":60,"column_start":10,"column_end":15},"name":"Input","qualname":"::event::Input","value":"Input::{Press, Release, Resize, Motion, Touch, Text, Focus, Redraw}","parent":null,"children":[{"krate":0,"index":4621},{"krate":0,"index":4624},{"krate":0,"index":4627},{"krate":0,"index":4631},{"krate":0,"index":4634},{"krate":0,"index":4637},{"krate":0,"index":4640},{"krate":0,"index":4643}],"decl_id":null,"docs":" The event type that is used by conrod to track inputs from the world. Events yielded by polling\n window backends should be converted to this type. This can be thought of as the event type\n which is supplied by the window backend to drive the state of the `Ui` forward.","sig":null,"attributes":[{"value":"/ The event type that is used by conrod to track inputs from the world. Events yielded by polling","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23029,"byte_end":23128,"line_start":44,"line_end":44,"column_start":1,"column_end":100}},{"value":"/ window backends should be converted to this type. This can be thought of as the event type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23129,"byte_end":23223,"line_start":45,"line_end":45,"column_start":1,"column_end":95}},{"value":"/ which is supplied by the window backend to drive the state of the `Ui` forward.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23224,"byte_end":23307,"line_start":46,"line_end":46,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23308,"byte_end":23311,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This type is solely used within the `Ui::handle_event` method.  The `Input` events are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23312,"byte_end":23402,"line_start":48,"line_end":48,"column_start":1,"column_end":91}},{"value":"/ interpreted to create higher level `Event`s (such as DoubleClick, WidgetCapturesKeyboard, etc)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23403,"byte_end":23501,"line_start":49,"line_end":49,"column_start":1,"column_end":99}},{"value":"/ which are stored for later processing by `Widget`s, which will occur during the call to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23502,"byte_end":23593,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/ `Ui::set_widgets`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23594,"byte_end":23616,"line_start":51,"line_end":51,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23617,"byte_end":23620,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ **Note:** `Input` events that contain co-ordinates must be oriented with (0, 0) at the middle","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23621,"byte_end":23718,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/ of the window with the *y* axis pointing upwards (Cartesian co-ordinates). All co-ordinates and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23719,"byte_end":23818,"line_start":54,"line_end":54,"column_start":1,"column_end":100}},{"value":"/ dimensions must be given as `Scalar` (DPI agnostic) values. Many windows provide coordinates","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23819,"byte_end":23915,"line_start":55,"line_end":55,"column_start":1,"column_end":97}},{"value":"/ with the origin in the top left with *y* pointing down, so you might need to translate these","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":23916,"byte_end":24012,"line_start":56,"line_end":56,"column_start":1,"column_end":97}},{"value":"/ co-ordinates when converting to this event. Also be sure to invert the *y* axis of MouseScroll","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24013,"byte_end":24111,"line_start":57,"line_end":57,"column_start":1,"column_end":99}},{"value":"/ events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24112,"byte_end":24123,"line_start":58,"line_end":58,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4654},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24945,"byte_end":24948,"line_start":84,"line_end":84,"column_start":5,"column_end":8},"name":"Raw","qualname":"::event::Event::Raw","value":"Event::Raw(Input)","parent":{"krate":0,"index":4653},"children":[],"decl_id":null,"docs":" Represents a raw `input::Input` event.\n","sig":null,"attributes":[{"value":"/ Represents a raw `input::Input` event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24898,"byte_end":24940,"line_start":83,"line_end":83,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4657},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25078,"byte_end":25080,"line_start":88,"line_end":88,"column_start":5,"column_end":7},"name":"Ui","qualname":"::event::Event::Ui","value":"Event::Ui(Ui)","parent":{"krate":0,"index":4653},"children":[],"decl_id":null,"docs":" Events that have been interpreted from `backend::RawEvent`s by the `Ui`.","sig":null,"attributes":[{"value":"/ Events that have been interpreted from `backend::RawEvent`s by the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24961,"byte_end":25037,"line_start":85,"line_end":85,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25042,"byte_end":25045,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Most events usually","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25050,"byte_end":25073,"line_start":87,"line_end":87,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":4653},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24886,"byte_end":24891,"line_start":82,"line_end":82,"column_start":10,"column_end":15},"name":"Event","qualname":"::event::Event","value":"Event::{Raw, Ui}","parent":null,"children":[{"krate":0,"index":4654},{"krate":0,"index":4657}],"decl_id":null,"docs":" Enum containing all the events that the `Ui` may provide.\n","sig":null,"attributes":[{"value":"/ Enum containing all the events that the `Ui` may provide.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":24780,"byte_end":24841,"line_start":80,"line_end":80,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25281,"byte_end":25285,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"Text","qualname":"::event::Ui::Text","value":"Ui::Text(Option<widget::Id>, Text)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Entered text, along with the widget that was capturing the keyboard at the time.\n","sig":null,"attributes":[{"value":"/ Entered text, along with the widget that was capturing the keyboard at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25192,"byte_end":25276,"line_start":94,"line_end":94,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25436,"byte_end":25441,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Press","qualname":"::event::Ui::Press","value":"Ui::Press(Option<widget::Id>, Press)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Some button was pressed, along with the widget that was capturing the device whose button\n was pressed.\n","sig":null,"attributes":[{"value":"/ Some button was pressed, along with the widget that was capturing the device whose button","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25317,"byte_end":25410,"line_start":96,"line_end":96,"column_start":5,"column_end":98}},{"value":"/ was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25415,"byte_end":25431,"line_start":97,"line_end":97,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4677},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25595,"byte_end":25602,"line_start":101,"line_end":101,"column_start":5,"column_end":12},"name":"Release","qualname":"::event::Ui::Release","value":"Ui::Release(Option<widget::Id>, Release)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Some button was released, along with the widget that was capturing the device whose button\n was released.\n","sig":null,"attributes":[{"value":"/ Some button was released, along with the widget that was capturing the device whose button","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25474,"byte_end":25568,"line_start":99,"line_end":99,"column_start":5,"column_end":99}},{"value":"/ was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25573,"byte_end":25590,"line_start":100,"line_end":100,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25759,"byte_end":25765,"line_start":104,"line_end":104,"column_start":5,"column_end":11},"name":"Motion","qualname":"::event::Ui::Motion","value":"Ui::Motion(Option<widget::Id>, Motion)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Represents all forms of motion input, alongside with the widget that was capturing the\n mouse at the time.\n","sig":null,"attributes":[{"value":"/ Represents all forms of motion input, alongside with the widget that was capturing the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25637,"byte_end":25727,"line_start":102,"line_end":102,"column_start":5,"column_end":95}},{"value":"/ mouse at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25732,"byte_end":25754,"line_start":103,"line_end":103,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4685},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25848,"byte_end":25853,"line_start":106,"line_end":106,"column_start":5,"column_end":10},"name":"Touch","qualname":"::event::Ui::Touch","value":"Ui::Touch(Option<widget::Id>, input::Touch)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Interaction with a touch screen/surface.\n","sig":null,"attributes":[{"value":"/ Interaction with a touch screen/surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25799,"byte_end":25843,"line_start":105,"line_end":105,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4689},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25939,"byte_end":25952,"line_start":108,"line_end":108,"column_start":5,"column_end":18},"name":"WindowResized","qualname":"::event::Ui::WindowResized","value":"Ui::WindowResized(Dimensions)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" The window's dimensions were resized.\n","sig":null,"attributes":[{"value":"/ The window's dimensions were resized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25893,"byte_end":25934,"line_start":107,"line_end":107,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4692},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26085,"byte_end":26090,"line_start":111,"line_end":111,"column_start":5,"column_end":10},"name":"Click","qualname":"::event::Ui::Click","value":"Ui::Click(Option<widget::Id>, Click)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Represents a pointing device being pressed and subsequently released while over the same\n location.\n","sig":null,"attributes":[{"value":"/ Represents a pointing device being pressed and subsequently released while over the same","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25970,"byte_end":26062,"line_start":109,"line_end":109,"column_start":5,"column_end":97}},{"value":"/ location.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26067,"byte_end":26080,"line_start":110,"line_end":110,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26272,"byte_end":26283,"line_start":114,"line_end":114,"column_start":5,"column_end":16},"name":"DoubleClick","qualname":"::event::Ui::DoubleClick","value":"Ui::DoubleClick(Option<widget::Id>, DoubleClick)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Two `Click` events with the same `button` and `xy` occurring within a duration that is less\n that the `theme.double_click_threshold`.\n","sig":null,"attributes":[{"value":"/ Two `Click` events with the same `button` and `xy` occurring within a duration that is less","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26123,"byte_end":26218,"line_start":112,"line_end":112,"column_start":5,"column_end":100}},{"value":"/ that the `theme.double_click_threshold`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26223,"byte_end":26267,"line_start":113,"line_end":113,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4700},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26368,"byte_end":26371,"line_start":116,"line_end":116,"column_start":5,"column_end":8},"name":"Tap","qualname":"::event::Ui::Tap","value":"Ui::Tap(Option<widget::Id>, Tap)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" A user tapped a touch screen/surface.\n","sig":null,"attributes":[{"value":"/ A user tapped a touch screen/surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26322,"byte_end":26363,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4704},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26500,"byte_end":26504,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"Drag","qualname":"::event::Ui::Drag","value":"Ui::Drag(Option<widget::Id>, Drag)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Represents a pointing device button being pressed and a subsequent movement of the mouse.\n","sig":null,"attributes":[{"value":"/ Represents a pointing device button being pressed and a subsequent movement of the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26402,"byte_end":26495,"line_start":117,"line_end":117,"column_start":5,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4708},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27038,"byte_end":27044,"line_start":127,"line_end":127,"column_start":5,"column_end":11},"name":"Scroll","qualname":"::event::Ui::Scroll","value":"Ui::Scroll(Option<widget::Id>, Scroll)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" A generic scroll event.","sig":null,"attributes":[{"value":"/ A generic scroll event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26536,"byte_end":26563,"line_start":119,"line_end":119,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26568,"byte_end":26571,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ `Scroll` does not necessarily have to get created by a mouse wheel, it could be generated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26576,"byte_end":26669,"line_start":121,"line_end":121,"column_start":5,"column_end":98}},{"value":"/ from a keypress, or as a response to handling some other event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26674,"byte_end":26741,"line_start":122,"line_end":122,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26746,"byte_end":26749,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Received `Scroll` events are first applied to all scrollable widgets under the mouse from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26754,"byte_end":26847,"line_start":124,"line_end":124,"column_start":5,"column_end":98}},{"value":"/ top to bottom. The remainder will then be applied to either 1. whatever widget captures the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26852,"byte_end":26947,"line_start":125,"line_end":125,"column_start":5,"column_end":100}},{"value":"/ device from which the scroll was emitted or 2. whatever widget was specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":26952,"byte_end":27033,"line_start":126,"line_end":126,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4712},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27160,"byte_end":27185,"line_start":129,"line_end":129,"column_start":5,"column_end":30},"name":"WidgetCapturesInputSource","qualname":"::event::Ui::WidgetCapturesInputSource","value":"Ui::WidgetCapturesInputSource(widget::Id, input::Source)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Indicates that the given widget has captured the given user input source.\n","sig":null,"attributes":[{"value":"/ Indicates that the given widget has captured the given user input source.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27078,"byte_end":27155,"line_start":128,"line_end":128,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4716},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27300,"byte_end":27327,"line_start":131,"line_end":131,"column_start":5,"column_end":32},"name":"WidgetUncapturesInputSource","qualname":"::event::Ui::WidgetUncapturesInputSource","value":"Ui::WidgetUncapturesInputSource(widget::Id, input::Source)","parent":{"krate":0,"index":4668},"children":[],"decl_id":null,"docs":" Indicates that the given widget has released the given user input source.\n","sig":null,"attributes":[{"value":"/ Indicates that the given widget has released the given user input source.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27218,"byte_end":27295,"line_start":130,"line_end":130,"column_start":5,"column_end":82}}]},{"kind":"Enum","id":{"krate":0,"index":4668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25183,"byte_end":25185,"line_start":93,"line_end":93,"column_start":10,"column_end":12},"name":"Ui","qualname":"::event::Ui","value":"Ui::{Text, Press, Release, Motion, Touch, WindowResized, Click, DoubleClick, Tap, Drag, Scroll, WidgetCapturesInputSource, WidgetUncapturesInputSource}","parent":null,"children":[{"krate":0,"index":4669},{"krate":0,"index":4673},{"krate":0,"index":4677},{"krate":0,"index":4681},{"krate":0,"index":4685},{"krate":0,"index":4689},{"krate":0,"index":4692},{"krate":0,"index":4696},{"krate":0,"index":4700},{"krate":0,"index":4704},{"krate":0,"index":4708},{"krate":0,"index":4712},{"krate":0,"index":4716}],"decl_id":null,"docs":" Represents all events interpreted by the `Ui`.\n","sig":null,"attributes":[{"value":"/ Represents all events interpreted by the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":25088,"byte_end":25138,"line_start":91,"line_end":91,"column_start":1,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4729},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27780,"byte_end":27784,"line_start":145,"line_end":145,"column_start":5,"column_end":9},"name":"Text","qualname":"::event::Widget::Text","value":"Widget::Text(Text)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Entered text.\n","sig":null,"attributes":[{"value":"/ Entered text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27758,"byte_end":27775,"line_start":144,"line_end":144,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27842,"byte_end":27848,"line_start":147,"line_end":147,"column_start":5,"column_end":11},"name":"Motion","qualname":"::event::Widget::Motion","value":"Widget::Motion(Motion)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Represents all forms of motion input.\n","sig":null,"attributes":[{"value":"/ Represents all forms of motion input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27796,"byte_end":27837,"line_start":146,"line_end":146,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4735},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27903,"byte_end":27908,"line_start":149,"line_end":149,"column_start":5,"column_end":10},"name":"Touch","qualname":"::event::Widget::Touch","value":"Widget::Touch(input::Touch)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Interaction with a touch screen.\n","sig":null,"attributes":[{"value":"/ Interaction with a touch screen.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27862,"byte_end":27898,"line_start":148,"line_end":148,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4738},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27961,"byte_end":27966,"line_start":151,"line_end":151,"column_start":5,"column_end":10},"name":"Press","qualname":"::event::Widget::Press","value":"Widget::Press(Press)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Some button was pressed.\n","sig":null,"attributes":[{"value":"/ Some button was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27928,"byte_end":27956,"line_start":150,"line_end":150,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4741},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28013,"byte_end":28020,"line_start":153,"line_end":153,"column_start":5,"column_end":12},"name":"Release","qualname":"::event::Widget::Release","value":"Widget::Release(Release)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Some button was released.\n","sig":null,"attributes":[{"value":"/ Some button was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27979,"byte_end":28008,"line_start":152,"line_end":152,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4744},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28150,"byte_end":28155,"line_start":156,"line_end":156,"column_start":5,"column_end":10},"name":"Click","qualname":"::event::Widget::Click","value":"Widget::Click(Click)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Represents a pointing device being pressed and subsequently released while over the same\n location.\n","sig":null,"attributes":[{"value":"/ Represents a pointing device being pressed and subsequently released while over the same","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28035,"byte_end":28127,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ location.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28132,"byte_end":28145,"line_start":155,"line_end":155,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4747},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28317,"byte_end":28328,"line_start":159,"line_end":159,"column_start":5,"column_end":16},"name":"DoubleClick","qualname":"::event::Widget::DoubleClick","value":"Widget::DoubleClick(DoubleClick)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Two `Click` events with the same `button` and `xy` occurring within a duration that is less\n that the `theme.double_click_threshold`.\n","sig":null,"attributes":[{"value":"/ Two `Click` events with the same `button` and `xy` occurring within a duration that is less","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28168,"byte_end":28263,"line_start":157,"line_end":157,"column_start":5,"column_end":100}},{"value":"/ that the `theme.double_click_threshold`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28268,"byte_end":28312,"line_start":158,"line_end":158,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4750},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28407,"byte_end":28410,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"Tap","qualname":"::event::Widget::Tap","value":"Widget::Tap(Tap)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" A user tapped the widget on a touch screen/surface.\n","sig":null,"attributes":[{"value":"/ A user tapped the widget on a touch screen/surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28347,"byte_end":28402,"line_start":160,"line_end":160,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4753},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28519,"byte_end":28523,"line_start":163,"line_end":163,"column_start":5,"column_end":9},"name":"Drag","qualname":"::event::Widget::Drag","value":"Widget::Drag(Drag)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Represents a pointing device button being pressed and a subsequent movement of the mouse.\n","sig":null,"attributes":[{"value":"/ Represents a pointing device button being pressed and a subsequent movement of the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28421,"byte_end":28514,"line_start":162,"line_end":162,"column_start":5,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28613,"byte_end":28619,"line_start":165,"line_end":165,"column_start":5,"column_end":11},"name":"Scroll","qualname":"::event::Widget::Scroll","value":"Widget::Scroll(Scroll)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" Represents the amount of scroll that has been applied to this widget.\n","sig":null,"attributes":[{"value":"/ Represents the amount of scroll that has been applied to this widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28535,"byte_end":28608,"line_start":164,"line_end":164,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28679,"byte_end":28692,"line_start":167,"line_end":167,"column_start":5,"column_end":18},"name":"WindowResized","qualname":"::event::Widget::WindowResized","value":"Widget::WindowResized(Dimensions)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" The window's dimensions were resized.\n","sig":null,"attributes":[{"value":"/ The window's dimensions were resized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28633,"byte_end":28674,"line_start":166,"line_end":166,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28766,"byte_end":28785,"line_start":169,"line_end":169,"column_start":5,"column_end":24},"name":"CapturesInputSource","qualname":"::event::Widget::CapturesInputSource","value":"Widget::CapturesInputSource(input::Source)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" The widget has captured the given input source.\n","sig":null,"attributes":[{"value":"/ The widget has captured the given input source.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28710,"byte_end":28761,"line_start":168,"line_end":168,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4765},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28871,"byte_end":28892,"line_start":171,"line_end":171,"column_start":5,"column_end":26},"name":"UncapturesInputSource","qualname":"::event::Widget::UncapturesInputSource","value":"Widget::UncapturesInputSource(input::Source)","parent":{"krate":0,"index":4728},"children":[],"decl_id":null,"docs":" The widget has released the input source from capturing.\n","sig":null,"attributes":[{"value":"/ The widget has released the input source from capturing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28806,"byte_end":28866,"line_start":170,"line_end":170,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":4728},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27745,"byte_end":27751,"line_start":143,"line_end":143,"column_start":10,"column_end":16},"name":"Widget","qualname":"::event::Widget","value":"Widget::{Text, Motion, Touch, Press, Release, Click, DoubleClick, Tap, Drag, Scroll, WindowResized, CapturesInputSource, UncapturesInputSource}","parent":null,"children":[{"krate":0,"index":4729},{"krate":0,"index":4732},{"krate":0,"index":4735},{"krate":0,"index":4738},{"krate":0,"index":4741},{"krate":0,"index":4744},{"krate":0,"index":4747},{"krate":0,"index":4750},{"krate":0,"index":4753},{"krate":0,"index":4756},{"krate":0,"index":4759},{"krate":0,"index":4762},{"krate":0,"index":4765}],"decl_id":null,"docs":" Events that apply to a specific widget.","sig":null,"attributes":[{"value":"/ Events that apply to a specific widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27360,"byte_end":27403,"line_start":135,"line_end":135,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27404,"byte_end":27407,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Rather than delivering entire `event::Event`s to the widget (with a lot of redundant","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27408,"byte_end":27496,"line_start":137,"line_end":137,"column_start":1,"column_end":89}},{"value":"/ information), this `event::Widget` is used as a refined, widget-specific event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27497,"byte_end":27580,"line_start":138,"line_end":138,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27581,"byte_end":27584,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ All `Widget` event co-ordinates will be relative to the centre of the `Widget` to which they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27585,"byte_end":27681,"line_start":140,"line_end":140,"column_start":1,"column_end":97}},{"value":"/ are delivered.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":27682,"byte_end":27700,"line_start":141,"line_end":141,"column_start":1,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":4776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29014,"byte_end":29018,"line_start":176,"line_end":176,"column_start":12,"column_end":16},"name":"Text","qualname":"::event::Text","value":"Text { string, modifiers }","parent":null,"children":[{"krate":0,"index":4777},{"krate":0,"index":4778}],"decl_id":null,"docs":" Contains all relevant information for a Text event.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for a Text event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":28912,"byte_end":28967,"line_start":174,"line_end":174,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":4777},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29087,"byte_end":29093,"line_start":178,"line_end":178,"column_start":9,"column_end":15},"name":"string","qualname":"::event::Text::string","value":"std::string::String","parent":{"krate":0,"index":4776},"children":[],"decl_id":null,"docs":" All text that was entered as a part of the event.\n","sig":null,"attributes":[{"value":"/ All text that was entered as a part of the event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29025,"byte_end":29078,"line_start":177,"line_end":177,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4778},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29165,"byte_end":29174,"line_start":180,"line_end":180,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::Text::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4776},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29107,"byte_end":29156,"line_start":179,"line_end":179,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29319,"byte_end":29325,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"Motion","qualname":"::event::Motion","value":"Motion { motion, modifiers }","parent":null,"children":[{"krate":0,"index":4788},{"krate":0,"index":4789}],"decl_id":null,"docs":" Contains all relevant information for a Motion event.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for a Motion event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29209,"byte_end":29266,"line_start":183,"line_end":183,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4788},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29380,"byte_end":29386,"line_start":187,"line_end":187,"column_start":9,"column_end":15},"name":"motion","qualname":"::event::Motion::motion","value":"input::Motion","parent":{"krate":0,"index":4787},"children":[],"decl_id":null,"docs":" The type of `Motion` that occurred.\n","sig":null,"attributes":[{"value":"/ The type of `Motion` that occurred.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29332,"byte_end":29371,"line_start":186,"line_end":186,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4789},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29465,"byte_end":29474,"line_start":189,"line_end":189,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::Motion::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4787},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29407,"byte_end":29456,"line_start":188,"line_end":188,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4800},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29673,"byte_end":29681,"line_start":196,"line_end":196,"column_start":5,"column_end":13},"name":"Keyboard","qualname":"::event::Button::Keyboard","value":"Button::Keyboard(input::Key)","parent":{"krate":0,"index":4799},"children":[],"decl_id":null,"docs":" A keyboard button.\n","sig":null,"attributes":[{"value":"/ A keyboard button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29646,"byte_end":29668,"line_start":195,"line_end":195,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29784,"byte_end":29789,"line_start":198,"line_end":198,"column_start":5,"column_end":10},"name":"Mouse","qualname":"::event::Button::Mouse","value":"Button::Mouse(input::MouseButton, Point)","parent":{"krate":0,"index":4799},"children":[],"decl_id":null,"docs":" A mouse button along with the location at which it was `Press`ed/`Release`d.\n","sig":null,"attributes":[{"value":"/ A mouse button along with the location at which it was `Press`ed/`Release`d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29699,"byte_end":29779,"line_start":197,"line_end":197,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4807},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29851,"byte_end":29861,"line_start":200,"line_end":200,"column_start":5,"column_end":15},"name":"Controller","qualname":"::event::Button::Controller","value":"Button::Controller(input::ControllerButton)","parent":{"krate":0,"index":4799},"children":[],"decl_id":null,"docs":" A controller button.\n","sig":null,"attributes":[{"value":"/ A controller button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29822,"byte_end":29846,"line_start":199,"line_end":199,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":4799},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29633,"byte_end":29639,"line_start":194,"line_end":194,"column_start":10,"column_end":16},"name":"Button","qualname":"::event::Button","value":"Button::{Keyboard, Mouse, Controller}","parent":null,"children":[{"krate":0,"index":4800},{"krate":0,"index":4803},{"krate":0,"index":4807}],"decl_id":null,"docs":" The different kinds of `Button`s that may be `Press`ed or `Release`d.\n","sig":null,"attributes":[{"value":"/ The different kinds of `Button`s that may be `Press`ed or `Release`d.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29509,"byte_end":29582,"line_start":192,"line_end":192,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30000,"byte_end":30005,"line_start":205,"line_end":205,"column_start":12,"column_end":17},"name":"Press","qualname":"::event::Press","value":"Press { button, modifiers }","parent":null,"children":[{"krate":0,"index":4820},{"krate":0,"index":4821}],"decl_id":null,"docs":" Contains all relevant information for a Press event.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for a Press event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":29891,"byte_end":29947,"line_start":203,"line_end":203,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":4820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30055,"byte_end":30061,"line_start":207,"line_end":207,"column_start":9,"column_end":15},"name":"button","qualname":"::event::Press::button","value":"event::Button","parent":{"krate":0,"index":4819},"children":[],"decl_id":null,"docs":" The `Button` that was pressed.\n","sig":null,"attributes":[{"value":"/ The `Button` that was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30012,"byte_end":30046,"line_start":206,"line_end":206,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":4821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30133,"byte_end":30142,"line_start":209,"line_end":209,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::Press::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4819},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30075,"byte_end":30124,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4831},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30315,"byte_end":30325,"line_start":214,"line_end":214,"column_start":12,"column_end":22},"name":"MousePress","qualname":"::event::MousePress","value":"MousePress { button, xy, modifiers }","parent":null,"children":[{"krate":0,"index":4832},{"krate":0,"index":4833},{"krate":0,"index":4834}],"decl_id":null,"docs":" Contains all relevant information for the event where a mouse button was pressed.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for the event where a mouse button was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30177,"byte_end":30262,"line_start":212,"line_end":212,"column_start":1,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":4832},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30379,"byte_end":30385,"line_start":216,"line_end":216,"column_start":9,"column_end":15},"name":"button","qualname":"::event::MousePress::button","value":"piston_input::MouseButton","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":" The mouse button that was pressed.\n","sig":null,"attributes":[{"value":"/ The mouse button that was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30332,"byte_end":30370,"line_start":215,"line_end":215,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":4833},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30468,"byte_end":30470,"line_start":218,"line_end":218,"column_start":9,"column_end":11},"name":"xy","qualname":"::event::MousePress::xy","value":"[f64; 2]","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":" The location at which the mouse was pressed.\n","sig":null,"attributes":[{"value":"/ The location at which the mouse was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30411,"byte_end":30459,"line_start":217,"line_end":217,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":4834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30541,"byte_end":30550,"line_start":220,"line_end":220,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::MousePress::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4831},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30483,"byte_end":30532,"line_start":219,"line_end":219,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4844},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30726,"byte_end":30734,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"KeyPress","qualname":"::event::KeyPress","value":"KeyPress { key, modifiers }","parent":null,"children":[{"krate":0,"index":4845},{"krate":0,"index":4846}],"decl_id":null,"docs":" Contains all relevant information for the event where a keyboard button was pressed.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for the event where a keyboard button was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30585,"byte_end":30673,"line_start":223,"line_end":223,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":4845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30779,"byte_end":30782,"line_start":227,"line_end":227,"column_start":9,"column_end":12},"name":"key","qualname":"::event::KeyPress::key","value":"piston_input::Key","parent":{"krate":0,"index":4844},"children":[],"decl_id":null,"docs":" The key that was pressed.\n","sig":null,"attributes":[{"value":"/ The key that was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30741,"byte_end":30770,"line_start":226,"line_end":226,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":4846},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30858,"byte_end":30867,"line_start":229,"line_end":229,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::KeyPress::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4844},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30800,"byte_end":30849,"line_start":228,"line_end":228,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4856},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31013,"byte_end":31020,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"Release","qualname":"::event::Release","value":"Release { button, modifiers }","parent":null,"children":[{"krate":0,"index":4857},{"krate":0,"index":4858}],"decl_id":null,"docs":" Contains all relevant information for a Release event.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for a Release event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":30902,"byte_end":30960,"line_start":232,"line_end":232,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4857},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31071,"byte_end":31077,"line_start":236,"line_end":236,"column_start":9,"column_end":15},"name":"button","qualname":"::event::Release::button","value":"event::Button","parent":{"krate":0,"index":4856},"children":[],"decl_id":null,"docs":" The `Button` that was released.\n","sig":null,"attributes":[{"value":"/ The `Button` that was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31027,"byte_end":31062,"line_start":235,"line_end":235,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":4858},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31149,"byte_end":31158,"line_start":238,"line_end":238,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::Release::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4856},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31091,"byte_end":31140,"line_start":237,"line_end":237,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4868},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31332,"byte_end":31344,"line_start":243,"line_end":243,"column_start":12,"column_end":24},"name":"MouseRelease","qualname":"::event::MouseRelease","value":"MouseRelease { button, xy, modifiers }","parent":null,"children":[{"krate":0,"index":4869},{"krate":0,"index":4870},{"krate":0,"index":4871}],"decl_id":null,"docs":" Contains all relevant information for the event where a mouse button was released.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for the event where a mouse button was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31193,"byte_end":31279,"line_start":241,"line_end":241,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":4869},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31399,"byte_end":31405,"line_start":245,"line_end":245,"column_start":9,"column_end":15},"name":"button","qualname":"::event::MouseRelease::button","value":"piston_input::MouseButton","parent":{"krate":0,"index":4868},"children":[],"decl_id":null,"docs":" The mouse button that was released.\n","sig":null,"attributes":[{"value":"/ The mouse button that was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31351,"byte_end":31390,"line_start":244,"line_end":244,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31489,"byte_end":31491,"line_start":247,"line_end":247,"column_start":9,"column_end":11},"name":"xy","qualname":"::event::MouseRelease::xy","value":"[f64; 2]","parent":{"krate":0,"index":4868},"children":[],"decl_id":null,"docs":" The location at which the mouse was released.\n","sig":null,"attributes":[{"value":"/ The location at which the mouse was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31431,"byte_end":31480,"line_start":246,"line_end":246,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":4871},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31562,"byte_end":31571,"line_start":249,"line_end":249,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::MouseRelease::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4868},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31504,"byte_end":31553,"line_start":248,"line_end":248,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4881},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31747,"byte_end":31757,"line_start":254,"line_end":254,"column_start":12,"column_end":22},"name":"KeyRelease","qualname":"::event::KeyRelease","value":"KeyRelease { key, modifiers }","parent":null,"children":[{"krate":0,"index":4882},{"krate":0,"index":4883}],"decl_id":null,"docs":" Contains all relevant information for the event where a keyboard button was release.\n","sig":null,"attributes":[{"value":"/ Contains all relevant information for the event where a keyboard button was release.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31606,"byte_end":31694,"line_start":252,"line_end":252,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":4882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31802,"byte_end":31805,"line_start":256,"line_end":256,"column_start":9,"column_end":12},"name":"key","qualname":"::event::KeyRelease::key","value":"piston_input::Key","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" The key that was release.\n","sig":null,"attributes":[{"value":"/ The key that was release.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31764,"byte_end":31793,"line_start":255,"line_end":255,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":4883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31881,"byte_end":31890,"line_start":258,"line_end":258,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::KeyRelease::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" The modifier keys that were down at the time.\n","sig":null,"attributes":[{"value":"/ The modifier keys that were down at the time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31823,"byte_end":31872,"line_start":257,"line_end":257,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":4893},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32037,"byte_end":32041,"line_start":263,"line_end":263,"column_start":12,"column_end":16},"name":"Drag","qualname":"::event::Drag","value":"Drag { button, origin, from, to, delta_xy, total_delta_xy, modifiers }","parent":null,"children":[{"krate":0,"index":4894},{"krate":0,"index":4895},{"krate":0,"index":4896},{"krate":0,"index":4897},{"krate":0,"index":4898},{"krate":0,"index":4899},{"krate":0,"index":4900}],"decl_id":null,"docs":" Contains all the relevant information for a mouse drag.\n","sig":null,"attributes":[{"value":"/ Contains all the relevant information for a mouse drag.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":31925,"byte_end":31984,"line_start":261,"line_end":261,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":4894},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32110,"byte_end":32116,"line_start":265,"line_end":265,"column_start":9,"column_end":15},"name":"button","qualname":"::event::Drag::button","value":"piston_input::MouseButton","parent":{"krate":0,"index":4893},"children":[],"decl_id":null,"docs":" Which mouse button was being held during the drag\n","sig":null,"attributes":[{"value":"/ Which mouse button was being held during the drag","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32048,"byte_end":32101,"line_start":264,"line_end":264,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32316,"byte_end":32322,"line_start":269,"line_end":269,"column_start":9,"column_end":15},"name":"origin","qualname":"::event::Drag::origin","value":"[f64; 2]","parent":{"krate":0,"index":4893},"children":[],"decl_id":null,"docs":" The point from which the current series of drag events began.","sig":null,"attributes":[{"value":"/ The point from which the current series of drag events began.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32142,"byte_end":32207,"line_start":266,"line_end":266,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32212,"byte_end":32215,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ This will be the position of the pointing device whenever the dragging press began.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32220,"byte_end":32307,"line_start":268,"line_end":268,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":4896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32391,"byte_end":32395,"line_start":271,"line_end":271,"column_start":9,"column_end":13},"name":"from","qualname":"::event::Drag::from","value":"[f64; 2]","parent":{"krate":0,"index":4893},"children":[],"decl_id":null,"docs":" The point from which this drag event began.\n","sig":null,"attributes":[{"value":"/ The point from which this drag event began.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32335,"byte_end":32382,"line_start":270,"line_end":270,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4897},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32462,"byte_end":32464,"line_start":273,"line_end":273,"column_start":9,"column_end":11},"name":"to","qualname":"::event::Drag::to","value":"[f64; 2]","parent":{"krate":0,"index":4893},"children":[],"decl_id":null,"docs":" The point at which this drag event ended.\n","sig":null,"attributes":[{"value":"/ The point at which this drag event ended.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32408,"byte_end":32453,"line_start":272,"line_end":272,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":4898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32542,"byte_end":32550,"line_start":275,"line_end":275,"column_start":9,"column_end":17},"name":"delta_xy","qualname":"::event::Drag::delta_xy","value":"[f64; 2]","parent":{"krate":0,"index":4893},"children":[],"decl_id":null,"docs":" The magnitude of the vector between `from` and `to`.\n","sig":null,"attributes":[{"value":"/ The magnitude of the vector between `from` and `to`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32477,"byte_end":32533,"line_start":274,"line_end":274,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":4899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32630,"byte_end":32644,"line_start":277,"line_end":277,"column_start":9,"column_end":23},"name":"total_delta_xy","qualname":"::event::Drag::total_delta_xy","value":"[f64; 2]","parent":{"krate":0,"index":4893},"children":[],"decl_id":null,"docs":" The magnitude of the vector between `origin` and `to`.\n","sig":null,"attributes":[{"value":"/ The magnitude of the vector between `origin` and `to`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32563,"byte_end":32621,"line_start":276,"line_end":276,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":4900},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32727,"byte_end":32736,"line_start":279,"line_end":279,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::Drag::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4893},"children":[],"decl_id":null,"docs":" Which modifier keys are being held during the mouse drag.\n","sig":null,"attributes":[{"value":"/ Which modifier keys are being held during the mouse drag.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32657,"byte_end":32718,"line_start":278,"line_end":278,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32884,"byte_end":32889,"line_start":284,"line_end":284,"column_start":12,"column_end":17},"name":"Click","qualname":"::event::Click","value":"Click { button, xy, modifiers }","parent":null,"children":[{"krate":0,"index":4911},{"krate":0,"index":4912},{"krate":0,"index":4913}],"decl_id":null,"docs":" Contains all the relevant information for a mouse click.\n","sig":null,"attributes":[{"value":"/ Contains all the relevant information for a mouse click.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32771,"byte_end":32831,"line_start":282,"line_end":282,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":4911},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32939,"byte_end":32945,"line_start":286,"line_end":286,"column_start":9,"column_end":15},"name":"button","qualname":"::event::Click::button","value":"piston_input::MouseButton","parent":{"krate":0,"index":4910},"children":[],"decl_id":null,"docs":" Which mouse button was clicked\n","sig":null,"attributes":[{"value":"/ Which mouse button was clicked","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32896,"byte_end":32930,"line_start":285,"line_end":285,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":4912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33029,"byte_end":33031,"line_start":288,"line_end":288,"column_start":9,"column_end":11},"name":"xy","qualname":"::event::Click::xy","value":"[f64; 2]","parent":{"krate":0,"index":4910},"children":[],"decl_id":null,"docs":" The position at which the mouse was released.\n","sig":null,"attributes":[{"value":"/ The position at which the mouse was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":32971,"byte_end":33020,"line_start":287,"line_end":287,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":4913},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33133,"byte_end":33142,"line_start":290,"line_end":290,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::Click::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4910},"children":[],"decl_id":null,"docs":" Which modifier keys, if any, that were being held down when the user clicked\n","sig":null,"attributes":[{"value":"/ Which modifier keys, if any, that were being held down when the user clicked","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33044,"byte_end":33124,"line_start":289,"line_end":289,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":4923},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33391,"byte_end":33402,"line_start":297,"line_end":297,"column_start":12,"column_end":23},"name":"DoubleClick","qualname":"::event::DoubleClick","value":"DoubleClick { button, xy, modifiers }","parent":null,"children":[{"krate":0,"index":4924},{"krate":0,"index":4925},{"krate":0,"index":4926}],"decl_id":null,"docs":" Contains all the relevant information for a double click.","sig":null,"attributes":[{"value":"/ Contains all the relevant information for a double click.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33177,"byte_end":33238,"line_start":293,"line_end":293,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33239,"byte_end":33242,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ When handling this event, be sure to check that you are handling the intended `button` too.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33243,"byte_end":33338,"line_start":295,"line_end":295,"column_start":1,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":4924},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33452,"byte_end":33458,"line_start":299,"line_end":299,"column_start":9,"column_end":15},"name":"button","qualname":"::event::DoubleClick::button","value":"piston_input::MouseButton","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" Which mouse button was clicked\n","sig":null,"attributes":[{"value":"/ Which mouse button was clicked","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33409,"byte_end":33443,"line_start":298,"line_end":298,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":4925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33542,"byte_end":33544,"line_start":301,"line_end":301,"column_start":9,"column_end":11},"name":"xy","qualname":"::event::DoubleClick::xy","value":"[f64; 2]","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" The position at which the mouse was released.\n","sig":null,"attributes":[{"value":"/ The position at which the mouse was released.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33484,"byte_end":33533,"line_start":300,"line_end":300,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":4926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33646,"byte_end":33655,"line_start":303,"line_end":303,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::DoubleClick::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4923},"children":[],"decl_id":null,"docs":" Which modifier keys, if any, that were being held down when the user clicked\n","sig":null,"attributes":[{"value":"/ Which modifier keys, if any, that were being held down when the user clicked","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33557,"byte_end":33637,"line_start":302,"line_end":302,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":4936},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33801,"byte_end":33804,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"Tap","qualname":"::event::Tap","value":"Tap { id, xy }","parent":null,"children":[{"krate":0,"index":4937},{"krate":0,"index":4938}],"decl_id":null,"docs":" All relevant information for a touch-screen tap event.\n","sig":null,"attributes":[{"value":"/ All relevant information for a touch-screen tap event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33690,"byte_end":33748,"line_start":306,"line_end":306,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4937},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33873,"byte_end":33875,"line_start":310,"line_end":310,"column_start":9,"column_end":11},"name":"id","qualname":"::event::Tap::id","value":"input::touch::Id","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" The unique identifier of the source of the touch.\n","sig":null,"attributes":[{"value":"/ The unique identifier of the source of the touch.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33811,"byte_end":33864,"line_start":309,"line_end":309,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4938},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33961,"byte_end":33963,"line_start":312,"line_end":312,"column_start":9,"column_end":11},"name":"xy","qualname":"::event::Tap::xy","value":"[f64; 2]","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" The position at which the finger left the screen.\n","sig":null,"attributes":[{"value":"/ The position at which the finger left the screen.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33899,"byte_end":33952,"line_start":311,"line_end":311,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":4948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34087,"byte_end":34093,"line_start":317,"line_end":317,"column_start":12,"column_end":18},"name":"Scroll","qualname":"::event::Scroll","value":"Scroll { x, y, modifiers }","parent":null,"children":[{"krate":0,"index":4949},{"krate":0,"index":4950},{"krate":0,"index":4951}],"decl_id":null,"docs":" Holds all the relevant information about a scroll event\n","sig":null,"attributes":[{"value":"/ Holds all the relevant information about a scroll event","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":33975,"byte_end":34034,"line_start":315,"line_end":315,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":4949},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34151,"byte_end":34152,"line_start":319,"line_end":319,"column_start":9,"column_end":10},"name":"x","qualname":"::event::Scroll::x","value":"f64","parent":{"krate":0,"index":4948},"children":[],"decl_id":null,"docs":" The amount of scroll along the x axis.\n","sig":null,"attributes":[{"value":"/ The amount of scroll along the x axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34100,"byte_end":34142,"line_start":318,"line_end":318,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":4950},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34214,"byte_end":34215,"line_start":321,"line_end":321,"column_start":9,"column_end":10},"name":"y","qualname":"::event::Scroll::y","value":"f64","parent":{"krate":0,"index":4948},"children":[],"decl_id":null,"docs":" The amount of scroll along the y axis.\n","sig":null,"attributes":[{"value":"/ The amount of scroll along the y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34163,"byte_end":34205,"line_start":320,"line_end":320,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":4951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34318,"byte_end":34327,"line_start":323,"line_end":323,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::event::Scroll::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":4948},"children":[],"decl_id":null,"docs":" Which modifier keys, if any, that were being held down while the scroll occured\n","sig":null,"attributes":[{"value":"/ Which modifier keys, if any, that were being held down while the scroll occured","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34226,"byte_end":34309,"line_start":322,"line_end":322,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34453,"byte_end":34464,"line_start":328,"line_end":328,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Motion>::relative_to","value":"fn (&self, xy: Point) -> Motion","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the `Motion` relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the `Motion` relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34380,"byte_end":34441,"line_start":327,"line_end":327,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34876,"byte_end":34887,"line_start":343,"line_end":343,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Button>::relative_to","value":"fn (&self, xy: Point) -> Button","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the Button relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the Button relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34805,"byte_end":34864,"line_start":342,"line_end":342,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35173,"byte_end":35184,"line_start":354,"line_end":354,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Press>::relative_to","value":"fn (&self, xy: Point) -> Press","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the Press relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the Press relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35103,"byte_end":35161,"line_start":353,"line_end":353,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35414,"byte_end":35419,"line_start":362,"line_end":362,"column_start":12,"column_end":17},"name":"mouse","qualname":"<Press>::mouse","value":"fn (self) -> Option<MousePress>","parent":null,"children":[],"decl_id":null,"docs":" If the `Press` event represents the pressing of a mouse button, return `Some`.\n","sig":null,"attributes":[{"value":"/ If the `Press` event represents the pressing of a mouse button, return `Some`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35320,"byte_end":35402,"line_start":361,"line_end":361,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35823,"byte_end":35826,"line_start":375,"line_end":375,"column_start":12,"column_end":15},"name":"key","qualname":"<Press>::key","value":"fn (self) -> Option<KeyPress>","parent":null,"children":[],"decl_id":null,"docs":" If the `Press` event represents the pressing of keyboard button, return `Some`.\n","sig":null,"attributes":[{"value":"/ If the `Press` event represents the pressing of keyboard button, return `Some`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35728,"byte_end":35811,"line_start":374,"line_end":374,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36184,"byte_end":36195,"line_start":391,"line_end":391,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Release>::relative_to","value":"fn (&self, xy: Point) -> Release","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the Release relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the Release relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36112,"byte_end":36172,"line_start":390,"line_end":390,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36432,"byte_end":36437,"line_start":399,"line_end":399,"column_start":12,"column_end":17},"name":"mouse","qualname":"<Release>::mouse","value":"fn (self) -> Option<MouseRelease>","parent":null,"children":[],"decl_id":null,"docs":" If the `Release` event represents the releasing of a mouse button, return `Some`.\n","sig":null,"attributes":[{"value":"/ If the `Release` event represents the releasing of a mouse button, return `Some`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36335,"byte_end":36420,"line_start":398,"line_end":398,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36846,"byte_end":36849,"line_start":412,"line_end":412,"column_start":12,"column_end":15},"name":"key","qualname":"<Release>::key","value":"fn (self) -> Option<KeyRelease>","parent":null,"children":[],"decl_id":null,"docs":" If the `Release` event represents the release of keyboard button, return `Some`.\n","sig":null,"attributes":[{"value":"/ If the `Release` event represents the release of keyboard button, return `Some`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36750,"byte_end":36834,"line_start":411,"line_end":411,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37204,"byte_end":37215,"line_start":427,"line_end":427,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Tap>::relative_to","value":"fn (&self, xy: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the `Tap` relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the `Tap` relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37134,"byte_end":37192,"line_start":426,"line_end":426,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37423,"byte_end":37434,"line_start":437,"line_end":437,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Click>::relative_to","value":"fn (&self, xy: Point) -> Click","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the Click relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the Click relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37353,"byte_end":37411,"line_start":436,"line_end":436,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37657,"byte_end":37668,"line_start":447,"line_end":447,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<DoubleClick>::relative_to","value":"fn (&self, xy: Point) -> DoubleClick","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the DoubleClick relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the DoubleClick relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37581,"byte_end":37645,"line_start":446,"line_end":446,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37889,"byte_end":37900,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Drag>::relative_to","value":"fn (&self, xy: Point) -> Drag","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the Drag relative to the given `xy`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the Drag relative to the given `xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37820,"byte_end":37877,"line_start":456,"line_end":456,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":201},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"graph","qualname":"::graph","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":259},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":4975},{"krate":0,"index":4980},{"krate":0,"index":4984},{"krate":0,"index":4997},{"krate":0,"index":4999},{"krate":0,"index":5004},{"krate":0,"index":5002},{"krate":0,"index":290},{"krate":0,"index":5005},{"krate":0,"index":5011},{"krate":0,"index":5013},{"krate":0,"index":5032},{"krate":0,"index":5030},{"krate":0,"index":5028},{"krate":0,"index":5024},{"krate":0,"index":5025},{"krate":0,"index":5021},{"krate":0,"index":5022},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":5033},{"krate":0,"index":5035},{"krate":0,"index":294},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":404}],"decl_id":null,"docs":" Conrod uses a directed acyclic graph to manage both storing widgets and describing their\n relationships.","sig":null,"attributes":[{"value":"! Conrod uses a directed acyclic graph to manage both storing widgets and describing their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":39622,"byte_end":39714,"line_start":1,"line_end":1,"column_start":1,"column_end":93}},{"value":"! relationships.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":39715,"byte_end":39733,"line_start":2,"line_end":2,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":39734,"byte_end":39737,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! The primary type of interest in this module is the [**Graph**](./struct.Graph) type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":39738,"byte_end":39826,"line_start":4,"line_end":4,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"algo","qualname":"::graph::algo","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":4961},{"krate":0,"index":4964},{"krate":0,"index":4966},{"krate":0,"index":4968},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":252}],"decl_id":null,"docs":" This module was created in order to keep the `graph` module clean and focused upon the\n **Graph** data structure behaviour.","sig":null,"attributes":[{"value":"! This module was created in order to keep the `graph` module clean and focused upon the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72392,"byte_end":72482,"line_start":1,"line_end":1,"column_start":1,"column_end":91}},{"value":"! **Graph** data structure behaviour.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72483,"byte_end":72522,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72523,"byte_end":72526,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! This module hosts more complex algorithms in which the **Graph** is a key component in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72527,"byte_end":72617,"line_start":4,"line_end":4,"column_start":1,"column_end":91}},{"value":"! producing the desired result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72618,"byte_end":72651,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":4961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72948,"byte_end":72959,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"PickWidgets","qualname":"::graph::algo::PickWidgets","value":"PickWidgets {  }","parent":null,"children":[{"krate":0,"index":4962},{"krate":0,"index":4963}],"decl_id":null,"docs":" A node \"walker\" that yields all widgets under the given `xy` position in order from top to\n bottom.\n","sig":null,"attributes":[{"value":"/ A node \"walker\" that yields all widgets under the given `xy` position in order from top to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72774,"byte_end":72868,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/ bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72869,"byte_end":72880,"line_start":17,"line_end":17,"column_start":1,"column_end":12}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72898,"byte_end":72936,"line_start":19,"line_end":19,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4966},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73181,"byte_end":73202,"line_start":29,"line_end":29,"column_start":12,"column_end":33},"name":"PickScrollableWidgets","qualname":"::graph::algo::PickScrollableWidgets","value":"PickScrollableWidgets {  }","parent":null,"children":[{"krate":0,"index":4967}],"decl_id":null,"docs":" A node \"walker\" that yields all scrollable widgets under the given `xy` position in order from\n top to bottom.\n","sig":null,"attributes":[{"value":"/ A node \"walker\" that yields all scrollable widgets under the given `xy` position in order from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":72996,"byte_end":73094,"line_start":25,"line_end":25,"column_start":1,"column_end":99}},{"value":"/ top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73095,"byte_end":73113,"line_start":26,"line_end":26,"column_start":1,"column_end":19}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73131,"byte_end":73169,"line_start":28,"line_end":28,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73543,"byte_end":73575,"line_start":42,"line_end":42,"column_start":12,"column_end":44},"name":"next_including_graphics_children","qualname":"<PickWidgets>::next_including_graphics_children","value":"fn (&mut self, graph: &Graph, depth_order: &[widget::Id], theme: &Theme) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" The next `widget::Id` under the `xy` location.","sig":null,"attributes":[{"value":"/ The next `widget::Id` under the `xy` location.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73264,"byte_end":73314,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73319,"byte_end":73322,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Unlike the `PickWidgets::next` method, this method ignores whether or not the next widget","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73327,"byte_end":73420,"line_start":38,"line_end":38,"column_start":5,"column_end":98}},{"value":"/ is a `Graphics` child to some other widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73425,"byte_end":73472,"line_start":39,"line_end":39,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73477,"byte_end":73480,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ This is called within `PickWidgets::next`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73485,"byte_end":73531,"line_start":41,"line_end":41,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75292,"byte_end":75296,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"next","qualname":"<PickWidgets>::next","value":"fn (&mut self, graph: &Graph, depth_order: &[widget::Id], theme: &Theme) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" The `widget::Id` of the next `Widget` under the `xy` location.","sig":null,"attributes":[{"value":"/ The `widget::Id` of the next `Widget` under the `xy` location.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75031,"byte_end":75097,"line_start":83,"line_end":83,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75102,"byte_end":75105,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ The `Graph` is traversed from the top down.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75110,"byte_end":75157,"line_start":85,"line_end":85,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75162,"byte_end":75165,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ If the next widget is some graphic element of another widget, the graphic parent will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75170,"byte_end":75262,"line_start":87,"line_end":87,"column_start":5,"column_end":97}},{"value":"/ returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75267,"byte_end":75280,"line_start":88,"line_end":88,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":76023,"byte_end":76027,"line_start":112,"line_end":112,"column_start":12,"column_end":16},"name":"next","qualname":"<PickScrollableWidgets>::next","value":"fn (&mut self, graph: &Graph, depth_order: &[widget::Id], theme: &Theme) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" The `widget::Id` of the next scrollable `Widget` under the `xy` location.","sig":null,"attributes":[{"value":"/ The `widget::Id` of the next scrollable `Widget` under the `xy` location.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75874,"byte_end":75951,"line_start":109,"line_end":109,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75956,"byte_end":75959,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ The `Graph` is traversed from the top down.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75964,"byte_end":76011,"line_start":111,"line_end":111,"column_start":5,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":76685,"byte_end":76697,"line_start":134,"line_end":134,"column_start":8,"column_end":20},"name":"pick_widgets","qualname":"::graph::algo::pick_widgets","value":"fn (depth_order: &[widget::Id], xy: Point) -> PickWidgets","parent":null,"children":[],"decl_id":null,"docs":" Produces a graph node \"walker\" that yields all widgets under the given `xy` position in order\n from top to bottom.\n","sig":null,"attributes":[{"value":"/ Produces a graph node \"walker\" that yields all widgets under the given `xy` position in order","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":76556,"byte_end":76653,"line_start":132,"line_end":132,"column_start":1,"column_end":98}},{"value":"/ from top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":76654,"byte_end":76677,"line_start":133,"line_end":133,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":76969,"byte_end":76992,"line_start":143,"line_end":143,"column_start":8,"column_end":31},"name":"pick_scrollable_widgets","qualname":"::graph::algo::pick_scrollable_widgets","value":"fn (depth_order: &[widget::Id], xy: Point) -> PickScrollableWidgets","parent":null,"children":[],"decl_id":null,"docs":" Produces a graph node \"walker\" that yields all scrollable widgets under the given `xy` position\n in order from top to bottom.\n","sig":null,"attributes":[{"value":"/ Produces a graph node \"walker\" that yields all scrollable widgets under the given `xy` position","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":76829,"byte_end":76928,"line_start":141,"line_end":141,"column_start":1,"column_end":100}},{"value":"/ in order from top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":76929,"byte_end":76961,"line_start":142,"line_end":142,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77387,"byte_end":77409,"line_start":155,"line_end":155,"column_start":8,"column_end":30},"name":"cropped_area_of_widget","qualname":"::graph::algo::cropped_area_of_widget","value":"fn (graph: &Graph, idx: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" The rectangle that represents the maximum visible area for the widget with the given index.","sig":null,"attributes":[{"value":"/ The rectangle that represents the maximum visible area for the widget with the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77150,"byte_end":77245,"line_start":150,"line_end":150,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77246,"byte_end":77249,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Specifically, this considers the cropped scroll area for all parents.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77250,"byte_end":77323,"line_start":152,"line_end":152,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77324,"byte_end":77327,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Otherwise, return None if the widget is hidden.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77328,"byte_end":77379,"line_start":154,"line_end":154,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77828,"byte_end":77863,"line_start":166,"line_end":166,"column_start":8,"column_end":43},"name":"cropped_area_of_widget_within_depth","qualname":"::graph::algo::cropped_area_of_widget_within_depth","value":"fn (graph: &Graph, idx: widget::Id, deepest_parent_idx: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" The rectangle that represents the maximum visible area for the widget with the given index.","sig":null,"attributes":[{"value":"/ The rectangle that represents the maximum visible area for the widget with the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77528,"byte_end":77623,"line_start":160,"line_end":160,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77624,"byte_end":77627,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ This specifically considers the cropped scroll area for all parents until (and not including)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77628,"byte_end":77725,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/ the deepest_parent_idx is reached.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77726,"byte_end":77764,"line_start":163,"line_end":163,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77765,"byte_end":77768,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ Otherwise, return None if the widget is hidden.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":77769,"byte_end":77820,"line_start":165,"line_end":165,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":80438,"byte_end":80455,"line_start":225,"line_end":225,"column_start":8,"column_end":25},"name":"kids_bounding_box","qualname":"::graph::algo::kids_bounding_box","value":"fn (graph: &Graph, prev_updated: &fnv::FnvHashSet<widget::Id>, idx: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" Find the absolute `Rect` that bounds all widgets that are `Depth` children of the widget at the\n given `idx`.","sig":null,"attributes":[{"value":"/ Find the absolute `Rect` that bounds all widgets that are `Depth` children of the widget at the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":80045,"byte_end":80144,"line_start":219,"line_end":219,"column_start":1,"column_end":100}},{"value":"/ given `idx`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":80145,"byte_end":80161,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":80162,"byte_end":80165,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ FIXME: This currently uses call stack recursion to do a depth-first search through all","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":80166,"byte_end":80256,"line_start":222,"line_end":222,"column_start":1,"column_end":91}},{"value":"/ depth_children for the total bounding box. This should use a proper `Dfs` type with it's own","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":80257,"byte_end":80353,"line_start":223,"line_end":223,"column_start":1,"column_end":97}},{"value":"/ stack for safer traversal that won't blow the stack on hugely deep GUIs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":80354,"byte_end":80430,"line_start":224,"line_end":224,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":83133,"byte_end":83146,"line_start":283,"line_end":283,"column_start":8,"column_end":21},"name":"scroll_offset","qualname":"::graph::algo::scroll_offset","value":"fn (graph: &Graph, idx: widget::Id) -> Point","parent":null,"children":[],"decl_id":null,"docs":" Return the `scroll_offset` for the widget at the given index.","sig":null,"attributes":[{"value":"/ Return the `scroll_offset` for the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82461,"byte_end":82526,"line_start":272,"line_end":272,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82527,"byte_end":82530,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ The offset is retrieved from the widget that is the immediate `depth_parent` of the widget at","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82531,"byte_end":82628,"line_start":274,"line_end":274,"column_start":1,"column_end":98}},{"value":"/ the given `idx` unless:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82629,"byte_end":82656,"line_start":275,"line_end":275,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82657,"byte_end":82660,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ - the immediate `depth_parent` of `idx` is also a `graphic_parent` to `idx`. In this case,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82661,"byte_end":82755,"line_start":277,"line_end":277,"column_start":1,"column_end":95}},{"value":"/ `NO_OFFSET` will be returned, as child widgets that are graphical elements of their parents","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82756,"byte_end":82851,"line_start":278,"line_end":278,"column_start":1,"column_end":96}},{"value":"/ should not be affected by scrolling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82852,"byte_end":82892,"line_start":279,"line_end":279,"column_start":1,"column_end":41}},{"value":"/ - one of the position parents also has the same `depth_parent`. In this case, `NO_OFFSET` will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82893,"byte_end":82991,"line_start":280,"line_end":280,"column_start":1,"column_end":99}},{"value":"/ be returned, as we know that our scroll offset has already been applied via the widget to which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":82992,"byte_end":83091,"line_start":281,"line_end":281,"column_start":1,"column_end":100}},{"value":"/ we are relatively positioned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":83092,"byte_end":83125,"line_start":282,"line_end":282,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"depth_order","qualname":"::graph::depth_order","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":4970},{"krate":0,"index":4973},{"krate":0,"index":267},{"krate":0,"index":272}],"decl_id":null,"docs":" Types and functionality related to the calculation of a **Graph**'s rendering depth order.\n","sig":null,"attributes":[{"value":"! Types and functionality related to the calculation of a **Graph**'s rendering depth order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85163,"byte_end":85257,"line_start":1,"line_end":1,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":4970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85436,"byte_end":85446,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"DepthOrder","qualname":"::graph::depth_order::DepthOrder","value":"DepthOrder { indices }","parent":null,"children":[{"krate":0,"index":4971},{"krate":0,"index":4972}],"decl_id":null,"docs":" Contains Node indices in order of depth, starting with the deepest.\n","sig":null,"attributes":[{"value":"/ Contains Node indices in order of depth, starting with the deepest.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85336,"byte_end":85407,"line_start":10,"line_end":10,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85531,"byte_end":85538,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"indices","qualname":"::graph::depth_order::DepthOrder::indices","value":"std::vec::Vec<daggy::NodeIndex>","parent":{"krate":0,"index":4970},"children":[],"decl_id":null,"docs":" The primary **Vec** storing the **DepthOrder**'s ordered indices.\n","sig":null,"attributes":[{"value":"/ The primary **Vec** storing the **DepthOrder**'s ordered indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85453,"byte_end":85522,"line_start":13,"line_end":13,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85812,"byte_end":85815,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<DepthOrder>::new","value":"fn () -> DepthOrder","parent":null,"children":[],"decl_id":null,"docs":" Construct a new empty **DepthOrder**.\n","sig":null,"attributes":[{"value":"/ Construct a new empty **DepthOrder**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85759,"byte_end":85800,"line_start":23,"line_end":23,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86158,"byte_end":86176,"line_start":35,"line_end":35,"column_start":12,"column_end":30},"name":"with_node_capacity","qualname":"<DepthOrder>::with_node_capacity","value":"fn (n_nodes: usize) -> DepthOrder","parent":null,"children":[],"decl_id":null,"docs":" Construct a new empty **DepthOrder**.","sig":null,"attributes":[{"value":"/ Construct a new empty **DepthOrder**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85943,"byte_end":85984,"line_start":31,"line_end":31,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85989,"byte_end":85992,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ There can be at most two indices per widget (the widget and the widget's scrollbar). Thus","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85997,"byte_end":86090,"line_start":33,"line_end":33,"column_start":5,"column_end":98}},{"value":"/ we'll reserve double the number of nodes given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86095,"byte_end":86146,"line_start":34,"line_end":34,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86974,"byte_end":86980,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"update","qualname":"<DepthOrder>::update","value":"fn (&mut self, graph: &Graph, root: widget::Id, updated_widgets: &fnv::FnvHashSet<widget::Id>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the **DepthOrder** (starting with the deepest) for all nodes in the given **Graph**.","sig":null,"attributes":[{"value":"/ Update the **DepthOrder** (starting with the deepest) for all nodes in the given **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86391,"byte_end":86486,"line_start":43,"line_end":43,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86491,"byte_end":86494,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ FIXME:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86499,"byte_end":86509,"line_start":45,"line_end":45,"column_start":5,"column_end":15}},{"value":"/ This likely needs to be re-written, and will probably fail for graphs with many floating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86514,"byte_end":86606,"line_start":46,"line_end":46,"column_start":5,"column_end":97}},{"value":"/ widgets instantiated upon other floating widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86611,"byte_end":86664,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86669,"byte_end":86672,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ The proper algorithm should be a full toposort where the neighbours of each node are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86677,"byte_end":86765,"line_start":49,"line_end":49,"column_start":5,"column_end":93}},{"value":"/ visited in the order specified within `visit_by_depth`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86770,"byte_end":86829,"line_start":50,"line_end":50,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86834,"byte_end":86837,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The `visit_by_depth` algorithm should not be recursive and instead use either looping,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86842,"byte_end":86932,"line_start":52,"line_end":52,"column_start":5,"column_end":95}},{"value":"/ walking or iteration.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":86937,"byte_end":86962,"line_start":53,"line_end":53,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40121,"byte_end":40130,"line_start":21,"line_end":21,"column_start":10,"column_end":19},"name":"EdgeIndex","qualname":"::graph::EdgeIndex","value":"daggy::EdgeIndex<u32>","parent":null,"children":[],"decl_id":null,"docs":" An alias for our Graph's Edge Index.\n","sig":null,"attributes":[{"value":"/ An alias for our Graph's Edge Index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40071,"byte_end":40111,"line_start":20,"line_end":20,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":277},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40240,"byte_end":40249,"line_start":24,"line_end":24,"column_start":10,"column_end":19},"name":"IndexPair","qualname":"::graph::IndexPair","value":"(EdgeIndex, widget::Id)","parent":null,"children":[],"decl_id":null,"docs":" An alias for a tuple containing an associated `Edge/widget::Id` pair.\n","sig":null,"attributes":[{"value":"/ An alias for a tuple containing an associated `Edge/widget::Id` pair.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40157,"byte_end":40230,"line_start":23,"line_end":23,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":278},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40335,"byte_end":40342,"line_start":27,"line_end":27,"column_start":10,"column_end":17},"name":"Parents","qualname":"::graph::Parents","value":"daggy::Parents<Node, Edge, u32>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** over some node's parent nodes.\n","sig":null,"attributes":[{"value":"/ A **Walker** over some node's parent nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40278,"byte_end":40325,"line_start":26,"line_end":26,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40434,"byte_end":40442,"line_start":29,"line_end":29,"column_start":10,"column_end":18},"name":"Children","qualname":"::graph::Children","value":"daggy::Children<Node, Edge, u32>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** over some node's child nodes.\n","sig":null,"attributes":[{"value":"/ A **Walker** over some node's child nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40378,"byte_end":40424,"line_start":28,"line_end":28,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40571,"byte_end":40586,"line_start":32,"line_end":32,"column_start":10,"column_end":25},"name":"PositionParents","qualname":"::graph::PositionParents","value":"std::iter::Chain<std::option::IntoIter<widget::Id>,\n                 std::option::IntoIter<widget::Id>>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the iterator yielding both **X** and **Y** **Position** parents.\n","sig":null,"attributes":[{"value":"/ An alias for the iterator yielding both **X** and **Y** **Position** parents.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40480,"byte_end":40561,"line_start":31,"line_end":31,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40739,"byte_end":40755,"line_start":36,"line_end":36,"column_start":10,"column_end":26},"name":"FilteredChildren","qualname":"::graph::FilteredChildren","value":"daggy::walker::Filter<Children, fn(&Graph, EdgeIndex, widget::Id) -> bool>","parent":null,"children":[],"decl_id":null,"docs":" An alias for some filtered children walker.\n","sig":null,"attributes":[{"value":"/ An alias for some filtered children walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40682,"byte_end":40729,"line_start":35,"line_end":35,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40911,"byte_end":40924,"line_start":39,"line_end":39,"column_start":10,"column_end":23},"name":"DepthChildren","qualname":"::graph::DepthChildren","value":"FilteredChildren","parent":null,"children":[],"decl_id":null,"docs":" An alias for a **Walker** over a node's **Depth** children.\n","sig":null,"attributes":[{"value":"/ An alias for a **Walker** over a node's **Depth** children.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40838,"byte_end":40901,"line_start":38,"line_end":38,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41023,"byte_end":41040,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"name":"XPositionChildren","qualname":"::graph::XPositionChildren","value":"FilteredChildren","parent":null,"children":[],"decl_id":null,"docs":" An alias for a **Walker** over a node's **X Position** children.\n","sig":null,"attributes":[{"value":"/ An alias for a **Walker** over a node's **X Position** children.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40945,"byte_end":41013,"line_start":40,"line_end":40,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41139,"byte_end":41156,"line_start":43,"line_end":43,"column_start":10,"column_end":27},"name":"YPositionChildren","qualname":"::graph::YPositionChildren","value":"FilteredChildren","parent":null,"children":[],"decl_id":null,"docs":" An alias for a **Walker** over a node's **Y Position** children.\n","sig":null,"attributes":[{"value":"/ An alias for a **Walker** over a node's **Y Position** children.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41061,"byte_end":41129,"line_start":42,"line_end":42,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":285},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41282,"byte_end":41298,"line_start":45,"line_end":45,"column_start":10,"column_end":26},"name":"PositionChildren","qualname":"::graph::PositionChildren","value":"daggy::walker::Chain<Graph, u32, XPositionChildren, YPositionChildren>","parent":null,"children":[],"decl_id":null,"docs":" An alias for a **Walker** over a node's **X** and **Y** **Position** children respectively.\n","sig":null,"attributes":[{"value":"/ An alias for a **Walker** over a node's **X** and **Y** **Position** children respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41177,"byte_end":41272,"line_start":44,"line_end":44,"column_start":1,"column_end":96}}]},{"kind":"Type","id":{"krate":0,"index":286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41448,"byte_end":41463,"line_start":47,"line_end":47,"column_start":10,"column_end":25},"name":"GraphicChildren","qualname":"::graph::GraphicChildren","value":"FilteredChildren","parent":null,"children":[],"decl_id":null,"docs":" An alias for a **Walker** over a node's **Graphic** children.\n","sig":null,"attributes":[{"value":"/ An alias for a **Walker** over a node's **Graphic** children.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41373,"byte_end":41438,"line_start":46,"line_end":46,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":287},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41541,"byte_end":41554,"line_start":50,"line_end":50,"column_start":10,"column_end":23},"name":"RecursiveWalk","qualname":"::graph::RecursiveWalk","value":"daggy::walker::Recursive<Graph, u32, F>","parent":null,"children":[],"decl_id":null,"docs":" An alias for our Graph's recursive walker.\n","sig":null,"attributes":[{"value":"/ An alias for our Graph's recursive walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41485,"byte_end":41531,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":289},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41667,"byte_end":41677,"line_start":53,"line_end":53,"column_start":10,"column_end":20},"name":"WouldCycle","qualname":"::graph::WouldCycle","value":"daggy::WouldCycle<Edge>","parent":null,"children":[],"decl_id":null,"docs":" An alias for our Graph's **WouldCycle** error type.\n","sig":null,"attributes":[{"value":"/ An alias for our Graph's **WouldCycle** error type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41602,"byte_end":41657,"line_start":52,"line_end":52,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":4975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41829,"byte_end":41846,"line_start":57,"line_end":57,"column_start":12,"column_end":29},"name":"UniqueWidgetState","qualname":"::graph::UniqueWidgetState","value":"UniqueWidgetState { state, style }","parent":null,"children":[{"krate":0,"index":4978},{"krate":0,"index":4979}],"decl_id":null,"docs":" The state type that we'll dynamically cast to and from `Any` for storage within the cache.\n","sig":null,"attributes":[{"value":"/ The state type that we'll dynamically cast to and from `Any` for storage within the cache.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41706,"byte_end":41800,"line_start":55,"line_end":55,"column_start":1,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":4978},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41948,"byte_end":41953,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"name":"state","qualname":"::graph::UniqueWidgetState::state","value":"State","parent":{"krate":0,"index":4975},"children":[],"decl_id":null,"docs":" A **Widget**'s unique \"State\".\n","sig":null,"attributes":[{"value":"/ A **Widget**'s unique \"State\".","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41905,"byte_end":41939,"line_start":61,"line_end":61,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":4979},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42009,"byte_end":42014,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"name":"style","qualname":"::graph::UniqueWidgetState::style","value":"Style","parent":{"krate":0,"index":4975},"children":[],"decl_id":null,"docs":" A **Widget**'s unique \"Style\".\n","sig":null,"attributes":[{"value":"/ A **Widget**'s unique \"Style\".","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":41966,"byte_end":42000,"line_start":63,"line_end":63,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42120,"byte_end":42129,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"Container","qualname":"::graph::Container","value":"Container { maybe_state, type_id, rect, depth, kid_area, maybe_dragged_from, maybe_floating, crop_kids, maybe_x_scroll_state, maybe_y_scroll_state, instantiation_order_idx, is_over }","parent":null,"children":[{"krate":0,"index":4985},{"krate":0,"index":4986},{"krate":0,"index":4987},{"krate":0,"index":4988},{"krate":0,"index":4989},{"krate":0,"index":4990},{"krate":0,"index":4991},{"krate":0,"index":4992},{"krate":0,"index":4993},{"krate":0,"index":4994},{"krate":0,"index":4995},{"krate":0,"index":4996}],"decl_id":null,"docs":" A container for caching a Widget's state inside a Graph Node.\n","sig":null,"attributes":[{"value":"/ A container for caching a Widget's state inside a Graph Node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42026,"byte_end":42091,"line_start":67,"line_end":67,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":4985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42181,"byte_end":42192,"line_start":71,"line_end":71,"column_start":9,"column_end":20},"name":"maybe_state","qualname":"::graph::Container::maybe_state","value":"std::option::Option<std::boxed::Box<(dyn std::any::Any + std::marker::Send + 'static)>>","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Dynamically stored widget state.\n","sig":null,"attributes":[{"value":"/ Dynamically stored widget state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42136,"byte_end":42172,"line_start":70,"line_end":70,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":4986},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42372,"byte_end":42379,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"type_id","qualname":"::graph::Container::type_id","value":"std::any::TypeId","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" The unique `TypeId` associated with the `Widget::State`.","sig":null,"attributes":[{"value":"/ The unique `TypeId` associated with the `Widget::State`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42227,"byte_end":42287,"line_start":72,"line_end":72,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42292,"byte_end":42295,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This is equal to `std::any::TypeId::of::<Widget::State>()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42300,"byte_end":42363,"line_start":74,"line_end":74,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":4987},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42459,"byte_end":42463,"line_start":77,"line_end":77,"column_start":9,"column_end":13},"name":"rect","qualname":"::graph::Container::rect","value":"position::rect::Rect","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" The rectangle describing the Widget's area.\n","sig":null,"attributes":[{"value":"/ The rectangle describing the Widget's area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42403,"byte_end":42450,"line_start":76,"line_end":76,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42565,"byte_end":42570,"line_start":79,"line_end":79,"column_start":9,"column_end":14},"name":"depth","qualname":"::graph::Container::depth","value":"f32","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" The depth at which the widget will be rendered comparatively to its siblings.\n","sig":null,"attributes":[{"value":"/ The depth at which the widget will be rendered comparatively to its siblings.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42475,"byte_end":42556,"line_start":78,"line_end":78,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":4989},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42639,"byte_end":42647,"line_start":81,"line_end":81,"column_start":9,"column_end":17},"name":"kid_area","qualname":"::graph::Container::kid_area","value":"widget::KidArea","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" The area in which child widgets are placed.\n","sig":null,"attributes":[{"value":"/ The area in which child widgets are placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42583,"byte_end":42630,"line_start":80,"line_end":80,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42752,"byte_end":42770,"line_start":83,"line_end":83,"column_start":9,"column_end":27},"name":"maybe_dragged_from","qualname":"::graph::Container::maybe_dragged_from","value":"std::option::Option<[f64; 2]>","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" If widget is draggable and is being dragged, this is where it started\n","sig":null,"attributes":[{"value":"/ If widget is draggable and is being dragged, this is where it started","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42670,"byte_end":42743,"line_start":82,"line_end":82,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":4991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42937,"byte_end":42951,"line_start":87,"line_end":87,"column_start":9,"column_end":23},"name":"maybe_floating","qualname":"::graph::Container::maybe_floating","value":"std::option::Option<widget::Floating>","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Whether or not the widget is a \"Floating\" widget.","sig":null,"attributes":[{"value":"/ Whether or not the widget is a \"Floating\" widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42791,"byte_end":42844,"line_start":84,"line_end":84,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42849,"byte_end":42852,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ See the `Widget::float` docs for an explanation of what this means.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42857,"byte_end":42928,"line_start":86,"line_end":86,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":4992},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43064,"byte_end":43073,"line_start":89,"line_end":89,"column_start":9,"column_end":18},"name":"crop_kids","qualname":"::graph::Container::crop_kids","value":"bool","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Whether or not children widgets should be cropped to the `kid_area`.\n","sig":null,"attributes":[{"value":"/ Whether or not children widgets should be cropped to the `kid_area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":42983,"byte_end":43055,"line_start":88,"line_end":88,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":4993},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43163,"byte_end":43183,"line_start":91,"line_end":91,"column_start":9,"column_end":29},"name":"maybe_x_scroll_state","qualname":"::graph::Container::maybe_x_scroll_state","value":"std::option::Option<widget::scroll::State<widget::scroll::X>>","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Scroll related state (is only `Some` if this axis is scrollable).\n","sig":null,"attributes":[{"value":"/ Scroll related state (is only `Some` if this axis is scrollable).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43085,"byte_end":43154,"line_start":90,"line_end":90,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":4994},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43299,"byte_end":43319,"line_start":93,"line_end":93,"column_start":9,"column_end":29},"name":"maybe_y_scroll_state","qualname":"::graph::Container::maybe_y_scroll_state","value":"std::option::Option<widget::scroll::State<widget::scroll::Y>>","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Scroll related state (is only `Some` if this axis is scrollable).\n","sig":null,"attributes":[{"value":"/ Scroll related state (is only `Some` if this axis is scrollable).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43221,"byte_end":43290,"line_start":92,"line_end":92,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":4995},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43592,"byte_end":43615,"line_start":98,"line_end":98,"column_start":9,"column_end":32},"name":"instantiation_order_idx","qualname":"::graph::Container::instantiation_order_idx","value":"usize","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" Represents the Widget's position within the overall instantiation ordering of the widgets.","sig":null,"attributes":[{"value":"/ Represents the Widget's position within the overall instantiation ordering of the widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43357,"byte_end":43451,"line_start":94,"line_end":94,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43456,"byte_end":43459,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ i.e. if foo's `instantiation_order_idx` is lower than bar's, it means that foo was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43464,"byte_end":43550,"line_start":96,"line_end":96,"column_start":5,"column_end":91}},{"value":"/ instantiated before bar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43555,"byte_end":43583,"line_start":97,"line_end":97,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4996},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43839,"byte_end":43846,"line_start":103,"line_end":103,"column_start":9,"column_end":16},"name":"is_over","qualname":"::graph::Container::is_over","value":"graph::IsOverFn","parent":{"krate":0,"index":4984},"children":[],"decl_id":null,"docs":" A function specified by the widget to use when determining whether or not a point is over\n it.","sig":null,"attributes":[{"value":"/ A function specified by the widget to use when determining whether or not a point is over","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43628,"byte_end":43721,"line_start":99,"line_end":99,"column_start":5,"column_end":98}},{"value":"/ it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43726,"byte_end":43733,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43738,"byte_end":43741,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ NOTE: See `Wiget::is_over` for more details and a note on possible future plans.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43746,"byte_end":43830,"line_start":102,"line_end":102,"column_start":5,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":4999},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43990,"byte_end":43998,"line_start":108,"line_end":108,"column_start":12,"column_end":20},"name":"IsOverFn","qualname":"::graph::IsOverFn","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around a `widget::IsOverFn` to make implementing `Debug` easier for `Container`.\n","sig":null,"attributes":[{"value":"/ A wrapper around a `widget::IsOverFn` to make implementing `Debug` easier for `Container`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":43861,"byte_end":43955,"line_start":106,"line_end":106,"column_start":1,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44285,"byte_end":44291,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Widget","qualname":"::graph::Node::Widget","value":"Node::Widget(Container)","parent":{"krate":0,"index":5005},"children":[],"decl_id":null,"docs":" A widget constructed by a user.\n","sig":null,"attributes":[{"value":"/ A widget constructed by a user.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44245,"byte_end":44280,"line_start":119,"line_end":119,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5009},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44563,"byte_end":44574,"line_start":125,"line_end":125,"column_start":5,"column_end":16},"name":"Placeholder","qualname":"::graph::Node::Placeholder","value":"Node::Placeholder","parent":{"krate":0,"index":5005},"children":[],"decl_id":null,"docs":" A placeholder node - used when reserving a place for a **Widget** within the **Graph**.","sig":null,"attributes":[{"value":"/ A placeholder node - used when reserving a place for a **Widget** within the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44308,"byte_end":44399,"line_start":121,"line_end":121,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44404,"byte_end":44407,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ It may also be used to represent a node that was once pre-occuppied by a widget who was not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44412,"byte_end":44507,"line_start":123,"line_end":123,"column_start":5,"column_end":100}},{"value":"/ `set` during the last `set_widgets` stage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44512,"byte_end":44558,"line_start":124,"line_end":124,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":5005},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44234,"byte_end":44238,"line_start":118,"line_end":118,"column_start":10,"column_end":14},"name":"Node","qualname":"::graph::Node","value":"Node::{Widget, Placeholder}","parent":null,"children":[{"krate":0,"index":5006},{"krate":0,"index":5009}],"decl_id":null,"docs":" A node for use within the **Graph**.\n","sig":null,"attributes":[{"value":"/ A node for use within the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44167,"byte_end":44207,"line_start":116,"line_end":116,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5014},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44829,"byte_end":44837,"line_start":134,"line_end":134,"column_start":5,"column_end":13},"name":"Position","qualname":"::graph::Edge::Position","value":"Edge::Position(Axis)","parent":{"krate":0,"index":5013},"children":[],"decl_id":null,"docs":" Describes the relative positioning of widgets.","sig":null,"attributes":[{"value":"/ Describes the relative positioning of widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44691,"byte_end":44741,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44746,"byte_end":44749,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ When adding an edge *a -> b*, *b* is positioned relatively to *a*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44754,"byte_end":44824,"line_start":133,"line_end":133,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5017},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45005,"byte_end":45010,"line_start":138,"line_end":138,"column_start":5,"column_end":10},"name":"Depth","qualname":"::graph::Edge::Depth","value":"Edge::Depth","parent":{"krate":0,"index":5013},"children":[],"decl_id":null,"docs":" Describes the rendering order of the widgets.","sig":null,"attributes":[{"value":"/ Describes the rendering order of the widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44849,"byte_end":44898,"line_start":135,"line_end":135,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44903,"byte_end":44906,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ When adding an edge *a -> b*, *a* is the parent of (and will be rendered before) *b*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44911,"byte_end":45000,"line_start":137,"line_end":137,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5019},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45641,"byte_end":45648,"line_start":149,"line_end":149,"column_start":5,"column_end":12},"name":"Graphic","qualname":"::graph::Edge::Graphic","value":"Edge::Graphic","parent":{"krate":0,"index":5013},"children":[],"decl_id":null,"docs":" Describes when a widget is used solely as a graphical element for another widget.","sig":null,"attributes":[{"value":"/ Describes when a widget is used solely as a graphical element for another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45016,"byte_end":45101,"line_start":139,"line_end":139,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45106,"byte_end":45109,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ When adding an edge *a -> b*, *b* is considered to be a graphical element of *a*. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45114,"byte_end":45204,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ implies several things about *b*:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45209,"byte_end":45246,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45251,"byte_end":45254,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ - If *b* is picked within either **Graph::pick_widget** or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45259,"byte_end":45321,"line_start":144,"line_end":144,"column_start":5,"column_end":67}},{"value":"/ **Graph::pick_top_scrollable_widget**, it will instead return the index for *a*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45326,"byte_end":45410,"line_start":145,"line_end":145,"column_start":5,"column_end":89}},{"value":"/ - When determining the **Graph::scroll_offset** for *b*, *a*'s scrolling (if it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45415,"byte_end":45501,"line_start":146,"line_end":146,"column_start":5,"column_end":91}},{"value":"/ scrollable, that is) will be skipped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45506,"byte_end":45547,"line_start":147,"line_end":147,"column_start":5,"column_end":46}},{"value":"/ - Any **Graphic** child of *b* will be considered as a **Graphic** child of *a*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45552,"byte_end":45636,"line_start":148,"line_end":148,"column_start":5,"column_end":89}}]},{"kind":"Enum","id":{"krate":0,"index":5013},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44680,"byte_end":44684,"line_start":130,"line_end":130,"column_start":10,"column_end":14},"name":"Edge","qualname":"::graph::Edge","value":"Edge::{Position, Depth, Graphic}","parent":null,"children":[{"krate":0,"index":5014},{"krate":0,"index":5017},{"krate":0,"index":5019}],"decl_id":null,"docs":" An edge between nodes within the UI Graph.\n","sig":null,"attributes":[{"value":"/ An edge between nodes within the UI Graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44579,"byte_end":44625,"line_start":128,"line_end":128,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":292},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45726,"byte_end":45743,"line_start":153,"line_end":153,"column_start":11,"column_end":28},"name":"NUM_EDGE_VARIANTS","qualname":"::graph::NUM_EDGE_VARIANTS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The number of different variants within the **Edge** enum.\n","sig":null,"attributes":[{"value":"/ The number of different variants within the **Edge** enum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45653,"byte_end":45715,"line_start":152,"line_end":152,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":5033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45938,"byte_end":45943,"line_start":160,"line_end":160,"column_start":12,"column_end":17},"name":"Graph","qualname":"::graph::Graph","value":"Graph {  }","parent":null,"children":[{"krate":0,"index":5034}],"decl_id":null,"docs":" Stores the dynamic state of a UI tree of Widgets.\n","sig":null,"attributes":[{"value":"/ Stores the dynamic state of a UI tree of Widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":45856,"byte_end":45909,"line_start":158,"line_end":158,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46196,"byte_end":46211,"line_start":170,"line_end":170,"column_start":12,"column_end":27},"name":"state_and_style","qualname":"<Container>::state_and_style","value":"fn <State, Style> (&self) -> Option<&UniqueWidgetState<State, Style>>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the **Container**'s unique widget State and Style if there is any.\n","sig":null,"attributes":[{"value":"/ Borrow the **Container**'s unique widget State and Style if there is any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46107,"byte_end":46184,"line_start":169,"line_end":169,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46650,"byte_end":46669,"line_start":179,"line_end":179,"column_start":12,"column_end":31},"name":"unique_widget_state","qualname":"<Container>::unique_widget_state","value":"fn <W> (&self) -> Option<&UniqueWidgetState<W::State, W::Style>>","parent":null,"children":[],"decl_id":null,"docs":" Same as [**Container::state_and_style**](./struct.Container#method.state_and_style) but\n accessed using a **Widget** type parameter instead of the unique State and Style types.\n","sig":null,"attributes":[{"value":"/ Same as [**Container::state_and_style**](./struct.Container#method.state_and_style) but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46451,"byte_end":46542,"line_start":177,"line_end":177,"column_start":5,"column_end":96}},{"value":"/ accessed using a **Widget** type parameter instead of the unique State and Style types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46547,"byte_end":46638,"line_start":178,"line_end":178,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46993,"byte_end":47002,"line_start":193,"line_end":193,"column_start":12,"column_end":21},"name":"is_widget","qualname":"<Node>::is_widget","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether or not the **Node** is of the **Widget** variant.\n","sig":null,"attributes":[{"value":"/ Whether or not the **Node** is of the **Widget** variant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46920,"byte_end":46981,"line_start":192,"line_end":192,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47150,"byte_end":47153,"line_start":203,"line_end":203,"column_start":12,"column_end":15},"name":"new","qualname":"<Graph>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" A new empty **Graph**.\n","sig":null,"attributes":[{"value":"/ A new empty **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47112,"byte_end":47138,"line_start":202,"line_end":202,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47557,"byte_end":47575,"line_start":214,"line_end":214,"column_start":12,"column_end":30},"name":"with_node_capacity","qualname":"<Graph>::with_node_capacity","value":"fn (n_nodes: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A new **Graph** with the given node capacity.","sig":null,"attributes":[{"value":"/ A new **Graph** with the given node capacity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47232,"byte_end":47281,"line_start":209,"line_end":209,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47286,"byte_end":47289,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ We know that there can be no more than three parents per node as the public API enforces a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47294,"byte_end":47388,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ maximum of one Depth, Position and Graphic parent each. Thus, we can assume an edge","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47393,"byte_end":47480,"line_start":212,"line_end":212,"column_start":5,"column_end":92}},{"value":"/ capacity of exactly three times the given node capacity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47485,"byte_end":47545,"line_start":213,"line_end":213,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47816,"byte_end":47821,"line_start":222,"line_end":222,"column_start":12,"column_end":17},"name":"clear","qualname":"<Graph>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all **Node**s and **Edge**s from the **Graph**.\n","sig":null,"attributes":[{"value":"/ Removes all **Node**s and **Edge**s from the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47745,"byte_end":47804,"line_start":221,"line_end":221,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47934,"byte_end":47944,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Graph>::node_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of **Node**s in the **Graph**.\n","sig":null,"attributes":[{"value":"/ The total number of **Node**s in the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47871,"byte_end":47922,"line_start":226,"line_end":226,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":48075,"byte_end":48087,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"widget_count","qualname":"<Graph>::widget_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of **Node::Widget**s in the **Graph**.\n","sig":null,"attributes":[{"value":"/ The total number of **Node::Widget**s in the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":48004,"byte_end":48063,"line_start":231,"line_end":231,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":48295,"byte_end":48305,"line_start":239,"line_end":239,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Graph>::edge_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of **Edge**s in the **Graph**.\n","sig":null,"attributes":[{"value":"/ The total number of **Edge**s in the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":48232,"byte_end":48283,"line_start":238,"line_end":238,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":48442,"byte_end":48455,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"node_capacity","qualname":"<Graph>::node_capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The current capacity for the **Graph**'s internal node `Vec`.\n","sig":null,"attributes":[{"value":"/ The current capacity for the **Graph**'s internal node `Vec`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":48365,"byte_end":48430,"line_start":243,"line_end":243,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":51874,"byte_end":51889,"line_start":328,"line_end":328,"column_start":12,"column_end":27},"name":"add_placeholder","qualname":"<Graph>::add_placeholder","value":"fn (&mut self) -> widget::Id","parent":null,"children":[],"decl_id":null,"docs":" Add a new placeholder node and return it's `widget::Id` into the `Graph`.","sig":null,"attributes":[{"value":"/ Add a new placeholder node and return it's `widget::Id` into the `Graph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":51637,"byte_end":51714,"line_start":324,"line_end":324,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":51719,"byte_end":51722,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ This method is used by the `widget::set_widget` function when some internal widget does not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":51727,"byte_end":51822,"line_start":326,"line_end":326,"column_start":5,"column_end":100}},{"value":"/ yet have it's own `widget::Id`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":51827,"byte_end":51862,"line_start":327,"line_end":327,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52045,"byte_end":52049,"line_start":333,"line_end":333,"column_start":12,"column_end":16},"name":"node","qualname":"<Graph>::node","value":"fn (&self, idx: widget::Id) -> Option<&Node>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the node at the given **widget::Id** if there is one.\n","sig":null,"attributes":[{"value":"/ Borrow the node at the given **widget::Id** if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":51969,"byte_end":52033,"line_start":332,"line_end":332,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52222,"byte_end":52230,"line_start":338,"line_end":338,"column_start":12,"column_end":20},"name":"node_mut","qualname":"<Graph>::node_mut","value":"fn (&mut self, idx: widget::Id) -> Option<&mut Node>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrow the node at the given **widget::Id** if there is one.\n","sig":null,"attributes":[{"value":"/ Mutably borrow the node at the given **widget::Id** if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52138,"byte_end":52210,"line_start":337,"line_end":337,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52406,"byte_end":52410,"line_start":343,"line_end":343,"column_start":12,"column_end":16},"name":"edge","qualname":"<Graph>::edge","value":"fn (&self, idx: EdgeIndex) -> Option<&Edge>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the edge at the given **EdgeIndex** if there is one.\n","sig":null,"attributes":[{"value":"/ Borrow the edge at the given **EdgeIndex** if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52331,"byte_end":52394,"line_start":342,"line_end":342,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52581,"byte_end":52589,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"edge_mut","qualname":"<Graph>::edge_mut","value":"fn (&mut self, idx: EdgeIndex) -> Option<&mut Edge>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrow the edge at the given **EdgeIndex** if there is one.\n","sig":null,"attributes":[{"value":"/ Mutably borrow the edge at the given **EdgeIndex** if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52498,"byte_end":52569,"line_start":347,"line_end":347,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52788,"byte_end":52802,"line_start":353,"line_end":353,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<Graph>::edge_endpoints","value":"fn (&self, idx: EdgeIndex) -> Option<(widget::Id, widget::Id)>","parent":null,"children":[],"decl_id":null,"docs":" Return the parent and child nodes on either end of the **Edge** at the given index.\n","sig":null,"attributes":[{"value":"/ Return the parent and child nodes on either end of the **Edge** at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52689,"byte_end":52776,"line_start":352,"line_end":352,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52995,"byte_end":53001,"line_start":358,"line_end":358,"column_start":12,"column_end":18},"name":"widget","qualname":"<Graph>::widget","value":"fn (&self, idx: widget::Id) -> Option<&Container>","parent":null,"children":[],"decl_id":null,"docs":" If there is a Widget for the given index, return a reference to it.\n","sig":null,"attributes":[{"value":"/ If there is a Widget for the given index, return a reference to it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":52912,"byte_end":52983,"line_start":357,"line_end":357,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53296,"byte_end":53306,"line_start":366,"line_end":366,"column_start":12,"column_end":22},"name":"widget_mut","qualname":"<Graph>::widget_mut","value":"fn (&mut self, idx: widget::Id) -> Option<&mut Container>","parent":null,"children":[],"decl_id":null,"docs":" If there is a Widget for the given Id, return a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ If there is a Widget for the given Id, return a mutable reference to it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53208,"byte_end":53284,"line_start":365,"line_end":365,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53632,"byte_end":53639,"line_start":374,"line_end":374,"column_start":12,"column_end":19},"name":"parents","qualname":"<Graph>::parents","value":"fn (&self, child: widget::Id) -> Parents","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that may be used to step through the parents of the given child node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that may be used to step through the parents of the given child node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53529,"byte_end":53620,"line_start":373,"line_end":373,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53913,"byte_end":53927,"line_start":381,"line_end":381,"column_start":12,"column_end":26},"name":"recursive_walk","qualname":"<Graph>::recursive_walk","value":"fn <F> (&self, start: widget::Id, recursive_fn: F) -> RecursiveWalk<F>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks the **Graph** using the given `recursive_fn`.","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks the **Graph** using the given `recursive_fn`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53722,"byte_end":53812,"line_start":378,"line_end":378,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53817,"byte_end":53820,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ **Panics** If the given start index does not exist within the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":53825,"byte_end":53901,"line_start":380,"line_end":380,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54271,"byte_end":54282,"line_start":389,"line_end":389,"column_start":12,"column_end":23},"name":"edge_parent","qualname":"<Graph>::edge_parent","value":"fn (&self, idx: widget::Id, edge: Edge) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" If the widget at the given index has some parent along an **Edge** of the given variant,\n return an index to it.\n","sig":null,"attributes":[{"value":"/ If the widget at the given index has some parent along an **Edge** of the given variant,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54136,"byte_end":54228,"line_start":387,"line_end":387,"column_start":5,"column_end":97}},{"value":"/ return an index to it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54233,"byte_end":54259,"line_start":388,"line_end":388,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54522,"byte_end":54534,"line_start":394,"line_end":394,"column_start":12,"column_end":24},"name":"depth_parent","qualname":"<Graph>::depth_parent","value":"fn (&self, idx: widget::Id) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the parent along the given widget's **Depth** **Edge**.\n","sig":null,"attributes":[{"value":"/ Return the index of the parent along the given widget's **Depth** **Edge**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54431,"byte_end":54510,"line_start":393,"line_end":393,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54731,"byte_end":54748,"line_start":399,"line_end":399,"column_start":12,"column_end":29},"name":"x_position_parent","qualname":"<Graph>::x_position_parent","value":"fn (&self, idx: widget::Id) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the parent along the given widget's **Position** **Edge**.\n","sig":null,"attributes":[{"value":"/ Return the index of the parent along the given widget's **Position** **Edge**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54637,"byte_end":54719,"line_start":398,"line_end":398,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54957,"byte_end":54974,"line_start":404,"line_end":404,"column_start":12,"column_end":29},"name":"y_position_parent","qualname":"<Graph>::y_position_parent","value":"fn (&self, idx: widget::Id) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the parent along the given widget's **Position** **Edge**.\n","sig":null,"attributes":[{"value":"/ Return the index of the parent along the given widget's **Position** **Edge**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":54863,"byte_end":54945,"line_start":403,"line_end":403,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":55222,"byte_end":55238,"line_start":410,"line_end":410,"column_start":12,"column_end":28},"name":"position_parents","qualname":"<Graph>::position_parents","value":"fn (&self, idx: widget::Id) -> PositionParents","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator yielding the parents along both the **X** and **Y** **Position**\n **Edge**s respectively.\n","sig":null,"attributes":[{"value":"/ Produces an iterator yielding the parents along both the **X** and **Y** **Position**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":55089,"byte_end":55178,"line_start":408,"line_end":408,"column_start":5,"column_end":94}},{"value":"/ **Edge**s respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":55183,"byte_end":55210,"line_start":409,"line_end":409,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":55471,"byte_end":55485,"line_start":415,"line_end":415,"column_start":12,"column_end":26},"name":"graphic_parent","qualname":"<Graph>::graphic_parent","value":"fn (&self, idx: widget::Id) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the parent along the given widget's **Graphic** **Edge**.\n","sig":null,"attributes":[{"value":"/ Return the index of the parent along the given widget's **Graphic** **Edge**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":55378,"byte_end":55459,"line_start":414,"line_end":414,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":55694,"byte_end":55716,"line_start":420,"line_end":420,"column_start":12,"column_end":34},"name":"depth_parent_recursion","qualname":"<Graph>::depth_parent_recursion","value":"fn (&self, idx: widget::Id) -> RecursiveWalk<fn(&Graph, widget::Id) -> Option<IndexPair>>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks **Depth** parents starting from the given node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks **Depth** parents starting from the given node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":55590,"byte_end":55682,"line_start":419,"line_end":419,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":56169,"byte_end":56196,"line_start":431,"line_end":431,"column_start":12,"column_end":39},"name":"x_position_parent_recursion","qualname":"<Graph>::x_position_parent_recursion","value":"fn (&self, idx: widget::Id) -> RecursiveWalk<fn(&Graph, widget::Id) -> Option<IndexPair>>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks **X** **Position** parents starting from the given\n node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks **X** **Position** parents starting from the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":56048,"byte_end":56143,"line_start":429,"line_end":429,"column_start":5,"column_end":100}},{"value":"/ node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":56148,"byte_end":56157,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":56671,"byte_end":56698,"line_start":442,"line_end":442,"column_start":12,"column_end":39},"name":"y_position_parent_recursion","qualname":"<Graph>::y_position_parent_recursion","value":"fn (&self, idx: widget::Id) -> RecursiveWalk<fn(&Graph, widget::Id) -> Option<IndexPair>>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks **Y** **Position** parents starting from the given\n node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks **Y** **Position** parents starting from the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":56550,"byte_end":56645,"line_start":440,"line_end":440,"column_start":5,"column_end":100}},{"value":"/ node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":56650,"byte_end":56659,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":57158,"byte_end":57182,"line_start":452,"line_end":452,"column_start":12,"column_end":36},"name":"graphic_parent_recursion","qualname":"<Graph>::graphic_parent_recursion","value":"fn (&self, idx: widget::Id) -> RecursiveWalk<fn(&Graph, widget::Id) -> Option<IndexPair>>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks **Graphic** parents starting from the given node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks **Graphic** parents starting from the given node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":57052,"byte_end":57146,"line_start":451,"line_end":451,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":57661,"byte_end":57690,"line_start":463,"line_end":463,"column_start":12,"column_end":41},"name":"scrollable_y_parent_recursion","qualname":"<Graph>::scrollable_y_parent_recursion","value":"fn (&self, idx: widget::Id) -> RecursiveWalk<fn(&Graph, widget::Id) -> Option<IndexPair>>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks **Depth** parents that are scrollable along the\n *y* axis for the given node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks **Depth** parents that are scrollable along the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":57520,"byte_end":57612,"line_start":461,"line_end":461,"column_start":5,"column_end":97}},{"value":"/ *y* axis for the given node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":57617,"byte_end":57649,"line_start":462,"line_end":462,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":58462,"byte_end":58491,"line_start":482,"line_end":482,"column_start":12,"column_end":41},"name":"scrollable_x_parent_recursion","qualname":"<Graph>::scrollable_x_parent_recursion","value":"fn (&self, idx: widget::Id) -> RecursiveWalk<fn(&Graph, widget::Id) -> Option<IndexPair>>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks **Depth** parents that are scrollable along the\n *x* axis for the given node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks **Depth** parents that are scrollable along the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":58321,"byte_end":58413,"line_start":480,"line_end":480,"column_start":5,"column_end":97}},{"value":"/ *x* axis for the given node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":58418,"byte_end":58450,"line_start":481,"line_end":481,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59227,"byte_end":59235,"line_start":500,"line_end":500,"column_start":12,"column_end":20},"name":"children","qualname":"<Graph>::children","value":"fn (&self, parent: widget::Id) -> Children","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that may be used to step through the children of the given parent node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that may be used to step through the children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59122,"byte_end":59215,"line_start":499,"line_end":499,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59398,"byte_end":59412,"line_start":505,"line_end":505,"column_start":12,"column_end":26},"name":"depth_children","qualname":"<Graph>::depth_children","value":"fn (&self, idx: widget::Id) -> DepthChildren","parent":null,"children":[],"decl_id":null,"docs":" For walking the **Depth** children of the given parent node.\n","sig":null,"attributes":[{"value":"/ For walking the **Depth** children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59322,"byte_end":59386,"line_start":504,"line_end":504,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59598,"byte_end":59617,"line_start":510,"line_end":510,"column_start":12,"column_end":31},"name":"x_position_children","qualname":"<Graph>::x_position_children","value":"fn (&self, idx: widget::Id) -> XPositionChildren","parent":null,"children":[],"decl_id":null,"docs":" For walking the **Position(X)** children of the given parent node.\n","sig":null,"attributes":[{"value":"/ For walking the **Position(X)** children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59516,"byte_end":59586,"line_start":509,"line_end":509,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59812,"byte_end":59831,"line_start":515,"line_end":515,"column_start":12,"column_end":31},"name":"y_position_children","qualname":"<Graph>::y_position_children","value":"fn (&self, idx: widget::Id) -> YPositionChildren","parent":null,"children":[],"decl_id":null,"docs":" For walking the **Position(Y)** children of the given parent node.\n","sig":null,"attributes":[{"value":"/ For walking the **Position(Y)** children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59730,"byte_end":59800,"line_start":514,"line_end":514,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60123,"byte_end":60140,"line_start":522,"line_end":522,"column_start":12,"column_end":29},"name":"position_children","qualname":"<Graph>::position_children","value":"fn (&self, idx: widget::Id) -> PositionChildren","parent":null,"children":[],"decl_id":null,"docs":" For walking the **Position** children of the given parent node.","sig":null,"attributes":[{"value":"/ For walking the **Position** children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":59944,"byte_end":60011,"line_start":519,"line_end":519,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60016,"byte_end":60019,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ This first walks the **Axis::X** children, before walking the **Axis::Y** children.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60024,"byte_end":60111,"line_start":521,"line_end":521,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60351,"byte_end":60367,"line_start":527,"line_end":527,"column_start":12,"column_end":28},"name":"graphic_children","qualname":"<Graph>::graphic_children","value":"fn (&self, idx: widget::Id) -> GraphicChildren","parent":null,"children":[],"decl_id":null,"docs":" For walking the **Graphic** children of the given parent node.\n","sig":null,"attributes":[{"value":"/ For walking the **Graphic** children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60273,"byte_end":60339,"line_start":526,"line_end":526,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60642,"byte_end":60657,"line_start":534,"line_end":534,"column_start":12,"column_end":27},"name":"does_edge_exist","qualname":"<Graph>::does_edge_exist","value":"fn <F> (&self, parent: widget::Id, child: widget::Id, is_edge: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the given edge type exist between the nodes `parent` -> `child`.","sig":null,"attributes":[{"value":"/ Does the given edge type exist between the nodes `parent` -> `child`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60475,"byte_end":60548,"line_start":531,"line_end":531,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60553,"byte_end":60556,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ Returns `false` if either of the given node indices do not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60561,"byte_end":60630,"line_start":533,"line_end":533,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61022,"byte_end":61043,"line_start":543,"line_end":543,"column_start":12,"column_end":33},"name":"does_depth_edge_exist","qualname":"<Graph>::does_depth_edge_exist","value":"fn (&self, parent: widget::Id, child: widget::Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does a **Edge::Depth** exist between the nodes `parent` -> `child`.","sig":null,"attributes":[{"value":"/ Does a **Edge::Depth** exist between the nodes `parent` -> `child`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60857,"byte_end":60928,"line_start":540,"line_end":540,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60933,"byte_end":60936,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Returns `false` if either of the given node indices do not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":60941,"byte_end":61010,"line_start":542,"line_end":542,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61345,"byte_end":61369,"line_start":550,"line_end":550,"column_start":12,"column_end":36},"name":"does_position_edge_exist","qualname":"<Graph>::does_position_edge_exist","value":"fn (&self, parent: widget::Id, child: widget::Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does a **Edge::Position** exist between the nodes `parent` -> `child`.","sig":null,"attributes":[{"value":"/ Does a **Edge::Position** exist between the nodes `parent` -> `child`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61177,"byte_end":61251,"line_start":547,"line_end":547,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61256,"byte_end":61259,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ Returns `false` if either of the given node indices do not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61264,"byte_end":61333,"line_start":549,"line_end":549,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61745,"byte_end":61768,"line_start":558,"line_end":558,"column_start":12,"column_end":35},"name":"does_graphic_edge_exist","qualname":"<Graph>::does_graphic_edge_exist","value":"fn (&self, parent: widget::Id, child: widget::Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does a **Edge::Graphic** exist between the nodes `parent` -> `child`.","sig":null,"attributes":[{"value":"/ Does a **Edge::Graphic** exist between the nodes `parent` -> `child`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61578,"byte_end":61651,"line_start":555,"line_end":555,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61656,"byte_end":61659,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ Returns `false` if either of the given node indices do not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61664,"byte_end":61733,"line_start":557,"line_end":557,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62158,"byte_end":62183,"line_start":568,"line_end":568,"column_start":12,"column_end":37},"name":"does_recursive_edge_exist","qualname":"<Graph>::does_recursive_edge_exist","value":"fn <F> (&self, parent: widget::Id, child: widget::Id, is_edge: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are the given `parent` and `child` nodes connected by a single chain of edges of the given\n kind?","sig":null,"attributes":[{"value":"/ Are the given `parent` and `child` nodes connected by a single chain of edges of the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":61904,"byte_end":61998,"line_start":562,"line_end":562,"column_start":5,"column_end":99}},{"value":"/ kind?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62003,"byte_end":62012,"line_start":563,"line_end":563,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62017,"byte_end":62020,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ i.e. `parent` -> x -> y -> `child`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62025,"byte_end":62064,"line_start":565,"line_end":565,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62069,"byte_end":62072,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ Returns `false` if either of the given node indices do not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62077,"byte_end":62146,"line_start":567,"line_end":567,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62798,"byte_end":62829,"line_start":583,"line_end":583,"column_start":12,"column_end":43},"name":"does_recursive_depth_edge_exist","qualname":"<Graph>::does_recursive_depth_edge_exist","value":"fn (&self, parent: widget::Id, child: widget::Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are the given `parent` and `child` nodes connected by a single chain of **Depth** edges?","sig":null,"attributes":[{"value":"/ Are the given `parent` and `child` nodes connected by a single chain of **Depth** edges?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62560,"byte_end":62652,"line_start":578,"line_end":578,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62657,"byte_end":62660,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ i.e. `parent` -> x -> y -> `child`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62665,"byte_end":62704,"line_start":580,"line_end":580,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62709,"byte_end":62712,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Returns `false` if either of the given node indices do not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":62717,"byte_end":62786,"line_start":582,"line_end":582,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64067,"byte_end":64100,"line_start":609,"line_end":609,"column_start":12,"column_end":45},"name":"does_recursive_graphic_edge_exist","qualname":"<Graph>::does_recursive_graphic_edge_exist","value":"fn (&self, parent: widget::Id, child: widget::Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are the given `parent` and `child` nodes connected by a single chain of **Graphic** edges?","sig":null,"attributes":[{"value":"/ Are the given `parent` and `child` nodes connected by a single chain of **Graphic** edges?","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":63827,"byte_end":63921,"line_start":604,"line_end":604,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":63926,"byte_end":63929,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ i.e. `parent` -> x -> y -> `child`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":63934,"byte_end":63973,"line_start":606,"line_end":606,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":63978,"byte_end":63981,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Returns `false` if either of the given node indices do not exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":63986,"byte_end":64055,"line_start":608,"line_end":608,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64717,"byte_end":64733,"line_start":622,"line_end":622,"column_start":12,"column_end":28},"name":"pre_update_cache","qualname":"<Graph>::pre_update_cache","value":"fn (&mut self, root: widget::Id, widget: widget::PreUpdateCache, instantiation_order_idx: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cache some `PreUpdateCache` widget data into the graph.","sig":null,"attributes":[{"value":"/ Cache some `PreUpdateCache` widget data into the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64247,"byte_end":64306,"line_start":614,"line_end":614,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64311,"byte_end":64314,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ This is called (via the `ui` module) from within the `widget::set_widget` function prior to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64319,"byte_end":64414,"line_start":616,"line_end":616,"column_start":5,"column_end":100}},{"value":"/ the `Widget::update` method being called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64419,"byte_end":64464,"line_start":617,"line_end":617,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64469,"byte_end":64472,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ This is done so that if this Widget were to internally `set` some other `Widget`s within","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64477,"byte_end":64569,"line_start":619,"line_end":619,"column_start":5,"column_end":97}},{"value":"/ its own `update` method, this `Widget`s positioning and dimension data already exists","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64574,"byte_end":64663,"line_start":620,"line_end":620,"column_start":5,"column_end":94}},{"value":"/ within the `Graph` for reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":64668,"byte_end":64705,"line_start":621,"line_end":621,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":70158,"byte_end":70175,"line_start":740,"line_end":740,"column_start":12,"column_end":29},"name":"post_update_cache","qualname":"<Graph>::post_update_cache","value":"fn <W> (&mut self, widget: widget::PostUpdateCache<W>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cache some `PostUpdateCache` widget data into the graph.","sig":null,"attributes":[{"value":"/ Cache some `PostUpdateCache` widget data into the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":69903,"byte_end":69963,"line_start":736,"line_end":736,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":69968,"byte_end":69971,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ This is called (via the `ui` module) from within the `widget::set_widget` function after","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":69976,"byte_end":70068,"line_start":738,"line_end":738,"column_start":5,"column_end":97}},{"value":"/ the `Widget::update` method is called and some new state is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":70073,"byte_end":70146,"line_start":739,"line_end":739,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":407},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"guide","qualname":"::guide","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/mod.rs","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410}],"decl_id":null,"docs":"**The Conrod Guide**","sig":null,"attributes":[{"value":"!\n\n**The Conrod Guide**\n\n## Table of Contents\n\n1. [**What is Conrod?**][1]\n    - [A Brief Summary][1.1]\n    - [Screenshots and Videos][1.2]\n    - [Feature Overview][1.3]\n    - [Available Widgets][1.4]\n        - [Primitive Widgets][1.4.1]\n        - [Common Use Widgets][1.4.2]\n    - [Immediate Mode][1.5]\n        - [What is it?][1.5.1]\n        - [Why use it?][1.5.2]\n        - [Is Conrod Immediate or Retained?][1.5.3]\n    - [The Builder Pattern][1.6]\n2. [**Getting Started**][2]\n    - [Installing Rust and Cargo][2.1]\n    - [Running the Conrod Examples][2.2]\n3. [**Hello World**][3]\n    - [Creating a new project][3.1]\n    - [Conrod Setup][3.2]\n        -[Back ends][3.2.1]\n    - [Creating a Window][3.3]\n    - [Event Handling][3.4]\n4. **Using and Customising Themes**\n    - What is a `Theme`?\n    - Custom Themes\n    - Serializing Themes\n5. **Designing Custom Widgets (using the Widget trait)**\n    - The `Widget` trait\n    - The `widget_style!` macro\n    - The `builder_methods!` macro\n    - Making a `Button` widget\n6. **Custom Graphics and Window Backends**\n    - Demonstration of Backend Implementation (using glium and glutin)\n7. **Internals**\n    - The `Ui`'s Widget `Graph`\n    - `Ui::set_widgets` - How does it work?\n8. **FAQ**\n\n\n[1]:        ./chapter_1/index.html\n[1.1]:      ./chapter_1/index.html#a-brief-history\n[1.2]:      ./chapter_1/index.html#screenshots-and-videos\n[1.3]:      ./chapter_1/index.html#feature-overview\n[1.4]:      ./chapter_1/index.html#available-widgets\n[1.4.1]:    ./chapter_1/index.html#primitive-widgets\n[1.4.2]:    ./chapter_1/index.html#common-use-widgets\n[1.5]:      ./chapter_1/index.html#immediate-mode\n[1.5.1]:    ./chapter_1/index.html#what-is-it\n[1.5.2]:    ./chapter_1/index.html#why-use-it\n[1.5.3]:    ./chapter_1/index.html#is-conrod-immediate-or-retained\n[1.6]:      ./chapter_1/index.html#the-builder-pattern\n[2]:        ./chapter_2/index.html\n[2.1]:      ./chapter_2/index.html#installing-rust-and-cargo\n[2.2]:      ./chapter_2/index.html#running-the-conrod-examples\n[3]:        ./chapter_3/index.html\n[3.1]:      ./chapter_3/index.html#creating-a-new-project\n[3.2]:      ./chapter_3/index.html#setting-up-conrod\n[3.2.1]:    ./chapter_3/index.html#backends\n[3.3]:      ./chapter_3/index.html#creating-a-window\n[3.4]:      ./chapter_3/index.html#handling-events\n\n\n*/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/mod.rs","byte_start":90532,"byte_end":92849,"line_start":1,"line_end":68,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":408},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chapter_1","qualname":"::guide::chapter_1","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_1.rs","parent":null,"children":[],"decl_id":null,"docs":"**What is Conrod?**","sig":null,"attributes":[{"value":"!\n\n**What is Conrod?**\n\n\n## A Brief Summary\n\nConrod is a portable, 2D, [GUI][1] library for the [Rust programming language][2].\n\nIt provides an immediate-mode API that wraps a retained-mode widget state graph. This allows us to\nexpose a simple, robust and reactive interface while approaching the performance of traditional,\nretained GUI frameworks.\n\nWe provide a set of primitive and commonly useful widgets, along with a [Widget] API that allows\nfor designing new, custom widgets composed of unique logic and other widgets.\n\nWidgets are instantiated using the \"Builder\" aka \"Method Chaining\" pattern within an update loop.\nIn this sense, we can think of a Widget and its builder methods as a function with a highly\nflexible and readable set of arguments.\n\n\n## Screenshots and Videos\n\nIf you have an awesome looking GUI made with conrod, please send us a screenshot and we'll add it here :)\n\nHere's [a youtube demo](https://www.youtube.com/watch?v=n2UrjogA0j0) of the all widgets example.\n\nHere's [another youtube demo](https://www.youtube.com/watch?v=_ZXLCVibI8c) of conrod being used to create a basic synth editor.\n\n**A multimedia timeline widget.**\n\n<img src=\"http://imgur.com/34NEw90.png\" alt=\"timeline\" style=\"width:700px;\">\n\n**The [all_piston_window.rs example](https://github.com/PistonDevelopers/conrod/blob/master/backends/conrod_piston/examples/all_piston_window.rs).**\n\n<img src=\"http://i.imgur.com/xKXISdc.png\" alt=\"all_widgets.rs\" style=\"width:700px;\">\n\n**The [canvas.rs example](https://github.com/PistonDevelopers/conrod/blob/master/backends/conrod_glium/examples/canvas.rs).**\n\n<img src=\"http://i.imgur.com/YtjjEJX.png\" alt=\"canvas.rs\" style=\"width:700px;\">\n\n\n## Feature Overview\n\n- **Reactive** and **Immediate** API. Produce the UI from your application state in one place, rather than as a separate entity spread across callbacks, instantiation, updates and drawing.\n- A **Widget trait** to simplify the composition and design of widgets.\n- **Scrolling** that is opt-in, generalised and easy-to-use. Call `.scroll_kids(true)` on a widget and it will become a scrollable container for its children.\n- **Powerful layout and positioning**:\n    - Placement - `.middle()`, `.top_left_of(CANVAS)`, `.mid_right_with_margin(20.0)`, etc.\n    - Alignment - `.align_left()`, `.align_top_of(LABEL)`, etc.\n    - Relative - `.down(20.0)`, `.right_from(BUTTON, 40.0)`, `.x_y_relative(20.0, 42.0)`, etc.\n    - Absolute - `.x_y(6.0, 7.0)`\n    - Draggable pop-up / floating canvasses - `.floating(true)`.\n    - **WidgetMatrix** and **PositionMatrix** for instantiating a grid of widgets.\n- **[Theme]**s for unique style and layout defaults.\n- **[widget_ids!]** macro for easily and safely generating unique widget identifiers.\n- Generic over events and graphics backends - compatible with:\n    - [glutin][7], [sdl2][8] and [glfw][9] [**Window**][10] backends.\n    - [gfx][11], [glium][12] and raw [opengl][13] [**Graphics**][14] backends.\n- Provides a collection of commonly useful widgets.\n\n\n## Available Widgets\n\nThe widgets that are provided by conrod can be broken into two sets: [**primitive**][3] and [**common\nuse**][4].\n\n\n### Primitive Widgets\n\nPrimitive widgets are the fundamental graphical components in any conrod user interface. They are a\nspecial set of widgets from which all other widgets may be composed. For example, a `Button` widget\nmay be composed of one `Rectangle` primitive widget and one `Text` primitive widget. A\n`DropDownList` may be composed of *n* `Button` widgets, and in turn *n* `Rectangle` primitive\nwidgets and *n* `Text` primitive widgets.\n\nWhen drawing the widget graph to the screen, conrod *only* draws the primitive widgets. This allows\nwidget designers to create custom widgets by simply instantiating other widgets, without having to\ndirectly write any graphics code themselves. This also greatly simplifies the caching of common\nwidget state like text, positioning and styling as the primitive widgets take care of all of this\nautomatically.\n\nThe following are the primitive widgets provided by conrod:\n\n- **[Line]**\n- **[PointPath]**\n- Shapes:\n    - **[Circle]**\n    - **[Rectangle]**\n    - **[Oval]**\n    - **[Polygon]**\n- **[Text]** - automatic line-wrapping, line spacing, etc.\n- **[Image]**\n\nIf conrod is lacking a primitive widget that you require, please let us know! There are currently\nplans to allow for a user to design their own primitive widgets, however these will likely remain\nlow priority until requested.\n\n\n### Common Use Widgets\n\nCommon use widgets are simply widgets that are commonly required by GUIs. There is nothing special\nabout these widgets in the sense that they could just as easily be implemented in an external\ncrate by third-party users. However, their usage is common enough that we choose to distribute them\nwith conrod itself.\n\nThe following are the common use widgets provided by conrod:\n\n- **[BorderedRectangle]**\n- **[Button]**\n- **[Canvas]** - a container-like widget\n- **[DropDownList]**\n- **[EnvelopeEditor]**\n- **[Matrix]**\n- **[NumberDialer]**\n- **[PlotPath]**\n- **[Scrollbar]** - emits scroll events to some target scroll widget\n- **[Slider]**\n- **[Tabs]** - for easily switching between multiple [Canvas]ses with ease\n- **[TextBox]** - an editable one-line text field\n- **[TextEdit]** - an editable block of text\n- **[TitleBar]**\n- **[Toggle]**\n- **[XYPad]**\n\nThe following are planned, but not yet implemented:\n\n- [Menu Bar / Tool Bar](https://github.com/PistonDevelopers/conrod/issues/417)\n- [Right-click Context Menu](https://github.com/PistonDevelopers/conrod/issues/394)\n- [Graph / Chart](https://github.com/PistonDevelopers/conrod/issues/84)\n- [File/Directory Navigator](https://github.com/PistonDevelopers/conrod/issues/381)\n- [Advanced graph visualisation and control](https://github.com/PistonDevelopers/mush)\n\nIf you notice that we're missing important widgets, or if you have a widget that you feel would\nmake a nice addition to conrod, please let us know by leaving an [issue][5] or [pull request][6]!\nBe sure to check [issues with the widget\nlabel](https://github.com/PistonDevelopers/conrod/issues?q=is%3Aopen+is%3Aissue+label%3Awidget)\nfirst, as your desired widget may have already been requested.\n\n\n## \"Immediate Mode\"\n\n### What is it?\n\nThe term \"Immediate Mode\" describes a style of user interface API.\n\nIn an immediate mode GUI, widgets are instantiated using functions in an *update* or *draw* loop.\nThis is quite different to the more traditional \"retained mode\", where widget *types* are\nconstructed during the *setup* stage.\n\nImmediate mode encourages a less stateful, more data-driven design as the user interface is\ninstantiated as a *result* of the application state every frame or update. On the other hand,\nretained user interfaces tend to work the other way around, driving the application by sending\nevents or triggering callback functions upon user interaction.\n\n### Why use it?\n\nImmediate mode tends to be the easier style to use for highly dynamic interfaces and those that\nrequire frequent synchronisation with application state. This is because immediate widgets handle\nchanges in application state at the same place in which they are instantiated (during the update\nor draw stage). While retained interface logic is often divided up between instantiation, updating,\ndrawing and event handling, immediate interfaces aim to consolidate all UI related logic within one\nplace.\n\nHistorically, due to their statelessness and frequent re-instantiation, immediate mode interfaces\nhave been known to pay the price of performance for their convenience. Although retained interfaces\ncan be more tedious to maintain and synchronise with application state, they are often less CPU\nintensive as the majority of their state remains untouched following the application's setup stage.\n\n### Is Conrod Immediate or Retained?\n\nConrod aims to adopt the best of both worlds by providing an immediate mode API over a hidden,\nretained widget state graph. From the user's perspective conrod widgets tend to feel stateless, as\nthough they only exist for the lifetime of the scope in which they are instantiated. In actuality,\neach widget's state is cached (or \"retained\") within the `Ui`'s internal widget graph. This allows\nfor efficient re-use of allocations and the ability to easily defer the drawing of widgets to a\nstage that is more suited to the user's application. As a result, Conrod should be able to provide\nthe convenience of an immediate mode API alongside performance that approaches that of traditional,\nretained GUIs.\n\n\n## The Builder Pattern\n\nThe \"Builder Pattern\" describes the process of \"building\" a type by chaining together method calls.\nConrod uses this pattern within its API for widget instantiation. This pattern is perhaps easiest\nto grasp with an example.\n\nLet's say we have a `Button` widget. We want to make sure that a user may instantiate it with\nspecific dimensions, position, color, label, label font size and label color. A naiive constructor\nmight look like this:\n\n```ignore\nButton::new(dimensions,\n            position,\n            color::RED,\n            \"DONT PRESS\",\n            label_font_size,\n            label_color,\n            || do_stuff(),\n            BUTTON_ID,\n            &mut ui);\n```\n\nThe problem is that most of the time users will just want the `Button` to choose defaults straight\nfrom the `Ui`'s `Theme`, rather than specifying every parameter for every instance of a `Button`\nthemselves. We want parameters to be *optional*. Perhaps then, we should make optional parameters\ntake an `Option`?\n\n```ignore\nButton::new(Some(dimensions),\n            Some(position),\n            None,\n            \"DONT PRESS\",\n            None,\n            None,\n            Some(|| do_stuff()),\n            BUTTON_ID,\n            &mut ui);\n```\n\nAlthough the user no longer has to think about the values for parameters they don't care about,\nthis is still extremely verbose and the `None` parameters seem quite ambiguous.\n\nIn some languages, this problem might be solved using a combination of features called \"named\nparameters\" and \"default parameters\". If rust had these features, the above might look like this:\n\n```ignore\nButton::new(dimensions=dimensions,\n            position=position,\n            label=\"DONT PRESS\",\n            react=|| do_stuff(),\n            id=BUTTON_ID,\n            ui=&mut ui);\n```\n\nCertainly an improvement in conciseness and readability. Although these features are not available\nto us in Rust, there is a way in which we can emulate their behaviour - This is where the builder\npattern comes in.\n\nBy moving each parameter out of the `new` function args and into their own methods, we can treat\nmethods almost as though they are named parameters as in the above example. Here is what the above\nmight look like using the builder pattern:\n\n```ignore\nButton::new()\n    .dimensions(dimensions)\n    .position(position)\n    .label(\"DONT PRESS\")\n    .react(|| do_stuff())\n    .id(BUTTON_ID)\n    .ui(&mut ui);\n```\n\n\n*This is in fact the method of widget instantiation used by conrod, though with some slight\ndifferences in method naming (best to check the examples directory for a proper demo).*\n\nAlthough this certainly seems like the nicest solution from an API perspective, the\nattentive rustacean may notice that this requires extra work for the widget designer compared to\nthe previous examples. Previously, all work for widget instantiation was done within the `new`\nfunction. The builder pattern implementation introduces a few differences worth noticing:\n\n1. A method must be implemented on `Button` for every optional parameter.\n2. The `Button::new` function must return some type that can be treated as a set of `Option`\n   arguments which can be set as it is passed from builder method to builder method.\n3. There must be some method that indicates the end of building and the instantiation of the widget.\n\nIn Conrod, we are of the opinion that, in the common case, the extra work on behalf of the widget\ndesigners is worth the benefits gained by the users. However, we also make a significant effort to\naddress each of the above points best we can in order to reduce the workload of widget developers:\n\n1. We provide a [`builder_methods!`][builder_methods!] macro which reduces the boilerplate of builder method\n   implementation.\n2. In Conrod, widgets are treated as a set of arguments to their state, rather than containing\n   their own state themselves. This suits the immediate mode style of conrod, where widget state is\n   hidden and stored within the `Ui`.\n3. All Conrod widgets must take a unique identifier and a mutable reference to the `Ui`. We\n   consolidate this into a single `.set(ID, &mut ui)` method, which we also use as the indication\n   method to stop building and instantiate the widget within the `Ui`.\n\nAll of these points will be covered later in more detail within the widget implementation section\nof the guide.\n\n\n\n[1]:  https://en.wikipedia.org/wiki/Graphical_user_interface        \"Wikipedia - Graphical User Interface\"\n[2]:  https://www.rust-lang.org/                                    \"The Rust Programming Language\"\n[3]:  ./index.html#primitive-widgets                                \"Primitive Widgets\"\n[4]:  ./index.html#common-use-widgets                               \"Common Use Widgets\"\n[5]:  https://github.com/PistonDevelopers/conrod/issues             \"Conrod Github Issues\"\n[6]:  https://github.com/PistonDevelopers/conrod/pulls              \"Conrod Github Pull Requests\"\n[7]:  https://github.com/PistonDevelopers/glutin_window             \"glutin_window crate\"\n[8]:  https://github.com/PistonDevelopers/sdl2_window               \"sdl2_window crate\"\n[9]:  https://github.com/PistonDevelopers/glfw_window               \"glfw_window crate\"\n[10]: http://docs.piston.rs/piston/window/trait.Window.html         \"src Window trait\"\n[11]: https://github.com/PistonDevelopers/gfx_graphics              \"gfx_graphics crate\"\n[12]: https://github.com/PistonDevelopers/glium_graphics            \"glium_graphics crate\"\n[13]: https://github.com/PistonDevelopers/opengl_graphics           \"opengl_graphics crate\"\n[14]: http://docs.piston.rs/graphics/graphics/trait.Graphics.html   \"src Graphics trait\"\n\n[Widget]:               ../../widget/trait.Widget.html      \"Widget trait\"\n[Theme]:                ../../theme/struct.Theme.html       \"Theme struct\"\n[builder_methods!]:     ../../macro.builder_methods!.html   \"builder_methods! macro\"\n[widget_ids!]:          ../../macro.widget_ids!.html        \"widget_ids! macro\"\n\n[Line]:      ../../widget/primitive/line/struct.Line.html                 \"Line Widget\"\n[PointPath]: ../../widget/primitive/point_path/struct.PointPath.html      \"PointPath Widget\"\n[Circle]:    ../../widget/primitive/shape/circle/struct.Circle.html       \"Circle Widget\"\n[Rectangle]: ../../widget/primitive/shape/rectangle/struct.Rectangle.html \"Rectangle Widget\"\n[Oval]:      ../../widget/primitive/shape/oval/struct.Oval.html           \"Oval Widget\"\n[Polygon]:   ../../widget/primitive/shape/polygon/struct.Polygon.html     \"Polygon Widget\"\n[Text]:      ../../widget/primitive/text/struct.Text.html                 \"Text Widget\"\n[Image]:     ../../widget/primitive/image/struct.Image.html               \"Image Widget\"\n\n[BorderedRectangle]: ../../widget/bordered_rectangle/struct.BorderedRectangle.html \"BorderedRectangle Widget\"\n[Button]:            ../../widget/button/struct.Button.html                        \"Button Widget\"\n[Canvas]:            ../../widget/canvas/struct.Canvas.html                        \"Canvas Widget\"\n[DropDownList]:      ../../widget/drop_down_list/struct.DropDownList.html          \"DropDownList Widget\"\n[EnvelopeEditor]:    ../../widget/envelope_editor/struct.EnvelopeEditor.html       \"EnvelopeEditor Widget\"\n[NumberDialer]:      ../../widget/number_dialer/struct.NumberDialer.html           \"NumberDialer Widget\"\n[PlotPath]:          ../../widget/plot_path/struct.PlotPath.html                   \"PlotPath Widget\"\n[Scrollbar]:         ../../widget/scrollbar/struct.Scrollbar.html                  \"Scrollbar Widget\"\n[Slider]:            ../../widget/slider/struct.Slider.html                        \"Slider Widget\"\n[Tabs]:              ../../widget/tabs/struct.Tabs.html                            \"Tabs Widget\"\n[TextBox]:           ../../widget/text_box/struct.TextBox.html                     \"TextBox Widget\"\n[TextEdit]:          ../../widget/text_edit/struct.TextEdit.html                   \"TextBox Widget\"\n[TitleBar]:          ../../widget/title_bar/struct.TitleBar.html                   \"TitleBar Widget\"\n[Toggle]:            ../../widget/toggle/struct.Toggle.html                        \"Toggle Widget\"\n[Matrix]:            ../../widget/matrix/struct.Matrix.html                        \"Matrix Widget\"\n[XYPad]:             ../../widget/xy_pad/struct.XYPad.html                         \"XYPad Widget\"\n\n*/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_1.rs","byte_start":92909,"byte_end":109774,"line_start":1,"line_end":332,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_2.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chapter_2","qualname":"::guide::chapter_2","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_2.rs","parent":null,"children":[],"decl_id":null,"docs":"**Getting Started**","sig":null,"attributes":[{"value":"!\n\n**Getting Started**\n\n\nIn this chapter we'll make sure that your environment is setup correctly for using Conrod.\n\n\n## Installing Rust and Cargo\n\nConrod is a Rust library (aka crate), so you'll need Rust! Conrod tracks the stable branch, so you\ncan be assured that we'll always be compatible with the latest stable version of rustc.\n\nWe also rely on the Rust package manager [Cargo](https://crates.io/) for managing dependencies\nand hosting the latest version of conrod.\n\nThe easiest way to acquire both of these is by downloading the Rust installer from [the Rust\nhomepage][rust-lang]. This installer will install the latest stable version of both rustc and\ncargo.\n\nOnce installed, you can test that rustc and cargo are working by entering `rustc --version` and\n`cargo --version` into your command line.\n\nIf you're brand new to Rust, we recommend first checking out [The Official Rust Book], or at least\nkeeping it on hand as a reference. It also contains a [Getting Started][rust getting started] guide\nwith more details on installing Rust, which may be useful in the case that you run into any issues\nwith the above steps.\n\n\n## Running the Conrod Examples\n\nWe can test that everything is working by cloning the github repository and running the examples.\nFirst, open up the command line on your system and follow these steps:\n\n1. Clone the repo\n\n  ```txt\n  git clone https://github.com/PistonDevelopers/conrod.git\n  ```\n\n2. Change to the `conrod` directory that we just cloned\n\n  ```txt\n  cd conrod\n  ```\n\n3. Test that conrod builds without problems\n\n  ```txt\n  cargo build --release\n  ```\n\n4. Change to the `conrod_glium` backend directory (it has the most examples)\n\n  ```txt\n  cd backends/conrod_glium\n  ```\n\n5. Build and run the examples (with --release optimisations turned on)!\n\n  ```txt\n  cargo run --release --example all_winit_glium\n  cargo run --release --example canvas\n  cargo run --release --example primitives\n  cargo run --release --example text\n  ```\n\nIf you ran into any issues with these steps, please let us know by filing an issue at the Conrod\n[issue tracker]. Be sure to search for your issue first, as another user may have already\nencountered your problem.\n\nOtherwise, you're now ready to use conrod!\n\n[rust-lang]:                https://www.rust-lang.org/                          \"The Rust Homepage\"\n[The Official Rust Book]:   https://doc.rust-lang.org/book/                     \"The Official Rust Book\"\n[rust getting started]:     https://doc.rust-lang.org/book/getting-started.html \"Getting Started with Rust\"\n[issue tracker]:            https://github.com/PistonDevelopers/conrod/issues   \"Conrod issue tracker\"\n\n*/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_2.rs","byte_start":109776,"byte_end":112428,"line_start":1,"line_end":79,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_3.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chapter_3","qualname":"::guide::chapter_3","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_3.rs","parent":null,"children":[],"decl_id":null,"docs":"**Setting up a basic window using glium and winit**","sig":null,"attributes":[{"value":"!\n**Setting up a basic window using glium and winit**\n\nIn this chapter we'll get a \"hello world\" app up and running. \"Hello World\" is\nthe traditional greeting from the first program in a new language or\nenvironment. In this case, it'll just do exactly that: open a window that says\n\"Hello World\", but it'll introduce most of the key concepts behind Conrod.\n\n## Creating a New Project\n\nUse the command line or terminal to go to a directory that suits you, for\nexample on a mac: /Users/bob/Projects, or perhaps D:\\Projects on a PC, and use\ncargo to create a new project. I've called the project conrod_hw for hello\nworld, you can use any name. Type at the command line:\n\n```txt\ncargo new conrod_hw --bin\n```\n`--bin` tells cargo to build an executable project.\n\n If you now go into the project and run it with:\n\n```txt\ncd conrod_hw cargo run\n```\n\nyou'll probably see a fairly long and slow list of rust files being downloaded\nand compiled, then something like:\n\n```txt\n   Compiling conrod_hw v0.1.0\n   (file:///Users/declan/Projects/rust/conrod_hw)\n   Finished dev [unoptimized + debuginfo] target(s) in 0.34 secs\n   Running `target/debug/conrod_hw`\n   Hello, world!\n```\nIf you don't see these, you've got a problem with your Rust installation.\nReturn here once it is sorted out!\n\nCargo builds a default \"Hello World\" command line app when you ask it to\ncreate a new --bin project. In future, most of the crates that you've just\ncompiled won't need recompilation, and things will happen more quickly.\n\n## Setting up Cargo for Conrod\n\nTo use Conrod in your application, you need to tell your program to use it,\nand you need to tell Cargo to make it available to your programme. The program\nitself is in the `src` folder of your project, in the file called `main.rs`,\nand should look like this right now:\n\n```ignore\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nTo allow your programme to use conrod, you need to add a reference to the\nconrod crate, with:\n\n```ignore\n#[macro_use] extern crate conrod;\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nIf you try to run the above code, you'll get an error like:\n\n```txt\nerror[E0463]: can't find crate for \"conrod\"\n\n --> src/main.rs:1:1\n\nerror: aborting due to previous error(s)\n```\n\nRust doesn't know how to deal with the crate that your programme has called.\nIt needs to be added to the manifest for the project, in the  `cargo.toml`\nfile, which is in the root of the project. The file currently contains\nsomething like:\n\n```toml\n[package]\nname = \"conrod_hw\"\nversion = \"0.1.0\"\nauthors = [\"bobgates\"]\n\n[dependencies]\n```\n\nAdd `conrod = { version = \"0.55.0\", features = [\"glium\", \"winit\"] }` to the\n`[dependencies]` section.\n\nThis incantation needs a little explanation, because it specifies the\nbackends.\n\n### Backends\n\nConrod is designed as an IMGUI that can use a number of backends. It was\ninitially developed to support PistonWindow, but then had backends added for\nthe winit event crate, and the glium and gfx graphics backend crates. Lately,\nsupport for the SDL2 crate has also started to be added. The backends are\nhandled by conditional compilation in the conrod code. For simplicity, I'm\nspecifying the backend in `cargo.toml` because we then won't have to think\nabout it in the code itself. Alternatively, the application can be run using\ncargo \"features\" as described in the previous chapter.\n\n```txt\ncargo run --release --features \"winit glium\" --example all_winit_glium\n```\n\nAt the time of writing (September 2017), the winit and glium backend\ncombination seems to be the best supported, and its the one that I am familiar\nwith.\n\nWhen the program compiles, we're ready to build a UI (there will be  a\nwarning about macro use, but we'll be using macros soon).\n\n## Creating a Window\n\nThere is quite a lot to do for even an empty window, so let's get to it.\n\nI'm using the glium backend. [Glium](https://github.com/glium/glium) is a\ncross-platform, safe wrapper for OpenGL, written in Rust. It is listed as not-\nmaintained on Github, but limited maintenance is being undertaken by the\ndeveloper of Conrod. Glium has a very good, gentle\n[introduction](http://glium.github.io/glium/book/) to OpenGL - enough to\nconvince me that I really want Conrod to do the work for me!\n\nConrod makes Glium available through an export. Put the following line into\nthe code, near the top, to include it:\n\n```ignore\nuse conrod::backend::glium::glium::{self, Surface};\n```\n\n`Surface` is a trait required for glium, specifically for the call to\n`target.clear_color` which is coming later.\n\nThe first chunk of boilerplate creates an event loop, which will handle\ninteraction with the UI, then a window, then a context, then finally links the\nevent loop, window and context together into a display. The display is the\nhome for the UI, and is an OpenGL context provided by glium.\n\n```ignore\nconst WIDTH: u32 = 400;\nconst HEIGHT: u32 = 200;\n\nlet mut events_loop = glium::glutin::EventsLoop::new();\nlet window = glium::glutin::WindowBuilder::new()\n                .with_title(\"Hello Conrod\")\n                .with_dimensions(WIDTH, HEIGHT);\nlet context = glium::glutin::ContextBuilder::new()\n                .with_vsync(true)\n                .with_multisampling(4);\nlet display = glium::Display::new(window, context, &events_loop).unwrap();\n```\n\nNow create the UI itself. Conrod has a builder that contains and looks after\nthe UI for the user.\n\n```ignore\nlet mut ui = conrod::UiBuilder::new([WIDTH as f64, HEIGHT as f64]).build();\n```\n\n\nConrod can use graphics. It stores these in a map. The system needs the map,\neven though it doesn't contain anything at this time, so create it:\n\n```ignore\nlet image_map = conrod::image::Map::<glium::texture::Texture2d>::new();\n```\n\nFinally, Conrod needs to render its UI. It uses a renderer to do this, so\ncreate one:\n\n```ignore\nlet mut renderer = conrod::backend::glium::Renderer::new(&display).unwrap();\n```\n\nAs an Immediate Mode GUI, Conrod sits in the main loop of the program, drawing\nthe UI every time round the loop. Here's the main loop:\n\n```ignore\n'main: loop {\n    // Render the `Ui` and then display it on the screen.\n    if let Some(primitives) = ui.draw_if_changed() {\n        renderer.fill(&display, primitives, &image_map);\n        let mut target = display.draw();\n        target.clear_color(0.0, 1.0, 0.0, 1.0);\n        renderer.draw(&display, &mut target, &image_map).unwrap();\n        target.finish().unwrap();\n    }\n}\n```\n\nRight now, the program really doesn't do much. This is the minimum set of bits\nand pieces to get a window up on the screen. The UI has nothing in it, so the\ncall to `ui.draw_if_changed()` has nothing to do. The UI remembers whether\nthere is a need to draw itself, so it does not draw on every cycle of the main\nloop, only if things have changed.\n\n`target = display.draw()` starts drawing on the backbuffer. It returns a\nFrame, which the renderer can draw everything to. The first command to\n`target` is to `clear_color`. This takes fractional red, green and blue values\nbetween 0.0 and 1.0, and an alpha value, also between 0.0 and 1.0 and fills\nthe frame, in this case with bright green. The renderer is then asked to draw\nthe rest of the UI (ie nothing) to the frame, and finally, `target`, the\nframe, is told to finish. It stops the drawing, swaps the OpenGL buffers\n(putting the just drawn frame on the screen) and consumes the frame. The frame\ndocs are part of glium\n[here](https://docs.rs/glium/0.17.1/glium/struct.Frame.html).\n\n\nIf you've run this program, you'll have seen the single least useful output\never - a green block with a white \"menu bar\" that has nothing in it. Let's add\nat least something to see.\n\nAfter\n```ignore\nconst WIDTH: i32 = 400;\nconst HEIGHT: i32 = 640;\nlet mut ui = conrod::UiBuilder::new([WIDTH as f64, HEIGHT as f64]).build();\n```\n\nadd the code that will initiate and build the UI:\n\n```ignore\nwidget_ids!(struct Ids { text });\nlet ids = Ids::new(ui.widget_id_generator());\n```\n\n`widget_ids!` is, as its name suggests, a macro provided by conrod to create\nwidget ids. Conrod's primary data structure contains all the widgets, and uses\ntheir ids to keep track of them. The `widget_ids!` macro just provides a very\nquick and easy way of defining widget names (in this case just `text`) and\ngiving them ids.\n\nAfter defining the widget_ids, `Ids::new` creates the the widget structure.\n\nTo instantiate the widgets, insert the following code in the main loop, before\nthe rendering statement.\n\n```ignore\nlet ui = &mut ui.set_widgets();\n\n// \"Hello World!\" in the middle of the screen.\nwidget::Text::new(\"Hello World!\")\n    .middle_of(ui.window)\n    .color(conrod::color::WHITE)\n    .font_size(32)\n    .set(ids.text, ui);\n```\n\nIn the definition of the Ids struct above, only one widget was named: `text`.\nHere, first we instantiate all the widgets, using the `ui.set_widgets()` call.\nThen we write code to create each widget of the application. There is only one\nwidget in this application - it's a text widget, showing the text \"Hello\nWorld!\". It is defined to be positioned in the middle of the `ui.window`, with\ntext color of white, and font size of 32. Finally, the widget is bound to the\nUI, using `set(ids.text, ui)`\n\nThe UI code will now ensure that events are passed back from the UI, linked\nthrough the id, `ids.text`. A text widget doesn't respond to events, so\nthere's nothing more to do right now.\n\nExcept that if you compile the code right now, it fails with\n\n```txt\nerror[E0599]: no method named 'middle_of' found for type\nconrod::widget::Text<'_>' in the current scope\n\n  --> src/main.rs:89:18`\n\n   = help: items from traits can only be used if the trait is in scope`\n\n   = note: the following trait is implemented but not in scope, perhaps add a 'use' for it:`\n           candidate #1: 'use conrod::Positionable;'\n```\n\n\n`middle_of` is a Conrod trait, of the type `Positionable` and color is also a\ntrait of type 'Colorable'. To ensure that the program can find the trait, we\nneed to add to the `use conrod` line, as suggested in the error message. We\nalso need to define `widget' and the type of Widget, so add the following near\nthe top of the programme:\n```ignore\nuse conrod::{widget, Positionable, Colorable, Widget};\n```\n\nThere's one more thing we need to do. Conrod needs to load fonts before it can\nuse them. Some boilerplate in the early part of the programme can do this:\n\n```ignore\nlet assets = find_folder::Search::KidsThenParents(3, 5)\n    .for_folder(\"assets\")\n    .unwrap();\nlet font_path = assets.join(\"fonts/NotoSans/NotoSans-Regular.ttf\");\nui.fonts.insert_from_file(font_path).unwrap();\n```\n\nThe code uses the find_folder crate. Modify the Cargo.toml file for this\nproject by adding find_folder to the dependencies. Its current version at time\nof writing is 0.3.0:\n\n```toml\n[dependencies]\nconrod = {\n    version = \"0.55.0\",\n    features = [\"glium\", \"winit\"]\n}\nfind_folder=\"0.3.0\"\n```\n\nand reference the crate at the beginning of the file:\n```ignore\nextern crate find_folder;\n```\n\n`find_folder` and some Rust path handling generates the path to the font. It\nis in the folder `assets/fonts/NotoSans` and is called `NotoSans-Regular.ttf`.\nNotoSans is as font designed by\n[Google](https://fonts.google.com/specimen/Noto+Sans), and has an Apache\nLicense. It is available [here](https://noto-\nwebsite.storage.googleapis.com/pkgs/NotoSans-unhinted.zip), so download and\nput it in the appropriate folder. Make sure that folder and file names agree\non your computer and in your code.\n\nOn my mac, I now see this (it has an empty white header bar that is not\nvisible on this white web page):\n\n<img src=\"https://i.imgur.com/ECzjqdp.png\">\n\nNot quite what we want, yet.\n\n## Event Handling\n\nThe window is not getting all its furniture because its events are not being\nhandled. At its most simple, events can be handled by fetching them from the\n`event_loop` and dispatching them accordingly. Here's the code in the main\nloop:\n\n```ignore\nlet mut events = Vec::new();\nevents_loop.poll_events(|event| events.push(event));\n\nfor event in events{\n    match event {\n        glium::glutin::Event::WindowEvent { event, ..} => match event {\n            glium::glutin::WindowEvent::Closed |\n            glium::glutin::WindowEvent::KeyboardInput {\n                input: glium::glutin::KeyboardInput {\n                    virtual_keycode: Some(glium::glutin::VirtualKeyCode::Escape),\n                    ..\n                },\n                ..\n            } => break 'main,\n            _ => (),\n        },\n        _ => (),\n    }\n}\n```\n\nThe `glutin::EventsLoop` defined in the first line of code in `main` stores\nand returns events in the glutin format. We simply create a queue using a\nvector, and push all events onto the queue each time the main loop executes.\nThen, a `for` loop runs through the queued events, and executes a break from\nthe main loop if the event is a WindowEvent::Closed or a\nWindowEvent::KeyboardInput of Escape.\n\nBut that's enough. Our \"Hello World\" is finished for now.\n\n<img src=\"https://i.imgur.com/JgjvuSH.png\">\n\nActually, it isn't. If you open up your performance monitoring app (Activity\nMonitor on the Mac), you'll see that this simple app is running, in my case,\nat 100% of one CPU. The events loop is braindead - it simply checks to see if\nthere's an event, acts immediately then tries again. We can be a lot more\nsubtle, but it is going to take some code. Also, this app doesn't have to\nrespond to any of its own events, so they're not taken into account.\n\nFirst, let's add event handling for Conrod. Putting the following at the\nbeginning of the event for loop will take care of UI events:\n\n```ignore\nif let Some(event) = conrod::backend::winit::convert_event(\n    event.clone(),\n    &display\n) {\n    ui.handle_event(event);\n}\n```\n\n`ui.handle_event()` is the business end of Conrod - it takes events off the\nqueue, works out which widget they apply to and looks after dispatch, etc. The\nrest happens elsewhere, as we'll see in the next Chapter.\n\n\nThen there's some straightforward event boilerplate that most Conrod apps have\nsomewhere convenient. In this case, I'm going to put it into the same file as\n`fn main()'.\n\n```ignore\npub struct EventLoop {\n    ui_needs_update: bool,\n    last_update: std::time::Instant,\n}\n\nimpl EventLoop {\n    pub fn new() -> Self {\n        EventLoop { last_update: std::time::Instant::now(),\n                    ui_needs_update: true,\n                  }\n    }\n\n    /// Produce an iterator yielding all available events.\n    pub fn next(&mut self, events_loop: &mut glium::glutin::EventsLoop) ->\n                Vec<glium::glutin::Event> {\n\n        // We don't want to loop any faster than 60 FPS, so wait until it has been at least 16ms\n        // since the last yield.\n        let last_update = self.last_update;\n        let sixteen_ms = std::time::Duration::from_millis(16);\n        let duration_since_last_update = std::time::Instant::now().duration_since(last_update);\n        if duration_since_last_update < sixteen_ms {\n            std::thread::sleep(sixteen_ms - duration_since_last_update);\n        }\n\n        // Collect all pending events.\n        let mut events = Vec::new();\n        events_loop.poll_events(|event| events.push(event));\n\n        // If there are no events and the UI does not need updating, wait\n        // for the next event.\n        if events.is_empty() && !self.ui_needs_update {\n            events_loop.run_forever(|event| { events.push(event);\n                                    glium::glutin::ControlFlow::Break });\n        }\n\n        self.ui_needs_update = false;\n        self.last_update = std::time::Instant::now();\n\n        events\n    }\n\n    /// Notifies the event loop that the `Ui` requires another update whether\n    /// or not there are any pending events.\n    ///\n    /// This is primarily used on the occasion that some part of the UI is\n    /// still animating and requires further updates to do so.\n    pub fn needs_update(&mut self) {\n        self.ui_needs_update = true;\n    }\n```\n\n'EventLoop' is a simple structure that stores the time of the last update, and\na boolean that tells it whether it needs to update itself. It is implemented\nas an iterator that fetches items from the glutin::EventsLoop and returns them\nto the calling code, then goes to sleep for 16 ms, so as to produce about 60\nfps. There's also another function that tells the events loop that it needs an\nupdate.\n\nThe main events loop can now be changed. Insert a constructor for the event\nloop just before the 'main loop\n\n```ignore\nlet mut event_loop = EventLoop::new();\n```\n\nRemove the quick-and-dirty event queue introduced above\n\n```ignore\nlet mut events = Vec::new();\nevents_loop.poll_events(|event|events.push(event));\n```\n\nand change the event `for` loop to read from the `event_loop` that was\nconstructed above.\n\n```ignore\nfor event in event_loop.next(&mut events_loop){\n```\n\n`conrod_hw` is now taking 0% of available CPU. Much better!\n\n\nThis chapter has introduced the basic elements of a Conrod application: the\ngraphics framework, the event loop and the UI, but it hasn't gone beyond that.\nIt's time to take on something a little more complicated to show how to create\nthe UI on the fly, and respond to events in our own widgets.\n\nThe code produced in this chapter is available on the Conrod Github site\nwithin the examples.\n\n\n*/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/chapter_3.rs","byte_start":112430,"byte_end":129695,"line_start":1,"line_end":498,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":411},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"image","qualname":"::image","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":5037},{"krate":0,"index":5062},{"krate":0,"index":5060},{"krate":0,"index":5058},{"krate":0,"index":5055},{"krate":0,"index":5056},{"krate":0,"index":5051},{"krate":0,"index":5052},{"krate":0,"index":5049},{"krate":0,"index":5043},{"krate":0,"index":5040},{"krate":0,"index":414},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":427},{"krate":0,"index":436},{"krate":0,"index":441}],"decl_id":null,"docs":" A type used to manage a user's image data and map them to `Image` widgets:","sig":null,"attributes":[{"value":"! A type used to manage a user's image data and map them to `Image` widgets:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":129697,"byte_end":129775,"line_start":1,"line_end":1,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":129776,"byte_end":129779,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! - [Map](./struct.Map.html)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":129780,"byte_end":129810,"line_start":3,"line_end":3,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":5037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130148,"byte_end":130150,"line_start":14,"line_end":14,"column_start":12,"column_end":14},"name":"Id","qualname":"::image::Id","value":"","parent":null,"children":[],"decl_id":null,"docs":" Unique image identifier.","sig":null,"attributes":[{"value":"/ Unique image identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":129831,"byte_end":129859,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":129860,"byte_end":129863,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Throughout conrod, images are referred to via their unique `Id`. By referring to images via","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":129864,"byte_end":129959,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ `Id`s, conrod can remain agnostic of the actual image or texture types used to represent each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":129960,"byte_end":130057,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130058,"byte_end":130068,"line_start":12,"line_end":12,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130402,"byte_end":130405,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"Map","qualname":"::image::Map","value":"Map { trigger_redraw }","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"decl_id":null,"docs":" A type used to map the `widget::Id` of `Image` widgets to their associated `Img` data.","sig":null,"attributes":[{"value":"/ A type used to map the `widget::Id` of `Image` widgets to their associated `Img` data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130158,"byte_end":130248,"line_start":16,"line_end":16,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130249,"byte_end":130252,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The `image::Map` type is usually instantiated and loaded during the \"setup\" stage of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130253,"byte_end":130345,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ application before the main loop begins.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130346,"byte_end":130390,"line_start":19,"line_end":19,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130665,"byte_end":130679,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"name":"trigger_redraw","qualname":"::image::Map::trigger_redraw","value":"std::cell::Cell<bool>","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" Whether or not the `image::Map` will trigger a redraw the next time `Ui::draw` is called.","sig":null,"attributes":[{"value":"/ Whether or not the `image::Map` will trigger a redraw the next time `Ui::draw` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130461,"byte_end":130554,"line_start":23,"line_end":23,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130559,"byte_end":130562,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ This is automatically set to `true` when any method that takes `&mut self` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130567,"byte_end":130656,"line_start":25,"line_end":25,"column_start":5,"column_end":94}}]},{"kind":"Type","id":{"krate":0,"index":419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130812,"byte_end":130819,"line_start":30,"line_end":30,"column_start":10,"column_end":17},"name":"HashMap","qualname":"::image::HashMap","value":"fnv::FnvHashMap<Id, Img>","parent":null,"children":[],"decl_id":null,"docs":" The type of `std::collections::HashMap` with `fnv::FnvHasher` used within the `image::Map`.\n","sig":null,"attributes":[{"value":"/ The type of `std::collections::HashMap` with `fnv::FnvHasher` used within the `image::Map`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130707,"byte_end":130802,"line_start":29,"line_end":29,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":421},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130970,"byte_end":130976,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"NewIds","qualname":"::image::NewIds","value":"NewIds {  }","parent":null,"children":[{"krate":0,"index":422}],"decl_id":null,"docs":" An iterator yielding an `Id` for each new `Img` inserted into the `Map` via the `extend`\n method.\n","sig":null,"attributes":[{"value":"/ An iterator yielding an `Id` for each new `Img` inserted into the `Map` via the `extend`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130854,"byte_end":130946,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/ method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":130947,"byte_end":130958,"line_start":33,"line_end":33,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131240,"byte_end":131243,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<Img>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new, empty `image::Map`.\n","sig":null,"attributes":[{"value":"/ Construct a new, empty `image::Map`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131188,"byte_end":131228,"line_start":49,"line_end":49,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131698,"byte_end":131705,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Map<Img>>::get_mut","value":"fn (&mut self, id: Id) -> Option<&mut Img>","parent":null,"children":[],"decl_id":null,"docs":" Uniquely borrow the `Img` associated with the given widget.","sig":null,"attributes":[{"value":"/ Uniquely borrow the `Img` associated with the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131519,"byte_end":131582,"line_start":60,"line_end":60,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131587,"byte_end":131590,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Note: Calling this will trigger a redraw the next time `Ui::draw_if_changed` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131595,"byte_end":131686,"line_start":62,"line_end":62,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132131,"byte_end":132137,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"insert","qualname":"<Map<Img>>::insert","value":"fn (&mut self, img: Img) -> Id","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given image into the map, returning its associated `image::Id`. The user *must*\n store the returned `image::Id` in order to use, modify or remove the inserted image.","sig":null,"attributes":[{"value":"/ Inserts the given image into the map, returning its associated `image::Id`. The user *must*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131827,"byte_end":131922,"line_start":68,"line_end":68,"column_start":5,"column_end":100}},{"value":"/ store the returned `image::Id` in order to use, modify or remove the inserted image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131927,"byte_end":132015,"line_start":69,"line_end":69,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132020,"byte_end":132023,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Note: Calling this will trigger a redraw the next time `Ui::draw_if_changed` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132028,"byte_end":132119,"line_start":71,"line_end":71,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132572,"byte_end":132579,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"replace","qualname":"<Map<Img>>::replace","value":"fn (&mut self, id: Id, img: Img) -> Option<Img>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the given image in the map if it exists. Returns the image or None.","sig":null,"attributes":[{"value":"/ Replaces the given image in the map if it exists. Returns the image or None.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132376,"byte_end":132456,"line_start":81,"line_end":81,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132461,"byte_end":132464,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note: Calling this will trigger a redraw the next time `Ui::draw_if_changed` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132469,"byte_end":132560,"line_start":83,"line_end":83,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132979,"byte_end":132985,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map<Img>>::remove","value":"fn (&mut self, id: Id) -> Option<Img>","parent":null,"children":[],"decl_id":null,"docs":" Removes the given image from the map if it exists. Returns the image or None.","sig":null,"attributes":[{"value":"/ Removes the given image from the map if it exists. Returns the image or None.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132709,"byte_end":132790,"line_start":89,"line_end":89,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132795,"byte_end":132798,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Any future use of the given `image::Id` will be invalid.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132803,"byte_end":132863,"line_start":91,"line_end":91,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132868,"byte_end":132871,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Note: Calling this will trigger a redraw the next time `Ui::draw_if_changed` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":132876,"byte_end":132967,"line_start":93,"line_end":93,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":133358,"byte_end":133364,"line_start":103,"line_end":103,"column_start":12,"column_end":18},"name":"extend","qualname":"<Map<Img>>::extend","value":"fn <I> (&mut self, images: I) -> NewIds","parent":null,"children":[],"decl_id":null,"docs":" Insert each of the images yielded by the given iterator and produce an iterator yielding\n their generated `Ids` in the same order.","sig":null,"attributes":[{"value":"/ Insert each of the images yielded by the given iterator and produce an iterator yielding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":133101,"byte_end":133193,"line_start":99,"line_end":99,"column_start":5,"column_end":97}},{"value":"/ their generated `Ids` in the same order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":133198,"byte_end":133242,"line_start":100,"line_end":100,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":133247,"byte_end":133250,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Note: Calling this will trigger a redraw the next time `Ui::draw_if_changed` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":133255,"byte_end":133346,"line_start":102,"line_end":102,"column_start":5,"column_end":96}}]},{"kind":"Mod","id":{"krate":0,"index":443},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"input","qualname":"::input","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":491},{"krate":0,"index":612},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":5295},{"krate":0,"index":5311},{"krate":0,"index":5309},{"krate":0,"index":5305},{"krate":0,"index":5306},{"krate":0,"index":5303},{"krate":0,"index":5312},{"krate":0,"index":5333},{"krate":0,"index":5331},{"krate":0,"index":5329},{"krate":0,"index":5325},{"krate":0,"index":5326},{"krate":0,"index":646}],"decl_id":null,"docs":" This module contains all the logic for handling input events and providing them to widgets.","sig":null,"attributes":[{"value":"! This module contains all the logic for handling input events and providing them to widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134097,"byte_end":134192,"line_start":1,"line_end":1,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134193,"byte_end":134196,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! All user input is provided to the `Ui` in the form of `input::Input` events, which are received","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134197,"byte_end":134296,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"! via the `Ui::handle_event` method. These raw input events tend to be fairly low level. The `Ui`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134297,"byte_end":134396,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"! stores each of these `Input` events in it's `GlobalInput`, which keeps track of the state of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134397,"byte_end":134493,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"! input for the entire `Ui`. `GlobalInput` will also aggregate the low level events into higher","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134494,"byte_end":134591,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"! level ones. For instance, two events indicating that a mouse button was pressed then released","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134592,"byte_end":134689,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"! would cause a new `UiEvent::MouseClick` to be generated. This saves individual widgets from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134690,"byte_end":134785,"line_start":8,"line_end":8,"column_start":1,"column_end":96}},{"value":"! having to interpret these themselves, thus freeing them from also having to store input state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134786,"byte_end":134884,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134885,"byte_end":134888,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Whenever there's an update, all of the events that have occurred since the last update will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134889,"byte_end":134987,"line_start":11,"line_end":11,"column_start":1,"column_end":99}},{"value":"! available for widgets to process. `WidgetInput` is used to provide input events to a specific","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":134988,"byte_end":135085,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"! widget. It filters events that do not apply to the widget. All events provided by `WidgetIput`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135086,"byte_end":135184,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"! will have all coordinates in the widget's own local coordinate system, where `(0, 0)` is the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135185,"byte_end":135281,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"! middle of the widget's bounding `Rect`. `GlobalInput`, on the other hand, will never filter out","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135282,"byte_end":135381,"line_start":15,"line_end":15,"column_start":1,"column_end":100}},{"value":"! any events, and will always provide them with coordinates relative to the window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135382,"byte_end":135467,"line_start":16,"line_end":16,"column_start":1,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":444},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"state","qualname":"::input::state","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":5063},{"krate":0,"index":5076},{"krate":0,"index":5074},{"krate":0,"index":5070},{"krate":0,"index":5071},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457}],"decl_id":null,"docs":" Everything related to storing the state of user input.","sig":null,"attributes":[{"value":"! Everything related to storing the state of user input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":138740,"byte_end":138798,"line_start":1,"line_end":1,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":138799,"byte_end":138802,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This includes the state of any buttons on either the keyboard or the mouse, as well as the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":138803,"byte_end":138897,"line_start":3,"line_end":3,"column_start":1,"column_end":95}},{"value":"! position of the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":138898,"byte_end":138924,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":138925,"byte_end":138928,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It also includes which widgets, if any, are capturing the keyboard and mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":138929,"byte_end":139010,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139011,"byte_end":139014,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! This module exists mostly to support the `input::Provider` trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139015,"byte_end":139084,"line_start":8,"line_end":8,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":5063},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139492,"byte_end":139497,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"State","qualname":"::input::state::State","value":"State { mouse, touch, widget_capturing_keyboard, widget_capturing_mouse, widget_under_mouse, modifiers }","parent":null,"children":[{"krate":0,"index":5064},{"krate":0,"index":5065},{"krate":0,"index":5066},{"krate":0,"index":5067},{"krate":0,"index":5068},{"krate":0,"index":5069}],"decl_id":null,"docs":" Holds the current state of user input.","sig":null,"attributes":[{"value":"/ Holds the current state of user input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139199,"byte_end":139241,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139242,"byte_end":139245,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This includes the state of all buttons on the keyboard and mouse, as well as the position of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139246,"byte_end":139342,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139343,"byte_end":139357,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139358,"byte_end":139361,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ It also includes which widgets, if any, are capturing keyboard and mouse input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139362,"byte_end":139445,"line_start":23,"line_end":23,"column_start":1,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":5064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139549,"byte_end":139554,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"name":"mouse","qualname":"::input::state::State::mouse","value":"input::state::mouse::Mouse","parent":{"krate":0,"index":5063},"children":[],"decl_id":null,"docs":" Mouse position and button state.\n","sig":null,"attributes":[{"value":"/ Mouse position and button state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139504,"byte_end":139540,"line_start":26,"line_end":26,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":5065},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139615,"byte_end":139620,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"name":"touch","qualname":"::input::state::State::touch","value":"std::collections::HashMap<input::touch::Id, input::state::touch::Touch, std::hash::BuildHasherDefault<fnv::FnvHasher>>","parent":{"krate":0,"index":5063},"children":[],"decl_id":null,"docs":" All in-progress touch interactions.\n","sig":null,"attributes":[{"value":"/ All in-progress touch interactions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139567,"byte_end":139606,"line_start":28,"line_end":28,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":5066},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139751,"byte_end":139776,"line_start":31,"line_end":31,"column_start":9,"column_end":34},"name":"widget_capturing_keyboard","qualname":"::input::state::State::widget_capturing_keyboard","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":5063},"children":[],"decl_id":null,"docs":" Which widget, if any, is currently capturing the keyboard\n","sig":null,"attributes":[{"value":"/ Which widget, if any, is currently capturing the keyboard","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139681,"byte_end":139742,"line_start":30,"line_end":30,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":5067},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139869,"byte_end":139891,"line_start":33,"line_end":33,"column_start":9,"column_end":31},"name":"widget_capturing_mouse","qualname":"::input::state::State::widget_capturing_mouse","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":5063},"children":[],"decl_id":null,"docs":" Which widget, if any, is currently capturing the mouse\n","sig":null,"attributes":[{"value":"/ Which widget, if any, is currently capturing the mouse","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139802,"byte_end":139860,"line_start":32,"line_end":32,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":5068},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140121,"byte_end":140139,"line_start":38,"line_end":38,"column_start":9,"column_end":27},"name":"widget_under_mouse","qualname":"::input::state::State::widget_under_mouse","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":5063},"children":[],"decl_id":null,"docs":" The widget that is currently under the mouse cursor.","sig":null,"attributes":[{"value":"/ The widget that is currently under the mouse cursor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139917,"byte_end":139973,"line_start":34,"line_end":34,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139978,"byte_end":139981,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ If the mouse is currently over multiple widgets, this index will represent the top-most,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":139986,"byte_end":140078,"line_start":36,"line_end":36,"column_start":5,"column_end":97}},{"value":"/ non-graphic-child widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140083,"byte_end":140112,"line_start":37,"line_end":37,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":5069},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140218,"byte_end":140227,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"modifiers","qualname":"::input::state::State::modifiers","value":"piston_input::keyboard::ModifierKey","parent":{"krate":0,"index":5063},"children":[],"decl_id":null,"docs":" Which modifier keys are being held down.\n","sig":null,"attributes":[{"value":"/ Which modifier keys are being held down.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140165,"byte_end":140209,"line_start":39,"line_end":39,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140310,"byte_end":140313,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<State>::new","value":"fn () -> State","parent":null,"children":[],"decl_id":null,"docs":" Returns a fresh new input state\n","sig":null,"attributes":[{"value":"/ Returns a fresh new input state","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140263,"byte_end":140298,"line_start":45,"line_end":45,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140707,"byte_end":140718,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<State>::relative_to","value":"fn (mut self, xy: Point) -> State","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the input::State relative to the given `position::Point`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the input::State relative to the given `position::Point`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140617,"byte_end":140695,"line_start":57,"line_end":57,"column_start":5,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140933,"byte_end":140938,"line_start":67,"line_end":67,"column_start":9,"column_end":14},"name":"touch","qualname":"::input::state::touch","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":5078},{"krate":0,"index":5090},{"krate":0,"index":5088},{"krate":0,"index":5086},{"krate":0,"index":5082},{"krate":0,"index":5083},{"krate":0,"index":5091},{"krate":0,"index":5103},{"krate":0,"index":5101},{"krate":0,"index":5099},{"krate":0,"index":5095},{"krate":0,"index":5096}],"decl_id":null,"docs":" Touch specific state.\n","sig":null,"attributes":[{"value":"/ Touch specific state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140899,"byte_end":140924,"line_start":66,"line_end":66,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141106,"byte_end":141111,"line_start":73,"line_end":73,"column_start":16,"column_end":21},"name":"Start","qualname":"::input::state::touch::Start","value":"Start { time, xy, widget }","parent":null,"children":[{"krate":0,"index":5079},{"krate":0,"index":5080},{"krate":0,"index":5081}],"decl_id":null,"docs":" State stored about the start of a `Touch` interaction.\n","sig":null,"attributes":[{"value":"/ State stored about the start of a `Touch` interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140987,"byte_end":141045,"line_start":71,"line_end":71,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":5079},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141175,"byte_end":141179,"line_start":75,"line_end":75,"column_start":13,"column_end":17},"name":"time","qualname":"::input::state::touch::Start::time","value":"std::time::Instant","parent":{"krate":0,"index":5078},"children":[],"decl_id":null,"docs":" The time at which the `Touch` began.\n","sig":null,"attributes":[{"value":"/ The time at which the `Touch` began.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141122,"byte_end":141162,"line_start":74,"line_end":74,"column_start":9,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":5080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141262,"byte_end":141264,"line_start":77,"line_end":77,"column_start":13,"column_end":15},"name":"xy","qualname":"::input::state::touch::Start::xy","value":"[f64; 2]","parent":{"krate":0,"index":5078},"children":[],"decl_id":null,"docs":" The position at which the touch began.\n","sig":null,"attributes":[{"value":"/ The position at which the touch began.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141207,"byte_end":141249,"line_start":76,"line_end":76,"column_start":9,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":5081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141447,"byte_end":141453,"line_start":81,"line_end":81,"column_start":13,"column_end":19},"name":"widget","qualname":"::input::state::touch::Start::widget","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":5078},"children":[],"decl_id":null,"docs":" The widget under the beginning of the touch if there was one.","sig":null,"attributes":[{"value":"/ The widget under the beginning of the touch if there was one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141281,"byte_end":141346,"line_start":78,"line_end":78,"column_start":9,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141355,"byte_end":141358,"line_start":79,"line_end":79,"column_start":9,"column_end":12}},{"value":"/ This widget captures the `Touch` input source for its duration.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141367,"byte_end":141434,"line_start":80,"line_end":80,"column_start":9,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":5091},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141606,"byte_end":141611,"line_start":86,"line_end":86,"column_start":16,"column_end":21},"name":"Touch","qualname":"::input::state::touch::Touch","value":"Touch { start, xy, widget }","parent":null,"children":[{"krate":0,"index":5092},{"krate":0,"index":5093},{"krate":0,"index":5094}],"decl_id":null,"docs":" All state stored for a `Touch` interaction in progress.\n","sig":null,"attributes":[{"value":"/ All state stored for a `Touch` interaction in progress.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141486,"byte_end":141545,"line_start":84,"line_end":84,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":5092},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141676,"byte_end":141681,"line_start":88,"line_end":88,"column_start":13,"column_end":18},"name":"start","qualname":"::input::state::touch::Touch::start","value":"input::state::touch::Start","parent":{"krate":0,"index":5091},"children":[],"decl_id":null,"docs":" The `Start` of the touch interaction.\n","sig":null,"attributes":[{"value":"/ The `Start` of the touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141622,"byte_end":141663,"line_start":87,"line_end":87,"column_start":9,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":5093},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141770,"byte_end":141772,"line_start":90,"line_end":90,"column_start":13,"column_end":15},"name":"xy","qualname":"::input::state::touch::Touch::xy","value":"[f64; 2]","parent":{"krate":0,"index":5091},"children":[],"decl_id":null,"docs":" The last recorded position of the finger on the window.\n","sig":null,"attributes":[{"value":"/ The last recorded position of the finger on the window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141698,"byte_end":141757,"line_start":89,"line_end":89,"column_start":9,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":5094},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141841,"byte_end":141847,"line_start":92,"line_end":92,"column_start":13,"column_end":19},"name":"widget","qualname":"::input::state::touch::Touch::widget","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":5091},"children":[],"decl_id":null,"docs":" The widget currently being touched.\n","sig":null,"attributes":[{"value":"/ The widget currently being touched.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141789,"byte_end":141828,"line_start":91,"line_end":91,"column_start":9,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":457},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141913,"byte_end":141918,"line_start":98,"line_end":98,"column_start":9,"column_end":14},"name":"mouse","qualname":"::input::state::mouse","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":5104},{"krate":0,"index":5115},{"krate":0,"index":5113},{"krate":0,"index":5111},{"krate":0,"index":5107},{"krate":0,"index":5108},{"krate":0,"index":5116},{"krate":0,"index":5131},{"krate":0,"index":5129},{"krate":0,"index":5127},{"krate":0,"index":5123},{"krate":0,"index":5124},{"krate":0,"index":5132},{"krate":0,"index":5144},{"krate":0,"index":5141},{"krate":0,"index":5139},{"krate":0,"index":5135},{"krate":0,"index":5136},{"krate":0,"index":5145},{"krate":0,"index":5148},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":471},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":487}],"decl_id":null,"docs":" Mouse specific state.\n","sig":null,"attributes":[{"value":"/ Mouse specific state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":141879,"byte_end":141904,"line_start":97,"line_end":97,"column_start":1,"column_end":26}}]},{"kind":"Const","id":{"krate":0,"index":462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142104,"byte_end":142115,"line_start":107,"line_end":107,"column_start":15,"column_end":26},"name":"NUM_BUTTONS","qualname":"::input::state::mouse::NUM_BUTTONS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The max total number of buttons on a mouse.\n","sig":null,"attributes":[{"value":"/ The max total number of buttons on a mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142042,"byte_end":142089,"line_start":106,"line_end":106,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142266,"byte_end":142271,"line_start":111,"line_end":111,"column_start":16,"column_end":21},"name":"Mouse","qualname":"::input::state::mouse::Mouse","value":"Mouse { buttons, xy }","parent":null,"children":[{"krate":0,"index":5105},{"krate":0,"index":5106}],"decl_id":null,"docs":" The state of the `Mouse`, including it's position and button states.\n","sig":null,"attributes":[{"value":"/ The state of the `Mouse`, including it's position and button states.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142133,"byte_end":142205,"line_start":109,"line_end":109,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":5105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142485,"byte_end":142492,"line_start":116,"line_end":116,"column_start":13,"column_end":20},"name":"buttons","qualname":"::input::state::mouse::Mouse::buttons","value":"input::state::mouse::ButtonMap","parent":{"krate":0,"index":5104},"children":[],"decl_id":null,"docs":" A map that stores the up/down state of each button.","sig":null,"attributes":[{"value":"/ A map that stores the up/down state of each button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142282,"byte_end":142337,"line_start":112,"line_end":112,"column_start":9,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142346,"byte_end":142349,"line_start":113,"line_end":113,"column_start":9,"column_end":12}},{"value":"/ If the button is down, then it stores the position of the mouse when the button was first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142358,"byte_end":142451,"line_start":114,"line_end":114,"column_start":9,"column_end":102}},{"value":"/ pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142460,"byte_end":142472,"line_start":115,"line_end":115,"column_start":9,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":5106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142564,"byte_end":142566,"line_start":118,"line_end":118,"column_start":13,"column_end":15},"name":"xy","qualname":"::input::state::mouse::Mouse::xy","value":"[f64; 2]","parent":{"krate":0,"index":5104},"children":[],"decl_id":null,"docs":" The current position of the mouse.\n","sig":null,"attributes":[{"value":"/ The current position of the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142513,"byte_end":142551,"line_start":117,"line_end":117,"column_start":9,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5117},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142752,"byte_end":142754,"line_start":125,"line_end":125,"column_start":9,"column_end":11},"name":"Up","qualname":"::input::state::mouse::ButtonPosition::Up","value":"ButtonPosition::Up","parent":{"krate":0,"index":5116},"children":[],"decl_id":null,"docs":" The button is up (i.e. pressed).\n","sig":null,"attributes":[{"value":"/ The button is up (i.e. pressed).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142707,"byte_end":142743,"line_start":124,"line_end":124,"column_start":9,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5119},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142901,"byte_end":142905,"line_start":128,"line_end":128,"column_start":9,"column_end":13},"name":"Down","qualname":"::input::state::mouse::ButtonPosition::Down","value":"ButtonPosition::Down(Point, Option<widget::Id>)","parent":{"krate":0,"index":5116},"children":[],"decl_id":null,"docs":" The button is down and was originally pressed down at the given `Point` over the widget\n at the given widget::Id.\n","sig":null,"attributes":[{"value":"/ The button is down and was originally pressed down at the given `Point` over the widget","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142764,"byte_end":142855,"line_start":126,"line_end":126,"column_start":9,"column_end":100}},{"value":"/ at the given widget::Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142864,"byte_end":142892,"line_start":127,"line_end":127,"column_start":9,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":5116},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142682,"byte_end":142696,"line_start":123,"line_end":123,"column_start":14,"column_end":28},"name":"ButtonPosition","qualname":"::input::state::mouse::ButtonPosition","value":"ButtonPosition::{Up, Down}","parent":null,"children":[{"krate":0,"index":5117},{"krate":0,"index":5119}],"decl_id":null,"docs":" Whether the button is up or down.\n","sig":null,"attributes":[{"value":"/ Whether the button is up or down.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142586,"byte_end":142623,"line_start":121,"line_end":121,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5132},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143157,"byte_end":143166,"line_start":135,"line_end":135,"column_start":16,"column_end":25},"name":"ButtonMap","qualname":"::input::state::mouse::ButtonMap","value":"ButtonMap {  }","parent":null,"children":[{"krate":0,"index":5133}],"decl_id":null,"docs":" Stores the state of all mouse buttons.","sig":null,"attributes":[{"value":"/ Stores the state of all mouse buttons.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142945,"byte_end":142987,"line_start":131,"line_end":131,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":142992,"byte_end":142995,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ If the mouse button is down, it stores the position of the mouse when the button was pressed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143000,"byte_end":143096,"line_start":133,"line_end":133,"column_start":5,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":5145},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143309,"byte_end":143323,"line_start":141,"line_end":141,"column_start":16,"column_end":30},"name":"PressedButtons","qualname":"::input::state::mouse::PressedButtons","value":"PressedButtons {  }","parent":null,"children":[{"krate":0,"index":5147}],"decl_id":null,"docs":" An iterator yielding all pressed buttons.\n","sig":null,"attributes":[{"value":"/ An iterator yielding all pressed buttons.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143227,"byte_end":143272,"line_start":139,"line_end":139,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143495,"byte_end":143498,"line_start":147,"line_end":147,"column_start":16,"column_end":19},"name":"new","qualname":"<Mouse>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new default `Mouse`.\n","sig":null,"attributes":[{"value":"/ Construct a new default `Mouse`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143443,"byte_end":143479,"line_start":146,"line_end":146,"column_start":9,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143779,"byte_end":143790,"line_start":158,"line_end":158,"column_start":16,"column_end":27},"name":"relative_to","qualname":"<ButtonPosition>::relative_to","value":"fn (self, xy: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If the mouse button is down, return a new one with position relative to the given `xy`.\n","sig":null,"attributes":[{"value":"/ If the mouse button is down, return a new one with position relative to the given `xy`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143672,"byte_end":143763,"line_start":157,"line_end":157,"column_start":9,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144104,"byte_end":144111,"line_start":167,"line_end":167,"column_start":16,"column_end":23},"name":"is_down","qualname":"<ButtonPosition>::is_down","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the `ButtonPosition` down.\n","sig":null,"attributes":[{"value":"/ Is the `ButtonPosition` down.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144055,"byte_end":144088,"line_start":166,"line_end":166,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144315,"byte_end":144320,"line_start":175,"line_end":175,"column_start":16,"column_end":21},"name":"is_up","qualname":"<ButtonPosition>::is_up","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the `ButtonPosition` up.\n","sig":null,"attributes":[{"value":"/ Is the `ButtonPosition` up.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144268,"byte_end":144299,"line_start":174,"line_end":174,"column_start":9,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144651,"byte_end":144658,"line_start":184,"line_end":184,"column_start":16,"column_end":23},"name":"if_down","qualname":"<ButtonPosition>::if_down","value":"fn (&self) -> Option<(Point, Option<widget::Id>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the position at which the button was pressed along with the widget that was\n under the mouse at the time of pressing if the position is `Down`.\n","sig":null,"attributes":[{"value":"/ Returns the position at which the button was pressed along with the widget that was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144469,"byte_end":144556,"line_start":182,"line_end":182,"column_start":9,"column_end":96}},{"value":"/ under the mouse at the time of pressing if the position is `Down`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144565,"byte_end":144635,"line_start":183,"line_end":183,"column_start":9,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144951,"byte_end":144961,"line_start":192,"line_end":192,"column_start":16,"column_end":26},"name":"xy_if_down","qualname":"<ButtonPosition>::xy_if_down","value":"fn (&self) -> Option<Point>","parent":null,"children":[],"decl_id":null,"docs":" Returns the position at which the button was pressed if it's down.\n","sig":null,"attributes":[{"value":"/ Returns the position at which the button was pressed if it's down.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":144865,"byte_end":144935,"line_start":191,"line_end":191,"column_start":9,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145234,"byte_end":145237,"line_start":204,"line_end":204,"column_start":16,"column_end":19},"name":"new","qualname":"<ButtonMap>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new button map with all states set to `None`\n","sig":null,"attributes":[{"value":"/ Returns a new button map with all states set to `None`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145160,"byte_end":145218,"line_start":203,"line_end":203,"column_start":9,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145446,"byte_end":145457,"line_start":211,"line_end":211,"column_start":16,"column_end":27},"name":"relative_to","qualname":"<ButtonMap>::relative_to","value":"fn (self, xy: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the ButtonMap relative to the given `Point`\n","sig":null,"attributes":[{"value":"/ Returns a copy of the ButtonMap relative to the given `Point`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145365,"byte_end":145430,"line_start":210,"line_end":210,"column_start":9,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145755,"byte_end":145759,"line_start":219,"line_end":219,"column_start":16,"column_end":20},"name":"left","qualname":"<ButtonMap>::left","value":"fn (&self) -> &ButtonPosition","parent":null,"children":[],"decl_id":null,"docs":" The state of the left mouse button.\n","sig":null,"attributes":[{"value":"/ The state of the left mouse button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145700,"byte_end":145739,"line_start":218,"line_end":218,"column_start":9,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145896,"byte_end":145902,"line_start":224,"line_end":224,"column_start":16,"column_end":22},"name":"middle","qualname":"<ButtonMap>::middle","value":"fn (&self) -> &ButtonPosition","parent":null,"children":[],"decl_id":null,"docs":" The state of the middle mouse button.\n","sig":null,"attributes":[{"value":"/ The state of the middle mouse button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145839,"byte_end":145880,"line_start":223,"line_end":223,"column_start":9,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146040,"byte_end":146045,"line_start":229,"line_end":229,"column_start":16,"column_end":21},"name":"right","qualname":"<ButtonMap>::right","value":"fn (&self) -> &ButtonPosition","parent":null,"children":[],"decl_id":null,"docs":" The state of the right mouse button.\n","sig":null,"attributes":[{"value":"/ The state of the right mouse button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145984,"byte_end":146024,"line_start":228,"line_end":228,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146187,"byte_end":146192,"line_start":234,"line_end":234,"column_start":16,"column_end":21},"name":"press","qualname":"<ButtonMap>::press","value":"fn (&mut self, button: Button, xy: Point, widget: Option<widget::Id>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the `Button` in the `Down` position.\n","sig":null,"attributes":[{"value":"/ Sets the `Button` in the `Down` position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146126,"byte_end":146171,"line_start":233,"line_end":233,"column_start":9,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146424,"byte_end":146431,"line_start":239,"line_end":239,"column_start":16,"column_end":23},"name":"release","qualname":"<ButtonMap>::release","value":"fn (&mut self, button: Button) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set's the `Button` in the `Up` position.\n","sig":null,"attributes":[{"value":"/ Set's the `Button` in the `Up` position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146364,"byte_end":146408,"line_start":238,"line_end":238,"column_start":9,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146691,"byte_end":146698,"line_start":245,"line_end":245,"column_start":16,"column_end":23},"name":"pressed","qualname":"<ButtonMap>::pressed","value":"fn (&self) -> PressedButtons","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding all pressed mouse buttons along with the location at which they\n were originally pressed.\n","sig":null,"attributes":[{"value":"/ An iterator yielding all pressed mouse buttons along with the location at which they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146550,"byte_end":146638,"line_start":243,"line_end":243,"column_start":9,"column_end":97}},{"value":"/ were originally pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":146647,"byte_end":146675,"line_start":244,"line_end":244,"column_start":9,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"widget","qualname":"::input::widget","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":5151},{"krate":0,"index":5156},{"krate":0,"index":5159},{"krate":0,"index":5170},{"krate":0,"index":5167},{"krate":0,"index":5164},{"krate":0,"index":5172},{"krate":0,"index":5179},{"krate":0,"index":5182},{"krate":0,"index":5185},{"krate":0,"index":5188},{"krate":0,"index":5191},{"krate":0,"index":5194},{"krate":0,"index":5198},{"krate":0,"index":5201},{"krate":0,"index":5204},{"krate":0,"index":5207},{"krate":0,"index":5210},{"krate":0,"index":5213},{"krate":0,"index":5217},{"krate":0,"index":5220},{"krate":0,"index":5223},{"krate":0,"index":5226},{"krate":0,"index":5229},{"krate":0,"index":5232},{"krate":0,"index":5235},{"krate":0,"index":5238},{"krate":0,"index":5242},{"krate":0,"index":5245},{"krate":0,"index":5248},{"krate":0,"index":5251},{"krate":0,"index":5254},{"krate":0,"index":5257},{"krate":0,"index":5261},{"krate":0,"index":5264},{"krate":0,"index":5267},{"krate":0,"index":5270},{"krate":0,"index":5273},{"krate":0,"index":499},{"krate":0,"index":511},{"krate":0,"index":516},{"krate":0,"index":520},{"krate":0,"index":526},{"krate":0,"index":530},{"krate":0,"index":536},{"krate":0,"index":542},{"krate":0,"index":548},{"krate":0,"index":552},{"krate":0,"index":556},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":568},{"krate":0,"index":572},{"krate":0,"index":576},{"krate":0,"index":580},{"krate":0,"index":584},{"krate":0,"index":588},{"krate":0,"index":592},{"krate":0,"index":596},{"krate":0,"index":600},{"krate":0,"index":604},{"krate":0,"index":608}],"decl_id":null,"docs":" Contains all the logic for filtering input events and making them relative to widgets.","sig":null,"attributes":[{"value":"! Contains all the logic for filtering input events and making them relative to widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":148995,"byte_end":149085,"line_start":1,"line_end":1,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149086,"byte_end":149089,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The core of this module is the `Widget::for_widget` method, which creates an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149090,"byte_end":149170,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"! `InputProvider` that provides input events for a specific widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149171,"byte_end":149240,"line_start":4,"line_end":4,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":5151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149676,"byte_end":149682,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Widget","qualname":"::input::widget::Widget","value":"Widget {  }","parent":null,"children":[{"krate":0,"index":5153},{"krate":0,"index":5154},{"krate":0,"index":5155}],"decl_id":null,"docs":" Provides only events and input state that are relevant to a specific widget.","sig":null,"attributes":[{"value":"/ Provides only events and input state that are relevant to a specific widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149308,"byte_end":149388,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149389,"byte_end":149392,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This type can be produced by calling the `UiCell::input` method with the target widget's","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149393,"byte_end":149485,"line_start":15,"line_end":15,"column_start":1,"column_end":93}},{"value":"/ `widget::Id`. This is particularly useful","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149486,"byte_end":149531,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149532,"byte_end":149535,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Unlike `input::Global`, `input::Widget` methods are tailored to the widget for which they are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149536,"byte_end":149633,"line_start":18,"line_end":18,"column_start":1,"column_end":98}},{"value":"/ produced.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149634,"byte_end":149647,"line_start":19,"line_end":19,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5159},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149878,"byte_end":149883,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Mouse","qualname":"::input::widget::Mouse","value":"Mouse { buttons }","parent":null,"children":[{"krate":0,"index":5161},{"krate":0,"index":5162},{"krate":0,"index":5163}],"decl_id":null,"docs":" A view of the `input::state::Mouse` that is specific to a single widget.\n","sig":null,"attributes":[{"value":"/ A view of the `input::state::Mouse` that is specific to a single widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149760,"byte_end":149836,"line_start":27,"line_end":27,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":5163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149980,"byte_end":149987,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"name":"buttons","qualname":"::input::widget::Mouse::buttons","value":"&'a input::state::mouse::ButtonMap","parent":{"krate":0,"index":5159},"children":[],"decl_id":null,"docs":" The state of each `MouseButton`.\n","sig":null,"attributes":[{"value":"/ The state of each `MouseButton`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":149935,"byte_end":149971,"line_start":32,"line_end":32,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150516,"byte_end":150522,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"Events","qualname":"::input::widget::Events","value":"Events {  }","parent":null,"children":[{"krate":0,"index":5174},{"krate":0,"index":5175},{"krate":0,"index":5176},{"krate":0,"index":5177},{"krate":0,"index":5178}],"decl_id":null,"docs":" An iterator yielding all events that are relevant to a specific widget.","sig":null,"attributes":[{"value":"/ An iterator yielding all events that are relevant to a specific widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150028,"byte_end":150103,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150104,"byte_end":150107,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ All events provided by this Iterator will be filtered in accordance with input capturing. For","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150108,"byte_end":150205,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/ example: If the widget does not capture the mouse, it *will not* receive any mouse-related","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150206,"byte_end":150300,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ events. If the widget captures the keyboard it *will* receive all keyboard events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150301,"byte_end":150387,"line_start":40,"line_end":40,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150388,"byte_end":150391,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ All mouse events will have their coordinates relative to the middle of the widget's `Rect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150392,"byte_end":150487,"line_start":42,"line_end":42,"column_start":1,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":5182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150832,"byte_end":150839,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"Presses","qualname":"::input::widget::Presses","value":"Presses {  }","parent":null,"children":[{"krate":0,"index":5184}],"decl_id":null,"docs":" An `Iterator` yielding all button presses occuring within the given sequence of\n `widget::Event`s.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all button presses occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150698,"byte_end":150781,"line_start":52,"line_end":52,"column_start":1,"column_end":84}},{"value":"/ `widget::Event`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150782,"byte_end":150803,"line_start":53,"line_end":53,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":5188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151002,"byte_end":151014,"line_start":61,"line_end":61,"column_start":12,"column_end":24},"name":"MousePresses","qualname":"::input::widget::MousePresses","value":"MousePresses {  }","parent":null,"children":[{"krate":0,"index":5190}],"decl_id":null,"docs":" An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses`.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all mouse button presses occuring within the given sequence of `Presses`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":150873,"byte_end":150973,"line_start":59,"line_end":59,"column_start":1,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":5194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151214,"byte_end":151232,"line_start":68,"line_end":68,"column_start":12,"column_end":30},"name":"MouseButtonPresses","qualname":"::input::widget::MouseButtonPresses","value":"MouseButtonPresses {  }","parent":null,"children":[{"krate":0,"index":5196},{"krate":0,"index":5197}],"decl_id":null,"docs":" An `Iterator` yielding all mouse button presses occuring within the given sequence of\n `Presses` for some specific mouse button.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all mouse button presses occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151050,"byte_end":151139,"line_start":65,"line_end":65,"column_start":1,"column_end":90}},{"value":"/ `Presses` for some specific mouse button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151140,"byte_end":151185,"line_start":66,"line_end":66,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5201},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151447,"byte_end":151457,"line_start":76,"line_end":76,"column_start":12,"column_end":22},"name":"KeyPresses","qualname":"::input::widget::KeyPresses","value":"KeyPresses {  }","parent":null,"children":[{"krate":0,"index":5203}],"decl_id":null,"docs":" An `Iterator` yielding all keyboard button presses occuring within the given sequence of\n `Presses`.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all keyboard button presses occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151311,"byte_end":151403,"line_start":73,"line_end":73,"column_start":1,"column_end":93}},{"value":"/ `Presses`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151404,"byte_end":151418,"line_start":74,"line_end":74,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":5207},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151628,"byte_end":151636,"line_start":83,"line_end":83,"column_start":12,"column_end":20},"name":"Releases","qualname":"::input::widget::Releases","value":"Releases {  }","parent":null,"children":[{"krate":0,"index":5209}],"decl_id":null,"docs":" An `Iterator` yielding all button releases occuring within the given sequence of\n `widget::Event`s.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all button releases occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151493,"byte_end":151577,"line_start":80,"line_end":80,"column_start":1,"column_end":85}},{"value":"/ `widget::Event`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151578,"byte_end":151599,"line_start":81,"line_end":81,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":5213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151836,"byte_end":151855,"line_start":90,"line_end":90,"column_start":12,"column_end":31},"name":"MouseButtonReleases","qualname":"::input::widget::MouseButtonReleases","value":"MouseButtonReleases {  }","parent":null,"children":[{"krate":0,"index":5215},{"krate":0,"index":5216}],"decl_id":null,"docs":" An `Iterator` yielding all mouse button releases occuring within the given sequence of\n `Releases` for some specific mouse button.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all mouse button releases occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151670,"byte_end":151760,"line_start":87,"line_end":87,"column_start":1,"column_end":91}},{"value":"/ `Releases` for some specific mouse button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151761,"byte_end":151807,"line_start":88,"line_end":88,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":5220},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152071,"byte_end":152084,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"MouseReleases","qualname":"::input::widget::MouseReleases","value":"MouseReleases {  }","parent":null,"children":[{"krate":0,"index":5222}],"decl_id":null,"docs":" An `Iterator` yielding all mouse button releases occuring within the given sequence of\n `Releases`.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all mouse button releases occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":151936,"byte_end":152026,"line_start":95,"line_end":95,"column_start":1,"column_end":91}},{"value":"/ `Releases`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152027,"byte_end":152042,"line_start":96,"line_end":96,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152260,"byte_end":152271,"line_start":105,"line_end":105,"column_start":12,"column_end":23},"name":"KeyReleases","qualname":"::input::widget::KeyReleases","value":"KeyReleases {  }","parent":null,"children":[{"krate":0,"index":5228}],"decl_id":null,"docs":" An `Iterator` yielding all keyboard button releases occuring within the given sequence of\n `Releases`.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all keyboard button releases occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152122,"byte_end":152215,"line_start":102,"line_end":102,"column_start":1,"column_end":94}},{"value":"/ `Releases`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152216,"byte_end":152231,"line_start":103,"line_end":103,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152437,"byte_end":152443,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"Clicks","qualname":"::input::widget::Clicks","value":"Clicks {  }","parent":null,"children":[{"krate":0,"index":5234}],"decl_id":null,"docs":" An `Iterator` yielding all mouse clicks occuring within the given sequence of `widget::Event`s.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all mouse clicks occuring within the given sequence of `widget::Event`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152309,"byte_end":152408,"line_start":109,"line_end":109,"column_start":1,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":5238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152618,"byte_end":152630,"line_start":118,"line_end":118,"column_start":12,"column_end":24},"name":"ButtonClicks","qualname":"::input::widget::ButtonClicks","value":"ButtonClicks {  }","parent":null,"children":[{"krate":0,"index":5240},{"krate":0,"index":5241}],"decl_id":null,"docs":" An `Iterator` yielding all mouse `button` clicks occuring within the given sequence of\n `widget::Click`s.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all mouse `button` clicks occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152477,"byte_end":152567,"line_start":115,"line_end":115,"column_start":1,"column_end":91}},{"value":"/ `widget::Click`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152568,"byte_end":152589,"line_start":116,"line_end":116,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":5245},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152833,"byte_end":152837,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"Taps","qualname":"::input::widget::Taps","value":"Taps {  }","parent":null,"children":[{"krate":0,"index":5247}],"decl_id":null,"docs":" An `Iterator` yielding all touch screen taps occuring within the given sequence of\n `widget::Event`s.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all touch screen taps occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152696,"byte_end":152782,"line_start":123,"line_end":123,"column_start":1,"column_end":87}},{"value":"/ `widget::Event`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152783,"byte_end":152804,"line_start":124,"line_end":124,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":5251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153105,"byte_end":153110,"line_start":135,"line_end":135,"column_start":12,"column_end":17},"name":"Drags","qualname":"::input::widget::Drags","value":"Drags {  }","parent":null,"children":[{"krate":0,"index":5253}],"decl_id":null,"docs":" An iterator that yields all `event::Drag` events yielded by the `Events` iterator.","sig":null,"attributes":[{"value":"/ An iterator that yields all `event::Drag` events yielded by the `Events` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152871,"byte_end":152957,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152958,"byte_end":152961,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Only events that occurred while the widget was capturing the device that did the dragging will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":152962,"byte_end":153060,"line_start":132,"line_end":132,"column_start":1,"column_end":99}},{"value":"/ be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153061,"byte_end":153076,"line_start":133,"line_end":133,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":5257},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153283,"byte_end":153294,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"ButtonDrags","qualname":"::input::widget::ButtonDrags","value":"ButtonDrags {  }","parent":null,"children":[{"krate":0,"index":5259},{"krate":0,"index":5260}],"decl_id":null,"docs":" An `Iterator` yielding all mouse `button` drags occuring within the given sequence of\n `widget::Drag`s.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding all mouse `button` drags occuring within the given sequence of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153144,"byte_end":153233,"line_start":139,"line_end":139,"column_start":1,"column_end":90}},{"value":"/ `widget::Drag`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153234,"byte_end":153254,"line_start":140,"line_end":140,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":5264},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153568,"byte_end":153573,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"Texts","qualname":"::input::widget::Texts","value":"Texts {  }","parent":null,"children":[{"krate":0,"index":5266}],"decl_id":null,"docs":" An iterator that yields all `Input::Text` events yielded by the `Events` iterator.","sig":null,"attributes":[{"value":"/ An iterator that yields all `Input::Text` events yielded by the `Events` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153358,"byte_end":153444,"line_start":147,"line_end":147,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153445,"byte_end":153448,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Only events that occurred while the widget was capturing the keyboard will be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153449,"byte_end":153539,"line_start":149,"line_end":149,"column_start":1,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":5270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153723,"byte_end":153730,"line_start":157,"line_end":157,"column_start":12,"column_end":19},"name":"Scrolls","qualname":"::input::widget::Scrolls","value":"Scrolls {  }","parent":null,"children":[{"krate":0,"index":5272}],"decl_id":null,"docs":" An iterator that yields all `Scroll` events yielded by the given `Events` iterator.\n","sig":null,"attributes":[{"value":"/ An iterator that yields all `Scroll` events yielded by the given `Events` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153607,"byte_end":153694,"line_start":155,"line_end":155,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154043,"byte_end":154053,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"for_widget","qualname":"<Widget>::for_widget","value":"fn (idx: widget::Id, rect: Rect, global: &'a input::Global) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Widget` with events specifically for the given widget.","sig":null,"attributes":[{"value":"/ Returns a `Widget` with events specifically for the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153792,"byte_end":153861,"line_start":164,"line_end":164,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153866,"byte_end":153869,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Filters out only the events that directly pertain to the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153874,"byte_end":153942,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153947,"byte_end":153950,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ All events will also be made relative to the widget's own (0, 0) origin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153955,"byte_end":154031,"line_start":168,"line_end":168,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154405,"byte_end":154410,"line_start":180,"line_end":180,"column_start":12,"column_end":17},"name":"mouse","qualname":"<Widget>::mouse","value":"fn (&self) -> Option<Mouse<'a>>","parent":null,"children":[],"decl_id":null,"docs":" If the widget is currently capturing the mouse, this returns the state of the mouse.","sig":null,"attributes":[{"value":"/ If the widget is currently capturing the mouse, this returns the state of the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154232,"byte_end":154320,"line_start":177,"line_end":177,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154325,"byte_end":154328,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the widget is not capturing the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154333,"byte_end":154393,"line_start":179,"line_end":179,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155286,"byte_end":155292,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"events","qualname":"<Widget>::events","value":"fn (&self) -> Events<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator yielding all events that are relevant to a specific widget.","sig":null,"attributes":[{"value":"/ Produces an iterator yielding all events that are relevant to a specific widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154782,"byte_end":154866,"line_start":192,"line_end":192,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154871,"byte_end":154874,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ All events provided by this Iterator will be filtered in accordance with input capturing. For","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154879,"byte_end":154976,"line_start":194,"line_end":194,"column_start":5,"column_end":102}},{"value":"/ example: If the widget does not capture the mouse, it *will not* receive any mouse-related","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":154981,"byte_end":155075,"line_start":195,"line_end":195,"column_start":5,"column_end":99}},{"value":"/ events. If the widget captures the keyboard it *will* receive all keyboard events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155080,"byte_end":155166,"line_start":196,"line_end":196,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155171,"byte_end":155174,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ All mouse events will have their coordinates relative to the middle of the widget's `Rect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155179,"byte_end":155274,"line_start":198,"line_end":198,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155697,"byte_end":155704,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"presses","qualname":"<Widget>::presses","value":"fn (&self) -> Presses<'a>","parent":null,"children":[],"decl_id":null,"docs":" Filters all events yielded by `Self::events` other than `event::Press`es.\n","sig":null,"attributes":[{"value":"/ Filters all events yielded by `Self::events` other than `event::Press`es.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155608,"byte_end":155685,"line_start":209,"line_end":209,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155873,"byte_end":155881,"line_start":215,"line_end":215,"column_start":12,"column_end":20},"name":"releases","qualname":"<Widget>::releases","value":"fn (&self) -> Releases<'a>","parent":null,"children":[],"decl_id":null,"docs":" Filters all events yielded by `Self::events` other than `event::Release`es.\n","sig":null,"attributes":[{"value":"/ Filters all events yielded by `Self::events` other than `event::Release`es.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155782,"byte_end":155861,"line_start":214,"line_end":214,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156185,"byte_end":156191,"line_start":223,"line_end":223,"column_start":12,"column_end":18},"name":"clicks","qualname":"<Widget>::clicks","value":"fn (&self) -> Clicks<'a>","parent":null,"children":[],"decl_id":null,"docs":" Filters all events yielded by `Self::events` for all `event::Click`s.","sig":null,"attributes":[{"value":"/ Filters all events yielded by `Self::events` for all `event::Click`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":155961,"byte_end":156034,"line_start":219,"line_end":219,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156039,"byte_end":156042,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ A _click_ is determined to have occured if a pointing device button was both pressed and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156047,"byte_end":156139,"line_start":221,"line_end":221,"column_start":5,"column_end":97}},{"value":"/ released over the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156144,"byte_end":156173,"line_start":222,"line_end":222,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156475,"byte_end":156479,"line_start":231,"line_end":231,"column_start":12,"column_end":16},"name":"taps","qualname":"<Widget>::taps","value":"fn (&self) -> Taps<'a>","parent":null,"children":[],"decl_id":null,"docs":" Filters all events yielded by `Self::events` for all `event::Tap`s.","sig":null,"attributes":[{"value":"/ Filters all events yielded by `Self::events` for all `event::Tap`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156267,"byte_end":156338,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156343,"byte_end":156346,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ A _tap_ is determined to have occured if a touch interaction both started and ended over","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156351,"byte_end":156443,"line_start":229,"line_end":229,"column_start":5,"column_end":97}},{"value":"/ the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156448,"byte_end":156463,"line_start":230,"line_end":230,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156789,"byte_end":156794,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"name":"drags","qualname":"<Widget>::drags","value":"fn (&self) -> Drags<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator that yields all `event::Drag` events yielded by the `Events` iterator.","sig":null,"attributes":[{"value":"/ Produces an iterator that yields all `event::Drag` events yielded by the `Events` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156551,"byte_end":156646,"line_start":235,"line_end":235,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156651,"byte_end":156654,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Only events that occurred while the widget was capturing the device that did the dragging","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156659,"byte_end":156752,"line_start":237,"line_end":237,"column_start":5,"column_end":98}},{"value":"/ will be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156757,"byte_end":156777,"line_start":238,"line_end":238,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157132,"byte_end":157137,"line_start":247,"line_end":247,"column_start":12,"column_end":17},"name":"texts","qualname":"<Widget>::texts","value":"fn (&self) -> Texts<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator that yields all `Input::Text` events that have occurred as `&str`s\n since the last time `Ui::set_widgets` was called.","sig":null,"attributes":[{"value":"/ Produces an iterator that yields all `Input::Text` events that have occurred as `&str`s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156868,"byte_end":156959,"line_start":243,"line_end":243,"column_start":5,"column_end":96}},{"value":"/ since the last time `Ui::set_widgets` was called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":156964,"byte_end":157017,"line_start":244,"line_end":244,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157022,"byte_end":157025,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Only events that occurred while the widget was capturing the keyboard will be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157030,"byte_end":157120,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157317,"byte_end":157324,"line_start":252,"line_end":252,"column_start":12,"column_end":19},"name":"scrolls","qualname":"<Widget>::scrolls","value":"fn (&self) -> Scrolls<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator that yields only the `Scroll` events yielded by the `Events` iterator.\n","sig":null,"attributes":[{"value":"/ Produce an iterator that yields only the `Scroll` events yielded by the `Events` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157211,"byte_end":157305,"line_start":251,"line_end":251,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157496,"byte_end":157502,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"abs_xy","qualname":"<Mouse>::abs_xy","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The absolute position of the mouse within the window.\n","sig":null,"attributes":[{"value":"/ The absolute position of the mouse within the window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157427,"byte_end":157484,"line_start":260,"line_end":260,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157646,"byte_end":157652,"line_start":266,"line_end":266,"column_start":12,"column_end":18},"name":"rel_xy","qualname":"<Mouse>::rel_xy","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The position of the mouse relative to the middle of the widget's `Rect`.\n","sig":null,"attributes":[{"value":"/ The position of the mouse relative to the middle of the widget's `Rect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157558,"byte_end":157634,"line_start":265,"line_end":265,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157796,"byte_end":157803,"line_start":271,"line_end":271,"column_start":12,"column_end":19},"name":"is_over","qualname":"<Mouse>::is_over","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the mouse currently over the widget.\n","sig":null,"attributes":[{"value":"/ Is the mouse currently over the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157741,"byte_end":157784,"line_start":270,"line_end":270,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158012,"byte_end":158017,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"name":"mouse","qualname":"<Presses>::mouse","value":"fn (self) -> MousePresses<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the press events that correspond with mouse buttons.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the press events that correspond with mouse buttons.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157904,"byte_end":158000,"line_start":279,"line_end":279,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158236,"byte_end":158239,"line_start":288,"line_end":288,"column_start":12,"column_end":15},"name":"key","qualname":"<Presses>::key","value":"fn (self) -> KeyPresses<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the press events that correspond with keyboard\n buttons.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the press events that correspond with keyboard","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158117,"byte_end":158207,"line_start":286,"line_end":286,"column_start":5,"column_end":95}},{"value":"/ buttons.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158212,"byte_end":158224,"line_start":287,"line_end":287,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158469,"byte_end":158475,"line_start":299,"line_end":299,"column_start":12,"column_end":18},"name":"button","qualname":"<MousePresses>::button","value":"fn (self, button: input::MouseButton) -> MouseButtonPresses<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only events associated with the given mouse button.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only events associated with the given mouse button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158367,"byte_end":158457,"line_start":298,"line_end":298,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158740,"byte_end":158744,"line_start":307,"line_end":307,"column_start":12,"column_end":16},"name":"left","qualname":"<MousePresses>::left","value":"fn (self) -> MouseButtonPresses<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the left mouse button press events.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the left mouse button press events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158649,"byte_end":158728,"line_start":306,"line_end":306,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158929,"byte_end":158935,"line_start":312,"line_end":312,"column_start":12,"column_end":18},"name":"middle","qualname":"<MousePresses>::middle","value":"fn (self) -> MouseButtonPresses<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the middle mouse button press events.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the middle mouse button press events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158836,"byte_end":158917,"line_start":311,"line_end":311,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159121,"byte_end":159126,"line_start":317,"line_end":317,"column_start":12,"column_end":17},"name":"right","qualname":"<MousePresses>::right","value":"fn (self) -> MouseButtonPresses<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the right mouse button press events.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the right mouse button press events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159029,"byte_end":159109,"line_start":316,"line_end":316,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159365,"byte_end":159370,"line_start":327,"line_end":327,"column_start":12,"column_end":17},"name":"mouse","qualname":"<Releases>::mouse","value":"fn (self) -> MouseReleases<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the release events that correspond with mouse\n buttons.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the release events that correspond with mouse","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159247,"byte_end":159336,"line_start":325,"line_end":325,"column_start":5,"column_end":94}},{"value":"/ buttons.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159341,"byte_end":159353,"line_start":326,"line_end":326,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159594,"byte_end":159597,"line_start":335,"line_end":335,"column_start":12,"column_end":15},"name":"key","qualname":"<Releases>::key","value":"fn (self) -> KeyReleases<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the release events that correspond with keyboard\n buttons.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the release events that correspond with keyboard","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159473,"byte_end":159565,"line_start":333,"line_end":333,"column_start":5,"column_end":97}},{"value":"/ buttons.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159570,"byte_end":159582,"line_start":334,"line_end":334,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159831,"byte_end":159837,"line_start":346,"line_end":346,"column_start":12,"column_end":18},"name":"button","qualname":"<MouseReleases>::button","value":"fn (self, button: input::MouseButton) -> MouseButtonReleases<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only events associated with the given mouse button.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only events associated with the given mouse button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159729,"byte_end":159819,"line_start":345,"line_end":345,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160107,"byte_end":160111,"line_start":354,"line_end":354,"column_start":12,"column_end":16},"name":"left","qualname":"<MouseReleases>::left","value":"fn (self) -> MouseButtonReleases<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the left mouse button release events.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the left mouse button release events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160014,"byte_end":160095,"line_start":353,"line_end":353,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160299,"byte_end":160305,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"middle","qualname":"<MouseReleases>::middle","value":"fn (self) -> MouseButtonReleases<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the middle mouse button release events.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the middle mouse button release events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160204,"byte_end":160287,"line_start":358,"line_end":358,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160494,"byte_end":160499,"line_start":364,"line_end":364,"column_start":12,"column_end":17},"name":"right","qualname":"<MouseReleases>::right","value":"fn (self) -> MouseButtonReleases<'a>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` that yields only the right mouse button release events.\n","sig":null,"attributes":[{"value":"/ Produces an `Iterator` that yields only the right mouse button release events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160400,"byte_end":160482,"line_start":363,"line_end":363,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160695,"byte_end":160701,"line_start":373,"line_end":373,"column_start":12,"column_end":18},"name":"button","qualname":"<Clicks>::button","value":"fn (self, button: input::MouseButton) -> ButtonClicks<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yield only the `Click`s that occurred from the given button.\n","sig":null,"attributes":[{"value":"/ Yield only the `Click`s that occurred from the given button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160619,"byte_end":160683,"line_start":372,"line_end":372,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160910,"byte_end":160914,"line_start":381,"line_end":381,"column_start":12,"column_end":16},"name":"left","qualname":"<Clicks>::left","value":"fn (self) -> ButtonClicks<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yield only left mouse button `Click`s.\n","sig":null,"attributes":[{"value":"/ Yield only left mouse button `Click`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160856,"byte_end":160898,"line_start":380,"line_end":380,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161057,"byte_end":161063,"line_start":386,"line_end":386,"column_start":12,"column_end":18},"name":"middle","qualname":"<Clicks>::middle","value":"fn (self) -> ButtonClicks<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yields only middle mouse button `Click`s.\n","sig":null,"attributes":[{"value":"/ Yields only middle mouse button `Click`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161000,"byte_end":161045,"line_start":385,"line_end":385,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161206,"byte_end":161211,"line_start":391,"line_end":391,"column_start":12,"column_end":17},"name":"right","qualname":"<Clicks>::right","value":"fn (self) -> ButtonClicks<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yield only right mouse button `Click`s.\n","sig":null,"attributes":[{"value":"/ Yield only right mouse button `Click`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161151,"byte_end":161194,"line_start":390,"line_end":390,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161398,"byte_end":161404,"line_start":400,"line_end":400,"column_start":12,"column_end":18},"name":"button","qualname":"<Drags>::button","value":"fn (self, button: input::MouseButton) -> ButtonDrags<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yield only the `Drag`s that occurred from the given button.\n","sig":null,"attributes":[{"value":"/ Yield only the `Drag`s that occurred from the given button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161323,"byte_end":161386,"line_start":399,"line_end":399,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161609,"byte_end":161613,"line_start":408,"line_end":408,"column_start":12,"column_end":16},"name":"left","qualname":"<Drags>::left","value":"fn (self) -> ButtonDrags<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yield only left mouse button `Drag`s.\n","sig":null,"attributes":[{"value":"/ Yield only left mouse button `Drag`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161556,"byte_end":161597,"line_start":407,"line_end":407,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161758,"byte_end":161764,"line_start":413,"line_end":413,"column_start":12,"column_end":18},"name":"middle","qualname":"<Drags>::middle","value":"fn (self) -> ButtonDrags<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yields only middle mouse button `Drag`s.\n","sig":null,"attributes":[{"value":"/ Yields only middle mouse button `Drag`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161702,"byte_end":161746,"line_start":412,"line_end":412,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161905,"byte_end":161910,"line_start":418,"line_end":418,"column_start":12,"column_end":17},"name":"right","qualname":"<Drags>::right","value":"fn (self) -> ButtonDrags<'a>","parent":null,"children":[],"decl_id":null,"docs":" Yield only right mouse button `Drag`s.\n","sig":null,"attributes":[{"value":"/ Yield only right mouse button `Drag`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161851,"byte_end":161893,"line_start":417,"line_end":417,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"global","qualname":"::input::global","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":5276},{"krate":0,"index":5281},{"krate":0,"index":5283},{"krate":0,"index":5286},{"krate":0,"index":5289},{"krate":0,"index":5292},{"krate":0,"index":616},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":628}],"decl_id":null,"docs":" Handles all of the global input events and state.\n The core of this module is the `Global` struct. It is responsible for aggregating\n and interpreting raw input events into high-level semantic events.\n","sig":null,"attributes":[{"value":"! Handles all of the global input events and state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":169579,"byte_end":169632,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"! The core of this module is the `Global` struct. It is responsible for aggregating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":169633,"byte_end":169718,"line_start":2,"line_end":2,"column_start":1,"column_end":86}},{"value":"! and interpreting raw input events into high-level semantic events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":169719,"byte_end":169789,"line_start":3,"line_end":3,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":5276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170134,"byte_end":170140,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Global","qualname":"::input::global::Global","value":"Global { start, current, last_click }","parent":null,"children":[{"krate":0,"index":5277},{"krate":0,"index":5278},{"krate":0,"index":5279},{"krate":0,"index":5280}],"decl_id":null,"docs":" Global input event handler that also implements `input::Provider`. The `Ui` passes all events\n to it's `Global` instance, which aggregates and interprets the events to provide so-called\n 'high-level' events to widgets. This input gets reset after every update by the `Ui`.\n","sig":null,"attributes":[{"value":"/ Global input event handler that also implements `input::Provider`. The `Ui` passes all events","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":169823,"byte_end":169920,"line_start":9,"line_end":9,"column_start":1,"column_end":98}},{"value":"/ to it's `Global` instance, which aggregates and interprets the events to provide so-called","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":169921,"byte_end":170015,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ 'high-level' events to widgets. This input gets reset after every update by the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170016,"byte_end":170105,"line_start":11,"line_end":11,"column_start":1,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":5277},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170225,"byte_end":170230,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"start","qualname":"::input::global::Global::start","value":"input::state::State","parent":{"krate":0,"index":5276},"children":[],"decl_id":null,"docs":" The `input::State` as it was at the end of the last update cycle.\n","sig":null,"attributes":[{"value":"/ The `input::State` as it was at the end of the last update cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170147,"byte_end":170216,"line_start":14,"line_end":14,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":5278},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170362,"byte_end":170369,"line_start":18,"line_end":18,"column_start":9,"column_end":16},"name":"current","qualname":"::input::global::Global::current","value":"input::state::State","parent":{"krate":0,"index":5276},"children":[],"decl_id":null,"docs":" The most recent `input::State`, with updates from handling all the events\n this update cycle\n","sig":null,"attributes":[{"value":"/ The most recent `input::State`, with updates from handling all the events","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170250,"byte_end":170327,"line_start":16,"line_end":16,"column_start":5,"column_end":82}},{"value":"/ this update cycle","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170332,"byte_end":170353,"line_start":17,"line_end":17,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":5280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170621,"byte_end":170631,"line_start":23,"line_end":23,"column_start":9,"column_end":19},"name":"last_click","qualname":"::input::global::Global::last_click","value":"std::option::Option<(std::time::Instant, event::Click)>","parent":{"krate":0,"index":5276},"children":[],"decl_id":null,"docs":" Tracks the last click that occurred and the time at which it occurred in order to create\n double-click events.\n","sig":null,"attributes":[{"value":"/ Tracks the last click that occurred and the time at which it occurred in order to create","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170491,"byte_end":170583,"line_start":21,"line_end":21,"column_start":5,"column_end":97}},{"value":"/ double-click events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170588,"byte_end":170612,"line_start":22,"line_end":22,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":5283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170824,"byte_end":170830,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Events","qualname":"::input::global::Events","value":"Events {  }","parent":null,"children":[{"krate":0,"index":5285}],"decl_id":null,"docs":" Iterator over all global `event::Event`s that have occurred since the last time\n `Ui::set_widgets` was called.\n","sig":null,"attributes":[{"value":"/ Iterator over all global `event::Event`s that have occurred since the last time","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170678,"byte_end":170761,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"/ `Ui::set_widgets` was called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170762,"byte_end":170795,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":5289},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171029,"byte_end":171037,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"UiEvents","qualname":"::input::global::UiEvents","value":"UiEvents {  }","parent":null,"children":[{"krate":0,"index":5291}],"decl_id":null,"docs":" An iterator yielding all `event::Ui`s that have occurred since the last time `Ui::set_widgets`\n was called.\n","sig":null,"attributes":[{"value":"/ An iterator yielding all `event::Ui`s that have occurred since the last time `Ui::set_widgets`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170886,"byte_end":170984,"line_start":33,"line_end":33,"column_start":1,"column_end":99}},{"value":"/ was called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":170985,"byte_end":171000,"line_start":34,"line_end":34,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171134,"byte_end":171137,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Global>::new","value":"fn () -> Global","parent":null,"children":[],"decl_id":null,"docs":" Returns a fresh new `Global`\n","sig":null,"attributes":[{"value":"/ Returns a fresh new `Global`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171090,"byte_end":171122,"line_start":42,"line_end":42,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171465,"byte_end":171471,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"events","qualname":"<Global>::events","value":"fn (&self) -> Events","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator yielding all events that have occurred since the last time\n `Ui::set_widgets` was called.\n","sig":null,"attributes":[{"value":"/ Returns an iterator yielding all events that have occurred since the last time","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171333,"byte_end":171415,"line_start":52,"line_end":52,"column_start":5,"column_end":87}},{"value":"/ `Ui::set_widgets` was called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171420,"byte_end":171453,"line_start":53,"line_end":53,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171593,"byte_end":171603,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"push_event","qualname":"<Global>::push_event","value":"fn (&mut self, event: event::Event) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add the new event to the stack.\n","sig":null,"attributes":[{"value":"/ Add the new event to the stack.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171546,"byte_end":171581,"line_start":58,"line_end":58,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171813,"byte_end":171848,"line_start":65,"line_end":65,"column_start":12,"column_end":47},"name":"clear_events_and_update_start_state","qualname":"<Global>::clear_events_and_update_start_state","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Called at the end of every update cycle in order to prepare the `Global` to\n handle events for the next one.\n","sig":null,"attributes":[{"value":"/ Called at the end of every update cycle in order to prepare the `Global` to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171682,"byte_end":171761,"line_start":63,"line_end":63,"column_start":5,"column_end":84}},{"value":"/ handle events for the next one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171766,"byte_end":171801,"line_start":64,"line_end":64,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":172134,"byte_end":172136,"line_start":75,"line_end":75,"column_start":12,"column_end":14},"name":"ui","qualname":"<Events>::ui","value":"fn (self) -> UiEvents<'a>","parent":null,"children":[],"decl_id":null,"docs":" Converts the `Events` into a `UiEvents`, yielding only the `event::Ui`s that have occurred\n since the last time `Ui::set_widgets` was called.\n","sig":null,"attributes":[{"value":"/ Converts the `Events` into a `UiEvents`, yielding only the `event::Ui`s that have occurred","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171970,"byte_end":172064,"line_start":73,"line_end":73,"column_start":5,"column_end":99}},{"value":"/ since the last time `Ui::set_widgets` was called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":172069,"byte_end":172122,"line_start":74,"line_end":74,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136113,"byte_end":136118,"line_start":48,"line_end":48,"column_start":5,"column_end":10},"name":"Mouse","qualname":"::input::Source::Mouse","value":"Source::Mouse","parent":{"krate":0,"index":5295},"children":[],"decl_id":null,"docs":" Mouse input (i.e. movement, buttons).\n","sig":null,"attributes":[{"value":"/ Mouse input (i.e. movement, buttons).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136067,"byte_end":136108,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136148,"byte_end":136156,"line_start":50,"line_end":50,"column_start":5,"column_end":13},"name":"Keyboard","qualname":"::input::Source::Keyboard","value":"Source::Keyboard","parent":{"krate":0,"index":5295},"children":[],"decl_id":null,"docs":" Keyboard input.\n","sig":null,"attributes":[{"value":"/ Keyboard input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136124,"byte_end":136143,"line_start":49,"line_end":49,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5300},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136217,"byte_end":136222,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Touch","qualname":"::input::Source::Touch","value":"Source::Touch(self::touch::Id)","parent":{"krate":0,"index":5295},"children":[],"decl_id":null,"docs":" Input from a finger on a touch screen/surface.\n","sig":null,"attributes":[{"value":"/ Input from a finger on a touch screen/surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136162,"byte_end":136212,"line_start":51,"line_end":51,"column_start":5,"column_end":55}}]},{"kind":"Enum","id":{"krate":0,"index":5295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136054,"byte_end":136060,"line_start":46,"line_end":46,"column_start":10,"column_end":16},"name":"Source","qualname":"::input::Source","value":"Source::{Mouse, Keyboard, Touch}","parent":null,"children":[{"krate":0,"index":5296},{"krate":0,"index":5298},{"krate":0,"index":5300}],"decl_id":null,"docs":" Sources from which user input may be received.","sig":null,"attributes":[{"value":"/ Sources from which user input may be received.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135864,"byte_end":135914,"line_start":42,"line_end":42,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135915,"byte_end":135918,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ We use these to track which sources of input are being captured by which widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135919,"byte_end":136003,"line_start":44,"line_end":44,"column_start":1,"column_end":85}}]},{"kind":"StructVariant","id":{"krate":0,"index":5313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136506,"byte_end":136517,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"MouseCursor","qualname":"::input::Motion::MouseCursor","value":"Motion::MouseCursor { x, y }","parent":{"krate":0,"index":5312},"children":[],"decl_id":null,"docs":" Absolute cursor position within the window.","sig":null,"attributes":[{"value":"/ Absolute cursor position within the window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136367,"byte_end":136414,"line_start":59,"line_end":59,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136419,"byte_end":136422,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ For more details on co-ordinate orientation etc, see the `Input` docs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136427,"byte_end":136501,"line_start":61,"line_end":61,"column_start":5,"column_end":79}}]},{"kind":"StructVariant","id":{"krate":0,"index":5316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136581,"byte_end":136594,"line_start":64,"line_end":64,"column_start":5,"column_end":18},"name":"MouseRelative","qualname":"::input::Motion::MouseRelative","value":"Motion::MouseRelative { x, y }","parent":{"krate":0,"index":5312},"children":[],"decl_id":null,"docs":" Relative mouse movement.\n","sig":null,"attributes":[{"value":"/ Relative mouse movement.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136548,"byte_end":136576,"line_start":63,"line_end":63,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":5319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136658,"byte_end":136664,"line_start":66,"line_end":66,"column_start":5,"column_end":11},"name":"Scroll","qualname":"::input::Motion::Scroll","value":"Motion::Scroll { x, y }","parent":{"krate":0,"index":5312},"children":[],"decl_id":null,"docs":" x and y in scroll ticks.\n","sig":null,"attributes":[{"value":"/ x and y in scroll ticks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136625,"byte_end":136653,"line_start":65,"line_end":65,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5322},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136731,"byte_end":136745,"line_start":68,"line_end":68,"column_start":5,"column_end":19},"name":"ControllerAxis","qualname":"::input::Motion::ControllerAxis","value":"Motion::ControllerAxis(ControllerAxisArgs)","parent":{"krate":0,"index":5312},"children":[],"decl_id":null,"docs":" controller axis move event.\n","sig":null,"attributes":[{"value":"/ controller axis move event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136695,"byte_end":136726,"line_start":67,"line_end":67,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":5312},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136354,"byte_end":136360,"line_start":58,"line_end":58,"column_start":10,"column_end":16},"name":"Motion","qualname":"::input::Motion","value":"Motion::{MouseCursor, MouseRelative, Scroll, ControllerAxis}","parent":null,"children":[{"krate":0,"index":5313},{"krate":0,"index":5316},{"krate":0,"index":5319},{"krate":0,"index":5322}],"decl_id":null,"docs":" Different kinds of motion input.\n","sig":null,"attributes":[{"value":"/ Different kinds of motion input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136244,"byte_end":136280,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136281,"byte_end":136303,"line_start":56,"line_end":56,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":646},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136804,"byte_end":136809,"line_start":73,"line_end":73,"column_start":9,"column_end":14},"name":"touch","qualname":"::input::touch","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":5334},{"krate":0,"index":5359},{"krate":0,"index":5357},{"krate":0,"index":5355},{"krate":0,"index":5351},{"krate":0,"index":5352},{"krate":0,"index":5348},{"krate":0,"index":5349},{"krate":0,"index":5342},{"krate":0,"index":5340},{"krate":0,"index":5337},{"krate":0,"index":5360},{"krate":0,"index":5382},{"krate":0,"index":5380},{"krate":0,"index":5378},{"krate":0,"index":5375},{"krate":0,"index":5376},{"krate":0,"index":5372},{"krate":0,"index":5373},{"krate":0,"index":5369},{"krate":0,"index":5383},{"krate":0,"index":5395},{"krate":0,"index":5393},{"krate":0,"index":5391},{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":648},{"krate":0,"index":650}],"decl_id":null,"docs":" Touch-related items.\n","sig":null,"attributes":[{"value":"/ Touch-related items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136771,"byte_end":136795,"line_start":72,"line_end":72,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136990,"byte_end":136992,"line_start":78,"line_end":78,"column_start":16,"column_end":18},"name":"Id","qualname":"::input::touch::Id","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type for uniquely identifying the source of a touch interaction.\n","sig":null,"attributes":[{"value":"/ A type for uniquely identifying the source of a touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":136832,"byte_end":136902,"line_start":76,"line_end":76,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5361},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137174,"byte_end":137179,"line_start":84,"line_end":84,"column_start":9,"column_end":14},"name":"Start","qualname":"::input::touch::Phase::Start","value":"Phase::Start","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The start of a touch interaction.\n","sig":null,"attributes":[{"value":"/ The start of a touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137128,"byte_end":137165,"line_start":83,"line_end":83,"column_start":9,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5363},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137234,"byte_end":137238,"line_start":86,"line_end":86,"column_start":9,"column_end":13},"name":"Move","qualname":"::input::touch::Phase::Move","value":"Phase::Move","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" A touch moving across a surface.\n","sig":null,"attributes":[{"value":"/ A touch moving across a surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137189,"byte_end":137225,"line_start":85,"line_end":85,"column_start":9,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5365},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137297,"byte_end":137303,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"name":"Cancel","qualname":"::input::touch::Phase::Cancel","value":"Phase::Cancel","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The touch interaction was cancelled.\n","sig":null,"attributes":[{"value":"/ The touch interaction was cancelled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137248,"byte_end":137288,"line_start":87,"line_end":87,"column_start":9,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5367},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137357,"byte_end":137360,"line_start":90,"line_end":90,"column_start":9,"column_end":12},"name":"End","qualname":"::input::touch::Phase::End","value":"Phase::End","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The end of a touch interaction.\n","sig":null,"attributes":[{"value":"/ The end of a touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137313,"byte_end":137348,"line_start":89,"line_end":89,"column_start":9,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":5360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137112,"byte_end":137117,"line_start":82,"line_end":82,"column_start":14,"column_end":19},"name":"Phase","qualname":"::input::touch::Phase","value":"Phase::{Start, Move, Cancel, End}","parent":null,"children":[{"krate":0,"index":5361},{"krate":0,"index":5363},{"krate":0,"index":5365},{"krate":0,"index":5367}],"decl_id":null,"docs":" The stage of the touch interaction.\n","sig":null,"attributes":[{"value":"/ The stage of the touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137004,"byte_end":137043,"line_start":80,"line_end":80,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":5383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137976,"byte_end":137981,"line_start":105,"line_end":105,"column_start":16,"column_end":21},"name":"Touch","qualname":"::input::touch::Touch","value":"Touch { phase, id, xy }","parent":null,"children":[{"krate":0,"index":5384},{"krate":0,"index":5385},{"krate":0,"index":5386}],"decl_id":null,"docs":" Represents a touch interaction.","sig":null,"attributes":[{"value":"/ Represents a touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137373,"byte_end":137408,"line_start":93,"line_end":93,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137413,"byte_end":137416,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Each time a user touches the surface with a new finger, a new series of `Touch` events","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137421,"byte_end":137511,"line_start":95,"line_end":95,"column_start":5,"column_end":95}},{"value":"/ `Start`, each with a unique identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137516,"byte_end":137559,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137564,"byte_end":137567,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ For every `Id` there should be at least 2 events with `Start` and `End` (or `Cancel`led)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137572,"byte_end":137664,"line_start":98,"line_end":98,"column_start":5,"column_end":97}},{"value":"/ `Phase`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137669,"byte_end":137682,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137687,"byte_end":137690,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ A `Start` input received with the same `Id` as a previously received `End` does *not*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137695,"byte_end":137784,"line_start":101,"line_end":101,"column_start":5,"column_end":94}},{"value":"/ indicate that the same finger was used. `Id`s are only used to distinguish between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137789,"byte_end":137875,"line_start":102,"line_end":102,"column_start":5,"column_end":91}},{"value":"/ overlapping touch interactions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137880,"byte_end":137915,"line_start":103,"line_end":103,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":5384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138044,"byte_end":138049,"line_start":107,"line_end":107,"column_start":13,"column_end":18},"name":"phase","qualname":"::input::touch::Touch::phase","value":"input::touch::Phase","parent":{"krate":0,"index":5383},"children":[],"decl_id":null,"docs":" The stage of the touch interaction.\n","sig":null,"attributes":[{"value":"/ The stage of the touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":137992,"byte_end":138031,"line_start":106,"line_end":106,"column_start":9,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":5385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138155,"byte_end":138157,"line_start":109,"line_end":109,"column_start":13,"column_end":15},"name":"id","qualname":"::input::touch::Touch::id","value":"input::touch::Id","parent":{"krate":0,"index":5383},"children":[],"decl_id":null,"docs":" A unique identifier associated with the source of the touch interaction.\n","sig":null,"attributes":[{"value":"/ A unique identifier associated with the source of the touch interaction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138066,"byte_end":138142,"line_start":108,"line_end":108,"column_start":9,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":5386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138308,"byte_end":138310,"line_start":112,"line_end":112,"column_start":13,"column_end":15},"name":"xy","qualname":"::input::touch::Touch::xy","value":"[f64; 2]","parent":{"krate":0,"index":5383},"children":[],"decl_id":null,"docs":" The location of the touch on the surface/screen. See `Input` docs for information on\n the co-ordinate system.\n","sig":null,"attributes":[{"value":"/ The location of the touch on the surface/screen. See `Input` docs for information on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138171,"byte_end":138259,"line_start":110,"line_end":110,"column_start":9,"column_end":97}},{"value":"/ the co-ordinate system.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138268,"byte_end":138295,"line_start":111,"line_end":111,"column_start":9,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138396,"byte_end":138399,"line_start":118,"line_end":118,"column_start":16,"column_end":19},"name":"new","qualname":"<Id>::new","value":"fn (id: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new identifier.\n","sig":null,"attributes":[{"value":"/ Construct a new identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138349,"byte_end":138380,"line_start":117,"line_end":117,"column_start":9,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138559,"byte_end":138570,"line_start":127,"line_end":127,"column_start":16,"column_end":27},"name":"relative_to","qualname":"<Touch>::relative_to","value":"fn (&self, xy: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the `Touch` relative to the given `xy`.\n","sig":null,"attributes":[{"value":"/ Returns a copy of the `Touch` relative to the given `xy`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138482,"byte_end":138543,"line_start":126,"line_end":126,"column_start":9,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172771,"byte_end":172779,"line_start":6,"line_end":6,"column_start":10,"column_end":18},"name":"FontSize","qualname":"::label::FontSize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Font size used throughout Conrod.\n","sig":null,"attributes":[{"value":"/ Font size used throughout Conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172724,"byte_end":172761,"line_start":5,"line_end":5,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172839,"byte_end":172848,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Labelable","qualname":"::label::Labelable","value":"Labelable<'a>: Sized","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672}],"decl_id":null,"docs":" Widgets that may display some label.\n","sig":null,"attributes":[{"value":"/ Widgets that may display some label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172788,"byte_end":172828,"line_start":8,"line_end":8,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172908,"byte_end":172913,"line_start":12,"line_end":12,"column_start":8,"column_end":13},"name":"label","qualname":"::label::Labelable::label","value":"fn (self, text: &'a str) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set the label for the widget.\n","sig":null,"attributes":[{"value":"/ Set the label for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172867,"byte_end":172900,"line_start":11,"line_end":11,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172997,"byte_end":173008,"line_start":15,"line_end":15,"column_start":8,"column_end":19},"name":"label_color","qualname":"::label::Labelable::label_color","value":"fn (self, color: Color) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set the color of the widget's label.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172949,"byte_end":172989,"line_start":14,"line_end":14,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173108,"byte_end":173118,"line_start":18,"line_end":18,"column_start":8,"column_end":18},"name":"label_rgba","qualname":"::label::Labelable::label_rgba","value":"fn (self, r: f32, g: f32, b: f32, a: f32) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set the color of the widget's label from rgba values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's label from rgba values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173043,"byte_end":173100,"line_start":17,"line_end":17,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173285,"byte_end":173294,"line_start":23,"line_end":23,"column_start":8,"column_end":17},"name":"label_rgb","qualname":"::label::Labelable::label_rgb","value":"fn (self, r: f32, g: f32, b: f32) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set the color of the widget's label from rgb values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's label from rgb values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173221,"byte_end":173277,"line_start":22,"line_end":22,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173450,"byte_end":173460,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"label_hsla","qualname":"::label::Labelable::label_hsla","value":"fn (self, h: f32, s: f32, l: f32, a: f32) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set the color of the widget's label from hsla values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's label from hsla values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173385,"byte_end":173442,"line_start":27,"line_end":27,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173627,"byte_end":173636,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"label_hsl","qualname":"::label::Labelable::label_hsl","value":"fn (self, h: f32, s: f32, l: f32) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set the color of the widget's label from hsl values.\n","sig":null,"attributes":[{"value":"/ Set the color of the widget's label from hsl values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173563,"byte_end":173619,"line_start":32,"line_end":32,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173780,"byte_end":173795,"line_start":38,"line_end":38,"column_start":8,"column_end":23},"name":"label_font_size","qualname":"::label::Labelable::label_font_size","value":"fn (self, size: FontSize) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set the font size for the widget's label.\n","sig":null,"attributes":[{"value":"/ Set the font size for the widget's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173727,"byte_end":173772,"line_start":37,"line_end":37,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173891,"byte_end":173901,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"small_font","qualname":"::label::Labelable::small_font","value":"fn (self, ui: &Ui) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set a \"small\" font size for the widget's label.\n","sig":null,"attributes":[{"value":"/ Set a \"small\" font size for the widget's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173832,"byte_end":173883,"line_start":40,"line_end":40,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":174053,"byte_end":174064,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"medium_font","qualname":"::label::Labelable::medium_font","value":"fn (self, ui: &Ui) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set a \"medium\" font size for the widget's label.\n","sig":null,"attributes":[{"value":"/ Set a \"medium\" font size for the widget's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":173993,"byte_end":174045,"line_start":45,"line_end":45,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":174216,"byte_end":174226,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"large_font","qualname":"::label::Labelable::large_font","value":"fn (self, ui: &Ui) -> Self","parent":{"krate":0,"index":661},"children":[],"decl_id":null,"docs":" Set a \"large\" font size for the widget's label.\n","sig":null,"attributes":[{"value":"/ Set a \"large\" font size for the widget's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":174157,"byte_end":174208,"line_start":50,"line_end":50,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mesh","qualname":"::mesh","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":5396},{"krate":0,"index":5401},{"krate":0,"index":5403},{"krate":0,"index":5423},{"krate":0,"index":5419},{"krate":0,"index":5417},{"krate":0,"index":5412},{"krate":0,"index":5413},{"krate":0,"index":5408},{"krate":0,"index":5409},{"krate":0,"index":5424},{"krate":0,"index":5433},{"krate":0,"index":5431},{"krate":0,"index":690},{"krate":0,"index":5435},{"krate":0,"index":5445},{"krate":0,"index":5443},{"krate":0,"index":5447},{"krate":0,"index":5482},{"krate":0,"index":5481},{"krate":0,"index":5479},{"krate":0,"index":5477},{"krate":0,"index":5473},{"krate":0,"index":5474},{"krate":0,"index":5455},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":5487},{"krate":0,"index":5498},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":739},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":753}],"decl_id":null,"docs":" A mesh type dedicated to converting sequences of `render::Primitive`s to a representation in\n vertices ready for uploading to the GPU.","sig":null,"attributes":[{"value":"! A mesh type dedicated to converting sequences of `render::Primitive`s to a representation in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174317,"byte_end":174413,"line_start":1,"line_end":1,"column_start":1,"column_end":97}},{"value":"! vertices ready for uploading to the GPU.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174414,"byte_end":174458,"line_start":2,"line_end":2,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174459,"byte_end":174462,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! While populating the vertices buffer ready for uploading to the GPU, the `Mesh` will also","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174463,"byte_end":174556,"line_start":4,"line_end":4,"column_start":1,"column_end":94}},{"value":"! produce a sequence of commands describing the order in which draw commands should occur and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174557,"byte_end":174652,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"! whether or not the `Scizzor` should be updated between draws.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174653,"byte_end":174718,"line_start":6,"line_end":6,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":687},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174919,"byte_end":174934,"line_start":14,"line_end":14,"column_start":11,"column_end":26},"name":"ImageDimensions","qualname":"::mesh::ImageDimensions","value":"ImageDimensions","parent":null,"children":[{"krate":0,"index":688}],"decl_id":null,"docs":" Images within the given image map must know their dimensions in pixels.\n","sig":null,"attributes":[{"value":"/ Images within the given image map must know their dimensions in pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174833,"byte_end":174908,"line_start":13,"line_end":13,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174991,"byte_end":175001,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::mesh::ImageDimensions::dimensions","value":"fn (&self) -> [u32; 2]","parent":{"krate":0,"index":687},"children":[],"decl_id":null,"docs":" The dimensions of the image in pixels.\n","sig":null,"attributes":[{"value":"/ The dimensions of the image in pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":174941,"byte_end":174983,"line_start":15,"line_end":15,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":5396},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175204,"byte_end":175208,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"Mesh","qualname":"::mesh::Mesh","value":"Mesh {  }","parent":null,"children":[{"krate":0,"index":5397},{"krate":0,"index":5398},{"krate":0,"index":5399},{"krate":0,"index":5400}],"decl_id":null,"docs":" A mesh whose vertices may be populated by a list of render primitives.","sig":null,"attributes":[{"value":"/ A mesh whose vertices may be populated by a list of render primitives.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175025,"byte_end":175099,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175100,"byte_end":175103,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is a convenience type for simplifying backend implementations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175104,"byte_end":175175,"line_start":21,"line_end":21,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":5403},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175450,"byte_end":175457,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"Scizzor","qualname":"::mesh::Scizzor","value":"Scizzor { top_left, dimensions }","parent":null,"children":[{"krate":0,"index":5404},{"krate":0,"index":5406}],"decl_id":null,"docs":" Represents the scizzor in pixel coordinates.\n","sig":null,"attributes":[{"value":"/ Represents the scizzor in pixel coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175345,"byte_end":175393,"line_start":30,"line_end":30,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":5404},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175568,"byte_end":175576,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"top_left","qualname":"::mesh::Scizzor::top_left","value":"[i32; 2]","parent":{"krate":0,"index":5403},"children":[],"decl_id":null,"docs":" The top left of the scizzor rectangle, where the top-left corner of the viewport is [0, 0].\n","sig":null,"attributes":[{"value":"/ The top left of the scizzor rectangle, where the top-left corner of the viewport is [0, 0].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175464,"byte_end":175559,"line_start":33,"line_end":33,"column_start":5,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":5406},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175642,"byte_end":175652,"line_start":36,"line_end":36,"column_start":9,"column_end":19},"name":"dimensions","qualname":"::mesh::Scizzor::dimensions","value":"[u32; 2]","parent":{"krate":0,"index":5403},"children":[],"decl_id":null,"docs":" The dimensions of the `Scizzor` rect.\n","sig":null,"attributes":[{"value":"/ The dimensions of the `Scizzor` rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175592,"byte_end":175633,"line_start":35,"line_end":35,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5425},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175800,"byte_end":175804,"line_start":43,"line_end":43,"column_start":5,"column_end":9},"name":"Draw","qualname":"::mesh::Command::Draw","value":"Command::Draw(Draw)","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Draw to the target.\n","sig":null,"attributes":[{"value":"/ Draw to the target.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175772,"byte_end":175795,"line_start":42,"line_end":42,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175864,"byte_end":175871,"line_start":45,"line_end":45,"column_start":5,"column_end":12},"name":"Scizzor","qualname":"::mesh::Command::Scizzor","value":"Command::Scizzor(Scizzor)","parent":{"krate":0,"index":5424},"children":[],"decl_id":null,"docs":" Update the scizzor within the pipeline.\n","sig":null,"attributes":[{"value":"/ Update the scizzor within the pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175816,"byte_end":175859,"line_start":44,"line_end":44,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":5424},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175758,"byte_end":175765,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"name":"Command","qualname":"::mesh::Command","value":"Command::{Draw, Scizzor}","parent":null,"children":[{"krate":0,"index":5425},{"krate":0,"index":5428}],"decl_id":null,"docs":" A `Command` describing a step in the drawing process.\n","sig":null,"attributes":[{"value":"/ A `Command` describing a step in the drawing process.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175667,"byte_end":175724,"line_start":39,"line_end":39,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":690},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175978,"byte_end":175986,"line_start":49,"line_end":49,"column_start":12,"column_end":20},"name":"Commands","qualname":"::mesh::Commands","value":"Commands {  }","parent":null,"children":[{"krate":0,"index":692}],"decl_id":null,"docs":" An iterator yielding `Command`s, produced by the `Renderer::commands` method.\n","sig":null,"attributes":[{"value":"/ An iterator yielding `Command`s, produced by the `Renderer::commands` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":175885,"byte_end":175966,"line_start":48,"line_end":48,"column_start":1,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176341,"byte_end":176346,"line_start":60,"line_end":60,"column_start":5,"column_end":10},"name":"Image","qualname":"::mesh::Draw::Image","value":"Draw::Image(image::Id, std::ops::Range<usize>)","parent":{"krate":0,"index":5435},"children":[],"decl_id":null,"docs":" A range of vertices representing triangles textured with the image in the\n image_map at the given `widget::Id`.\n","sig":null,"attributes":[{"value":"/ A range of vertices representing triangles textured with the image in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176214,"byte_end":176291,"line_start":58,"line_end":58,"column_start":5,"column_end":82}},{"value":"/ image_map at the given `widget::Id`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176296,"byte_end":176336,"line_start":59,"line_end":59,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5440},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176445,"byte_end":176450,"line_start":62,"line_end":62,"column_start":5,"column_end":10},"name":"Plain","qualname":"::mesh::Draw::Plain","value":"Draw::Plain(std::ops::Range<usize>)","parent":{"krate":0,"index":5435},"children":[],"decl_id":null,"docs":" A range of vertices representing plain triangles.\n","sig":null,"attributes":[{"value":"/ A range of vertices representing plain triangles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176387,"byte_end":176440,"line_start":61,"line_end":61,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":5435},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176203,"byte_end":176207,"line_start":57,"line_end":57,"column_start":10,"column_end":14},"name":"Draw","qualname":"::mesh::Draw","value":"Draw::{Image, Plain}","parent":null,"children":[{"krate":0,"index":5436},{"krate":0,"index":5440}],"decl_id":null,"docs":" A `Command` for drawing to the target.","sig":null,"attributes":[{"value":"/ A `Command` for drawing to the target.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176049,"byte_end":176091,"line_start":53,"line_end":53,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176092,"byte_end":176095,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Each variant describes how to draw the contents of the vertex buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176096,"byte_end":176169,"line_start":55,"line_end":55,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176609,"byte_end":176615,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"Vertex","qualname":"::mesh::Vertex","value":"Vertex { position, tex_coords, rgba, mode }","parent":null,"children":[{"krate":0,"index":5448},{"krate":0,"index":5450},{"krate":0,"index":5452},{"krate":0,"index":5454}],"decl_id":null,"docs":" The data associated with a single vertex.\n","sig":null,"attributes":[{"value":"/ The data associated with a single vertex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176479,"byte_end":176524,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176525,"byte_end":176535,"line_start":66,"line_end":66,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":5448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176837,"byte_end":176845,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"position","qualname":"::mesh::Vertex::position","value":"[f32; 2]","parent":{"krate":0,"index":5447},"children":[],"decl_id":null,"docs":" The normalised position of the vertex within vector space.","sig":null,"attributes":[{"value":"/ The normalised position of the vertex within vector space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176622,"byte_end":176684,"line_start":69,"line_end":69,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176689,"byte_end":176692,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ [-1.0, 1.0] is the leftmost, bottom position of the display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176697,"byte_end":176761,"line_start":71,"line_end":71,"column_start":5,"column_end":69}},{"value":"/ [1.0, -1.0] is the rightmost, top position of the display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176766,"byte_end":176828,"line_start":72,"line_end":72,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":5450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177069,"byte_end":177079,"line_start":78,"line_end":78,"column_start":9,"column_end":19},"name":"tex_coords","qualname":"::mesh::Vertex::tex_coords","value":"[f32; 2]","parent":{"krate":0,"index":5447},"children":[],"decl_id":null,"docs":" The coordinates of the texture used by this `Vertex`.","sig":null,"attributes":[{"value":"/ The coordinates of the texture used by this `Vertex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176861,"byte_end":176918,"line_start":74,"line_end":74,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176923,"byte_end":176926,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ [0.0, 0.0] is the leftmost, top position of the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176931,"byte_end":176991,"line_start":76,"line_end":76,"column_start":5,"column_end":65}},{"value":"/ [1.0, 1.0] is the rightmost, bottom position of the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":176996,"byte_end":177060,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":5452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177142,"byte_end":177146,"line_start":80,"line_end":80,"column_start":9,"column_end":13},"name":"rgba","qualname":"::mesh::Vertex::rgba","value":"[f32; 4]","parent":{"krate":0,"index":5447},"children":[],"decl_id":null,"docs":" Linear sRGB with an alpha channel.\n","sig":null,"attributes":[{"value":"/ Linear sRGB with an alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177095,"byte_end":177133,"line_start":79,"line_end":79,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":5454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177469,"byte_end":177473,"line_start":88,"line_end":88,"column_start":9,"column_end":13},"name":"mode","qualname":"::mesh::Vertex::mode","value":"u32","parent":{"krate":0,"index":5447},"children":[],"decl_id":null,"docs":" The mode with which the `Vertex` will be drawn within the fragment shader.","sig":null,"attributes":[{"value":"/ The mode with which the `Vertex` will be drawn within the fragment shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177162,"byte_end":177240,"line_start":81,"line_end":81,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177245,"byte_end":177248,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ `0` for rendering text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177253,"byte_end":177280,"line_start":83,"line_end":83,"column_start":5,"column_end":32}},{"value":"/ `1` for rendering an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177285,"byte_end":177316,"line_start":84,"line_end":84,"column_start":5,"column_end":36}},{"value":"/ `2` for rendering non-textured 2D geometry.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177321,"byte_end":177368,"line_start":85,"line_end":85,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177373,"byte_end":177376,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ If any other value is given, the fragment shader will not output any color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177381,"byte_end":177460,"line_start":87,"line_end":87,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":693},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177691,"byte_end":177695,"line_start":96,"line_end":96,"column_start":12,"column_end":16},"name":"Fill","qualname":"::mesh::Fill","value":"Fill { glyph_cache_requires_upload }","parent":null,"children":[{"krate":0,"index":694}],"decl_id":null,"docs":" The result of filling the mesh.","sig":null,"attributes":[{"value":"/ The result of filling the mesh.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177483,"byte_end":177518,"line_start":91,"line_end":91,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177519,"byte_end":177522,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Provides information on whether or not the glyph cache has been updated and requires","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177523,"byte_end":177611,"line_start":93,"line_end":93,"column_start":1,"column_end":89}},{"value":"/ re-uploading to the GPU.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177612,"byte_end":177640,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177641,"byte_end":177679,"line_start":95,"line_end":95,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":694},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177786,"byte_end":177813,"line_start":98,"line_end":98,"column_start":9,"column_end":36},"name":"glyph_cache_requires_upload","qualname":"::mesh::Fill::glyph_cache_requires_upload","value":"bool","parent":{"krate":0,"index":693},"children":[],"decl_id":null,"docs":" Whether or not the glyph cache pixel data should be written to the GPU.\n","sig":null,"attributes":[{"value":"/ Whether or not the glyph cache pixel data should be written to the GPU.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":177702,"byte_end":177777,"line_start":97,"line_end":97,"column_start":5,"column_end":80}}]},{"kind":"Const","id":{"krate":0,"index":698},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178178,"byte_end":178187,"line_start":112,"line_end":112,"column_start":11,"column_end":20},"name":"MODE_TEXT","qualname":"::mesh::MODE_TEXT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw text from the text cache texture `tex` in the fragment shader.\n","sig":null,"attributes":[{"value":"/ Draw text from the text cache texture `tex` in the fragment shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178096,"byte_end":178167,"line_start":111,"line_end":111,"column_start":1,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178276,"byte_end":178286,"line_start":114,"line_end":114,"column_start":11,"column_end":21},"name":"MODE_IMAGE","qualname":"::mesh::MODE_IMAGE","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw an image from the texture at `tex` in the fragment shader.\n","sig":null,"attributes":[{"value":"/ Draw an image from the texture at `tex` in the fragment shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178198,"byte_end":178265,"line_start":113,"line_end":113,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":700},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178362,"byte_end":178375,"line_start":116,"line_end":116,"column_start":11,"column_end":24},"name":"MODE_GEOMETRY","qualname":"::mesh::MODE_GEOMETRY","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Ignore `tex` and draw simple, colored 2D geometry.\n","sig":null,"attributes":[{"value":"/ Ignore `tex` and draw simple, colored 2D geometry.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178297,"byte_end":178351,"line_start":115,"line_end":115,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178448,"byte_end":178472,"line_start":119,"line_end":119,"column_start":11,"column_end":35},"name":"DEFAULT_GLYPH_CACHE_DIMS","qualname":"::mesh::DEFAULT_GLYPH_CACHE_DIMS","value":"[u32; 2]","parent":null,"children":[],"decl_id":null,"docs":" Default dimensions to use for the glyph cache.\n","sig":null,"attributes":[{"value":"/ Default dimensions to use for the glyph cache.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178387,"byte_end":178437,"line_start":118,"line_end":118,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178595,"byte_end":178598,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<Mesh>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new empty `Mesh` with default glyph cache dimensions.\n","sig":null,"attributes":[{"value":"/ Construct a new empty `Mesh` with default glyph cache dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178514,"byte_end":178583,"line_start":122,"line_end":122,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178763,"byte_end":178790,"line_start":128,"line_end":128,"column_start":12,"column_end":39},"name":"with_glyph_cache_dimensions","qualname":"<Mesh>::with_glyph_cache_dimensions","value":"fn (glyph_cache_dims: [u32; 2]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Mesh` with the given glyph cache dimensions.\n","sig":null,"attributes":[{"value":"/ Construct a `Mesh` with the given glyph cache dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178690,"byte_end":178751,"line_start":127,"line_end":127,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179989,"byte_end":179993,"line_start":157,"line_end":157,"column_start":12,"column_end":16},"name":"fill","qualname":"<Mesh>::fill","value":"fn <P, I> (&mut self, viewport: Rect, dpi_factor: f64, image_map: &image::Map<I>, mut primitives: P) -> Result<Fill, rt::gpu_cache::CacheWriteErr>","parent":null,"children":[],"decl_id":null,"docs":" Fill the inner vertex buffer from the given primitives.","sig":null,"attributes":[{"value":"/ Fill the inner vertex buffer from the given primitives.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179504,"byte_end":179563,"line_start":149,"line_end":149,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179568,"byte_end":179571,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ - `viewport`: the window in which the UI is drawn. The width and height should be the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179576,"byte_end":179665,"line_start":151,"line_end":151,"column_start":5,"column_end":94}},{"value":"/   physical size (pixels).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179670,"byte_end":179699,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/ - `dpi_factor`: the factor for converting from conrod's DPI agnostic point space to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179704,"byte_end":179795,"line_start":153,"line_end":153,"column_start":5,"column_end":96}},{"value":"/   pixel space of the viewport.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179800,"byte_end":179834,"line_start":154,"line_end":154,"column_start":5,"column_end":39}},{"value":"/ - `image_map`: a map from image IDs to images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179839,"byte_end":179889,"line_start":155,"line_end":155,"column_start":5,"column_end":55}},{"value":"/ - `primitives`: the sequence of UI primitives in order of depth to be rendered.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":179894,"byte_end":179977,"line_start":156,"line_end":156,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195379,"byte_end":195390,"line_start":532,"line_end":532,"column_start":12,"column_end":23},"name":"glyph_cache","qualname":"<Mesh>::glyph_cache","value":"fn (&self) -> &text::GlyphCache","parent":null,"children":[],"decl_id":null,"docs":" The rusttype glyph cache used for managing caching of glyphs into the pixel buffer.\n","sig":null,"attributes":[{"value":"/ The rusttype glyph cache used for managing caching of glyphs into the pixel buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195280,"byte_end":195367,"line_start":531,"line_end":531,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195560,"byte_end":195584,"line_start":537,"line_end":537,"column_start":12,"column_end":36},"name":"glyph_cache_pixel_buffer","qualname":"<Mesh>::glyph_cache_pixel_buffer","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" The CPU-side of the glyph cache, storing all necessary pixel data in a single slice.\n","sig":null,"attributes":[{"value":"/ The CPU-side of the glyph cache, storing all necessary pixel data in a single slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195460,"byte_end":195548,"line_start":536,"line_end":536,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195833,"byte_end":195841,"line_start":545,"line_end":545,"column_start":12,"column_end":20},"name":"commands","qualname":"<Mesh>::commands","value":"fn (&self) -> Commands","parent":null,"children":[],"decl_id":null,"docs":" Produce an `Iterator` yielding `Command`s.","sig":null,"attributes":[{"value":"/ Produce an `Iterator` yielding `Command`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195653,"byte_end":195699,"line_start":541,"line_end":541,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195704,"byte_end":195707,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ These commands describe the order in which unique draw commands and scizzor updates should","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195712,"byte_end":195806,"line_start":543,"line_end":543,"column_start":5,"column_end":99}},{"value":"/ occur.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":195811,"byte_end":195821,"line_start":544,"line_end":544,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196200,"byte_end":196208,"line_start":558,"line_end":558,"column_start":12,"column_end":20},"name":"vertices","qualname":"<Mesh>::vertices","value":"fn (&self) -> &[Vertex]","parent":null,"children":[],"decl_id":null,"docs":" The slice containing all `vertices` produced by the `fill` function.","sig":null,"attributes":[{"value":"/ The slice containing all `vertices` produced by the `fill` function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196021,"byte_end":196093,"line_start":555,"line_end":555,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196098,"byte_end":196101,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ Note that these vertices may be represent geometry across multiple `Command`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196106,"byte_end":196188,"line_start":557,"line_end":557,"column_start":5,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"position","qualname":"::position","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":799},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":5560},{"krate":0,"index":5575},{"krate":0,"index":5573},{"krate":0,"index":5571},{"krate":0,"index":5568},{"krate":0,"index":5569},{"krate":0,"index":5565},{"krate":0,"index":5566},{"krate":0,"index":5576},{"krate":0,"index":5592},{"krate":0,"index":5590},{"krate":0,"index":5588},{"krate":0,"index":5584},{"krate":0,"index":5585},{"krate":0,"index":5593},{"krate":0,"index":5615},{"krate":0,"index":5613},{"krate":0,"index":5611},{"krate":0,"index":5607},{"krate":0,"index":5608},{"krate":0,"index":5616},{"krate":0,"index":5631},{"krate":0,"index":5629},{"krate":0,"index":5627},{"krate":0,"index":5624},{"krate":0,"index":5625},{"krate":0,"index":5621},{"krate":0,"index":5622},{"krate":0,"index":5632},{"krate":0,"index":5649},{"krate":0,"index":5647},{"krate":0,"index":5645},{"krate":0,"index":5642},{"krate":0,"index":5643},{"krate":0,"index":5639},{"krate":0,"index":5640},{"krate":0,"index":5650},{"krate":0,"index":5667},{"krate":0,"index":5665},{"krate":0,"index":5663},{"krate":0,"index":5659},{"krate":0,"index":5660},{"krate":0,"index":5668},{"krate":0,"index":5688},{"krate":0,"index":5686},{"krate":0,"index":5684},{"krate":0,"index":5680},{"krate":0,"index":5681},{"krate":0,"index":879},{"krate":0,"index":978},{"krate":0,"index":5689},{"krate":0,"index":5700},{"krate":0,"index":5698},{"krate":0,"index":5696},{"krate":0,"index":5692},{"krate":0,"index":5693},{"krate":0,"index":1010}],"decl_id":null,"docs":" Items related to 2D positioning, used throughout conrod.\n","sig":null,"attributes":[{"value":"! Items related to 2D positioning, used throughout conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197738,"byte_end":197798,"line_start":1,"line_end":1,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":766},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::position::range","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":5500},{"krate":0,"index":5511},{"krate":0,"index":5509},{"krate":0,"index":5507},{"krate":0,"index":5503},{"krate":0,"index":5504},{"krate":0,"index":5512},{"krate":0,"index":5527},{"krate":0,"index":5525},{"krate":0,"index":5523},{"krate":0,"index":5520},{"krate":0,"index":5521},{"krate":0,"index":5517},{"krate":0,"index":5518},{"krate":0,"index":768}],"decl_id":null,"docs":" A type for working one-dimensional ranges.\n","sig":null,"attributes":[{"value":"! A type for working one-dimensional ranges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230066,"byte_end":230112,"line_start":1,"line_end":1,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":5500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230361,"byte_end":230366,"line_start":12,"line_end":12,"column_start":12,"column_end":17},"name":"Range","qualname":"::position::range::Range","value":"Range { start, end }","parent":null,"children":[{"krate":0,"index":5501},{"krate":0,"index":5502}],"decl_id":null,"docs":" Some start and end position along a single axis.","sig":null,"attributes":[{"value":"/ Some start and end position along a single axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230136,"byte_end":230188,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230189,"byte_end":230192,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ As an example, a **Rect** is made up of two **Range**s; one along the *x* axis, and one along","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230193,"byte_end":230290,"line_start":9,"line_end":9,"column_start":1,"column_end":98}},{"value":"/ the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230291,"byte_end":230308,"line_start":10,"line_end":10,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":5501},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230426,"byte_end":230431,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"start","qualname":"::position::range::Range::start","value":"f64","parent":{"krate":0,"index":5500},"children":[],"decl_id":null,"docs":" The start of some `Range` along an axis.\n","sig":null,"attributes":[{"value":"/ The start of some `Range` along an axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230373,"byte_end":230417,"line_start":13,"line_end":13,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":5502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230496,"byte_end":230499,"line_start":16,"line_end":16,"column_start":9,"column_end":12},"name":"end","qualname":"::position::range::Range::end","value":"f64","parent":{"krate":0,"index":5500},"children":[],"decl_id":null,"docs":" The end of some `Range` along an axis.\n","sig":null,"attributes":[{"value":"/ The end of some `Range` along an axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230445,"byte_end":230487,"line_start":15,"line_end":15,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5513},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230687,"byte_end":230692,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Start","qualname":"::position::range::Edge::Start","value":"Edge::Start","parent":{"krate":0,"index":5512},"children":[],"decl_id":null,"docs":" The beginning of a **Range**.\n","sig":null,"attributes":[{"value":"/ The beginning of a **Range**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230649,"byte_end":230682,"line_start":22,"line_end":22,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5515},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230730,"byte_end":230733,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"End","qualname":"::position::range::Edge::End","value":"Edge::End","parent":{"krate":0,"index":5512},"children":[],"decl_id":null,"docs":" The end of a **Range**.\n","sig":null,"attributes":[{"value":"/ The end of a **Range**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230698,"byte_end":230725,"line_start":24,"line_end":24,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":5512},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230638,"byte_end":230642,"line_start":21,"line_end":21,"column_start":10,"column_end":14},"name":"Edge","qualname":"::position::range::Edge","value":"Edge::{Start, End}","parent":null,"children":[{"krate":0,"index":5513},{"krate":0,"index":5515}],"decl_id":null,"docs":" Represents either the **Start** or **End** **Edge** of a **Range**.\n","sig":null,"attributes":[{"value":"/ Represents either the **Start** or **End** **Edge** of a **Range**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230512,"byte_end":230583,"line_start":19,"line_end":19,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231022,"byte_end":231025,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<Range>::new","value":"fn (start: Scalar, end: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Range` from a given range, i.e. `Range::new(start, end)`.","sig":null,"attributes":[{"value":"/ Construct a new `Range` from a given range, i.e. `Range::new(start, end)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230757,"byte_end":230835,"line_start":31,"line_end":31,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230840,"byte_end":230843,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230848,"byte_end":230862,"line_start":33,"line_end":33,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230867,"byte_end":230870,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230875,"byte_end":230882,"line_start":35,"line_end":35,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230887,"byte_end":230914,"line_start":36,"line_end":36,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230919,"byte_end":230922,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range { start: 0.0, end: 10.0 }, Range::new(0.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230927,"byte_end":230998,"line_start":38,"line_end":38,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231003,"byte_end":231010,"line_start":39,"line_end":39,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231578,"byte_end":231594,"line_start":58,"line_end":58,"column_start":12,"column_end":28},"name":"from_pos_and_len","qualname":"<Range>::from_pos_and_len","value":"fn (pos: Scalar, len: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Range` from a given length and its centered position.","sig":null,"attributes":[{"value":"/ Construct a new `Range` from a given length and its centered position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231150,"byte_end":231224,"line_start":47,"line_end":47,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231229,"byte_end":231232,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231237,"byte_end":231251,"line_start":49,"line_end":49,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231256,"byte_end":231259,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231264,"byte_end":231271,"line_start":51,"line_end":51,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231276,"byte_end":231303,"line_start":52,"line_end":52,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231308,"byte_end":231311,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 10.0), Range::from_pos_and_len(5.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231316,"byte_end":231390,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(Range::new(-5.0, 1.0), Range::from_pos_and_len(-2.0, 6.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231395,"byte_end":231469,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(Range::new(-100.0, 200.0), Range::from_pos_and_len(50.0, 300.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231474,"byte_end":231554,"line_start":56,"line_end":56,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231559,"byte_end":231566,"line_start":57,"line_end":57,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232128,"byte_end":232137,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"magnitude","qualname":"<Range>::magnitude","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The `start` value subtracted from the `end` value.","sig":null,"attributes":[{"value":"/ The `start` value subtracted from the `end` value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231778,"byte_end":231832,"line_start":65,"line_end":65,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231837,"byte_end":231840,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231845,"byte_end":231859,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231864,"byte_end":231867,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231872,"byte_end":231879,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231884,"byte_end":231911,"line_start":70,"line_end":70,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231916,"byte_end":231919,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(-5.0, 5.0).magnitude(), 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231924,"byte_end":231980,"line_start":72,"line_end":72,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Range::new(5.0, -5.0).magnitude(), -10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":231985,"byte_end":232042,"line_start":73,"line_end":73,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Range::new(15.0, 10.0).magnitude(), -5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232047,"byte_end":232104,"line_start":74,"line_end":74,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232109,"byte_end":232116,"line_start":75,"line_end":75,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232538,"byte_end":232541,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"len","qualname":"<Range>::len","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The absolute length of the Range aka the absolute magnitude.","sig":null,"attributes":[{"value":"/ The absolute length of the Range aka the absolute magnitude.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232198,"byte_end":232262,"line_start":80,"line_end":80,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232267,"byte_end":232270,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232275,"byte_end":232289,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232294,"byte_end":232297,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232302,"byte_end":232309,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232314,"byte_end":232341,"line_start":85,"line_end":85,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232346,"byte_end":232349,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(-5.0, 5.0).len(), 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232354,"byte_end":232404,"line_start":87,"line_end":87,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(Range::new(5.0, -5.0).len(), 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232409,"byte_end":232459,"line_start":88,"line_end":88,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(Range::new(15.0, 10.0).len(), 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232464,"byte_end":232514,"line_start":89,"line_end":89,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232519,"byte_end":232526,"line_start":90,"line_end":90,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233070,"byte_end":233076,"line_start":108,"line_end":108,"column_start":12,"column_end":18},"name":"middle","qualname":"<Range>::middle","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Return the value directly between the start and end values.","sig":null,"attributes":[{"value":"/ Return the value directly between the start and end values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232603,"byte_end":232666,"line_start":95,"line_end":95,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232671,"byte_end":232674,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232679,"byte_end":232693,"line_start":97,"line_end":97,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232698,"byte_end":232701,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232706,"byte_end":232713,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232718,"byte_end":232745,"line_start":100,"line_end":100,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232750,"byte_end":232753,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(-5.0, 5.0).middle(), 0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232758,"byte_end":232810,"line_start":102,"line_end":102,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Range::new(5.0, -5.0).middle(), 0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232815,"byte_end":232867,"line_start":103,"line_end":103,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Range::new(10.0, 15.0).middle(), 12.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232872,"byte_end":232926,"line_start":104,"line_end":104,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(Range::new(20.0, 40.0).middle(), 30.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232931,"byte_end":232985,"line_start":105,"line_end":105,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(Range::new(20.0, -40.0).middle(), -10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":232990,"byte_end":233046,"line_start":106,"line_end":106,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233051,"byte_end":233058,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233618,"byte_end":233624,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"invert","qualname":"<Range>::invert","value":"fn (self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" The current range with its start and end values swapped.","sig":null,"attributes":[{"value":"/ The current range with its start and end values swapped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233145,"byte_end":233205,"line_start":112,"line_end":112,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233210,"byte_end":233213,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233218,"byte_end":233232,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233237,"byte_end":233240,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233245,"byte_end":233252,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233257,"byte_end":233284,"line_start":117,"line_end":117,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233289,"byte_end":233292,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(-5.0, 5.0).invert(), Range::new(5.0, -5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233297,"byte_end":233367,"line_start":119,"line_end":119,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(Range::new(-10.0, 10.0).invert(), Range::new(10.0, -10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233372,"byte_end":233446,"line_start":120,"line_end":120,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(Range::new(0.0, 7.25).invert(), Range::new(7.25, 0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233451,"byte_end":233521,"line_start":121,"line_end":121,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(Range::new(5.0, 1.0).invert(), Range::new(1.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233526,"byte_end":233594,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233599,"byte_end":233606,"line_start":123,"line_end":123,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234528,"byte_end":234540,"line_start":151,"line_end":151,"column_start":12,"column_end":24},"name":"map_value_to","qualname":"<Range>::map_value_to","value":"fn (&self, value: Scalar, other: &Range) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Map the given Scalar from `Self` to some other given `Range`.","sig":null,"attributes":[{"value":"/ Map the given Scalar from `Self` to some other given `Range`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233704,"byte_end":233769,"line_start":128,"line_end":128,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233774,"byte_end":233777,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233782,"byte_end":233796,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233801,"byte_end":233804,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233809,"byte_end":233816,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233821,"byte_end":233848,"line_start":133,"line_end":133,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233853,"byte_end":233856,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(0.0, 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233861,"byte_end":233894,"line_start":135,"line_end":135,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233899,"byte_end":233902,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ let b = Range::new(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233907,"byte_end":233941,"line_start":137,"line_end":137,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.map_value_to(2.5, &b), 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233946,"byte_end":233991,"line_start":138,"line_end":138,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(a.map_value_to(0.0, &b), 0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":233996,"byte_end":234041,"line_start":139,"line_end":139,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(a.map_value_to(5.0, &b), 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234046,"byte_end":234092,"line_start":140,"line_end":140,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(a.map_value_to(-5.0, &b), -10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234097,"byte_end":234145,"line_start":141,"line_end":141,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(a.map_value_to(10.0, &b), 20.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234150,"byte_end":234197,"line_start":142,"line_end":142,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234202,"byte_end":234205,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(10.0, -10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234210,"byte_end":234246,"line_start":144,"line_end":144,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(a.map_value_to(2.5, &c), 0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234251,"byte_end":234296,"line_start":145,"line_end":145,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(a.map_value_to(0.0, &c), 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234301,"byte_end":234347,"line_start":146,"line_end":146,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(a.map_value_to(5.0, &c), -10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234352,"byte_end":234399,"line_start":147,"line_end":147,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(a.map_value_to(-5.0, &c), 30.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234404,"byte_end":234451,"line_start":148,"line_end":148,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(a.map_value_to(10.0, &c), -30.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234456,"byte_end":234504,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234509,"byte_end":234516,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235087,"byte_end":235092,"line_start":166,"line_end":166,"column_start":12,"column_end":17},"name":"shift","qualname":"<Range>::shift","value":"fn (self, amount: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Shift the `Range` start and end points by a given `Scalar`.","sig":null,"attributes":[{"value":"/ Shift the `Range` start and end points by a given `Scalar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234681,"byte_end":234744,"line_start":155,"line_end":155,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234749,"byte_end":234752,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234757,"byte_end":234771,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234776,"byte_end":234779,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234784,"byte_end":234791,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234796,"byte_end":234823,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234828,"byte_end":234831,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 5.0).shift(5.0), Range::new(5.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234836,"byte_end":234907,"line_start":162,"line_end":162,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(Range::new(0.0, 5.0).shift(-5.0), Range::new(-5.0, 0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234912,"byte_end":234984,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(Range::new(5.0, -5.0).shift(-5.0), Range::new(0.0, -10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":234989,"byte_end":235063,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235068,"byte_end":235075,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235562,"byte_end":235571,"line_start":181,"line_end":181,"column_start":12,"column_end":21},"name":"direction","qualname":"<Range>::direction","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The direction of the Range represented as a normalised scalar.","sig":null,"attributes":[{"value":"/ The direction of the Range represented as a normalised scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235206,"byte_end":235272,"line_start":170,"line_end":170,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235277,"byte_end":235280,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235285,"byte_end":235299,"line_start":172,"line_end":172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235304,"byte_end":235307,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235312,"byte_end":235319,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235324,"byte_end":235351,"line_start":175,"line_end":175,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235356,"byte_end":235359,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 5.0).direction(), 1.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235364,"byte_end":235418,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(Range::new(0.0, 0.0).direction(), 0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235423,"byte_end":235477,"line_start":178,"line_end":178,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(Range::new(0.0, -5.0).direction(), -1.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235482,"byte_end":235538,"line_start":179,"line_end":179,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235543,"byte_end":235550,"line_start":180,"line_end":180,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236253,"byte_end":236263,"line_start":200,"line_end":200,"column_start":12,"column_end":22},"name":"undirected","qualname":"<Range>::undirected","value":"fn (self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Converts the Range to an undirected Range. By ensuring that `start` <= `end`.","sig":null,"attributes":[{"value":"/ Converts the Range to an undirected Range. By ensuring that `start` <= `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235741,"byte_end":235822,"line_start":187,"line_end":187,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235827,"byte_end":235830,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ If `start` > `end`, then the start and end points will be swapped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235835,"byte_end":235905,"line_start":189,"line_end":189,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235910,"byte_end":235913,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235918,"byte_end":235932,"line_start":191,"line_end":191,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235937,"byte_end":235940,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235945,"byte_end":235952,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235957,"byte_end":235984,"line_start":194,"line_end":194,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235989,"byte_end":235992,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 5.0).undirected(), Range::new(0.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":235997,"byte_end":236069,"line_start":196,"line_end":196,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(Range::new(5.0, 1.0).undirected(), Range::new(1.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236074,"byte_end":236146,"line_start":197,"line_end":197,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(Range::new(10.0, -10.0).undirected(), Range::new(-10.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236151,"byte_end":236229,"line_start":198,"line_end":198,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236234,"byte_end":236241,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236876,"byte_end":236879,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"max","qualname":"<Range>::max","value":"fn (self, other: Self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" The Range that encompasses both self and the given Range.","sig":null,"attributes":[{"value":"/ The Range that encompasses both self and the given Range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236357,"byte_end":236418,"line_start":204,"line_end":204,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236423,"byte_end":236426,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The returned Range's `start` will always be <= its `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236431,"byte_end":236492,"line_start":206,"line_end":206,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236497,"byte_end":236500,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236505,"byte_end":236519,"line_start":208,"line_end":208,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236524,"byte_end":236527,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236532,"byte_end":236539,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236544,"byte_end":236571,"line_start":211,"line_end":211,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236576,"byte_end":236579,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(0.0, 3.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236584,"byte_end":236617,"line_start":213,"line_end":213,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(7.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236622,"byte_end":236656,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.max(b), Range::new(0.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236661,"byte_end":236709,"line_start":215,"line_end":215,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236714,"byte_end":236717,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(-20.0, -30.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236722,"byte_end":236759,"line_start":217,"line_end":217,"column_start":5,"column_end":42}},{"value":"/ let d = Range::new(5.0, -7.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236764,"byte_end":236798,"line_start":218,"line_end":218,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(c.max(d), Range::new(-30.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236803,"byte_end":236852,"line_start":219,"line_end":219,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":236857,"byte_end":236864,"line_start":220,"line_end":220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238159,"byte_end":238166,"line_start":253,"line_end":253,"column_start":12,"column_end":19},"name":"overlap","qualname":"<Range>::overlap","value":"fn (mut self, mut other: Self) -> Option<Range>","parent":null,"children":[],"decl_id":null,"docs":" The Range that represents the range of the overlap between two Ranges if there is some.","sig":null,"attributes":[{"value":"/ The Range that represents the range of the overlap between two Ranges if there is some.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237106,"byte_end":237197,"line_start":227,"line_end":227,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237202,"byte_end":237205,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Note that If one end of `self` aligns exactly with the opposite end of `other`, `Some`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237210,"byte_end":237300,"line_start":229,"line_end":229,"column_start":5,"column_end":95}},{"value":"/ `Range` will be returned with a magnitude of `0.0`. This is useful for algorithms that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237305,"byte_end":237395,"line_start":230,"line_end":230,"column_start":5,"column_end":95}},{"value":"/ involve calculating the visibility of widgets, as it allows for including widgets whose","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237400,"byte_end":237491,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ bounding box may be a one dimensional straight line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237496,"byte_end":237552,"line_start":232,"line_end":232,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237557,"byte_end":237560,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The returned `Range`'s `start` will always be <= its `end`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237565,"byte_end":237628,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237633,"byte_end":237636,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237641,"byte_end":237655,"line_start":236,"line_end":236,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237660,"byte_end":237663,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237668,"byte_end":237675,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237680,"byte_end":237707,"line_start":239,"line_end":239,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237712,"byte_end":237715,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(0.0, 6.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237720,"byte_end":237753,"line_start":241,"line_end":241,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(4.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237758,"byte_end":237792,"line_start":242,"line_end":242,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.overlap(b), Some(Range::new(4.0, 6.0)));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237797,"byte_end":237854,"line_start":243,"line_end":243,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237859,"byte_end":237862,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(10.0, -30.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237867,"byte_end":237903,"line_start":245,"line_end":245,"column_start":5,"column_end":41}},{"value":"/ let d = Range::new(-5.0, 20.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237908,"byte_end":237943,"line_start":246,"line_end":246,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(c.overlap(d), Some(Range::new(-5.0, 10.0)));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":237948,"byte_end":238007,"line_start":247,"line_end":247,"column_start":5,"column_end":64}},{"value":"/ ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238012,"byte_end":238016,"line_start":248,"line_end":248,"column_start":5,"column_end":9}},{"value":"/ let e = Range::new(0.0, 2.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238021,"byte_end":238054,"line_start":249,"line_end":249,"column_start":5,"column_end":38}},{"value":"/ let f = Range::new(50.0, 100.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238059,"byte_end":238095,"line_start":250,"line_end":250,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(e.overlap(f), None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238100,"byte_end":238135,"line_start":251,"line_end":251,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238140,"byte_end":238147,"line_start":252,"line_end":252,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239158,"byte_end":239170,"line_start":284,"line_end":284,"column_start":12,"column_end":24},"name":"max_directed","qualname":"<Range>::max_directed","value":"fn (self, other: Self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" The Range that encompasses both self and the given Range.","sig":null,"attributes":[{"value":"/ The Range that encompasses both self and the given Range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238574,"byte_end":238635,"line_start":266,"line_end":266,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238640,"byte_end":238643,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ The same as [**Range::max**](./struct.Range#method.max) but retains `self`'s original","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238648,"byte_end":238737,"line_start":268,"line_end":268,"column_start":5,"column_end":94}},{"value":"/ direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238742,"byte_end":238756,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238761,"byte_end":238764,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238769,"byte_end":238783,"line_start":271,"line_end":271,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238788,"byte_end":238791,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238796,"byte_end":238803,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238808,"byte_end":238835,"line_start":274,"line_end":274,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238840,"byte_end":238843,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(0.0, 3.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238848,"byte_end":238881,"line_start":276,"line_end":276,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(7.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238886,"byte_end":238920,"line_start":277,"line_end":277,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.max_directed(b), Range::new(0.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238925,"byte_end":238982,"line_start":278,"line_end":278,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238987,"byte_end":238990,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(-20.0, -30.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":238995,"byte_end":239032,"line_start":280,"line_end":280,"column_start":5,"column_end":42}},{"value":"/ let d = Range::new(5.0, -7.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239037,"byte_end":239071,"line_start":281,"line_end":281,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(c.max_directed(d), Range::new(5.0, -30.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239076,"byte_end":239134,"line_start":282,"line_end":282,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239139,"byte_end":239146,"line_start":283,"line_end":283,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239714,"byte_end":239721,"line_start":303,"line_end":303,"column_start":12,"column_end":19},"name":"is_over","qualname":"<Range>::is_over","value":"fn (&self, pos: Scalar) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the given scalar within our range.","sig":null,"attributes":[{"value":"/ Is the given scalar within our range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239329,"byte_end":239370,"line_start":289,"line_end":289,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239375,"byte_end":239378,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239383,"byte_end":239397,"line_start":291,"line_end":291,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239402,"byte_end":239405,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239410,"byte_end":239417,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239422,"byte_end":239449,"line_start":294,"line_end":294,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239454,"byte_end":239457,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ let range = Range::new(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239462,"byte_end":239500,"line_start":296,"line_end":296,"column_start":5,"column_end":43}},{"value":"/ assert!(range.is_over(5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239505,"byte_end":239537,"line_start":297,"line_end":297,"column_start":5,"column_end":37}},{"value":"/ assert!(!range.is_over(12.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239542,"byte_end":239576,"line_start":298,"line_end":298,"column_start":5,"column_end":39}},{"value":"/ assert!(!range.is_over(-1.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239581,"byte_end":239615,"line_start":299,"line_end":299,"column_start":5,"column_end":39}},{"value":"/ assert!(range.is_over(0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239620,"byte_end":239652,"line_start":300,"line_end":300,"column_start":5,"column_end":37}},{"value":"/ assert!(range.is_over(10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239657,"byte_end":239690,"line_start":301,"line_end":301,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239695,"byte_end":239702,"line_start":302,"line_end":302,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240181,"byte_end":240186,"line_start":318,"line_end":318,"column_start":12,"column_end":17},"name":"round","qualname":"<Range>::round","value":"fn (self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Round the values at both ends of the Range and return the result.","sig":null,"attributes":[{"value":"/ Round the values at both ends of the Range and return the result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239852,"byte_end":239921,"line_start":308,"line_end":308,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239926,"byte_end":239929,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239934,"byte_end":239948,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239953,"byte_end":239956,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239961,"byte_end":239968,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":239973,"byte_end":240000,"line_start":313,"line_end":313,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240005,"byte_end":240008,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.25, 9.5).round(), Range::new(0.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240013,"byte_end":240082,"line_start":315,"line_end":315,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Range::new(4.95, -5.3).round(), Range::new(5.0, -5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240087,"byte_end":240157,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240162,"byte_end":240169,"line_start":317,"line_end":317,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240600,"byte_end":240605,"line_start":332,"line_end":332,"column_start":12,"column_end":17},"name":"floor","qualname":"<Range>::floor","value":"fn (self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Floor the values at both ends of the Range and return the result.","sig":null,"attributes":[{"value":"/ Floor the values at both ends of the Range and return the result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240272,"byte_end":240341,"line_start":322,"line_end":322,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240346,"byte_end":240349,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240354,"byte_end":240368,"line_start":324,"line_end":324,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240373,"byte_end":240376,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240381,"byte_end":240388,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240393,"byte_end":240420,"line_start":327,"line_end":327,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240425,"byte_end":240428,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.25, 9.5).floor(), Range::new(0.0, 9.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240433,"byte_end":240501,"line_start":329,"line_end":329,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(Range::new(4.95, -5.3).floor(), Range::new(4.0, -6.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240506,"byte_end":240576,"line_start":330,"line_end":330,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240581,"byte_end":240588,"line_start":331,"line_end":331,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241022,"byte_end":241031,"line_start":346,"line_end":346,"column_start":12,"column_end":21},"name":"pad_start","qualname":"<Range>::pad_start","value":"fn (mut self, pad: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" The Range with some padding given to the `start` value.","sig":null,"attributes":[{"value":"/ The Range with some padding given to the `start` value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240691,"byte_end":240750,"line_start":336,"line_end":336,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240755,"byte_end":240758,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240763,"byte_end":240777,"line_start":338,"line_end":338,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240782,"byte_end":240785,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240790,"byte_end":240797,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240802,"byte_end":240829,"line_start":341,"line_end":341,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240834,"byte_end":240837,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 10.0).pad_start(2.0), Range::new(2.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240842,"byte_end":240918,"line_start":343,"line_end":343,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(Range::new(10.0, 0.0).pad_start(2.0), Range::new(8.0, 0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":240923,"byte_end":240998,"line_start":344,"line_end":344,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241003,"byte_end":241010,"line_start":345,"line_end":345,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241486,"byte_end":241493,"line_start":361,"line_end":361,"column_start":12,"column_end":19},"name":"pad_end","qualname":"<Range>::pad_end","value":"fn (mut self, pad: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" The Range with some padding given to the `end` value.","sig":null,"attributes":[{"value":"/ The Range with some padding given to the `end` value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241161,"byte_end":241218,"line_start":351,"line_end":351,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241223,"byte_end":241226,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241231,"byte_end":241245,"line_start":353,"line_end":353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241250,"byte_end":241253,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241258,"byte_end":241265,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241270,"byte_end":241297,"line_start":356,"line_end":356,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241302,"byte_end":241305,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 10.0).pad_end(2.0), Range::new(0.0, 8.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241310,"byte_end":241383,"line_start":358,"line_end":358,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(Range::new(10.0, 0.0).pad_end(2.0), Range::new(10.0, 2.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241388,"byte_end":241462,"line_start":359,"line_end":359,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241467,"byte_end":241474,"line_start":360,"line_end":360,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241944,"byte_end":241947,"line_start":376,"line_end":376,"column_start":12,"column_end":15},"name":"pad","qualname":"<Range>::pad","value":"fn (self, pad: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" The Range with some given padding to be applied to each end.","sig":null,"attributes":[{"value":"/ The Range with some given padding to be applied to each end.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241621,"byte_end":241685,"line_start":366,"line_end":366,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241690,"byte_end":241693,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241698,"byte_end":241712,"line_start":368,"line_end":368,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241717,"byte_end":241720,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241725,"byte_end":241732,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241737,"byte_end":241764,"line_start":371,"line_end":371,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241769,"byte_end":241772,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 10.0).pad(2.0), Range::new(2.0, 8.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241777,"byte_end":241846,"line_start":373,"line_end":373,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Range::new(10.0, 0.0).pad(2.0), Range::new(8.0, 2.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241851,"byte_end":241920,"line_start":374,"line_end":374,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":241925,"byte_end":241932,"line_start":375,"line_end":375,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242360,"byte_end":242368,"line_start":390,"line_end":390,"column_start":12,"column_end":20},"name":"pad_ends","qualname":"<Range>::pad_ends","value":"fn (self, start: Scalar, end: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" The Range with some padding given for each end.","sig":null,"attributes":[{"value":"/ The Range with some padding given for each end.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242030,"byte_end":242081,"line_start":380,"line_end":380,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242086,"byte_end":242089,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242094,"byte_end":242108,"line_start":382,"line_end":382,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242113,"byte_end":242116,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242121,"byte_end":242128,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242133,"byte_end":242160,"line_start":385,"line_end":385,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242165,"byte_end":242168,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 10.0).pad_ends(1.0, 2.0), Range::new(1.0, 8.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242173,"byte_end":242252,"line_start":387,"line_end":387,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Range::new(10.0, 0.0).pad_ends(4.0, 3.0), Range::new(6.0, 3.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242257,"byte_end":242336,"line_start":388,"line_end":388,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242341,"byte_end":242348,"line_start":389,"line_end":389,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242814,"byte_end":242825,"line_start":405,"line_end":405,"column_start":12,"column_end":23},"name":"clamp_value","qualname":"<Range>::clamp_value","value":"fn (&self, value: Scalar) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Clamp the given value to the range.","sig":null,"attributes":[{"value":"/ Clamp the given value to the range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242468,"byte_end":242507,"line_start":394,"line_end":394,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242512,"byte_end":242515,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242520,"byte_end":242534,"line_start":396,"line_end":396,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242539,"byte_end":242542,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242547,"byte_end":242554,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242559,"byte_end":242586,"line_start":399,"line_end":399,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242591,"byte_end":242594,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 5.0).clamp_value(7.0), 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242599,"byte_end":242658,"line_start":401,"line_end":401,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Range::new(5.0, -2.5).clamp_value(-3.0), -2.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242663,"byte_end":242725,"line_start":402,"line_end":402,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(Range::new(5.0, 10.0).clamp_value(0.0), 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242730,"byte_end":242790,"line_start":403,"line_end":403,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242795,"byte_end":242802,"line_start":404,"line_end":404,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243570,"byte_end":243586,"line_start":426,"line_end":426,"column_start":12,"column_end":28},"name":"stretch_to_value","qualname":"<Range>::stretch_to_value","value":"fn (self, value: Scalar) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Stretch the end that is closest to the given value only if it lies outside the Range.","sig":null,"attributes":[{"value":"/ Stretch the end that is closest to the given value only if it lies outside the Range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":242923,"byte_end":243012,"line_start":409,"line_end":409,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243017,"byte_end":243020,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ The resulting Range will retain the direction of the original range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243025,"byte_end":243097,"line_start":411,"line_end":411,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243102,"byte_end":243105,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243110,"byte_end":243124,"line_start":413,"line_end":413,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243129,"byte_end":243132,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243137,"byte_end":243144,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243149,"byte_end":243176,"line_start":416,"line_end":416,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243181,"byte_end":243184,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(2.5, 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243189,"byte_end":243222,"line_start":418,"line_end":418,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(a.stretch_to_value(10.0), Range::new(2.5, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243227,"byte_end":243291,"line_start":419,"line_end":419,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(a.stretch_to_value(0.0), Range::new(0.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243296,"byte_end":243358,"line_start":420,"line_end":420,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243363,"byte_end":243366,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ let b = Range::new(0.0, -5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243371,"byte_end":243405,"line_start":422,"line_end":422,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(b.stretch_to_value(10.0), Range::new(10.0, -5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243410,"byte_end":243475,"line_start":423,"line_end":423,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b.stretch_to_value(-10.0), Range::new(0.0, -10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243480,"byte_end":243546,"line_start":424,"line_end":424,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":243551,"byte_end":243558,"line_start":425,"line_end":425,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244581,"byte_end":244599,"line_start":458,"line_end":458,"column_start":12,"column_end":30},"name":"has_same_direction","qualname":"<Range>::has_same_direction","value":"fn (self, other: Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does `self` have the same direction as `other`.","sig":null,"attributes":[{"value":"/ Does `self` have the same direction as `other`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244170,"byte_end":244221,"line_start":447,"line_end":447,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244226,"byte_end":244229,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244234,"byte_end":244248,"line_start":449,"line_end":449,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244253,"byte_end":244256,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244261,"byte_end":244268,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244273,"byte_end":244300,"line_start":452,"line_end":452,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244305,"byte_end":244308,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert!(Range::new(0.0, 1.0).has_same_direction(Range::new(100.0, 200.0)));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244313,"byte_end":244392,"line_start":454,"line_end":454,"column_start":5,"column_end":84}},{"value":"/ assert!(Range::new(0.0, -5.0).has_same_direction(Range::new(-2.5, -6.0)));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244397,"byte_end":244475,"line_start":455,"line_end":455,"column_start":5,"column_end":83}},{"value":"/ assert!(!Range::new(0.0, 5.0).has_same_direction(Range::new(2.5, -2.5)));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244480,"byte_end":244557,"line_start":456,"line_end":456,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244562,"byte_end":244569,"line_start":457,"line_end":457,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245534,"byte_end":245548,"line_start":484,"line_end":484,"column_start":12,"column_end":26},"name":"align_start_of","qualname":"<Range>::align_start_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the `start` of `self` to the `start` of the `other` **Range**.","sig":null,"attributes":[{"value":"/ Align the `start` of `self` to the `start` of the `other` **Range**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244791,"byte_end":244863,"line_start":464,"line_end":464,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244868,"byte_end":244871,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ If the direction of `other` is different to `self`, `self`'s `end` will be aligned to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244876,"byte_end":244969,"line_start":466,"line_end":466,"column_start":5,"column_end":98}},{"value":"/ `start` of `other` instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":244974,"byte_end":245005,"line_start":467,"line_end":467,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245010,"byte_end":245013,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245018,"byte_end":245032,"line_start":469,"line_end":469,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245037,"byte_end":245040,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245045,"byte_end":245052,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245057,"byte_end":245084,"line_start":472,"line_end":472,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245089,"byte_end":245092,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(2.5, 7.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245097,"byte_end":245130,"line_start":474,"line_end":474,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245135,"byte_end":245169,"line_start":475,"line_end":475,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.align_start_of(b), Range::new(0.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245174,"byte_end":245232,"line_start":476,"line_end":476,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(b.align_start_of(a), Range::new(2.5, 12.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245237,"byte_end":245296,"line_start":477,"line_end":477,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245301,"byte_end":245304,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(2.5, -2.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245309,"byte_end":245343,"line_start":479,"line_end":479,"column_start":5,"column_end":39}},{"value":"/ let d = Range::new(-5.0, 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245348,"byte_end":245382,"line_start":480,"line_end":480,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(c.align_start_of(d), Range::new(0.0, -5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245387,"byte_end":245446,"line_start":481,"line_end":481,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.align_start_of(c), Range::new(-7.5, 2.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245451,"byte_end":245510,"line_start":482,"line_end":482,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245515,"byte_end":245522,"line_start":483,"line_end":483,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246500,"byte_end":246512,"line_start":513,"line_end":513,"column_start":12,"column_end":24},"name":"align_end_of","qualname":"<Range>::align_end_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the `end` of `self` to the `end` of the `other` **Range**.","sig":null,"attributes":[{"value":"/ Align the `end` of `self` to the `end` of the `other` **Range**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245769,"byte_end":245837,"line_start":493,"line_end":493,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245842,"byte_end":245845,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ If the direction of `other` is different to `self`, `self`'s `start` will be aligned to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245850,"byte_end":245945,"line_start":495,"line_end":495,"column_start":5,"column_end":100}},{"value":"/ `end` of `other` instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245950,"byte_end":245979,"line_start":496,"line_end":496,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245984,"byte_end":245987,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":245992,"byte_end":246006,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246011,"byte_end":246014,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246019,"byte_end":246026,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246031,"byte_end":246058,"line_start":501,"line_end":501,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246063,"byte_end":246066,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(2.5, 7.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246071,"byte_end":246104,"line_start":503,"line_end":503,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246109,"byte_end":246143,"line_start":504,"line_end":504,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.align_end_of(b), Range::new(5.0, 10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246148,"byte_end":246205,"line_start":505,"line_end":505,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(b.align_end_of(a), Range::new(-2.5, 7.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246210,"byte_end":246267,"line_start":506,"line_end":506,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246272,"byte_end":246275,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(2.5, -2.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246280,"byte_end":246314,"line_start":508,"line_end":508,"column_start":5,"column_end":39}},{"value":"/ let d = Range::new(-5.0, 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246319,"byte_end":246353,"line_start":509,"line_end":509,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(c.align_end_of(d), Range::new(5.0, 0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246358,"byte_end":246414,"line_start":510,"line_end":510,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.align_end_of(c), Range::new(-2.5, 7.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246419,"byte_end":246476,"line_start":511,"line_end":511,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246481,"byte_end":246488,"line_start":512,"line_end":512,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247334,"byte_end":247349,"line_start":539,"line_end":539,"column_start":12,"column_end":27},"name":"align_middle_of","qualname":"<Range>::align_middle_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the middle of `self` to the middle of the `other` **Range**.","sig":null,"attributes":[{"value":"/ Align the middle of `self` to the middle of the `other` **Range**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246729,"byte_end":246799,"line_start":522,"line_end":522,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246804,"byte_end":246807,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246812,"byte_end":246826,"line_start":524,"line_end":524,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246831,"byte_end":246834,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246839,"byte_end":246846,"line_start":526,"line_end":526,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246851,"byte_end":246878,"line_start":527,"line_end":527,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246883,"byte_end":246886,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(0.0, 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246891,"byte_end":246924,"line_start":529,"line_end":529,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246929,"byte_end":246963,"line_start":530,"line_end":530,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.align_middle_of(b), Range::new(2.5, 7.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":246968,"byte_end":247027,"line_start":531,"line_end":531,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(b.align_middle_of(a), Range::new(-2.5, 7.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247032,"byte_end":247092,"line_start":532,"line_end":532,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247097,"byte_end":247100,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(2.5, -2.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247105,"byte_end":247139,"line_start":534,"line_end":534,"column_start":5,"column_end":39}},{"value":"/ let d = Range::new(-10.0, 0.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247144,"byte_end":247179,"line_start":535,"line_end":535,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(c.align_middle_of(d), Range::new(-2.5, -7.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247184,"byte_end":247245,"line_start":536,"line_end":536,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(d.align_middle_of(c), Range::new(-5.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247250,"byte_end":247310,"line_start":537,"line_end":537,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247315,"byte_end":247322,"line_start":538,"line_end":538,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248146,"byte_end":248157,"line_start":563,"line_end":563,"column_start":12,"column_end":23},"name":"align_after","qualname":"<Range>::align_after","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Aligns the `start` of `self` with the `end` of `other`.","sig":null,"attributes":[{"value":"/ Aligns the `start` of `self` with the `end` of `other`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247466,"byte_end":247525,"line_start":544,"line_end":544,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247530,"byte_end":247533,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ If the directions are opposite, aligns the `end` of self with the `end` of `other`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247538,"byte_end":247625,"line_start":546,"line_end":546,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247630,"byte_end":247633,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247638,"byte_end":247652,"line_start":548,"line_end":548,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247657,"byte_end":247660,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247665,"byte_end":247672,"line_start":550,"line_end":550,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247677,"byte_end":247704,"line_start":551,"line_end":551,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247709,"byte_end":247712,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(2.5, 7.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247717,"byte_end":247750,"line_start":553,"line_end":553,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247755,"byte_end":247789,"line_start":554,"line_end":554,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.align_after(b), Range::new(10.0, 15.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247794,"byte_end":247851,"line_start":555,"line_end":555,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(b.align_after(a), Range::new(7.5, 17.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247856,"byte_end":247912,"line_start":556,"line_end":556,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247917,"byte_end":247920,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(2.5, -2.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247925,"byte_end":247959,"line_start":558,"line_end":558,"column_start":5,"column_end":39}},{"value":"/ let d = Range::new(-5.0, 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":247964,"byte_end":247998,"line_start":559,"line_end":559,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(c.align_after(d), Range::new(10.0, 5.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248003,"byte_end":248059,"line_start":560,"line_end":560,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.align_after(c), Range::new(-12.5, -2.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248064,"byte_end":248122,"line_start":561,"line_end":561,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248127,"byte_end":248134,"line_start":562,"line_end":562,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249061,"byte_end":249073,"line_start":591,"line_end":591,"column_start":12,"column_end":24},"name":"align_before","qualname":"<Range>::align_before","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Aligns the `end` of `self` with the `start` of `other`.","sig":null,"attributes":[{"value":"/ Aligns the `end` of `self` with the `start` of `other`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248374,"byte_end":248433,"line_start":572,"line_end":572,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248438,"byte_end":248441,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ If the directions are opposite, aligns the `start` of self with the `start` of `other`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248446,"byte_end":248537,"line_start":574,"line_end":574,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248542,"byte_end":248545,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248550,"byte_end":248564,"line_start":576,"line_end":576,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248569,"byte_end":248572,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248577,"byte_end":248584,"line_start":578,"line_end":578,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::Range;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248589,"byte_end":248616,"line_start":579,"line_end":579,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248621,"byte_end":248624,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ let a = Range::new(2.5, 7.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248629,"byte_end":248662,"line_start":581,"line_end":581,"column_start":5,"column_end":38}},{"value":"/ let b = Range::new(0.0, 10.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248667,"byte_end":248701,"line_start":582,"line_end":582,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(a.align_before(b), Range::new(-5.0, 0.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248706,"byte_end":248763,"line_start":583,"line_end":583,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(b.align_before(a), Range::new(-7.5, 2.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248768,"byte_end":248825,"line_start":584,"line_end":584,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248830,"byte_end":248833,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ let c = Range::new(2.5, -2.5);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248838,"byte_end":248872,"line_start":586,"line_end":586,"column_start":5,"column_end":39}},{"value":"/ let d = Range::new(-5.0, 5.0);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248877,"byte_end":248911,"line_start":587,"line_end":587,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(c.align_before(d), Range::new(-5.0, -10.0));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248916,"byte_end":248975,"line_start":588,"line_end":588,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.align_before(c), Range::new(2.5, 12.5));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":248980,"byte_end":249037,"line_start":589,"line_end":589,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249042,"byte_end":249049,"line_start":590,"line_end":590,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249398,"byte_end":249406,"line_start":601,"line_end":601,"column_start":12,"column_end":20},"name":"align_to","qualname":"<Range>::align_to","value":"fn (self, align: super::Align, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.\n","sig":null,"attributes":[{"value":"/ Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249294,"byte_end":249386,"line_start":600,"line_end":600,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":250176,"byte_end":250188,"line_start":622,"line_end":622,"column_start":12,"column_end":24},"name":"closest_edge","qualname":"<Range>::closest_edge","value":"fn (&self, scalar: Scalar) -> Edge","parent":null,"children":[],"decl_id":null,"docs":" The closest **Edge** of `self` to the given `scalar`.","sig":null,"attributes":[{"value":"/ The closest **Edge** of `self` to the given `scalar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249687,"byte_end":249744,"line_start":609,"line_end":609,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249749,"byte_end":249752,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ Returns **Start** if the distance between both **Edge**s is equal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249757,"byte_end":249827,"line_start":611,"line_end":611,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249832,"byte_end":249835,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249840,"byte_end":249854,"line_start":613,"line_end":613,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249859,"byte_end":249862,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249867,"byte_end":249874,"line_start":615,"line_end":615,"column_start":5,"column_end":12}},{"value":"/ use conrod_core::position::{Edge, Range};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249879,"byte_end":249924,"line_start":616,"line_end":616,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249929,"byte_end":249932,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Range::new(0.0, 10.0).closest_edge(4.0), Edge::Start);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":249937,"byte_end":250006,"line_start":618,"line_end":618,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Range::new(0.0, 10.0).closest_edge(7.0), Edge::End);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":250011,"byte_end":250078,"line_start":619,"line_end":619,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Range::new(0.0, 10.0).closest_edge(5.0), Edge::Start);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":250083,"byte_end":250152,"line_start":620,"line_end":620,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":250157,"byte_end":250164,"line_start":621,"line_end":621,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":799},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rect","qualname":"::position::rect","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":5528},{"krate":0,"index":5539},{"krate":0,"index":5537},{"krate":0,"index":5535},{"krate":0,"index":5531},{"krate":0,"index":5532},{"krate":0,"index":5540},{"krate":0,"index":5559},{"krate":0,"index":5557},{"krate":0,"index":5555},{"krate":0,"index":5552},{"krate":0,"index":5553},{"krate":0,"index":5549},{"krate":0,"index":5550},{"krate":0,"index":806}],"decl_id":null,"docs":" Defines the scalar `Rect` type used throughout conrod.\n","sig":null,"attributes":[{"value":"! Defines the scalar `Rect` type used throughout conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250509,"byte_end":250567,"line_start":1,"line_end":1,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":5528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250824,"byte_end":250828,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Rect","qualname":"::position::rect::Rect","value":"Rect { x, y }","parent":null,"children":[{"krate":0,"index":5529},{"krate":0,"index":5530}],"decl_id":null,"docs":" Defines a Rectangle's bounds across the x and y axes.","sig":null,"attributes":[{"value":"/ Defines a Rectangle's bounds across the x and y axes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250627,"byte_end":250684,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250685,"byte_end":250688,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This is a conrod-specific Rectangle in that it's designed to help with layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250689,"byte_end":250771,"line_start":8,"line_end":8,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":5529},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250907,"byte_end":250908,"line_start":12,"line_end":12,"column_start":9,"column_end":10},"name":"x","qualname":"::position::rect::Rect::x","value":"position::range::Range","parent":{"krate":0,"index":5528},"children":[],"decl_id":null,"docs":" The start and end positions of the Rectangle on the x axis.\n","sig":null,"attributes":[{"value":"/ The start and end positions of the Rectangle on the x axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250835,"byte_end":250898,"line_start":11,"line_end":11,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":5530},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250993,"byte_end":250994,"line_start":14,"line_end":14,"column_start":9,"column_end":10},"name":"y","qualname":"::position::rect::Rect::y","value":"position::range::Range","parent":{"krate":0,"index":5528},"children":[],"decl_id":null,"docs":" The start and end positions of the Rectangle on the y axis.\n","sig":null,"attributes":[{"value":"/ The start and end positions of the Rectangle on the y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":250921,"byte_end":250984,"line_start":13,"line_end":13,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251162,"byte_end":251169,"line_start":21,"line_end":21,"column_start":5,"column_end":12},"name":"TopLeft","qualname":"::position::rect::Corner::TopLeft","value":"Corner::TopLeft","parent":{"krate":0,"index":5540},"children":[],"decl_id":null,"docs":" The top left corner of a **Rect**.\n","sig":null,"attributes":[{"value":"/ The top left corner of a **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251119,"byte_end":251157,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5543},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251219,"byte_end":251227,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"name":"TopRight","qualname":"::position::rect::Corner::TopRight","value":"Corner::TopRight","parent":{"krate":0,"index":5540},"children":[],"decl_id":null,"docs":" The top right corner of a **Rect**.\n","sig":null,"attributes":[{"value":"/ The top right corner of a **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251175,"byte_end":251214,"line_start":22,"line_end":22,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5545},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251279,"byte_end":251289,"line_start":25,"line_end":25,"column_start":5,"column_end":15},"name":"BottomLeft","qualname":"::position::rect::Corner::BottomLeft","value":"Corner::BottomLeft","parent":{"krate":0,"index":5540},"children":[],"decl_id":null,"docs":" The bottom left corner of a **Rect**.\n","sig":null,"attributes":[{"value":"/ The bottom left corner of a **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251233,"byte_end":251274,"line_start":24,"line_end":24,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251342,"byte_end":251353,"line_start":27,"line_end":27,"column_start":5,"column_end":16},"name":"BottomRight","qualname":"::position::rect::Corner::BottomRight","value":"Corner::BottomRight","parent":{"krate":0,"index":5540},"children":[],"decl_id":null,"docs":" The bottom right corner of a **Rect**.\n","sig":null,"attributes":[{"value":"/ The bottom right corner of a **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251295,"byte_end":251337,"line_start":26,"line_end":26,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":5540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251106,"byte_end":251112,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"name":"Corner","qualname":"::position::rect::Corner","value":"Corner::{TopLeft, TopRight, BottomLeft, BottomRight}","parent":null,"children":[{"krate":0,"index":5541},{"krate":0,"index":5543},{"krate":0,"index":5545},{"krate":0,"index":5547}],"decl_id":null,"docs":" Either of the four corners of a **Rect**.\n","sig":null,"attributes":[{"value":"/ Either of the four corners of a **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251006,"byte_end":251051,"line_start":17,"line_end":17,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251447,"byte_end":251458,"line_start":34,"line_end":34,"column_start":12,"column_end":23},"name":"from_xy_dim","qualname":"<Rect>::from_xy_dim","value":"fn (xy: Point, dim: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a Rect from a given `Point` and `Dimensions`.\n","sig":null,"attributes":[{"value":"/ Construct a Rect from a given `Point` and `Dimensions`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251376,"byte_end":251435,"line_start":33,"line_end":33,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251711,"byte_end":251723,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"from_corners","qualname":"<Rect>::from_corners","value":"fn (a: Point, b: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a Rect from the coordinates of two points.\n","sig":null,"attributes":[{"value":"/ Construct a Rect from the coordinates of two points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251643,"byte_end":251699,"line_start":41,"line_end":41,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252130,"byte_end":252137,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"overlap","qualname":"<Rect>::overlap","value":"fn (self, other: Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The Rect representing the area in which two Rects overlap.\n","sig":null,"attributes":[{"value":"/ The Rect representing the area in which two Rects overlap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252056,"byte_end":252118,"line_start":51,"line_end":51,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252352,"byte_end":252355,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"max","qualname":"<Rect>::max","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The Rect that encompass the two given sets of Rect.\n","sig":null,"attributes":[{"value":"/ The Rect that encompass the two given sets of Rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252285,"byte_end":252340,"line_start":56,"line_end":56,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252552,"byte_end":252553,"line_start":65,"line_end":65,"column_start":12,"column_end":13},"name":"x","qualname":"<Rect>::x","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The position in the middle of the x bounds.\n","sig":null,"attributes":[{"value":"/ The position in the middle of the x bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252493,"byte_end":252540,"line_start":64,"line_end":64,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252667,"byte_end":252668,"line_start":70,"line_end":70,"column_start":12,"column_end":13},"name":"y","qualname":"<Rect>::y","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The position in the middle of the y bounds.\n","sig":null,"attributes":[{"value":"/ The position in the middle of the y bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252608,"byte_end":252655,"line_start":69,"line_end":69,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252783,"byte_end":252785,"line_start":75,"line_end":75,"column_start":12,"column_end":14},"name":"xy","qualname":"<Rect>::xy","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The xy position in the middle of the bounds.\n","sig":null,"attributes":[{"value":"/ The xy position in the middle of the bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252723,"byte_end":252771,"line_start":74,"line_end":74,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252904,"byte_end":252907,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"x_y","qualname":"<Rect>::x_y","value":"fn (&self) -> (Scalar, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" The centered x and y coordinates as a tuple.\n","sig":null,"attributes":[{"value":"/ The centered x and y coordinates as a tuple.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252844,"byte_end":252892,"line_start":79,"line_end":79,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253015,"byte_end":253016,"line_start":85,"line_end":85,"column_start":12,"column_end":13},"name":"w","qualname":"<Rect>::w","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The width of the Rect.\n","sig":null,"attributes":[{"value":"/ The width of the Rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":252977,"byte_end":253003,"line_start":84,"line_end":84,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253107,"byte_end":253108,"line_start":90,"line_end":90,"column_start":12,"column_end":13},"name":"h","qualname":"<Rect>::h","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The height of the Rect.\n","sig":null,"attributes":[{"value":"/ The height of the Rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253068,"byte_end":253095,"line_start":89,"line_end":89,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253209,"byte_end":253212,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"dim","qualname":"<Rect>::dim","value":"fn (&self) -> Dimensions","parent":null,"children":[],"decl_id":null,"docs":" The total dimensions of the Rect.\n","sig":null,"attributes":[{"value":"/ The total dimensions of the Rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253160,"byte_end":253197,"line_start":94,"line_end":94,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253336,"byte_end":253339,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"w_h","qualname":"<Rect>::w_h","value":"fn (&self) -> (Scalar, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of the Rect as a tuple.\n","sig":null,"attributes":[{"value":"/ The width and height of the Rect as a tuple.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253276,"byte_end":253324,"line_start":99,"line_end":99,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253472,"byte_end":253478,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"xy_dim","qualname":"<Rect>::xy_dim","value":"fn (&self) -> (Point, Dimensions)","parent":null,"children":[],"decl_id":null,"docs":" Convert the Rect to a `Point` and `Dimensions`.\n","sig":null,"attributes":[{"value":"/ Convert the Rect to a `Point` and `Dimensions`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253409,"byte_end":253460,"line_start":104,"line_end":104,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253628,"byte_end":253635,"line_start":110,"line_end":110,"column_start":12,"column_end":19},"name":"x_y_w_h","qualname":"<Rect>::x_y_w_h","value":"fn (&self) -> (Scalar, Scalar, Scalar, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" The Rect's centered coordinates and dimensions in a tuple.\n","sig":null,"attributes":[{"value":"/ The Rect's centered coordinates and dimensions in a tuple.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253554,"byte_end":253616,"line_start":109,"line_end":109,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253834,"byte_end":253837,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"len","qualname":"<Rect>::len","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The length of the longest side of the rectangle.\n","sig":null,"attributes":[{"value":"/ The length of the longest side of the rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253770,"byte_end":253822,"line_start":115,"line_end":115,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253959,"byte_end":253965,"line_start":121,"line_end":121,"column_start":12,"column_end":18},"name":"bottom","qualname":"<Rect>::bottom","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The Rect's lowest y value.\n","sig":null,"attributes":[{"value":"/ The Rect's lowest y value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":253917,"byte_end":253947,"line_start":120,"line_end":120,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254073,"byte_end":254076,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"top","qualname":"<Rect>::top","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The Rect's highest y value.\n","sig":null,"attributes":[{"value":"/ The Rect's highest y value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254030,"byte_end":254061,"line_start":125,"line_end":125,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254181,"byte_end":254185,"line_start":131,"line_end":131,"column_start":12,"column_end":16},"name":"left","qualname":"<Rect>::left","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The Rect's lowest x value.\n","sig":null,"attributes":[{"value":"/ The Rect's lowest x value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254139,"byte_end":254169,"line_start":130,"line_end":130,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254293,"byte_end":254298,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"right","qualname":"<Rect>::right","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The Rect's highest x value.\n","sig":null,"attributes":[{"value":"/ The Rect's highest x value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254250,"byte_end":254281,"line_start":135,"line_end":135,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254407,"byte_end":254415,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"top_left","qualname":"<Rect>::top_left","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The top left corner **Point**.\n","sig":null,"attributes":[{"value":"/ The top left corner **Point**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254361,"byte_end":254395,"line_start":140,"line_end":140,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254528,"byte_end":254539,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"bottom_left","qualname":"<Rect>::bottom_left","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The bottom left corner **Point**.\n","sig":null,"attributes":[{"value":"/ The bottom left corner **Point**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254479,"byte_end":254516,"line_start":145,"line_end":145,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254653,"byte_end":254662,"line_start":151,"line_end":151,"column_start":12,"column_end":21},"name":"top_right","qualname":"<Rect>::top_right","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The top right corner **Point**.\n","sig":null,"attributes":[{"value":"/ The top right corner **Point**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254606,"byte_end":254641,"line_start":150,"line_end":150,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254777,"byte_end":254789,"line_start":156,"line_end":156,"column_start":12,"column_end":24},"name":"bottom_right","qualname":"<Rect>::bottom_right","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The bottom right corner **Point**.\n","sig":null,"attributes":[{"value":"/ The bottom right corner **Point**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254727,"byte_end":254765,"line_start":155,"line_end":155,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254937,"byte_end":254944,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"l_r_b_t","qualname":"<Rect>::l_r_b_t","value":"fn (&self) -> (Scalar, Scalar, Scalar, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" The edges of the **Rect** in a tuple (top, bottom, left, right).\n","sig":null,"attributes":[{"value":"/ The edges of the **Rect** in a tuple (top, bottom, left, right).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":254857,"byte_end":254925,"line_start":160,"line_end":160,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255151,"byte_end":255158,"line_start":166,"line_end":166,"column_start":12,"column_end":19},"name":"l_t_w_h","qualname":"<Rect>::l_t_w_h","value":"fn (&self) -> (Scalar, Scalar, Scalar, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" The left and top edges of the **Rect** along with the width and height.\n","sig":null,"attributes":[{"value":"/ The left and top edges of the **Rect** along with the width and height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255064,"byte_end":255139,"line_start":165,"line_end":165,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255378,"byte_end":255385,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"name":"l_b_w_h","qualname":"<Rect>::l_b_w_h","value":"fn (&self) -> (Scalar, Scalar, Scalar, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" The left and bottom edges of the **Rect** along with the width and height.\n","sig":null,"attributes":[{"value":"/ The left and bottom edges of the **Rect** along with the width and height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255288,"byte_end":255366,"line_start":171,"line_end":171,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255566,"byte_end":255573,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"shift_x","qualname":"<Rect>::shift_x","value":"fn (self, x: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Shift the Rect along the x axis.\n","sig":null,"attributes":[{"value":"/ Shift the Rect along the x axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255518,"byte_end":255554,"line_start":177,"line_end":177,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255704,"byte_end":255711,"line_start":183,"line_end":183,"column_start":12,"column_end":19},"name":"shift_y","qualname":"<Rect>::shift_y","value":"fn (self, y: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Shift the Rect along the y axis.\n","sig":null,"attributes":[{"value":"/ Shift the Rect along the y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255656,"byte_end":255692,"line_start":182,"line_end":182,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255844,"byte_end":255849,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"shift","qualname":"<Rect>::shift","value":"fn (self, xy: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Shift the Rect by the given Point.\n","sig":null,"attributes":[{"value":"/ Shift the Rect by the given Point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255794,"byte_end":255832,"line_start":187,"line_end":187,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256027,"byte_end":256040,"line_start":193,"line_end":193,"column_start":12,"column_end":25},"name":"relative_to_x","qualname":"<Rect>::relative_to_x","value":"fn (self, x: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Rect` with a position relative to the given position on the *x* axis.\n","sig":null,"attributes":[{"value":"/ Returns a `Rect` with a position relative to the given position on the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":255931,"byte_end":256015,"line_start":192,"line_end":192,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256220,"byte_end":256233,"line_start":198,"line_end":198,"column_start":12,"column_end":25},"name":"relative_to_y","qualname":"<Rect>::relative_to_y","value":"fn (self, y: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Rect` with a position relative to the given position on the *y* axis.\n","sig":null,"attributes":[{"value":"/ Returns a `Rect` with a position relative to the given position on the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256124,"byte_end":256208,"line_start":197,"line_end":197,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256397,"byte_end":256408,"line_start":203,"line_end":203,"column_start":12,"column_end":23},"name":"relative_to","qualname":"<Rect>::relative_to","value":"fn (self, xy: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Rect` with a position relative to the given position.\n","sig":null,"attributes":[{"value":"/ Returns a `Rect` with a position relative to the given position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256317,"byte_end":256385,"line_start":202,"line_end":202,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256559,"byte_end":256566,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"is_over","qualname":"<Rect>::is_over","value":"fn (&self, xy: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the given point touch the Rectangle.\n","sig":null,"attributes":[{"value":"/ Does the given point touch the Rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256502,"byte_end":256547,"line_start":207,"line_end":207,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256729,"byte_end":256737,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"pad_left","qualname":"<Rect>::pad_left","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The Rect with some padding applied to the left edge.\n","sig":null,"attributes":[{"value":"/ The Rect with some padding applied to the left edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256661,"byte_end":256717,"line_start":212,"line_end":212,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256897,"byte_end":256906,"line_start":218,"line_end":218,"column_start":12,"column_end":21},"name":"pad_right","qualname":"<Rect>::pad_right","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The Rect with some padding applied to the right edge.\n","sig":null,"attributes":[{"value":"/ The Rect with some padding applied to the right edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256828,"byte_end":256885,"line_start":217,"line_end":217,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257065,"byte_end":257075,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"pad_bottom","qualname":"<Rect>::pad_bottom","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The rect with some padding applied to the bottom edge.\n","sig":null,"attributes":[{"value":"/ The rect with some padding applied to the bottom edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":256995,"byte_end":257053,"line_start":222,"line_end":222,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257233,"byte_end":257240,"line_start":228,"line_end":228,"column_start":12,"column_end":19},"name":"pad_top","qualname":"<Rect>::pad_top","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The Rect with some padding applied to the top edge.\n","sig":null,"attributes":[{"value":"/ The Rect with some padding applied to the top edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257166,"byte_end":257221,"line_start":227,"line_end":227,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257400,"byte_end":257403,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"pad","qualname":"<Rect>::pad","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The Rect with some padding amount applied to each edge.\n","sig":null,"attributes":[{"value":"/ The Rect with some padding amount applied to each edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257329,"byte_end":257388,"line_start":232,"line_end":232,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257575,"byte_end":257582,"line_start":239,"line_end":239,"column_start":12,"column_end":19},"name":"padding","qualname":"<Rect>::padding","value":"fn (self, padding: Padding) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The Rect with some padding applied.\n","sig":null,"attributes":[{"value":"/ The Rect with some padding applied.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257524,"byte_end":257563,"line_start":238,"line_end":238,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257889,"byte_end":257905,"line_start":247,"line_end":247,"column_start":12,"column_end":28},"name":"stretch_to_point","qualname":"<Rect>::stretch_to_point","value":"fn (self, point: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Stretches the closest edge(s) to the given point if the point lies outside of the Rect area.\n","sig":null,"attributes":[{"value":"/ Stretches the closest edge(s) to the given point if the point lies outside of the Rect area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":257781,"byte_end":257877,"line_start":246,"line_end":246,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258181,"byte_end":258188,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"left_of","qualname":"<Rect>::left_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s right edge with the left edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s right edge with the left edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258096,"byte_end":258169,"line_start":255,"line_end":255,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258406,"byte_end":258414,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"right_of","qualname":"<Rect>::right_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s left edge with the right dge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s left edge with the right dge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258322,"byte_end":258394,"line_start":263,"line_end":263,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258632,"byte_end":258637,"line_start":272,"line_end":272,"column_start":12,"column_end":17},"name":"below","qualname":"<Rect>::below","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s top edge with the bottom edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s top edge with the bottom edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258547,"byte_end":258620,"line_start":271,"line_end":271,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258856,"byte_end":258861,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"name":"above","qualname":"<Rect>::above","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s bottom edge with the top edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s bottom edge with the top edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258771,"byte_end":258844,"line_start":279,"line_end":279,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":259098,"byte_end":259108,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"align_x_of","qualname":"<Rect>::align_x_of","value":"fn (self, align: super::Align, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.\n","sig":null,"attributes":[{"value":"/ Align `self` to `other` along the *x* axis in accordance with the given `Align` variant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":258994,"byte_end":259086,"line_start":287,"line_end":287,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":259370,"byte_end":259380,"line_start":296,"line_end":296,"column_start":12,"column_end":22},"name":"align_y_of","qualname":"<Rect>::align_y_of","value":"fn (self, align: super::Align, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self` to `other` along the *y* axis in accordance with the given `Align` variant.\n","sig":null,"attributes":[{"value":"/ Align `self` to `other` along the *y* axis in accordance with the given `Align` variant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":259266,"byte_end":259358,"line_start":295,"line_end":295,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":259622,"byte_end":259635,"line_start":304,"line_end":304,"column_start":12,"column_end":25},"name":"align_left_of","qualname":"<Rect>::align_left_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s left edge with the left edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s left edge with the left edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":259538,"byte_end":259610,"line_start":303,"line_end":303,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":259873,"byte_end":259890,"line_start":312,"line_end":312,"column_start":12,"column_end":29},"name":"align_middle_x_of","qualname":"<Rect>::align_middle_x_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the middle of `self` with the middle of the `other` **Rect** along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Align the middle of `self` with the middle of the `other` **Rect** along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":259771,"byte_end":259861,"line_start":311,"line_end":311,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260113,"byte_end":260127,"line_start":320,"line_end":320,"column_start":12,"column_end":26},"name":"align_right_of","qualname":"<Rect>::align_right_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s right edge with the right edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s right edge with the right edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260027,"byte_end":260101,"line_start":319,"line_end":319,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260349,"byte_end":260364,"line_start":328,"line_end":328,"column_start":12,"column_end":27},"name":"align_bottom_of","qualname":"<Rect>::align_bottom_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s bottom edge with the bottom edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s bottom edge with the bottom edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260261,"byte_end":260337,"line_start":327,"line_end":327,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260602,"byte_end":260619,"line_start":336,"line_end":336,"column_start":12,"column_end":29},"name":"align_middle_y_of","qualname":"<Rect>::align_middle_y_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the middle of `self` with the middle of the `other` **Rect** along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Align the middle of `self` with the middle of the `other` **Rect** along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260500,"byte_end":260590,"line_start":335,"line_end":335,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260838,"byte_end":260850,"line_start":344,"line_end":344,"column_start":12,"column_end":24},"name":"align_top_of","qualname":"<Rect>::align_top_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align `self`'s top edge with the top edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Align `self`'s top edge with the top edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260756,"byte_end":260826,"line_start":343,"line_end":343,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261062,"byte_end":261073,"line_start":352,"line_end":352,"column_start":12,"column_end":23},"name":"top_left_of","qualname":"<Rect>::top_left_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` along the top left edges of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` along the top left edges of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":260984,"byte_end":261050,"line_start":351,"line_end":351,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261247,"byte_end":261259,"line_start":357,"line_end":357,"column_start":12,"column_end":24},"name":"top_right_of","qualname":"<Rect>::top_right_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` along the top right edges of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` along the top right edges of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261168,"byte_end":261235,"line_start":356,"line_end":356,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261436,"byte_end":261450,"line_start":362,"line_end":362,"column_start":12,"column_end":26},"name":"bottom_left_of","qualname":"<Rect>::bottom_left_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` along the bottom left edges of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` along the bottom left edges of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261355,"byte_end":261424,"line_start":361,"line_end":361,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261630,"byte_end":261645,"line_start":367,"line_end":367,"column_start":12,"column_end":27},"name":"bottom_right_of","qualname":"<Rect>::bottom_right_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` along the bottom right edges of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` along the bottom right edges of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261548,"byte_end":261618,"line_start":366,"line_end":366,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261827,"byte_end":261837,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"mid_top_of","qualname":"<Rect>::mid_top_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` in the middle of the top edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` in the middle of the top edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261744,"byte_end":261815,"line_start":371,"line_end":371,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262022,"byte_end":262035,"line_start":377,"line_end":377,"column_start":12,"column_end":25},"name":"mid_bottom_of","qualname":"<Rect>::mid_bottom_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` in the middle of the bottom edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` in the middle of the bottom edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":261936,"byte_end":262010,"line_start":376,"line_end":376,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262221,"byte_end":262232,"line_start":382,"line_end":382,"column_start":12,"column_end":23},"name":"mid_left_of","qualname":"<Rect>::mid_left_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` in the middle of the left edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` in the middle of the left edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262137,"byte_end":262209,"line_start":381,"line_end":381,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262417,"byte_end":262429,"line_start":387,"line_end":387,"column_start":12,"column_end":24},"name":"mid_right_of","qualname":"<Rect>::mid_right_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` in the middle of the right edge of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` in the middle of the right edge of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262332,"byte_end":262405,"line_start":386,"line_end":386,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262606,"byte_end":262615,"line_start":392,"line_end":392,"column_start":12,"column_end":21},"name":"middle_of","qualname":"<Rect>::middle_of","value":"fn (self, other: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Place `self` directly in the middle of the `other` **Rect**.\n","sig":null,"attributes":[{"value":"/ Place `self` directly in the middle of the `other` **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262530,"byte_end":262594,"line_start":391,"line_end":391,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262806,"byte_end":262820,"line_start":397,"line_end":397,"column_start":12,"column_end":26},"name":"closest_corner","qualname":"<Rect>::closest_corner","value":"fn (&self, xy: Point) -> Corner","parent":null,"children":[],"decl_id":null,"docs":" Return the **Corner** of `self` that is closest to the given **Point**.\n","sig":null,"attributes":[{"value":"/ Return the **Corner** of `self` that is closest to the given **Point**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":262719,"byte_end":262794,"line_start":396,"line_end":396,"column_start":5,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198119,"byte_end":198125,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::position::Scalar","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" An alias over the Scalar type used throughout Conrod.","sig":null,"attributes":[{"value":"/ An alias over the Scalar type used throughout Conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197976,"byte_end":198033,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198034,"byte_end":198037,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This type is primarily used for spatial dimensions and positioning.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198038,"byte_end":198109,"line_start":18,"line_end":18,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198339,"byte_end":198344,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"name":"Depth","qualname":"::position::Depth","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" The depth at which the widget will be rendered.","sig":null,"attributes":[{"value":"/ The depth at which the widget will be rendered.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198134,"byte_end":198185,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198186,"byte_end":198189,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This determines the order of rendering where widgets with a greater depth will be rendered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198190,"byte_end":198284,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/ first.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198285,"byte_end":198295,"line_start":24,"line_end":24,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198296,"byte_end":198299,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ 0.0 is the default depth.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198300,"byte_end":198329,"line_start":26,"line_end":26,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198401,"byte_end":198411,"line_start":30,"line_end":30,"column_start":10,"column_end":20},"name":"Dimensions","qualname":"::position::Dimensions","value":"[Scalar; 2]","parent":null,"children":[],"decl_id":null,"docs":" General use 2D spatial dimensions.\n","sig":null,"attributes":[{"value":"/ General use 2D spatial dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198353,"byte_end":198391,"line_start":29,"line_end":29,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198471,"byte_end":198476,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Point","qualname":"::position::Point","value":"[Scalar; 2]","parent":null,"children":[],"decl_id":null,"docs":" General use 2D spatial point.\n","sig":null,"attributes":[{"value":"/ General use 2D spatial point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198428,"byte_end":198461,"line_start":32,"line_end":32,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":878},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198564,"byte_end":198570,"line_start":36,"line_end":36,"column_start":10,"column_end":16},"name":"Margin","qualname":"::position::Margin","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" The margin for some `Place`ment on either end of an axis.\n","sig":null,"attributes":[{"value":"/ The margin for some `Place`ment on either end of an axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198493,"byte_end":198554,"line_start":35,"line_end":35,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5561},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198743,"byte_end":198744,"line_start":42,"line_end":42,"column_start":5,"column_end":6},"name":"X","qualname":"::position::Axis::X","value":"Axis::X","parent":{"krate":0,"index":5560},"children":[],"decl_id":null,"docs":" The horizontal plane's Axis.\n","sig":null,"attributes":[{"value":"/ The horizontal plane's Axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198706,"byte_end":198738,"line_start":41,"line_end":41,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5563},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198785,"byte_end":198786,"line_start":44,"line_end":44,"column_start":5,"column_end":6},"name":"Y","qualname":"::position::Axis::Y","value":"Axis::Y","parent":{"krate":0,"index":5560},"children":[],"decl_id":null,"docs":" The vertical plane's Axis.\n","sig":null,"attributes":[{"value":"/ The vertical plane's Axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198750,"byte_end":198780,"line_start":43,"line_end":43,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":5560},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198695,"byte_end":198699,"line_start":40,"line_end":40,"column_start":10,"column_end":14},"name":"Axis","qualname":"::position::Axis","value":"Axis::{X, Y}","parent":null,"children":[{"krate":0,"index":5561},{"krate":0,"index":5563}],"decl_id":null,"docs":" Represents either **Axis** in the 2-dimensional plane.\n","sig":null,"attributes":[{"value":"/ Represents either **Axis** in the 2-dimensional plane.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198582,"byte_end":198640,"line_start":38,"line_end":38,"column_start":1,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5577},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199372,"byte_end":199380,"line_start":60,"line_end":60,"column_start":5,"column_end":13},"name":"Absolute","qualname":"::position::Position::Absolute","value":"Position::Absolute(Scalar)","parent":{"krate":0,"index":5576},"children":[],"decl_id":null,"docs":" A specific position.\n","sig":null,"attributes":[{"value":"/ A specific position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199343,"byte_end":199367,"line_start":59,"line_end":59,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199444,"byte_end":199452,"line_start":62,"line_end":62,"column_start":5,"column_end":13},"name":"Relative","qualname":"::position::Position::Relative","value":"Position::Relative(Relative, Option<widget::Id>)","parent":{"krate":0,"index":5576},"children":[],"decl_id":null,"docs":" A position relative to some other Widget.\n","sig":null,"attributes":[{"value":"/ A position relative to some other Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199394,"byte_end":199439,"line_start":61,"line_end":61,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":5576},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199328,"byte_end":199336,"line_start":58,"line_end":58,"column_start":10,"column_end":18},"name":"Position","qualname":"::position::Position","value":"Position::{Absolute, Relative}","parent":null,"children":[{"krate":0,"index":5577},{"krate":0,"index":5580}],"decl_id":null,"docs":" Some **Position** of some **Widget** along a single axis.","sig":null,"attributes":[{"value":"/ Some **Position** of some **Widget** along a single axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198791,"byte_end":198852,"line_start":47,"line_end":47,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198853,"byte_end":198856,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ **Position**s for both the *x* and *y* axes are stored internally within the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198857,"byte_end":198937,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ **widget::CommonBuilder** type, allowing all widgets to be positioned in a variety of different","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":198938,"byte_end":199037,"line_start":50,"line_end":50,"column_start":1,"column_end":100}},{"value":"/ ways.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199038,"byte_end":199047,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199048,"byte_end":199051,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ See the [**Positionable**](./trait.Positionable) trait for methods that allow for setting the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199052,"byte_end":199149,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/ **Position**s in various ways.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199150,"byte_end":199184,"line_start":54,"line_end":54,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199185,"byte_end":199188,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Note that **Positionable** is implemented for *all* types that implement **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199189,"byte_end":199277,"line_start":56,"line_end":56,"column_start":1,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5594},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199735,"byte_end":199741,"line_start":71,"line_end":71,"column_start":5,"column_end":11},"name":"Scalar","qualname":"::position::Relative::Scalar","value":"Relative::Scalar(Scalar)","parent":{"krate":0,"index":5593},"children":[],"decl_id":null,"docs":" A relative scalar distance.\n","sig":null,"attributes":[{"value":"/ A relative scalar distance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199699,"byte_end":199730,"line_start":70,"line_end":70,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5597},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199813,"byte_end":199818,"line_start":73,"line_end":73,"column_start":5,"column_end":10},"name":"Align","qualname":"::position::Relative::Align","value":"Relative::Align(Align)","parent":{"krate":0,"index":5593},"children":[],"decl_id":null,"docs":" Aligned to either the `Start`, `Middle` or `End`.\n","sig":null,"attributes":[{"value":"/ Aligned to either the `Start`, `Middle` or `End`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199755,"byte_end":199808,"line_start":72,"line_end":72,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5600},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199898,"byte_end":199907,"line_start":75,"line_end":75,"column_start":5,"column_end":14},"name":"Direction","qualname":"::position::Relative::Direction","value":"Relative::Direction(Direction, Scalar)","parent":{"krate":0,"index":5593},"children":[],"decl_id":null,"docs":" A distance as a `Scalar` value over the given `Direction`.\n","sig":null,"attributes":[{"value":"/ A distance as a `Scalar` value over the given `Direction`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199831,"byte_end":199893,"line_start":74,"line_end":74,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5604},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200352,"byte_end":200357,"line_start":84,"line_end":84,"column_start":5,"column_end":10},"name":"Place","qualname":"::position::Relative::Place","value":"Relative::Place(Place)","parent":{"krate":0,"index":5593},"children":[],"decl_id":null,"docs":" Some place on top of another widget.","sig":null,"attributes":[{"value":"/ Some place on top of another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199932,"byte_end":199972,"line_start":76,"line_end":76,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199977,"byte_end":199980,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Similar to `Align`, but represents the `Start`/`End` of the other widget's `kid_area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199985,"byte_end":200075,"line_start":78,"line_end":78,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200080,"byte_end":200083,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Also allows for specifying a `Margin` from either end.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200088,"byte_end":200146,"line_start":80,"line_end":80,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200151,"byte_end":200154,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Using `Place` allows the `Ui` to infer the widget's parent as the widget upon which it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200159,"byte_end":200252,"line_start":82,"line_end":82,"column_start":5,"column_end":98}},{"value":"/ `Placed`, though this inferrence only occurs if the `parent` was not specifically set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200257,"byte_end":200347,"line_start":83,"line_end":83,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":5593},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199684,"byte_end":199692,"line_start":69,"line_end":69,"column_start":10,"column_end":18},"name":"Relative","qualname":"::position::Relative","value":"Relative::{Scalar, Align, Direction, Place}","parent":null,"children":[{"krate":0,"index":5594},{"krate":0,"index":5597},{"krate":0,"index":5600},{"krate":0,"index":5604}],"decl_id":null,"docs":" Positions that are described as **Relative** to some other **Widget**.","sig":null,"attributes":[{"value":"/ Positions that are described as **Relative** to some other **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199487,"byte_end":199561,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199562,"byte_end":199565,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ **Relative** describes a relative position along a single axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":199566,"byte_end":199633,"line_start":67,"line_end":67,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5617},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200582,"byte_end":200590,"line_start":91,"line_end":91,"column_start":5,"column_end":13},"name":"Forwards","qualname":"::position::Direction::Forwards","value":"Direction::Forwards","parent":{"krate":0,"index":5616},"children":[],"decl_id":null,"docs":" Positioned forwards (*positive* **Scalar**) along some **Axis**.\n","sig":null,"attributes":[{"value":"/ Positioned forwards (*positive* **Scalar**) along some **Axis**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200509,"byte_end":200577,"line_start":90,"line_end":90,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200670,"byte_end":200679,"line_start":93,"line_end":93,"column_start":5,"column_end":14},"name":"Backwards","qualname":"::position::Direction::Backwards","value":"Direction::Backwards","parent":{"krate":0,"index":5616},"children":[],"decl_id":null,"docs":" Positioned backwards (*negative* **Scalar**) along some **Axis**.\n","sig":null,"attributes":[{"value":"/ Positioned backwards (*negative* **Scalar**) along some **Axis**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200596,"byte_end":200665,"line_start":92,"line_end":92,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":5616},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200493,"byte_end":200502,"line_start":89,"line_end":89,"column_start":10,"column_end":19},"name":"Direction","qualname":"::position::Direction","value":"Direction::{Forwards, Backwards}","parent":null,"children":[{"krate":0,"index":5617},{"krate":0,"index":5619}],"decl_id":null,"docs":" Directionally positioned, normally relative to some other widget.\n","sig":null,"attributes":[{"value":"/ Directionally positioned, normally relative to some other widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200369,"byte_end":200438,"line_start":87,"line_end":87,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200900,"byte_end":200905,"line_start":100,"line_end":100,"column_start":5,"column_end":10},"name":"Start","qualname":"::position::Align::Start","value":"Align::Start","parent":{"krate":0,"index":5632},"children":[],"decl_id":null,"docs":" **Align** our **Start** with the **Start** of some other widget along the **Axis**.\n","sig":null,"attributes":[{"value":"/ **Align** our **Start** with the **Start** of some other widget along the **Axis**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200808,"byte_end":200895,"line_start":99,"line_end":99,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201005,"byte_end":201011,"line_start":102,"line_end":102,"column_start":5,"column_end":11},"name":"Middle","qualname":"::position::Align::Middle","value":"Align::Middle","parent":{"krate":0,"index":5632},"children":[],"decl_id":null,"docs":" **Align** our **Middle** with the **Middle** of some other widget along the **Axis**.\n","sig":null,"attributes":[{"value":"/ **Align** our **Middle** with the **Middle** of some other widget along the **Axis**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200911,"byte_end":201000,"line_start":101,"line_end":101,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201105,"byte_end":201108,"line_start":104,"line_end":104,"column_start":5,"column_end":8},"name":"End","qualname":"::position::Align::End","value":"Align::End","parent":{"krate":0,"index":5632},"children":[],"decl_id":null,"docs":" **Align** our **End** with the **End** of some other widget along the **Axis**.\n","sig":null,"attributes":[{"value":"/ **Align** our **End** with the **End** of some other widget along the **Axis**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201017,"byte_end":201100,"line_start":103,"line_end":103,"column_start":5,"column_end":88}}]},{"kind":"Enum","id":{"krate":0,"index":5632},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200796,"byte_end":200801,"line_start":98,"line_end":98,"column_start":10,"column_end":15},"name":"Align","qualname":"::position::Align","value":"Align::{Start, Middle, End}","parent":null,"children":[{"krate":0,"index":5633},{"krate":0,"index":5635},{"krate":0,"index":5637}],"decl_id":null,"docs":" The orientation of **Align**ment along some **Axis**.\n","sig":null,"attributes":[{"value":"/ The orientation of **Align**ment along some **Axis**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":200684,"byte_end":200741,"line_start":96,"line_end":96,"column_start":1,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201293,"byte_end":201298,"line_start":111,"line_end":111,"column_start":5,"column_end":10},"name":"Start","qualname":"::position::Place::Start","value":"Place::Start(Option<Margin>)","parent":{"krate":0,"index":5650},"children":[],"decl_id":null,"docs":" Place upon the **Start** of the Widget's `kid_area`.\n","sig":null,"attributes":[{"value":"/ Place upon the **Start** of the Widget's `kid_area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201232,"byte_end":201288,"line_start":110,"line_end":110,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5654},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201382,"byte_end":201388,"line_start":113,"line_end":113,"column_start":5,"column_end":11},"name":"Middle","qualname":"::position::Place::Middle","value":"Place::Middle","parent":{"krate":0,"index":5650},"children":[],"decl_id":null,"docs":" Place upon the **Middle** of the Widget's `kid_area`.\n","sig":null,"attributes":[{"value":"/ Place upon the **Middle** of the Widget's `kid_area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201320,"byte_end":201377,"line_start":112,"line_end":112,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201453,"byte_end":201456,"line_start":115,"line_end":115,"column_start":5,"column_end":8},"name":"End","qualname":"::position::Place::End","value":"Place::End(Option<Margin>)","parent":{"krate":0,"index":5650},"children":[],"decl_id":null,"docs":" Place upon the **End** of the Widget's `kid_area`.\n","sig":null,"attributes":[{"value":"/ Place upon the **End** of the Widget's `kid_area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201394,"byte_end":201448,"line_start":114,"line_end":114,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":5650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201220,"byte_end":201225,"line_start":109,"line_end":109,"column_start":10,"column_end":15},"name":"Place","qualname":"::position::Place","value":"Place::{Start, Middle, End}","parent":null,"children":[{"krate":0,"index":5651},{"krate":0,"index":5654},{"krate":0,"index":5656}],"decl_id":null,"docs":" Place the widget at a position on some other widget.\n","sig":null,"attributes":[{"value":"/ Place the widget at a position on some other widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201113,"byte_end":201169,"line_start":107,"line_end":107,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201976,"byte_end":201984,"line_start":129,"line_end":129,"column_start":5,"column_end":13},"name":"Absolute","qualname":"::position::Dimension::Absolute","value":"Dimension::Absolute(Scalar)","parent":{"krate":0,"index":5668},"children":[],"decl_id":null,"docs":" Some specific length has been given.\n","sig":null,"attributes":[{"value":"/ Some specific length has been given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201931,"byte_end":201971,"line_start":128,"line_end":128,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202241,"byte_end":202243,"line_start":134,"line_end":134,"column_start":5,"column_end":7},"name":"Of","qualname":"::position::Dimension::Of","value":"Dimension::Of(widget::Id, Option<Scalar>)","parent":{"krate":0,"index":5668},"children":[],"decl_id":null,"docs":" The dimension should match that of the widget at the given index.","sig":null,"attributes":[{"value":"/ The dimension should match that of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201998,"byte_end":202067,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202072,"byte_end":202075,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ The `Option<Scalar>` is an optional padding argument which when `Some`, will subtract the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202080,"byte_end":202173,"line_start":132,"line_end":132,"column_start":5,"column_end":98}},{"value":"/ scalar from both ends of the other widget's dimension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202178,"byte_end":202236,"line_start":133,"line_end":133,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5676},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202538,"byte_end":202547,"line_start":139,"line_end":139,"column_start":5,"column_end":14},"name":"KidAreaOf","qualname":"::position::Dimension::KidAreaOf","value":"Dimension::KidAreaOf(widget::Id, Option<Scalar>)","parent":{"krate":0,"index":5668},"children":[],"decl_id":null,"docs":" The dimension should match that of the `kid_area` of the widget at the given index.","sig":null,"attributes":[{"value":"/ The dimension should match that of the `kid_area` of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202277,"byte_end":202364,"line_start":135,"line_end":135,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202369,"byte_end":202372,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ The `Option<Scalar>` is an optional padding argument which when `Some`, will subtract the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202377,"byte_end":202470,"line_start":137,"line_end":137,"column_start":5,"column_end":98}},{"value":"/ scalar from both ends of the other widget's dimension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202475,"byte_end":202533,"line_start":138,"line_end":138,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":5668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201915,"byte_end":201924,"line_start":127,"line_end":127,"column_start":10,"column_end":19},"name":"Dimension","qualname":"::position::Dimension","value":"Dimension::{Absolute, Of, KidAreaOf}","parent":null,"children":[{"krate":0,"index":5669},{"krate":0,"index":5672},{"krate":0,"index":5676}],"decl_id":null,"docs":" The length of a **Widget** over either the *x* or *y* axes.","sig":null,"attributes":[{"value":"/ The length of a **Widget** over either the *x* or *y* axes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201477,"byte_end":201540,"line_start":118,"line_end":118,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201541,"byte_end":201544,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ This type is used to represent the different ways in which a dimension may be sized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201545,"byte_end":201633,"line_start":120,"line_end":120,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201634,"byte_end":201637,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ See the [**Sizeable**](./trait.Sizeable) trait for methods that allow for setting the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201638,"byte_end":201727,"line_start":122,"line_end":122,"column_start":1,"column_end":90}},{"value":"/ `x` and `y` **Dimension**s in various ways.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201728,"byte_end":201775,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201776,"byte_end":201779,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ Note that **Sizeable** is implemented for *all* types that implement **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":201780,"byte_end":201864,"line_start":125,"line_end":125,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202879,"byte_end":202891,"line_start":148,"line_end":148,"column_start":11,"column_end":23},"name":"Positionable","qualname":"::position::Positionable","value":"Positionable: Sized","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977}],"decl_id":null,"docs":" Widgets that are positionable.","sig":null,"attributes":[{"value":"/ Widgets that are positionable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202580,"byte_end":202614,"line_start":142,"line_end":142,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202615,"byte_end":202618,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ A **Position** is stored internally within the **widget::CommonBuilder** type, allowing all","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202619,"byte_end":202714,"line_start":144,"line_end":144,"column_start":1,"column_end":96}},{"value":"/ widgets to be positioned in a variety of different ways.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202715,"byte_end":202775,"line_start":145,"line_end":145,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202776,"byte_end":202779,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Thus, **Positionable** can be implemented for *all* types that implement **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202780,"byte_end":202868,"line_start":147,"line_end":147,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202971,"byte_end":202981,"line_start":151,"line_end":151,"column_start":8,"column_end":18},"name":"x_position","qualname":"::position::Positionable::x_position","value":"fn (self, Position) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the given **Position** along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Build with the given **Position** along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202906,"byte_end":202963,"line_start":150,"line_end":150,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203077,"byte_end":203087,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"y_position","qualname":"::position::Positionable::y_position","value":"fn (self, Position) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the given **Position** along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Build with the given **Position** along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203012,"byte_end":203069,"line_start":153,"line_end":153,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203170,"byte_end":203184,"line_start":157,"line_end":157,"column_start":8,"column_end":22},"name":"get_x_position","qualname":"::position::Positionable::get_x_position","value":"fn (&self, ui: &Ui) -> Position","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Get the **Position** along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Get the **Position** along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203118,"byte_end":203162,"line_start":156,"line_end":156,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203271,"byte_end":203285,"line_start":160,"line_end":160,"column_start":8,"column_end":22},"name":"get_y_position","qualname":"::position::Positionable::get_y_position","value":"fn (&self, ui: &Ui) -> Position","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Get the **Position** along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Get the **Position** along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203219,"byte_end":203263,"line_start":159,"line_end":159,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203428,"byte_end":203429,"line_start":165,"line_end":165,"column_start":8,"column_end":9},"name":"x","qualname":"::position::Positionable::x","value":"fn (self, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the given **Absolute** **Position** along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Build with the given **Absolute** **Position** along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203350,"byte_end":203420,"line_start":164,"line_end":164,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203593,"byte_end":203594,"line_start":170,"line_end":170,"column_start":8,"column_end":9},"name":"y","qualname":"::position::Positionable::y","value":"fn (self, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the given **Absolute** **Position** along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Build with the given **Absolute** **Position** along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203515,"byte_end":203585,"line_start":169,"line_end":169,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203729,"byte_end":203731,"line_start":175,"line_end":175,"column_start":8,"column_end":10},"name":"xy","qualname":"::position::Positionable::xy","value":"fn (self, point: Point) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the **Position** with some Point.\n","sig":null,"attributes":[{"value":"/ Set the **Position** with some Point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203680,"byte_end":203721,"line_start":174,"line_end":174,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203868,"byte_end":203871,"line_start":180,"line_end":180,"column_start":8,"column_end":11},"name":"x_y","qualname":"::position::Positionable::x_y","value":"fn (self, x: Scalar, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the **Position** with *x* *y* coordinates.\n","sig":null,"attributes":[{"value":"/ Set the **Position** with *x* *y* coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203810,"byte_end":203860,"line_start":179,"line_end":179,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204048,"byte_end":204067,"line_start":187,"line_end":187,"column_start":8,"column_end":27},"name":"x_position_relative","qualname":"::position::Positionable::x_position_relative","value":"fn (self, x: Relative) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the *x* **Position** **Relative** to the previous widget.\n","sig":null,"attributes":[{"value":"/ Set the *x* **Position** **Relative** to the previous widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":203975,"byte_end":204040,"line_start":186,"line_end":186,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204234,"byte_end":204253,"line_start":192,"line_end":192,"column_start":8,"column_end":27},"name":"y_position_relative","qualname":"::position::Positionable::y_position_relative","value":"fn (self, y: Relative) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the *y* **Position** **Relative** to the previous widget.\n","sig":null,"attributes":[{"value":"/ Set the *y* **Position** **Relative** to the previous widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204161,"byte_end":204226,"line_start":191,"line_end":191,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204429,"byte_end":204450,"line_start":197,"line_end":197,"column_start":8,"column_end":29},"name":"x_y_position_relative","qualname":"::position::Positionable::x_y_position_relative","value":"fn (self, x: Relative, y: Relative) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the *x* and *y* **Position**s **Relative** to the previous widget.\n","sig":null,"attributes":[{"value":"/ Set the *x* and *y* **Position**s **Relative** to the previous widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204347,"byte_end":204421,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204633,"byte_end":204655,"line_start":202,"line_end":202,"column_start":8,"column_end":30},"name":"x_position_relative_to","qualname":"::position::Positionable::x_position_relative_to","value":"fn (self, other: widget::Id, x: Relative) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the *x* **Position** **Relative** to the given widget.\n","sig":null,"attributes":[{"value":"/ Set the *x* **Position** **Relative** to the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204563,"byte_end":204625,"line_start":201,"line_end":201,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204845,"byte_end":204867,"line_start":207,"line_end":207,"column_start":8,"column_end":30},"name":"y_position_relative_to","qualname":"::position::Positionable::y_position_relative_to","value":"fn (self, other: widget::Id, y: Relative) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the *y* **Position** **Relative** to the given widget.\n","sig":null,"attributes":[{"value":"/ Set the *y* **Position** **Relative** to the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204775,"byte_end":204837,"line_start":206,"line_end":206,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205066,"byte_end":205090,"line_start":212,"line_end":212,"column_start":8,"column_end":32},"name":"x_y_position_relative_to","qualname":"::position::Positionable::x_y_position_relative_to","value":"fn (self, other: widget::Id, x: Relative, y: Relative) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the *x* and *y* **Position**s **Relative** to the given widget.\n","sig":null,"attributes":[{"value":"/ Set the *x* and *y* **Position**s **Relative** to the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":204987,"byte_end":205058,"line_start":211,"line_end":211,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205403,"byte_end":205413,"line_start":220,"line_end":220,"column_start":8,"column_end":18},"name":"x_relative","qualname":"::position::Positionable::x_relative","value":"fn (self, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the **Position** as a **Scalar** along the *x* axis **Relative** to the middle of\n previous widget.\n","sig":null,"attributes":[{"value":"/ Set the **Position** as a **Scalar** along the *x* axis **Relative** to the middle of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205281,"byte_end":205370,"line_start":218,"line_end":218,"column_start":5,"column_end":94}},{"value":"/ previous widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205375,"byte_end":205395,"line_start":219,"line_end":219,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205628,"byte_end":205638,"line_start":226,"line_end":226,"column_start":8,"column_end":18},"name":"y_relative","qualname":"::position::Positionable::y_relative","value":"fn (self, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the **Position** as a **Scalar** along the *y* axis **Relative** to the middle of\n previous widget.\n","sig":null,"attributes":[{"value":"/ Set the **Position** as a **Scalar** along the *y* axis **Relative** to the middle of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205506,"byte_end":205595,"line_start":224,"line_end":224,"column_start":5,"column_end":94}},{"value":"/ previous widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205600,"byte_end":205620,"line_start":225,"line_end":225,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205829,"byte_end":205840,"line_start":231,"line_end":231,"column_start":8,"column_end":19},"name":"xy_relative","qualname":"::position::Positionable::xy_relative","value":"fn (self, point: Point) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the **Position** as a **Point** **Relative** to the middle of the previous widget.\n","sig":null,"attributes":[{"value":"/ Set the **Position** as a **Point** **Relative** to the middle of the previous widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205731,"byte_end":205821,"line_start":230,"line_end":230,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206070,"byte_end":206082,"line_start":237,"line_end":237,"column_start":8,"column_end":20},"name":"x_y_relative","qualname":"::position::Positionable::x_y_relative","value":"fn (self, x: Scalar, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the **Position** as **Scalar**s along the *x* and *y* axes **Relative** to the middle\n of the previous widget.\n","sig":null,"attributes":[{"value":"/ Set the **Position** as **Scalar**s along the *x* and *y* axes **Relative** to the middle","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":205937,"byte_end":206030,"line_start":235,"line_end":235,"column_start":5,"column_end":98}},{"value":"/ of the previous widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206035,"byte_end":206062,"line_start":236,"line_end":236,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206243,"byte_end":206256,"line_start":242,"line_end":242,"column_start":8,"column_end":21},"name":"x_relative_to","qualname":"::position::Positionable::x_relative_to","value":"fn (self, other: widget::Id, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the position relative to the widget with the given widget::Id.\n","sig":null,"attributes":[{"value":"/ Set the position relative to the widget with the given widget::Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206165,"byte_end":206235,"line_start":241,"line_end":241,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206456,"byte_end":206469,"line_start":247,"line_end":247,"column_start":8,"column_end":21},"name":"y_relative_to","qualname":"::position::Positionable::y_relative_to","value":"fn (self, other: widget::Id, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the position relative to the widget with the given widget::Id.\n","sig":null,"attributes":[{"value":"/ Set the position relative to the widget with the given widget::Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206378,"byte_end":206448,"line_start":246,"line_end":246,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206669,"byte_end":206683,"line_start":252,"line_end":252,"column_start":8,"column_end":22},"name":"xy_relative_to","qualname":"::position::Positionable::xy_relative_to","value":"fn (self, other: widget::Id, xy: Point) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the position relative to the widget with the given widget::Id.\n","sig":null,"attributes":[{"value":"/ Set the position relative to the widget with the given widget::Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206591,"byte_end":206661,"line_start":251,"line_end":251,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206888,"byte_end":206903,"line_start":257,"line_end":257,"column_start":8,"column_end":23},"name":"x_y_relative_to","qualname":"::position::Positionable::x_y_relative_to","value":"fn (self, other: widget::Id, x: Scalar, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Set the position relative to the widget with the given widget::Id.\n","sig":null,"attributes":[{"value":"/ Set the position relative to the widget with the given widget::Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":206810,"byte_end":206880,"line_start":256,"line_end":256,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207144,"byte_end":207155,"line_start":264,"line_end":264,"column_start":8,"column_end":19},"name":"x_direction","qualname":"::position::Positionable::x_direction","value":"fn (self, direction: Direction, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** along the *x* axis as some distance from another widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** along the *x* axis as some distance from another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207048,"byte_end":207136,"line_start":263,"line_end":263,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207380,"byte_end":207391,"line_start":269,"line_end":269,"column_start":8,"column_end":19},"name":"y_direction","qualname":"::position::Positionable::y_direction","value":"fn (self, direction: Direction, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** along the *y* axis as some distance from another widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** along the *y* axis as some distance from another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207284,"byte_end":207372,"line_start":268,"line_end":268,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207598,"byte_end":207602,"line_start":274,"line_end":274,"column_start":8,"column_end":12},"name":"down","qualname":"::position::Positionable::down","value":"fn (self, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance below another widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance below another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207520,"byte_end":207590,"line_start":273,"line_end":273,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207769,"byte_end":207771,"line_start":279,"line_end":279,"column_start":8,"column_end":10},"name":"up","qualname":"::position::Positionable::up","value":"fn (self, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance above another widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance above another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207691,"byte_end":207761,"line_start":278,"line_end":278,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207946,"byte_end":207950,"line_start":284,"line_end":284,"column_start":8,"column_end":12},"name":"left","qualname":"::position::Positionable::left","value":"fn (self, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance to the left of another widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance to the left of another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":207859,"byte_end":207938,"line_start":283,"line_end":283,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208127,"byte_end":208132,"line_start":289,"line_end":289,"column_start":8,"column_end":13},"name":"right","qualname":"::position::Positionable::right","value":"fn (self, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance to the right of another widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance to the right of another widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208039,"byte_end":208119,"line_start":288,"line_end":288,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208318,"byte_end":208334,"line_start":294,"line_end":294,"column_start":8,"column_end":24},"name":"x_direction_from","qualname":"::position::Positionable::x_direction_from","value":"fn (self, other: widget::Id, direction: Direction, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** along the *x* axis as some distance from the given widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** along the *x* axis as some distance from the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208220,"byte_end":208310,"line_start":293,"line_end":293,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208590,"byte_end":208606,"line_start":299,"line_end":299,"column_start":8,"column_end":24},"name":"y_direction_from","qualname":"::position::Positionable::y_direction_from","value":"fn (self, other: widget::Id, direction: Direction, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** along the *y* axis as some distance from the given widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** along the *y* axis as some distance from the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208492,"byte_end":208582,"line_start":298,"line_end":298,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208844,"byte_end":208853,"line_start":304,"line_end":304,"column_start":8,"column_end":17},"name":"down_from","qualname":"::position::Positionable::down_from","value":"fn (self, other: widget::Id, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance below the given widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance below the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208764,"byte_end":208836,"line_start":303,"line_end":303,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209053,"byte_end":209060,"line_start":309,"line_end":309,"column_start":8,"column_end":15},"name":"up_from","qualname":"::position::Positionable::up_from","value":"fn (self, other: widget::Id, y: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance above the given widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance above the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":208973,"byte_end":209045,"line_start":308,"line_end":308,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209268,"byte_end":209277,"line_start":314,"line_end":314,"column_start":8,"column_end":17},"name":"left_from","qualname":"::position::Positionable::left_from","value":"fn (self, other: widget::Id, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance to the left of the given widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance to the left of the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209179,"byte_end":209260,"line_start":313,"line_end":313,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209487,"byte_end":209497,"line_start":319,"line_end":319,"column_start":8,"column_end":18},"name":"right_from","qualname":"::position::Positionable::right_from","value":"fn (self, other: widget::Id, x: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Build with the **Position** as some distance to the right of the given widget.\n","sig":null,"attributes":[{"value":"/ Build with the **Position** as some distance to the right of the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209397,"byte_end":209479,"line_start":318,"line_end":318,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209715,"byte_end":209722,"line_start":326,"line_end":326,"column_start":8,"column_end":15},"name":"x_align","qualname":"::position::Positionable::x_align","value":"fn (self, align: Align) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the **Position** of the widget along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Align the **Position** of the widget along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209647,"byte_end":209707,"line_start":325,"line_end":325,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209889,"byte_end":209896,"line_start":331,"line_end":331,"column_start":8,"column_end":15},"name":"y_align","qualname":"::position::Positionable::y_align","value":"fn (self, align: Align) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the **Position** of the widget along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Align the **Position** of the widget along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209821,"byte_end":209881,"line_start":330,"line_end":330,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210083,"byte_end":210093,"line_start":336,"line_end":336,"column_start":8,"column_end":18},"name":"align_left","qualname":"::position::Positionable::align_left","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the left (only effective for Up or Down `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the left (only effective for Up or Down `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":209995,"byte_end":210075,"line_start":335,"line_end":335,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210246,"byte_end":210260,"line_start":341,"line_end":341,"column_start":8,"column_end":22},"name":"align_middle_x","qualname":"::position::Positionable::align_middle_x","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the middle (only effective for Up or Down `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the middle (only effective for Up or Down `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210156,"byte_end":210238,"line_start":340,"line_end":340,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210413,"byte_end":210424,"line_start":346,"line_end":346,"column_start":8,"column_end":19},"name":"align_right","qualname":"::position::Positionable::align_right","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the right (only effective for Up or Down `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the right (only effective for Up or Down `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210324,"byte_end":210405,"line_start":345,"line_end":345,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210575,"byte_end":210584,"line_start":351,"line_end":351,"column_start":8,"column_end":17},"name":"align_top","qualname":"::position::Positionable::align_top","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the top (only effective for Left or Right `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the top (only effective for Left or Right `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210485,"byte_end":210567,"line_start":350,"line_end":350,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210738,"byte_end":210752,"line_start":356,"line_end":356,"column_start":8,"column_end":22},"name":"align_middle_y","qualname":"::position::Positionable::align_middle_y","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the middle (only effective for Left or Right `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the middle (only effective for Left or Right `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210645,"byte_end":210730,"line_start":355,"line_end":355,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210909,"byte_end":210921,"line_start":361,"line_end":361,"column_start":8,"column_end":20},"name":"align_bottom","qualname":"::position::Positionable::align_bottom","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the bottom (only effective for Left or Right `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the bottom (only effective for Left or Right `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210816,"byte_end":210901,"line_start":360,"line_end":360,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211074,"byte_end":211084,"line_start":366,"line_end":366,"column_start":8,"column_end":18},"name":"x_align_to","qualname":"::position::Positionable::x_align_to","value":"fn (self, other: widget::Id, align: Align) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the **Position** of the widget with the given widget along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Align the **Position** of the widget with the given widget along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":210984,"byte_end":211066,"line_start":365,"line_end":365,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211302,"byte_end":211312,"line_start":371,"line_end":371,"column_start":8,"column_end":18},"name":"y_align_to","qualname":"::position::Positionable::y_align_to","value":"fn (self, other: widget::Id, align: Align) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the **Position** of the widget with the given widget along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Align the **Position** of the widget with the given widget along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211212,"byte_end":211294,"line_start":370,"line_end":370,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211528,"byte_end":211541,"line_start":376,"line_end":376,"column_start":8,"column_end":21},"name":"align_left_of","qualname":"::position::Positionable::align_left_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the left (only effective for Up or Down `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the left (only effective for Up or Down `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211440,"byte_end":211520,"line_start":375,"line_end":375,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211723,"byte_end":211740,"line_start":381,"line_end":381,"column_start":8,"column_end":25},"name":"align_middle_x_of","qualname":"::position::Positionable::align_middle_x_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the middle (only effective for Up or Down `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the middle (only effective for Up or Down `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211633,"byte_end":211715,"line_start":380,"line_end":380,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211922,"byte_end":211936,"line_start":386,"line_end":386,"column_start":8,"column_end":22},"name":"align_right_of","qualname":"::position::Positionable::align_right_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the right (only effective for Up or Down `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the right (only effective for Up or Down `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":211833,"byte_end":211914,"line_start":385,"line_end":385,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212116,"byte_end":212128,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"align_top_of","qualname":"::position::Positionable::align_top_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the top (only effective for Left or Right `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the top (only effective for Left or Right `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212026,"byte_end":212108,"line_start":390,"line_end":390,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212311,"byte_end":212328,"line_start":396,"line_end":396,"column_start":8,"column_end":25},"name":"align_middle_y_of","qualname":"::position::Positionable::align_middle_y_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the middle (only effective for Left or Right `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the middle (only effective for Left or Right `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212218,"byte_end":212303,"line_start":395,"line_end":395,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212514,"byte_end":212529,"line_start":401,"line_end":401,"column_start":8,"column_end":23},"name":"align_bottom_of","qualname":"::position::Positionable::align_bottom_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Align the position to the bottom (only effective for Left or Right `Direction`s).\n","sig":null,"attributes":[{"value":"/ Align the position to the bottom (only effective for Left or Right `Direction`s).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212421,"byte_end":212506,"line_start":400,"line_end":400,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212742,"byte_end":212752,"line_start":408,"line_end":408,"column_start":8,"column_end":18},"name":"x_place_on","qualname":"::position::Positionable::x_place_on","value":"fn (self, other: widget::Id, place: Place) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget at some position on the `other` Widget along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Place the widget at some position on the `other` Widget along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212655,"byte_end":212734,"line_start":407,"line_end":407,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212967,"byte_end":212977,"line_start":413,"line_end":413,"column_start":8,"column_end":18},"name":"y_place_on","qualname":"::position::Positionable::y_place_on","value":"fn (self, other: widget::Id, place: Place) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget at some position on the `other` Widget along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Place the widget at some position on the `other` Widget along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":212880,"byte_end":212959,"line_start":412,"line_end":412,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213168,"byte_end":213177,"line_start":418,"line_end":418,"column_start":8,"column_end":17},"name":"middle_of","qualname":"::position::Positionable::middle_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213105,"byte_end":213160,"line_start":417,"line_end":417,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213375,"byte_end":213386,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"top_left_of","qualname":"::position::Positionable::top_left_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top left corner of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top left corner of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213303,"byte_end":213367,"line_start":422,"line_end":422,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213641,"byte_end":213664,"line_start":429,"line_end":429,"column_start":8,"column_end":31},"name":"top_left_with_margin_on","qualname":"::position::Positionable::top_left_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top left corner of the given Widget with the given margin between\n both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top left corner of the given Widget with the given margin between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213520,"byte_end":213613,"line_start":427,"line_end":427,"column_start":5,"column_end":98}},{"value":"/ both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213618,"byte_end":213633,"line_start":428,"line_end":428,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213953,"byte_end":213977,"line_start":435,"line_end":435,"column_start":8,"column_end":32},"name":"top_left_with_margins_on","qualname":"::position::Positionable::top_left_with_margins_on","value":"fn (self, other: widget::Id, top: Scalar, left: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top left corner of the given Widget with the given margins between\n each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top left corner of the given Widget with the given margins between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213821,"byte_end":213915,"line_start":433,"line_end":433,"column_start":5,"column_end":99}},{"value":"/ each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":213920,"byte_end":213945,"line_start":434,"line_end":434,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214222,"byte_end":214234,"line_start":440,"line_end":440,"column_start":8,"column_end":20},"name":"top_right_of","qualname":"::position::Positionable::top_right_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top right corner of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top right corner of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214149,"byte_end":214214,"line_start":439,"line_end":439,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214488,"byte_end":214512,"line_start":446,"line_end":446,"column_start":8,"column_end":32},"name":"top_right_with_margin_on","qualname":"::position::Positionable::top_right_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top right corner of the given Widget with the given margin\n between both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top right corner of the given Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214366,"byte_end":214452,"line_start":444,"line_end":444,"column_start":5,"column_end":91}},{"value":"/ between both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214457,"byte_end":214480,"line_start":445,"line_end":445,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214800,"byte_end":214825,"line_start":452,"line_end":452,"column_start":8,"column_end":33},"name":"top_right_with_margins_on","qualname":"::position::Positionable::top_right_with_margins_on","value":"fn (self, other: widget::Id, top: Scalar, right: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top right corner of the given Widget with the given margins between\n each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top right corner of the given Widget with the given margins between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214667,"byte_end":214762,"line_start":450,"line_end":450,"column_start":5,"column_end":100}},{"value":"/ each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214767,"byte_end":214792,"line_start":451,"line_end":451,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215072,"byte_end":215086,"line_start":457,"line_end":457,"column_start":8,"column_end":22},"name":"bottom_left_of","qualname":"::position::Positionable::bottom_left_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom left corner of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom left corner of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":214997,"byte_end":215064,"line_start":456,"line_end":456,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215346,"byte_end":215372,"line_start":463,"line_end":463,"column_start":8,"column_end":34},"name":"bottom_left_with_margin_on","qualname":"::position::Positionable::bottom_left_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom left corner of the given Widget with the given margin\n between both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom left corner of the given Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215222,"byte_end":215310,"line_start":461,"line_end":461,"column_start":5,"column_end":93}},{"value":"/ between both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215315,"byte_end":215338,"line_start":462,"line_end":462,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215666,"byte_end":215693,"line_start":469,"line_end":469,"column_start":8,"column_end":35},"name":"bottom_left_with_margins_on","qualname":"::position::Positionable::bottom_left_with_margins_on","value":"fn (self, other: widget::Id, bottom: Scalar, left: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom left corner of the given Widget with the given margins\n between each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom left corner of the given Widget with the given margins","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215531,"byte_end":215620,"line_start":467,"line_end":467,"column_start":5,"column_end":94}},{"value":"/ between each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215625,"byte_end":215658,"line_start":468,"line_end":468,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215949,"byte_end":215964,"line_start":474,"line_end":474,"column_start":8,"column_end":23},"name":"bottom_right_of","qualname":"::position::Positionable::bottom_right_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom right corner of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom right corner of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":215873,"byte_end":215941,"line_start":473,"line_end":473,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216223,"byte_end":216250,"line_start":480,"line_end":480,"column_start":8,"column_end":35},"name":"bottom_right_with_margin_on","qualname":"::position::Positionable::bottom_right_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom right corner of the given Widget with the given margin\n between both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom right corner of the given Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216098,"byte_end":216187,"line_start":478,"line_end":478,"column_start":5,"column_end":94}},{"value":"/ between both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216192,"byte_end":216215,"line_start":479,"line_end":479,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216543,"byte_end":216571,"line_start":486,"line_end":486,"column_start":8,"column_end":36},"name":"bottom_right_with_margins_on","qualname":"::position::Positionable::bottom_right_with_margins_on","value":"fn (self, other: widget::Id, bottom: Scalar, right: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom right corner of the given Widget with the given margins\n between each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom right corner of the given Widget with the given margins","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216407,"byte_end":216497,"line_start":484,"line_end":484,"column_start":5,"column_end":95}},{"value":"/ between each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216502,"byte_end":216535,"line_start":485,"line_end":485,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216830,"byte_end":216840,"line_start":491,"line_end":491,"column_start":8,"column_end":18},"name":"mid_top_of","qualname":"::position::Positionable::mid_top_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the top edge of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the top edge of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216751,"byte_end":216822,"line_start":490,"line_end":490,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217096,"byte_end":217118,"line_start":497,"line_end":497,"column_start":8,"column_end":30},"name":"mid_top_with_margin_on","qualname":"::position::Positionable::mid_top_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the top edge of the given Widget with the given margin\n between the edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the top edge of the given Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":216969,"byte_end":217061,"line_start":495,"line_end":495,"column_start":5,"column_end":97}},{"value":"/ between the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217066,"byte_end":217088,"line_start":496,"line_end":496,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217347,"byte_end":217360,"line_start":502,"line_end":502,"column_start":8,"column_end":21},"name":"mid_bottom_of","qualname":"::position::Positionable::mid_bottom_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the bottom edge of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the bottom edge of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217265,"byte_end":217339,"line_start":501,"line_end":501,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217621,"byte_end":217646,"line_start":508,"line_end":508,"column_start":8,"column_end":33},"name":"mid_bottom_with_margin_on","qualname":"::position::Positionable::mid_bottom_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the bottom edge of the given Widget with the given margin\n between the edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the bottom edge of the given Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217491,"byte_end":217586,"line_start":506,"line_end":506,"column_start":5,"column_end":100}},{"value":"/ between the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217591,"byte_end":217613,"line_start":507,"line_end":507,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217875,"byte_end":217886,"line_start":513,"line_end":513,"column_start":8,"column_end":19},"name":"mid_left_of","qualname":"::position::Positionable::mid_left_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the left edge of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the left edge of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":217795,"byte_end":217867,"line_start":512,"line_end":512,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218145,"byte_end":218168,"line_start":519,"line_end":519,"column_start":8,"column_end":31},"name":"mid_left_with_margin_on","qualname":"::position::Positionable::mid_left_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the left edge of the given Widget with the given margin\n between the edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the left edge of the given Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218017,"byte_end":218110,"line_start":517,"line_end":517,"column_start":5,"column_end":98}},{"value":"/ between the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218115,"byte_end":218137,"line_start":518,"line_end":518,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218398,"byte_end":218410,"line_start":524,"line_end":524,"column_start":8,"column_end":20},"name":"mid_right_of","qualname":"::position::Positionable::mid_right_of","value":"fn (self, other: widget::Id) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the right edge of the given Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the right edge of the given Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218317,"byte_end":218390,"line_start":523,"line_end":523,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218668,"byte_end":218692,"line_start":530,"line_end":530,"column_start":8,"column_end":32},"name":"mid_right_with_margin_on","qualname":"::position::Positionable::mid_right_with_margin_on","value":"fn (self, other: widget::Id, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the right edge of the given Widget with the given margin\n between the edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the right edge of the given Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218539,"byte_end":218633,"line_start":528,"line_end":528,"column_start":5,"column_end":99}},{"value":"/ between the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218638,"byte_end":218660,"line_start":529,"line_end":529,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218918,"byte_end":218925,"line_start":535,"line_end":535,"column_start":8,"column_end":15},"name":"x_place","qualname":"::position::Positionable::x_place","value":"fn (self, place: Place) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget at some position on the Widget along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Place the widget at some position on the Widget along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":218839,"byte_end":218910,"line_start":534,"line_end":534,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219103,"byte_end":219110,"line_start":540,"line_end":540,"column_start":8,"column_end":15},"name":"y_place","qualname":"::position::Positionable::y_place","value":"fn (self, place: Place) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget at some position on the Widget along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Place the widget at some position on the Widget along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219024,"byte_end":219095,"line_start":539,"line_end":539,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219281,"byte_end":219287,"line_start":545,"line_end":545,"column_start":8,"column_end":14},"name":"middle","qualname":"::position::Positionable::middle","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219209,"byte_end":219273,"line_start":544,"line_end":544,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219455,"byte_end":219463,"line_start":550,"line_end":550,"column_start":8,"column_end":16},"name":"top_left","qualname":"::position::Positionable::top_left","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top left corner of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top left corner of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219374,"byte_end":219447,"line_start":549,"line_end":549,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219688,"byte_end":219708,"line_start":556,"line_end":556,"column_start":8,"column_end":28},"name":"top_left_with_margin","qualname":"::position::Positionable::top_left_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top left corner of the current parent Widget with the given margin\n between both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top left corner of the current parent Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219558,"byte_end":219652,"line_start":554,"line_end":554,"column_start":5,"column_end":99}},{"value":"/ between both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219657,"byte_end":219680,"line_start":555,"line_end":555,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219967,"byte_end":219988,"line_start":562,"line_end":562,"column_start":8,"column_end":29},"name":"top_left_with_margins","qualname":"::position::Positionable::top_left_with_margins","value":"fn (self, top: Scalar, left: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top left corner of the current parent Widget with the given margins\n between each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top left corner of the current parent Widget with the given margins","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219826,"byte_end":219921,"line_start":560,"line_end":560,"column_start":5,"column_end":100}},{"value":"/ between each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":219926,"byte_end":219959,"line_start":561,"line_end":561,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220203,"byte_end":220212,"line_start":567,"line_end":567,"column_start":8,"column_end":17},"name":"top_right","qualname":"::position::Positionable::top_right","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top right corner of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top right corner of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220121,"byte_end":220195,"line_start":566,"line_end":566,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220436,"byte_end":220457,"line_start":573,"line_end":573,"column_start":8,"column_end":29},"name":"top_right_with_margin","qualname":"::position::Positionable::top_right_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top right corner of the current parent Widget with the given margin\n between both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top right corner of the current parent Widget with the given margin","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220305,"byte_end":220400,"line_start":571,"line_end":571,"column_start":5,"column_end":100}},{"value":"/ between both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220405,"byte_end":220428,"line_start":572,"line_end":572,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220715,"byte_end":220737,"line_start":579,"line_end":579,"column_start":8,"column_end":30},"name":"top_right_with_margins","qualname":"::position::Positionable::top_right_with_margins","value":"fn (self, top: Scalar, right: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the top right corner of the current parent Widget with the given margins\n between each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the top right corner of the current parent Widget with the given margins","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220573,"byte_end":220669,"line_start":577,"line_end":577,"column_start":5,"column_end":101}},{"value":"/ between each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220674,"byte_end":220707,"line_start":578,"line_end":578,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220954,"byte_end":220965,"line_start":584,"line_end":584,"column_start":8,"column_end":19},"name":"bottom_left","qualname":"::position::Positionable::bottom_left","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom left corner of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom left corner of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":220870,"byte_end":220946,"line_start":583,"line_end":583,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221195,"byte_end":221218,"line_start":590,"line_end":590,"column_start":8,"column_end":31},"name":"bottom_left_with_margin","qualname":"::position::Positionable::bottom_left_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom left corner of the current parent Widget with the given\n margin between both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom left corner of the current parent Widget with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221062,"byte_end":221152,"line_start":588,"line_end":588,"column_start":5,"column_end":95}},{"value":"/ margin between both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221157,"byte_end":221187,"line_start":589,"line_end":589,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221482,"byte_end":221506,"line_start":596,"line_end":596,"column_start":8,"column_end":32},"name":"bottom_left_with_margins","qualname":"::position::Positionable::bottom_left_with_margins","value":"fn (self, bottom: Scalar, left: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom left corner of the current parent Widget with the given\n margins between each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom left corner of the current parent Widget with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221338,"byte_end":221428,"line_start":594,"line_end":594,"column_start":5,"column_end":95}},{"value":"/ margins between each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221433,"byte_end":221474,"line_start":595,"line_end":595,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221732,"byte_end":221744,"line_start":601,"line_end":601,"column_start":8,"column_end":20},"name":"bottom_right","qualname":"::position::Positionable::bottom_right","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom right corner of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom right corner of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221647,"byte_end":221724,"line_start":600,"line_end":600,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221973,"byte_end":221997,"line_start":607,"line_end":607,"column_start":8,"column_end":32},"name":"bottom_right_with_margin","qualname":"::position::Positionable::bottom_right_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom right corner of the current parent Widget with the given\n margin between both edges.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom right corner of the current parent Widget with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221839,"byte_end":221930,"line_start":605,"line_end":605,"column_start":5,"column_end":96}},{"value":"/ margin between both edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":221935,"byte_end":221965,"line_start":606,"line_end":606,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222260,"byte_end":222285,"line_start":613,"line_end":613,"column_start":8,"column_end":33},"name":"bottom_right_with_margins","qualname":"::position::Positionable::bottom_right_with_margins","value":"fn (self, bottom: Scalar, right: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the bottom right corner of the current parent Widget with the given\n margins between each respective edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the bottom right corner of the current parent Widget with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222115,"byte_end":222206,"line_start":611,"line_end":611,"column_start":5,"column_end":96}},{"value":"/ margins between each respective edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222211,"byte_end":222252,"line_start":612,"line_end":612,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222514,"byte_end":222521,"line_start":618,"line_end":618,"column_start":8,"column_end":15},"name":"mid_top","qualname":"::position::Positionable::mid_top","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the top edge of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the top edge of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222426,"byte_end":222506,"line_start":617,"line_end":617,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222743,"byte_end":222762,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"mid_top_with_margin","qualname":"::position::Positionable::mid_top_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the top edge of the current parent Widget with the given\n margin from the edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the top edge of the current parent Widget with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222611,"byte_end":222705,"line_start":622,"line_end":622,"column_start":5,"column_end":99}},{"value":"/ margin from the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222710,"byte_end":222735,"line_start":623,"line_end":623,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222961,"byte_end":222971,"line_start":629,"line_end":629,"column_start":8,"column_end":18},"name":"mid_bottom","qualname":"::position::Positionable::mid_bottom","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the bottom edge of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the bottom edge of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":222870,"byte_end":222953,"line_start":628,"line_end":628,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223198,"byte_end":223220,"line_start":635,"line_end":635,"column_start":8,"column_end":30},"name":"mid_bottom_with_margin","qualname":"::position::Positionable::mid_bottom_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the bottom edge of the current parent Widget with the\n given margin from the edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the bottom edge of the current parent Widget with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223063,"byte_end":223154,"line_start":633,"line_end":633,"column_start":5,"column_end":96}},{"value":"/ given margin from the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223159,"byte_end":223190,"line_start":634,"line_end":634,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223419,"byte_end":223427,"line_start":640,"line_end":640,"column_start":8,"column_end":16},"name":"mid_left","qualname":"::position::Positionable::mid_left","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the left edge of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the left edge of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223330,"byte_end":223411,"line_start":639,"line_end":639,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223652,"byte_end":223672,"line_start":646,"line_end":646,"column_start":8,"column_end":28},"name":"mid_left_with_margin","qualname":"::position::Positionable::mid_left_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the left edge of the current parent Widget with the\n given margin from the edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the left edge of the current parent Widget with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223519,"byte_end":223608,"line_start":644,"line_end":644,"column_start":5,"column_end":94}},{"value":"/ given margin from the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223613,"byte_end":223644,"line_start":645,"line_end":645,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223872,"byte_end":223881,"line_start":651,"line_end":651,"column_start":8,"column_end":17},"name":"mid_right","qualname":"::position::Positionable::mid_right","value":"fn (self) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the right edge of the current parent Widget.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the right edge of the current parent Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223782,"byte_end":223864,"line_start":650,"line_end":650,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224105,"byte_end":224126,"line_start":657,"line_end":657,"column_start":8,"column_end":29},"name":"mid_right_with_margin","qualname":"::position::Positionable::mid_right_with_margin","value":"fn (self, mgn: Scalar) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Place the widget in the middle of the right edge of the current parent Widget with the\n given margin from the edge.\n","sig":null,"attributes":[{"value":"/ Place the widget in the middle of the right edge of the current parent Widget with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":223971,"byte_end":224061,"line_start":655,"line_end":655,"column_start":5,"column_end":95}},{"value":"/ given margin from the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224066,"byte_end":224097,"line_start":656,"line_end":656,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224375,"byte_end":224380,"line_start":664,"line_end":664,"column_start":8,"column_end":13},"name":"depth","qualname":"::position::Positionable::depth","value":"fn (self, depth: Depth) -> Self","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" The depth at which the widget should be rendered relatively to its sibling widgets.\n","sig":null,"attributes":[{"value":"/ The depth at which the widget should be rendered relatively to its sibling widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224280,"byte_end":224367,"line_start":663,"line_end":663,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224444,"byte_end":224453,"line_start":667,"line_end":667,"column_start":8,"column_end":17},"name":"get_depth","qualname":"::position::Positionable::get_depth","value":"fn (&self) -> Depth","parent":{"krate":0,"index":879},"children":[],"decl_id":null,"docs":" Return the depth.\n","sig":null,"attributes":[{"value":"/ Return the depth.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224415,"byte_end":224436,"line_start":666,"line_end":666,"column_start":5,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":978},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224532,"byte_end":224540,"line_start":672,"line_end":672,"column_start":11,"column_end":19},"name":"Sizeable","qualname":"::position::Sizeable","value":"Sizeable: Sized","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1003},{"krate":0,"index":1007}],"decl_id":null,"docs":" Widgets that support different dimensions.\n","sig":null,"attributes":[{"value":"/ Widgets that support different dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224475,"byte_end":224521,"line_start":671,"line_end":671,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224633,"byte_end":224644,"line_start":677,"line_end":677,"column_start":8,"column_end":19},"name":"x_dimension","qualname":"::position::Sizeable::x_dimension","value":"fn (self, x: Dimension) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the length along the x axis.\n","sig":null,"attributes":[{"value":"/ Set the length along the x axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224589,"byte_end":224625,"line_start":676,"line_end":676,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224723,"byte_end":224734,"line_start":680,"line_end":680,"column_start":8,"column_end":19},"name":"y_dimension","qualname":"::position::Sizeable::y_dimension","value":"fn (self, x: Dimension) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the length along the y axis.\n","sig":null,"attributes":[{"value":"/ Set the length along the y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224679,"byte_end":224715,"line_start":679,"line_end":679,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224833,"byte_end":224848,"line_start":683,"line_end":683,"column_start":8,"column_end":23},"name":"get_x_dimension","qualname":"::position::Sizeable::get_x_dimension","value":"fn (&self, ui: &Ui) -> Dimension","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" The widget's length along the x axis as a Dimension.\n","sig":null,"attributes":[{"value":"/ The widget's length along the x axis as a Dimension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224769,"byte_end":224825,"line_start":682,"line_end":682,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224948,"byte_end":224963,"line_start":686,"line_end":686,"column_start":8,"column_end":23},"name":"get_y_dimension","qualname":"::position::Sizeable::get_y_dimension","value":"fn (&self, ui: &Ui) -> Dimension","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" The widget's length along the y axis as a Dimension.\n","sig":null,"attributes":[{"value":"/ The widget's length along the y axis as a Dimension.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224884,"byte_end":224940,"line_start":685,"line_end":685,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225076,"byte_end":225077,"line_start":691,"line_end":691,"column_start":8,"column_end":9},"name":"w","qualname":"::position::Sizeable::w","value":"fn (self, w: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the absolute width for the widget.\n","sig":null,"attributes":[{"value":"/ Set the absolute width for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225026,"byte_end":225068,"line_start":690,"line_end":690,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225216,"byte_end":225217,"line_start":696,"line_end":696,"column_start":8,"column_end":9},"name":"h","qualname":"::position::Sizeable::h","value":"fn (self, h: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the absolute height for the widget.\n","sig":null,"attributes":[{"value":"/ Set the absolute height for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225165,"byte_end":225208,"line_start":695,"line_end":695,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225351,"byte_end":225353,"line_start":701,"line_end":701,"column_start":8,"column_end":10},"name":"wh","qualname":"::position::Sizeable::wh","value":"fn (self, wh: Dimensions) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the dimensions for the widget.\n","sig":null,"attributes":[{"value":"/ Set the dimensions for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225305,"byte_end":225343,"line_start":700,"line_end":700,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225480,"byte_end":225483,"line_start":706,"line_end":706,"column_start":8,"column_end":11},"name":"w_h","qualname":"::position::Sizeable::w_h","value":"fn (self, width: Scalar, height: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the width and height for the widget.\n","sig":null,"attributes":[{"value":"/ Set the width and height for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225428,"byte_end":225472,"line_start":705,"line_end":705,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225647,"byte_end":225651,"line_start":711,"line_end":711,"column_start":8,"column_end":12},"name":"w_of","qualname":"::position::Sizeable::w_of","value":"fn (self, idx: widget::Id) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the width as the width of the widget at the given index.\n","sig":null,"attributes":[{"value":"/ Set the width as the width of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225575,"byte_end":225639,"line_start":710,"line_end":710,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225874,"byte_end":225885,"line_start":717,"line_end":717,"column_start":8,"column_end":19},"name":"padded_w_of","qualname":"::position::Sizeable::padded_w_of","value":"fn (self, idx: widget::Id, pad: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the width as the width of the widget at the given index padded at both ends by the\n given Scalar.\n","sig":null,"attributes":[{"value":"/ Set the width as the width of the widget at the given index padded at both ends by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225754,"byte_end":225844,"line_start":715,"line_end":715,"column_start":5,"column_end":95}},{"value":"/ given Scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":225849,"byte_end":225866,"line_start":716,"line_end":716,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226080,"byte_end":226084,"line_start":722,"line_end":722,"column_start":8,"column_end":12},"name":"h_of","qualname":"::position::Sizeable::h_of","value":"fn (self, idx: widget::Id) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the height as the height of the widget at the given index.\n","sig":null,"attributes":[{"value":"/ Set the height as the height of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226006,"byte_end":226072,"line_start":721,"line_end":721,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226309,"byte_end":226320,"line_start":728,"line_end":728,"column_start":8,"column_end":19},"name":"padded_h_of","qualname":"::position::Sizeable::padded_h_of","value":"fn (self, idx: widget::Id, pad: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the height as the height of the widget at the given index padded at both ends by the\n given Scalar.\n","sig":null,"attributes":[{"value":"/ Set the height as the height of the widget at the given index padded at both ends by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226187,"byte_end":226279,"line_start":726,"line_end":726,"column_start":5,"column_end":97}},{"value":"/ given Scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226284,"byte_end":226301,"line_start":727,"line_end":727,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226523,"byte_end":226528,"line_start":733,"line_end":733,"column_start":8,"column_end":13},"name":"wh_of","qualname":"::position::Sizeable::wh_of","value":"fn (self, idx: widget::Id) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the dimensions as the dimensions of the widget at the given index.\n","sig":null,"attributes":[{"value":"/ Set the dimensions as the dimensions of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226441,"byte_end":226515,"line_start":732,"line_end":732,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226743,"byte_end":226755,"line_start":739,"line_end":739,"column_start":8,"column_end":20},"name":"padded_wh_of","qualname":"::position::Sizeable::padded_wh_of","value":"fn (self, idx: widget::Id, pad: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the dimensions as the dimensions of the widget at the given index with all four edges\n padded by the given scalar.\n","sig":null,"attributes":[{"value":"/ Set the dimensions as the dimensions of the widget at the given index with all four edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226606,"byte_end":226699,"line_start":737,"line_end":737,"column_start":5,"column_end":98}},{"value":"/ padded by the given scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226704,"byte_end":226735,"line_start":738,"line_end":738,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226961,"byte_end":226974,"line_start":744,"line_end":744,"column_start":8,"column_end":21},"name":"kid_area_w_of","qualname":"::position::Sizeable::kid_area_w_of","value":"fn (self, idx: widget::Id) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the width as the width of the padded area of the widget at the given index.\n","sig":null,"attributes":[{"value":"/ Set the width as the width of the padded area of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":226870,"byte_end":226953,"line_start":743,"line_end":743,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227216,"byte_end":227236,"line_start":750,"line_end":750,"column_start":8,"column_end":28},"name":"padded_kid_area_w_of","qualname":"::position::Sizeable::padded_kid_area_w_of","value":"fn (self, idx: widget::Id, pad: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the width as the `KidArea` width for the widget at the given index, padded at both ends\n by the given scalar.\n","sig":null,"attributes":[{"value":"/ Set the width as the `KidArea` width for the widget at the given index, padded at both ends","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227084,"byte_end":227179,"line_start":748,"line_end":748,"column_start":5,"column_end":100}},{"value":"/ by the given scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227184,"byte_end":227208,"line_start":749,"line_end":749,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227448,"byte_end":227461,"line_start":755,"line_end":755,"column_start":8,"column_end":21},"name":"kid_area_h_of","qualname":"::position::Sizeable::kid_area_h_of","value":"fn (self, idx: widget::Id) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the height as the `KidArea` height of the widget at the given index.\n","sig":null,"attributes":[{"value":"/ Set the height as the `KidArea` height of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227364,"byte_end":227440,"line_start":754,"line_end":754,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227704,"byte_end":227724,"line_start":761,"line_end":761,"column_start":8,"column_end":28},"name":"padded_kid_area_h_of","qualname":"::position::Sizeable::padded_kid_area_h_of","value":"fn (self, idx: widget::Id, pad: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the height as the `KidArea` height of the widget at the given index, padded at both\n ends by the given scalar.\n","sig":null,"attributes":[{"value":"/ Set the height as the `KidArea` height of the widget at the given index, padded at both","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227571,"byte_end":227662,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/ ends by the given scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227667,"byte_end":227696,"line_start":760,"line_end":760,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227944,"byte_end":227958,"line_start":766,"line_end":766,"column_start":8,"column_end":22},"name":"kid_area_wh_of","qualname":"::position::Sizeable::kid_area_wh_of","value":"fn (self, idx: widget::Id) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the dimensions as the `KidArea` dimensions of the widget at the given index.\n","sig":null,"attributes":[{"value":"/ Set the dimensions as the `KidArea` dimensions of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":227852,"byte_end":227936,"line_start":765,"line_end":765,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":228200,"byte_end":228221,"line_start":772,"line_end":772,"column_start":8,"column_end":29},"name":"padded_kid_area_wh_of","qualname":"::position::Sizeable::padded_kid_area_wh_of","value":"fn (self, idx: widget::Id, pad: Scalar) -> Self","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at\n all four edges by the given scalar.\n","sig":null,"attributes":[{"value":"/ Set the dimensions as the `KidArea` dimensions of the widget at the given index, padded at","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":228054,"byte_end":228148,"line_start":770,"line_end":770,"column_start":5,"column_end":99}},{"value":"/ all four edges by the given scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":228153,"byte_end":228192,"line_start":771,"line_end":771,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":228421,"byte_end":228426,"line_start":777,"line_end":777,"column_start":8,"column_end":13},"name":"get_w","qualname":"::position::Sizeable::get_w","value":"fn (&self, ui: &Ui) -> Option<Scalar>","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Get the absolute width of the widget as a Scalar value.\n","sig":null,"attributes":[{"value":"/ Get the absolute width of the widget as a Scalar value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":228354,"byte_end":228413,"line_start":776,"line_end":776,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":228940,"byte_end":228945,"line_start":788,"line_end":788,"column_start":8,"column_end":13},"name":"get_h","qualname":"::position::Sizeable::get_h","value":"fn (&self, ui: &Ui) -> Option<Scalar>","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" Get the height of the widget.\n","sig":null,"attributes":[{"value":"/ Get the height of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":228899,"byte_end":228932,"line_start":787,"line_end":787,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229462,"byte_end":229468,"line_start":799,"line_end":799,"column_start":8,"column_end":14},"name":"get_wh","qualname":"::position::Sizeable::get_wh","value":"fn (&self, ui: &Ui) -> Option<Dimensions>","parent":{"krate":0,"index":978},"children":[],"decl_id":null,"docs":" The dimensions for the widget.\n","sig":null,"attributes":[{"value":"/ The dimensions for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229420,"byte_end":229454,"line_start":798,"line_end":798,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":5689},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229732,"byte_end":229739,"line_start":807,"line_end":807,"column_start":12,"column_end":19},"name":"Padding","qualname":"::position::Padding","value":"Padding { x, y }","parent":null,"children":[{"krate":0,"index":5690},{"krate":0,"index":5691}],"decl_id":null,"docs":" The distance between the inner edge of a border and the outer edge of the inner content.\n","sig":null,"attributes":[{"value":"/ The distance between the inner edge of a border and the outer edge of the inner content.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229587,"byte_end":229679,"line_start":805,"line_end":805,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":5690},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229804,"byte_end":229805,"line_start":809,"line_end":809,"column_start":9,"column_end":10},"name":"x","qualname":"::position::Padding::x","value":"position::range::Range","parent":{"krate":0,"index":5689},"children":[],"decl_id":null,"docs":" Padding on the start and end of the *x* axis.\n","sig":null,"attributes":[{"value":"/ Padding on the start and end of the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229746,"byte_end":229795,"line_start":808,"line_end":808,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":5691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229876,"byte_end":229877,"line_start":811,"line_end":811,"column_start":9,"column_end":10},"name":"y","qualname":"::position::Padding::y","value":"position::range::Range","parent":{"krate":0,"index":5689},"children":[],"decl_id":null,"docs":" Padding on the start and end of the *y* axis.\n","sig":null,"attributes":[{"value":"/ Padding on the start and end of the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229818,"byte_end":229867,"line_start":810,"line_end":810,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229935,"byte_end":229939,"line_start":816,"line_end":816,"column_start":12,"column_end":16},"name":"none","qualname":"<Padding>::none","value":"fn () -> Padding","parent":null,"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229908,"byte_end":229923,"line_start":815,"line_end":815,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":1012},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"render","qualname":"::render","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":5701},{"krate":0,"index":5708},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1054},{"krate":0,"index":1060},{"krate":0,"index":1080},{"krate":0,"index":5710},{"krate":0,"index":5715},{"krate":0,"index":5717},{"krate":0,"index":5733},{"krate":0,"index":5735},{"krate":0,"index":5745},{"krate":0,"index":1092},{"krate":0,"index":1100},{"krate":0,"index":1107},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1139},{"krate":0,"index":1140}],"decl_id":null,"docs":" Conrod's generic graphics backend.","sig":null,"attributes":[{"value":"! Conrod's generic graphics backend.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263263,"byte_end":263301,"line_start":1,"line_end":1,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263302,"byte_end":263305,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! **Note:** Conrod currently uses Piston's generic [graphics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263306,"byte_end":263368,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"! crate](https://github.com/PistonDevelopers/graphics) (and specifically the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263369,"byte_end":263447,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"! [**Graphics**](http://docs.piston.rs/graphics/graphics/trait.Graphics.html))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263448,"byte_end":263528,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"! trait to enable genericity over custom user backends. This dependency may change in the near","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263529,"byte_end":263625,"line_start":6,"line_end":6,"column_start":1,"column_end":97}},{"value":"! future in favour of a simplified conrod-specific graphics and character caching backend trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263626,"byte_end":263724,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263725,"byte_end":263728,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! This is the only module in which the src graphics crate will be used directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":263729,"byte_end":263811,"line_start":9,"line_end":9,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1036},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264541,"byte_end":264551,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"Primitives","qualname":"::render::Primitives","value":"Primitives {  }","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045}],"decl_id":null,"docs":" An iterator-like type that yields a reference to each primitive in order of depth for\n rendering.","sig":null,"attributes":[{"value":"/ An iterator-like type that yields a reference to each primitive in order of depth for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264057,"byte_end":264146,"line_start":24,"line_end":24,"column_start":1,"column_end":90}},{"value":"/ rendering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264147,"byte_end":264161,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264162,"byte_end":264165,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This type is produced by the `Ui::draw` and `Ui::draw_if_changed` methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264166,"byte_end":264244,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264245,"byte_end":264248,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This type borrows data from the `Ui` in order to lazily produce each `Primitive`. If you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264249,"byte_end":264341,"line_start":29,"line_end":29,"column_start":1,"column_end":93}},{"value":"/ require ownership over the sequence of primitives, consider using the `OwnedPrimitives` type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264342,"byte_end":264439,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ The `OwnedPrimitives` type can be produced by calling the `Primitives::owned` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":264440,"byte_end":264529,"line_start":31,"line_end":31,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":5701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265247,"byte_end":265262,"line_start":51,"line_end":51,"column_start":12,"column_end":27},"name":"OwnedPrimitives","qualname":"::render::OwnedPrimitives","value":"OwnedPrimitives {  }","parent":null,"children":[{"krate":0,"index":5702},{"krate":0,"index":5703},{"krate":0,"index":5704},{"krate":0,"index":5705},{"krate":0,"index":5706},{"krate":0,"index":5707}],"decl_id":null,"docs":" An owned alternative to the `Primitives` type.","sig":null,"attributes":[{"value":"/ An owned alternative to the `Primitives` type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265007,"byte_end":265057,"line_start":45,"line_end":45,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265058,"byte_end":265061,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This is particularly useful for sending rendering data across threads.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265062,"byte_end":265136,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265137,"byte_end":265140,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Produce an `OwnedPrimitives` instance via the `Primitives::owned` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265141,"byte_end":265218,"line_start":49,"line_end":49,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":1046},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265688,"byte_end":265703,"line_start":64,"line_end":64,"column_start":11,"column_end":26},"name":"PrimitiveWalker","qualname":"::render::PrimitiveWalker","value":"PrimitiveWalker","parent":null,"children":[{"krate":0,"index":1047}],"decl_id":null,"docs":" A trait that allows the user to remain generic over types yielding `Primitive`s.","sig":null,"attributes":[{"value":"/ A trait that allows the user to remain generic over types yielding `Primitive`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265500,"byte_end":265584,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265585,"byte_end":265588,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for both the `Primitives` and `WalkOwnedPrimitives` types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265589,"byte_end":265677,"line_start":63,"line_end":63,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265782,"byte_end":265796,"line_start":66,"line_end":66,"column_start":8,"column_end":22},"name":"next_primitive","qualname":"::render::PrimitiveWalker::next_primitive","value":"fn (&mut self) -> Option<Primitive>","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Yield the next `Primitive` in order of depth, bottom to top.\n","sig":null,"attributes":[{"value":"/ Yield the next `Primitive` in order of depth, bottom to top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265710,"byte_end":265774,"line_start":65,"line_end":65,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266175,"byte_end":266184,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"Primitive","qualname":"::render::Primitive","value":"Primitive { id, kind, scizzor, rect }","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059}],"decl_id":null,"docs":" Data required for rendering a single primitive widget.\n","sig":null,"attributes":[{"value":"/ Data required for rendering a single primitive widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266105,"byte_end":266163,"line_start":82,"line_end":82,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266253,"byte_end":266255,"line_start":85,"line_end":85,"column_start":9,"column_end":11},"name":"id","qualname":"::render::Primitive::id","value":"daggy::NodeIndex","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" The id of the widget within the widget graph.\n","sig":null,"attributes":[{"value":"/ The id of the widget within the widget graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266195,"byte_end":266244,"line_start":84,"line_end":84,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1057},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266328,"byte_end":266332,"line_start":87,"line_end":87,"column_start":9,"column_end":13},"name":"kind","qualname":"::render::Primitive::kind","value":"render::PrimitiveKind<'a>","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" State and style for this primitive widget.\n","sig":null,"attributes":[{"value":"/ State and style for this primitive widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266273,"byte_end":266319,"line_start":86,"line_end":86,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266504,"byte_end":266511,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"name":"scizzor","qualname":"::render::Primitive::scizzor","value":"position::rect::Rect","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" The Rect to which the primitive widget should be cropped.","sig":null,"attributes":[{"value":"/ The Rect to which the primitive widget should be cropped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266357,"byte_end":266418,"line_start":88,"line_end":88,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266423,"byte_end":266426,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Only parts of the widget within this `Rect` should be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266431,"byte_end":266495,"line_start":90,"line_end":90,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266579,"byte_end":266583,"line_start":93,"line_end":93,"column_start":9,"column_end":13},"name":"rect","qualname":"::render::Primitive::rect","value":"position::rect::Rect","parent":{"krate":0,"index":1054},"children":[],"decl_id":null,"docs":" The bounding rectangle for the `Primitive`.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle for the `Primitive`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266523,"byte_end":266570,"line_start":92,"line_end":92,"column_start":5,"column_end":52}}]},{"kind":"StructVariant","id":{"krate":0,"index":1062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267009,"byte_end":267018,"line_start":104,"line_end":104,"column_start":5,"column_end":14},"name":"Rectangle","qualname":"::render::PrimitiveKind::Rectangle","value":"PrimitiveKind::Rectangle { color }","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" A filled `Rectangle`.","sig":null,"attributes":[{"value":"/ A filled `Rectangle`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266686,"byte_end":266711,"line_start":99,"line_end":99,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266716,"byte_end":266719,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ These are produced by the `Rectangle` and `BorderedRectangle` primitive widgets. A `Filled`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266724,"byte_end":266819,"line_start":101,"line_end":101,"column_start":5,"column_end":100}},{"value":"/ `Rectangle` widget produces a single `Rectangle`. The `BorderedRectangle` produces two","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266824,"byte_end":266914,"line_start":102,"line_end":102,"column_start":5,"column_end":95}},{"value":"/ `Rectangle`s, the first for the outer border and the second for the inner on top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266919,"byte_end":267004,"line_start":103,"line_end":103,"column_start":5,"column_end":90}}]},{"kind":"StructVariant","id":{"krate":0,"index":1064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267175,"byte_end":267195,"line_start":110,"line_end":110,"column_start":5,"column_end":25},"name":"TrianglesSingleColor","qualname":"::render::PrimitiveKind::TrianglesSingleColor","value":"PrimitiveKind::TrianglesSingleColor { color, triangles }","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" A series of consecutive `Triangles` that are all the same color.\n","sig":null,"attributes":[{"value":"/ A series of consecutive `Triangles` that are all the same color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267102,"byte_end":267170,"line_start":109,"line_end":109,"column_start":5,"column_end":73}}]},{"kind":"StructVariant","id":{"krate":0,"index":1067},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267531,"byte_end":267550,"line_start":120,"line_end":120,"column_start":5,"column_end":24},"name":"TrianglesMultiColor","qualname":"::render::PrimitiveKind::TrianglesMultiColor","value":"PrimitiveKind::TrianglesMultiColor { triangles }","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" A series of consecutive `Triangles` with unique colors per vertex.","sig":null,"attributes":[{"value":"/ A series of consecutive `Triangles` with unique colors per vertex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267362,"byte_end":267432,"line_start":117,"line_end":117,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267437,"byte_end":267440,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This variant is produced by the general purpose `Triangles` primitive widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267445,"byte_end":267526,"line_start":119,"line_end":119,"column_start":5,"column_end":86}}]},{"kind":"StructVariant","id":{"krate":0,"index":1069},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267737,"byte_end":267742,"line_start":126,"line_end":126,"column_start":5,"column_end":10},"name":"Image","qualname":"::render::PrimitiveKind::Image","value":"PrimitiveKind::Image { image_id, color, source_rect }","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" A single `Image`, produced by the primitive `Image` widget.\n","sig":null,"attributes":[{"value":"/ A single `Image`, produced by the primitive `Image` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":267669,"byte_end":267732,"line_start":125,"line_end":125,"column_start":5,"column_end":68}}]},{"kind":"StructVariant","id":{"krate":0,"index":1073},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268170,"byte_end":268174,"line_start":136,"line_end":136,"column_start":5,"column_end":9},"name":"Text","qualname":"::render::PrimitiveKind::Text","value":"PrimitiveKind::Text { color, text, font_id }","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" A single block of `Text`, produced by the primitive `Text` widget.\n","sig":null,"attributes":[{"value":"/ A single block of `Text`, produced by the primitive `Text` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268095,"byte_end":268165,"line_start":135,"line_end":135,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1077},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269398,"byte_end":269403,"line_start":157,"line_end":157,"column_start":5,"column_end":10},"name":"Other","qualname":"::render::PrimitiveKind::Other","value":"PrimitiveKind::Other(&'a graph::Container)","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" An `Other` variant will be yielded for every non-primitive widget in the list.","sig":null,"attributes":[{"value":"/ An `Other` variant will be yielded for every non-primitive widget in the list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268619,"byte_end":268701,"line_start":147,"line_end":147,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268706,"byte_end":268709,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Most of the time, this variant can be ignored, however it is useful for users who need to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268714,"byte_end":268807,"line_start":149,"line_end":149,"column_start":5,"column_end":98}},{"value":"/ render widgets in ways that cannot be covered by the other `PrimitiveKind` variants.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268812,"byte_end":268900,"line_start":150,"line_end":150,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268905,"byte_end":268908,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ For example, a `Shader` widget might be required for updating uniforms in user rendering","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":268913,"byte_end":269005,"line_start":152,"line_end":152,"column_start":5,"column_end":97}},{"value":"/ code. In order to access the unique state of this widget, the user can check `Other`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269010,"byte_end":269098,"line_start":153,"line_end":153,"column_start":5,"column_end":93}},{"value":"/ variants for a container whose `kind` field matches the unique kind of the `Shader` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269103,"byte_end":269198,"line_start":154,"line_end":154,"column_start":5,"column_end":100}},{"value":"/ They can then retrieve the unique state of the widget and cast it to its actual type using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269203,"byte_end":269297,"line_start":155,"line_end":155,"column_start":5,"column_end":99}},{"value":"/ either of the `Container::state_and_style` or `Container::unique_widget_state` methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269302,"byte_end":269393,"line_start":156,"line_end":156,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":1060},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266661,"byte_end":266674,"line_start":97,"line_end":97,"column_start":10,"column_end":23},"name":"PrimitiveKind","qualname":"::render::PrimitiveKind","value":"PrimitiveKind::{Rectangle, TrianglesSingleColor, TrianglesMultiColor, Image, Text, Other}","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1069},{"krate":0,"index":1073},{"krate":0,"index":1077}],"decl_id":null,"docs":" The unique kind for each primitive element in the Ui.\n","sig":null,"attributes":[{"value":"/ The unique kind for each primitive element in the Ui.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":266594,"byte_end":266651,"line_start":96,"line_end":96,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269649,"byte_end":269653,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"Text","qualname":"::render::Text","value":"Text {  }","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091}],"decl_id":null,"docs":" A type used for producing a `PositionedGlyph` iterator.","sig":null,"attributes":[{"value":"/ A type used for producing a `PositionedGlyph` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269431,"byte_end":269490,"line_start":161,"line_end":161,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269491,"byte_end":269494,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ We produce this type rather than the `&[PositionedGlyph]`s directly so that we can properly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269495,"byte_end":269590,"line_start":163,"line_end":163,"column_start":1,"column_end":96}},{"value":"/ handle \"HiDPI\" scales when caching glyphs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":269591,"byte_end":269637,"line_start":164,"line_end":164,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1092},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":270957,"byte_end":270976,"line_start":225,"line_end":225,"column_start":12,"column_end":31},"name":"WalkOwnedPrimitives","qualname":"::render::WalkOwnedPrimitives","value":"WalkOwnedPrimitives {  }","parent":null,"children":[{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099}],"decl_id":null,"docs":" An iterator-like type for yielding `Primitive`s from an `OwnedPrimitives`.\n","sig":null,"attributes":[{"value":"/ An iterator-like type for yielding `Primitive`s from an `OwnedPrimitives`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":270867,"byte_end":270945,"line_start":224,"line_end":224,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":272151,"byte_end":272168,"line_start":248,"line_end":248,"column_start":12,"column_end":29},"name":"positioned_glyphs","qualname":"<Text>::positioned_glyphs","value":"fn (self, dpi_factor: f32) -> &'a [text::PositionedGlyph]","parent":null,"children":[],"decl_id":null,"docs":" Produces a list of `PositionedGlyph`s which may be used to cache and render the text.","sig":null,"attributes":[{"value":"/ Produces a list of `PositionedGlyph`s which may be used to cache and render the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271289,"byte_end":271378,"line_start":237,"line_end":237,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271383,"byte_end":271386,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ `dpi_factor`, aka \"dots per inch factor\" is a multiplier representing the density of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271391,"byte_end":271479,"line_start":239,"line_end":239,"column_start":5,"column_end":93}},{"value":"/ the display's pixels. The `Scale` of the font will be multiplied by this factor in order to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271484,"byte_end":271579,"line_start":240,"line_end":240,"column_start":5,"column_end":100}},{"value":"/ ensure that each `PositionedGlyph`'s `pixel_bounding_box` is accurate and that the GPU","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271584,"byte_end":271674,"line_start":241,"line_end":241,"column_start":5,"column_end":95}},{"value":"/ cache receives glyphs of a size that will display correctly on displays regardless of DPI.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271679,"byte_end":271773,"line_start":242,"line_end":242,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271778,"byte_end":271781,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Note that conrod does not require this factor when instantiating `Text` widgets and laying","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271786,"byte_end":271880,"line_start":244,"line_end":244,"column_start":5,"column_end":99}},{"value":"/ out text. This is because conrod positioning uses a \"pixel-agnostic\" `Scalar` value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271885,"byte_end":271972,"line_start":245,"line_end":245,"column_start":5,"column_end":92}},{"value":"/ representing *perceived* distances for its positioning and layout, rather than pixel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271977,"byte_end":272065,"line_start":246,"line_end":246,"column_start":5,"column_end":93}},{"value":"/ values. During rendering however, the pixel density must be known","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":272070,"byte_end":272139,"line_start":247,"line_end":247,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":273679,"byte_end":273682,"line_start":290,"line_end":290,"column_start":12,"column_end":15},"name":"new","qualname":"<Primitives>::new","value":"fn (graph: &'a Graph, depth_order: &'a [widget::Id], theme: &'a Theme, fonts: &'a text::font::Map, window_dim: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor for the `Primitives` iterator.\n","sig":null,"attributes":[{"value":"/ Constructor for the `Primitives` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":273621,"byte_end":273667,"line_start":289,"line_end":289,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":274280,"byte_end":274284,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"next","qualname":"<Primitives>::next","value":"fn (&mut self) -> Option<Primitive>","parent":null,"children":[],"decl_id":null,"docs":" Yield the next `Primitive` for rendering.\n","sig":null,"attributes":[{"value":"/ Yield the next `Primitive` for rendering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":274223,"byte_end":274268,"line_start":308,"line_end":308,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":290427,"byte_end":290432,"line_start":636,"line_end":636,"column_start":12,"column_end":17},"name":"owned","qualname":"<Primitives>::owned","value":"fn (mut self) -> OwnedPrimitives","parent":null,"children":[],"decl_id":null,"docs":" Collect the `Primitives` list into an owned collection.","sig":null,"attributes":[{"value":"/ Collect the `Primitives` list into an owned collection.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":290254,"byte_end":290313,"line_start":633,"line_end":633,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":290318,"byte_end":290321,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ This is useful for sending `Ui` rendering data across threads in an efficient manner.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":290326,"byte_end":290415,"line_start":635,"line_end":635,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":295296,"byte_end":295300,"line_start":759,"line_end":759,"column_start":12,"column_end":16},"name":"walk","qualname":"<OwnedPrimitives>::walk","value":"fn (&self) -> WalkOwnedPrimitives","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator-like type for yielding `Primitive`s.\n","sig":null,"attributes":[{"value":"/ Produce an iterator-like type for yielding `Primitive`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":295224,"byte_end":295284,"line_start":758,"line_end":758,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":296044,"byte_end":296048,"line_start":783,"line_end":783,"column_start":12,"column_end":16},"name":"next","qualname":"<WalkOwnedPrimitives>::next","value":"fn (&mut self) -> Option<Primitive>","parent":null,"children":[],"decl_id":null,"docs":" Yield the next `Primitive` in order or rendering depth, bottom to top.\n","sig":null,"attributes":[{"value":"/ Yield the next `Primitive` in order or rendering depth, bottom to top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":295958,"byte_end":296032,"line_start":782,"line_end":782,"column_start":5,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":1144},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"text","qualname":"::text","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":5747},{"krate":0,"index":5752},{"krate":0,"index":5756},{"krate":0,"index":5773},{"krate":0,"index":5771},{"krate":0,"index":5769},{"krate":0,"index":5766},{"krate":0,"index":5767},{"krate":0,"index":5763},{"krate":0,"index":5764},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1180},{"krate":0,"index":1214},{"krate":0,"index":1281},{"krate":0,"index":1352}],"decl_id":null,"docs":" Text layout logic.\n","sig":null,"attributes":[{"value":"! Text layout logic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301360,"byte_end":301382,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":1156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301634,"byte_end":301636,"line_start":11,"line_end":11,"column_start":9,"column_end":11},"name":"rt","qualname":"::text::rt","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","parent":null,"children":[{"krate":0,"index":1157}],"decl_id":null,"docs":" Re-exported RustType geometrical types.\n","sig":null,"attributes":[{"value":"/ Re-exported RustType geometrical types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301582,"byte_end":301625,"line_start":10,"line_end":10,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":1164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301778,"byte_end":301792,"line_start":17,"line_end":17,"column_start":10,"column_end":24},"name":"FontCollection","qualname":"::text::FontCollection","value":"::rusttype::FontCollection<'static>","parent":null,"children":[],"decl_id":null,"docs":" The RustType `FontCollection` type used by conrod.\n","sig":null,"attributes":[{"value":"/ The RustType `FontCollection` type used by conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301714,"byte_end":301768,"line_start":16,"line_end":16,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":1165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301886,"byte_end":301890,"line_start":19,"line_end":19,"column_start":10,"column_end":14},"name":"Font","qualname":"::text::Font","value":"::rusttype::Font<'static>","parent":null,"children":[],"decl_id":null,"docs":" The RustType `Font` type used by conrod.\n","sig":null,"attributes":[{"value":"/ The RustType `Font` type used by conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301832,"byte_end":301876,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301985,"byte_end":302000,"line_start":21,"line_end":21,"column_start":10,"column_end":25},"name":"PositionedGlyph","qualname":"::text::PositionedGlyph","value":"::rusttype::PositionedGlyph<'static>","parent":null,"children":[],"decl_id":null,"docs":" The RustType `PositionedGlyph` type used by conrod.\n","sig":null,"attributes":[{"value":"/ The RustType `PositionedGlyph` type used by conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":301920,"byte_end":301975,"line_start":20,"line_end":20,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":5747},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302233,"byte_end":302238,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"Lines","qualname":"::text::Lines","value":"Lines {  }","parent":null,"children":[{"krate":0,"index":5750},{"krate":0,"index":5751}],"decl_id":null,"docs":" An iterator yielding each line within the given `text` as a new `&str`, where the start and end\n indices into each line are provided by the given iterator.\n","sig":null,"attributes":[{"value":"/ An iterator yielding each line within the given `text` as a new `&str`, where the start and end","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302042,"byte_end":302141,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ indices into each line are provided by the given iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302142,"byte_end":302204,"line_start":24,"line_end":24,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302486,"byte_end":302490,"line_start":35,"line_end":35,"column_start":5,"column_end":9},"name":"Left","qualname":"::text::Justify::Left","value":"Justify::Left","parent":{"krate":0,"index":5756},"children":[],"decl_id":null,"docs":" Align text to the start of the bounding `Rect`'s *x* axis.\n","sig":null,"attributes":[{"value":"/ Align text to the start of the bounding `Rect`'s *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302419,"byte_end":302481,"line_start":34,"line_end":34,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302549,"byte_end":302555,"line_start":37,"line_end":37,"column_start":5,"column_end":11},"name":"Center","qualname":"::text::Justify::Center","value":"Justify::Center","parent":{"krate":0,"index":5756},"children":[],"decl_id":null,"docs":" Symmetrically align text along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Symmetrically align text along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302496,"byte_end":302544,"line_start":36,"line_end":36,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5761},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302626,"byte_end":302631,"line_start":39,"line_end":39,"column_start":5,"column_end":10},"name":"Right","qualname":"::text::Justify::Right","value":"Justify::Right","parent":{"krate":0,"index":5756},"children":[],"decl_id":null,"docs":" Align text to the end of the bounding `Rect`'s *x* axis.\n","sig":null,"attributes":[{"value":"/ Align text to the end of the bounding `Rect`'s *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302561,"byte_end":302621,"line_start":38,"line_end":38,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":5756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302405,"byte_end":302412,"line_start":33,"line_end":33,"column_start":10,"column_end":17},"name":"Justify","qualname":"::text::Justify","value":"Justify::{Left, Center, Right}","parent":null,"children":[{"krate":0,"index":5757},{"krate":0,"index":5759},{"krate":0,"index":5761}],"decl_id":null,"docs":" A type used for referring to typographic alignment of `Text`.\n","sig":null,"attributes":[{"value":"/ A type used for referring to typographic alignment of `Text`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302285,"byte_end":302350,"line_start":31,"line_end":31,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303007,"byte_end":303013,"line_start":49,"line_end":49,"column_start":8,"column_end":14},"name":"height","qualname":"::text::height","value":"fn (num_lines: usize, font_size: FontSize, line_spacing: Scalar) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Determine the total height of a block of text with the given number of lines, font size and\n `line_spacing` (the space that separates each line of text).\n","sig":null,"attributes":[{"value":"/ Determine the total height of a block of text with the given number of lines, font size and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302839,"byte_end":302934,"line_start":47,"line_end":47,"column_start":1,"column_end":96}},{"value":"/ `line_spacing` (the space that separates each line of text).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":302935,"byte_end":302999,"line_start":48,"line_end":48,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303416,"byte_end":303421,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"lines","qualname":"::text::lines","value":"fn <I> (text: &str, ranges: I) -> Lines<I>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator yielding each line within the given `text` as a new `&str`, where the\n start and end indices into each line are provided by the given iterator.\n","sig":null,"attributes":[{"value":"/ Produce an iterator yielding each line within the given `text` as a new `&str`, where the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303238,"byte_end":303331,"line_start":58,"line_end":58,"column_start":1,"column_end":94}},{"value":"/ start and end indices into each line are provided by the given iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303332,"byte_end":303408,"line_start":59,"line_end":59,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":1170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303721,"byte_end":303733,"line_start":72,"line_end":72,"column_start":8,"column_end":20},"name":"f32_pt_to_px","qualname":"::text::f32_pt_to_px","value":"fn (font_size_in_points: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts the given font size in \"points\" to its font size in pixels.\n This is useful for when the font size is not an integer.\n","sig":null,"attributes":[{"value":"/ Converts the given font size in \"points\" to its font size in pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303580,"byte_end":303652,"line_start":70,"line_end":70,"column_start":1,"column_end":73}},{"value":"/ This is useful for when the font size is not an integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303653,"byte_end":303713,"line_start":71,"line_end":71,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303953,"byte_end":303968,"line_start":78,"line_end":78,"column_start":8,"column_end":23},"name":"f32_pt_to_scale","qualname":"::text::f32_pt_to_scale","value":"fn (font_size_in_points: f32) -> Scale","parent":null,"children":[],"decl_id":null,"docs":" Converts the given font size in \"points\" to a uniform `rusttype::Scale`.\n This is useful for when the font size is not an integer.\n","sig":null,"attributes":[{"value":"/ Converts the given font size in \"points\" to a uniform `rusttype::Scale`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303808,"byte_end":303884,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ This is useful for when the font size is not an integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":303885,"byte_end":303945,"line_start":77,"line_end":77,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304143,"byte_end":304151,"line_start":83,"line_end":83,"column_start":8,"column_end":16},"name":"pt_to_px","qualname":"::text::pt_to_px","value":"fn (font_size_in_points: FontSize) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Converts the given font size in \"points\" to its font size in pixels.\n","sig":null,"attributes":[{"value":"/ Converts the given font size in \"points\" to its font size in pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304063,"byte_end":304135,"line_start":82,"line_end":82,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":1173},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304324,"byte_end":304335,"line_start":88,"line_end":88,"column_start":8,"column_end":19},"name":"pt_to_scale","qualname":"::text::pt_to_scale","value":"fn (font_size_in_points: FontSize) -> Scale","parent":null,"children":[],"decl_id":null,"docs":" Converts the given font size in \"points\" to a uniform `rusttype::Scale`.\n","sig":null,"attributes":[{"value":"/ Converts the given font size in \"points\" to a uniform `rusttype::Scale`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304240,"byte_end":304316,"line_start":87,"line_end":87,"column_start":1,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":1180},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304756,"byte_end":304760,"line_start":105,"line_end":105,"column_start":9,"column_end":13},"name":"font","qualname":"::text::font","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":5774},{"krate":0,"index":5799},{"krate":0,"index":5797},{"krate":0,"index":5795},{"krate":0,"index":5792},{"krate":0,"index":5788},{"krate":0,"index":5789},{"krate":0,"index":5785},{"krate":0,"index":5786},{"krate":0,"index":5779},{"krate":0,"index":5777},{"krate":0,"index":5800},{"krate":0,"index":5803},{"krate":0,"index":1183},{"krate":0,"index":5805},{"krate":0,"index":5808},{"krate":0,"index":5811},{"krate":0,"index":5817},{"krate":0,"index":1185},{"krate":0,"index":1187},{"krate":0,"index":1194},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1203},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212}],"decl_id":null,"docs":" The `font::Id` and `font::Map` types.\n","sig":null,"attributes":[{"value":"/ The `font::Id` and `font::Map` types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304706,"byte_end":304747,"line_start":104,"line_end":104,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5774},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305095,"byte_end":305097,"line_start":116,"line_end":116,"column_start":16,"column_end":18},"name":"Id","qualname":"::text::font::Id","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type-safe wrapper around the `FontId`.","sig":null,"attributes":[{"value":"/ A type-safe wrapper around the `FontId`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304794,"byte_end":304838,"line_start":109,"line_end":109,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304843,"byte_end":304846,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This is used as both:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304851,"byte_end":304876,"line_start":111,"line_end":111,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304881,"byte_end":304884,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ - The key for the `font::Map`'s inner `HashMap`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304889,"byte_end":304941,"line_start":113,"line_end":113,"column_start":5,"column_end":57}},{"value":"/ - The `font_id` field for the rusttype::gpu_cache::Cache.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304946,"byte_end":305007,"line_start":114,"line_end":114,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5800},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305215,"byte_end":305218,"line_start":120,"line_end":120,"column_start":16,"column_end":19},"name":"Map","qualname":"::text::font::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":5801},{"krate":0,"index":5802}],"decl_id":null,"docs":" A collection of mappings from `font::Id`s to `rusttype::Font`s.\n","sig":null,"attributes":[{"value":"/ A collection of mappings from `font::Id`s to `rusttype::Font`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305111,"byte_end":305178,"line_start":118,"line_end":118,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1183},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305452,"byte_end":305458,"line_start":127,"line_end":127,"column_start":16,"column_end":22},"name":"NewIds","qualname":"::text::font::NewIds","value":"NewIds {  }","parent":null,"children":[{"krate":0,"index":1184}],"decl_id":null,"docs":" An iterator yielding an `Id` for each new `rusttype::Font` inserted into the `Map` via the\n `insert_collection` method.\n","sig":null,"attributes":[{"value":"/ An iterator yielding an `Id` for each new `rusttype::Font` inserted into the `Map` via the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305306,"byte_end":305400,"line_start":125,"line_end":125,"column_start":5,"column_end":99}},{"value":"/ `insert_collection` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305405,"byte_end":305436,"line_start":126,"line_end":126,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5805},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305607,"byte_end":305610,"line_start":133,"line_end":133,"column_start":16,"column_end":19},"name":"Ids","qualname":"::text::font::Ids","value":"Ids {  }","parent":null,"children":[{"krate":0,"index":5807}],"decl_id":null,"docs":" Yields the `Id` for each `Font` within the `Map`.\n","sig":null,"attributes":[{"value":"/ Yields the `Id` for each `Font` within the `Map`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305517,"byte_end":305570,"line_start":131,"line_end":131,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5812},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305881,"byte_end":305883,"line_start":141,"line_end":141,"column_start":9,"column_end":11},"name":"IO","qualname":"::text::font::Error::IO","value":"Error::IO(std::io::Error)","parent":{"krate":0,"index":5811},"children":[],"decl_id":null,"docs":" Some error occurred while loading a `FontCollection` from a file.\n","sig":null,"attributes":[{"value":"/ Some error occurred while loading a `FontCollection` from a file.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305803,"byte_end":305872,"line_start":140,"line_end":140,"column_start":9,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5815},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305976,"byte_end":305982,"line_start":143,"line_end":143,"column_start":9,"column_end":15},"name":"NoFont","qualname":"::text::font::Error::NoFont","value":"Error::NoFont","parent":{"krate":0,"index":5811},"children":[],"decl_id":null,"docs":" No `Font`s could be yielded from the `FontCollection`.\n","sig":null,"attributes":[{"value":"/ No `Font`s could be yielded from the `FontCollection`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305909,"byte_end":305967,"line_start":142,"line_end":142,"column_start":9,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":5811},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305787,"byte_end":305792,"line_start":139,"line_end":139,"column_start":14,"column_end":19},"name":"Error","qualname":"::text::font::Error","value":"Error::{IO, NoFont}","parent":null,"children":[{"krate":0,"index":5812},{"krate":0,"index":5815}],"decl_id":null,"docs":" Returned when loading new fonts from file or bytes.\n","sig":null,"attributes":[{"value":"/ Returned when loading new fonts from file or bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":305697,"byte_end":305752,"line_start":137,"line_end":137,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306074,"byte_end":306079,"line_start":149,"line_end":149,"column_start":16,"column_end":21},"name":"index","qualname":"<Id>::index","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner `usize` from the `Id`.\n","sig":null,"attributes":[{"value":"/ Returns the inner `usize` from the `Id`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306014,"byte_end":306058,"line_start":148,"line_end":148,"column_start":9,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306209,"byte_end":306212,"line_start":158,"line_end":158,"column_start":16,"column_end":19},"name":"new","qualname":"<Map>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the new, empty `Map`.\n","sig":null,"attributes":[{"value":"/ Construct the new, empty `Map`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306158,"byte_end":306193,"line_start":157,"line_end":157,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306441,"byte_end":306444,"line_start":166,"line_end":166,"column_start":16,"column_end":19},"name":"get","qualname":"<Map>::get","value":"fn (&self, id: Id) -> Option<&super::Font>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the `rusttype::Font` associated with the given `font::Id`.\n","sig":null,"attributes":[{"value":"/ Borrow the `rusttype::Font` associated with the given `font::Id`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306356,"byte_end":306425,"line_start":165,"line_end":165,"column_start":9,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306633,"byte_end":306639,"line_start":171,"line_end":171,"column_start":16,"column_end":22},"name":"insert","qualname":"<Map>::insert","value":"fn (&mut self, font: super::Font) -> Id","parent":null,"children":[],"decl_id":null,"docs":" Adds the given `rusttype::Font` to the `Map` and returns a unique `Id` for it.\n","sig":null,"attributes":[{"value":"/ Adds the given `rusttype::Font` to the `Map` and returns a unique `Id` for it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306535,"byte_end":306617,"line_start":170,"line_end":170,"column_start":9,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306972,"byte_end":306988,"line_start":180,"line_end":180,"column_start":16,"column_end":32},"name":"insert_from_file","qualname":"<Map>::insert_from_file","value":"fn <P> (&mut self, path: P) -> Result<Id, Error>","parent":null,"children":[],"decl_id":null,"docs":" Insert a single `Font` into the map by loading it from the given file path.\n","sig":null,"attributes":[{"value":"/ Insert a single `Font` into the map by loading it from the given file path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306877,"byte_end":306956,"line_start":179,"line_end":179,"column_start":9,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":308013,"byte_end":308016,"line_start":205,"line_end":205,"column_start":16,"column_end":19},"name":"ids","qualname":"<Map>::ids","value":"fn (&self) -> Ids","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator yielding the `Id` for each `Font` within the `Map`.\n","sig":null,"attributes":[{"value":"/ Produces an iterator yielding the `Id` for each `Font` within the `Map`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":307921,"byte_end":307997,"line_start":204,"line_end":204,"column_start":9,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":1194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":308173,"byte_end":308193,"line_start":213,"line_end":213,"column_start":12,"column_end":32},"name":"collection_from_file","qualname":"::text::font::collection_from_file","value":"fn <P> (path: P) -> Result<super::FontCollection, std::io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Load a `super::FontCollection` from a file at a given path.\n","sig":null,"attributes":[{"value":"/ Load a `super::FontCollection` from a file at a given path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":308098,"byte_end":308161,"line_start":212,"line_end":212,"column_start":5,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":1197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":308639,"byte_end":308648,"line_start":225,"line_end":225,"column_start":12,"column_end":21},"name":"from_file","qualname":"::text::font::from_file","value":"fn <P> (path: P) -> Result<super::Font, Error>","parent":null,"children":[],"decl_id":null,"docs":" Load a single `Font` from a file at the given path.\n","sig":null,"attributes":[{"value":"/ Load a single `Font` from a file at the given path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":308572,"byte_end":308627,"line_start":224,"line_end":224,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":1214},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310001,"byte_end":310006,"line_start":276,"line_end":276,"column_start":9,"column_end":14},"name":"glyph","qualname":"::text::glyph","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","parent":null,"children":[{"krate":0,"index":1215},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1229},{"krate":0,"index":1235},{"krate":0,"index":1241},{"krate":0,"index":1246},{"krate":0,"index":1249},{"krate":0,"index":1252},{"krate":0,"index":1255},{"krate":0,"index":1261},{"krate":0,"index":1267},{"krate":0,"index":1275}],"decl_id":null,"docs":" Logic and types specific to individual glyph layout.\n","sig":null,"attributes":[{"value":"/ Logic and types specific to individual glyph layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309936,"byte_end":309992,"line_start":275,"line_end":275,"column_start":1,"column_end":57}}]},{"kind":"Type","id":{"krate":0,"index":1221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310140,"byte_end":310141,"line_start":281,"line_end":281,"column_start":14,"column_end":15},"name":"X","qualname":"::text::glyph::X","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" Some position along the X axis (used within `CharXs`).\n","sig":null,"attributes":[{"value":"/ Some position along the X axis (used within `CharXs`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310068,"byte_end":310126,"line_start":280,"line_end":280,"column_start":5,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":1222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310238,"byte_end":310243,"line_start":284,"line_end":284,"column_start":14,"column_end":19},"name":"HalfW","qualname":"::text::glyph::HalfW","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" The half of the width of some character (used within `CharXs`).\n","sig":null,"attributes":[{"value":"/ The half of the width of some character (used within `CharXs`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310157,"byte_end":310224,"line_start":283,"line_end":283,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310357,"byte_end":310362,"line_start":287,"line_end":287,"column_start":16,"column_end":21},"name":"Rects","qualname":"::text::glyph::Rects","value":"Rects {  }","parent":null,"children":[{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228}],"decl_id":null,"docs":" An iterator yielding the `Rect` for each `char`'s `Glyph` in the given `text`.\n","sig":null,"attributes":[{"value":"/ An iterator yielding the `Rect` for each `char`'s `Glyph` in the given `text`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310259,"byte_end":310341,"line_start":286,"line_end":286,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310977,"byte_end":310989,"line_start":300,"line_end":300,"column_start":16,"column_end":28},"name":"RectsPerLine","qualname":"::text::glyph::RectsPerLine","value":"RectsPerLine {  }","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234}],"decl_id":null,"docs":" An iterator that, for every `(line, line_rect)` pair yielded by the given iterator,\n produces an iterator that yields a `Rect` for every character in that line.\n","sig":null,"attributes":[{"value":"/ An iterator that, for every `(line, line_rect)` pair yielded by the given iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310790,"byte_end":310877,"line_start":298,"line_end":298,"column_start":5,"column_end":92}},{"value":"/ produces an iterator that yields a `Rect` for every character in that line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":310882,"byte_end":310961,"line_start":299,"line_end":299,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311463,"byte_end":311483,"line_start":313,"line_end":313,"column_start":16,"column_end":36},"name":"SelectedRectsPerLine","qualname":"::text::glyph::SelectedRectsPerLine","value":"SelectedRectsPerLine {  }","parent":null,"children":[{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240}],"decl_id":null,"docs":" Yields an iteraor yielding `Rect`s for each selected character in each line of text within\n the given iterator yielding char `Rect`s.","sig":null,"attributes":[{"value":"/ Yields an iteraor yielding `Rect`s for each selected character in each line of text within","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311099,"byte_end":311193,"line_start":306,"line_end":306,"column_start":5,"column_end":99}},{"value":"/ the given iterator yielding char `Rect`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311198,"byte_end":311243,"line_start":307,"line_end":307,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311248,"byte_end":311251,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Given some `start` and `end` indices, only `Rect`s for `char`s between these two indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311256,"byte_end":311348,"line_start":309,"line_end":309,"column_start":5,"column_end":97}},{"value":"/ will be produced.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311353,"byte_end":311374,"line_start":310,"line_end":310,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311379,"byte_end":311382,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ All lines that have no selected `Rect`s will be skipped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311387,"byte_end":311447,"line_start":312,"line_end":312,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311860,"byte_end":311873,"line_start":322,"line_end":322,"column_start":16,"column_end":29},"name":"SelectedRects","qualname":"::text::glyph::SelectedRects","value":"SelectedRects {  }","parent":null,"children":[{"krate":0,"index":1244},{"krate":0,"index":1245}],"decl_id":null,"docs":" Yields a `Rect` for each selected character in a single line of text.","sig":null,"attributes":[{"value":"/ Yields a `Rect` for each selected character in a single line of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311676,"byte_end":311749,"line_start":319,"line_end":319,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311754,"byte_end":311757,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ This iterator can only be produced by the `SelectedCharRectsPerLine` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311762,"byte_end":311844,"line_start":321,"line_end":321,"column_start":5,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":1246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":312273,"byte_end":312291,"line_start":332,"line_end":332,"column_start":12,"column_end":30},"name":"index_after_cursor","qualname":"::text::glyph::index_after_cursor","value":"fn <I> (mut line_infos: I, cursor_idx: super::cursor::Index) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the index of the character that directly follows the cursor at the given `cursor_idx`.","sig":null,"attributes":[{"value":"/ Find the index of the character that directly follows the cursor at the given `cursor_idx`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":311988,"byte_end":312083,"line_start":328,"line_end":328,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":312088,"byte_end":312091,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if either the given `cursor::Index` `line` or `idx` fields are out of bounds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":312096,"byte_end":312191,"line_start":330,"line_end":330,"column_start":5,"column_end":100}},{"value":"/ of the line information yielded by the `line_infos` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":312196,"byte_end":312261,"line_start":331,"line_end":331,"column_start":5,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313137,"byte_end":313151,"line_start":351,"line_end":351,"column_start":12,"column_end":26},"name":"rects_per_line","qualname":"::text::glyph::rects_per_line","value":"fn <'a, I> (lines_with_rects: I, font: &'a super::Font, font_size: FontSize) -> RectsPerLine<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator that, for every `(line, line_rect)` pair yielded by the given iterator,\n produces an iterator that yields a `Rect` for every character in that line.","sig":null,"attributes":[{"value":"/ Produce an iterator that, for every `(line, line_rect)` pair yielded by the given iterator,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":312818,"byte_end":312913,"line_start":346,"line_end":346,"column_start":5,"column_end":100}},{"value":"/ produces an iterator that yields a `Rect` for every character in that line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":312918,"byte_end":312997,"line_start":347,"line_end":347,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313002,"byte_end":313005,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ This is useful when information about character positioning is needed when reasoning about","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313010,"byte_end":313104,"line_start":349,"line_end":349,"column_start":5,"column_end":99}},{"value":"/ text layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313109,"byte_end":313125,"line_start":350,"line_end":350,"column_start":5,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313903,"byte_end":313926,"line_start":370,"line_end":370,"column_start":12,"column_end":35},"name":"selected_rects_per_line","qualname":"::text::glyph::selected_rects_per_line","value":"fn <'a, I> (lines_with_rects: I, font: &'a super::Font, font_size: FontSize, start: super::cursor::Index, end: super::cursor::Index) -> SelectedRectsPerLine<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator that yields iterators yielding `Rect`s for each selected character in\n each line of text within the given iterator yielding char `Rect`s.","sig":null,"attributes":[{"value":"/ Produces an iterator that yields iterators yielding `Rect`s for each selected character in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313518,"byte_end":313612,"line_start":363,"line_end":363,"column_start":5,"column_end":99}},{"value":"/ each line of text within the given iterator yielding char `Rect`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313617,"byte_end":313687,"line_start":364,"line_end":364,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313692,"byte_end":313695,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Given some `start` and `end` indices, only `Rect`s for `char`s between these two indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313700,"byte_end":313792,"line_start":366,"line_end":366,"column_start":5,"column_end":97}},{"value":"/ will be produced.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313797,"byte_end":313818,"line_start":367,"line_end":367,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313823,"byte_end":313826,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ All lines that have no selected `Rect`s will be skipped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":313831,"byte_end":313891,"line_start":369,"line_end":369,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":1281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":317991,"byte_end":317997,"line_start":477,"line_end":477,"column_start":9,"column_end":15},"name":"cursor","qualname":"::text::cursor","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1289},{"krate":0,"index":5819},{"krate":0,"index":5826},{"krate":0,"index":5830},{"krate":0,"index":5833},{"krate":0,"index":1290},{"krate":0,"index":5836},{"krate":0,"index":5862},{"krate":0,"index":5860},{"krate":0,"index":5858},{"krate":0,"index":5854},{"krate":0,"index":5855},{"krate":0,"index":5851},{"krate":0,"index":5852},{"krate":0,"index":5841},{"krate":0,"index":5839},{"krate":0,"index":1295},{"krate":0,"index":1313},{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1323},{"krate":0,"index":1327},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1339},{"krate":0,"index":1343}],"decl_id":null,"docs":" Logic related to the positioning of the cursor within text.\n","sig":null,"attributes":[{"value":"/ Logic related to the positioning of the cursor within text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":317919,"byte_end":317982,"line_start":476,"line_end":476,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318400,"byte_end":318410,"line_start":487,"line_end":487,"column_start":16,"column_end":26},"name":"XysPerLine","qualname":"::text::cursor::XysPerLine","value":"XysPerLine {  }","parent":null,"children":[{"krate":0,"index":5822},{"krate":0,"index":5823},{"krate":0,"index":5824},{"krate":0,"index":5825}],"decl_id":null,"docs":" Every possible cursor position within each line of text yielded by the given iterator.","sig":null,"attributes":[{"value":"/ Every possible cursor position within each line of text yielded by the given iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318091,"byte_end":318181,"line_start":482,"line_end":482,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318186,"byte_end":318189,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Yields `(xs, y_range)`, where `y_range` is the `Range` occupied by the line across the *y*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318194,"byte_end":318288,"line_start":484,"line_end":484,"column_start":5,"column_end":99}},{"value":"/ axis and `xs` is every possible cursor position along the *x* axis","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318293,"byte_end":318363,"line_start":485,"line_end":485,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":5830},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319128,"byte_end":319146,"line_start":504,"line_end":504,"column_start":16,"column_end":34},"name":"XysPerLineFromText","qualname":"::text::cursor::XysPerLineFromText","value":"XysPerLineFromText {  }","parent":null,"children":[{"krate":0,"index":5832}],"decl_id":null,"docs":" Similarly to `XysPerLine`, yields every possible cursor position within each line of text\n yielded by the given iterator.","sig":null,"attributes":[{"value":"/ Similarly to `XysPerLine`, yields every possible cursor position within each line of text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318543,"byte_end":318636,"line_start":494,"line_end":494,"column_start":5,"column_end":98}},{"value":"/ yielded by the given iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318641,"byte_end":318675,"line_start":495,"line_end":495,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318680,"byte_end":318683,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Rather than taking an iterator type yielding lines and positioning data, this method","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318688,"byte_end":318776,"line_start":497,"line_end":497,"column_start":5,"column_end":93}},{"value":"/ constructs its own iterator to do so internally, saving some boilerplate involved in common","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318781,"byte_end":318876,"line_start":498,"line_end":498,"column_start":5,"column_end":100}},{"value":"/ `XysPerLine` use cases.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318881,"byte_end":318908,"line_start":499,"line_end":499,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318913,"byte_end":318916,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Yields `(xs, y_range)`, where `y_range` is the `Range` occupied by the line across the *y*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":318921,"byte_end":319015,"line_start":501,"line_end":501,"column_start":5,"column_end":99}},{"value":"/ axis and `xs` is every possible cursor position along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319020,"byte_end":319091,"line_start":502,"line_end":502,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1290},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319556,"byte_end":319558,"line_start":514,"line_end":514,"column_start":16,"column_end":18},"name":"Xs","qualname":"::text::cursor::Xs","value":"Xs {  }","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1294}],"decl_id":null,"docs":" Each possible cursor position along the *x* axis within a line of text.","sig":null,"attributes":[{"value":"/ Each possible cursor position along the *x* axis within a line of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319391,"byte_end":319466,"line_start":511,"line_end":511,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319471,"byte_end":319474,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ `Xs` iterators are produced by the `XysPerLine` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319479,"byte_end":319540,"line_start":513,"line_end":513,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5836},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319805,"byte_end":319810,"line_start":521,"line_end":521,"column_start":16,"column_end":21},"name":"Index","qualname":"::text::cursor::Index","value":"Index { line, char }","parent":null,"children":[{"krate":0,"index":5837},{"krate":0,"index":5838}],"decl_id":null,"docs":" An index representing the position of a cursor within some text.\n","sig":null,"attributes":[{"value":"/ An index representing the position of a cursor within some text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319655,"byte_end":319723,"line_start":519,"line_end":519,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":5837},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319894,"byte_end":319898,"line_start":523,"line_end":523,"column_start":13,"column_end":17},"name":"line","qualname":"::text::cursor::Index::line","value":"usize","parent":{"krate":0,"index":5836},"children":[],"decl_id":null,"docs":" The index of the line upon which the cursor is situated.\n","sig":null,"attributes":[{"value":"/ The index of the line upon which the cursor is situated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319821,"byte_end":319881,"line_start":522,"line_end":522,"column_start":9,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":5838},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320149,"byte_end":320153,"line_start":528,"line_end":528,"column_start":13,"column_end":17},"name":"char","qualname":"::text::cursor::Index::char","value":"usize","parent":{"krate":0,"index":5836},"children":[],"decl_id":null,"docs":" The index within all possible cursor positions for the line.","sig":null,"attributes":[{"value":"/ The index within all possible cursor positions for the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319915,"byte_end":319979,"line_start":524,"line_end":524,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":319988,"byte_end":319991,"line_start":525,"line_end":525,"column_start":9,"column_end":12}},{"value":"/ For example, for the line `foo`, a `char` of `1` would indicate the cursor's position","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320000,"byte_end":320089,"line_start":526,"line_end":526,"column_start":9,"column_end":98}},{"value":"/ as `f|oo` where `|` is the cursor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320098,"byte_end":320136,"line_start":527,"line_end":527,"column_start":9,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320770,"byte_end":320789,"line_start":543,"line_end":543,"column_start":16,"column_end":35},"name":"previous_word_start","qualname":"<Index>::previous_word_start","value":"fn <I> (self, text: &str, mut line_infos: I) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The cursor index of the beginning of the word (block of non-whitespace) before `self`.","sig":null,"attributes":[{"value":"/ The cursor index of the beginning of the word (block of non-whitespace) before `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320196,"byte_end":320286,"line_start":534,"line_end":534,"column_start":9,"column_end":99}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320295,"byte_end":320298,"line_start":535,"line_end":535,"column_start":9,"column_end":12}},{"value":"/ If `self` is at the beginning of the line, call previous, which returns the last","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320307,"byte_end":320391,"line_start":536,"line_end":536,"column_start":9,"column_end":93}},{"value":"/ index position of the previous line, or None if it's the first line","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320400,"byte_end":320471,"line_start":537,"line_end":537,"column_start":9,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320480,"byte_end":320483,"line_start":538,"line_end":538,"column_start":9,"column_end":12}},{"value":"/ If `self` points to whitespace, skip past that whitespace, then return the index of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320492,"byte_end":320579,"line_start":539,"line_end":539,"column_start":9,"column_end":96}},{"value":"/ the start of the word that precedes the whitespace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320588,"byte_end":320642,"line_start":540,"line_end":540,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320651,"byte_end":320654,"line_start":541,"line_end":541,"column_start":9,"column_end":12}},{"value":"/ If `self` is in the middle or end of a word, return the index of the start of that word","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320663,"byte_end":320754,"line_start":542,"line_end":542,"column_start":9,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322632,"byte_end":322645,"line_start":582,"line_end":582,"column_start":16,"column_end":29},"name":"next_word_end","qualname":"<Index>::next_word_end","value":"fn <I> (self, text: &str, mut line_infos: I) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The cursor index of the end of the first word (block of non-whitespace) after `self`.","sig":null,"attributes":[{"value":"/ The cursor index of the end of the first word (block of non-whitespace) after `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322034,"byte_end":322123,"line_start":571,"line_end":571,"column_start":9,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322132,"byte_end":322135,"line_start":572,"line_end":572,"column_start":9,"column_end":12}},{"value":"/ If `self` is at the end of the text, this returns `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322144,"byte_end":322205,"line_start":573,"line_end":573,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322214,"byte_end":322217,"line_start":574,"line_end":574,"column_start":9,"column_end":12}},{"value":"/ If `self` is at the end of a line other than the last, this returns the first index of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322226,"byte_end":322316,"line_start":575,"line_end":575,"column_start":9,"column_end":99}},{"value":"/ the next line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322325,"byte_end":322343,"line_start":576,"line_end":576,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322352,"byte_end":322355,"line_start":577,"line_end":577,"column_start":9,"column_end":12}},{"value":"/ If `self` points to whitespace, skip past that whitespace, then return the index of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322364,"byte_end":322451,"line_start":578,"line_end":578,"column_start":9,"column_end":96}},{"value":"/ the end of the word after the whitespace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322460,"byte_end":322504,"line_start":579,"line_end":579,"column_start":9,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322513,"byte_end":322516,"line_start":580,"line_end":580,"column_start":9,"column_end":12}},{"value":"/ If `self` is in the middle or start of a word, return the index of the end of that word","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":322525,"byte_end":322616,"line_start":581,"line_end":581,"column_start":9,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324468,"byte_end":324476,"line_start":620,"line_end":620,"column_start":16,"column_end":24},"name":"previous","qualname":"<Index>::previous","value":"fn <I> (self, mut line_infos: I) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The cursor index that comes before `self`.","sig":null,"attributes":[{"value":"/ The cursor index that comes before `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324008,"byte_end":324054,"line_start":611,"line_end":611,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324063,"byte_end":324066,"line_start":612,"line_end":612,"column_start":9,"column_end":12}},{"value":"/ If `self` is at the beginning of the text, this returns `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324075,"byte_end":324142,"line_start":613,"line_end":613,"column_start":9,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324151,"byte_end":324154,"line_start":614,"line_end":614,"column_start":9,"column_end":12}},{"value":"/ If `self` is at the beginning of a line other than the first, this returns the last","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324163,"byte_end":324250,"line_start":615,"line_end":615,"column_start":9,"column_end":96}},{"value":"/ index position of the previous line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324259,"byte_end":324299,"line_start":616,"line_end":616,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324308,"byte_end":324311,"line_start":617,"line_end":617,"column_start":9,"column_end":12}},{"value":"/ If `self` is a position other than the start of a line, it will return the position","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324320,"byte_end":324407,"line_start":618,"line_end":618,"column_start":9,"column_end":96}},{"value":"/ that is immediately to the left.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":324416,"byte_end":324452,"line_start":619,"line_end":619,"column_start":9,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325778,"byte_end":325782,"line_start":653,"line_end":653,"column_start":16,"column_end":20},"name":"next","qualname":"<Index>::next","value":"fn <I> (self, mut line_infos: I) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" The cursor index that follows `self`.","sig":null,"attributes":[{"value":"/ The cursor index that follows `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325349,"byte_end":325390,"line_start":644,"line_end":644,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325399,"byte_end":325402,"line_start":645,"line_end":645,"column_start":9,"column_end":12}},{"value":"/ If `self` is at the end of the text, this returns `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325411,"byte_end":325472,"line_start":646,"line_end":646,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325481,"byte_end":325484,"line_start":647,"line_end":647,"column_start":9,"column_end":12}},{"value":"/ If `self` is at the end of a line other than the last, this returns the first index of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325493,"byte_end":325583,"line_start":648,"line_end":648,"column_start":9,"column_end":99}},{"value":"/ the next line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325592,"byte_end":325610,"line_start":649,"line_end":649,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325619,"byte_end":325622,"line_start":650,"line_end":650,"column_start":9,"column_end":12}},{"value":"/ If `self` is a position other than the end of a line, it will return the position that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325631,"byte_end":325721,"line_start":651,"line_end":651,"column_start":9,"column_end":99}},{"value":"/ is immediately to the right.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":325730,"byte_end":325762,"line_start":652,"line_end":652,"column_start":9,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":326575,"byte_end":326589,"line_start":673,"line_end":673,"column_start":16,"column_end":30},"name":"clamp_to_lines","qualname":"<Index>::clamp_to_lines","value":"fn <I> (self, line_infos: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Clamps `self` to the given lines.","sig":null,"attributes":[{"value":"/ Clamps `self` to the given lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":326305,"byte_end":326342,"line_start":667,"line_end":667,"column_start":9,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":326351,"byte_end":326354,"line_start":668,"line_end":668,"column_start":9,"column_end":12}},{"value":"/ If `self` would lie after the end of the last line, return the index at the end of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":326363,"byte_end":326453,"line_start":669,"line_end":669,"column_start":9,"column_end":99}},{"value":"/ last line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":326462,"byte_end":326476,"line_start":670,"line_end":670,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":326485,"byte_end":326488,"line_start":671,"line_end":671,"column_start":9,"column_end":12}},{"value":"/ If `line_infos` is empty, returns cursor at line=0 char=0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":326497,"byte_end":326559,"line_start":672,"line_end":672,"column_start":9,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":327609,"byte_end":327621,"line_start":701,"line_end":701,"column_start":12,"column_end":24},"name":"xys_per_line","qualname":"::text::cursor::xys_per_line","value":"fn <'a, I> (lines_with_rects: I, font: &'a super::Font, text: &'a str, font_size: FontSize) -> XysPerLine<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Every possible cursor position within each line of text yielded by the given iterator.","sig":null,"attributes":[{"value":"/ Every possible cursor position within each line of text yielded by the given iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":327325,"byte_end":327415,"line_start":697,"line_end":697,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":327420,"byte_end":327423,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ Yields `(xs, y_range)`, where `y_range` is the `Range` occupied by the line across the *y*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":327428,"byte_end":327522,"line_start":699,"line_end":699,"column_start":5,"column_end":99}},{"value":"/ axis and `xs` is every possible cursor position along the *x* axis","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":327527,"byte_end":327597,"line_start":700,"line_end":700,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":1316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328594,"byte_end":328616,"line_start":723,"line_end":723,"column_start":12,"column_end":34},"name":"xys_per_line_from_text","qualname":"::text::cursor::xys_per_line_from_text","value":"fn <'a> (text: &'a str, line_infos: &'a [super::line::Info], font: &'a super::Font, font_size: FontSize, x_align: super::Justify, y_align: Align, line_spacing: Scalar, rect: Rect) -> XysPerLineFromText<'a>","parent":null,"children":[],"decl_id":null,"docs":" Similarly to `xys_per_line`, this produces an iterator yielding every possible cursor\n position within each line of text yielded by the given iterator.","sig":null,"attributes":[{"value":"/ Similarly to `xys_per_line`, this produces an iterator yielding every possible cursor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328001,"byte_end":328090,"line_start":714,"line_end":714,"column_start":5,"column_end":94}},{"value":"/ position within each line of text yielded by the given iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328095,"byte_end":328163,"line_start":715,"line_end":715,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328168,"byte_end":328171,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ Rather than taking an iterator yielding lines and their positioning data, this method","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328176,"byte_end":328265,"line_start":717,"line_end":717,"column_start":5,"column_end":94}},{"value":"/ constructs its own iterator to do so internally, saving some boilerplate involved in common","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328270,"byte_end":328365,"line_start":718,"line_end":718,"column_start":5,"column_end":100}},{"value":"/ `xys_per_line` use cases.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328370,"byte_end":328399,"line_start":719,"line_end":719,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328404,"byte_end":328407,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ Yields `(xs, y_range)`, where `y_range` is the `Range` occupied by the line across the *y*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328412,"byte_end":328506,"line_start":721,"line_end":721,"column_start":5,"column_end":99}},{"value":"/ axis and `xs` is every possible cursor position along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":328511,"byte_end":328582,"line_start":722,"line_end":722,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":329621,"byte_end":329638,"line_start":743,"line_end":743,"column_start":12,"column_end":29},"name":"index_before_char","qualname":"::text::cursor::index_before_char","value":"fn <I> (line_infos: I, char_index: usize) -> Option<Index>","parent":null,"children":[],"decl_id":null,"docs":" Convert the given character index into a cursor `Index`.\n","sig":null,"attributes":[{"value":"/ Convert the given character index into a cursor `Index`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":329549,"byte_end":329609,"line_start":742,"line_end":742,"column_start":5,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1320},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":330186,"byte_end":330191,"line_start":757,"line_end":757,"column_start":12,"column_end":17},"name":"xy_at","qualname":"::text::cursor::xy_at","value":"fn <'a, I> (xys_per_line: I, idx: Index) -> Option<(Scalar, Range)>","parent":null,"children":[],"decl_id":null,"docs":" Determine the *xy* location of the cursor at the given cursor `Index`.\n","sig":null,"attributes":[{"value":"/ Determine the *xy* location of the cursor at the given cursor `Index`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":330100,"byte_end":330174,"line_start":756,"line_end":756,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":1323},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":330802,"byte_end":330814,"line_start":775,"line_end":775,"column_start":12,"column_end":24},"name":"closest_line","qualname":"::text::cursor::closest_line","value":"fn <'a, I> (y_pos: Scalar, xys_per_line: I) -> Option<(usize, Xs<'a, 'a>, Range)>","parent":null,"children":[],"decl_id":null,"docs":" Find the closest line for the given `y` position, and return the line index, Xs iterator, and y-range of that line","sig":null,"attributes":[{"value":"/ Find the closest line for the given `y` position, and return the line index, Xs iterator, and y-range of that line","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":330619,"byte_end":330737,"line_start":772,"line_end":772,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":330742,"byte_end":330745,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there are no lines","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":330750,"byte_end":330790,"line_start":774,"line_end":774,"column_start":5,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":1327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":332074,"byte_end":332101,"line_start":804,"line_end":804,"column_start":12,"column_end":39},"name":"closest_cursor_index_and_xy","qualname":"::text::cursor::closest_cursor_index_and_xy","value":"fn <'a, I> (xy: Point, xys_per_line: I) -> Option<(Index, Point)>","parent":null,"children":[],"decl_id":null,"docs":" Find the closest cursor index to the given `xy` position, and the center `Point` of that\n cursor.","sig":null,"attributes":[{"value":"/ Find the closest cursor index to the given `xy` position, and the center `Point` of that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":331893,"byte_end":331985,"line_start":800,"line_end":800,"column_start":5,"column_end":97}},{"value":"/ cursor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":331990,"byte_end":332001,"line_start":801,"line_end":801,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":332006,"byte_end":332009,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the given `text` is empty.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":332014,"byte_end":332062,"line_start":803,"line_end":803,"column_start":5,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":1331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":332883,"byte_end":332911,"line_start":822,"line_end":822,"column_start":12,"column_end":40},"name":"closest_cursor_index_on_line","qualname":"::text::cursor::closest_cursor_index_on_line","value":"fn <'a> (x_pos: Scalar, line_xs: Xs<'a, 'a>) -> (usize, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" Find the closest cursor index to the given `x` position on the given line along with the\n `x` position of that cursor.\n","sig":null,"attributes":[{"value":"/ Find the closest cursor index to the given `x` position on the given line along with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":332742,"byte_end":332834,"line_start":820,"line_end":820,"column_start":5,"column_end":97}},{"value":"/ `x` position of that cursor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":332839,"byte_end":332871,"line_start":821,"line_end":821,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":1352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335620,"byte_end":335624,"line_start":896,"line_end":896,"column_start":9,"column_end":13},"name":"line","qualname":"::text::line","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1359},{"krate":0,"index":5863},{"krate":0,"index":5883},{"krate":0,"index":5881},{"krate":0,"index":5879},{"krate":0,"index":5875},{"krate":0,"index":5876},{"krate":0,"index":5884},{"krate":0,"index":5897},{"krate":0,"index":5895},{"krate":0,"index":5893},{"krate":0,"index":5889},{"krate":0,"index":5890},{"krate":0,"index":1360},{"krate":0,"index":5898},{"krate":0,"index":5904},{"krate":0,"index":1371},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1379},{"krate":0,"index":1383},{"krate":0,"index":1388},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1406},{"krate":0,"index":1409},{"krate":0,"index":1412},{"krate":0,"index":1415},{"krate":0,"index":1421},{"krate":0,"index":1427}],"decl_id":null,"docs":" Text handling logic related to individual lines of text.","sig":null,"attributes":[{"value":"/ Text handling logic related to individual lines of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335490,"byte_end":335550,"line_start":893,"line_end":893,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335551,"byte_end":335554,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ This module is the core of multi-line text handling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335555,"byte_end":335611,"line_start":895,"line_end":895,"column_start":1,"column_end":57}}]},{"kind":"StructVariant","id":{"krate":0,"index":5864},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335938,"byte_end":335942,"line_start":905,"line_end":905,"column_start":9,"column_end":13},"name":"Wrap","qualname":"::text::line::Break::Wrap","value":"Break::Wrap { byte, char, len_bytes }","parent":{"krate":0,"index":5863},"children":[],"decl_id":null,"docs":" A break caused by the text exceeding some maximum width.\n","sig":null,"attributes":[{"value":"/ A break caused by the text exceeding some maximum width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335869,"byte_end":335929,"line_start":904,"line_end":904,"column_start":9,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":5868},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":336417,"byte_end":336424,"line_start":915,"line_end":915,"column_start":9,"column_end":16},"name":"Newline","qualname":"::text::line::Break::Newline","value":"Break::Newline { byte, char, len_bytes }","parent":{"krate":0,"index":5863},"children":[],"decl_id":null,"docs":" A break caused by a newline character.\n","sig":null,"attributes":[{"value":"/ A break caused by a newline character.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":336366,"byte_end":336408,"line_start":914,"line_end":914,"column_start":9,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":5872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":336854,"byte_end":336857,"line_start":924,"line_end":924,"column_start":9,"column_end":12},"name":"End","qualname":"::text::line::Break::End","value":"Break::End { byte, char }","parent":{"krate":0,"index":5863},"children":[],"decl_id":null,"docs":" The end of the string has been reached, with the given length.\n","sig":null,"attributes":[{"value":"/ The end of the string has been reached, with the given length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":336779,"byte_end":336845,"line_start":923,"line_end":923,"column_start":9,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":5863},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335853,"byte_end":335858,"line_start":903,"line_end":903,"column_start":14,"column_end":19},"name":"Break","qualname":"::text::line::Break","value":"Break::{Wrap, Newline, End}","parent":null,"children":[{"krate":0,"index":5864},{"krate":0,"index":5868},{"krate":0,"index":5872}],"decl_id":null,"docs":" The two types of **Break** indices returned by the **WrapIndicesBy** iterators.\n","sig":null,"attributes":[{"value":"/ The two types of **Break** indices returned by the **WrapIndicesBy** iterators.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":335711,"byte_end":335794,"line_start":901,"line_end":901,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":5884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337432,"byte_end":337436,"line_start":938,"line_end":938,"column_start":16,"column_end":20},"name":"Info","qualname":"::text::line::Info","value":"Info { start_byte, start_char, end_break, width }","parent":null,"children":[{"krate":0,"index":5885},{"krate":0,"index":5886},{"krate":0,"index":5887},{"krate":0,"index":5888}],"decl_id":null,"docs":" Information about a single line of text within a `&str`.","sig":null,"attributes":[{"value":"/ Information about a single line of text within a `&str`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337010,"byte_end":337070,"line_start":932,"line_end":932,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337075,"byte_end":337078,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ `Info` is a minimal amount of information that can be stored for efficient reasoning about","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337083,"byte_end":337177,"line_start":934,"line_end":934,"column_start":5,"column_end":99}},{"value":"/ blocks of text given some `&str`. The `start` and `end_break` can be used for indexing into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337182,"byte_end":337277,"line_start":935,"line_end":935,"column_start":5,"column_end":100}},{"value":"/ the `&str`, and the `width` can be used for calculating line `Rect`s, alignment, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337282,"byte_end":337371,"line_start":936,"line_end":936,"column_start":5,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":5885},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337542,"byte_end":337552,"line_start":940,"line_end":940,"column_start":13,"column_end":23},"name":"start_byte","qualname":"::text::line::Info::start_byte","value":"usize","parent":{"krate":0,"index":5884},"children":[],"decl_id":null,"docs":" The index into the `&str` that represents the first character within the line.\n","sig":null,"attributes":[{"value":"/ The index into the `&str` that represents the first character within the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337447,"byte_end":337529,"line_start":939,"line_end":939,"column_start":9,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":5886},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337641,"byte_end":337651,"line_start":942,"line_end":942,"column_start":13,"column_end":23},"name":"start_char","qualname":"::text::line::Info::start_char","value":"usize","parent":{"krate":0,"index":5884},"children":[],"decl_id":null,"docs":" The character index of the first character in the line.\n","sig":null,"attributes":[{"value":"/ The character index of the first character in the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337569,"byte_end":337628,"line_start":941,"line_end":941,"column_start":9,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":5887},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337951,"byte_end":337960,"line_start":946,"line_end":946,"column_start":13,"column_end":22},"name":"end_break","qualname":"::text::line::Info::end_break","value":"text::line::Break","parent":{"krate":0,"index":5884},"children":[],"decl_id":null,"docs":" The index within the `&str` at which this line breaks into a new line, along with the\n index at which the following line begins. The variant describes whether the break is\n caused by a `Newline` character or a `Wrap` by the given wrap function.\n","sig":null,"attributes":[{"value":"/ The index within the `&str` at which this line breaks into a new line, along with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337668,"byte_end":337757,"line_start":943,"line_end":943,"column_start":9,"column_end":98}},{"value":"/ index at which the following line begins. The variant describes whether the break is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337766,"byte_end":337854,"line_start":944,"line_end":944,"column_start":9,"column_end":97}},{"value":"/ caused by a `Newline` character or a `Wrap` by the given wrap function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337863,"byte_end":337938,"line_start":945,"line_end":945,"column_start":9,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":5888},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338044,"byte_end":338049,"line_start":948,"line_end":948,"column_start":13,"column_end":18},"name":"width","qualname":"::text::line::Info::width","value":"f64","parent":{"krate":0,"index":5884},"children":[],"decl_id":null,"docs":" The total width of all characters within the line.\n","sig":null,"attributes":[{"value":"/ The total width of all characters within the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":337977,"byte_end":338031,"line_start":947,"line_end":947,"column_start":9,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338580,"byte_end":338585,"line_start":959,"line_end":959,"column_start":16,"column_end":21},"name":"Infos","qualname":"::text::line::Infos","value":"Infos {  }","parent":null,"children":[{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370}],"decl_id":null,"docs":" An iterator yielding an `Info` struct for each line in the given `text` wrapped by the\n given `next_break_fn`.","sig":null,"attributes":[{"value":"/ An iterator yielding an `Info` struct for each line in the given `text` wrapped by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338070,"byte_end":338160,"line_start":951,"line_end":951,"column_start":5,"column_end":95}},{"value":"/ given `next_break_fn`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338165,"byte_end":338191,"line_start":952,"line_end":952,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338196,"byte_end":338199,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ `Infos` is a fundamental part of performing lazy reasoning about text within conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338204,"byte_end":338292,"line_start":954,"line_end":954,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338297,"byte_end":338300,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ Construct an `Infos` iterator via the [infos function](./fn.infos.html) and its two builder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338305,"byte_end":338400,"line_start":956,"line_end":956,"column_start":5,"column_end":100}},{"value":"/ methods, [wrap_by_character](./struct.Infos.html#method.wrap_by_character) and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338405,"byte_end":338487,"line_start":957,"line_end":957,"column_start":5,"column_end":87}},{"value":"/ [wrap_by_whitespace](./struct.Infos.html#method.wrap_by_whitespace).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":338492,"byte_end":338564,"line_start":958,"line_end":958,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":5898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339144,"byte_end":339149,"line_start":975,"line_end":975,"column_start":16,"column_end":21},"name":"Rects","qualname":"::text::line::Rects","value":"Rects {  }","parent":null,"children":[{"krate":0,"index":5900},{"krate":0,"index":5901},{"krate":0,"index":5902},{"krate":0,"index":5903}],"decl_id":null,"docs":" An iterator yielding a `Rect` for each line in\n","sig":null,"attributes":[{"value":"/ An iterator yielding a `Rect` for each line in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339057,"byte_end":339107,"line_start":973,"line_end":973,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339535,"byte_end":339548,"line_start":987,"line_end":987,"column_start":16,"column_end":29},"name":"SelectedRects","qualname":"::text::line::SelectedRects","value":"SelectedRects {  }","parent":null,"children":[{"krate":0,"index":1374}],"decl_id":null,"docs":" An iterator yielding a `Rect` for each selected line in a block of text.","sig":null,"attributes":[{"value":"/ An iterator yielding a `Rect` for each selected line in a block of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339275,"byte_end":339351,"line_start":982,"line_end":982,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339356,"byte_end":339359,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ The yielded `Rect`s represent the selected range within each line of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339364,"byte_end":339442,"line_start":984,"line_end":984,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339447,"byte_end":339450,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ Lines that do not contain any selected text will be skipped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339455,"byte_end":339519,"line_start":986,"line_end":986,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1375},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339778,"byte_end":339792,"line_start":993,"line_end":993,"column_start":14,"column_end":28},"name":"NextBreakFnPtr","qualname":"::text::line::NextBreakFnPtr","value":"fn(&str, &super::Font, FontSize, Scalar) -> (Break, Scalar)","parent":null,"children":[],"decl_id":null,"docs":" An alias for function pointers that are compatible with the `Block`'s required text\n wrapping function.\n","sig":null,"attributes":[{"value":"/ An alias for function pointers that are compatible with the `Block`'s required text","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339650,"byte_end":339737,"line_start":991,"line_end":991,"column_start":5,"column_end":92}},{"value":"/ wrapping function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339742,"byte_end":339764,"line_start":992,"line_end":992,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339947,"byte_end":339957,"line_start":999,"line_end":999,"column_start":16,"column_end":26},"name":"byte_index","qualname":"<Break>::byte_index","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index at which the break occurs.\n","sig":null,"attributes":[{"value":"/ Return the index at which the break occurs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339884,"byte_end":339931,"line_start":998,"line_end":998,"column_start":9,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":340346,"byte_end":340356,"line_start":1010,"line_end":1010,"column_start":16,"column_end":26},"name":"char_index","qualname":"<Break>::char_index","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the `char` at which the break occurs.","sig":null,"attributes":[{"value":"/ Return the index of the `char` at which the break occurs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":340171,"byte_end":340232,"line_start":1007,"line_end":1007,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":340241,"byte_end":340244,"line_start":1008,"line_end":1008,"column_start":9,"column_end":12}},{"value":"/ To clarify, this index is to be used in relation to the `Chars` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":340253,"byte_end":340330,"line_start":1009,"line_end":1009,"column_start":9,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341163,"byte_end":341171,"line_start":1040,"line_end":1040,"column_start":16,"column_end":24},"name":"end_byte","qualname":"<Info>::end_byte","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The end of the byte index range for indexing into the slice.\n","sig":null,"attributes":[{"value":"/ The end of the byte index range for indexing into the slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341083,"byte_end":341147,"line_start":1039,"line_end":1039,"column_start":9,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341324,"byte_end":341332,"line_start":1045,"line_end":1045,"column_start":16,"column_end":24},"name":"end_char","qualname":"<Info>::end_char","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The end of the index range for indexing into the slice.\n","sig":null,"attributes":[{"value":"/ The end of the index range for indexing into the slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341249,"byte_end":341308,"line_start":1044,"line_end":1044,"column_start":9,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341499,"byte_end":341509,"line_start":1050,"line_end":1050,"column_start":16,"column_end":26},"name":"byte_range","qualname":"<Info>::byte_range","value":"fn (self) -> std::ops::Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" The index range for indexing (via bytes) into the original str slice.\n","sig":null,"attributes":[{"value":"/ The index range for indexing (via bytes) into the original str slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341410,"byte_end":341483,"line_start":1049,"line_end":1049,"column_start":9,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341708,"byte_end":341718,"line_start":1055,"line_end":1055,"column_start":16,"column_end":26},"name":"char_range","qualname":"<Info>::char_range","value":"fn (self) -> std::ops::Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" The index range for indexing into a `char` iterator over the original str slice.\n","sig":null,"attributes":[{"value":"/ The index range for indexing into a `char` iterator over the original str slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341608,"byte_end":341692,"line_start":1054,"line_end":1054,"column_start":9,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":342036,"byte_end":342053,"line_start":1065,"line_end":1065,"column_start":16,"column_end":33},"name":"wrap_by_character","qualname":"<Infos>::wrap_by_character","value":"fn (mut self, max_width: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts `Self` into an `Infos` whose lines are wrapped at the character that first\n causes the line width to exceed the given `max_width`.\n","sig":null,"attributes":[{"value":"/ Converts `Self` into an `Infos` whose lines are wrapped at the character that first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341866,"byte_end":341953,"line_start":1063,"line_end":1063,"column_start":9,"column_end":96}},{"value":"/ causes the line width to exceed the given `max_width`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341962,"byte_end":342020,"line_start":1064,"line_end":1064,"column_start":9,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":342415,"byte_end":342433,"line_start":1073,"line_end":1073,"column_start":16,"column_end":34},"name":"wrap_by_whitespace","qualname":"<Infos>::wrap_by_whitespace","value":"fn (mut self, max_width: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts `Self` into an `Infos` whose lines are wrapped at the whitespace prior to the\n character that causes the line width to exceed the given `max_width`.\n","sig":null,"attributes":[{"value":"/ Converts `Self` into an `Infos` whose lines are wrapped at the whitespace prior to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":342227,"byte_end":342317,"line_start":1071,"line_end":1071,"column_start":9,"column_end":99}},{"value":"/ character that causes the line width to exceed the given `max_width`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":342326,"byte_end":342399,"line_start":1072,"line_end":1072,"column_start":9,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1401},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":349204,"byte_end":349209,"line_start":1246,"line_end":1246,"column_start":12,"column_end":17},"name":"width","qualname":"::text::line::width","value":"fn (text: &str, font: &super::Font, font_size: FontSize) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Produce the width of the given line of text including spaces (i.e. ' ').\n","sig":null,"attributes":[{"value":"/ Produce the width of the given line of text including spaces (i.e. ' ').","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":349116,"byte_end":349192,"line_start":1245,"line_end":1245,"column_start":5,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":1402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":349807,"byte_end":349823,"line_start":1263,"line_end":1263,"column_start":12,"column_end":28},"name":"infos_wrapped_by","qualname":"::text::line::infos_wrapped_by","value":"fn <'a, F> (text: &'a str, font: &'a super::Font, font_size: FontSize, max_width: Scalar, next_break_fn: F) -> Infos<'a, F>","parent":null,"children":[],"decl_id":null,"docs":" Produce an `Infos` iterator wrapped by the given `next_break_fn`.\n","sig":null,"attributes":[{"value":"/ Produce an `Infos` iterator wrapped by the given `next_break_fn`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":349726,"byte_end":349795,"line_start":1262,"line_end":1262,"column_start":5,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1406},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":350728,"byte_end":350733,"line_start":1286,"line_end":1286,"column_start":12,"column_end":17},"name":"infos","qualname":"::text::line::infos","value":"fn <'a> (text: &'a str, font: &'a super::Font, font_size: FontSize) -> Infos<'a, NextBreakFnPtr>","parent":null,"children":[],"decl_id":null,"docs":" Produce an `Infos` iterator that yields an `Info` for every line in the given text.","sig":null,"attributes":[{"value":"/ Produce an `Infos` iterator that yields an `Info` for every line in the given text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":350462,"byte_end":350549,"line_start":1282,"line_end":1282,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":350554,"byte_end":350557,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ The produced `Infos` iterator will not wrap the text, and only break each line via newline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":350562,"byte_end":350656,"line_start":1284,"line_end":1284,"column_start":5,"column_end":99}},{"value":"/ characters within the text (either `\\n` or `\\r\\n`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":350661,"byte_end":350716,"line_start":1285,"line_end":1285,"column_start":5,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":1409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":351430,"byte_end":351435,"line_start":1305,"line_end":1305,"column_start":12,"column_end":17},"name":"rects","qualname":"::text::line::rects","value":"fn <I> (mut infos: I, font_size: FontSize, bounding_rect: Rect, x_align: super::Justify, y_align: Align, line_spacing: Scalar) -> Rects<I>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator yielding the bounding `Rect` for each line in the text.","sig":null,"attributes":[{"value":"/ Produce an iterator yielding the bounding `Rect` for each line in the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":351192,"byte_end":351271,"line_start":1301,"line_end":1301,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":351276,"byte_end":351279,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ This function assumes that `font_size` is the same `FontSize` used to produce the `Info`s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":351284,"byte_end":351377,"line_start":1303,"line_end":1303,"column_start":5,"column_end":98}},{"value":"/ yielded by the `infos` Iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":351382,"byte_end":351418,"line_start":1304,"line_end":1304,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353405,"byte_end":353419,"line_start":1352,"line_end":1352,"column_start":12,"column_end":26},"name":"selected_rects","qualname":"::text::line::selected_rects","value":"fn <'a, I> (lines_with_rects: I, font: &'a super::Font, font_size: FontSize, start: super::cursor::Index, end: super::cursor::Index) -> SelectedRects<'a, I>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator yielding a `Rect` for the selected range in each selected line in a block\n of text.","sig":null,"attributes":[{"value":"/ Produces an iterator yielding a `Rect` for the selected range in each selected line in a block","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353110,"byte_end":353208,"line_start":1346,"line_end":1346,"column_start":5,"column_end":103}},{"value":"/ of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353213,"byte_end":353225,"line_start":1347,"line_end":1347,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353230,"byte_end":353233,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ The yielded `Rect`s represent the selected range within each line of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353238,"byte_end":353316,"line_start":1349,"line_end":1349,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353321,"byte_end":353324,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ Lines that do not contain any selected text will be skipped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353329,"byte_end":353393,"line_start":1351,"line_end":1351,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":1433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"theme","qualname":"::theme","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1439},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":5907},{"krate":0,"index":5924},{"krate":0,"index":5926},{"krate":0,"index":5929},{"krate":0,"index":5931},{"krate":0,"index":5944},{"krate":0,"index":5940},{"krate":0,"index":5936},{"krate":0,"index":1451},{"krate":0,"index":1453}],"decl_id":null,"docs":"\n Types a functionality for handling Canvas and Widget theming.","sig":null,"attributes":[{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359354,"byte_end":359357,"line_start":1,"line_end":1,"column_start":1,"column_end":4}},{"value":"! Types a functionality for handling Canvas and Widget theming.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359358,"byte_end":359423,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359424,"byte_end":359427,"line_start":3,"line_end":3,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":1450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359736,"byte_end":359744,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"StyleMap","qualname":"::theme::StyleMap","value":"fnv::FnvHashMap<std::any::TypeId, WidgetDefault>","parent":null,"children":[],"decl_id":null,"docs":" `std::collections::HashMap` with `fnv::FnvHasher` for unique styling\n of each widget, index-able by the **Widget::kind**.\n","sig":null,"attributes":[{"value":"/ `std::collections::HashMap` with `fnv::FnvHasher` for unique styling","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359598,"byte_end":359670,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/ of each widget, index-able by the **Widget::kind**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359671,"byte_end":359726,"line_start":15,"line_end":15,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":5907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359896,"byte_end":359901,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Theme","qualname":"::theme::Theme","value":"Theme { name, padding, x_position, y_position, background_color, shape_color, border_color, border_width, label_color, font_id, font_size_large, font_size_medium, font_size_small, widget_styling, mouse_drag_threshold, double_click_threshold }","parent":null,"children":[{"krate":0,"index":5908},{"krate":0,"index":5909},{"krate":0,"index":5910},{"krate":0,"index":5911},{"krate":0,"index":5912},{"krate":0,"index":5913},{"krate":0,"index":5914},{"krate":0,"index":5915},{"krate":0,"index":5916},{"krate":0,"index":5917},{"krate":0,"index":5918},{"krate":0,"index":5919},{"krate":0,"index":5920},{"krate":0,"index":5921},{"krate":0,"index":5922},{"krate":0,"index":5923}],"decl_id":null,"docs":" A serializable collection of canvas and widget styling defaults.\n","sig":null,"attributes":[{"value":"/ A serializable collection of canvas and widget styling defaults.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359799,"byte_end":359867,"line_start":19,"line_end":19,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":5908},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359966,"byte_end":359970,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"name":"name","qualname":"::theme::Theme::name","value":"std::string::String","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A name for the theme used for identification.\n","sig":null,"attributes":[{"value":"/ A name for the theme used for identification.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359908,"byte_end":359957,"line_start":22,"line_end":22,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":5909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360039,"byte_end":360046,"line_start":25,"line_end":25,"column_start":9,"column_end":16},"name":"padding","qualname":"::theme::Theme::padding","value":"position::Padding","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" Padding for Canvas layout and positioning.\n","sig":null,"attributes":[{"value":"/ Padding for Canvas layout and positioning.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":359984,"byte_end":360030,"line_start":24,"line_end":24,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":5910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360119,"byte_end":360129,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"name":"x_position","qualname":"::theme::Theme::x_position","value":"position::Position","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default widget position along the *x* axis.\n","sig":null,"attributes":[{"value":"/ A default widget position along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360061,"byte_end":360110,"line_start":26,"line_end":26,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":5911},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360203,"byte_end":360213,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"name":"y_position","qualname":"::theme::Theme::y_position","value":"position::Position","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default widget position along the *y* axis.\n","sig":null,"attributes":[{"value":"/ A default widget position along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360145,"byte_end":360194,"line_start":28,"line_end":28,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":5912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360277,"byte_end":360293,"line_start":31,"line_end":31,"column_start":9,"column_end":25},"name":"background_color","qualname":"::theme::Theme::background_color","value":"color::Color","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default background for the theme.\n","sig":null,"attributes":[{"value":"/ A default background for the theme.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360229,"byte_end":360268,"line_start":30,"line_end":30,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":5913},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360353,"byte_end":360364,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"name":"shape_color","qualname":"::theme::Theme::shape_color","value":"color::Color","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default color for widget shapes.\n","sig":null,"attributes":[{"value":"/ A default color for widget shapes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360306,"byte_end":360344,"line_start":32,"line_end":32,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":5914},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360425,"byte_end":360437,"line_start":35,"line_end":35,"column_start":9,"column_end":21},"name":"border_color","qualname":"::theme::Theme::border_color","value":"color::Color","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default color for widget borders.\n","sig":null,"attributes":[{"value":"/ A default color for widget borders.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360377,"byte_end":360416,"line_start":34,"line_end":34,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":5915},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360498,"byte_end":360510,"line_start":37,"line_end":37,"column_start":9,"column_end":21},"name":"border_width","qualname":"::theme::Theme::border_width","value":"f64","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default width for widget borders.\n","sig":null,"attributes":[{"value":"/ A default width for widget borders.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360450,"byte_end":360489,"line_start":36,"line_end":36,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":5916},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360571,"byte_end":360582,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"name":"label_color","qualname":"::theme::Theme::label_color","value":"color::Color","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default color for widget labels.\n","sig":null,"attributes":[{"value":"/ A default color for widget labels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360524,"byte_end":360562,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":5917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360685,"byte_end":360692,"line_start":41,"line_end":41,"column_start":9,"column_end":16},"name":"font_id","qualname":"::theme::Theme::font_id","value":"std::option::Option<text::font::Id>","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" The `Id` of the default font used for text widgets when one is not specified.\n","sig":null,"attributes":[{"value":"/ The `Id` of the default font used for text widgets when one is not specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360595,"byte_end":360676,"line_start":40,"line_end":40,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":5918},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360763,"byte_end":360778,"line_start":43,"line_end":43,"column_start":9,"column_end":24},"name":"font_size_large","qualname":"::theme::Theme::font_size_large","value":"u32","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default \"large\" font size.\n","sig":null,"attributes":[{"value":"/ A default \"large\" font size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360722,"byte_end":360754,"line_start":42,"line_end":42,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360831,"byte_end":360847,"line_start":45,"line_end":45,"column_start":9,"column_end":25},"name":"font_size_medium","qualname":"::theme::Theme::font_size_medium","value":"u32","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default \"medium\" font size.\n","sig":null,"attributes":[{"value":"/ A default \"medium\" font size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360789,"byte_end":360822,"line_start":44,"line_end":44,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":5920},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360899,"byte_end":360914,"line_start":47,"line_end":47,"column_start":9,"column_end":24},"name":"font_size_small","qualname":"::theme::Theme::font_size_small","value":"u32","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" A default \"small\" font size.\n","sig":null,"attributes":[{"value":"/ A default \"small\" font size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360858,"byte_end":360890,"line_start":46,"line_end":46,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5921},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361027,"byte_end":361041,"line_start":50,"line_end":50,"column_start":9,"column_end":23},"name":"widget_styling","qualname":"::theme::Theme::widget_styling","value":"std::collections::HashMap<std::any::TypeId, theme::WidgetDefault, std::hash::BuildHasherDefault<fnv::FnvHasher>>","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" `StyleMap` for unique styling\n of each widget, index-able by the **Widget::kind**.\n","sig":null,"attributes":[{"value":"/ `StyleMap` for unique styling","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360925,"byte_end":360958,"line_start":48,"line_end":48,"column_start":5,"column_end":38}},{"value":"/ of each widget, index-able by the **Widget::kind**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":360963,"byte_end":361018,"line_start":49,"line_end":49,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":5922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361224,"byte_end":361244,"line_start":53,"line_end":53,"column_start":9,"column_end":29},"name":"mouse_drag_threshold","qualname":"::theme::Theme::mouse_drag_threshold","value":"f64","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" Mouse Drag distance threshold determines the minimum distance from the mouse-down point\n that the mouse must move before starting a drag operation.\n","sig":null,"attributes":[{"value":"/ Mouse Drag distance threshold determines the minimum distance from the mouse-down point","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361057,"byte_end":361148,"line_start":51,"line_end":51,"column_start":5,"column_end":96}},{"value":"/ that the mouse must move before starting a drag operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361153,"byte_end":361215,"line_start":52,"line_end":52,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":5923},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361417,"byte_end":361439,"line_start":56,"line_end":56,"column_start":9,"column_end":31},"name":"double_click_threshold","qualname":"::theme::Theme::double_click_threshold","value":"core::time::Duration","parent":{"krate":0,"index":5907},"children":[],"decl_id":null,"docs":" Once the `Duration` that separates two consecutive `Click`s is greater than this value, a\n `DoubleClick` event will no longer be generated.\n","sig":null,"attributes":[{"value":"/ Once the `Duration` that separates two consecutive `Click`s is greater than this value, a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361258,"byte_end":361351,"line_start":54,"line_end":54,"column_start":5,"column_end":98}},{"value":"/ `DoubleClick` event will no longer be generated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361356,"byte_end":361408,"line_start":55,"line_end":55,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":5926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361533,"byte_end":361546,"line_start":61,"line_end":61,"column_start":12,"column_end":25},"name":"WidgetDefault","qualname":"::theme::WidgetDefault","value":"WidgetDefault { style, common }","parent":null,"children":[{"krate":0,"index":5927},{"krate":0,"index":5928}],"decl_id":null,"docs":" The defaults for a specific widget.\n","sig":null,"attributes":[{"value":"/ The defaults for a specific widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361465,"byte_end":361504,"line_start":59,"line_end":59,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":5927},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361595,"byte_end":361600,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"style","qualname":"::theme::WidgetDefault::style","value":"std::boxed::Box<(dyn std::any::Any + std::marker::Send + 'static)>","parent":{"krate":0,"index":5926},"children":[],"decl_id":null,"docs":" The unique style of a widget.\n","sig":null,"attributes":[{"value":"/ The unique style of a widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361553,"byte_end":361586,"line_start":62,"line_end":62,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":5928},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361687,"byte_end":361693,"line_start":65,"line_end":65,"column_start":9,"column_end":15},"name":"common","qualname":"::theme::WidgetDefault::common","value":"widget::CommonStyle","parent":{"krate":0,"index":5926},"children":[],"decl_id":null,"docs":" The attributes commonly shared between widgets.\n","sig":null,"attributes":[{"value":"/ The attributes commonly shared between widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361627,"byte_end":361678,"line_start":64,"line_end":64,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":5931},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361834,"byte_end":361847,"line_start":70,"line_end":70,"column_start":12,"column_end":25},"name":"UniqueDefault","qualname":"::theme::UniqueDefault","value":"UniqueDefault { style, common }","parent":null,"children":[{"krate":0,"index":5934},{"krate":0,"index":5935}],"decl_id":null,"docs":" A **WidgetDefault** downcast to a **Widget**'s unique **Style** type.\n","sig":null,"attributes":[{"value":"/ A **WidgetDefault** downcast to a **Widget**'s unique **Style** type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361719,"byte_end":361792,"line_start":68,"line_end":68,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":5934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361910,"byte_end":361915,"line_start":72,"line_end":72,"column_start":9,"column_end":14},"name":"style","qualname":"::theme::UniqueDefault::style","value":"&'a T","parent":{"krate":0,"index":5931},"children":[],"decl_id":null,"docs":" The unique style for the widget.\n","sig":null,"attributes":[{"value":"/ The unique style for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361865,"byte_end":361901,"line_start":71,"line_end":71,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":5935},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361983,"byte_end":361989,"line_start":74,"line_end":74,"column_start":9,"column_end":15},"name":"common","qualname":"::theme::UniqueDefault::common","value":"&'a widget::CommonStyle","parent":{"krate":0,"index":5931},"children":[],"decl_id":null,"docs":" Attributes that are common to all widgets.\n","sig":null,"attributes":[{"value":"/ Attributes that are common to all widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":361928,"byte_end":361974,"line_start":73,"line_end":73,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362092,"byte_end":362095,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"new","qualname":"<WidgetDefault>::new","value":"fn (style: Box<dyn Any + Send>) -> WidgetDefault","parent":null,"children":[],"decl_id":null,"docs":" Constructor for a WidgetDefault.\n","sig":null,"attributes":[{"value":"/ Constructor for a WidgetDefault.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362044,"byte_end":362080,"line_start":78,"line_end":78,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362341,"byte_end":362348,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"default","qualname":"<Theme>::default","value":"fn () -> Theme","parent":null,"children":[],"decl_id":null,"docs":" The default theme if not loading from file.\n","sig":null,"attributes":[{"value":"/ The default theme if not loading from file.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362282,"byte_end":362329,"line_start":89,"line_end":89,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":363295,"byte_end":363307,"line_start":114,"line_end":114,"column_start":12,"column_end":24},"name":"widget_style","qualname":"<Theme>::widget_style","value":"fn <T> (&self) -> Option<UniqueDefault<T>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the unique default styling for a widget.","sig":null,"attributes":[{"value":"/ Retrieve the unique default styling for a widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":363123,"byte_end":363176,"line_start":111,"line_end":111,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":363181,"byte_end":363184,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Attempts to cast the `Box<WidgetStyle>` to the **Widget**'s unique associated style **T**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":363189,"byte_end":363283,"line_start":113,"line_end":113,"column_start":5,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":1490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364192,"byte_end":364201,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"UiBuilder","qualname":"::ui::UiBuilder","value":"UiBuilder { window_dimensions, maybe_theme, maybe_widgets_capacity }","parent":null,"children":[{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493}],"decl_id":null,"docs":" A constructor type for building a `Ui` instance with a set of optional parameters.\n","sig":null,"attributes":[{"value":"/ A constructor type for building a `Ui` instance with a set of optional parameters.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364094,"byte_end":364180,"line_start":16,"line_end":16,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":1491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364283,"byte_end":364300,"line_start":19,"line_end":19,"column_start":9,"column_end":26},"name":"window_dimensions","qualname":"::ui::UiBuilder::window_dimensions","value":"[f64; 2]","parent":{"krate":0,"index":1490},"children":[],"decl_id":null,"docs":" The initial dimensions of the window in which the `Ui` exists.\n","sig":null,"attributes":[{"value":"/ The initial dimensions of the window in which the `Ui` exists.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364208,"byte_end":364274,"line_start":18,"line_end":18,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1492},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364476,"byte_end":364487,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"name":"maybe_theme","qualname":"::ui::UiBuilder::maybe_theme","value":"std::option::Option<theme::Theme>","parent":{"krate":0,"index":1490},"children":[],"decl_id":null,"docs":" The theme used to set default styling for widgets.","sig":null,"attributes":[{"value":"/ The theme used to set default styling for widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364318,"byte_end":364372,"line_start":20,"line_end":20,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364377,"byte_end":364380,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If this field is `None` when `build` is called, `Theme::default` will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364385,"byte_end":364467,"line_start":22,"line_end":22,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":1493},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365304,"byte_end":365326,"line_start":37,"line_end":37,"column_start":9,"column_end":31},"name":"maybe_widgets_capacity","qualname":"::ui::UiBuilder::maybe_widgets_capacity","value":"std::option::Option<usize>","parent":{"krate":0,"index":1490},"children":[],"decl_id":null,"docs":" An estimation of the maximum number of widgets that will be used with this `Ui` instance.","sig":null,"attributes":[{"value":"/ An estimation of the maximum number of widgets that will be used with this `Ui` instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364508,"byte_end":364601,"line_start":24,"line_end":24,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364606,"byte_end":364609,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This value is used to determine the size with which various collections should be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364614,"byte_end":364699,"line_start":26,"line_end":26,"column_start":5,"column_end":90}},{"value":"/ reserved. This may make the first cycle of widget instantiations more efficient as the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364704,"byte_end":364794,"line_start":27,"line_end":27,"column_start":5,"column_end":95}},{"value":"/ collections will not be required to grow dynamically. These collections include:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364799,"byte_end":364883,"line_start":28,"line_end":28,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364888,"byte_end":364891,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ - the widget graph node and edge `Vec`s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364896,"byte_end":364939,"line_start":30,"line_end":30,"column_start":5,"column_end":48}},{"value":"/ - the `HashSet` used to track updated widgets","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364944,"byte_end":364993,"line_start":31,"line_end":31,"column_start":5,"column_end":54}},{"value":"/ - the widget `DepthOrder` (a kind of toposort describing the order of widgets in their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":364998,"byte_end":365088,"line_start":32,"line_end":32,"column_start":5,"column_end":95}},{"value":"/ rendering order).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365093,"byte_end":365114,"line_start":33,"line_end":33,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365119,"byte_end":365122,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ If this field is `None` when `build` is called, these collections will be initialised with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365127,"byte_end":365221,"line_start":35,"line_end":35,"column_start":5,"column_end":99}},{"value":"/ no pre-reserved size and will instead grow organically as needed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365226,"byte_end":365295,"line_start":36,"line_end":36,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365866,"byte_end":365868,"line_start":49,"line_end":49,"column_start":12,"column_end":14},"name":"Ui","qualname":"::ui::Ui","value":"Ui { theme, window, fonts, win_w, win_h }","parent":null,"children":[{"krate":0,"index":5948},{"krate":0,"index":5949},{"krate":0,"index":5950},{"krate":0,"index":5951},{"krate":0,"index":5952},{"krate":0,"index":5953},{"krate":0,"index":5954},{"krate":0,"index":5955},{"krate":0,"index":5956},{"krate":0,"index":5957},{"krate":0,"index":5958},{"krate":0,"index":5959},{"krate":0,"index":5960},{"krate":0,"index":5961},{"krate":0,"index":5962},{"krate":0,"index":5963},{"krate":0,"index":5964}],"decl_id":null,"docs":" `Ui` is the most important type within Conrod and is necessary for rendering and maintaining\n widget state.\n # Ui Handles the following:\n * Contains the state of all widgets which can be indexed via their widget::Id.\n * Stores rendering state for each widget until the end of each render cycle.\n * Contains the theme used for default styling of the widgets.\n * Maintains the latest user input state (for mouse and keyboard).\n * Maintains the latest window dimensions.\n","sig":null,"attributes":[{"value":"/ `Ui` is the most important type within Conrod and is necessary for rendering and maintaining","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365345,"byte_end":365441,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/ widget state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365442,"byte_end":365459,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ # Ui Handles the following:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365460,"byte_end":365491,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ * Contains the state of all widgets which can be indexed via their widget::Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365492,"byte_end":365574,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"/ * Stores rendering state for each widget until the end of each render cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365575,"byte_end":365655,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ * Contains the theme used for default styling of the widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365656,"byte_end":365721,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/ * Maintains the latest user input state (for mouse and keyboard).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365722,"byte_end":365791,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/ * Maintains the latest window dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365792,"byte_end":365837,"line_start":47,"line_end":47,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":5948},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365938,"byte_end":365943,"line_start":51,"line_end":51,"column_start":9,"column_end":14},"name":"theme","qualname":"::ui::Ui::theme","value":"theme::Theme","parent":{"krate":0,"index":5947},"children":[],"decl_id":null,"docs":" The theme used to set default styling for widgets.\n","sig":null,"attributes":[{"value":"/ The theme used to set default styling for widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365875,"byte_end":365929,"line_start":50,"line_end":50,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":5949},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":366044,"byte_end":366050,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"window","qualname":"::ui::Ui::window","value":"daggy::NodeIndex","parent":{"krate":0,"index":5947},"children":[],"decl_id":null,"docs":" An index into the root widget of the graph, representing the entire window.\n","sig":null,"attributes":[{"value":"/ An index into the root widget of the graph, representing the entire window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":365956,"byte_end":366035,"line_start":52,"line_end":52,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":5951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":366234,"byte_end":366239,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"fonts","qualname":"::ui::Ui::fonts","value":"text::font::Map","parent":{"krate":0,"index":5947},"children":[],"decl_id":null,"docs":" Manages all fonts that have been loaded by the user.\n","sig":null,"attributes":[{"value":"/ Manages all fonts that have been loaded by the user.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":366169,"byte_end":366225,"line_start":56,"line_end":56,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5963},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368103,"byte_end":368108,"line_start":93,"line_end":93,"column_start":9,"column_end":14},"name":"win_w","qualname":"::ui::Ui::win_w","value":"f64","parent":{"krate":0,"index":5947},"children":[],"decl_id":null,"docs":" Window width.\n","sig":null,"attributes":[{"value":"/ Window width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368077,"byte_end":368094,"line_start":92,"line_end":92,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":5964},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368146,"byte_end":368151,"line_start":95,"line_end":95,"column_start":9,"column_end":14},"name":"win_h","qualname":"::ui::Ui::win_h","value":"f64","parent":{"krate":0,"index":5947},"children":[],"decl_id":null,"docs":" Window height.\n","sig":null,"attributes":[{"value":"/ Window height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368119,"byte_end":368137,"line_start":94,"line_end":94,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368976,"byte_end":368982,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"UiCell","qualname":"::ui::UiCell","value":"UiCell {  }","parent":null,"children":[{"krate":0,"index":5969}],"decl_id":null,"docs":" A wrapper around the `Ui` that restricts the user from mutating the `Ui` in certain ways while\n in the scope of the `Ui::set_widgets` function and within `Widget`s' `update` methods. Using\n the `UiCell`, users may access the `Ui` immutably (via `Deref`) however they wish, however they\n may only mutate the `Ui` via the `&mut self` methods provided by the `UiCell`.","sig":null,"attributes":[{"value":"/ A wrapper around the `Ui` that restricts the user from mutating the `Ui` in certain ways while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368161,"byte_end":368259,"line_start":98,"line_end":98,"column_start":1,"column_end":99}},{"value":"/ in the scope of the `Ui::set_widgets` function and within `Widget`s' `update` methods. Using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368260,"byte_end":368356,"line_start":99,"line_end":99,"column_start":1,"column_end":97}},{"value":"/ the `UiCell`, users may access the `Ui` immutably (via `Deref`) however they wish, however they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368357,"byte_end":368456,"line_start":100,"line_end":100,"column_start":1,"column_end":100}},{"value":"/ may only mutate the `Ui` via the `&mut self` methods provided by the `UiCell`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368457,"byte_end":368539,"line_start":101,"line_end":101,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368540,"byte_end":368543,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The name came from its likening to a \"jail cell for the `Ui`\", as it restricts a user's access","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368544,"byte_end":368642,"line_start":103,"line_end":103,"column_start":1,"column_end":99}},{"value":"/ to it. However, we realise that the name may also cause ambiguity with the std `Cell` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368643,"byte_end":368736,"line_start":104,"line_end":104,"column_start":1,"column_end":94}},{"value":"/ `RefCell` types (which `UiCell` has nothing to do with). Thus, if you have a better name for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368737,"byte_end":368833,"line_start":105,"line_end":105,"column_start":1,"column_end":97}},{"value":"/ this type in mind, please let us know at the github repo via an issue or PR sometime before we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368834,"byte_end":368932,"line_start":106,"line_end":106,"column_start":1,"column_end":99}},{"value":"/ hit 1.0.0!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":368933,"byte_end":368947,"line_start":107,"line_end":107,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369603,"byte_end":369606,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<UiBuilder>::new","value":"fn (window_dimensions: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `Ui` instance.","sig":null,"attributes":[{"value":"/ Begin building a new `Ui` instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369407,"byte_end":369446,"line_start":122,"line_end":122,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369451,"byte_end":369454,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Give the initial dimensions of the window within which the `Ui` will be instantiated as a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369459,"byte_end":369552,"line_start":124,"line_end":124,"column_start":5,"column_end":98}},{"value":"/ `Scalar` (DPI agnostic) value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369557,"byte_end":369591,"line_start":125,"line_end":125,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369972,"byte_end":369977,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"theme","qualname":"<UiBuilder>::theme","value":"fn (mut self, value: Theme) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The theme used to set default styling for widgets.","sig":null,"attributes":[{"value":"/ The theme used to set default styling for widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369811,"byte_end":369865,"line_start":134,"line_end":134,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369870,"byte_end":369873,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ If this field is `None` when `build` is called, `Theme::default` will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369878,"byte_end":369960,"line_start":136,"line_end":136,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370877,"byte_end":370893,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"widgets_capacity","qualname":"<UiBuilder>::widgets_capacity","value":"fn (mut self, value: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" An estimation of the maximum number of widgets that will be used with this `Ui` instance.","sig":null,"attributes":[{"value":"/ An estimation of the maximum number of widgets that will be used with this `Ui` instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370076,"byte_end":370169,"line_start":142,"line_end":142,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370174,"byte_end":370177,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ This value is used to determine the size with which various collections should be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370182,"byte_end":370267,"line_start":144,"line_end":144,"column_start":5,"column_end":90}},{"value":"/ reserved. This may make the first cycle of widget instantiations more efficient as the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370272,"byte_end":370362,"line_start":145,"line_end":145,"column_start":5,"column_end":95}},{"value":"/ collections will not be required to grow dynamically. These collections include:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370367,"byte_end":370451,"line_start":146,"line_end":146,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370456,"byte_end":370459,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ - the widget graph node and edge `Vec`s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370464,"byte_end":370507,"line_start":148,"line_end":148,"column_start":5,"column_end":48}},{"value":"/ - the `HashSet` used to track updated widgets","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370512,"byte_end":370561,"line_start":149,"line_end":149,"column_start":5,"column_end":54}},{"value":"/ - the widget `DepthOrder` (a kind of toposort describing the order of widgets in their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370566,"byte_end":370656,"line_start":150,"line_end":150,"column_start":5,"column_end":95}},{"value":"/ rendering order).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370661,"byte_end":370682,"line_start":151,"line_end":151,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370687,"byte_end":370690,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ If this field is `None` when `build` is called, these collections will be initialised with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370695,"byte_end":370789,"line_start":153,"line_end":153,"column_start":5,"column_end":99}},{"value":"/ no pre-reserved size and will instead grow organically as required.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":370794,"byte_end":370865,"line_start":154,"line_end":154,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":371054,"byte_end":371059,"line_start":161,"line_end":161,"column_start":12,"column_end":17},"name":"build","qualname":"<UiBuilder>::build","value":"fn (self) -> Ui","parent":null,"children":[],"decl_id":null,"docs":" Build **Ui** from the given builder\n","sig":null,"attributes":[{"value":"/ Build **Ui** from the given builder","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":371003,"byte_end":371042,"line_start":160,"line_end":160,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":372820,"byte_end":372832,"line_start":212,"line_end":212,"column_start":12,"column_end":24},"name":"widget_input","qualname":"<Ui>::widget_input","value":"fn (&self, widget: widget::Id) -> input::Widget","parent":null,"children":[],"decl_id":null,"docs":" Returns a `input::Widget` for the given widget\n","sig":null,"attributes":[{"value":"/ Returns a `input::Widget` for the given widget","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":372758,"byte_end":372808,"line_start":211,"line_end":211,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373599,"byte_end":373606,"line_start":227,"line_end":227,"column_start":12,"column_end":19},"name":"rect_of","qualname":"<Ui>::rect_of","value":"fn (&self, id: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" The **Rect** for the widget at the given index.","sig":null,"attributes":[{"value":"/ The **Rect** for the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373462,"byte_end":373513,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373518,"byte_end":373521,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there is no widget for the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373526,"byte_end":373587,"line_start":226,"line_end":226,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373864,"byte_end":373868,"line_start":234,"line_end":234,"column_start":12,"column_end":16},"name":"w_of","qualname":"<Ui>::w_of","value":"fn (&self, id: widget::Id) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" The absolute width of the widget at the given index.","sig":null,"attributes":[{"value":"/ The absolute width of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373722,"byte_end":373778,"line_start":231,"line_end":231,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373783,"byte_end":373786,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there is no widget for the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373791,"byte_end":373852,"line_start":233,"line_end":233,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374112,"byte_end":374116,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"h_of","qualname":"<Ui>::h_of","value":"fn (&self, id: widget::Id) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" The absolute height of the widget at the given index.","sig":null,"attributes":[{"value":"/ The absolute height of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":373969,"byte_end":374026,"line_start":238,"line_end":238,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374031,"byte_end":374034,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there is no widget for the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374039,"byte_end":374100,"line_start":240,"line_end":240,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374365,"byte_end":374370,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"wh_of","qualname":"<Ui>::wh_of","value":"fn (&self, id: widget::Id) -> Option<Dimensions>","parent":null,"children":[],"decl_id":null,"docs":" The absolute dimensions for the widget at the given index.","sig":null,"attributes":[{"value":"/ The absolute dimensions for the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374217,"byte_end":374279,"line_start":245,"line_end":245,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374284,"byte_end":374287,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there is no widget for the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374292,"byte_end":374353,"line_start":247,"line_end":247,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374617,"byte_end":374622,"line_start":255,"line_end":255,"column_start":12,"column_end":17},"name":"xy_of","qualname":"<Ui>::xy_of","value":"fn (&self, id: widget::Id) -> Option<Point>","parent":null,"children":[],"decl_id":null,"docs":" The coordinates for the widget at the given index.","sig":null,"attributes":[{"value":"/ The coordinates for the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374477,"byte_end":374531,"line_start":252,"line_end":252,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374536,"byte_end":374539,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there is no widget for the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374544,"byte_end":374605,"line_start":254,"line_end":254,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374861,"byte_end":374872,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"kid_area_of","qualname":"<Ui>::kid_area_of","value":"fn (&self, id: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" The `kid_area` of the widget at the given index.","sig":null,"attributes":[{"value":"/ The `kid_area` of the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374723,"byte_end":374775,"line_start":259,"line_end":259,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374780,"byte_end":374783,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there is no widget for the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":374788,"byte_end":374849,"line_start":261,"line_end":261,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375124,"byte_end":375141,"line_start":269,"line_end":269,"column_start":12,"column_end":29},"name":"maybe_prev_widget","qualname":"<Ui>::maybe_prev_widget","value":"fn (&self) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" An index to the previously updated widget if there is one.\n","sig":null,"attributes":[{"value":"/ An index to the previously updated widget if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375050,"byte_end":375112,"line_start":268,"line_end":268,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375269,"byte_end":375281,"line_start":274,"line_end":274,"column_start":12,"column_end":24},"name":"widget_graph","qualname":"<Ui>::widget_graph","value":"fn (&self) -> &Graph","parent":null,"children":[],"decl_id":null,"docs":" Borrow the **Ui**'s `widget_graph`.\n","sig":null,"attributes":[{"value":"/ Borrow the **Ui**'s `widget_graph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375218,"byte_end":375257,"line_start":273,"line_end":273,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375541,"byte_end":375556,"line_start":282,"line_end":282,"column_start":12,"column_end":27},"name":"updated_widgets","qualname":"<Ui>::updated_widgets","value":"fn (&self) -> &fnv::FnvHashSet<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the **Ui**'s set of updated widgets.","sig":null,"attributes":[{"value":"/ Borrow the **Ui**'s set of updated widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375339,"byte_end":375386,"line_start":278,"line_end":278,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375391,"byte_end":375394,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This set indicates which widgets have been instantiated since the beginning of the most","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375399,"byte_end":375490,"line_start":280,"line_end":280,"column_start":5,"column_end":96}},{"value":"/ recent `Ui::set_widgets` call.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375495,"byte_end":375529,"line_start":281,"line_end":281,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375825,"byte_end":375845,"line_start":290,"line_end":290,"column_start":12,"column_end":32},"name":"prev_updated_widgets","qualname":"<Ui>::prev_updated_widgets","value":"fn (&self) -> &fnv::FnvHashSet<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the **Ui**'s set of updated widgets.","sig":null,"attributes":[{"value":"/ Borrow the **Ui**'s set of updated widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375639,"byte_end":375686,"line_start":286,"line_end":286,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375691,"byte_end":375694,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ This set indicates which widgets have were instantiated during the previous call to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375699,"byte_end":375786,"line_start":288,"line_end":288,"column_start":5,"column_end":92}},{"value":"/ `Ui::set_widgets`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375791,"byte_end":375813,"line_start":289,"line_end":289,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376162,"byte_end":376181,"line_start":298,"line_end":298,"column_start":12,"column_end":31},"name":"widget_id_generator","qualname":"<Ui>::widget_id_generator","value":"fn (&mut self) -> widget::id::Generator","parent":null,"children":[],"decl_id":null,"docs":" Produces a type that may be used to generate new unique `widget::Id`s.","sig":null,"attributes":[{"value":"/ Produces a type that may be used to generate new unique `widget::Id`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":375933,"byte_end":376007,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376012,"byte_end":376015,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ See the [**widget::id::Generator**](../widget/id/struct.Generator.html) docs for details on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376020,"byte_end":376115,"line_start":296,"line_end":296,"column_start":5,"column_end":100}},{"value":"/ how to use this correctly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376120,"byte_end":376150,"line_start":297,"line_end":297,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376471,"byte_end":376484,"line_start":305,"line_end":305,"column_start":12,"column_end":25},"name":"scroll_widget","qualname":"<Ui>::scroll_widget","value":"fn (&mut self, widget_id: widget::Id, offset: [Scalar; 2]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Scroll the widget at the given index by the given offset amount.","sig":null,"attributes":[{"value":"/ Scroll the widget at the given index by the given offset amount.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376290,"byte_end":376358,"line_start":302,"line_end":302,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376363,"byte_end":376366,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ The produced `Scroll` event will be applied upon the next call to `Ui::set_widgets`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":376371,"byte_end":376459,"line_start":304,"line_end":304,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":380277,"byte_end":380289,"line_start":383,"line_end":383,"column_start":12,"column_end":24},"name":"handle_event","qualname":"<Ui>::handle_event","value":"fn (&mut self, event: event::Input) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Handle raw window events and update the `Ui` state accordingly.","sig":null,"attributes":[{"value":"/ Handle raw window events and update the `Ui` state accordingly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379367,"byte_end":379434,"line_start":367,"line_end":367,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379439,"byte_end":379442,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ This occurs within several stages:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379447,"byte_end":379485,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379490,"byte_end":379493,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ 1. Convert the user's given `event` to a `RawEvent` so that the `Ui` may use it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379498,"byte_end":379582,"line_start":371,"line_end":371,"column_start":5,"column_end":89}},{"value":"/ 2. Interpret the `RawEvent` for higher-level `Event`s such as `DoubleClick`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379587,"byte_end":379667,"line_start":372,"line_end":372,"column_start":5,"column_end":85}},{"value":"/    `WidgetCapturesKeyboard`, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379672,"byte_end":379709,"line_start":373,"line_end":373,"column_start":5,"column_end":42}},{"value":"/ 3. Update the `Ui`'s `global_input` `State` accordingly, depending on the `RawEvent`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379714,"byte_end":379803,"line_start":374,"line_end":374,"column_start":5,"column_end":94}},{"value":"/ 4. Store newly produced `event::Ui`s within the `global_input` so that they may be filtered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379808,"byte_end":379903,"line_start":375,"line_end":375,"column_start":5,"column_end":100}},{"value":"/    and fed to `Widget`s next time `Ui::set_widget` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379908,"byte_end":379973,"line_start":376,"line_end":376,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379978,"byte_end":379981,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ This method *drives* the `Ui` forward, and is what allows for using conrod's `Ui` with any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":379986,"byte_end":380080,"line_start":378,"line_end":378,"column_start":5,"column_end":99}},{"value":"/ window event stream.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":380085,"byte_end":380109,"line_start":379,"line_end":379,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":380114,"byte_end":380117,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ The given `event` must implement the **ToRawEvent** trait so that it can be converted to a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":380122,"byte_end":380216,"line_start":381,"line_end":381,"column_start":5,"column_end":99}},{"value":"/ `RawEvent` that can be used by the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":380221,"byte_end":380265,"line_start":382,"line_end":382,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":407101,"byte_end":407113,"line_start":912,"line_end":912,"column_start":12,"column_end":24},"name":"global_input","qualname":"<Ui>::global_input","value":"fn (&self) -> &input::Global","parent":null,"children":[],"decl_id":null,"docs":" Get an immutable reference to global input. Handles aggregation of events and providing them to Widgets","sig":null,"attributes":[{"value":"/ Get an immutable reference to global input. Handles aggregation of events and providing them to Widgets","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":406868,"byte_end":406975,"line_start":909,"line_end":909,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":406980,"byte_end":406983,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ Can be used to access the current input state, e.g. which widgets are currently capturing inputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":406988,"byte_end":407089,"line_start":911,"line_end":911,"column_start":5,"column_end":106}}]},{"kind":"Method","id":{"krate":0,"index":1547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":407224,"byte_end":407240,"line_start":917,"line_end":917,"column_start":12,"column_end":28},"name":"keyboard_capture","qualname":"<Ui>::keyboard_capture","value":"fn (&mut self, idx: widget::Id) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set keyboard capturing widget\n","sig":null,"attributes":[{"value":"/ Set keyboard capturing widget","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":407179,"byte_end":407212,"line_start":916,"line_end":916,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":408289,"byte_end":408296,"line_start":938,"line_end":938,"column_start":12,"column_end":19},"name":"calc_xy","qualname":"<Ui>::calc_xy","value":"fn (&self, maybe_id: Option<widget::Id>, maybe_parent_id: Option<widget::Id>, x_position: Position, y_position: Position, dim: Dimensions, place_on_kid_area: bool) -> Point","parent":null,"children":[],"decl_id":null,"docs":" Get the centred xy coords for some given `Dimension`s, `Position` and alignment.","sig":null,"attributes":[{"value":"/ Get the centred xy coords for some given `Dimension`s, `Position` and alignment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":407816,"byte_end":407900,"line_start":931,"line_end":931,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":407905,"byte_end":407908,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ If getting the xy for a specific widget, its `widget::Id` should be specified so that we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":407913,"byte_end":408005,"line_start":933,"line_end":933,"column_start":5,"column_end":97}},{"value":"/ can also consider the scroll offset of the scrollable parent widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":408010,"byte_end":408083,"line_start":934,"line_end":934,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":408088,"byte_end":408091,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ The `place_on_kid_area` argument specifies whether or not **Place** **Position** variants","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":408096,"byte_end":408189,"line_start":936,"line_end":936,"column_start":5,"column_end":98}},{"value":"/ should target a **Widget**'s `kid_area`, or simply the **Widget**'s total area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":408194,"byte_end":408277,"line_start":937,"line_end":937,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":413936,"byte_end":413947,"line_start":1050,"line_end":1050,"column_start":12,"column_end":23},"name":"set_widgets","qualname":"<Ui>::set_widgets","value":"fn (&mut self) -> UiCell","parent":null,"children":[],"decl_id":null,"docs":" A function within which all widgets are instantiated by the user, normally situated within\n the \"update\" stage of an event loop.\n","sig":null,"attributes":[{"value":"/ A function within which all widgets are instantiated by the user, normally situated within","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":413785,"byte_end":413879,"line_start":1048,"line_end":1048,"column_start":5,"column_end":99}},{"value":"/ the \"update\" stage of an event loop.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":413884,"byte_end":413924,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":415527,"byte_end":415548,"line_start":1090,"line_end":1090,"column_start":12,"column_end":33},"name":"set_num_redraw_frames","qualname":"<Ui>::set_num_redraw_frames","value":"fn (&mut self, num_frames: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the number of frames that the `Ui` should draw in the case that `needs_redraw` is\n called. The default is `3` (see the SAFE_REDRAW_COUNT docs for details).\n","sig":null,"attributes":[{"value":"/ Set the number of frames that the `Ui` should draw in the case that `needs_redraw` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":415345,"byte_end":415434,"line_start":1088,"line_end":1088,"column_start":5,"column_end":94}},{"value":"/ called. The default is `3` (see the SAFE_REDRAW_COUNT docs for details).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":415439,"byte_end":415515,"line_start":1089,"line_end":1089,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":415915,"byte_end":415927,"line_start":1098,"line_end":1098,"column_start":12,"column_end":24},"name":"needs_redraw","qualname":"<Ui>::needs_redraw","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Tells the `Ui` that it needs to re-draw everything. It does this by setting the redraw\n count to `num_redraw_frames`. See the docs for `set_num_redraw_frames`, SAFE_REDRAW_COUNT\n or `draw_if_changed` for more info on how/why the redraw count is used.\n","sig":null,"attributes":[{"value":"/ Tells the `Ui` that it needs to re-draw everything. It does this by setting the redraw","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":415635,"byte_end":415725,"line_start":1095,"line_end":1095,"column_start":5,"column_end":95}},{"value":"/ count to `num_redraw_frames`. See the docs for `set_num_redraw_frames`, SAFE_REDRAW_COUNT","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":415730,"byte_end":415823,"line_start":1096,"line_end":1096,"column_start":5,"column_end":98}},{"value":"/ or `draw_if_changed` for more info on how/why the redraw count is used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":415828,"byte_end":415903,"line_start":1097,"line_end":1097,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416358,"byte_end":416368,"line_start":1107,"line_end":1107,"column_start":12,"column_end":22},"name":"clear_with","qualname":"<Ui>::clear_with","value":"fn (&mut self, color: Color) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The first of the `Primitives` yielded by `Ui::draw` or `Ui::draw_if_changed` will always\n be a `Rectangle` the size of the window in which conrod is hosted.","sig":null,"attributes":[{"value":"/ The first of the `Primitives` yielded by `Ui::draw` or `Ui::draw_if_changed` will always","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416041,"byte_end":416133,"line_start":1102,"line_end":1102,"column_start":5,"column_end":97}},{"value":"/ be a `Rectangle` the size of the window in which conrod is hosted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416138,"byte_end":416208,"line_start":1103,"line_end":1103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416213,"byte_end":416216,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ This method sets the colour with which this `Rectangle` is drawn (the default being","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416221,"byte_end":416308,"line_start":1105,"line_end":1105,"column_start":5,"column_end":92}},{"value":"/ `conrod::color::TRANSPARENT`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416313,"byte_end":416346,"line_start":1106,"line_end":1106,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416664,"byte_end":416668,"line_start":1115,"line_end":1115,"column_start":12,"column_end":16},"name":"draw","qualname":"<Ui>::draw","value":"fn (&self) -> render::Primitives","parent":null,"children":[],"decl_id":null,"docs":" Draw the `Ui` in it's current state.","sig":null,"attributes":[{"value":"/ Draw the `Ui` in it's current state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416458,"byte_end":416498,"line_start":1111,"line_end":1111,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416503,"byte_end":416506,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ NOTE: If you don't need to redraw your conrod GUI every frame, it is recommended to use the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416511,"byte_end":416606,"line_start":1113,"line_end":1113,"column_start":5,"column_end":100}},{"value":"/ `Ui::draw_if_changed` method instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":416611,"byte_end":416652,"line_start":1114,"line_end":1114,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418240,"byte_end":418255,"line_start":1153,"line_end":1153,"column_start":12,"column_end":27},"name":"draw_if_changed","qualname":"<Ui>::draw_if_changed","value":"fn (&self) -> Option<render::Primitives>","parent":null,"children":[],"decl_id":null,"docs":" Same as the `Ui::draw` method, but *only* draws if the `redraw_count` is greater than 0.","sig":null,"attributes":[{"value":"/ Same as the `Ui::draw` method, but *only* draws if the `redraw_count` is greater than 0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417404,"byte_end":417496,"line_start":1139,"line_end":1139,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417501,"byte_end":417504,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ The `redraw_count` is set to `SAFE_REDRAW_COUNT` whenever a `Widget` indicates that it","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417509,"byte_end":417599,"line_start":1141,"line_end":1141,"column_start":5,"column_end":95}},{"value":"/ needs to be re-drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417604,"byte_end":417629,"line_start":1142,"line_end":1142,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417634,"byte_end":417637,"line_start":1143,"line_end":1143,"column_start":5,"column_end":8}},{"value":"/ It can also be triggered manually by the user using the `Ui::needs_redraw` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417642,"byte_end":417728,"line_start":1144,"line_end":1144,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417733,"byte_end":417736,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ This method is generally preferred over `Ui::draw` as it requires far less CPU usage, only","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417741,"byte_end":417835,"line_start":1146,"line_end":1146,"column_start":5,"column_end":99}},{"value":"/ redrawing to the screen if necessary.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417840,"byte_end":417881,"line_start":1147,"line_end":1147,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417886,"byte_end":417889,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ Note that when `Ui::needs_redraw` is triggered, it sets the `redraw_count` to 3 by default.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417894,"byte_end":417989,"line_start":1149,"line_end":1149,"column_start":5,"column_end":100}},{"value":"/ This ensures that conrod is drawn to each buffer in the case that there is buffer swapping","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":417994,"byte_end":418088,"line_start":1150,"line_end":1150,"column_start":5,"column_end":99}},{"value":"/ happening. Let us know if you need finer control over this and we'll expose a way for you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418093,"byte_end":418186,"line_start":1151,"line_end":1151,"column_start":5,"column_end":98}},{"value":"/ to set the redraw count manually.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418191,"byte_end":418228,"line_start":1152,"line_end":1152,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418557,"byte_end":418568,"line_start":1163,"line_end":1163,"column_start":12,"column_end":23},"name":"has_changed","qualname":"<Ui>::has_changed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the redraw_count is greater than 0 and thus draw_if_changed would draw\n See `Ui::draw_if_changed` for when this is triggered\n","sig":null,"attributes":[{"value":"/ Returns if the redraw_count is greater than 0 and thus draw_if_changed would draw","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418399,"byte_end":418484,"line_start":1161,"line_end":1161,"column_start":5,"column_end":90}},{"value":"/ See `Ui::draw_if_changed` for when this is triggered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418489,"byte_end":418545,"line_start":1162,"line_end":1162,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418745,"byte_end":418762,"line_start":1169,"line_end":1169,"column_start":12,"column_end":29},"name":"kids_bounding_box","qualname":"<Ui>::kids_bounding_box","value":"fn (&self, id: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" The **Rect** that bounds the kids of the widget with the given index.\n","sig":null,"attributes":[{"value":"/ The **Rect** that bounds the kids of the widget with the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418660,"byte_end":418733,"line_start":1168,"line_end":1168,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419144,"byte_end":419156,"line_start":1178,"line_end":1178,"column_start":12,"column_end":24},"name":"visible_area","qualname":"<Ui>::visible_area","value":"fn (&self, id: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" The **Rect** that represents the maximum fully visible area for the widget with the given\n index, including consideration of cropped scroll area.","sig":null,"attributes":[{"value":"/ The **Rect** that represents the maximum fully visible area for the widget with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":418907,"byte_end":419000,"line_start":1174,"line_end":1174,"column_start":5,"column_end":98}},{"value":"/ index, including consideration of cropped scroll area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419005,"byte_end":419063,"line_start":1175,"line_end":1175,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419068,"byte_end":419071,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ Otherwise, return None if the widget is not visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419076,"byte_end":419132,"line_start":1177,"line_end":1177,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419316,"byte_end":419328,"line_start":1183,"line_end":1183,"column_start":12,"column_end":24},"name":"mouse_cursor","qualname":"<Ui>::mouse_cursor","value":"fn (&self) -> cursor::MouseCursor","parent":null,"children":[],"decl_id":null,"docs":" Get mouse cursor state.\n","sig":null,"attributes":[{"value":"/ Get mouse cursor state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419277,"byte_end":419304,"line_start":1182,"line_end":1182,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1587},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419508,"byte_end":419513,"line_start":1192,"line_end":1192,"column_start":12,"column_end":17},"name":"theme","qualname":"<UiCell>::theme","value":"fn (&self) -> &Theme","parent":null,"children":[],"decl_id":null,"docs":" A reference to the `Theme` that is currently active within the `Ui`.\n","sig":null,"attributes":[{"value":"/ A reference to the `Theme` that is currently active within the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419424,"byte_end":419496,"line_start":1191,"line_end":1191,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419649,"byte_end":419653,"line_start":1195,"line_end":1195,"column_start":12,"column_end":16},"name":"font","qualname":"<UiCell>::font","value":"fn (&self, id: text::font::Id) -> Option<&text::Font>","parent":null,"children":[],"decl_id":null,"docs":" A convenience method for borrowing the `Font` for the given `Id` if it exists.\n","sig":null,"attributes":[{"value":"/ A convenience method for borrowing the `Font` for the given `Id` if it exists.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419555,"byte_end":419637,"line_start":1194,"line_end":1194,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419799,"byte_end":419809,"line_start":1200,"line_end":1200,"column_start":12,"column_end":22},"name":"window_dim","qualname":"<UiCell>::window_dim","value":"fn (&self) -> Dimensions","parent":null,"children":[],"decl_id":null,"docs":" Returns the dimensions of the window\n","sig":null,"attributes":[{"value":"/ Returns the dimensions of the window","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419747,"byte_end":419787,"line_start":1199,"line_end":1199,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420048,"byte_end":420060,"line_start":1207,"line_end":1207,"column_start":12,"column_end":24},"name":"global_input","qualname":"<UiCell>::global_input","value":"fn (&self) -> &input::Global","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable reference to the `input::Global` of the `Ui`.","sig":null,"attributes":[{"value":"/ Returns an immutable reference to the `input::Global` of the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419883,"byte_end":419953,"line_start":1204,"line_end":1204,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419958,"byte_end":419961,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ All coordinates here will be relative to the center of the window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419966,"byte_end":420036,"line_start":1206,"line_end":1206,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420310,"byte_end":420322,"line_start":1214,"line_end":1214,"column_start":12,"column_end":24},"name":"widget_input","qualname":"<UiCell>::widget_input","value":"fn (&self, id: widget::Id) -> input::Widget","parent":null,"children":[],"decl_id":null,"docs":" Returns a `input::Widget` with input events for the widget.","sig":null,"attributes":[{"value":"/ Returns a `input::Widget` with input events for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420129,"byte_end":420192,"line_start":1211,"line_end":1211,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420197,"byte_end":420200,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ All coordinates in the `input::Widget` will be relative to the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420205,"byte_end":420298,"line_start":1213,"line_end":1213,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420638,"byte_end":420657,"line_start":1222,"line_end":1222,"column_start":12,"column_end":31},"name":"widget_id_generator","qualname":"<UiCell>::widget_id_generator","value":"fn (&mut self) -> widget::id::Generator","parent":null,"children":[],"decl_id":null,"docs":" Produces a type that may be used to generate new unique `widget::Id`s.","sig":null,"attributes":[{"value":"/ Produces a type that may be used to generate new unique `widget::Id`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420409,"byte_end":420483,"line_start":1218,"line_end":1218,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420488,"byte_end":420491,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ See the [**widget::id::Generator**](../widget/id/struct.Generator.html) docs for details on","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420496,"byte_end":420591,"line_start":1220,"line_end":1220,"column_start":5,"column_end":100}},{"value":"/ how to use this correctly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420596,"byte_end":420626,"line_start":1221,"line_end":1221,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420939,"byte_end":420956,"line_start":1229,"line_end":1229,"column_start":12,"column_end":29},"name":"kids_bounding_box","qualname":"<UiCell>::kids_bounding_box","value":"fn (&self, id: widget::Id) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" The **Rect** that bounds the kids of the widget with the given index.","sig":null,"attributes":[{"value":"/ The **Rect** that bounds the kids of the widget with the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420745,"byte_end":420818,"line_start":1226,"line_end":1226,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420823,"byte_end":420826,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the widget has no children or if there's is no widget for the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":420831,"byte_end":420927,"line_start":1228,"line_end":1228,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421302,"byte_end":421315,"line_start":1237,"line_end":1237,"column_start":12,"column_end":25},"name":"scroll_widget","qualname":"<UiCell>::scroll_widget","value":"fn (&mut self, id: widget::Id, offset: [Scalar; 2]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Scroll the widget at the given index by the given offset amount.","sig":null,"attributes":[{"value":"/ Scroll the widget at the given index by the given offset amount.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421047,"byte_end":421115,"line_start":1233,"line_end":1233,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421120,"byte_end":421123,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ The produced `Scroll` event will be pushed to the `pending_scroll_events` and will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421128,"byte_end":421217,"line_start":1235,"line_end":1235,"column_start":5,"column_end":94}},{"value":"/ applied to the widget during the next call to `Ui::set_widgets`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421222,"byte_end":421290,"line_start":1236,"line_end":1236,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421754,"byte_end":421770,"line_start":1251,"line_end":1251,"column_start":12,"column_end":28},"name":"set_mouse_cursor","qualname":"<UiCell>::set_mouse_cursor","value":"fn (&mut self, cursor: cursor::MouseCursor) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the mouse cursor\n","sig":null,"attributes":[{"value":"/ Sets the mouse cursor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421717,"byte_end":421742,"line_start":1250,"line_end":1250,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":1623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","parent":null,"children":[{"krate":0,"index":1624},{"krate":0,"index":1629},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1638},{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1645},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1669},{"krate":0,"index":1674},{"krate":0,"index":1678},{"krate":0,"index":1691},{"krate":0,"index":1696},{"krate":0,"index":1699}],"decl_id":null,"docs":" \n Various utility functions used throughout Conrod.","sig":null,"attributes":[{"value":"! ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426474,"byte_end":426478,"line_start":1,"line_end":1,"column_start":1,"column_end":5}},{"value":"! Various utility functions used throughout Conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426479,"byte_end":426532,"line_start":2,"line_end":2,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426533,"byte_end":426536,"line_start":3,"line_end":3,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426753,"byte_end":426764,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"partial_min","qualname":"::utils::partial_min","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compare to PartialOrd values and return the min.\n","sig":null,"attributes":[{"value":"/ Compare to PartialOrd values and return the min.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426693,"byte_end":426745,"line_start":13,"line_end":13,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":1641},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426893,"byte_end":426904,"line_start":19,"line_end":19,"column_start":8,"column_end":19},"name":"partial_max","qualname":"::utils::partial_max","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compare to PartialOrd values and return the max.\n","sig":null,"attributes":[{"value":"/ Compare to PartialOrd values and return the max.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426833,"byte_end":426885,"line_start":18,"line_end":18,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":1643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427018,"byte_end":427023,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"clamp","qualname":"::utils::clamp","value":"fn <T> (n: T, start: T, end: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Clamp a value between some range.\n","sig":null,"attributes":[{"value":"/ Clamp a value between some range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":426973,"byte_end":427010,"line_start":23,"line_end":23,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":1645},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427285,"byte_end":427292,"line_start":33,"line_end":33,"column_start":8,"column_end":15},"name":"degrees","qualname":"::utils::degrees","value":"fn <F> (d: F) -> F","parent":null,"children":[],"decl_id":null,"docs":" Convert degrees to radians.\n","sig":null,"attributes":[{"value":"/ Convert degrees to radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427246,"byte_end":427277,"line_start":32,"line_end":32,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":1648},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427427,"byte_end":427431,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"fmod","qualname":"::utils::fmod","value":"fn (f: f32, n: i32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Modulo float.\n","sig":null,"attributes":[{"value":"/ Modulo float.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427402,"byte_end":427419,"line_start":38,"line_end":38,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427571,"byte_end":427577,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"modulo","qualname":"::utils::modulo","value":"fn <I> (a: I, b: I) -> I","parent":null,"children":[],"decl_id":null,"docs":" The modulo function.\n","sig":null,"attributes":[{"value":"/ The modulo function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427529,"byte_end":427553,"line_start":44,"line_end":44,"column_start":1,"column_end":25}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427554,"byte_end":427563,"line_start":45,"line_end":45,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427854,"byte_end":427863,"line_start":55,"line_end":55,"column_start":8,"column_end":17},"name":"map_range","qualname":"::utils::map_range","value":"fn <X, Y> (val: X, in_min: X, in_max: X, out_min: Y, out_max: Y) -> Y","parent":null,"children":[],"decl_id":null,"docs":" Map a value from a given range to a new given range.\n","sig":null,"attributes":[{"value":"/ Map a value from a given range to a new given range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":427790,"byte_end":427846,"line_start":54,"line_end":54,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1654},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":428432,"byte_end":428442,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"percentage","qualname":"::utils::percentage","value":"fn <T> (value: T, min: T, max: T) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Get value percentage between max and min.\n","sig":null,"attributes":[{"value":"/ Get value percentage between max and min.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":428379,"byte_end":428424,"line_start":69,"line_end":69,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":428705,"byte_end":428710,"line_start":78,"line_end":78,"column_start":8,"column_end":13},"name":"turns","qualname":"::utils::turns","value":"fn <F> (t: F) -> F","parent":null,"children":[],"decl_id":null,"docs":" Convert turns to radians.\n","sig":null,"attributes":[{"value":"/ Convert turns to radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":428668,"byte_end":428697,"line_start":77,"line_end":77,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":428889,"byte_end":428904,"line_start":85,"line_end":85,"column_start":8,"column_end":23},"name":"value_from_perc","qualname":"::utils::value_from_perc","value":"fn <T> (perc: f32, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Adjust the value to the given percentage.\n","sig":null,"attributes":[{"value":"/ Adjust the value to the given percentage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":428836,"byte_end":428881,"line_start":84,"line_end":84,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":429145,"byte_end":429158,"line_start":91,"line_end":91,"column_start":8,"column_end":21},"name":"val_to_string","qualname":"::utils::val_to_string","value":"fn <T> (val: T, max: T, val_rng: T, pixel_range: usize) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get a suitable string from the value, its max and the pixel range.\n","sig":null,"attributes":[{"value":"/ Get a suitable string from the value, its max and the pixel range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":429067,"byte_end":429137,"line_start":90,"line_end":90,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":1664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":430588,"byte_end":430596,"line_start":128,"line_end":128,"column_start":8,"column_end":16},"name":"vec2_add","qualname":"::utils::vec2_add","value":"fn <T> (a: [T; 2], b: [T; 2]) -> [T; 2]","parent":null,"children":[],"decl_id":null,"docs":" Add `a` and `b`.\n","sig":null,"attributes":[{"value":"/ Add `a` and `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":430560,"byte_end":430580,"line_start":127,"line_end":127,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":1669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":430747,"byte_end":430755,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"vec2_sub","qualname":"::utils::vec2_sub","value":"fn <T> (a: [T; 2], b: [T; 2]) -> [T; 2]","parent":null,"children":[],"decl_id":null,"docs":" Subtract `b` from `a`.\n","sig":null,"attributes":[{"value":"/ Subtract `b` from `a`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":430713,"byte_end":430739,"line_start":134,"line_end":134,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":1674},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":430939,"byte_end":430962,"line_start":143,"line_end":143,"column_start":8,"column_end":31},"name":"bounding_box_for_points","qualname":"::utils::bounding_box_for_points","value":"fn <I> (mut points: I) -> Rect","parent":null,"children":[],"decl_id":null,"docs":" Find the bounding rect for the given series of points.\n","sig":null,"attributes":[{"value":"/ Find the bounding rect for the given series of points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":430873,"byte_end":430931,"line_start":142,"line_end":142,"column_start":1,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431799,"byte_end":431812,"line_start":164,"line_end":164,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::utils::IterDiff::FirstMismatch","value":"IterDiff::FirstMismatch(usize, Chain<Once<E>, I>)","parent":{"krate":0,"index":1678},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with the iterator's remaining elements\n starting with the first mis-matched element.\n","sig":null,"attributes":[{"value":"/ The index of the first non-matching element along with the iterator's remaining elements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431649,"byte_end":431741,"line_start":162,"line_end":162,"column_start":5,"column_end":97}},{"value":"/ starting with the first mis-matched element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431746,"byte_end":431794,"line_start":163,"line_end":163,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1685},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431892,"byte_end":431898,"line_start":166,"line_end":166,"column_start":5,"column_end":11},"name":"Longer","qualname":"::utils::IterDiff::Longer","value":"IterDiff::Longer(Chain<Once<E>, I>)","parent":{"krate":0,"index":1678},"children":[],"decl_id":null,"docs":" The remaining elements of the iterator.\n","sig":null,"attributes":[{"value":"/ The remaining elements of the iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431844,"byte_end":431887,"line_start":165,"line_end":165,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431987,"byte_end":431994,"line_start":168,"line_end":168,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::utils::IterDiff::Shorter","value":"IterDiff::Shorter(usize)","parent":{"krate":0,"index":1678},"children":[],"decl_id":null,"docs":" The total number of elements that were in the iterator.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in the iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431923,"byte_end":431982,"line_start":167,"line_end":167,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":1678},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431628,"byte_end":431636,"line_start":161,"line_end":161,"column_start":10,"column_end":18},"name":"IterDiff","qualname":"::utils::IterDiff","value":"IterDiff::{FirstMismatch, Longer, Shorter}","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1685},{"krate":0,"index":1688}],"decl_id":null,"docs":" A type returned by the `iter_diff` function.","sig":null,"attributes":[{"value":"/ A type returned by the `iter_diff` function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431342,"byte_end":431390,"line_start":155,"line_end":155,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431391,"byte_end":431394,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Represents way in which the elements (of type `E`) yielded by the iterator `I` differ to some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431395,"byte_end":431492,"line_start":157,"line_end":157,"column_start":1,"column_end":98}},{"value":"/ other iterator yielding borrowed elements of the same type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431493,"byte_end":431556,"line_start":158,"line_end":158,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431557,"byte_end":431560,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ `I` is some `Iterator` yielding elements of type `E`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":431561,"byte_end":431618,"line_start":160,"line_end":160,"column_start":1,"column_end":58}}]},{"kind":"Function","id":{"krate":0,"index":1691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432931,"byte_end":432940,"line_start":186,"line_end":186,"column_start":8,"column_end":17},"name":"iter_diff","qualname":"::utils::iter_diff","value":"fn <'a, A, B> (a: A, b: B) -> Option<IterDiff<B::Item, B::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both elems and new_elems in lock-step.","sig":null,"attributes":[{"value":"/ Compares every element yielded by both elems and new_elems in lock-step.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432006,"byte_end":432082,"line_start":171,"line_end":171,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432083,"byte_end":432086,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ If the number of elements yielded by `b` is less than the number of elements yielded by `a`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432087,"byte_end":432183,"line_start":173,"line_end":173,"column_start":1,"column_end":97}},{"value":"/ the number of `b` elements yielded will be returned as `IterDiff::Shorter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432184,"byte_end":432263,"line_start":174,"line_end":174,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432264,"byte_end":432267,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ If the two elements of a step differ, the index of those elements along with the remaining","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432268,"byte_end":432362,"line_start":176,"line_end":176,"column_start":1,"column_end":95}},{"value":"/ elements are returned as `IterDiff::FirstMismatch`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432363,"byte_end":432418,"line_start":177,"line_end":177,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432419,"byte_end":432422,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ If `a` becomes exhausted before `b` becomes exhausted, the remaining `b` elements will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432423,"byte_end":432516,"line_start":179,"line_end":179,"column_start":1,"column_end":94}},{"value":"/ returned as `IterDiff::Longer`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432517,"byte_end":432552,"line_start":180,"line_end":180,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432553,"byte_end":432556,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This function is useful when comparing a non-`Clone` `Iterator` of elements to some existing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432557,"byte_end":432653,"line_start":182,"line_end":182,"column_start":1,"column_end":97}},{"value":"/ collection. If there is any difference between the elements yielded by the iterator and those","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432654,"byte_end":432751,"line_start":183,"line_end":183,"column_start":1,"column_end":98}},{"value":"/ of the collection, a suitable `IterDiff` is returned so that the existing collection may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432752,"byte_end":432847,"line_start":184,"line_end":184,"column_start":1,"column_end":96}},{"value":"/ updated with the difference using elements from the very same iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":432848,"byte_end":432923,"line_start":185,"line_end":185,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":433731,"byte_end":433749,"line_start":207,"line_end":207,"column_start":8,"column_end":26},"name":"write_if_different","qualname":"::utils::write_if_different","value":"fn <T, I> (elems: &[T], new_elems: I) -> Cow<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.","sig":null,"attributes":[{"value":"/ Returns `Borrowed` `elems` if `elems` contains the same elements as yielded by `new_elems`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":433503,"byte_end":433598,"line_start":203,"line_end":203,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":433599,"byte_end":433602,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ Allocates a new `Vec<T>` and returns `Owned` if either the number of elements or the elements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":433603,"byte_end":433700,"line_start":205,"line_end":205,"column_start":1,"column_end":98}},{"value":"/ themselves differ.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":433701,"byte_end":433723,"line_start":206,"line_end":206,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":1699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":434420,"byte_end":434427,"line_start":223,"line_end":223,"column_start":8,"column_end":15},"name":"iter_eq","qualname":"::utils::iter_eq","value":"fn <A, B> (mut a: A, mut b: B) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares two iterators to see if they yield the same thing.\n","sig":null,"attributes":[{"value":"/ Compares two iterators to see if they yield the same thing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/utils.rs","byte_start":434349,"byte_end":434412,"line_start":222,"line_end":222,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":1702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"widget","qualname":"::widget","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","parent":null,"children":[{"krate":0,"index":1703},{"krate":0,"index":1706},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1731},{"krate":0,"index":1734},{"krate":0,"index":1737},{"krate":0,"index":1740},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1749},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1782},{"krate":0,"index":1806},{"krate":0,"index":1845},{"krate":0,"index":2395},{"krate":0,"index":2433},{"krate":0,"index":2514},{"krate":0,"index":2589},{"krate":0,"index":2636},{"krate":0,"index":2707},{"krate":0,"index":2799},{"krate":0,"index":2913},{"krate":0,"index":2963},{"krate":0,"index":3172},{"krate":0,"index":3301},{"krate":0,"index":3345},{"krate":0,"index":3670},{"krate":0,"index":3734},{"krate":0,"index":3775},{"krate":0,"index":3836},{"krate":0,"index":3883},{"krate":0,"index":3956},{"krate":0,"index":4014},{"krate":0,"index":4110},{"krate":0,"index":4148},{"krate":0,"index":4231},{"krate":0,"index":4279},{"krate":0,"index":4319},{"krate":0,"index":4371},{"krate":0,"index":4384},{"krate":0,"index":9148},{"krate":0,"index":9159},{"krate":0,"index":9157},{"krate":0,"index":9155},{"krate":0,"index":9151},{"krate":0,"index":9152},{"krate":0,"index":9160},{"krate":0,"index":9176},{"krate":0,"index":9174},{"krate":0,"index":9172},{"krate":0,"index":9168},{"krate":0,"index":9169},{"krate":0,"index":4391},{"krate":0,"index":9177},{"krate":0,"index":9187},{"krate":0,"index":9185},{"krate":0,"index":9183},{"krate":0,"index":9179},{"krate":0,"index":9180},{"krate":0,"index":9188},{"krate":0,"index":9200},{"krate":0,"index":9199},{"krate":0,"index":9197},{"krate":0,"index":9202},{"krate":0,"index":9217},{"krate":0,"index":9216},{"krate":0,"index":9214},{"krate":0,"index":9212},{"krate":0,"index":9208},{"krate":0,"index":9209},{"krate":0,"index":4394},{"krate":0,"index":9219},{"krate":0,"index":9235},{"krate":0,"index":9233},{"krate":0,"index":9231},{"krate":0,"index":9227},{"krate":0,"index":9228},{"krate":0,"index":4399},{"krate":0,"index":4415},{"krate":0,"index":9236},{"krate":0,"index":9245},{"krate":0,"index":9243},{"krate":0,"index":4421},{"krate":0,"index":4423},{"krate":0,"index":4425},{"krate":0,"index":4426},{"krate":0,"index":4427},{"krate":0,"index":4428},{"krate":0,"index":4430},{"krate":0,"index":4436},{"krate":0,"index":4439},{"krate":0,"index":4442},{"krate":0,"index":4445},{"krate":0,"index":4482},{"krate":0,"index":4506},{"krate":0,"index":4511},{"krate":0,"index":4516},{"krate":0,"index":4518},{"krate":0,"index":4531},{"krate":0,"index":4532}],"decl_id":null,"docs":" Widgets are the core building blocks for every conrod user interface.","sig":null,"attributes":[{"value":"! Widgets are the core building blocks for every conrod user interface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436363,"byte_end":436436,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436437,"byte_end":436440,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains items related to the implementation of the `Widget` trait. It also","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436441,"byte_end":436532,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"! re-exports all widgets (and their modules) that are provided by conrod.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":436533,"byte_end":436608,"line_start":4,"line_end":4,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"id","qualname":"::widget::id","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","parent":null,"children":[{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":5973},{"krate":0,"index":5985},{"krate":0,"index":5983},{"krate":0,"index":5979},{"krate":0,"index":5980},{"krate":0,"index":5976},{"krate":0,"index":5977},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1796},{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1805}],"decl_id":null,"docs":" The widget identifier type used throughout conrod, along with helper types and macros to\n simplify the process of generating them.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438336,"byte_end":438348,"line_start":57,"line_end":57,"column_start":1,"column_end":13}},{"value":"! The widget identifier type used throughout conrod, along with helper types and macros to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":498950,"byte_end":499042,"line_start":1,"line_end":1,"column_start":1,"column_end":93}},{"value":"! simplify the process of generating them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499043,"byte_end":499087,"line_start":2,"line_end":2,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1786},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499561,"byte_end":499563,"line_start":17,"line_end":17,"column_start":10,"column_end":12},"name":"Id","qualname":"::widget::id::Id","value":"daggy::NodeIndex<u32>","parent":null,"children":[],"decl_id":null,"docs":" Unique widget identifier.","sig":null,"attributes":[{"value":"/ Unique widget identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499128,"byte_end":499157,"line_start":8,"line_end":8,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499158,"byte_end":499161,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Each widget instance must use its own, uniquely generated `widget::Id` so that it's state can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499162,"byte_end":499259,"line_start":10,"line_end":10,"column_start":1,"column_end":98}},{"value":"/ be cached within the `Ui` type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499260,"byte_end":499295,"line_start":11,"line_end":11,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499296,"byte_end":499299,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Indices are generated consecutively from `0`. This allows us to avoid the need for hashing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499300,"byte_end":499394,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ identifiers in favour of indexing directly into the `Graph`'s underlying node array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499395,"byte_end":499483,"line_start":14,"line_end":14,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499484,"byte_end":499487,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `widget::Id`s may be generated via the `widget_ids!` macro.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499488,"byte_end":499551,"line_start":16,"line_end":16,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499829,"byte_end":499838,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"Generator","qualname":"::widget::id::Generator","value":"Generator {  }","parent":null,"children":[{"krate":0,"index":1789}],"decl_id":null,"docs":" Used for generating new unique `widget::Id`s.","sig":null,"attributes":[{"value":"/ Used for generating new unique `widget::Id`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499590,"byte_end":499639,"line_start":19,"line_end":19,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499640,"byte_end":499643,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `Generator` is used by the `widget_ids!` macro and the types and fields that it generates in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499644,"byte_end":499740,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ order to generate unique `widget::Id`s for each of the generated fields.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499741,"byte_end":499817,"line_start":22,"line_end":22,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":5973},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499972,"byte_end":499976,"line_start":27,"line_end":27,"column_start":12,"column_end":16},"name":"List","qualname":"::widget::id::List","value":"","parent":null,"children":[],"decl_id":null,"docs":" A list of lazily generated `widget::Id`s.\n","sig":null,"attributes":[{"value":"/ A list of lazily generated `widget::Id`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499876,"byte_end":499921,"line_start":25,"line_end":25,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1790},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500100,"byte_end":500108,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"ListWalk","qualname":"::widget::id::ListWalk","value":"ListWalk {  }","parent":null,"children":[{"krate":0,"index":1791}],"decl_id":null,"docs":" An iterator-like type for producing indices from a `List`.\n","sig":null,"attributes":[{"value":"/ An iterator-like type for producing indices from a `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":499987,"byte_end":500049,"line_start":28,"line_end":28,"column_start":1,"column_end":63}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500050,"byte_end":500088,"line_start":29,"line_end":29,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500215,"byte_end":500218,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Generator>::new","value":"fn (widget_graph: &'a mut Graph) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor for a new `widget::Id` generator.\n","sig":null,"attributes":[{"value":"/ Constructor for a new `widget::Id` generator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500154,"byte_end":500203,"line_start":35,"line_end":35,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500821,"byte_end":500825,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"next","qualname":"<Generator>::next","value":"fn (&mut self) -> Id","parent":null,"children":[],"decl_id":null,"docs":" Generate a new, unique `widget::Id` into a Placeholder node within the widget graph. This\n should only be called once for each unique widget needed to avoid unnecessary bloat within\n the `Ui`'s widget graph.","sig":null,"attributes":[{"value":"/ Generate a new, unique `widget::Id` into a Placeholder node within the widget graph. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500339,"byte_end":500432,"line_start":42,"line_end":42,"column_start":5,"column_end":98}},{"value":"/ should only be called once for each unique widget needed to avoid unnecessary bloat within","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500437,"byte_end":500531,"line_start":43,"line_end":43,"column_start":5,"column_end":99}},{"value":"/ the `Ui`'s widget graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500536,"byte_end":500564,"line_start":44,"line_end":44,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500569,"byte_end":500572,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ When using this method, be sure to store the returned `widget::Id` somewhere so that it can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500577,"byte_end":500672,"line_start":46,"line_end":46,"column_start":5,"column_end":100}},{"value":"/ be re-used on next update.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500677,"byte_end":500707,"line_start":47,"line_end":47,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500712,"byte_end":500715,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ **Panics** if adding another node would exceed the maximum capacity for node indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500720,"byte_end":500809,"line_start":49,"line_end":49,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500972,"byte_end":500975,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<List>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a cache for multiple indices.\n","sig":null,"attributes":[{"value":"/ Construct a cache for multiple indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500917,"byte_end":500960,"line_start":59,"line_end":59,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501092,"byte_end":501096,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"walk","qualname":"<List>::walk","value":"fn (&self) -> ListWalk","parent":null,"children":[],"decl_id":null,"docs":" Produce a walker for producing the `List`'s indices.\n","sig":null,"attributes":[{"value":"/ Produce a walker for producing the `List`'s indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501024,"byte_end":501080,"line_start":64,"line_end":64,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501315,"byte_end":501321,"line_start":71,"line_end":71,"column_start":12,"column_end":18},"name":"resize","qualname":"<List>::resize","value":"fn (&mut self, target_len: usize, id_generator: &mut Generator) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `List`'s inner `Vec` to the given target length, using the given `UiCell` to\n generate new unique `widget::Id`s if necessary.\n","sig":null,"attributes":[{"value":"/ Resizes the `List`'s inner `Vec` to the given target length, using the given `UiCell` to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501155,"byte_end":501247,"line_start":69,"line_end":69,"column_start":5,"column_end":97}},{"value":"/ generate new unique `widget::Id`s if necessary.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501252,"byte_end":501303,"line_start":70,"line_end":70,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501884,"byte_end":501888,"line_start":95,"line_end":95,"column_start":12,"column_end":16},"name":"next","qualname":"<ListWalk>::next","value":"fn (&mut self, &mut List(ref mut ids): &mut List, id_gen: &mut Generator) -> Id","parent":null,"children":[],"decl_id":null,"docs":" Yield the next index, generating one if it does not yet exist.\n","sig":null,"attributes":[{"value":"/ Yield the next index, generating one if it does not yet exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501806,"byte_end":501872,"line_start":94,"line_end":94,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1806},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scroll","qualname":"::widget::scroll","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","parent":null,"children":[{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1815},{"krate":0,"index":5987},{"krate":0,"index":5997},{"krate":0,"index":5995},{"krate":0,"index":5993},{"krate":0,"index":5989},{"krate":0,"index":5990},{"krate":0,"index":5998},{"krate":0,"index":6017},{"krate":0,"index":6014},{"krate":0,"index":6011},{"krate":0,"index":6005},{"krate":0,"index":6007},{"krate":0,"index":1816},{"krate":0,"index":6019},{"krate":0,"index":6027},{"krate":0,"index":6025},{"krate":0,"index":6023},{"krate":0,"index":6020},{"krate":0,"index":6021},{"krate":0,"index":6028},{"krate":0,"index":6036},{"krate":0,"index":6034},{"krate":0,"index":6032},{"krate":0,"index":6029},{"krate":0,"index":6030},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1833},{"krate":0,"index":1839}],"decl_id":null,"docs":" Scroll related types and logic.\n","sig":null,"attributes":[{"value":"! Scroll related types and logic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":510755,"byte_end":510790,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5987},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511051,"byte_end":511057,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Scroll","qualname":"::widget::scroll::Scroll","value":"Scroll {  }","parent":null,"children":[{"krate":0,"index":5988}],"decl_id":null,"docs":" Arguments given via a scrollable `Widget`'s builder methods for the scrolling along a single\n axis.\n","sig":null,"attributes":[{"value":"/ Arguments given via a scrollable `Widget`'s builder methods for the scrolling along a single","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":510892,"byte_end":510988,"line_start":8,"line_end":8,"column_start":1,"column_end":97}},{"value":"/ axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":510989,"byte_end":510998,"line_start":9,"line_end":9,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":5998},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511206,"byte_end":511211,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::scroll::State","value":"State { offset, offset_bounds, scrollable_range_len, is_scrolling }","parent":null,"children":[{"krate":0,"index":6000},{"krate":0,"index":6001},{"krate":0,"index":6002},{"krate":0,"index":6003},{"krate":0,"index":6004}],"decl_id":null,"docs":" Scroll state calculated for a single axis.\n","sig":null,"attributes":[{"value":"/ Scroll state calculated for a single axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511107,"byte_end":511153,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6000},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511484,"byte_end":511490,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"offset","qualname":"::widget::scroll::State::offset","value":"f64","parent":{"krate":0,"index":5998},"children":[],"decl_id":null,"docs":" The distance that has been scrolled from the origin.","sig":null,"attributes":[{"value":"/ The distance that has been scrolled from the origin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511221,"byte_end":511277,"line_start":18,"line_end":18,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511282,"byte_end":511285,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ A positive offset pushes the scrollable range that is under the kid_area upwards.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511290,"byte_end":511375,"line_start":20,"line_end":20,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511380,"byte_end":511383,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ A negative offset pushes the scrollable range that is under the kid_area downwards.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511388,"byte_end":511475,"line_start":22,"line_end":22,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":6001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511572,"byte_end":511585,"line_start":25,"line_end":25,"column_start":9,"column_end":22},"name":"offset_bounds","qualname":"::widget::scroll::State::offset_bounds","value":"position::range::Range","parent":{"krate":0,"index":5998},"children":[],"decl_id":null,"docs":" The start and end bounds for the offset along the axis.\n","sig":null,"attributes":[{"value":"/ The start and end bounds for the offset along the axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511504,"byte_end":511563,"line_start":24,"line_end":24,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":6002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511856,"byte_end":511876,"line_start":30,"line_end":30,"column_start":9,"column_end":29},"name":"scrollable_range_len","qualname":"::widget::scroll::State::scrollable_range_len","value":"f64","parent":{"krate":0,"index":5998},"children":[],"decl_id":null,"docs":" The total range which may be \"offset\" from the \"root\" range (aka the `kid_area`).","sig":null,"attributes":[{"value":"/ The total range which may be \"offset\" from the \"root\" range (aka the `kid_area`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511598,"byte_end":511683,"line_start":26,"line_end":26,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511688,"byte_end":511691,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ The `scrollable_range` is determined as the bounding range around both the `kid_area` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511696,"byte_end":511789,"line_start":28,"line_end":28,"column_start":5,"column_end":98}},{"value":"/ all **un-scrolled** **visible** children widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511794,"byte_end":511847,"line_start":29,"line_end":29,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":6003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511955,"byte_end":511967,"line_start":32,"line_end":32,"column_start":9,"column_end":21},"name":"is_scrolling","qualname":"::widget::scroll::State::is_scrolling","value":"bool","parent":{"krate":0,"index":5998},"children":[],"decl_id":null,"docs":" Whether or not the this axis is currently scrolling.\n","sig":null,"attributes":[{"value":"/ Whether or not the this axis is currently scrolling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":511890,"byte_end":511946,"line_start":31,"line_end":31,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":1816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512151,"byte_end":512155,"line_start":38,"line_end":38,"column_start":11,"column_end":15},"name":"Axis","qualname":"::widget::scroll::Axis","value":"Axis","parent":null,"children":[{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821}],"decl_id":null,"docs":" Methods for distinguishing behaviour between both scroll axes at compile-time.\n","sig":null,"attributes":[{"value":"/ Methods for distinguishing behaviour between both scroll axes at compile-time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512058,"byte_end":512140,"line_start":37,"line_end":37,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512238,"byte_end":512252,"line_start":40,"line_end":40,"column_start":8,"column_end":22},"name":"parallel_range","qualname":"::widget::scroll::Axis::parallel_range","value":"fn (Rect) -> Range","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":" The range of the given `Rect` that is parallel with this `Axis`.\n","sig":null,"attributes":[{"value":"/ The range of the given `Rect` that is parallel with this `Axis`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512162,"byte_end":512230,"line_start":39,"line_end":39,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512354,"byte_end":512373,"line_start":42,"line_end":42,"column_start":8,"column_end":27},"name":"perpendicular_range","qualname":"::widget::scroll::Axis::perpendicular_range","value":"fn (Rect) -> Range","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":" The range of the given `Rect` that is perpendicular with this `Axis`.\n","sig":null,"attributes":[{"value":"/ The range of the given `Rect` that is perpendicular with this `Axis`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512273,"byte_end":512346,"line_start":41,"line_end":41,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512493,"byte_end":512506,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"padding_range","qualname":"::widget::scroll::Axis::padding_range","value":"fn (Padding) -> Range","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":" Given some rectangular `Padding`, return the `Range` that corresponds with this `Axis`.\n","sig":null,"attributes":[{"value":"/ Given some rectangular `Padding`, return the `Range` that corresponds with this `Axis`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512394,"byte_end":512485,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512619,"byte_end":512631,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"mouse_scalar","qualname":"::widget::scroll::Axis::mouse_scalar","value":"fn (mouse_xy: Point) -> Scalar","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":" The coordinate of the given mouse position that corresponds with this `Axis`.\n","sig":null,"attributes":[{"value":"/ The coordinate of the given mouse position that corresponds with this `Axis`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512530,"byte_end":512611,"line_start":45,"line_end":45,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512812,"byte_end":512828,"line_start":49,"line_end":49,"column_start":8,"column_end":24},"name":"offset_direction","qualname":"::widget::scroll::Axis::offset_direction","value":"fn () -> Scalar","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":" A `Scalar` multiplier representing the direction in which positive offset shifts the\n `scrollable_range` (either `-1.0` or `1.0).\n","sig":null,"attributes":[{"value":"/ A `Scalar` multiplier representing the direction in which positive offset shifts the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512664,"byte_end":512752,"line_start":47,"line_end":47,"column_start":5,"column_end":93}},{"value":"/ `scrollable_range` (either `-1.0` or `1.0).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512757,"byte_end":512804,"line_start":48,"line_end":48,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":6019},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512944,"byte_end":512945,"line_start":54,"line_end":54,"column_start":10,"column_end":11},"name":"X","qualname":"::widget::scroll::X","value":"X::{}","parent":null,"children":[],"decl_id":null,"docs":" Behaviour for scrolling across the `X` axis.\n","sig":null,"attributes":[{"value":"/ Behaviour for scrolling across the `X` axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512845,"byte_end":512893,"line_start":52,"line_end":52,"column_start":1,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":6028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513049,"byte_end":513050,"line_start":58,"line_end":58,"column_start":10,"column_end":11},"name":"Y","qualname":"::widget::scroll::Y","value":"Y::{}","parent":null,"children":[],"decl_id":null,"docs":" Behaviour for scrolling across the `Y` axis.\n","sig":null,"attributes":[{"value":"/ Behaviour for scrolling across the `Y` axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":512950,"byte_end":512998,"line_start":56,"line_end":56,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513110,"byte_end":513116,"line_start":61,"line_end":61,"column_start":10,"column_end":16},"name":"StateX","qualname":"::widget::scroll::StateX","value":"State<X>","parent":null,"children":[],"decl_id":null,"docs":" State for scrolling along the **X** axis.\n","sig":null,"attributes":[{"value":"/ State for scrolling along the **X** axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513055,"byte_end":513100,"line_start":60,"line_end":60,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1823},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513185,"byte_end":513191,"line_start":64,"line_end":64,"column_start":10,"column_end":16},"name":"StateY","qualname":"::widget::scroll::StateY","value":"State<Y>","parent":null,"children":[],"decl_id":null,"docs":" State for scrolling along the **Y** axis.\n","sig":null,"attributes":[{"value":"/ State for scrolling along the **Y** axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513130,"byte_end":513175,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513266,"byte_end":513269,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<Scroll>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" The default `Scroll` args.\n","sig":null,"attributes":[{"value":"/ The default `Scroll` args.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513224,"byte_end":513254,"line_start":68,"line_end":68,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516349,"byte_end":516355,"line_start":157,"line_end":157,"column_start":12,"column_end":18},"name":"update","qualname":"<State<A>>::update","value":"fn (ui: &Ui, idx: super::Id, kid_area: &super::KidArea, maybe_prev_scroll_state: Option<Self>, additional_offset: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the new scroll state for the single axis of a `Widget`.","sig":null,"attributes":[{"value":"/ Calculate the new scroll state for the single axis of a `Widget`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513404,"byte_end":513473,"line_start":81,"line_end":81,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513478,"byte_end":513481,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```txt","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513486,"byte_end":513496,"line_start":83,"line_end":83,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513501,"byte_end":513504,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/           >     +---+","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513509,"byte_end":513534,"line_start":85,"line_end":85,"column_start":5,"column_end":30}},{"value":"/           |     |   |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513539,"byte_end":513564,"line_start":86,"line_end":86,"column_start":5,"column_end":30}},{"value":"/           |   =========================","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513569,"byte_end":513612,"line_start":87,"line_end":87,"column_start":5,"column_end":48}},{"value":"/           |   | | a | scroll root     |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513617,"byte_end":513660,"line_start":88,"line_end":88,"column_start":5,"column_end":48}},{"value":"/           |   | +---+ aka `kid_area`  |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513665,"byte_end":513708,"line_start":89,"line_end":89,"column_start":5,"column_end":48}},{"value":"/           |   |            +--------+ |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513713,"byte_end":513756,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/           |   |            |        | |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513761,"byte_end":513804,"line_start":91,"line_end":91,"column_start":5,"column_end":48}},{"value":"/           |   =========================","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513809,"byte_end":513852,"line_start":92,"line_end":92,"column_start":5,"column_end":48}},{"value":"/           |                |   b    |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513857,"byte_end":513898,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/           |                +--------+","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513903,"byte_end":513944,"line_start":94,"line_end":94,"column_start":5,"column_end":46}},{"value":"/ scrollable|    +--------+","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513949,"byte_end":513978,"line_start":95,"line_end":95,"column_start":5,"column_end":34}},{"value":"/    range y|    |        |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513983,"byte_end":514012,"line_start":96,"line_end":96,"column_start":5,"column_end":34}},{"value":"/           |    |        | +------+","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514017,"byte_end":514055,"line_start":97,"line_end":97,"column_start":5,"column_end":43}},{"value":"/           |    |    c   | |      |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514060,"byte_end":514098,"line_start":98,"line_end":98,"column_start":5,"column_end":43}},{"value":"/           |    +--------+ |  d   |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514103,"byte_end":514141,"line_start":99,"line_end":99,"column_start":5,"column_end":43}},{"value":"/           |               |      |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514146,"byte_end":514184,"line_start":100,"line_end":100,"column_start":5,"column_end":43}},{"value":"/           >               +------+","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514189,"byte_end":514227,"line_start":101,"line_end":101,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514232,"byte_end":514235,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/                ^--------------------^","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514240,"byte_end":514281,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/                     scrollable","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514286,"byte_end":514320,"line_start":104,"line_end":104,"column_start":5,"column_end":39}},{"value":"/                      range x","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514325,"byte_end":514357,"line_start":105,"line_end":105,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514362,"byte_end":514365,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514370,"byte_end":514377,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514382,"byte_end":514385,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ - `kid_area` is the cropped area of the container widget in which kid widgets may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514390,"byte_end":514478,"line_start":109,"line_end":109,"column_start":5,"column_end":93}},{"value":"/ viewed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514483,"byte_end":514494,"line_start":110,"line_end":110,"column_start":5,"column_end":16}},{"value":"/ - `a`, `b`, `c` and `d` are widgets that are kids of the \"scroll root\" widget in their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514499,"byte_end":514589,"line_start":111,"line_end":111,"column_start":5,"column_end":95}},{"value":"/ original, un-scrolled positions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514594,"byte_end":514630,"line_start":112,"line_end":112,"column_start":5,"column_end":41}},{"value":"/ - `scrollable_range` is the total range occuppied by all children widgets in their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514635,"byte_end":514721,"line_start":113,"line_end":113,"column_start":5,"column_end":91}},{"value":"/ original, un-scrolled positions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514726,"byte_end":514762,"line_start":114,"line_end":114,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514767,"byte_end":514770,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Everything above and below the set of ==== bars of the parent widget is hidden, i.e:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514775,"byte_end":514863,"line_start":116,"line_end":116,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514868,"byte_end":514871,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```txt","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514876,"byte_end":514886,"line_start":118,"line_end":118,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514891,"byte_end":514894,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ =========================","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514899,"byte_end":514928,"line_start":120,"line_end":120,"column_start":5,"column_end":34}},{"value":"/ | | a | scroll root     |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514933,"byte_end":514962,"line_start":121,"line_end":121,"column_start":5,"column_end":34}},{"value":"/ | +---+ aka `kid_area`  |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":514967,"byte_end":514996,"line_start":122,"line_end":122,"column_start":5,"column_end":34}},{"value":"/ |            +--------+ |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515001,"byte_end":515030,"line_start":123,"line_end":123,"column_start":5,"column_end":34}},{"value":"/ |            |   b    | |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515035,"byte_end":515064,"line_start":124,"line_end":124,"column_start":5,"column_end":34}},{"value":"/ =========================","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515069,"byte_end":515098,"line_start":125,"line_end":125,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515103,"byte_end":515106,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515111,"byte_end":515118,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515123,"byte_end":515126,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ The `scrollable_range` on each axis only becomes scrollable if its length exceeds the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515131,"byte_end":515220,"line_start":129,"line_end":129,"column_start":5,"column_end":94}},{"value":"/ length of the `kid_area` on the same axis. Thus, in the above example, only the *y*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515225,"byte_end":515312,"line_start":130,"line_end":130,"column_start":5,"column_end":92}},{"value":"/ scrollable_range is scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515317,"byte_end":515352,"line_start":131,"line_end":131,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515357,"byte_end":515360,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ The `offset_bounds` are calculated as the amount which the original, un-scrolled,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515365,"byte_end":515450,"line_start":133,"line_end":133,"column_start":5,"column_end":90}},{"value":"/ `scrollable_range` may be offset from its origin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515455,"byte_end":515508,"line_start":134,"line_end":134,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515513,"byte_end":515516,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ ```txt","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515521,"byte_end":515531,"line_start":136,"line_end":136,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515536,"byte_end":515539,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/   offset +              >","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515544,"byte_end":515573,"line_start":138,"line_end":138,"column_start":5,"column_end":34}},{"value":"/   bounds v              |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515578,"byte_end":515607,"line_start":139,"line_end":139,"column_start":5,"column_end":34}},{"value":"/   .start >              |   =========================","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515612,"byte_end":515669,"line_start":140,"line_end":140,"column_start":5,"column_end":62}},{"value":"/                         |   |                       |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515674,"byte_end":515731,"line_start":141,"line_end":141,"column_start":5,"column_end":62}},{"value":"/                         |   |        kid_area       |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515736,"byte_end":515793,"line_start":142,"line_end":142,"column_start":5,"column_end":62}},{"value":"/                         |   |                       |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515798,"byte_end":515855,"line_start":143,"line_end":143,"column_start":5,"column_end":62}},{"value":"/                         |   |                       |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515860,"byte_end":515917,"line_start":144,"line_end":144,"column_start":5,"column_end":62}},{"value":"/          >   scrollable |   =========================","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515922,"byte_end":515979,"line_start":145,"line_end":145,"column_start":5,"column_end":62}},{"value":"/          ^      range y |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":515984,"byte_end":516013,"line_start":146,"line_end":146,"column_start":5,"column_end":34}},{"value":"/          ^              |    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516018,"byte_end":516051,"line_start":147,"line_end":147,"column_start":5,"column_end":38}},{"value":"/          ^              |    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516056,"byte_end":516089,"line_start":148,"line_end":148,"column_start":5,"column_end":38}},{"value":"/   offset ^              |    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516094,"byte_end":516127,"line_start":149,"line_end":149,"column_start":5,"column_end":38}},{"value":"/   bounds ^              |    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516132,"byte_end":516165,"line_start":150,"line_end":150,"column_start":5,"column_end":38}},{"value":"/     .end ^              |    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516170,"byte_end":516203,"line_start":151,"line_end":151,"column_start":5,"column_end":38}},{"value":"/          ^              |    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516208,"byte_end":516241,"line_start":152,"line_end":152,"column_start":5,"column_end":38}},{"value":"/          ^              |    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516246,"byte_end":516279,"line_start":153,"line_end":153,"column_start":5,"column_end":38}},{"value":"/          +              >    ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516284,"byte_end":516317,"line_start":154,"line_end":154,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516322,"byte_end":516325,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":516330,"byte_end":516337,"line_start":156,"line_end":156,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":1845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"primitive","qualname":"::widget::primitive","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1923},{"krate":0,"index":1947},{"krate":0,"index":2011},{"krate":0,"index":2340},{"krate":0,"index":2387},{"krate":0,"index":2391}],"decl_id":null,"docs":" Primitive widgets are special in that they are built into conrod's `render`ing logic.","sig":null,"attributes":[{"value":"! Primitive widgets are special in that they are built into conrod's `render`ing logic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520136,"byte_end":520225,"line_start":1,"line_end":1,"column_start":1,"column_end":90}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520226,"byte_end":520229,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! By providing a set of foundational graphics widgets, we avoid the need for other widgets to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520230,"byte_end":520325,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"! define their own methods for rendering. Instead, conrod graphics backends only need to define","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520326,"byte_end":520423,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"! rendering methods for a small set of primitives.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520424,"byte_end":520476,"line_start":5,"line_end":5,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1846},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"line","qualname":"::widget::primitive::line","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","parent":null,"children":[{"krate":0,"index":1847},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":6037},{"krate":0,"index":6051},{"krate":0,"index":6049},{"krate":0,"index":6047},{"krate":0,"index":6043},{"krate":0,"index":6052},{"krate":0,"index":6063},{"krate":0,"index":6061},{"krate":0,"index":6059},{"krate":0,"index":6055},{"krate":0,"index":6056},{"krate":0,"index":6064},{"krate":0,"index":6077},{"krate":0,"index":6075},{"krate":0,"index":6073},{"krate":0,"index":6069},{"krate":0,"index":6070},{"krate":0,"index":6078},{"krate":0,"index":6092},{"krate":0,"index":6090},{"krate":0,"index":6088},{"krate":0,"index":6085},{"krate":0,"index":6086},{"krate":0,"index":6093},{"krate":0,"index":6105},{"krate":0,"index":6103},{"krate":0,"index":6101},{"krate":0,"index":6098},{"krate":0,"index":6099},{"krate":0,"index":1864},{"krate":0,"index":1875},{"krate":0,"index":1903},{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1920}],"decl_id":null,"docs":" A simple, non-interactive widget for drawing a single straight Line.\n","sig":null,"attributes":[{"value":"! A simple, non-interactive widget for drawing a single straight Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521053,"byte_end":521125,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":6037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521439,"byte_end":521443,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Line","qualname":"::widget::primitive::line::Line","value":"Line { common, start, end, style, should_centre_points }","parent":null,"children":[{"krate":0,"index":6042},{"krate":0,"index":6038},{"krate":0,"index":6039},{"krate":0,"index":6040},{"krate":0,"index":6041}],"decl_id":null,"docs":" A simple, non-interactive widget for drawing a single straight Line.\n","sig":null,"attributes":[{"value":"/ A simple, non-interactive widget for drawing a single straight Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521310,"byte_end":521382,"line_start":10,"line_end":10,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":6042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521548,"byte_end":521554,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::line::Line::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6037},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521450,"byte_end":521509,"line_start":13,"line_end":13,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521514,"byte_end":521539,"line_start":14,"line_end":14,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521618,"byte_end":521623,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"name":"start","qualname":"::widget::primitive::line::Line::start","value":"[f64; 2]","parent":{"krate":0,"index":6037},"children":[],"decl_id":null,"docs":" The start of the line.\n","sig":null,"attributes":[{"value":"/ The start of the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521583,"byte_end":521609,"line_start":16,"line_end":16,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521669,"byte_end":521672,"line_start":19,"line_end":19,"column_start":9,"column_end":12},"name":"end","qualname":"::widget::primitive::line::Line::end","value":"[f64; 2]","parent":{"krate":0,"index":6037},"children":[],"decl_id":null,"docs":" The end of the line.\n","sig":null,"attributes":[{"value":"/ The end of the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521636,"byte_end":521660,"line_start":18,"line_end":18,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":6040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521713,"byte_end":521718,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::line::Line::style","value":"widget::primitive::line::Style","parent":{"krate":0,"index":6037},"children":[],"decl_id":null,"docs":" Unique styling.\n","sig":null,"attributes":[{"value":"/ Unique styling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521685,"byte_end":521704,"line_start":20,"line_end":20,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":6041},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521823,"byte_end":521843,"line_start":23,"line_end":23,"column_start":9,"column_end":29},"name":"should_centre_points","qualname":"::widget::primitive::line::Line::should_centre_points","value":"bool","parent":{"krate":0,"index":6037},"children":[],"decl_id":null,"docs":" Whether or not the line should be automatically centred to the widget position.\n","sig":null,"attributes":[{"value":"/ Whether or not the line should be automatically centred to the widget position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521731,"byte_end":521814,"line_start":22,"line_end":22,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":6052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521944,"byte_end":521949,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::line::State","value":"State { start, end }","parent":null,"children":[{"krate":0,"index":6053},{"krate":0,"index":6054}],"decl_id":null,"docs":" Unique state for the Line widget.\n","sig":null,"attributes":[{"value":"/ Unique state for the Line widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521854,"byte_end":521891,"line_start":26,"line_end":26,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":6053},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521991,"byte_end":521996,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"name":"start","qualname":"::widget::primitive::line::State::start","value":"[f64; 2]","parent":{"krate":0,"index":6052},"children":[],"decl_id":null,"docs":" The start of the line.\n","sig":null,"attributes":[{"value":"/ The start of the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":521956,"byte_end":521982,"line_start":29,"line_end":29,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522042,"byte_end":522045,"line_start":32,"line_end":32,"column_start":9,"column_end":12},"name":"end","qualname":"::widget::primitive::line::State::end","value":"[f64; 2]","parent":{"krate":0,"index":6052},"children":[],"decl_id":null,"docs":" The end of the line.\n","sig":null,"attributes":[{"value":"/ The end of the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522009,"byte_end":522033,"line_start":31,"line_end":31,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":6064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522147,"byte_end":522152,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::primitive::line::Style","value":"Style { maybe_pattern, maybe_color, maybe_thickness, maybe_cap }","parent":null,"children":[{"krate":0,"index":6065},{"krate":0,"index":6066},{"krate":0,"index":6067},{"krate":0,"index":6068}],"decl_id":null,"docs":" Unique styling for a Line widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for a Line widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522057,"byte_end":522094,"line_start":35,"line_end":35,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":6065},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522196,"byte_end":522209,"line_start":39,"line_end":39,"column_start":9,"column_end":22},"name":"maybe_pattern","qualname":"::widget::primitive::line::Style::maybe_pattern","value":"std::option::Option<widget::primitive::line::Pattern>","parent":{"krate":0,"index":6064},"children":[],"decl_id":null,"docs":" The patter for the line.\n","sig":null,"attributes":[{"value":"/ The patter for the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522159,"byte_end":522187,"line_start":38,"line_end":38,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":6066},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522282,"byte_end":522293,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"name":"maybe_color","qualname":"::widget::primitive::line::Style::maybe_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6064},"children":[],"decl_id":null,"docs":" Color of the Button's pressable area.\n","sig":null,"attributes":[{"value":"/ Color of the Button's pressable area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522232,"byte_end":522273,"line_start":40,"line_end":40,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6067},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522353,"byte_end":522368,"line_start":43,"line_end":43,"column_start":9,"column_end":24},"name":"maybe_thickness","qualname":"::widget::primitive::line::Style::maybe_thickness","value":"std::option::Option<f64>","parent":{"krate":0,"index":6064},"children":[],"decl_id":null,"docs":" The thickness of the line.\n","sig":null,"attributes":[{"value":"/ The thickness of the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522314,"byte_end":522344,"line_start":42,"line_end":42,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6068},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522455,"byte_end":522464,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"name":"maybe_cap","qualname":"::widget::primitive::line::Style::maybe_cap","value":"std::option::Option<widget::primitive::line::Cap>","parent":{"krate":0,"index":6064},"children":[],"decl_id":null,"docs":" The style with which the ends of the line are drawn.\n","sig":null,"attributes":[{"value":"/ The style with which the ends of the line are drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522390,"byte_end":522446,"line_start":44,"line_end":44,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6079},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522621,"byte_end":522626,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Solid","qualname":"::widget::primitive::line::Pattern::Solid","value":"Pattern::Solid","parent":{"krate":0,"index":6078},"children":[],"decl_id":null,"docs":" A single continuous stroke.\n","sig":null,"attributes":[{"value":"/ A single continuous stroke.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522585,"byte_end":522616,"line_start":51,"line_end":51,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522666,"byte_end":522672,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Dashed","qualname":"::widget::primitive::line::Pattern::Dashed","value":"Pattern::Dashed","parent":{"krate":0,"index":6078},"children":[],"decl_id":null,"docs":" A series of line strokes.\n","sig":null,"attributes":[{"value":"/ A series of line strokes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522632,"byte_end":522661,"line_start":53,"line_end":53,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6083},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522707,"byte_end":522713,"line_start":56,"line_end":56,"column_start":5,"column_end":11},"name":"Dotted","qualname":"::widget::primitive::line::Pattern::Dotted","value":"Pattern::Dotted","parent":{"krate":0,"index":6078},"children":[],"decl_id":null,"docs":" A series of circles.\n","sig":null,"attributes":[{"value":"/ A series of circles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522678,"byte_end":522702,"line_start":55,"line_end":55,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":6078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522571,"byte_end":522578,"line_start":50,"line_end":50,"column_start":10,"column_end":17},"name":"Pattern","qualname":"::widget::primitive::line::Pattern","value":"Pattern::{Solid, Dashed, Dotted}","parent":null,"children":[{"krate":0,"index":6079},{"krate":0,"index":6081},{"krate":0,"index":6083}],"decl_id":null,"docs":" The pattern used to draw the line.\n","sig":null,"attributes":[{"value":"/ The pattern used to draw the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522482,"byte_end":522520,"line_start":48,"line_end":48,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6094},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522906,"byte_end":522910,"line_start":64,"line_end":64,"column_start":5,"column_end":9},"name":"Flat","qualname":"::widget::primitive::line::Cap::Flat","value":"Cap::Flat","parent":{"krate":0,"index":6093},"children":[],"decl_id":null,"docs":" The line is capped with a flat edge.\n","sig":null,"attributes":[{"value":"/ The line is capped with a flat edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522861,"byte_end":522901,"line_start":63,"line_end":63,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6096},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522963,"byte_end":522968,"line_start":66,"line_end":66,"column_start":5,"column_end":10},"name":"Round","qualname":"::widget::primitive::line::Cap::Round","value":"Cap::Round","parent":{"krate":0,"index":6093},"children":[],"decl_id":null,"docs":" The line is capped with a semi-circle.\n","sig":null,"attributes":[{"value":"/ The line is capped with a semi-circle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522916,"byte_end":522958,"line_start":65,"line_end":65,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":6093},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522851,"byte_end":522854,"line_start":62,"line_end":62,"column_start":10,"column_end":13},"name":"Cap","qualname":"::widget::primitive::line::Cap","value":"Cap::{Flat, Round}","parent":null,"children":[{"krate":0,"index":6094},{"krate":0,"index":6096}],"decl_id":null,"docs":" Whether the end of the **Line** should be flat or rounded.\n","sig":null,"attributes":[{"value":"/ Whether the end of the **Line** should be flat or rounded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522718,"byte_end":522780,"line_start":59,"line_end":59,"column_start":1,"column_end":63}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522781,"byte_end":522800,"line_start":60,"line_end":60,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523056,"byte_end":523062,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"styled","qualname":"<Line>::styled","value":"fn (start: Point, end: Point, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Line** widget with the given style.\n","sig":null,"attributes":[{"value":"/ Build a new **Line** widget with the given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522991,"byte_end":523044,"line_start":72,"line_end":72,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523370,"byte_end":523373,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Line>::new","value":"fn (start: Point, end: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new default **Line** widget.\n","sig":null,"attributes":[{"value":"/ Build a new default **Line** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523318,"byte_end":523358,"line_start":83,"line_end":83,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1867},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523754,"byte_end":523757,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"abs","qualname":"<Line>::abs","value":"fn (start: Point, end: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Line** whose bounding box is fit to the absolute co-ordinates of the line\n points.","sig":null,"attributes":[{"value":"/ Build a new **Line** whose bounding box is fit to the absolute co-ordinates of the line","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523468,"byte_end":523559,"line_start":88,"line_end":88,"column_start":5,"column_end":96}},{"value":"/ points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523564,"byte_end":523575,"line_start":89,"line_end":89,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523580,"byte_end":523583,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ If you would rather centre the start and end to the middle of the bounding box, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523588,"byte_end":523675,"line_start":91,"line_end":91,"column_start":5,"column_end":92}},{"value":"/ [**Line::centred**](./struct.Line#method.centred) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523680,"byte_end":523742,"line_start":92,"line_end":92,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523951,"byte_end":523961,"line_start":98,"line_end":98,"column_start":12,"column_end":22},"name":"abs_styled","qualname":"<Line>::abs_styled","value":"fn (start: Point, end: Point, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Line::abs**](./struct.Line#method.abs) but with the given style.\n","sig":null,"attributes":[{"value":"/ The same as [**Line::abs**](./struct.Line#method.abs) but with the given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":523856,"byte_end":523939,"line_start":97,"line_end":97,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524688,"byte_end":524695,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"centred","qualname":"<Line>::centred","value":"fn (start: Point, end: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Line** and shift the location of the start and end points so that the centre\n of their bounding rectangle lies at the position determined by the layout for the **Line**\n widget.","sig":null,"attributes":[{"value":"/ Build a new **Line** and shift the location of the start and end points so that the centre","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524143,"byte_end":524237,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ of their bounding rectangle lies at the position determined by the layout for the **Line**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524242,"byte_end":524336,"line_start":104,"line_end":104,"column_start":5,"column_end":99}},{"value":"/ widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524341,"byte_end":524352,"line_start":105,"line_end":105,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524357,"byte_end":524360,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This is useful if your points simply describe the line's angle and magnitude, and you want","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524365,"byte_end":524459,"line_start":107,"line_end":107,"column_start":5,"column_end":99}},{"value":"/ to position them using conrod's auto-layout or `Positionable` methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524464,"byte_end":524538,"line_start":108,"line_end":108,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524543,"byte_end":524546,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ If you would rather centre the bounding box to the points, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524551,"byte_end":524617,"line_start":110,"line_end":110,"column_start":5,"column_end":71}},{"value":"/ [**Line::abs**](./struct.Line#method.abs) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524622,"byte_end":524676,"line_start":111,"line_end":111,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524901,"byte_end":524915,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"centred_styled","qualname":"<Line>::centred_styled","value":"fn (start: Point, end: Point, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Line::centred**](./struct.Line#method.centred) but with the given style.\n","sig":null,"attributes":[{"value":"/ The same as [**Line::centred**](./struct.Line#method.centred) but with the given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":524798,"byte_end":524889,"line_start":116,"line_end":116,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525377,"byte_end":525386,"line_start":128,"line_end":128,"column_start":12,"column_end":21},"name":"thickness","qualname":"<Line>::thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The thickness or width of the Line.","sig":null,"attributes":[{"value":"/ The thickness or width of the Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525152,"byte_end":525191,"line_start":124,"line_end":124,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525196,"byte_end":525199,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Use this instead of `Positionable::width` for the thickness of the `Line`, as `width` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525204,"byte_end":525297,"line_start":126,"line_end":126,"column_start":5,"column_end":98}},{"value":"/ `height` refer to the dimensions of the bounding rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525302,"byte_end":525365,"line_start":127,"line_end":127,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525529,"byte_end":525534,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"solid","qualname":"<Line>::solid","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a solid line.\n","sig":null,"attributes":[{"value":"/ Make a solid line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525495,"byte_end":525517,"line_start":133,"line_end":133,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525677,"byte_end":525683,"line_start":140,"line_end":140,"column_start":12,"column_end":18},"name":"dashed","qualname":"<Line>::dashed","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a line with a Dashed pattern.\n","sig":null,"attributes":[{"value":"/ Make a line with a Dashed pattern.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525627,"byte_end":525665,"line_start":139,"line_end":139,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525827,"byte_end":525833,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"dotted","qualname":"<Line>::dotted","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a line with a Dotted pattern.\n","sig":null,"attributes":[{"value":"/ Make a line with a Dotted pattern.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525777,"byte_end":525815,"line_start":145,"line_end":145,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525998,"byte_end":526001,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Style>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor for a default Line Style.\n","sig":null,"attributes":[{"value":"/ Constructor for a default Line Style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525945,"byte_end":525986,"line_start":156,"line_end":156,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526213,"byte_end":526218,"line_start":167,"line_end":167,"column_start":12,"column_end":17},"name":"solid","qualname":"<Style>::solid","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a solid line.\n","sig":null,"attributes":[{"value":"/ Make a solid line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526179,"byte_end":526201,"line_start":166,"line_end":166,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526337,"byte_end":526343,"line_start":172,"line_end":172,"column_start":12,"column_end":18},"name":"dashed","qualname":"<Style>::dashed","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a line with a Dashed pattern.\n","sig":null,"attributes":[{"value":"/ Make a line with a Dashed pattern.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526287,"byte_end":526325,"line_start":171,"line_end":171,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526463,"byte_end":526469,"line_start":177,"line_end":177,"column_start":12,"column_end":18},"name":"dotted","qualname":"<Style>::dotted","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a line with a Dotted pattern.\n","sig":null,"attributes":[{"value":"/ Make a line with a Dotted pattern.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526413,"byte_end":526451,"line_start":176,"line_end":176,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526589,"byte_end":526596,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Style>::pattern","value":"fn (mut self, pattern: Pattern) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The style with some given pattern.\n","sig":null,"attributes":[{"value":"/ The style with some given pattern.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526539,"byte_end":526577,"line_start":181,"line_end":181,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526742,"byte_end":526747,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"name":"color","qualname":"<Style>::color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The style with some given color.\n","sig":null,"attributes":[{"value":"/ The style with some given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526694,"byte_end":526730,"line_start":187,"line_end":187,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526889,"byte_end":526898,"line_start":194,"line_end":194,"column_start":12,"column_end":21},"name":"thickness","qualname":"<Style>::thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The style with some given thickness.\n","sig":null,"attributes":[{"value":"/ The style with some given thickness.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":526837,"byte_end":526877,"line_start":193,"line_end":193,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527052,"byte_end":527055,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"cap","qualname":"<Style>::cap","value":"fn (mut self, cap: Cap) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The style for the ends of the Line.\n","sig":null,"attributes":[{"value":"/ The style for the ends of the Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527001,"byte_end":527040,"line_start":199,"line_end":199,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527182,"byte_end":527193,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"set_pattern","qualname":"<Style>::set_pattern","value":"fn (&mut self, pattern: Pattern) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the pattern for the line.\n","sig":null,"attributes":[{"value":"/ Set the pattern for the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527137,"byte_end":527170,"line_start":205,"line_end":205,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527323,"byte_end":527332,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"set_color","qualname":"<Style>::set_color","value":"fn (&mut self, color: Color) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the color for the line.\n","sig":null,"attributes":[{"value":"/ Set the color for the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527280,"byte_end":527311,"line_start":210,"line_end":210,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527458,"byte_end":527471,"line_start":216,"line_end":216,"column_start":12,"column_end":25},"name":"set_thickness","qualname":"<Style>::set_thickness","value":"fn (&mut self, thickness: Scalar) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the thickness for the line.\n","sig":null,"attributes":[{"value":"/ Set the thickness for the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527411,"byte_end":527446,"line_start":215,"line_end":215,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527608,"byte_end":527615,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"set_cap","qualname":"<Style>::set_cap","value":"fn (&mut self, cap: Cap) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the **Cap** for the line.\n","sig":null,"attributes":[{"value":"/ Set the **Cap** for the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527563,"byte_end":527596,"line_start":220,"line_end":220,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527727,"byte_end":527738,"line_start":226,"line_end":226,"column_start":12,"column_end":23},"name":"get_pattern","qualname":"<Style>::get_pattern","value":"fn (&self, theme: &Theme) -> Pattern","parent":null,"children":[],"decl_id":null,"docs":" The Pattern for the Line.\n","sig":null,"attributes":[{"value":"/ The Pattern for the Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":527686,"byte_end":527715,"line_start":225,"line_end":225,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":528071,"byte_end":528080,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"get_color","qualname":"<Style>::get_color","value":"fn (&self, theme: &Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" The Color for the Line.\n","sig":null,"attributes":[{"value":"/ The Color for the Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":528032,"byte_end":528059,"line_start":233,"line_end":233,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":528366,"byte_end":528379,"line_start":241,"line_end":241,"column_start":12,"column_end":25},"name":"get_thickness","qualname":"<Style>::get_thickness","value":"fn (&self, theme: &Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The width or thickness of the Line.\n","sig":null,"attributes":[{"value":"/ The width or thickness of the Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":528315,"byte_end":528354,"line_start":240,"line_end":240,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":528723,"byte_end":528730,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"get_cap","qualname":"<Style>::get_cap","value":"fn (&self, theme: &Theme) -> Cap","parent":null,"children":[],"decl_id":null,"docs":" The styling for the ends of the Line.\n","sig":null,"attributes":[{"value":"/ The styling for the ends of the Line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":528670,"byte_end":528711,"line_start":248,"line_end":248,"column_start":5,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1915},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":530462,"byte_end":530474,"line_start":313,"line_end":313,"column_start":8,"column_end":20},"name":"rect_corners","qualname":"::widget::primitive::line::rect_corners","value":"fn (a: Point, b: Point, half_thickness: Scalar) -> [Point; 4]","parent":null,"children":[],"decl_id":null,"docs":" Given two points and half the line thickness, return the four corners of the rectangle\n describing the line.\n","sig":null,"attributes":[{"value":"/ Given two points and half the line thickness, return the four corners of the rectangle","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":530339,"byte_end":530429,"line_start":311,"line_end":311,"column_start":1,"column_end":91}},{"value":"/ describing the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":530430,"byte_end":530454,"line_start":312,"line_end":312,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":531124,"byte_end":531133,"line_start":327,"line_end":327,"column_start":8,"column_end":17},"name":"triangles","qualname":"::widget::primitive::line::triangles","value":"fn (a: Point, b: Point, half_thickness: Scalar) -> [Triangle<Point>; 2]","parent":null,"children":[],"decl_id":null,"docs":" Given two points and half the line thickness, return the two triangles that describe the line.\n","sig":null,"attributes":[{"value":"/ Given two points and half the line thickness, return the two triangles that describe the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":531018,"byte_end":531116,"line_start":326,"line_end":326,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":1919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":531475,"byte_end":531482,"line_start":336,"line_end":336,"column_start":8,"column_end":15},"name":"is_over","qualname":"::widget::primitive::line::is_over","value":"fn (a: Point, b: Point, thickness: Scalar, point: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Describes whether or not the given point touches the line described by *a -> b* with the given\n thickness.\n","sig":null,"attributes":[{"value":"/ Describes whether or not the given point touches the line described by *a -> b* with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":531354,"byte_end":531452,"line_start":334,"line_end":334,"column_start":1,"column_end":99}},{"value":"/ thickness.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":531453,"byte_end":531467,"line_start":335,"line_end":335,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":1920},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":531782,"byte_end":531796,"line_start":343,"line_end":343,"column_start":8,"column_end":22},"name":"is_over_widget","qualname":"::widget::primitive::line::is_over_widget","value":"fn (widget: &graph::Container, point: Point, theme: &Theme) -> widget::IsOver","parent":null,"children":[],"decl_id":null,"docs":" The function to use for picking whether a given point is over the line.\n","sig":null,"attributes":[{"value":"/ The function to use for picking whether a given point is over the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":531699,"byte_end":531774,"line_start":342,"line_end":342,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1923},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"image","qualname":"::widget::primitive::image","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","parent":null,"children":[{"krate":0,"index":1924},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1932},{"krate":0,"index":6106},{"krate":0,"index":6117},{"krate":0,"index":6115},{"krate":0,"index":6111},{"krate":0,"index":6118},{"krate":0,"index":6123},{"krate":0,"index":6121},{"krate":0,"index":6124},{"krate":0,"index":6142},{"krate":0,"index":6140},{"krate":0,"index":6138},{"krate":0,"index":6136},{"krate":0,"index":6132},{"krate":0,"index":6133},{"krate":0,"index":6126},{"krate":0,"index":1933},{"krate":0,"index":1936}],"decl_id":null,"docs":" A simple, non-interactive widget for drawing an `Image`.\n","sig":null,"attributes":[{"value":"! A simple, non-interactive widget for drawing an `Image`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532204,"byte_end":532264,"line_start":1,"line_end":1,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":6106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532455,"byte_end":532460,"line_start":11,"line_end":11,"column_start":12,"column_end":17},"name":"Image","qualname":"::widget::primitive::image::Image","value":"Image { common, image_id, src_rect, style }","parent":null,"children":[{"krate":0,"index":6110},{"krate":0,"index":6107},{"krate":0,"index":6108},{"krate":0,"index":6109}],"decl_id":null,"docs":" A primitive and basic widget for drawing an `Image`.\n","sig":null,"attributes":[{"value":"/ A primitive and basic widget for drawing an `Image`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532349,"byte_end":532405,"line_start":9,"line_end":9,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532565,"byte_end":532571,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::image::Image::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6106},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532467,"byte_end":532526,"line_start":12,"line_end":12,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532531,"byte_end":532556,"line_start":13,"line_end":13,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532668,"byte_end":532676,"line_start":16,"line_end":16,"column_start":9,"column_end":17},"name":"image_id","qualname":"::widget::primitive::image::Image::image_id","value":"image::Id","parent":{"krate":0,"index":6106},"children":[],"decl_id":null,"docs":" The unique identifier for the image that will be drawn.\n","sig":null,"attributes":[{"value":"/ The unique identifier for the image that will be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532600,"byte_end":532659,"line_start":15,"line_end":15,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":6108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532774,"byte_end":532782,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"src_rect","qualname":"::widget::primitive::image::Image::src_rect","value":"std::option::Option<position::rect::Rect>","parent":{"krate":0,"index":6106},"children":[],"decl_id":null,"docs":" The rectangle area of the original source image that should be used.\n","sig":null,"attributes":[{"value":"/ The rectangle area of the original source image that should be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532693,"byte_end":532765,"line_start":17,"line_end":17,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":6109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532830,"byte_end":532835,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::image::Image::style","value":"widget::primitive::image::Style","parent":{"krate":0,"index":6106},"children":[],"decl_id":null,"docs":" Unique styling.\n","sig":null,"attributes":[{"value":"/ Unique styling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532802,"byte_end":532821,"line_start":19,"line_end":19,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":6118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532946,"byte_end":532951,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::image::State","value":"State { src_rect, image_id }","parent":null,"children":[{"krate":0,"index":6119},{"krate":0,"index":6120}],"decl_id":null,"docs":" Unique `State` to be stored between updates for the `Image`.\n","sig":null,"attributes":[{"value":"/ Unique `State` to be stored between updates for the `Image`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532847,"byte_end":532911,"line_start":23,"line_end":23,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":6119},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533087,"byte_end":533095,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"name":"src_rect","qualname":"::widget::primitive::image::State::src_rect","value":"std::option::Option<position::rect::Rect>","parent":{"krate":0,"index":6118},"children":[],"decl_id":null,"docs":" The rectangular area of the image that we wish to display.","sig":null,"attributes":[{"value":"/ The rectangular area of the image that we wish to display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":532958,"byte_end":533020,"line_start":26,"line_end":26,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533025,"byte_end":533028,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ If `None`, the entire image will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533033,"byte_end":533078,"line_start":28,"line_end":28,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6120},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533201,"byte_end":533209,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"name":"image_id","qualname":"::widget::primitive::image::State::image_id","value":"image::Id","parent":{"krate":0,"index":6118},"children":[],"decl_id":null,"docs":" The unique identifier for the image's associated data that will be drawn.\n","sig":null,"attributes":[{"value":"/ The unique identifier for the image's associated data that will be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533115,"byte_end":533192,"line_start":30,"line_end":30,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":6124},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533343,"byte_end":533348,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::primitive::image::Style","value":"Style { maybe_color }","parent":null,"children":[{"krate":0,"index":6125}],"decl_id":null,"docs":" Unique styling for the `Image` widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the `Image` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533225,"byte_end":533267,"line_start":34,"line_end":34,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6125},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533455,"byte_end":533466,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"name":"maybe_color","qualname":"::widget::primitive::image::Style::maybe_color","value":"std::option::Option<std::option::Option<color::Color>>","parent":{"krate":0,"index":6124},"children":[],"decl_id":null,"docs":" Optionally specify a single color to use for the image.\n","sig":null,"attributes":[{"value":"/ Optionally specify a single color to use for the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533355,"byte_end":533414,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533419,"byte_end":533446,"line_start":38,"line_end":38,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":6128},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533455,"byte_end":533466,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"name":"maybe_color","qualname":"<Style>::maybe_color","value":"fn (&self, theme: &::Theme) -> Option<Color>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534860,"byte_end":534863,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<Image>::new","value":"fn (image_id: image::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Image`.","sig":null,"attributes":[{"value":"/ Construct a new `Image`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533513,"byte_end":533541,"line_start":45,"line_end":45,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533546,"byte_end":533549,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ Note that the `Image` widget does not require borrowing or owning any image data directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533554,"byte_end":533648,"line_start":47,"line_end":47,"column_start":5,"column_end":99}},{"value":"/ Instead, image data is stored within a `conrod::image::Map` where `image::Id`s are mapped","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533653,"byte_end":533746,"line_start":48,"line_end":48,"column_start":5,"column_end":98}},{"value":"/ to their associated data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533751,"byte_end":533780,"line_start":49,"line_end":49,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533785,"byte_end":533788,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This is done for a few reasons:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533793,"byte_end":533828,"line_start":51,"line_end":51,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533833,"byte_end":533836,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ - To avoid requiring that the widget graph owns an instance of each image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533841,"byte_end":533918,"line_start":53,"line_end":53,"column_start":5,"column_end":82}},{"value":"/ - To avoid requiring that the user passes the image data to the `Image` every update","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533923,"byte_end":534011,"line_start":54,"line_end":54,"column_start":5,"column_end":93}},{"value":"/ unnecessarily","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534016,"byte_end":534033,"line_start":55,"line_end":55,"column_start":5,"column_end":22}},{"value":"/ - To make it easier for users to borrow and mutate their images without needing to index","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534038,"byte_end":534130,"line_start":56,"line_end":56,"column_start":5,"column_end":97}},{"value":"/ into the `Ui`'s widget graph (which also requires casting types).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534135,"byte_end":534204,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534209,"byte_end":534212,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ During rendering, conrod will take the `image::Map`, retrieve the data associated with each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534217,"byte_end":534312,"line_start":59,"line_end":59,"column_start":5,"column_end":100}},{"value":"/ image and yield it via the `render::Primitive::Image` variant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534317,"byte_end":534383,"line_start":60,"line_end":60,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534388,"byte_end":534391,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Note: this implies that the type must be the same for all `Image` widgets instantiated via","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534396,"byte_end":534490,"line_start":62,"line_end":62,"column_start":5,"column_end":99}},{"value":"/ the same `Ui`. In the case that you require multiple different types of images, we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534495,"byte_end":534581,"line_start":63,"line_end":63,"column_start":5,"column_end":91}},{"value":"/ recommend that you either:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534586,"byte_end":534616,"line_start":64,"line_end":64,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534621,"byte_end":534624,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ 1. use an enum with a variant for each type","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534629,"byte_end":534676,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ 2. use a trait object, where the trait is implemented for each of your image types or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534681,"byte_end":534770,"line_start":67,"line_end":67,"column_start":5,"column_end":94}},{"value":"/ 3. use an index type which may be mapped to your various image types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":534775,"byte_end":534848,"line_start":68,"line_end":68,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1935},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":535234,"byte_end":535250,"line_start":81,"line_end":81,"column_start":12,"column_end":28},"name":"source_rectangle","qualname":"<Image>::source_rectangle","value":"fn (mut self, rect: Rect) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The rectangular area of the image that we wish to display.","sig":null,"attributes":[{"value":"/ The rectangular area of the image that we wish to display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":535083,"byte_end":535145,"line_start":78,"line_end":78,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":535150,"byte_end":535153,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ If this method is not called, the entire image will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":535158,"byte_end":535222,"line_start":80,"line_end":80,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":6143},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":535373,"byte_end":535378,"line_start":87,"line_end":87,"column_start":13,"column_end":18},"name":"color","qualname":"<Image>::color","value":"fn (mut self, color: Option<Color>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"point_path","qualname":"::widget::primitive::point_path","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","parent":null,"children":[{"krate":0,"index":1948},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":6144},{"krate":0,"index":6158},{"krate":0,"index":6155},{"krate":0,"index":6150},{"krate":0,"index":6161},{"krate":0,"index":6169},{"krate":0,"index":6167},{"krate":0,"index":6163},{"krate":0,"index":6164},{"krate":0,"index":6171},{"krate":0,"index":6178},{"krate":0,"index":1965},{"krate":0,"index":1977},{"krate":0,"index":1995},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2005},{"krate":0,"index":2008}],"decl_id":null,"docs":" A simple, non-interactive widget for drawing a series of conjoined lines.\n","sig":null,"attributes":[{"value":"! A simple, non-interactive widget for drawing a series of conjoined lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":536633,"byte_end":536710,"line_start":1,"line_end":1,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":6144},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537072,"byte_end":537081,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"PointPath","qualname":"::widget::primitive::point_path::PointPath","value":"PointPath { points, common, style, maybe_shift_to_centre_from }","parent":null,"children":[{"krate":0,"index":6146},{"krate":0,"index":6149},{"krate":0,"index":6147},{"krate":0,"index":6148}],"decl_id":null,"docs":" A simple, non-interactive widget for drawing a series of lines and/or points.\n","sig":null,"attributes":[{"value":"/ A simple, non-interactive widget for drawing a series of lines and/or points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":536940,"byte_end":537021,"line_start":13,"line_end":13,"column_start":1,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":6146},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537146,"byte_end":537152,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"name":"points","qualname":"::widget::primitive::point_path::PointPath::points","value":"I","parent":{"krate":0,"index":6144},"children":[],"decl_id":null,"docs":" Some iterator yielding a series of Points.\n","sig":null,"attributes":[{"value":"/ Some iterator yielding a series of Points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537091,"byte_end":537137,"line_start":16,"line_end":16,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6149},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537259,"byte_end":537265,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::point_path::PointPath::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6144},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537161,"byte_end":537220,"line_start":18,"line_end":18,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537225,"byte_end":537250,"line_start":19,"line_end":19,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6147},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537340,"byte_end":537345,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::point_path::PointPath::style","value":"widget::primitive::line::Style","parent":{"krate":0,"index":6144},"children":[],"decl_id":null,"docs":" Unique styling for the PointPath.\n","sig":null,"attributes":[{"value":"/ Unique styling for the PointPath.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537294,"byte_end":537331,"line_start":21,"line_end":21,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":6148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537452,"byte_end":537478,"line_start":24,"line_end":24,"column_start":9,"column_end":35},"name":"maybe_shift_to_centre_from","qualname":"::widget::primitive::point_path::PointPath::maybe_shift_to_centre_from","value":"std::option::Option<[f64; 2]>","parent":{"krate":0,"index":6144},"children":[],"decl_id":null,"docs":" Whether or not the points should be automatically centred to the widget position.\n","sig":null,"attributes":[{"value":"/ Whether or not the points should be automatically centred to the widget position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537358,"byte_end":537443,"line_start":23,"line_end":23,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":6161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537587,"byte_end":537592,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::point_path::State","value":"State { points }","parent":null,"children":[{"krate":0,"index":6162}],"decl_id":null,"docs":" State that is unique to the PointPath.\n","sig":null,"attributes":[{"value":"/ State that is unique to the PointPath.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537498,"byte_end":537540,"line_start":27,"line_end":27,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537651,"byte_end":537657,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"name":"points","qualname":"::widget::primitive::point_path::State::points","value":"std::vec::Vec<[f64; 2]>","parent":{"krate":0,"index":6161},"children":[],"decl_id":null,"docs":" An owned version of the list of points.\n","sig":null,"attributes":[{"value":"/ An owned version of the list of points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537599,"byte_end":537642,"line_start":30,"line_end":30,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537750,"byte_end":537759,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"Triangles","qualname":"::widget::primitive::point_path::Triangles","value":"Triangles {  }","parent":null,"children":[{"krate":0,"index":6173},{"krate":0,"index":6174},{"krate":0,"index":6175},{"krate":0,"index":6176},{"krate":0,"index":6177}],"decl_id":null,"docs":" An iterator that triangulates a point path.\n","sig":null,"attributes":[{"value":"/ An iterator that triangulates a point path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537674,"byte_end":537721,"line_start":34,"line_end":34,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538023,"byte_end":538029,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"styled","qualname":"<PointPath<I>>::styled","value":"fn (points: I, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**PointPath::new**](./struct.PointPath#method.new) but with th given style.\n","sig":null,"attributes":[{"value":"/ The same as [**PointPath::new**](./struct.PointPath#method.new) but with th given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537919,"byte_end":538011,"line_start":46,"line_end":46,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538805,"byte_end":538808,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<PointPath<I>>::new","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new default PointPath widget.","sig":null,"attributes":[{"value":"/ Build a new default PointPath widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538260,"byte_end":538301,"line_start":56,"line_end":56,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538306,"byte_end":538309,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* automatically set the position of the bounding box for the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538314,"byte_end":538402,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ widget. It is recommended that you also see the `abs` and `centred` constructors for smart","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538407,"byte_end":538501,"line_start":59,"line_end":59,"column_start":5,"column_end":99}},{"value":"/ positioning and layout that automatically infer the position and size of the bounding box.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538506,"byte_end":538600,"line_start":60,"line_end":60,"column_start":5,"column_end":99}},{"value":"/ This method should only be preferred if the user can also specify the correct bounding box","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538605,"byte_end":538699,"line_start":61,"line_end":61,"column_start":5,"column_end":99}},{"value":"/ position and size as this will be more efficient than the `abs` or `centred` methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538704,"byte_end":538793,"line_start":62,"line_end":62,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539321,"byte_end":539324,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"abs","qualname":"<PointPath<I>>::abs","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new PointPath whose bounding box is fit to the absolute co-ordinates of the points.","sig":null,"attributes":[{"value":"/ Build a new PointPath whose bounding box is fit to the absolute co-ordinates of the points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538889,"byte_end":538984,"line_start":67,"line_end":67,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538989,"byte_end":538992,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This requires that the `points` iterator is `Clone` so that we may iterate through and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":538997,"byte_end":539087,"line_start":69,"line_end":69,"column_start":5,"column_end":95}},{"value":"/ determine the bounding box of the `points`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539092,"byte_end":539139,"line_start":70,"line_end":70,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539144,"byte_end":539147,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ If you would rather centre the points to the middle of the bounding box, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539152,"byte_end":539232,"line_start":72,"line_end":72,"column_start":5,"column_end":85}},{"value":"/ [**PointPath::centred**](./struct.PointPath#method.centred) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539237,"byte_end":539309,"line_start":73,"line_end":73,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539606,"byte_end":539616,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"abs_styled","qualname":"<PointPath<I>>::abs_styled","value":"fn (points: I, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**PointPath::abs**](./struct.PointPath#method.abs) but constructs the\n **PointPath** with the given style.\n","sig":null,"attributes":[{"value":"/ The same as [**PointPath::abs**](./struct.PointPath#method.abs) but constructs the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539464,"byte_end":539550,"line_start":80,"line_end":80,"column_start":5,"column_end":91}},{"value":"/ **PointPath** with the given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539555,"byte_end":539594,"line_start":81,"line_end":81,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540415,"byte_end":540422,"line_start":98,"line_end":98,"column_start":12,"column_end":19},"name":"centred","qualname":"<PointPath<I>>::centred","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **PointPath** and shift the location of the points so that the centre of their\n bounding rectangle lies at the position determined for the **PointPath** widget.","sig":null,"attributes":[{"value":"/ Build a new **PointPath** and shift the location of the points so that the centre of their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":539908,"byte_end":540002,"line_start":90,"line_end":90,"column_start":5,"column_end":99}},{"value":"/ bounding rectangle lies at the position determined for the **PointPath** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540007,"byte_end":540091,"line_start":91,"line_end":91,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540096,"byte_end":540099,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This is useful if your points simply describe a shape and you want to position them using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540104,"byte_end":540197,"line_start":93,"line_end":93,"column_start":5,"column_end":98}},{"value":"/ conrod's auto-layout or **Positionable** methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540202,"byte_end":540255,"line_start":94,"line_end":94,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540260,"byte_end":540263,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ If you would rather centre the bounding box to the points, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540268,"byte_end":540334,"line_start":96,"line_end":96,"column_start":5,"column_end":71}},{"value":"/ [**PointPath::abs**](./struct.PointPath#method.abs) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540339,"byte_end":540403,"line_start":97,"line_end":97,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540716,"byte_end":540730,"line_start":106,"line_end":106,"column_start":12,"column_end":26},"name":"centred_styled","qualname":"<PointPath<I>>::centred_styled","value":"fn (points: I, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**PointPath::centred**](./struct.PointPath#method.centred) but constructs the\n **PointPath** with the given style.\n","sig":null,"attributes":[{"value":"/ The same as [**PointPath::centred**](./struct.PointPath#method.centred) but constructs the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540566,"byte_end":540660,"line_start":104,"line_end":104,"column_start":5,"column_end":99}},{"value":"/ **PointPath** with the given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":540665,"byte_end":540704,"line_start":105,"line_end":105,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541356,"byte_end":541365,"line_start":120,"line_end":120,"column_start":12,"column_end":21},"name":"thickness","qualname":"<PointPath<I>>::thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The thickness or width of the **PointPath**'s lines.","sig":null,"attributes":[{"value":"/ The thickness or width of the **PointPath**'s lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541114,"byte_end":541170,"line_start":116,"line_end":116,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541175,"byte_end":541178,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Use this instead of `Positionable::width` for the thickness of the `Line`, as `width` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541183,"byte_end":541276,"line_start":118,"line_end":118,"column_start":5,"column_end":98}},{"value":"/ `height` refer to the dimensions of the bounding rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541281,"byte_end":541344,"line_start":119,"line_end":119,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541508,"byte_end":541513,"line_start":126,"line_end":126,"column_start":12,"column_end":17},"name":"solid","qualname":"<PointPath<I>>::solid","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a Solid line.\n","sig":null,"attributes":[{"value":"/ Make a Solid line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541474,"byte_end":541496,"line_start":125,"line_end":125,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541656,"byte_end":541662,"line_start":132,"line_end":132,"column_start":12,"column_end":18},"name":"dashed","qualname":"<PointPath<I>>::dashed","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a line with a Dashed pattern.\n","sig":null,"attributes":[{"value":"/ Make a line with a Dashed pattern.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541606,"byte_end":541644,"line_start":131,"line_end":131,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541806,"byte_end":541812,"line_start":138,"line_end":138,"column_start":12,"column_end":18},"name":"dotted","qualname":"<PointPath<I>>::dotted","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a line with a Dotted pattern.\n","sig":null,"attributes":[{"value":"/ Make a line with a Dotted pattern.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541756,"byte_end":541794,"line_start":137,"line_end":137,"column_start":5,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1998},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":544045,"byte_end":544054,"line_start":213,"line_end":213,"column_start":8,"column_end":17},"name":"triangles","qualname":"::widget::primitive::point_path::triangles","value":"fn <I> (points: I, cap: widget::line::Cap, thickness: Scalar) -> Option<Triangles<I::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Triangulate a point path.","sig":null,"attributes":[{"value":"/ Triangulate a point path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":543935,"byte_end":543964,"line_start":210,"line_end":210,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":543965,"byte_end":543968,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if the given iterator yields less than one point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":543969,"byte_end":544037,"line_start":212,"line_end":212,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":2005},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":545148,"byte_end":545155,"line_start":251,"line_end":251,"column_start":8,"column_end":15},"name":"is_over","qualname":"::widget::primitive::point_path::is_over","value":"fn <I> (points: I, cap: widget::line::Cap, thickness: Scalar, p: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether or not the given point `p` lies over the `PointPath` described by the given\n points, line cap and thickness.\n","sig":null,"attributes":[{"value":"/ Returns whether or not the given point `p` lies over the `PointPath` described by the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":545009,"byte_end":545104,"line_start":249,"line_end":249,"column_start":1,"column_end":96}},{"value":"/ points, line cap and thickness.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":545105,"byte_end":545140,"line_start":250,"line_end":250,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":2008},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":545463,"byte_end":545477,"line_start":259,"line_end":259,"column_start":8,"column_end":22},"name":"is_over_widget","qualname":"::widget::primitive::point_path::is_over_widget","value":"fn (widget: &graph::Container, point: Point, theme: &Theme) -> widget::IsOver","parent":null,"children":[],"decl_id":null,"docs":" The function to use for picking whether a given point is over the point path.\n","sig":null,"attributes":[{"value":"/ The function to use for picking whether a given point is over the point path.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":545374,"byte_end":545455,"line_start":258,"line_end":258,"column_start":1,"column_end":82}}]},{"kind":"Mod","id":{"krate":0,"index":2011},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"shape","qualname":"::widget::primitive::shape","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","parent":null,"children":[{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2032},{"krate":0,"index":2105},{"krate":0,"index":2174},{"krate":0,"index":2203},{"krate":0,"index":6447},{"krate":0,"index":6462},{"krate":0,"index":6460},{"krate":0,"index":6458},{"krate":0,"index":6454},{"krate":0,"index":6455},{"krate":0,"index":2332}],"decl_id":null,"docs":" A module encompassing the primitive 2D shape widgets.\n","sig":null,"attributes":[{"value":"! A module encompassing the primitive 2D shape widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":545911,"byte_end":545968,"line_start":1,"line_end":1,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":2015},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"circle","qualname":"::widget::primitive::shape::circle","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2020},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":6181},{"krate":0,"index":6187},{"krate":0,"index":6185},{"krate":0,"index":6183},{"krate":0,"index":2025},{"krate":0,"index":2026}],"decl_id":null,"docs":" An adaptation of the **Oval** type where the width and height are equal.\n","sig":null,"attributes":[{"value":"! An adaptation of the **Oval** type where the width and height are equal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":547565,"byte_end":547641,"line_start":1,"line_end":1,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":6181},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":547840,"byte_end":547846,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Circle","qualname":"::widget::primitive::shape::circle::Circle","value":"","parent":null,"children":[],"decl_id":null,"docs":" A tiny wrapper around the **Oval** widget type.\n","sig":null,"attributes":[{"value":"/ A tiny wrapper around the **Oval** widget type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":547747,"byte_end":547798,"line_start":8,"line_end":8,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548042,"byte_end":548048,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"styled","qualname":"<Circle>::styled","value":"fn (radius: Scalar, style: Style) -> Oval<Full>","parent":null,"children":[],"decl_id":null,"docs":" Build a circular **Oval** with the given dimensions and style.\n","sig":null,"attributes":[{"value":"/ Build a circular **Oval** with the given dimensions and style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":547964,"byte_end":548030,"line_start":20,"line_end":20,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548211,"byte_end":548215,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"fill","qualname":"<Circle>::fill","value":"fn (radius: Scalar) -> Oval<Full>","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Fill**ed circular **Oval**.\n","sig":null,"attributes":[{"value":"/ Build a new **Fill**ed circular **Oval**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548154,"byte_end":548199,"line_start":25,"line_end":25,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548376,"byte_end":548385,"line_start":31,"line_end":31,"column_start":12,"column_end":21},"name":"fill_with","qualname":"<Circle>::fill_with","value":"fn (radius: Scalar, color: Color) -> Oval<Full>","parent":null,"children":[],"decl_id":null,"docs":" Build a new circular **Oval** **Fill**ed with the given color.\n","sig":null,"attributes":[{"value":"/ Build a new circular **Oval** **Fill**ed with the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548298,"byte_end":548364,"line_start":30,"line_end":30,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2030},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548560,"byte_end":548567,"line_start":36,"line_end":36,"column_start":12,"column_end":19},"name":"outline","qualname":"<Circle>::outline","value":"fn (radius: Scalar) -> Oval<Full>","parent":null,"children":[],"decl_id":null,"docs":" Build a new circular **Outline**d **Oval** widget.\n","sig":null,"attributes":[{"value":"/ Build a new circular **Outline**d **Oval** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548494,"byte_end":548548,"line_start":35,"line_end":35,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2031},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548733,"byte_end":548747,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"outline_styled","qualname":"<Circle>::outline_styled","value":"fn (radius: Scalar, line_style: widget::line::Style) -> Oval<Full>","parent":null,"children":[],"decl_id":null,"docs":" Build a new circular **Oval** **Outline**d with the given style.\n","sig":null,"attributes":[{"value":"/ Build a new circular **Oval** **Outline**d with the given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":548653,"byte_end":548721,"line_start":40,"line_end":40,"column_start":5,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":2032},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oval","qualname":"::widget::primitive::shape::oval","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","parent":null,"children":[{"krate":0,"index":2033},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":6188},{"krate":0,"index":6205},{"krate":0,"index":6202},{"krate":0,"index":6199},{"krate":0,"index":6194},{"krate":0,"index":2048},{"krate":0,"index":6207},{"krate":0,"index":6219},{"krate":0,"index":6217},{"krate":0,"index":6215},{"krate":0,"index":6212},{"krate":0,"index":6213},{"krate":0,"index":6209},{"krate":0,"index":6210},{"krate":0,"index":2050},{"krate":0,"index":6220},{"krate":0,"index":6231},{"krate":0,"index":6229},{"krate":0,"index":6227},{"krate":0,"index":6223},{"krate":0,"index":6224},{"krate":0,"index":2052},{"krate":0,"index":6232},{"krate":0,"index":6248},{"krate":0,"index":6245},{"krate":0,"index":6242},{"krate":0,"index":6236},{"krate":0,"index":6238},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2061},{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2078},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":6250},{"krate":0,"index":6258},{"krate":0,"index":2083},{"krate":0,"index":6260},{"krate":0,"index":6263},{"krate":0,"index":2088},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102}],"decl_id":null,"docs":" A simple, non-interactive widget for drawing a single **Oval**.\n","sig":null,"attributes":[{"value":"! A simple, non-interactive widget for drawing a single **Oval**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":548884,"byte_end":548951,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":6188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549253,"byte_end":549257,"line_start":13,"line_end":13,"column_start":12,"column_end":16},"name":"Oval","qualname":"::widget::primitive::shape::oval::Oval","value":"Oval { common, style, resolution, section }","parent":null,"children":[{"krate":0,"index":6193},{"krate":0,"index":6190},{"krate":0,"index":6191},{"krate":0,"index":6192}],"decl_id":null,"docs":" A simple, non-interactive widget for drawing a single **Oval**.\n","sig":null,"attributes":[{"value":"/ A simple, non-interactive widget for drawing a single **Oval**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549129,"byte_end":549196,"line_start":11,"line_end":11,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":6193},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549365,"byte_end":549371,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::shape::oval::Oval::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6188},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549267,"byte_end":549326,"line_start":14,"line_end":14,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549331,"byte_end":549356,"line_start":15,"line_end":15,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549428,"byte_end":549433,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::shape::oval::Oval::style","value":"widget::primitive::shape::Style","parent":{"krate":0,"index":6188},"children":[],"decl_id":null,"docs":" Unique styling.\n","sig":null,"attributes":[{"value":"/ Unique styling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549400,"byte_end":549419,"line_start":17,"line_end":17,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":6191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549501,"byte_end":549511,"line_start":20,"line_end":20,"column_start":9,"column_end":19},"name":"resolution","qualname":"::widget::primitive::shape::oval::Oval::resolution","value":"usize","parent":{"krate":0,"index":6188},"children":[],"decl_id":null,"docs":" The number of lines used to draw the edge.\n","sig":null,"attributes":[{"value":"/ The number of lines used to draw the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549446,"byte_end":549492,"line_start":19,"line_end":19,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6192},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549601,"byte_end":549608,"line_start":22,"line_end":22,"column_start":9,"column_end":16},"name":"section","qualname":"::widget::primitive::shape::oval::Oval::section","value":"S","parent":{"krate":0,"index":6188},"children":[],"decl_id":null,"docs":" A type describing the section of the `Oval` that is to be drawn.\n","sig":null,"attributes":[{"value":"/ A type describing the section of the `Oval` that is to be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549524,"byte_end":549592,"line_start":21,"line_end":21,"column_start":5,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":2048},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549700,"byte_end":549711,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"OvalSection","qualname":"::widget::primitive::shape::oval::OvalSection","value":"OvalSection: 'static + Copy + PartialEq + Send","parent":null,"children":[{"krate":0,"index":2049}],"decl_id":null,"docs":" Types that may be used to describe the visible section of the `Oval`.\n","sig":null,"attributes":[{"value":"/ Types that may be used to describe the visible section of the `Oval`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549616,"byte_end":549689,"line_start":25,"line_end":25,"column_start":1,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":2049},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549842,"byte_end":549849,"line_start":28,"line_end":28,"column_start":11,"column_end":18},"name":"IS_OVER","qualname":"::widget::primitive::shape::oval::OvalSection::IS_OVER","value":"widget::IsOverFn","parent":{"krate":0,"index":2048},"children":[],"decl_id":null,"docs":" The function used to determine if a point is over the oval section widget.\n","sig":null,"attributes":[{"value":"/ The function used to determine if a point is over the oval section widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549753,"byte_end":549831,"line_start":27,"line_end":27,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":6207},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550043,"byte_end":550047,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"Full","qualname":"::widget::primitive::shape::oval::Full","value":"","parent":null,"children":[],"decl_id":null,"docs":" The entire `Oval` will be drawn.","sig":null,"attributes":[{"value":"/ The entire `Oval` will be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549872,"byte_end":549908,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549909,"byte_end":549912,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ To draw only a section of the oval, use the `section` builder method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549913,"byte_end":549986,"line_start":33,"line_end":33,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6220},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550367,"byte_end":550374,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Section","qualname":"::widget::primitive::shape::oval::Section","value":"Section { radians, offset_radians }","parent":null,"children":[{"krate":0,"index":6221},{"krate":0,"index":6222}],"decl_id":null,"docs":" A section of the oval will be drawn where the section is specified by the given radians.","sig":null,"attributes":[{"value":"/ A section of the oval will be drawn where the section is specified by the given radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550135,"byte_end":550227,"line_start":41,"line_end":41,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550228,"byte_end":550231,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ A section with `radians` of `2.0 * PI` would be equivalent to the full `Oval`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550232,"byte_end":550314,"line_start":43,"line_end":43,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":6221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550445,"byte_end":550452,"line_start":47,"line_end":47,"column_start":9,"column_end":16},"name":"radians","qualname":"::widget::primitive::shape::oval::Section::radians","value":"f64","parent":{"krate":0,"index":6220},"children":[],"decl_id":null,"docs":" The angle occuppied by the section's circumference.\n","sig":null,"attributes":[{"value":"/ The angle occuppied by the section's circumference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550381,"byte_end":550436,"line_start":46,"line_end":46,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":6222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550593,"byte_end":550607,"line_start":51,"line_end":51,"column_start":9,"column_end":23},"name":"offset_radians","qualname":"::widget::primitive::shape::oval::Section::offset_radians","value":"f64","parent":{"krate":0,"index":6220},"children":[],"decl_id":null,"docs":" The radians at which the section will begin.","sig":null,"attributes":[{"value":"/ The radians at which the section will begin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550466,"byte_end":550514,"line_start":48,"line_end":48,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550519,"byte_end":550522,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ A value of `0.0` will begin at the right of the oval.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550527,"byte_end":550584,"line_start":50,"line_end":50,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":6232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550803,"byte_end":550808,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::shape::oval::State","value":"State { resolution, section }","parent":null,"children":[{"krate":0,"index":6234},{"krate":0,"index":6235}],"decl_id":null,"docs":" Unique state for the **Oval**.\n","sig":null,"attributes":[{"value":"/ Unique state for the **Oval**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550716,"byte_end":550750,"line_start":58,"line_end":58,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550873,"byte_end":550883,"line_start":62,"line_end":62,"column_start":9,"column_end":19},"name":"resolution","qualname":"::widget::primitive::shape::oval::State::resolution","value":"usize","parent":{"krate":0,"index":6232},"children":[],"decl_id":null,"docs":" The number of lines used to draw the edge.\n","sig":null,"attributes":[{"value":"/ The number of lines used to draw the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550818,"byte_end":550864,"line_start":61,"line_end":61,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550973,"byte_end":550980,"line_start":64,"line_end":64,"column_start":9,"column_end":16},"name":"section","qualname":"::widget::primitive::shape::oval::State::section","value":"S","parent":{"krate":0,"index":6232},"children":[],"decl_id":null,"docs":" A type describing the section of the `Oval` that is to be drawn.\n","sig":null,"attributes":[{"value":"/ A type describing the section of the `Oval` that is to be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550896,"byte_end":550964,"line_start":63,"line_end":63,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":2054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551054,"byte_end":551072,"line_start":68,"line_end":68,"column_start":11,"column_end":29},"name":"DEFAULT_RESOLUTION","qualname":"::widget::primitive::shape::oval::DEFAULT_RESOLUTION","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The default circle resolution if none is specified.\n","sig":null,"attributes":[{"value":"/ The default circle resolution if none is specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550988,"byte_end":551043,"line_start":67,"line_end":67,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551179,"byte_end":551185,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"styled","qualname":"<Oval<Full>>::styled","value":"fn (dim: Dimensions, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build an **Oval** with the given dimensions and style.\n","sig":null,"attributes":[{"value":"/ Build an **Oval** with the given dimensions and style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551109,"byte_end":551167,"line_start":71,"line_end":71,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551470,"byte_end":551474,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"fill","qualname":"<Oval<Full>>::fill","value":"fn (dim: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Fill**ed **Oval**.\n","sig":null,"attributes":[{"value":"/ Build a new **Fill**ed **Oval**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551422,"byte_end":551458,"line_start":81,"line_end":81,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551623,"byte_end":551632,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"fill_with","qualname":"<Oval<Full>>::fill_with","value":"fn (dim: Dimensions, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Oval** **Fill**ed with the given color.\n","sig":null,"attributes":[{"value":"/ Build a new **Oval** **Fill**ed with the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551554,"byte_end":551611,"line_start":86,"line_end":86,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551793,"byte_end":551800,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"outline","qualname":"<Oval<Full>>::outline","value":"fn (dim: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Outline**d **Oval** widget.\n","sig":null,"attributes":[{"value":"/ Build a new **Outline**d **Oval** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551736,"byte_end":551781,"line_start":91,"line_end":91,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2060},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551954,"byte_end":551968,"line_start":97,"line_end":97,"column_start":12,"column_end":26},"name":"outline_styled","qualname":"<Oval<Full>>::outline_styled","value":"fn (dim: Dimensions, line_style: widget::line::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Oval** **Outline**d with the given style.\n","sig":null,"attributes":[{"value":"/ Build a new **Oval** **Outline**d with the given style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551883,"byte_end":551942,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552237,"byte_end":552247,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"name":"resolution","qualname":"<Oval<S>>::resolution","value":"fn (mut self, resolution: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The number of lines used to draw the edge.","sig":null,"attributes":[{"value":"/ The number of lines used to draw the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552121,"byte_end":552167,"line_start":103,"line_end":103,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552172,"byte_end":552175,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ By default, `DEFAULT_RESOLUTION` is used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552180,"byte_end":552225,"line_start":105,"line_end":105,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552512,"byte_end":552519,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"section","qualname":"<Oval<S>>::section","value":"fn (self, radians: Scalar) -> Oval<Section>","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Oval` where only a section is drawn.","sig":null,"attributes":[{"value":"/ Produces an `Oval` where only a section is drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552349,"byte_end":552402,"line_start":111,"line_end":111,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552407,"byte_end":552410,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The given `radians` describes the angle occuppied by the section's circumference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552415,"byte_end":552500,"line_start":113,"line_end":113,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552911,"byte_end":552925,"line_start":125,"line_end":125,"column_start":12,"column_end":26},"name":"offset_radians","qualname":"<Oval<Section>>::offset_radians","value":"fn (mut self, offset_radians: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The radians at which the section will begin.","sig":null,"attributes":[{"value":"/ The radians at which the section will begin.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552771,"byte_end":552819,"line_start":122,"line_end":122,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552824,"byte_end":552827,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ A value of `0.0` will begin at the rightmost point of the oval.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552832,"byte_end":552899,"line_start":124,"line_end":124,"column_start":5,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":2081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554238,"byte_end":554251,"line_start":176,"line_end":176,"column_start":8,"column_end":21},"name":"circumference","qualname":"::widget::primitive::shape::oval::circumference","value":"fn (rect: Rect, resolution: usize) -> Circumference","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.","sig":null,"attributes":[{"value":"/ An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554010,"byte_end":554107,"line_start":172,"line_end":172,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554108,"byte_end":554111,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ `resolution` is clamped to a minimum of `1` as to avoid creating a `Circumference` that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554112,"byte_end":554203,"line_start":174,"line_end":174,"column_start":1,"column_end":92}},{"value":"/ produces `NaN` values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554204,"byte_end":554230,"line_start":175,"line_end":175,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":2082},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554422,"byte_end":554431,"line_start":181,"line_end":181,"column_start":8,"column_end":17},"name":"triangles","qualname":"::widget::primitive::shape::oval::triangles","value":"fn (rect: Rect, resolution: usize) -> Triangles","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding the triangles that describe the given oval.\n","sig":null,"attributes":[{"value":"/ An iterator yielding the triangles that describe the given oval.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554346,"byte_end":554414,"line_start":180,"line_end":180,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":6250},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554732,"byte_end":554745,"line_start":189,"line_end":189,"column_start":12,"column_end":25},"name":"Circumference","qualname":"::widget::primitive::shape::oval::Circumference","value":"Circumference {  }","parent":null,"children":[{"krate":0,"index":6251},{"krate":0,"index":6252},{"krate":0,"index":6253},{"krate":0,"index":6254},{"krate":0,"index":6255},{"krate":0,"index":6256},{"krate":0,"index":6257}],"decl_id":null,"docs":" An iterator yielding the edges of an `Oval` (or some section of an `Oval`) as a circumference\n represented as a series of edges.\n","sig":null,"attributes":[{"value":"/ An iterator yielding the edges of an `Oval` (or some section of an `Oval`) as a circumference","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554529,"byte_end":554626,"line_start":185,"line_end":185,"column_start":1,"column_end":98}},{"value":"/ represented as a series of edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554627,"byte_end":554664,"line_start":186,"line_end":186,"column_start":1,"column_end":38}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554682,"byte_end":554720,"line_start":188,"line_end":188,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2085},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555529,"byte_end":555532,"line_start":217,"line_end":217,"column_start":12,"column_end":15},"name":"new","qualname":"<Circumference>::new","value":"fn (rect: Rect, mut resolution: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.","sig":null,"attributes":[{"value":"/ An iterator yielding the `Oval`'s edges as a circumference represented as a series of points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555285,"byte_end":555382,"line_start":213,"line_end":213,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555387,"byte_end":555390,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ `resolution` is clamped to a minimum of `1` as to avoid creating a `Circumference` that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555395,"byte_end":555486,"line_start":215,"line_end":215,"column_start":5,"column_end":96}},{"value":"/ produces `NaN` values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555491,"byte_end":555517,"line_start":216,"line_end":216,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2087},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556056,"byte_end":556067,"line_start":229,"line_end":229,"column_start":12,"column_end":23},"name":"new_section","qualname":"<Circumference>::new_section","value":"fn (rect: Rect, resolution: usize, radians: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Produces a new iterator that yields only a section of the `Oval`'s circumference, where the\n section is described via its angle in radians.","sig":null,"attributes":[{"value":"/ Produces a new iterator that yields only a section of the `Oval`'s circumference, where the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555759,"byte_end":555854,"line_start":224,"line_end":224,"column_start":5,"column_end":100}},{"value":"/ section is described via its angle in radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555859,"byte_end":555909,"line_start":225,"line_end":225,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555914,"byte_end":555917,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ `resolution` is clamped to a minimum of `1` as to avoid creating a `Circumference` that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":555922,"byte_end":556013,"line_start":227,"line_end":227,"column_start":5,"column_end":96}},{"value":"/ produces `NaN` values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556018,"byte_end":556044,"line_start":228,"line_end":228,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556326,"byte_end":556335,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"Triangles","qualname":"::widget::primitive::shape::oval::Triangles","value":"Triangles {  }","parent":null,"children":[{"krate":0,"index":6261},{"krate":0,"index":6262}],"decl_id":null,"docs":" An iterator yielding triangles that describe an oval or some section of an oval.\n","sig":null,"attributes":[{"value":"/ An iterator yielding triangles that describe an oval or some section of an oval.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556213,"byte_end":556297,"line_start":234,"line_end":234,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2089},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556748,"byte_end":556755,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"section","qualname":"<Circumference>::section","value":"fn (mut self, radians: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Produces a new iterator that yields only a section of the `Oval`'s circumference, where the\n section is described via its angle in radians.\n","sig":null,"attributes":[{"value":"/ Produces a new iterator that yields only a section of the `Oval`'s circumference, where the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556586,"byte_end":556681,"line_start":244,"line_end":244,"column_start":5,"column_end":100}},{"value":"/ section is described via its angle in radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556686,"byte_end":556736,"line_start":245,"line_end":245,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557163,"byte_end":557177,"line_start":256,"line_end":256,"column_start":12,"column_end":26},"name":"offset_radians","qualname":"<Circumference>::offset_radians","value":"fn (mut self, radians: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rotates the position at which the iterator starts yielding points by the given radians.","sig":null,"attributes":[{"value":"/ Rotates the position at which the iterator starts yielding points by the given radians.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556919,"byte_end":557010,"line_start":252,"line_end":252,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557015,"byte_end":557018,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This is particularly useful for yielding a different section of the circumference when","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557023,"byte_end":557113,"line_start":254,"line_end":254,"column_start":5,"column_end":95}},{"value":"/ using `circumference_section`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557118,"byte_end":557151,"line_start":255,"line_end":255,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2091},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557467,"byte_end":557476,"line_start":265,"line_end":265,"column_start":12,"column_end":21},"name":"triangles","qualname":"<Circumference>::triangles","value":"fn (mut self) -> Triangles","parent":null,"children":[],"decl_id":null,"docs":" Produces an `Iterator` yielding `Triangle`s.","sig":null,"attributes":[{"value":"/ Produces an `Iterator` yielding `Triangle`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557274,"byte_end":557322,"line_start":261,"line_end":261,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557327,"byte_end":557330,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Triangles are created by joining each edge yielded by the inner `Circumference` to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557335,"byte_end":557425,"line_start":263,"line_end":263,"column_start":5,"column_end":95}},{"value":"/ middle of the `Oval`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557430,"byte_end":557455,"line_start":264,"line_end":264,"column_start":5,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2099},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":558629,"byte_end":558636,"line_start":306,"line_end":306,"column_start":8,"column_end":15},"name":"is_over","qualname":"::widget::primitive::shape::oval::is_over","value":"fn (r: Rect, p: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given `Point` is over an oval at the given rect.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the given `Point` is over an oval at the given rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":558547,"byte_end":558621,"line_start":305,"line_end":305,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":2100},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":558943,"byte_end":558957,"line_start":315,"line_end":315,"column_start":8,"column_end":22},"name":"is_over_widget","qualname":"::widget::primitive::shape::oval::is_over_widget","value":"fn (widget: &graph::Container, point: Point, _: &Theme) -> widget::IsOver","parent":null,"children":[],"decl_id":null,"docs":" The function to use for picking whether a given point is over the oval.\n","sig":null,"attributes":[{"value":"/ The function to use for picking whether a given point is over the oval.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":558860,"byte_end":558935,"line_start":314,"line_end":314,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":2101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":559152,"byte_end":559167,"line_start":320,"line_end":320,"column_start":8,"column_end":23},"name":"is_over_section","qualname":"::widget::primitive::shape::oval::is_over_section","value":"fn (circumference: Circumference, p: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether or not the given point is over the section described\n","sig":null,"attributes":[{"value":"/ Returns whether or not the given point is over the section described","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":559072,"byte_end":559144,"line_start":319,"line_end":319,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":2102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":559373,"byte_end":559395,"line_start":325,"line_end":325,"column_start":8,"column_end":30},"name":"is_over_section_widget","qualname":"::widget::primitive::shape::oval::is_over_section_widget","value":"fn (widget: &graph::Container, p: Point, _: &Theme) -> widget::IsOver","parent":null,"children":[],"decl_id":null,"docs":" The function to use for picking whether a given point is over the oval section.\n","sig":null,"attributes":[{"value":"/ The function to use for picking whether a given point is over the oval section.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":559282,"byte_end":559365,"line_start":324,"line_end":324,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":2105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"polygon","qualname":"::widget::primitive::shape::polygon","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","parent":null,"children":[{"krate":0,"index":2106},{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":6265},{"krate":0,"index":6282},{"krate":0,"index":6279},{"krate":0,"index":6276},{"krate":0,"index":6271},{"krate":0,"index":6284},{"krate":0,"index":6293},{"krate":0,"index":6291},{"krate":0,"index":6287},{"krate":0,"index":6288},{"krate":0,"index":6295},{"krate":0,"index":6307},{"krate":0,"index":6305},{"krate":0,"index":6303},{"krate":0,"index":6300},{"krate":0,"index":6301},{"krate":0,"index":6308},{"krate":0,"index":6313},{"krate":0,"index":2122},{"krate":0,"index":2139},{"krate":0,"index":2158},{"krate":0,"index":2161},{"krate":0,"index":2163},{"krate":0,"index":2168},{"krate":0,"index":2171}],"decl_id":null,"docs":" A simple, non-interactive **Polygon** widget for drawing arbitrary convex shapes.\n","sig":null,"attributes":[{"value":"! A simple, non-interactive **Polygon** widget for drawing arbitrary convex shapes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":559970,"byte_end":560055,"line_start":1,"line_end":1,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6265},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560594,"byte_end":560601,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Polygon","qualname":"::widget::primitive::shape::polygon::Polygon","value":"Polygon { common, points, style, maybe_shift_to_centre_from }","parent":null,"children":[{"krate":0,"index":6270},{"krate":0,"index":6267},{"krate":0,"index":6268},{"krate":0,"index":6269}],"decl_id":null,"docs":" A basic, non-interactive, arbitrary **Polygon** widget.","sig":null,"attributes":[{"value":"/ A basic, non-interactive, arbitrary **Polygon** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560261,"byte_end":560320,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560321,"byte_end":560324,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The **Polygon** is described by specifying its corners in order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560325,"byte_end":560393,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560394,"byte_end":560397,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Polygon** will automatically close all shapes, so the given list of points does not need to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560398,"byte_end":560495,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ start and end with the same position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560496,"byte_end":560537,"line_start":16,"line_end":16,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":6270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560709,"byte_end":560715,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::shape::polygon::Polygon::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6265},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560611,"byte_end":560670,"line_start":19,"line_end":19,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560675,"byte_end":560700,"line_start":20,"line_end":20,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6267},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560810,"byte_end":560816,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"points","qualname":"::widget::primitive::shape::polygon::Polygon::points","value":"I","parent":{"krate":0,"index":6265},"children":[],"decl_id":null,"docs":" The points describing the corners of the **Polygon**.\n","sig":null,"attributes":[{"value":"/ The points describing the corners of the **Polygon**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560744,"byte_end":560801,"line_start":22,"line_end":22,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":6268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560873,"byte_end":560878,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::shape::polygon::Polygon::style","value":"widget::primitive::shape::Style","parent":{"krate":0,"index":6265},"children":[],"decl_id":null,"docs":" Unique styling for the **Polygon**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **Polygon**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560825,"byte_end":560864,"line_start":24,"line_end":24,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":6269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560985,"byte_end":561011,"line_start":27,"line_end":27,"column_start":9,"column_end":35},"name":"maybe_shift_to_centre_from","qualname":"::widget::primitive::shape::polygon::Polygon::maybe_shift_to_centre_from","value":"std::option::Option<[f64; 2]>","parent":{"krate":0,"index":6265},"children":[],"decl_id":null,"docs":" Whether or not the points should be automatically centred to the widget position.\n","sig":null,"attributes":[{"value":"/ Whether or not the points should be automatically centred to the widget position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":560891,"byte_end":560976,"line_start":26,"line_end":26,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":6284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561115,"byte_end":561120,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::shape::polygon::State","value":"State { points }","parent":null,"children":[{"krate":0,"index":6285},{"krate":0,"index":6286}],"decl_id":null,"docs":" Unique state for the **Polygon**.\n","sig":null,"attributes":[{"value":"/ Unique state for the **Polygon**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561031,"byte_end":561068,"line_start":30,"line_end":30,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":6286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561306,"byte_end":561312,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"points","qualname":"::widget::primitive::shape::polygon::State::points","value":"std::vec::Vec<[f64; 2]>","parent":{"krate":0,"index":6284},"children":[],"decl_id":null,"docs":" An owned version of the points yielded by the **Polygon**'s `points` iterator.\n","sig":null,"attributes":[{"value":"/ An owned version of the points yielded by the **Polygon**'s `points` iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561215,"byte_end":561297,"line_start":35,"line_end":35,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561510,"byte_end":561517,"line_start":43,"line_end":43,"column_start":5,"column_end":12},"name":"Outline","qualname":"::widget::primitive::shape::polygon::Kind::Outline","value":"Kind::Outline","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":" Only the outline of the rectangle is drawn.\n","sig":null,"attributes":[{"value":"/ Only the outline of the rectangle is drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561458,"byte_end":561505,"line_start":42,"line_end":42,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561577,"byte_end":561581,"line_start":45,"line_end":45,"column_start":5,"column_end":9},"name":"Fill","qualname":"::widget::primitive::shape::polygon::Kind::Fill","value":"Kind::Fill","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":" The rectangle area is filled with some color.\n","sig":null,"attributes":[{"value":"/ The rectangle area is filled with some color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561523,"byte_end":561572,"line_start":44,"line_end":44,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":6295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561447,"byte_end":561451,"line_start":41,"line_end":41,"column_start":10,"column_end":14},"name":"Kind","qualname":"::widget::primitive::shape::polygon::Kind","value":"Kind::{Outline, Fill}","parent":null,"children":[{"krate":0,"index":6296},{"krate":0,"index":6298}],"decl_id":null,"docs":" Whether the rectangle is drawn as an outline or a filled color.\n","sig":null,"attributes":[{"value":"/ Whether the rectangle is drawn as an outline or a filled color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561329,"byte_end":561396,"line_start":39,"line_end":39,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":6308},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561720,"byte_end":561729,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"Triangles","qualname":"::widget::primitive::shape::polygon::Triangles","value":"Triangles {  }","parent":null,"children":[{"krate":0,"index":6310},{"krate":0,"index":6311},{"krate":0,"index":6312}],"decl_id":null,"docs":" An iterator that triangulates a polygon represented by a sequence of points describing its\n edges.\n","sig":null,"attributes":[{"value":"/ An iterator that triangulates a polygon represented by a sequence of points describing its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561586,"byte_end":561680,"line_start":48,"line_end":48,"column_start":1,"column_end":95}},{"value":"/ edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561681,"byte_end":561691,"line_start":49,"line_end":49,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2124},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561879,"byte_end":561885,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"styled","qualname":"<Polygon<I>>::styled","value":"fn (points: I, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a polygon with the given points and style.\n","sig":null,"attributes":[{"value":"/ Build a polygon with the given points and style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561815,"byte_end":561867,"line_start":60,"line_end":60,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562182,"byte_end":562186,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"fill","qualname":"<Polygon<I>>::fill","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a **Polygon** with the default **Fill** style.\n","sig":null,"attributes":[{"value":"/ Build a **Polygon** with the default **Fill** style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562114,"byte_end":562170,"line_start":70,"line_end":70,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562338,"byte_end":562347,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"fill_with","qualname":"<Polygon<I>>::fill_with","value":"fn (points: I, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a **Polygon** **Fill**ed with the given **Color**.\n","sig":null,"attributes":[{"value":"/ Build a **Polygon** **Fill**ed with the given **Color**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562266,"byte_end":562326,"line_start":75,"line_end":75,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562522,"byte_end":562529,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"outline","qualname":"<Polygon<I>>::outline","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a **Polygon** with the default **Outline** style.\n","sig":null,"attributes":[{"value":"/ Build a **Polygon** with the default **Outline** style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562451,"byte_end":562510,"line_start":80,"line_end":80,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562688,"byte_end":562702,"line_start":86,"line_end":86,"column_start":12,"column_end":26},"name":"outline_styled","qualname":"<Polygon<I>>::outline_styled","value":"fn (points: I, style: widget::line::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a **Polygon** **Outline**ed with the given line style.\n","sig":null,"attributes":[{"value":"/ Build a **Polygon** **Outline**ed with the given line style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562612,"byte_end":562676,"line_start":85,"line_end":85,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563282,"byte_end":563292,"line_start":98,"line_end":98,"column_start":12,"column_end":22},"name":"abs_styled","qualname":"<Polygon<I>>::abs_styled","value":"fn (points: I, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new filled **Polygon** whose bounding box is fit to the absolute co-ordinates of\n the points.","sig":null,"attributes":[{"value":"/ Build a new filled **Polygon** whose bounding box is fit to the absolute co-ordinates of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562825,"byte_end":562917,"line_start":90,"line_end":90,"column_start":5,"column_end":97}},{"value":"/ the points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562922,"byte_end":562937,"line_start":91,"line_end":91,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562942,"byte_end":562945,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This requires that the `points` iterator is `Clone` so that we may iterate through and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":562950,"byte_end":563040,"line_start":93,"line_end":93,"column_start":5,"column_end":95}},{"value":"/ determine the bounding box of the `points`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563045,"byte_end":563092,"line_start":94,"line_end":94,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563097,"byte_end":563100,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ If you would rather centre the points to the middle of the bounding box, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563105,"byte_end":563185,"line_start":96,"line_end":96,"column_start":5,"column_end":85}},{"value":"/ the [**Polygon::centred**](./struct.Polygon#method.centred) methods instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563190,"byte_end":563270,"line_start":97,"line_end":97,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563732,"byte_end":563740,"line_start":108,"line_end":108,"column_start":12,"column_end":20},"name":"abs_fill","qualname":"<Polygon<I>>::abs_fill","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n **Polygon** with the default **Fill** style.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563575,"byte_end":563667,"line_start":106,"line_end":106,"column_start":5,"column_end":97}},{"value":"/ **Polygon** with the default **Fill** style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563672,"byte_end":563720,"line_start":107,"line_end":107,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564040,"byte_end":564053,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"abs_fill_with","qualname":"<Polygon<I>>::abs_fill_with","value":"fn (points: I, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n **Polygon** **Fill**ed with the given **Color**.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563879,"byte_end":563971,"line_start":114,"line_end":114,"column_start":5,"column_end":97}},{"value":"/ **Polygon** **Fill**ed with the given **Color**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":563976,"byte_end":564028,"line_start":115,"line_end":115,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564376,"byte_end":564387,"line_start":124,"line_end":124,"column_start":12,"column_end":23},"name":"abs_outline","qualname":"<Polygon<I>>::abs_outline","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n **Polygon** with the default **Outline** style.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564216,"byte_end":564308,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/ **Polygon** with the default **Outline** style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564313,"byte_end":564364,"line_start":123,"line_end":123,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564689,"byte_end":564707,"line_start":132,"line_end":132,"column_start":12,"column_end":30},"name":"abs_outline_styled","qualname":"<Polygon<I>>::abs_outline_styled","value":"fn (points: I, style: widget::line::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the\n **Polygon** with the given **Outline** styling.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::abs_styled**](./struct.Polygon#method.abs_styled) but builds the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564529,"byte_end":564621,"line_start":130,"line_end":130,"column_start":5,"column_end":97}},{"value":"/ **Polygon** with the given **Outline** styling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564626,"byte_end":564677,"line_start":131,"line_end":131,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565415,"byte_end":565429,"line_start":146,"line_end":146,"column_start":12,"column_end":26},"name":"centred_styled","qualname":"<Polygon<I>>::centred_styled","value":"fn (points: I, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Polygon** and shift the location of the points so that the centre of their\n bounding rectangle lies at the position determined for the **Polygon** widget.","sig":null,"attributes":[{"value":"/ Build a new **Polygon** and shift the location of the points so that the centre of their","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564889,"byte_end":564981,"line_start":138,"line_end":138,"column_start":5,"column_end":97}},{"value":"/ bounding rectangle lies at the position determined for the **Polygon** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":564986,"byte_end":565068,"line_start":139,"line_end":139,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565073,"byte_end":565076,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ This is useful if your points simply describe a shape and you want to position them using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565081,"byte_end":565174,"line_start":141,"line_end":141,"column_start":5,"column_end":98}},{"value":"/ conrod's auto-layout and/or **Positionable** methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565179,"byte_end":565236,"line_start":142,"line_end":142,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565241,"byte_end":565244,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ If you would rather centre the bounding box to the points, use the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565249,"byte_end":565319,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ [**Polygon::abs**](./struct.Polygon#method.abs) constructor method instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565324,"byte_end":565403,"line_start":145,"line_end":145,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565964,"byte_end":565976,"line_start":158,"line_end":158,"column_start":12,"column_end":24},"name":"centred_fill","qualname":"<Polygon<I>>::centred_fill","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\n constructs the **Polygon** with the default **Fill** style.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565795,"byte_end":565884,"line_start":156,"line_end":156,"column_start":5,"column_end":94}},{"value":"/ constructs the **Polygon** with the default **Fill** style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":565889,"byte_end":565952,"line_start":157,"line_end":157,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566288,"byte_end":566305,"line_start":166,"line_end":166,"column_start":12,"column_end":29},"name":"centred_fill_with","qualname":"<Polygon<I>>::centred_fill_with","value":"fn (points: I, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\n constructs the **Polygon** **Fill**ed with the given color.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566119,"byte_end":566208,"line_start":164,"line_end":164,"column_start":5,"column_end":94}},{"value":"/ constructs the **Polygon** **Fill**ed with the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566213,"byte_end":566276,"line_start":165,"line_end":165,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566644,"byte_end":566659,"line_start":174,"line_end":174,"column_start":12,"column_end":27},"name":"centred_outline","qualname":"<Polygon<I>>::centred_outline","value":"fn (points: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\n constructs the **Polygon** with the default **Outline** style.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566472,"byte_end":566561,"line_start":172,"line_end":172,"column_start":5,"column_end":94}},{"value":"/ constructs the **Polygon** with the default **Outline** style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566566,"byte_end":566632,"line_start":173,"line_end":173,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566978,"byte_end":567000,"line_start":182,"line_end":182,"column_start":12,"column_end":34},"name":"centred_outline_styled","qualname":"<Polygon<I>>::centred_outline_styled","value":"fn (points: I, style: widget::line::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but\n constructs the **Polygon** **Outline**d with the given styling.\n","sig":null,"attributes":[{"value":"/ The same as [**Polygon::centred_styled**](./struct.Polygon#method.centred_styled) but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566805,"byte_end":566894,"line_start":180,"line_end":180,"column_start":5,"column_end":94}},{"value":"/ constructs the **Polygon** **Outline**d with the given styling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":566899,"byte_end":566966,"line_start":181,"line_end":181,"column_start":5,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":2161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":569704,"byte_end":569713,"line_start":271,"line_end":271,"column_start":8,"column_end":17},"name":"triangles","qualname":"::widget::primitive::shape::polygon::triangles","value":"fn <I> (points: I) -> Option<Triangles<I::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Triangulate the polygon given as a list of `Point`s describing its sides.","sig":null,"attributes":[{"value":"/ Triangulate the polygon given as a list of `Point`s describing its sides.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":569545,"byte_end":569622,"line_start":268,"line_end":268,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":569623,"byte_end":569626,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if the given iterator yields less than two points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":569627,"byte_end":569696,"line_start":270,"line_end":270,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":2168},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":570563,"byte_end":570570,"line_start":305,"line_end":305,"column_start":8,"column_end":15},"name":"is_over","qualname":"::widget::primitive::shape::polygon::is_over","value":"fn <I> (points: I, point: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given `Point` is over the polygon described by the given series of\n points.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the given `Point` is over the polygon described by the given series of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":570451,"byte_end":570543,"line_start":303,"line_end":303,"column_start":1,"column_end":93}},{"value":"/ points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":570544,"byte_end":570555,"line_start":304,"line_end":304,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":570824,"byte_end":570838,"line_start":313,"line_end":313,"column_start":8,"column_end":22},"name":"is_over_widget","qualname":"::widget::primitive::shape::polygon::is_over_widget","value":"fn (widget: &graph::Container, point: Point, _: &Theme) -> widget::IsOver","parent":null,"children":[],"decl_id":null,"docs":" The function to use for picking whether a given point is over the polygon.\n","sig":null,"attributes":[{"value":"/ The function to use for picking whether a given point is over the polygon.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":570738,"byte_end":570816,"line_start":312,"line_end":312,"column_start":1,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":2174},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rectangle","qualname":"::widget::primitive::shape::rectangle","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","parent":null,"children":[{"krate":0,"index":2175},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":6316},{"krate":0,"index":6327},{"krate":0,"index":6325},{"krate":0,"index":6323},{"krate":0,"index":6319},{"krate":0,"index":6328},{"krate":0,"index":6338},{"krate":0,"index":6336},{"krate":0,"index":6334},{"krate":0,"index":6330},{"krate":0,"index":6331},{"krate":0,"index":6339},{"krate":0,"index":6351},{"krate":0,"index":6349},{"krate":0,"index":6347},{"krate":0,"index":6344},{"krate":0,"index":6345},{"krate":0,"index":2186},{"krate":0,"index":2192},{"krate":0,"index":2200},{"krate":0,"index":2202}],"decl_id":null,"docs":" A simple, non-interactive rectangle shape widget.","sig":null,"attributes":[{"value":"! A simple, non-interactive rectangle shape widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571114,"byte_end":571167,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571168,"byte_end":571171,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Due to the frequency of its use in GUIs, the `Rectangle` gets its own widget to allow backends","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571172,"byte_end":571270,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"! to specialise their rendering implementations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571271,"byte_end":571321,"line_start":4,"line_end":4,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571573,"byte_end":571582,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Rectangle","qualname":"::widget::primitive::shape::rectangle::Rectangle","value":"Rectangle { common, style }","parent":null,"children":[{"krate":0,"index":6318},{"krate":0,"index":6317}],"decl_id":null,"docs":" A basic, non-interactive rectangle shape widget.\n","sig":null,"attributes":[{"value":"/ A basic, non-interactive rectangle shape widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571464,"byte_end":571516,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":6318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571687,"byte_end":571693,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::shape::rectangle::Rectangle::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6316},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571589,"byte_end":571648,"line_start":15,"line_end":15,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571653,"byte_end":571678,"line_start":16,"line_end":16,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571772,"byte_end":571777,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::shape::rectangle::Rectangle::style","value":"widget::primitive::shape::Style","parent":{"krate":0,"index":6316},"children":[],"decl_id":null,"docs":" Unique styling for the **Rectangle**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **Rectangle**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571722,"byte_end":571763,"line_start":18,"line_end":18,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571877,"byte_end":571882,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::shape::rectangle::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":6329}],"decl_id":null,"docs":" Unique state for the Rectangle.\n","sig":null,"attributes":[{"value":"/ Unique state for the Rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571789,"byte_end":571824,"line_start":22,"line_end":22,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572085,"byte_end":572092,"line_start":32,"line_end":32,"column_start":5,"column_end":12},"name":"Outline","qualname":"::widget::primitive::shape::rectangle::Kind::Outline","value":"Kind::Outline","parent":{"krate":0,"index":6339},"children":[],"decl_id":null,"docs":" Only the outline of the rectangle is drawn.\n","sig":null,"attributes":[{"value":"/ Only the outline of the rectangle is drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572033,"byte_end":572080,"line_start":31,"line_end":31,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572152,"byte_end":572156,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"Fill","qualname":"::widget::primitive::shape::rectangle::Kind::Fill","value":"Kind::Fill","parent":{"krate":0,"index":6339},"children":[],"decl_id":null,"docs":" The rectangle area is filled with some color.\n","sig":null,"attributes":[{"value":"/ The rectangle area is filled with some color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572098,"byte_end":572147,"line_start":33,"line_end":33,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":6339},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572022,"byte_end":572026,"line_start":30,"line_end":30,"column_start":10,"column_end":14},"name":"Kind","qualname":"::widget::primitive::shape::rectangle::Kind","value":"Kind::{Outline, Fill}","parent":null,"children":[{"krate":0,"index":6340},{"krate":0,"index":6342}],"decl_id":null,"docs":" Whether the rectangle is drawn as an outline or a filled color.\n","sig":null,"attributes":[{"value":"/ Whether the rectangle is drawn as an outline or a filled color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":571904,"byte_end":571971,"line_start":28,"line_end":28,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2187},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572248,"byte_end":572254,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"name":"styled","qualname":"<Rectangle>::styled","value":"fn (dim: Dimensions, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a rectangle with the dimensions and style.\n","sig":null,"attributes":[{"value":"/ Build a rectangle with the dimensions and style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572184,"byte_end":572236,"line_start":40,"line_end":40,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572470,"byte_end":572474,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"fill","qualname":"<Rectangle>::fill","value":"fn (dim: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new filled rectangle.\n","sig":null,"attributes":[{"value":"/ Build a new filled rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572425,"byte_end":572458,"line_start":48,"line_end":48,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572639,"byte_end":572648,"line_start":54,"line_end":54,"column_start":12,"column_end":21},"name":"fill_with","qualname":"<Rectangle>::fill_with","value":"fn (dim: Dimensions, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new filled rectangle widget filled with the given color.\n","sig":null,"attributes":[{"value":"/ Build a new filled rectangle widget filled with the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572559,"byte_end":572627,"line_start":53,"line_end":53,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572811,"byte_end":572818,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"outline","qualname":"<Rectangle>::outline","value":"fn (dim: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new outlined rectangle widget.\n","sig":null,"attributes":[{"value":"/ Build a new outlined rectangle widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572757,"byte_end":572799,"line_start":58,"line_end":58,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572975,"byte_end":572989,"line_start":64,"line_end":64,"column_start":12,"column_end":26},"name":"outline_styled","qualname":"<Rectangle>::outline_styled","value":"fn (dim: Dimensions, line_style: widget::line::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build an outlined rectangle rather than a filled one.\n","sig":null,"attributes":[{"value":"/ Build an outlined rectangle rather than a filled one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572906,"byte_end":572963,"line_start":63,"line_end":63,"column_start":5,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":2202},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":574041,"byte_end":574050,"line_start":112,"line_end":112,"column_start":8,"column_end":17},"name":"triangles","qualname":"::widget::primitive::shape::rectangle::triangles","value":"fn (rect: Rect) -> (Triangle<Point>, Triangle<Point>)","parent":null,"children":[],"decl_id":null,"docs":" The two triangles that describe the given `Rect`.\n","sig":null,"attributes":[{"value":"/ The two triangles that describe the given `Rect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":573980,"byte_end":574033,"line_start":111,"line_end":111,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":2203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"triangles","qualname":"::widget::primitive::shape::triangles","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2218},{"krate":0,"index":6352},{"krate":0,"index":6373},{"krate":0,"index":6369},{"krate":0,"index":6365},{"krate":0,"index":6359},{"krate":0,"index":2219},{"krate":0,"index":2222},{"krate":0,"index":6376},{"krate":0,"index":6387},{"krate":0,"index":6385},{"krate":0,"index":6383},{"krate":0,"index":6379},{"krate":0,"index":6380},{"krate":0,"index":6388},{"krate":0,"index":6397},{"krate":0,"index":6395},{"krate":0,"index":6393},{"krate":0,"index":6390},{"krate":0,"index":6391},{"krate":0,"index":6398},{"krate":0,"index":6415},{"krate":0,"index":6412},{"krate":0,"index":6409},{"krate":0,"index":6403},{"krate":0,"index":6405},{"krate":0,"index":2224},{"krate":0,"index":6417},{"krate":0,"index":6429},{"krate":0,"index":6426},{"krate":0,"index":6420},{"krate":0,"index":6422},{"krate":0,"index":2225},{"krate":0,"index":2228},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":6432},{"krate":0,"index":6444},{"krate":0,"index":6440},{"krate":0,"index":6436},{"krate":0,"index":2235},{"krate":0,"index":2240},{"krate":0,"index":2243},{"krate":0,"index":2248},{"krate":0,"index":2253},{"krate":0,"index":2256},{"krate":0,"index":2261},{"krate":0,"index":2264},{"krate":0,"index":2268},{"krate":0,"index":2272},{"krate":0,"index":2275},{"krate":0,"index":2289},{"krate":0,"index":2296},{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":2328}],"decl_id":null,"docs":" A primitive widget that allows for drawing using a list of triangles.\n","sig":null,"attributes":[{"value":"! A primitive widget that allows for drawing using a list of triangles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574233,"byte_end":574306,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":6352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574565,"byte_end":574574,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Triangles","qualname":"::widget::primitive::shape::triangles::Triangles","value":"Triangles { common, style, triangles, maybe_shift_to_centre_from }","parent":null,"children":[{"krate":0,"index":6358},{"krate":0,"index":6355},{"krate":0,"index":6356},{"krate":0,"index":6357}],"decl_id":null,"docs":" A widget that allows for drawing a list of triangles.\n","sig":null,"attributes":[{"value":"/ A widget that allows for drawing a list of triangles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574451,"byte_end":574508,"line_start":10,"line_end":10,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":6358},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574685,"byte_end":574691,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::shape::triangles::Triangles::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6352},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574587,"byte_end":574646,"line_start":13,"line_end":13,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574651,"byte_end":574676,"line_start":14,"line_end":14,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574770,"byte_end":574775,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::shape::triangles::Triangles::style","value":"S","parent":{"krate":0,"index":6352},"children":[],"decl_id":null,"docs":" Unique styling for the **Triangles**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **Triangles**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574720,"byte_end":574761,"line_start":16,"line_end":16,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6356},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574832,"byte_end":574841,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"triangles","qualname":"::widget::primitive::shape::triangles::Triangles::triangles","value":"I","parent":{"krate":0,"index":6352},"children":[],"decl_id":null,"docs":" All the point in the triangle list.\n","sig":null,"attributes":[{"value":"/ All the point in the triangle list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574784,"byte_end":574823,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":6357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574947,"byte_end":574973,"line_start":21,"line_end":21,"column_start":9,"column_end":35},"name":"maybe_shift_to_centre_from","qualname":"::widget::primitive::shape::triangles::Triangles::maybe_shift_to_centre_from","value":"std::option::Option<[f64; 2]>","parent":{"krate":0,"index":6352},"children":[],"decl_id":null,"docs":" Whether or not the triangles should be automatically centred to the widget position.\n","sig":null,"attributes":[{"value":"/ Whether or not the triangles should be automatically centred to the widget position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574850,"byte_end":574938,"line_start":20,"line_end":20,"column_start":5,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":2219},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575064,"byte_end":575070,"line_start":25,"line_end":25,"column_start":11,"column_end":17},"name":"Vertex","qualname":"::widget::primitive::shape::triangles::Vertex","value":"Vertex: Clone + Copy + PartialEq","parent":null,"children":[{"krate":0,"index":2220},{"krate":0,"index":2221}],"decl_id":null,"docs":" Types used as vertices that make up a list of triangles.\n","sig":null,"attributes":[{"value":"/ Types used as vertices that make up a list of triangles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":574993,"byte_end":575053,"line_start":24,"line_end":24,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575146,"byte_end":575151,"line_start":27,"line_end":27,"column_start":8,"column_end":13},"name":"point","qualname":"::widget::primitive::shape::triangles::Vertex::point","value":"fn (&self) -> Point","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" The x y location of the vertex.\n","sig":null,"attributes":[{"value":"/ The x y location of the vertex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575103,"byte_end":575138,"line_start":26,"line_end":26,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575254,"byte_end":575257,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"add","qualname":"::widget::primitive::shape::triangles::Vertex::add","value":"fn (self, Point) -> Self","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" Add the given vector onto the position of self and return the result.\n","sig":null,"attributes":[{"value":"/ Add the given vector onto the position of self and return the result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575173,"byte_end":575246,"line_start":28,"line_end":28,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":2222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575335,"byte_end":575340,"line_start":33,"line_end":33,"column_start":11,"column_end":16},"name":"Style","qualname":"::widget::primitive::shape::triangles::Style","value":"Style: widget::Style + Clone + Send","parent":null,"children":[{"krate":0,"index":2223}],"decl_id":null,"docs":" Unique styling types for `Triangles`.\n","sig":null,"attributes":[{"value":"/ Unique styling types for `Triangles`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575283,"byte_end":575324,"line_start":32,"line_end":32,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575462,"byte_end":575468,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"name":"Vertex","qualname":"::widget::primitive::shape::triangles::Style::Vertex","value":"type Vertex: Vertex + Send;","parent":{"krate":0,"index":2222},"children":[],"decl_id":null,"docs":" The type of vertices that make up the list of triangles for this style.\n","sig":null,"attributes":[{"value":"/ The type of vertices that make up the list of triangles for this style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575377,"byte_end":575452,"line_start":34,"line_end":34,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":6376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575589,"byte_end":575600,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"SingleColor","qualname":"::widget::primitive::shape::triangles::SingleColor","value":"","parent":null,"children":[],"decl_id":null,"docs":" All triangles colored with a single `Color`.\n","sig":null,"attributes":[{"value":"/ All triangles colored with a single `Color`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575488,"byte_end":575536,"line_start":38,"line_end":38,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":6388},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575713,"byte_end":575723,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"MultiColor","qualname":"::widget::primitive::shape::triangles::MultiColor","value":"","parent":null,"children":[],"decl_id":null,"docs":" Each triangle is colored per vertex.\n","sig":null,"attributes":[{"value":"/ Each triangle is colored per vertex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575620,"byte_end":575660,"line_start":42,"line_end":42,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6398},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575829,"byte_end":575837,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"Triangle","qualname":"::widget::primitive::shape::triangles::Triangle","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single triangle described by three vertices.\n","sig":null,"attributes":[{"value":"/ A single triangle described by three vertices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575726,"byte_end":575776,"line_start":46,"line_end":46,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":2224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575922,"byte_end":575934,"line_start":52,"line_end":52,"column_start":10,"column_end":22},"name":"ColoredPoint","qualname":"::widget::primitive::shape::triangles::ColoredPoint","value":"(Point, color::Rgba)","parent":null,"children":[],"decl_id":null,"docs":" A point with an associated color.\n","sig":null,"attributes":[{"value":"/ A point with an associated color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575875,"byte_end":575912,"line_start":51,"line_end":51,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":6417},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576065,"byte_end":576070,"line_start":56,"line_end":56,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::shape::triangles::State","value":"State { triangles }","parent":null,"children":[{"krate":0,"index":6419}],"decl_id":null,"docs":" Unique state stored between updates for a `Triangles`.\n","sig":null,"attributes":[{"value":"/ Unique state stored between updates for a `Triangles`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575960,"byte_end":576018,"line_start":54,"line_end":54,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":6419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576134,"byte_end":576143,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"name":"triangles","qualname":"::widget::primitive::shape::triangles::State::triangles","value":"T","parent":{"krate":0,"index":6417},"children":[],"decl_id":null,"docs":" The triangles that make up the triangles.\n","sig":null,"attributes":[{"value":"/ The triangles that make up the triangles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576080,"byte_end":576125,"line_start":57,"line_end":57,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6432},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576861,"byte_end":576882,"line_start":95,"line_end":95,"column_start":12,"column_end":33},"name":"TrianglesUnpositioned","qualname":"::widget::primitive::shape::triangles::TrianglesUnpositioned","value":"TrianglesUnpositioned {  }","parent":null,"children":[{"krate":0,"index":6435}],"decl_id":null,"docs":" When beginning to build `Triangles` they are initially unpositioned.","sig":null,"attributes":[{"value":"/ When beginning to build `Triangles` they are initially unpositioned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576612,"byte_end":576684,"line_start":90,"line_end":90,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576685,"byte_end":576688,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This is an intemediary type which allows the user to choose how to position the bounding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576689,"byte_end":576781,"line_start":92,"line_end":92,"column_start":1,"column_end":93}},{"value":"/ rectangle relative to the points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576782,"byte_end":576819,"line_start":93,"line_end":93,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577074,"byte_end":577077,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"add","qualname":"<Triangle<V>>::add","value":"fn (self, amount: Point) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Shift the triangle by the given amount by adding it onto the position of each point.\n","sig":null,"attributes":[{"value":"/ Shift the triangle by the given amount by adding it onto the position of each point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576974,"byte_end":577062,"line_start":103,"line_end":103,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577318,"byte_end":577324,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"points","qualname":"<Triangle<V>>::points","value":"fn (self) -> [Point; 3]","parent":null,"children":[],"decl_id":null,"docs":" The three points that make up the triangle.\n","sig":null,"attributes":[{"value":"/ The three points that make up the triangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577259,"byte_end":577306,"line_start":111,"line_end":111,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577519,"byte_end":577524,"line_start":119,"line_end":119,"column_start":12,"column_end":17},"name":"color","qualname":"<Triangle<Point>>::color","value":"fn (self, a: color::Rgba, b: color::Rgba, c: color::Rgba) -> Triangle<ColoredPoint>","parent":null,"children":[],"decl_id":null,"docs":" Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>`.\n","sig":null,"attributes":[{"value":"/ Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577443,"byte_end":577507,"line_start":118,"line_end":118,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577777,"byte_end":577786,"line_start":124,"line_end":124,"column_start":12,"column_end":21},"name":"color_all","qualname":"<Triangle<Point>>::color_all","value":"fn (self, color: color::Rgba) -> Triangle<ColoredPoint>","parent":null,"children":[],"decl_id":null,"docs":" Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>` using the given color.\n","sig":null,"attributes":[{"value":"/ Convert the `Triangle<Point>` to a `Triangle<ColoredPoint>` using the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577679,"byte_end":577765,"line_start":123,"line_end":123,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579127,"byte_end":579139,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"single_color","qualname":"<Triangles<SingleColor, I>>::single_color","value":"fn <C> (color: C, points: I) -> TrianglesUnpositioned<SingleColor, I>","parent":null,"children":[],"decl_id":null,"docs":" A list of triangles described by the given points.","sig":null,"attributes":[{"value":"/ A list of triangles described by the given points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578995,"byte_end":579049,"line_start":185,"line_end":185,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579054,"byte_end":579057,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ All triangles are colored with the given `Color`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579062,"byte_end":579115,"line_start":187,"line_end":187,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579608,"byte_end":579619,"line_start":202,"line_end":202,"column_start":12,"column_end":23},"name":"multi_color","qualname":"<Triangles<MultiColor, I>>::multi_color","value":"fn (points: I) -> TrianglesUnpositioned<MultiColor, I>","parent":null,"children":[],"decl_id":null,"docs":" A list of triangles described by the given points.","sig":null,"attributes":[{"value":"/ A list of triangles described by the given points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579481,"byte_end":579535,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579540,"byte_end":579543,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Every vertex specifies its own unique color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579548,"byte_end":579596,"line_start":201,"line_end":201,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581225,"byte_end":581243,"line_start":253,"line_end":253,"column_start":12,"column_end":30},"name":"with_bounding_rect","qualname":"<TrianglesUnpositioned<S, I>>::with_bounding_rect","value":"fn (self, rect: Rect) -> Triangles<S, I>","parent":null,"children":[],"decl_id":null,"docs":" Specify the bounding rectangle for the **Triangles**.","sig":null,"attributes":[{"value":"/ Specify the bounding rectangle for the **Triangles**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580770,"byte_end":580827,"line_start":245,"line_end":245,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580832,"byte_end":580835,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Typically, the given `Rect` bounds should be the min and max positions along both axes that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580840,"byte_end":580935,"line_start":247,"line_end":247,"column_start":5,"column_end":100}},{"value":"/ are touched by the **Triangles**' points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580940,"byte_end":580985,"line_start":248,"line_end":248,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580990,"byte_end":580993,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ This method is significantly more efficient than `calc_bounding_rect` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580998,"byte_end":581075,"line_start":250,"line_end":250,"column_start":5,"column_end":82}},{"value":"/ `centre_points_to_bounding_rect` as the bounding rectangle does not have to be calculated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581080,"byte_end":581173,"line_start":251,"line_end":251,"column_start":5,"column_end":98}},{"value":"/ from the **Triangles**' points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581178,"byte_end":581213,"line_start":252,"line_end":252,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582356,"byte_end":582374,"line_start":273,"line_end":273,"column_start":12,"column_end":30},"name":"calc_bounding_rect","qualname":"<TrianglesUnpositioned<S, I>>::calc_bounding_rect","value":"fn (self) -> Triangles<S, I>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the position and size of the bounding rectangle from the `Triangles` points. The\n resulting bounding rectangle will fit to the absolute co-ordinates of all points.","sig":null,"attributes":[{"value":"/ Calculate the position and size of the bounding rectangle from the `Triangles` points. The","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581422,"byte_end":581516,"line_start":259,"line_end":259,"column_start":5,"column_end":99}},{"value":"/ resulting bounding rectangle will fit to the absolute co-ordinates of all points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581521,"byte_end":581606,"line_start":260,"line_end":260,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581611,"byte_end":581614,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ In other words, this method will automatically call `Sizeable::wh` and `Positionable::xy`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581619,"byte_end":581712,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ after calculating the size and position from the given points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581717,"byte_end":581783,"line_start":263,"line_end":263,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581788,"byte_end":581791,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ This requires that the `points` iterator is `Clone` so that we may iterate through and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581796,"byte_end":581886,"line_start":265,"line_end":265,"column_start":5,"column_end":95}},{"value":"/ determine the bounding box of the `points`. If you know the bounds of the rectangle ahead","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581891,"byte_end":581984,"line_start":266,"line_end":266,"column_start":5,"column_end":98}},{"value":"/ of time, we recommend calling `with_bounding_rect` instead as it will be significantly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":581989,"byte_end":582079,"line_start":267,"line_end":267,"column_start":5,"column_end":95}},{"value":"/ cheaper.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582084,"byte_end":582096,"line_start":268,"line_end":268,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582101,"byte_end":582104,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ If you would rather centre the points to the middle of the bounding box, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582109,"byte_end":582189,"line_start":270,"line_end":270,"column_start":5,"column_end":85}},{"value":"/ [**TrianglesUnpositioned::centre_points_to_bounding_rect**](./struct.TrianglesUnpositioned#method.centre_points_to_bounding_rect)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582194,"byte_end":582327,"line_start":271,"line_end":271,"column_start":5,"column_end":138}},{"value":"/ instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582332,"byte_end":582344,"line_start":272,"line_end":272,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583530,"byte_end":583560,"line_start":295,"line_end":295,"column_start":12,"column_end":42},"name":"centre_points_to_bounding_rect","qualname":"<TrianglesUnpositioned<S, I>>::centre_points_to_bounding_rect","value":"fn (self) -> Triangles<S, I>","parent":null,"children":[],"decl_id":null,"docs":" Shift the location of the **Triangles** points so that the centre of their bounding\n rectangle lies at the position determined for the **Triangles** widget.","sig":null,"attributes":[{"value":"/ Shift the location of the **Triangles** points so that the centre of their bounding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582621,"byte_end":582708,"line_start":281,"line_end":281,"column_start":5,"column_end":92}},{"value":"/ rectangle lies at the position determined for the **Triangles** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582713,"byte_end":582788,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582793,"byte_end":582796,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ This is useful if your points simply describe a shape and you want to position them using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582801,"byte_end":582894,"line_start":284,"line_end":284,"column_start":5,"column_end":98}},{"value":"/ conrod's auto-layout or **Positionable** and **Sizeable** methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582899,"byte_end":582969,"line_start":285,"line_end":285,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582974,"byte_end":582977,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This requires that the `points` iterator is `Clone` so that we may iterate through and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":582982,"byte_end":583072,"line_start":287,"line_end":287,"column_start":5,"column_end":95}},{"value":"/ determine the bounding box of the `points`. If you know the bounds of the rectangle ahead","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583077,"byte_end":583170,"line_start":288,"line_end":288,"column_start":5,"column_end":98}},{"value":"/ of time, we recommend calling `with_bounding_rect` instead as it will be significantly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583175,"byte_end":583265,"line_start":289,"line_end":289,"column_start":5,"column_end":95}},{"value":"/ cheaper.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583270,"byte_end":583282,"line_start":290,"line_end":290,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583287,"byte_end":583290,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ If you would rather calculate the bounding box *from* the given absolute points, use the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583295,"byte_end":583387,"line_start":292,"line_end":292,"column_start":5,"column_end":97}},{"value":"/ [**TrianglesUnpositioned::calc_bounding_rect**](./struct.TrianglesUnpositioned#method.calc_bounding_rect)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583392,"byte_end":583501,"line_start":293,"line_end":293,"column_start":5,"column_end":114}},{"value":"/ instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583506,"byte_end":583518,"line_start":294,"line_end":294,"column_start":5,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":2315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586837,"byte_end":586846,"line_start":413,"line_end":413,"column_start":8,"column_end":17},"name":"from_quad","qualname":"::widget::primitive::shape::triangles::from_quad","value":"fn (points: [Point; 4]) -> (Triangle<Point>, Triangle<Point>)","parent":null,"children":[],"decl_id":null,"docs":" Triangulates the given quad, represented by four points that describe its edges in either\n clockwise or anti-clockwise order.","sig":null,"attributes":[{"value":"/ Triangulates the given quad, represented by four points that describe its edges in either","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":585895,"byte_end":585988,"line_start":364,"line_end":364,"column_start":1,"column_end":94}},{"value":"/ clockwise or anti-clockwise order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":585989,"byte_end":586027,"line_start":365,"line_end":365,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586028,"byte_end":586031,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586032,"byte_end":586045,"line_start":367,"line_end":367,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586046,"byte_end":586049,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ The following rectangle","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586050,"byte_end":586077,"line_start":369,"line_end":369,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586078,"byte_end":586081,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586082,"byte_end":586095,"line_start":371,"line_end":371,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586096,"byte_end":586099,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/  a        b","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586100,"byte_end":586115,"line_start":373,"line_end":373,"column_start":1,"column_end":16}},{"value":"/   --------","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586116,"byte_end":586130,"line_start":374,"line_end":374,"column_start":1,"column_end":15}},{"value":"/   |      |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586131,"byte_end":586145,"line_start":375,"line_end":375,"column_start":1,"column_end":15}},{"value":"/   |      |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586146,"byte_end":586160,"line_start":376,"line_end":376,"column_start":1,"column_end":15}},{"value":"/   |      |","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586161,"byte_end":586175,"line_start":377,"line_end":377,"column_start":1,"column_end":15}},{"value":"/   --------","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586176,"byte_end":586190,"line_start":378,"line_end":378,"column_start":1,"column_end":15}},{"value":"/  d        c","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586191,"byte_end":586206,"line_start":379,"line_end":379,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586207,"byte_end":586210,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586211,"byte_end":586218,"line_start":381,"line_end":381,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586219,"byte_end":586222,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ given as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586223,"byte_end":586235,"line_start":383,"line_end":383,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586236,"byte_end":586239,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586240,"byte_end":586253,"line_start":385,"line_end":385,"column_start":1,"column_end":14}},{"value":"/ from_quad([a, b, c, d])","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586254,"byte_end":586281,"line_start":386,"line_end":386,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586282,"byte_end":586289,"line_start":387,"line_end":387,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586290,"byte_end":586293,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ returns","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586294,"byte_end":586305,"line_start":389,"line_end":389,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586306,"byte_end":586309,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586310,"byte_end":586323,"line_start":391,"line_end":391,"column_start":1,"column_end":14}},{"value":"/ (Triangle([a, b, c]), Triangle([a, c, d]))","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586324,"byte_end":586370,"line_start":392,"line_end":392,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586371,"byte_end":586378,"line_start":393,"line_end":393,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586379,"byte_end":586382,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ Here's a basic code example:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586383,"byte_end":586415,"line_start":395,"line_end":395,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586416,"byte_end":586419,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586420,"byte_end":586427,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"/ extern crate conrod_core;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586428,"byte_end":586457,"line_start":398,"line_end":398,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586458,"byte_end":586461,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ use conrod_core::widget::triangles::{from_quad, Triangle};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586462,"byte_end":586524,"line_start":400,"line_end":400,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586525,"byte_end":586528,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586529,"byte_end":586544,"line_start":402,"line_end":402,"column_start":1,"column_end":16}},{"value":"/     let a = [0.0, 1.0];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586545,"byte_end":586572,"line_start":403,"line_end":403,"column_start":1,"column_end":28}},{"value":"/     let b = [1.0, 1.0];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586573,"byte_end":586600,"line_start":404,"line_end":404,"column_start":1,"column_end":28}},{"value":"/     let c = [1.0, 0.0];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586601,"byte_end":586628,"line_start":405,"line_end":405,"column_start":1,"column_end":28}},{"value":"/     let d = [0.0, 0.0];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586629,"byte_end":586656,"line_start":406,"line_end":406,"column_start":1,"column_end":28}},{"value":"/     let quad = [a, b, c, d];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586657,"byte_end":586689,"line_start":407,"line_end":407,"column_start":1,"column_end":33}},{"value":"/     let triangles = from_quad(quad);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586690,"byte_end":586730,"line_start":408,"line_end":408,"column_start":1,"column_end":41}},{"value":"/     assert_eq!(triangles, (Triangle([a, b, c]), Triangle([a, c, d])));","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586731,"byte_end":586805,"line_start":409,"line_end":409,"column_start":1,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586806,"byte_end":586811,"line_start":410,"line_end":410,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586812,"byte_end":586819,"line_start":411,"line_end":411,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":586820,"byte_end":586829,"line_start":412,"line_end":412,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2320},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587230,"byte_end":587246,"line_start":428,"line_end":428,"column_start":8,"column_end":24},"name":"is_over_triangle","qualname":"::widget::primitive::shape::triangles::is_over_triangle","value":"fn <V> (t: &Triangle<V>, p: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given `Point` is over the given `Triangle`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the given `Point` is over the given `Triangle`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587153,"byte_end":587222,"line_start":427,"line_end":427,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":2323},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587728,"byte_end":587735,"line_start":447,"line_end":447,"column_start":8,"column_end":15},"name":"is_over","qualname":"::widget::primitive::shape::triangles::is_over","value":"fn <V, I, T> (ts: I, p: Point) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the given `Point` is over any of the given `Triangle`s.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the given `Point` is over any of the given `Triangle`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587643,"byte_end":587720,"line_start":446,"line_end":446,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":2328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587995,"byte_end":588009,"line_start":457,"line_end":457,"column_start":8,"column_end":22},"name":"is_over_widget","qualname":"::widget::primitive::shape::triangles::is_over_widget","value":"fn <S> (widget: &graph::Container, point: Point, _: &Theme) -> widget::IsOver","parent":null,"children":[],"decl_id":null,"docs":" The function to use for picking whether a given point is over the line.\n","sig":null,"attributes":[{"value":"/ The function to use for picking whether a given point is over the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587912,"byte_end":587987,"line_start":456,"line_end":456,"column_start":1,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546251,"byte_end":546258,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Outline","qualname":"::widget::primitive::shape::Style::Outline","value":"Style::Outline(widget::line::Style)","parent":{"krate":0,"index":6447},"children":[],"decl_id":null,"docs":" The outline of the shape with this style.\n","sig":null,"attributes":[{"value":"/ The outline of the shape with this style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546201,"byte_end":546246,"line_start":17,"line_end":17,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6451},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546329,"byte_end":546333,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Fill","qualname":"::widget::primitive::shape::Style::Fill","value":"Style::Fill(Option<Color>)","parent":{"krate":0,"index":6447},"children":[],"decl_id":null,"docs":" A rectangle filled with this color.\n","sig":null,"attributes":[{"value":"/ A rectangle filled with this color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546285,"byte_end":546324,"line_start":19,"line_end":19,"column_start":5,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":6447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546189,"byte_end":546194,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Style","qualname":"::widget::primitive::shape::Style","value":"Style::{Outline, Fill}","parent":null,"children":[{"krate":0,"index":6448},{"krate":0,"index":6451}],"decl_id":null,"docs":" The style for some 2D shape.\n","sig":null,"attributes":[{"value":"/ The style for some 2D shape.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546106,"byte_end":546138,"line_start":14,"line_end":14,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546411,"byte_end":546415,"line_start":27,"line_end":27,"column_start":12,"column_end":16},"name":"fill","qualname":"<Style>::fill","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" A default `Fill` style.\n","sig":null,"attributes":[{"value":"/ A default `Fill` style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546372,"byte_end":546399,"line_start":26,"line_end":26,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546520,"byte_end":546529,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"fill_with","qualname":"<Style>::fill_with","value":"fn (color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A `Fill` style with some given `Color`.\n","sig":null,"attributes":[{"value":"/ A `Fill` style with some given `Color`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546465,"byte_end":546508,"line_start":31,"line_end":31,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546640,"byte_end":546647,"line_start":37,"line_end":37,"column_start":12,"column_end":19},"name":"outline","qualname":"<Style>::outline","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" A default `Outline` style.\n","sig":null,"attributes":[{"value":"/ A default `Outline` style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546598,"byte_end":546628,"line_start":36,"line_end":36,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2336},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546764,"byte_end":546778,"line_start":42,"line_end":42,"column_start":12,"column_end":26},"name":"outline_styled","qualname":"<Style>::outline_styled","value":"fn (line_style: widget::line::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A default `Outline` style.\n","sig":null,"attributes":[{"value":"/ A default `Outline` style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546722,"byte_end":546752,"line_start":41,"line_end":41,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2337},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546916,"byte_end":546921,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"color","qualname":"<Style>::color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The style with some given Color.\n","sig":null,"attributes":[{"value":"/ The style with some given Color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546868,"byte_end":546904,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":547055,"byte_end":547064,"line_start":53,"line_end":53,"column_start":12,"column_end":21},"name":"set_color","qualname":"<Style>::set_color","value":"fn (&mut self, color: Color) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the color for the style.\n","sig":null,"attributes":[{"value":"/ Set the color for the style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":547011,"byte_end":547043,"line_start":52,"line_end":52,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":547337,"byte_end":547346,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"get_color","qualname":"<Style>::get_color","value":"fn (&self, theme: &Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Get the color of the Rectangle.\n","sig":null,"attributes":[{"value":"/ Get the color of the Rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":547290,"byte_end":547325,"line_start":60,"line_end":60,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":2340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"text","qualname":"::widget::primitive::text","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","parent":null,"children":[{"krate":0,"index":2341},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":6463},{"krate":0,"index":6476},{"krate":0,"index":6473},{"krate":0,"index":6468},{"krate":0,"index":6479},{"krate":0,"index":6522},{"krate":0,"index":6520},{"krate":0,"index":6518},{"krate":0,"index":6516},{"krate":0,"index":6512},{"krate":0,"index":6513},{"krate":0,"index":6486},{"krate":0,"index":6523},{"krate":0,"index":6535},{"krate":0,"index":6533},{"krate":0,"index":6531},{"krate":0,"index":6528},{"krate":0,"index":6529},{"krate":0,"index":6536},{"krate":0,"index":6545},{"krate":0,"index":6543},{"krate":0,"index":6539},{"krate":0,"index":6540},{"krate":0,"index":2354},{"krate":0,"index":2365},{"krate":0,"index":2384}],"decl_id":null,"docs":" The primitive widget used for displaying text.\n","sig":null,"attributes":[{"value":"! The primitive widget used for displaying text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588333,"byte_end":588383,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588869,"byte_end":588873,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"Text","qualname":"::widget::primitive::text::Text","value":"Text { common, text, style }","parent":null,"children":[{"krate":0,"index":6467},{"krate":0,"index":6465},{"krate":0,"index":6466}],"decl_id":null,"docs":" Displays some given text centered within a rectangular area.","sig":null,"attributes":[{"value":"/ Displays some given text centered within a rectangular area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588510,"byte_end":588574,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588575,"byte_end":588578,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ By default, the rectangular dimensions are fit to the area occuppied by the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588579,"byte_end":588664,"line_start":13,"line_end":13,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588665,"byte_end":588668,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ If some horizontal dimension is given, the text will automatically wrap to the width and align","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588669,"byte_end":588767,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ in accordance with the produced **Alignment**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588768,"byte_end":588818,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588982,"byte_end":588988,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::primitive::text::Text::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6463},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588884,"byte_end":588943,"line_start":19,"line_end":19,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":588948,"byte_end":588973,"line_start":20,"line_end":20,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589067,"byte_end":589071,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"name":"text","qualname":"::widget::primitive::text::Text::text","value":"&'a str","parent":{"krate":0,"index":6463},"children":[],"decl_id":null,"docs":" The text to be drawn by the **Text**.\n","sig":null,"attributes":[{"value":"/ The text to be drawn by the **Text**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589017,"byte_end":589058,"line_start":22,"line_end":22,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6466},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589131,"byte_end":589136,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::primitive::text::Text::style","value":"widget::primitive::text::Style","parent":{"krate":0,"index":6463},"children":[],"decl_id":null,"docs":" Unique styling for the **Text**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **Text**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589086,"byte_end":589122,"line_start":24,"line_end":24,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589266,"byte_end":589271,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::primitive::text::Style","value":"Style { font_size, color, maybe_wrap, line_spacing, justify, font_id }","parent":null,"children":[{"krate":0,"index":6480},{"krate":0,"index":6481},{"krate":0,"index":6482},{"krate":0,"index":6483},{"krate":0,"index":6484},{"krate":0,"index":6485}],"decl_id":null,"docs":" The styling for a **Text**'s graphics.\n","sig":null,"attributes":[{"value":"/ The styling for a **Text**'s graphics.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589148,"byte_end":589190,"line_start":28,"line_end":28,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6480},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589372,"byte_end":589381,"line_start":33,"line_end":33,"column_start":9,"column_end":18},"name":"font_size","qualname":"::widget::primitive::text::Style::font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":6479},"children":[],"decl_id":null,"docs":" The font size for the **Text**.\n","sig":null,"attributes":[{"value":"/ The font size for the **Text**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589278,"byte_end":589313,"line_start":31,"line_end":31,"column_start":5,"column_end":40}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589318,"byte_end":589363,"line_start":32,"line_end":32,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6481},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589489,"byte_end":589494,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::primitive::text::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6479},"children":[],"decl_id":null,"docs":" The color of the **Text**.\n","sig":null,"attributes":[{"value":"/ The color of the **Text**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589405,"byte_end":589435,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589440,"byte_end":589480,"line_start":35,"line_end":35,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589631,"byte_end":589641,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"name":"maybe_wrap","qualname":"::widget::primitive::text::Style::maybe_wrap","value":"std::option::Option<std::option::Option<widget::primitive::text::Wrap>>","parent":{"krate":0,"index":6479},"children":[],"decl_id":null,"docs":" Whether or not the text should wrap around the width.\n","sig":null,"attributes":[{"value":"/ Whether or not the text should wrap around the width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589515,"byte_end":589572,"line_start":37,"line_end":37,"column_start":5,"column_end":62}},{"value":"conrod(default = \"Some(Wrap::Whitespace)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589577,"byte_end":589622,"line_start":38,"line_end":38,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6483},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589751,"byte_end":589763,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"line_spacing","qualname":"::widget::primitive::text::Style::line_spacing","value":"std::option::Option<f64>","parent":{"krate":0,"index":6479},"children":[],"decl_id":null,"docs":" The spacing between consecutive lines.\n","sig":null,"attributes":[{"value":"/ The spacing between consecutive lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589669,"byte_end":589711,"line_start":40,"line_end":40,"column_start":5,"column_end":47}},{"value":"conrod(default = \"1.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589716,"byte_end":589742,"line_start":41,"line_end":41,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6484},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589886,"byte_end":589893,"line_start":45,"line_end":45,"column_start":9,"column_end":16},"name":"justify","qualname":"::widget::primitive::text::Style::justify","value":"std::option::Option<text::Justify>","parent":{"krate":0,"index":6479},"children":[],"decl_id":null,"docs":" Alignment of the text along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Alignment of the text along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589785,"byte_end":589830,"line_start":43,"line_end":43,"column_start":5,"column_end":50}},{"value":"conrod(default = \"text::Justify::Left\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589835,"byte_end":589877,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6485},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590027,"byte_end":590034,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"font_id","qualname":"::widget::primitive::text::Style::font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":6479},"children":[],"decl_id":null,"docs":" The id of the font to use for rendering and layout.\n","sig":null,"attributes":[{"value":"/ The id of the font to use for rendering and layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589922,"byte_end":589977,"line_start":46,"line_end":46,"column_start":5,"column_end":60}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589982,"byte_end":590018,"line_start":47,"line_end":47,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":6488},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589372,"byte_end":589381,"line_start":33,"line_end":33,"column_start":9,"column_end":18},"name":"font_size","qualname":"<Style>::font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6492},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589489,"byte_end":589494,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589631,"byte_end":589641,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"name":"maybe_wrap","qualname":"<Style>::maybe_wrap","value":"fn (&self, theme: &::Theme) -> Option<Wrap>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589751,"byte_end":589763,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"line_spacing","qualname":"<Style>::line_spacing","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6504},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":589886,"byte_end":589893,"line_start":45,"line_end":45,"column_start":9,"column_end":16},"name":"justify","qualname":"<Style>::justify","value":"fn (&self, theme: &::Theme) -> text::Justify","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6508},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590027,"byte_end":590034,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"font_id","qualname":"<Style>::font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590364,"byte_end":590373,"line_start":58,"line_end":58,"column_start":5,"column_end":14},"name":"Character","qualname":"::widget::primitive::text::Wrap::Character","value":"Wrap::Character","parent":{"krate":0,"index":6523},"children":[],"decl_id":null,"docs":" Wrap at the first character that exceeds the width.\n","sig":null,"attributes":[{"value":"/ Wrap at the first character that exceeds the width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590304,"byte_end":590359,"line_start":57,"line_end":57,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6526},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590434,"byte_end":590444,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"name":"Whitespace","qualname":"::widget::primitive::text::Wrap::Whitespace","value":"Wrap::Whitespace","parent":{"krate":0,"index":6523},"children":[],"decl_id":null,"docs":" Wrap at the first word that exceeds the width.\n","sig":null,"attributes":[{"value":"/ Wrap at the first word that exceeds the width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590379,"byte_end":590429,"line_start":59,"line_end":59,"column_start":5,"column_end":55}}]},{"kind":"Enum","id":{"krate":0,"index":6523},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590293,"byte_end":590297,"line_start":56,"line_end":56,"column_start":10,"column_end":14},"name":"Wrap","qualname":"::widget::primitive::text::Wrap","value":"Wrap::{Character, Whitespace}","parent":null,"children":[{"krate":0,"index":6524},{"krate":0,"index":6526}],"decl_id":null,"docs":" The way in which text should wrap around the width.\n","sig":null,"attributes":[{"value":"/ The way in which text should wrap around the width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590187,"byte_end":590242,"line_start":54,"line_end":54,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":6536},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590758,"byte_end":590763,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::primitive::text::State","value":"State { string, line_infos }","parent":null,"children":[{"krate":0,"index":6537},{"krate":0,"index":6538}],"decl_id":null,"docs":" The state to be stored between updates for the **Text**.\n","sig":null,"attributes":[{"value":"/ The state to be stored between updates for the **Text**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590651,"byte_end":590711,"line_start":73,"line_end":73,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":6537},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590814,"byte_end":590820,"line_start":77,"line_end":77,"column_start":9,"column_end":15},"name":"string","qualname":"::widget::primitive::text::State::string","value":"std::string::String","parent":{"krate":0,"index":6536},"children":[],"decl_id":null,"docs":" An owned version of the string.\n","sig":null,"attributes":[{"value":"/ An owned version of the string.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590770,"byte_end":590805,"line_start":76,"line_end":76,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":6538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590911,"byte_end":590921,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"name":"line_infos","qualname":"::widget::primitive::text::State::line_infos","value":"std::vec::Vec<text::line::Info>","parent":{"krate":0,"index":6536},"children":[],"decl_id":null,"docs":" The indices and width for each line of text within the `string`.\n","sig":null,"attributes":[{"value":"/ The indices and width for each line of text within the `string`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590834,"byte_end":590902,"line_start":78,"line_end":78,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591019,"byte_end":591022,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Text>::new","value":"fn (text: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **Text** widget.\n","sig":null,"attributes":[{"value":"/ Build a new **Text** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590975,"byte_end":591007,"line_start":85,"line_end":85,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591280,"byte_end":591292,"line_start":95,"line_end":95,"column_start":12,"column_end":24},"name":"no_line_wrap","qualname":"<Text>::no_line_wrap","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify that the **Text** should not wrap lines around the width.\n","sig":null,"attributes":[{"value":"/ Specify that the **Text** should not wrap lines around the width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591199,"byte_end":591268,"line_start":94,"line_end":94,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591478,"byte_end":591490,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"wrap_by_word","qualname":"<Text>::wrap_by_word","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Line wrap the **Text** at the beginning of the first word that exceeds the width.\n","sig":null,"attributes":[{"value":"/ Line wrap the **Text** at the beginning of the first word that exceeds the width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591381,"byte_end":591466,"line_start":100,"line_end":100,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":2359},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591699,"byte_end":591716,"line_start":107,"line_end":107,"column_start":12,"column_end":29},"name":"wrap_by_character","qualname":"<Text>::wrap_by_character","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Line wrap the **Text** at the beginning of the first character that exceeds the width.\n","sig":null,"attributes":[{"value":"/ Line wrap the **Text** at the beginning of the first character that exceeds the width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591597,"byte_end":591687,"line_start":106,"line_end":106,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591904,"byte_end":591911,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"font_id","qualname":"<Text>::font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A method for specifying the `Font` used for displaying the `Text`.\n","sig":null,"attributes":[{"value":"/ A method for specifying the `Font` used for displaying the `Text`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":591822,"byte_end":591892,"line_start":112,"line_end":112,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2361},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592092,"byte_end":592102,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"with_style","qualname":"<Text>::with_style","value":"fn (mut self, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the **Text** with the given **Style**.\n","sig":null,"attributes":[{"value":"/ Build the **Text** with the given **Style**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592032,"byte_end":592080,"line_start":118,"line_end":118,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592274,"byte_end":592286,"line_start":125,"line_end":125,"column_start":12,"column_end":24},"name":"left_justify","qualname":"<Text>::left_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the left of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the left of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592189,"byte_end":592262,"line_start":124,"line_end":124,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2363},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592443,"byte_end":592457,"line_start":130,"line_end":130,"column_start":12,"column_end":26},"name":"center_justify","qualname":"<Text>::center_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the middle of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the middle of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592356,"byte_end":592431,"line_start":129,"line_end":129,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592615,"byte_end":592628,"line_start":135,"line_end":135,"column_start":12,"column_end":25},"name":"right_justify","qualname":"<Text>::right_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the right of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the right of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592529,"byte_end":592603,"line_start":134,"line_end":134,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":6547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592729,"byte_end":592738,"line_start":140,"line_end":140,"column_start":13,"column_end":22},"name":"font_size","qualname":"<Text>::font_size","value":"fn (mut self, font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":6548},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592788,"byte_end":592795,"line_start":141,"line_end":141,"column_start":13,"column_end":20},"name":"justify","qualname":"<Text>::justify","value":"fn (mut self, justify: text::Justify) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":6549},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592848,"byte_end":592860,"line_start":142,"line_end":142,"column_start":13,"column_end":25},"name":"line_spacing","qualname":"<Text>::line_spacing","value":"fn (mut self, line_spacing: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":2391},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520650,"byte_end":520673,"line_start":16,"line_end":16,"column_start":8,"column_end":31},"name":"bounding_box_for_points","qualname":"::widget::primitive::bounding_box_for_points","value":"fn <I> (mut points: I) -> Rect","parent":null,"children":[],"decl_id":null,"docs":" Find the bounding rect for the given series of points.\n","sig":null,"attributes":[{"value":"/ Find the bounding rect for the given series of points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520584,"byte_end":520642,"line_start":15,"line_end":15,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":2395},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bordered_rectangle","qualname":"::widget::bordered_rectangle","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","parent":null,"children":[{"krate":0,"index":2396},{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":6550},{"krate":0,"index":6561},{"krate":0,"index":6559},{"krate":0,"index":6557},{"krate":0,"index":6553},{"krate":0,"index":6564},{"krate":0,"index":6562},{"krate":0,"index":6567},{"krate":0,"index":6595},{"krate":0,"index":6593},{"krate":0,"index":6591},{"krate":0,"index":6589},{"krate":0,"index":6585},{"krate":0,"index":6586},{"krate":0,"index":6571},{"krate":0,"index":2409},{"krate":0,"index":2411},{"krate":0,"index":2413},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2424},{"krate":0,"index":6600},{"krate":0,"index":6608},{"krate":0,"index":2425},{"krate":0,"index":2427}],"decl_id":null,"docs":" The `BorderedRectangle` widget and related items.\n","sig":null,"attributes":[{"value":"! The `BorderedRectangle` widget and related items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":597941,"byte_end":597994,"line_start":1,"line_end":1,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6550},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598311,"byte_end":598328,"line_start":21,"line_end":21,"column_start":12,"column_end":29},"name":"BorderedRectangle","qualname":"::widget::bordered_rectangle::BorderedRectangle","value":"BorderedRectangle { common, style }","parent":null,"children":[{"krate":0,"index":6552},{"krate":0,"index":6551}],"decl_id":null,"docs":" A filled rectangle widget that may or may not have some border.\n","sig":null,"attributes":[{"value":"/ A filled rectangle widget that may or may not have some border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598187,"byte_end":598254,"line_start":19,"line_end":19,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":6552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598433,"byte_end":598439,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::bordered_rectangle::BorderedRectangle::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6550},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598335,"byte_end":598394,"line_start":22,"line_end":22,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598399,"byte_end":598424,"line_start":23,"line_end":23,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598526,"byte_end":598531,"line_start":26,"line_end":26,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::bordered_rectangle::BorderedRectangle::style","value":"widget::bordered_rectangle::Style","parent":{"krate":0,"index":6550},"children":[],"decl_id":null,"docs":" Unique styling for the **BorderedRectangle**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **BorderedRectangle**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598468,"byte_end":598517,"line_start":25,"line_end":25,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6567},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598750,"byte_end":598755,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::bordered_rectangle::Style","value":"Style { color, border, border_color }","parent":null,"children":[{"krate":0,"index":6568},{"krate":0,"index":6569},{"krate":0,"index":6570}],"decl_id":null,"docs":" Unique styling for the **BorderedRectangle** widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **BorderedRectangle** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598618,"byte_end":598674,"line_start":36,"line_end":36,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6568},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598858,"byte_end":598863,"line_start":41,"line_end":41,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::bordered_rectangle::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" Shape styling for the inner rectangle.\n","sig":null,"attributes":[{"value":"/ Shape styling for the inner rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598762,"byte_end":598804,"line_start":39,"line_end":39,"column_start":5,"column_end":47}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598809,"byte_end":598849,"line_start":40,"line_end":40,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6569},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598971,"byte_end":598977,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::bordered_rectangle::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" The thickness of the border.\n","sig":null,"attributes":[{"value":"/ The thickness of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598884,"byte_end":598916,"line_start":42,"line_end":42,"column_start":5,"column_end":37}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598921,"byte_end":598962,"line_start":43,"line_end":43,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6570},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599082,"byte_end":599094,"line_start":47,"line_end":47,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::bordered_rectangle::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6567},"children":[],"decl_id":null,"docs":" The color of the border.\n","sig":null,"attributes":[{"value":"/ The color of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598999,"byte_end":599027,"line_start":45,"line_end":45,"column_start":5,"column_end":33}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599032,"byte_end":599073,"line_start":46,"line_end":46,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598858,"byte_end":598863,"line_start":41,"line_end":41,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6577},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":598971,"byte_end":598977,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6581},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599082,"byte_end":599094,"line_start":47,"line_end":47,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599171,"byte_end":599176,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::bordered_rectangle::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2410}],"decl_id":null,"docs":" Unique state for the `BorderedRectangle`.\n","sig":null,"attributes":[{"value":"/ Unique state for the `BorderedRectangle`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599114,"byte_end":599159,"line_start":50,"line_end":50,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599276,"byte_end":599279,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<BorderedRectangle>::new","value":"fn (dim: Dimensions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new **BorderedRectangle**.\n","sig":null,"attributes":[{"value":"/ Build a new **BorderedRectangle**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599226,"byte_end":599264,"line_start":57,"line_end":57,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":6596},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599475,"byte_end":599485,"line_start":65,"line_end":65,"column_start":25,"column_end":35},"name":"with_style","qualname":"<BorderedRectangle>::with_style","value":"fn (mut self, with_style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":2422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":601202,"byte_end":601218,"line_start":129,"line_end":129,"column_start":8,"column_end":24},"name":"border_triangles","qualname":"::widget::bordered_rectangle::border_triangles","value":"fn (rect: Rect, border: Scalar) -> Option<[Triangle<Point>; 8]>","parent":null,"children":[],"decl_id":null,"docs":" The eight triangles that describe a rectangular border.","sig":null,"attributes":[{"value":"/ The eight triangles that describe a rectangular border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":600973,"byte_end":601032,"line_start":124,"line_end":124,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":601033,"byte_end":601036,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ `rect` specifies the outer rectangle and `border` specifies the thickness of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":601037,"byte_end":601129,"line_start":126,"line_end":126,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":601130,"byte_end":601133,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if `border` is less than or equal to `0`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":601134,"byte_end":601194,"line_start":128,"line_end":128,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":2424},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602344,"byte_end":602368,"line_start":159,"line_end":159,"column_start":8,"column_end":32},"name":"rounded_border_triangles","qualname":"::widget::bordered_rectangle::rounded_border_triangles","value":"fn (rect: Rect, thickness: Scalar, radius: Scalar, corner_resolution: usize) -> RoundedBorderTriangles","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding triangles for a rounded border.","sig":null,"attributes":[{"value":"/ An iterator yielding triangles for a rounded border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602132,"byte_end":602188,"line_start":155,"line_end":155,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602189,"byte_end":602192,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Clamps the thickness of the border to half the smallest dimension of the rectangle to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602193,"byte_end":602282,"line_start":157,"line_end":157,"column_start":1,"column_end":90}},{"value":"/ ensure the bounds of the `rect` are not exceeded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602283,"byte_end":602336,"line_start":158,"line_end":158,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6600},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602653,"byte_end":602675,"line_start":170,"line_end":170,"column_start":12,"column_end":34},"name":"RoundedBorderTriangles","qualname":"::widget::bordered_rectangle::RoundedBorderTriangles","value":"RoundedBorderTriangles {  }","parent":null,"children":[{"krate":0,"index":6601},{"krate":0,"index":6602},{"krate":0,"index":6603},{"krate":0,"index":6604},{"krate":0,"index":6605},{"krate":0,"index":6607}],"decl_id":null,"docs":" An iterator yielding triangles for a rounded border.\n","sig":null,"attributes":[{"value":"/ An iterator yielding triangles for a rounded border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602568,"byte_end":602624,"line_start":168,"line_end":168,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":603165,"byte_end":603168,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<RoundedBorderTriangles>::new","value":"fn (rect: Rect, mut thickness: Scalar, radius: Scalar, corner_resolution: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor for an iterator yielding triangles for a rounded border.","sig":null,"attributes":[{"value":"/ Constructor for an iterator yielding triangles for a rounded border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602921,"byte_end":602993,"line_start":180,"line_end":180,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602998,"byte_end":603001,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Clamps the thickness of the border to half the smallest dimension of the rectangle to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":603006,"byte_end":603095,"line_start":182,"line_end":182,"column_start":5,"column_end":94}},{"value":"/ ensure the bounds of the `rect` are not exceeded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":603100,"byte_end":603153,"line_start":183,"line_end":183,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":2433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"button","qualname":"::widget::button","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","parent":null,"children":[{"krate":0,"index":2434},{"krate":0,"index":2444},{"krate":0,"index":2445},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":6610},{"krate":0,"index":6624},{"krate":0,"index":6618},{"krate":0,"index":6628},{"krate":0,"index":6686},{"krate":0,"index":6684},{"krate":0,"index":6682},{"krate":0,"index":6680},{"krate":0,"index":6676},{"krate":0,"index":6677},{"krate":0,"index":6638},{"krate":0,"index":6689},{"krate":0,"index":6687},{"krate":0,"index":6694},{"krate":0,"index":6692},{"krate":0,"index":6697},{"krate":0,"index":6710},{"krate":0,"index":6708},{"krate":0,"index":6706},{"krate":0,"index":6702},{"krate":0,"index":6703},{"krate":0,"index":6700},{"krate":0,"index":6711},{"krate":0,"index":6719},{"krate":0,"index":6717},{"krate":0,"index":6720},{"krate":0,"index":6733},{"krate":0,"index":6731},{"krate":0,"index":6729},{"krate":0,"index":6734},{"krate":0,"index":6743},{"krate":0,"index":6741},{"krate":0,"index":6744},{"krate":0,"index":6749},{"krate":0,"index":6747},{"krate":0,"index":2452},{"krate":0,"index":2454},{"krate":0,"index":2457},{"krate":0,"index":2465},{"krate":0,"index":2471},{"krate":0,"index":2481},{"krate":0,"index":2491},{"krate":0,"index":2500},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2508},{"krate":0,"index":2511}],"decl_id":null,"docs":" The `Button` widget and related items.\n","sig":null,"attributes":[{"value":"! The `Button` widget and related items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":604719,"byte_end":604761,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":6610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605053,"byte_end":605059,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Button","qualname":"::widget::button::Button","value":"Button { show, style }","parent":null,"children":[{"krate":0,"index":6617},{"krate":0,"index":6613},{"krate":0,"index":6614},{"krate":0,"index":6615},{"krate":0,"index":6616}],"decl_id":null,"docs":" A pressable button widget whose reaction is triggered upon release.\n","sig":null,"attributes":[{"value":"/ A pressable button widget whose reaction is triggered upon release.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":604938,"byte_end":605009,"line_start":10,"line_end":10,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605238,"byte_end":605242,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"name":"show","qualname":"::widget::button::Button::show","value":"S","parent":{"krate":0,"index":6610},"children":[],"decl_id":null,"docs":" Whether the `Button` is a `Flat` color or an `Image`.\n","sig":null,"attributes":[{"value":"/ Whether the `Button` is a `Flat` color or an `Image`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605172,"byte_end":605229,"line_start":16,"line_end":16,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":6615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605305,"byte_end":605310,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::button::Button::style","value":"widget::button::Style","parent":{"krate":0,"index":6610},"children":[],"decl_id":null,"docs":" Unique styling parameters for the Button.\n","sig":null,"attributes":[{"value":"/ Unique styling parameters for the Button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605251,"byte_end":605296,"line_start":18,"line_end":18,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605497,"byte_end":605502,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::button::Style","value":"Style { color, border, border_color, label_color, label_font_size, label_font_id, label_justify, label_x, label_y }","parent":null,"children":[{"krate":0,"index":6629},{"krate":0,"index":6630},{"krate":0,"index":6631},{"krate":0,"index":6632},{"krate":0,"index":6633},{"krate":0,"index":6634},{"krate":0,"index":6635},{"krate":0,"index":6636},{"krate":0,"index":6637}],"decl_id":null,"docs":" Unique styling for the Button.\n","sig":null,"attributes":[{"value":"/ Unique styling for the Button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605387,"byte_end":605421,"line_start":24,"line_end":24,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6629},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605604,"byte_end":605609,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::button::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" Color of the Button's pressable area.\n","sig":null,"attributes":[{"value":"/ Color of the Button's pressable area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605509,"byte_end":605550,"line_start":27,"line_end":27,"column_start":5,"column_end":46}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605555,"byte_end":605595,"line_start":28,"line_end":28,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6630},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605731,"byte_end":605737,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::button::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" Width of the border surrounding the button\n","sig":null,"attributes":[{"value":"/ Width of the border surrounding the button","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605630,"byte_end":605676,"line_start":30,"line_end":30,"column_start":5,"column_end":51}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605681,"byte_end":605722,"line_start":31,"line_end":31,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605842,"byte_end":605854,"line_start":35,"line_end":35,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::button::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" The color of the border.\n","sig":null,"attributes":[{"value":"/ The color of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605759,"byte_end":605787,"line_start":33,"line_end":33,"column_start":5,"column_end":33}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605792,"byte_end":605833,"line_start":34,"line_end":34,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6632},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605965,"byte_end":605976,"line_start":38,"line_end":38,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::button::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" The color of the Button's label.\n","sig":null,"attributes":[{"value":"/ The color of the Button's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605875,"byte_end":605911,"line_start":36,"line_end":36,"column_start":5,"column_end":41}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605916,"byte_end":605956,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606096,"byte_end":606111,"line_start":41,"line_end":41,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::button::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" The font size of the Button's label.\n","sig":null,"attributes":[{"value":"/ The font size of the Button's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605997,"byte_end":606037,"line_start":39,"line_end":39,"column_start":5,"column_end":45}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606042,"byte_end":606087,"line_start":40,"line_end":40,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606234,"byte_end":606247,"line_start":44,"line_end":44,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::button::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" The ID of the font used to display the label.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606135,"byte_end":606184,"line_start":42,"line_end":42,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606189,"byte_end":606225,"line_start":43,"line_end":43,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":6635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606399,"byte_end":606412,"line_start":47,"line_end":47,"column_start":9,"column_end":22},"name":"label_justify","qualname":"::widget::button::Style::label_justify","value":"std::option::Option<text::Justify>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" The label's typographic alignment over the *x* axis.\n","sig":null,"attributes":[{"value":"/ The label's typographic alignment over the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606285,"byte_end":606341,"line_start":45,"line_end":45,"column_start":5,"column_end":61}},{"value":"conrod(default = \"text::Justify::Center\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606346,"byte_end":606390,"line_start":46,"line_end":46,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606587,"byte_end":606594,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"name":"label_x","qualname":"::widget::button::Style::label_x","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" The position of the title bar's `Label` widget over the *x* axis.\n","sig":null,"attributes":[{"value":"/ The position of the title bar's `Label` widget over the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606441,"byte_end":606510,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606515,"byte_end":606578,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":6637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606774,"byte_end":606781,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"name":"label_y","qualname":"::widget::button::Style::label_y","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":6628},"children":[],"decl_id":null,"docs":" The position of the title bar's `Label` widget over the *y* axis.\n","sig":null,"attributes":[{"value":"/ The position of the title bar's `Label` widget over the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606628,"byte_end":606697,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606702,"byte_end":606765,"line_start":52,"line_end":52,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":6640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605604,"byte_end":605609,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605731,"byte_end":605737,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6648},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605842,"byte_end":605854,"line_start":35,"line_end":35,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6652},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":605965,"byte_end":605976,"line_start":38,"line_end":38,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606096,"byte_end":606111,"line_start":41,"line_end":41,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606234,"byte_end":606247,"line_start":44,"line_end":44,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606399,"byte_end":606412,"line_start":47,"line_end":47,"column_start":9,"column_end":22},"name":"label_justify","qualname":"<Style>::label_justify","value":"fn (&self, theme: &::Theme) -> text::Justify","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606587,"byte_end":606594,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"name":"label_x","qualname":"<Style>::label_x","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606774,"byte_end":606781,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"name":"label_y","qualname":"<Style>::label_y","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6689},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606941,"byte_end":606948,"line_start":59,"line_end":59,"column_start":16,"column_end":23},"name":"FlatIds","qualname":"::widget::button::FlatIds","value":"FlatIds { rectangle, label }","parent":null,"children":[{"krate":0,"index":6690},{"krate":0,"index":6691}],"decl_id":null,"docs":" Identifiers for a \"flat\" button.\n","sig":null,"attributes":[{"value":"allow(missing_docs, missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":506683,"byte_end":506691,"line_start":265,"line_end":265,"column_start":11,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":6690},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606959,"byte_end":606968,"line_start":60,"line_end":60,"column_start":9,"column_end":18},"name":"rectangle","qualname":"::widget::button::FlatIds::rectangle","value":"daggy::NodeIndex","parent":{"krate":0,"index":6689},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":606978,"byte_end":606983,"line_start":61,"line_end":61,"column_start":9,"column_end":14},"name":"label","qualname":"::widget::button::FlatIds::label","value":"daggy::NodeIndex","parent":{"krate":0,"index":6689},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6694},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607121,"byte_end":607129,"line_start":68,"line_end":68,"column_start":16,"column_end":24},"name":"ImageIds","qualname":"::widget::button::ImageIds","value":"ImageIds { image, label }","parent":null,"children":[{"krate":0,"index":6695},{"krate":0,"index":6696}],"decl_id":null,"docs":" Identifiers for an image button.\n","sig":null,"attributes":[{"value":"allow(missing_docs, missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":506683,"byte_end":506691,"line_start":265,"line_end":265,"column_start":11,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":6695},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607140,"byte_end":607145,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"image","qualname":"::widget::button::ImageIds::image","value":"daggy::NodeIndex","parent":{"krate":0,"index":6694},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607155,"byte_end":607160,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"label","qualname":"::widget::button::ImageIds::label","value":"daggy::NodeIndex","parent":{"krate":0,"index":6694},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6697},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607279,"byte_end":607283,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"Flat","qualname":"::widget::button::Flat","value":"Flat { hover_color, press_color }","parent":null,"children":[{"krate":0,"index":6698},{"krate":0,"index":6699}],"decl_id":null,"docs":" The `Button` simply displays a flat color.\n","sig":null,"attributes":[{"value":"/ The `Button` simply displays a flat color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607171,"byte_end":607217,"line_start":74,"line_end":74,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6698},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607477,"byte_end":607488,"line_start":80,"line_end":80,"column_start":9,"column_end":20},"name":"hover_color","qualname":"::widget::button::Flat::hover_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6697},"children":[],"decl_id":null,"docs":" Allows specifying a color to use when the mouse hovers over the button.","sig":null,"attributes":[{"value":"/ Allows specifying a color to use when the mouse hovers over the button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607290,"byte_end":607365,"line_start":77,"line_end":77,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607370,"byte_end":607373,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ By default, this is `color.highlighted()` where `color` is the button's regular color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607378,"byte_end":607468,"line_start":79,"line_end":79,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":6699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607688,"byte_end":607699,"line_start":84,"line_end":84,"column_start":9,"column_end":20},"name":"press_color","qualname":"::widget::button::Flat::press_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6697},"children":[],"decl_id":null,"docs":" Allows specifying a color to use when the mouse presses the button.","sig":null,"attributes":[{"value":"/ Allows specifying a color to use when the mouse presses the button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607509,"byte_end":607580,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607585,"byte_end":607588,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ By default, this is `color.clicked()` where `color` is the button's regular color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607593,"byte_end":607679,"line_start":83,"line_end":83,"column_start":5,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":6711},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607798,"byte_end":607803,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"Image","qualname":"::widget::button::Image","value":"Image { image_id, hover_image_id, press_image_id, color, src_rect }","parent":null,"children":[{"krate":0,"index":6712},{"krate":0,"index":6713},{"krate":0,"index":6714},{"krate":0,"index":6715},{"krate":0,"index":6716}],"decl_id":null,"docs":" The `Button` displays an `Image` on top.\n","sig":null,"attributes":[{"value":"/ The `Button` displays an `Image` on top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607719,"byte_end":607763,"line_start":87,"line_end":87,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6712},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607856,"byte_end":607864,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"image_id","qualname":"::widget::button::Image::image_id","value":"image::Id","parent":{"krate":0,"index":6711},"children":[],"decl_id":null,"docs":" The id of the `Image` to be used.\n","sig":null,"attributes":[{"value":"/ The id of the `Image` to be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607810,"byte_end":607847,"line_start":90,"line_end":90,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":6713},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607952,"byte_end":607966,"line_start":93,"line_end":93,"column_start":9,"column_end":23},"name":"hover_image_id","qualname":"::widget::button::Image::hover_image_id","value":"std::option::Option<image::Id>","parent":{"krate":0,"index":6711},"children":[],"decl_id":null,"docs":" The image displayed when the mouse hovers over the button.\n","sig":null,"attributes":[{"value":"/ The image displayed when the mouse hovers over the button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607881,"byte_end":607943,"line_start":92,"line_end":92,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":6714},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608079,"byte_end":608093,"line_start":95,"line_end":95,"column_start":9,"column_end":23},"name":"press_image_id","qualname":"::widget::button::Image::press_image_id","value":"std::option::Option<image::Id>","parent":{"krate":0,"index":6711},"children":[],"decl_id":null,"docs":" The image displayed when the mouse has captured and is pressing the button.\n","sig":null,"attributes":[{"value":"/ The image displayed when the mouse has captured and is pressing the button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":607991,"byte_end":608070,"line_start":94,"line_end":94,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":6715},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608185,"byte_end":608190,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::button::Image::color","value":"widget::button::ImageColor","parent":{"krate":0,"index":6711},"children":[],"decl_id":null,"docs":" If `Some`, maps the image's luminance to this `Color`.\n","sig":null,"attributes":[{"value":"/ If `Some`, maps the image's luminance to this `Color`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608118,"byte_end":608176,"line_start":96,"line_end":96,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":6716},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608296,"byte_end":608304,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"name":"src_rect","qualname":"::widget::button::Image::src_rect","value":"std::option::Option<position::rect::Rect>","parent":{"krate":0,"index":6711},"children":[],"decl_id":null,"docs":" The rectangular area of the original source image that should be displayed.\n","sig":null,"attributes":[{"value":"/ The rectangular area of the original source image that should be displayed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608208,"byte_end":608287,"line_start":98,"line_end":98,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608472,"byte_end":608478,"line_start":106,"line_end":106,"column_start":5,"column_end":11},"name":"Normal","qualname":"::widget::button::ImageColor::Normal","value":"ImageColor::Normal(Color)","parent":{"krate":0,"index":6720},"children":[],"decl_id":null,"docs":" The image's luminance will be mapped to this color.\n","sig":null,"attributes":[{"value":"/ The image's luminance will be mapped to this color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608412,"byte_end":608467,"line_start":105,"line_end":105,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6724},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608643,"byte_end":608655,"line_start":110,"line_end":110,"column_start":5,"column_end":17},"name":"WithFeedback","qualname":"::widget::button::ImageColor::WithFeedback","value":"ImageColor::WithFeedback(Color)","parent":{"krate":0,"index":6720},"children":[],"decl_id":null,"docs":" The image's luminance will be mapped to this color.","sig":null,"attributes":[{"value":"/ The image's luminance will be mapped to this color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608491,"byte_end":608546,"line_start":107,"line_end":107,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608551,"byte_end":608554,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ The color will change slightly upon interaction to provide visual feedback.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608559,"byte_end":608638,"line_start":109,"line_end":109,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6727},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608716,"byte_end":608720,"line_start":112,"line_end":112,"column_start":5,"column_end":9},"name":"None","qualname":"::widget::button::ImageColor::None","value":"ImageColor::None","parent":{"krate":0,"index":6720},"children":[],"decl_id":null,"docs":" The image's regular color will be used.\n","sig":null,"attributes":[{"value":"/ The image's regular color will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608668,"byte_end":608711,"line_start":111,"line_end":111,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":6720},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608395,"byte_end":608405,"line_start":104,"line_end":104,"column_start":10,"column_end":20},"name":"ImageColor","qualname":"::widget::button::ImageColor","value":"ImageColor::{Normal, WithFeedback, None}","parent":null,"children":[{"krate":0,"index":6721},{"krate":0,"index":6724},{"krate":0,"index":6727}],"decl_id":null,"docs":" The coloring of the `Image`.\n","sig":null,"attributes":[{"value":"/ The coloring of the `Image`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608323,"byte_end":608355,"line_start":102,"line_end":102,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":6744},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609044,"byte_end":609056,"line_start":124,"line_end":124,"column_start":12,"column_end":24},"name":"TimesClicked","qualname":"::widget::button::TimesClicked","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `Event` type yielded by the `Button` widget.","sig":null,"attributes":[{"value":"/ The `Event` type yielded by the `Button` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608789,"byte_end":608841,"line_start":118,"line_end":118,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608842,"byte_end":608845,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Represents the number of times that the `Button` has been clicked with the left mouse button","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608846,"byte_end":608942,"line_start":120,"line_end":120,"column_start":1,"column_end":97}},{"value":"/ since the last update.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608943,"byte_end":608969,"line_start":121,"line_end":121,"column_start":1,"column_end":27}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":608994,"byte_end":609032,"line_start":123,"line_end":123,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609162,"byte_end":609173,"line_start":129,"line_end":129,"column_start":12,"column_end":23},"name":"was_clicked","qualname":"<TimesClicked>::was_clicked","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" `true` if the `Button` was clicked one or more times.\n","sig":null,"attributes":[{"value":"/ `true` if the `Button` was clicked one or more times.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609093,"byte_end":609150,"line_start":128,"line_end":128,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2459},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609540,"byte_end":609545,"line_start":148,"line_end":148,"column_start":12,"column_end":17},"name":"image","qualname":"<Button>::image","value":"fn (image_id: image::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a button displaying the given `Image` on top.\n","sig":null,"attributes":[{"value":"/ Begin building a button displaying the given `Image` on top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609464,"byte_end":609528,"line_start":147,"line_end":147,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2460},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609977,"byte_end":609993,"line_start":162,"line_end":162,"column_start":12,"column_end":28},"name":"source_rectangle","qualname":"<Button>::source_rectangle","value":"fn (mut self, rect: Rect) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The rectangular area of the image that we wish to display.","sig":null,"attributes":[{"value":"/ The rectangular area of the image that we wish to display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609826,"byte_end":609888,"line_start":159,"line_end":159,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609893,"byte_end":609896,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ If this method is not called, the entire image will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609901,"byte_end":609965,"line_start":161,"line_end":161,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2461},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610154,"byte_end":610165,"line_start":168,"line_end":168,"column_start":12,"column_end":23},"name":"image_color","qualname":"<Button>::image_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Map the `Image`'s luminance to the given color.\n","sig":null,"attributes":[{"value":"/ Map the `Image`'s luminance to the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610091,"byte_end":610142,"line_start":167,"line_end":167,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610476,"byte_end":610501,"line_start":177,"line_end":177,"column_start":12,"column_end":37},"name":"image_color_with_feedback","qualname":"<Button>::image_color_with_feedback","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Map the `Image`'s luminance to the given color.","sig":null,"attributes":[{"value":"/ Map the `Image`'s luminance to the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610277,"byte_end":610328,"line_start":173,"line_end":173,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610333,"byte_end":610336,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The color will change slightly when the button is highlighted or clicked to give the user","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610341,"byte_end":610434,"line_start":175,"line_end":175,"column_start":5,"column_end":98}},{"value":"/ some visual feedback.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610439,"byte_end":610464,"line_start":176,"line_end":176,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610696,"byte_end":610707,"line_start":183,"line_end":183,"column_start":12,"column_end":23},"name":"hover_image","qualname":"<Button>::hover_image","value":"fn (mut self, id: image::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The image displayed while the mouse hovers over the `Button`.\n","sig":null,"attributes":[{"value":"/ The image displayed while the mouse hovers over the `Button`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610619,"byte_end":610684,"line_start":182,"line_end":182,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610878,"byte_end":610889,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"press_image","qualname":"<Button>::press_image","value":"fn (mut self, id: image::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The image displayed while the `Button` is pressed.\n","sig":null,"attributes":[{"value":"/ The image displayed while the `Button` is pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":610812,"byte_end":610866,"line_start":188,"line_end":188,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611088,"byte_end":611091,"line_start":199,"line_end":199,"column_start":12,"column_end":15},"name":"new","qualname":"<Button>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a flat-colored `Button` widget.\n","sig":null,"attributes":[{"value":"/ Begin building a flat-colored `Button` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611026,"byte_end":611076,"line_start":198,"line_end":198,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611208,"byte_end":611218,"line_start":204,"line_end":204,"column_start":12,"column_end":22},"name":"with_style","qualname":"<Button>::with_style","value":"fn (mut self, s: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Override the default button style\n","sig":null,"attributes":[{"value":"/ Override the default button style","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611159,"byte_end":611196,"line_start":203,"line_end":203,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611477,"byte_end":611488,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"hover_color","qualname":"<Button>::hover_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a color to use when the mouse hovers over the button.","sig":null,"attributes":[{"value":"/ Specify a color to use when the mouse hovers over the button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611297,"byte_end":611362,"line_start":209,"line_end":209,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611367,"byte_end":611370,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ By default, this is `color.highlighted()` where `color` is the button's regular color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611375,"byte_end":611465,"line_start":211,"line_end":211,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611764,"byte_end":611775,"line_start":220,"line_end":220,"column_start":12,"column_end":23},"name":"press_color","qualname":"<Button>::press_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a color to use when the mouse presses the button.","sig":null,"attributes":[{"value":"/ Specify a color to use when the mouse presses the button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611592,"byte_end":611653,"line_start":217,"line_end":217,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611658,"byte_end":611661,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ By default, this is `color.clicked()` where `color` is the button's regular color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611666,"byte_end":611752,"line_start":219,"line_end":219,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2475},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612270,"byte_end":612283,"line_start":241,"line_end":241,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<Button>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612207,"byte_end":612258,"line_start":240,"line_end":240,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612479,"byte_end":612497,"line_start":247,"line_end":247,"column_start":12,"column_end":30},"name":"left_justify_label","qualname":"<Button>::left_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the label to the left of the `Button`'s surface.\n","sig":null,"attributes":[{"value":"/ Align the label to the left of the `Button`'s surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612409,"byte_end":612467,"line_start":246,"line_end":246,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612731,"byte_end":612751,"line_start":255,"line_end":255,"column_start":12,"column_end":32},"name":"center_justify_label","qualname":"<Button>::center_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the label to the mid-left of the `Button`'s surface.","sig":null,"attributes":[{"value":"/ Align the label to the mid-left of the `Button`'s surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612604,"byte_end":612666,"line_start":252,"line_end":252,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612671,"byte_end":612674,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This is the default label alignment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612679,"byte_end":612719,"line_start":254,"line_end":254,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612934,"byte_end":612953,"line_start":261,"line_end":261,"column_start":12,"column_end":31},"name":"right_justify_label","qualname":"<Button>::right_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the label to the mid-left of the `Button`'s surface.\n","sig":null,"attributes":[{"value":"/ Align the label to the mid-left of the `Button`'s surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":612860,"byte_end":612922,"line_start":260,"line_end":260,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":613148,"byte_end":613155,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"label_x","qualname":"<Button>::label_x","value":"fn (mut self, x: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Button` along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Button` along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":613061,"byte_end":613136,"line_start":266,"line_end":266,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":613348,"byte_end":613355,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"label_y","qualname":"<Button>::label_y","value":"fn (mut self, y: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Button` along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Button` along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":613261,"byte_end":613336,"line_start":272,"line_end":272,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":6751},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":613491,"byte_end":613498,"line_start":279,"line_end":279,"column_start":13,"column_end":20},"name":"enabled","qualname":"<Button>::enabled","value":"fn (mut self, enabled: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":2514},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"canvas","qualname":"::widget::canvas","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","parent":null,"children":[{"krate":0,"index":2515},{"krate":0,"index":2527},{"krate":0,"index":2536},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":6758},{"krate":0,"index":6775},{"krate":0,"index":6772},{"krate":0,"index":6769},{"krate":0,"index":6764},{"krate":0,"index":2541},{"krate":0,"index":6779},{"krate":0,"index":6777},{"krate":0,"index":6782},{"krate":0,"index":6865},{"krate":0,"index":6863},{"krate":0,"index":6861},{"krate":0,"index":6859},{"krate":0,"index":6855},{"krate":0,"index":6856},{"krate":0,"index":6797},{"krate":0,"index":2543},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":6866},{"krate":0,"index":6881},{"krate":0,"index":6879},{"krate":0,"index":6877},{"krate":0,"index":6873},{"krate":0,"index":6874},{"krate":0,"index":6882},{"krate":0,"index":6893},{"krate":0,"index":6891},{"krate":0,"index":6889},{"krate":0,"index":2548},{"krate":0,"index":2561},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2586}],"decl_id":null,"docs":" The `Canvas` widget and related items.\n","sig":null,"attributes":[{"value":"! The `Canvas` widget and related items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619142,"byte_end":619184,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":6758},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620308,"byte_end":620314,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"Canvas","qualname":"::widget::canvas::Canvas","value":"Canvas { common, style, maybe_title_bar_label, maybe_splits }","parent":null,"children":[{"krate":0,"index":6763},{"krate":0,"index":6760},{"krate":0,"index":6761},{"krate":0,"index":6762}],"decl_id":null,"docs":" **Canvas** is designed to be a \"container\"-like \"parent\" widget that simplifies placement of\n \"children\" widgets.","sig":null,"attributes":[{"value":"/ **Canvas** is designed to be a \"container\"-like \"parent\" widget that simplifies placement of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619494,"byte_end":619590,"line_start":22,"line_end":22,"column_start":1,"column_end":97}},{"value":"/ \"children\" widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619591,"byte_end":619614,"line_start":23,"line_end":23,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619615,"byte_end":619618,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Widgets can be placed on a **Canvas** in a variety of ways using methods from the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619619,"byte_end":619704,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/ [**Positionable**](../../position/trait.Positionable.html) trait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619705,"byte_end":619774,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619775,"byte_end":619778,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ **Canvas** provides methods for padding the kid widget area which can make using the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619779,"byte_end":619867,"line_start":28,"line_end":28,"column_start":1,"column_end":89}},{"value":"/ **Place**-related **Positionable** methods a little easier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619868,"byte_end":619931,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619932,"byte_end":619935,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A **Canvas** can also be divided into a sequence of smaller **Canvas**ses using the `.flow_*`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":619936,"byte_end":620033,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ methods. This creates a kind of **Canvas** tree, where each \"split\" can be sized using the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620034,"byte_end":620128,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ `.length` or `.length_weight` methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620129,"byte_end":620171,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620172,"byte_end":620175,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ See the `canvas.rs` example for a demonstration of the **Canvas** type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620176,"byte_end":620251,"line_start":35,"line_end":35,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":6763},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620423,"byte_end":620429,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::canvas::Canvas::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":6758},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620325,"byte_end":620384,"line_start":38,"line_end":38,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620389,"byte_end":620414,"line_start":39,"line_end":39,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6760},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620523,"byte_end":620528,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::canvas::Canvas::style","value":"widget::canvas::Style","parent":{"krate":0,"index":6758},"children":[],"decl_id":null,"docs":" The builder data related to the style of the Canvas.\n","sig":null,"attributes":[{"value":"/ The builder data related to the style of the Canvas.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620458,"byte_end":620514,"line_start":41,"line_end":41,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":6761},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620613,"byte_end":620634,"line_start":44,"line_end":44,"column_start":9,"column_end":30},"name":"maybe_title_bar_label","qualname":"::widget::canvas::Canvas::maybe_title_bar_label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":6758},"children":[],"decl_id":null,"docs":" The label for the **Canvas**' **TitleBar** if there is one.\n","sig":null,"attributes":[{"value":"/ The label for the **Canvas**' **TitleBar** if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620541,"byte_end":620604,"line_start":43,"line_end":43,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":6762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620761,"byte_end":620773,"line_start":46,"line_end":46,"column_start":9,"column_end":21},"name":"maybe_splits","qualname":"::widget::canvas::Canvas::maybe_splits","value":"std::option::Option<(widget::canvas::Direction, &'a [(daggy::NodeIndex, widget::canvas::Canvas<'a>)])>","parent":{"krate":0,"index":6758},"children":[],"decl_id":null,"docs":" A list of child **Canvas**ses as splits of this **Canvas** flowing in the given direction.\n","sig":null,"attributes":[{"value":"/ A list of child **Canvas**ses as splits of this **Canvas** flowing in the given direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620658,"byte_end":620752,"line_start":45,"line_end":45,"column_start":5,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":2541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620850,"byte_end":620855,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::canvas::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2542}],"decl_id":null,"docs":" **Canvas** state to be cached.\n","sig":null,"attributes":[{"value":"/ **Canvas** state to be cached.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620804,"byte_end":620838,"line_start":49,"line_end":49,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621063,"byte_end":621068,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::canvas::Style","value":"Style { color, border, border_color, length, pad_left, pad_right, pad_bottom, pad_top, title_bar_color, title_bar_text_color, title_bar_font_size, title_bar_maybe_wrap, title_bar_line_spacing, title_bar_justify }","parent":null,"children":[{"krate":0,"index":6783},{"krate":0,"index":6784},{"krate":0,"index":6785},{"krate":0,"index":6786},{"krate":0,"index":6787},{"krate":0,"index":6788},{"krate":0,"index":6789},{"krate":0,"index":6790},{"krate":0,"index":6791},{"krate":0,"index":6792},{"krate":0,"index":6793},{"krate":0,"index":6794},{"krate":0,"index":6795},{"krate":0,"index":6796}],"decl_id":null,"docs":" Unique styling for the Canvas.\n","sig":null,"attributes":[{"value":"/ Unique styling for the Canvas.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":620953,"byte_end":620987,"line_start":61,"line_end":61,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6783},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621181,"byte_end":621186,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::canvas::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The color of the Canvas' rectangle surface.\n","sig":null,"attributes":[{"value":"/ The color of the Canvas' rectangle surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621075,"byte_end":621122,"line_start":64,"line_end":64,"column_start":5,"column_end":52}},{"value":"conrod(default = \"theme.background_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621127,"byte_end":621172,"line_start":65,"line_end":65,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621324,"byte_end":621330,"line_start":69,"line_end":69,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::canvas::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The width of the border surrounding the Canvas' rectangle.\n","sig":null,"attributes":[{"value":"/ The width of the border surrounding the Canvas' rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621207,"byte_end":621269,"line_start":67,"line_end":67,"column_start":5,"column_end":67}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621274,"byte_end":621315,"line_start":68,"line_end":68,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6785},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621443,"byte_end":621455,"line_start":72,"line_end":72,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::canvas::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The color of the Canvas' border.\n","sig":null,"attributes":[{"value":"/ The color of the Canvas' border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621352,"byte_end":621388,"line_start":70,"line_end":70,"column_start":5,"column_end":41}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621393,"byte_end":621434,"line_start":71,"line_end":71,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6786},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621617,"byte_end":621623,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"name":"length","qualname":"::widget::canvas::Style::length","value":"std::option::Option<widget::canvas::Length>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" If this Canvas is a split of some parent Canvas, this is the length of the split.\n","sig":null,"attributes":[{"value":"/ If this Canvas is a split of some parent Canvas, this is the length of the split.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621476,"byte_end":621561,"line_start":73,"line_end":73,"column_start":5,"column_end":90}},{"value":"conrod(default = \"Length::Weight(1.0)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621566,"byte_end":621608,"line_start":74,"line_end":74,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6787},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621758,"byte_end":621766,"line_start":79,"line_end":79,"column_start":9,"column_end":17},"name":"pad_left","qualname":"::widget::canvas::Style::pad_left","value":"std::option::Option<f64>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" Padding for the left edge of the Canvas' kid area.\n","sig":null,"attributes":[{"value":"/ Padding for the left edge of the Canvas' kid area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621646,"byte_end":621700,"line_start":77,"line_end":77,"column_start":5,"column_end":59}},{"value":"conrod(default = \"theme.padding.x.start\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621705,"byte_end":621749,"line_start":78,"line_end":78,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6788},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621899,"byte_end":621908,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"pad_right","qualname":"::widget::canvas::Style::pad_right","value":"std::option::Option<f64>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" Padding for the right edge of the Canvas' kid area.\n","sig":null,"attributes":[{"value":"/ Padding for the right edge of the Canvas' kid area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621788,"byte_end":621843,"line_start":80,"line_end":80,"column_start":5,"column_end":60}},{"value":"conrod(default = \"theme.padding.x.end\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621848,"byte_end":621890,"line_start":81,"line_end":81,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6789},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622044,"byte_end":622054,"line_start":85,"line_end":85,"column_start":9,"column_end":19},"name":"pad_bottom","qualname":"::widget::canvas::Style::pad_bottom","value":"std::option::Option<f64>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" Padding for the bottom edge of the Canvas' kid area.\n","sig":null,"attributes":[{"value":"/ Padding for the bottom edge of the Canvas' kid area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621930,"byte_end":621986,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"conrod(default = \"theme.padding.y.start\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621991,"byte_end":622035,"line_start":84,"line_end":84,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6790},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622185,"byte_end":622192,"line_start":88,"line_end":88,"column_start":9,"column_end":16},"name":"pad_top","qualname":"::widget::canvas::Style::pad_top","value":"std::option::Option<f64>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" Padding for the top edge of the Canvas' kid area.\n","sig":null,"attributes":[{"value":"/ Padding for the top edge of the Canvas' kid area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622076,"byte_end":622129,"line_start":86,"line_end":86,"column_start":5,"column_end":58}},{"value":"conrod(default = \"theme.padding.y.end\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622134,"byte_end":622176,"line_start":87,"line_end":87,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6791},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622324,"byte_end":622339,"line_start":92,"line_end":92,"column_start":9,"column_end":24},"name":"title_bar_color","qualname":"::widget::canvas::Style::title_bar_color","value":"std::option::Option<std::option::Option<color::Color>>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The color of the title bar. Defaults to the color of the Canvas.\n","sig":null,"attributes":[{"value":"/ The color of the title bar. Defaults to the color of the Canvas.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622215,"byte_end":622283,"line_start":90,"line_end":90,"column_start":5,"column_end":73}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622288,"byte_end":622315,"line_start":91,"line_end":91,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":6792},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622460,"byte_end":622480,"line_start":95,"line_end":95,"column_start":9,"column_end":29},"name":"title_bar_text_color","qualname":"::widget::canvas::Style::title_bar_text_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The color of the title bar's text.\n","sig":null,"attributes":[{"value":"/ The color of the title bar's text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622368,"byte_end":622406,"line_start":93,"line_end":93,"column_start":5,"column_end":43}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622411,"byte_end":622451,"line_start":94,"line_end":94,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6793},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622603,"byte_end":622622,"line_start":98,"line_end":98,"column_start":9,"column_end":28},"name":"title_bar_font_size","qualname":"::widget::canvas::Style::title_bar_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The font size for the title bar's text.\n","sig":null,"attributes":[{"value":"/ The font size for the title bar's text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622501,"byte_end":622544,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622549,"byte_end":622594,"line_start":97,"line_end":97,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6794},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622773,"byte_end":622793,"line_start":101,"line_end":101,"column_start":9,"column_end":29},"name":"title_bar_maybe_wrap","qualname":"::widget::canvas::Style::title_bar_maybe_wrap","value":"std::option::Option<std::option::Option<widget::primitive::text::Wrap>>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The way in which the title bar's text should wrap.\n","sig":null,"attributes":[{"value":"/ The way in which the title bar's text should wrap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622646,"byte_end":622700,"line_start":99,"line_end":99,"column_start":5,"column_end":59}},{"value":"conrod(default = \"Some(widget::text::Wrap::Whitespace)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622705,"byte_end":622764,"line_start":100,"line_end":100,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":6795},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622936,"byte_end":622958,"line_start":104,"line_end":104,"column_start":9,"column_end":31},"name":"title_bar_line_spacing","qualname":"::widget::canvas::Style::title_bar_line_spacing","value":"std::option::Option<f64>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The distance between lines for multi-line title bar text.\n","sig":null,"attributes":[{"value":"/ The distance between lines for multi-line title bar text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622835,"byte_end":622896,"line_start":102,"line_end":102,"column_start":5,"column_end":66}},{"value":"conrod(default = \"1.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622901,"byte_end":622927,"line_start":103,"line_end":103,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6796},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623094,"byte_end":623111,"line_start":107,"line_end":107,"column_start":9,"column_end":26},"name":"title_bar_justify","qualname":"::widget::canvas::Style::title_bar_justify","value":"std::option::Option<text::Justify>","parent":{"krate":0,"index":6782},"children":[],"decl_id":null,"docs":" The label's typographic alignment over the *x* axis.\n","sig":null,"attributes":[{"value":"/ The label's typographic alignment over the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622980,"byte_end":623036,"line_start":105,"line_end":105,"column_start":5,"column_end":61}},{"value":"conrod(default = \"text::Justify::Center\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623041,"byte_end":623085,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":6799},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621181,"byte_end":621186,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621324,"byte_end":621330,"line_start":69,"line_end":69,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6807},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621443,"byte_end":621455,"line_start":72,"line_end":72,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6811},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621617,"byte_end":621623,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"name":"length","qualname":"<Style>::length","value":"fn (&self, theme: &::Theme) -> Length","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6815},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621758,"byte_end":621766,"line_start":79,"line_end":79,"column_start":9,"column_end":17},"name":"pad_left","qualname":"<Style>::pad_left","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":621899,"byte_end":621908,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"pad_right","qualname":"<Style>::pad_right","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6823},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622044,"byte_end":622054,"line_start":85,"line_end":85,"column_start":9,"column_end":19},"name":"pad_bottom","qualname":"<Style>::pad_bottom","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6827},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622185,"byte_end":622192,"line_start":88,"line_end":88,"column_start":9,"column_end":16},"name":"pad_top","qualname":"<Style>::pad_top","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6831},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622324,"byte_end":622339,"line_start":92,"line_end":92,"column_start":9,"column_end":24},"name":"title_bar_color","qualname":"<Style>::title_bar_color","value":"fn (&self, theme: &::Theme) -> Option<Color>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6835},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622460,"byte_end":622480,"line_start":95,"line_end":95,"column_start":9,"column_end":29},"name":"title_bar_text_color","qualname":"<Style>::title_bar_text_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622603,"byte_end":622622,"line_start":98,"line_end":98,"column_start":9,"column_end":28},"name":"title_bar_font_size","qualname":"<Style>::title_bar_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6843},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622773,"byte_end":622793,"line_start":101,"line_end":101,"column_start":9,"column_end":29},"name":"title_bar_maybe_wrap","qualname":"<Style>::title_bar_maybe_wrap","value":"fn (&self, theme: &::Theme) -> Option<widget::text::Wrap>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":622936,"byte_end":622958,"line_start":104,"line_end":104,"column_start":9,"column_end":31},"name":"title_bar_line_spacing","qualname":"<Style>::title_bar_line_spacing","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6851},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623094,"byte_end":623111,"line_start":107,"line_end":107,"column_start":9,"column_end":26},"name":"title_bar_justify","qualname":"<Style>::title_bar_justify","value":"fn (&self, theme: &::Theme) -> text::Justify","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2543},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623219,"byte_end":623231,"line_start":111,"line_end":111,"column_start":10,"column_end":22},"name":"ListOfSplits","qualname":"::widget::canvas::ListOfSplits","value":"&'a [(widget::Id, Canvas<'a>)]","parent":null,"children":[],"decl_id":null,"docs":" A series of **Canvas** splits along with their unique identifiers.\n","sig":null,"attributes":[{"value":"/ A series of **Canvas** splits along with their unique identifiers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623139,"byte_end":623209,"line_start":110,"line_end":110,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2545},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623350,"byte_end":623362,"line_start":114,"line_end":114,"column_start":10,"column_end":22},"name":"FlowOfSplits","qualname":"::widget::canvas::FlowOfSplits","value":"(Direction, ListOfSplits<'a>)","parent":null,"children":[],"decl_id":null,"docs":" A series of **Canvas** splits flowing in the specified direction.\n","sig":null,"attributes":[{"value":"/ A series of **Canvas** splits flowing in the specified direction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623271,"byte_end":623340,"line_start":113,"line_end":113,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":2547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623611,"byte_end":623617,"line_start":120,"line_end":120,"column_start":10,"column_end":16},"name":"Weight","qualname":"::widget::canvas::Weight","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" The length of a `Split` given as a weight.","sig":null,"attributes":[{"value":"/ The length of a `Split` given as a weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623401,"byte_end":623447,"line_start":116,"line_end":116,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623448,"byte_end":623451,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The length is determined by determining what percentage each `Split`'s weight contributes to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623452,"byte_end":623548,"line_start":118,"line_end":118,"column_start":1,"column_end":97}},{"value":"/ the total weight of all `Split`s in a flow list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623549,"byte_end":623601,"line_start":119,"line_end":119,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6867},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623789,"byte_end":623797,"line_start":126,"line_end":126,"column_start":5,"column_end":13},"name":"Absolute","qualname":"::widget::canvas::Length::Absolute","value":"Length::Absolute(Scalar)","parent":{"krate":0,"index":6866},"children":[],"decl_id":null,"docs":" The length as an absolute scalar.\n","sig":null,"attributes":[{"value":"/ The length as an absolute scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623747,"byte_end":623784,"line_start":125,"line_end":125,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623895,"byte_end":623901,"line_start":128,"line_end":128,"column_start":5,"column_end":11},"name":"Weight","qualname":"::widget::canvas::Length::Weight","value":"Length::Weight(Weight)","parent":{"krate":0,"index":6866},"children":[],"decl_id":null,"docs":" The length as a weight of the non-absolute length of the parent **Canvas**.\n","sig":null,"attributes":[{"value":"/ The length as a weight of the non-absolute length of the parent **Canvas**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623811,"byte_end":623890,"line_start":127,"line_end":127,"column_start":5,"column_end":84}}]},{"kind":"Enum","id":{"krate":0,"index":6866},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623734,"byte_end":623740,"line_start":124,"line_end":124,"column_start":10,"column_end":16},"name":"Length","qualname":"::widget::canvas::Length","value":"Length::{Absolute, Weight}","parent":null,"children":[{"krate":0,"index":6867},{"krate":0,"index":6870}],"decl_id":null,"docs":" Used to describe the desired length for a `Split`.\n","sig":null,"attributes":[{"value":"/ Used to describe the desired length for a `Split`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623629,"byte_end":623683,"line_start":122,"line_end":122,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624081,"byte_end":624082,"line_start":135,"line_end":135,"column_start":5,"column_end":6},"name":"X","qualname":"::widget::canvas::Direction::X","value":"Direction::X(position::Direction)","parent":{"krate":0,"index":6882},"children":[],"decl_id":null,"docs":" Lay splits along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Lay splits along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624042,"byte_end":624076,"line_start":134,"line_end":134,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6886},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624148,"byte_end":624149,"line_start":137,"line_end":137,"column_start":5,"column_end":6},"name":"Y","qualname":"::widget::canvas::Direction::Y","value":"Direction::Y(position::Direction)","parent":{"krate":0,"index":6882},"children":[],"decl_id":null,"docs":" Lay splits along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Lay splits along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624109,"byte_end":624143,"line_start":136,"line_end":136,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":6882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624026,"byte_end":624035,"line_start":133,"line_end":133,"column_start":10,"column_end":19},"name":"Direction","qualname":"::widget::canvas::Direction","value":"Direction::{X, Y}","parent":null,"children":[{"krate":0,"index":6883},{"krate":0,"index":6886}],"decl_id":null,"docs":" The direction in which a sequence of canvas splits will be laid out.\n","sig":null,"attributes":[{"value":"/ The direction in which a sequence of canvas splits will be laid out.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":623914,"byte_end":623986,"line_start":131,"line_end":131,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2550},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624250,"byte_end":624253,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"new","qualname":"<Canvas>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Canvas builder.\n","sig":null,"attributes":[{"value":"/ Construct a new Canvas builder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624203,"byte_end":624238,"line_start":143,"line_end":143,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":6894},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624498,"byte_end":624507,"line_start":154,"line_end":154,"column_start":13,"column_end":22},"name":"title_bar","qualname":"<Canvas>::title_bar","value":"fn (mut self, title_bar: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":6895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624562,"byte_end":624570,"line_start":155,"line_end":155,"column_start":13,"column_end":21},"name":"pad_left","qualname":"<Canvas>::pad_left","value":"fn (mut self, pad_left: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":6896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624617,"byte_end":624626,"line_start":156,"line_end":156,"column_start":13,"column_end":22},"name":"pad_right","qualname":"<Canvas>::pad_right","value":"fn (mut self, pad_right: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":6897},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624674,"byte_end":624684,"line_start":157,"line_end":157,"column_start":13,"column_end":23},"name":"pad_bottom","qualname":"<Canvas>::pad_bottom","value":"fn (mut self, pad_bottom: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":6898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624733,"byte_end":624740,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"name":"pad_top","qualname":"<Canvas>::pad_top","value":"fn (mut self, pad_top: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":6899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624786,"byte_end":624796,"line_start":159,"line_end":159,"column_start":13,"column_end":23},"name":"with_style","qualname":"<Canvas>::with_style","value":"fn (mut self, with_style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624892,"byte_end":624898,"line_start":163,"line_end":163,"column_start":12,"column_end":18},"name":"length","qualname":"<Canvas>::length","value":"fn (mut self, length: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the length of the Split as an absolute scalar.\n","sig":null,"attributes":[{"value":"/ Set the length of the Split as an absolute scalar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624826,"byte_end":624880,"line_start":162,"line_end":162,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625143,"byte_end":625156,"line_start":171,"line_end":171,"column_start":12,"column_end":25},"name":"length_weight","qualname":"<Canvas>::length_weight","value":"fn (mut self, weight: Weight) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the length of the Split as a weight.","sig":null,"attributes":[{"value":"/ Set the length of the Split as a weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625019,"byte_end":625063,"line_start":168,"line_end":168,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625068,"byte_end":625071,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The default length weight for each widget is `1.0`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625076,"byte_end":625131,"line_start":170,"line_end":170,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2554},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625579,"byte_end":625589,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"flow_right","qualname":"<Canvas>::flow_right","value":"fn (self, splits: ListOfSplits<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the child Canvasses flowing to the right.\n","sig":null,"attributes":[{"value":"/ Set the child Canvasses flowing to the right.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625518,"byte_end":625567,"line_start":182,"line_end":182,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625753,"byte_end":625762,"line_start":188,"line_end":188,"column_start":12,"column_end":21},"name":"flow_left","qualname":"<Canvas>::flow_left","value":"fn (self, splits: ListOfSplits<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the child Canvasses flowing to the left.\n","sig":null,"attributes":[{"value":"/ Set the child Canvasses flowing to the left.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625693,"byte_end":625741,"line_start":187,"line_end":187,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625923,"byte_end":625930,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"flow_up","qualname":"<Canvas>::flow_up","value":"fn (self, splits: ListOfSplits<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the child Canvasses flowing upwards.\n","sig":null,"attributes":[{"value":"/ Set the child Canvasses flowing upwards.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":625867,"byte_end":625911,"line_start":192,"line_end":192,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626092,"byte_end":626101,"line_start":198,"line_end":198,"column_start":12,"column_end":21},"name":"flow_down","qualname":"<Canvas>::flow_down","value":"fn (self, splits: ListOfSplits<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the child Canvasses flowing downwards.\n","sig":null,"attributes":[{"value":"/ Set the child Canvasses flowing downwards.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626034,"byte_end":626080,"line_start":197,"line_end":197,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626313,"byte_end":626316,"line_start":204,"line_end":204,"column_start":12,"column_end":15},"name":"pad","qualname":"<Canvas>::pad","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the padding for all edges of the area where child widgets will be placed.\n","sig":null,"attributes":[{"value":"/ Set the padding for all edges of the area where child widgets will be placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626206,"byte_end":626287,"line_start":202,"line_end":202,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626292,"byte_end":626301,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2559},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626521,"byte_end":626528,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"padding","qualname":"<Canvas>::padding","value":"fn (self, pad: Padding) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the padding of the area where child widgets will be placed.\n","sig":null,"attributes":[{"value":"/ Set the padding of the area where child widgets will be placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626428,"byte_end":626495,"line_start":208,"line_end":208,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626500,"byte_end":626509,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626783,"byte_end":626798,"line_start":218,"line_end":218,"column_start":12,"column_end":27},"name":"title_bar_color","qualname":"<Canvas>::title_bar_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the color of the `Canvas`' `TitleBar` if it is visible.\n","sig":null,"attributes":[{"value":"/ Set the color of the `Canvas`' `TitleBar` if it is visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626708,"byte_end":626771,"line_start":217,"line_end":217,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2581},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":634856,"byte_end":634863,"line_start":423,"line_end":423,"column_start":12,"column_end":19},"name":"padding","qualname":"<Style>::padding","value":"fn (&self, theme: &Theme) -> position::Padding","parent":null,"children":[],"decl_id":null,"docs":" Get the Padding for the Canvas' kid area.\n","sig":null,"attributes":[{"value":"/ Get the Padding for the Canvas' kid area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":634799,"byte_end":634844,"line_start":422,"line_end":422,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":2589},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collapsible_area","qualname":"::widget::collapsible_area","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","parent":null,"children":[{"krate":0,"index":2590},{"krate":0,"index":2597},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":6905},{"krate":0,"index":6922},{"krate":0,"index":6919},{"krate":0,"index":6916},{"krate":0,"index":6911},{"krate":0,"index":6926},{"krate":0,"index":6924},{"krate":0,"index":2606},{"krate":0,"index":6930},{"krate":0,"index":6973},{"krate":0,"index":6971},{"krate":0,"index":6969},{"krate":0,"index":6967},{"krate":0,"index":6963},{"krate":0,"index":6964},{"krate":0,"index":6937},{"krate":0,"index":6974},{"krate":0,"index":6992},{"krate":0,"index":6990},{"krate":0,"index":6988},{"krate":0,"index":6985},{"krate":0,"index":6986},{"krate":0,"index":6982},{"krate":0,"index":6983},{"krate":0,"index":6979},{"krate":0,"index":6993},{"krate":0,"index":7005},{"krate":0,"index":7003},{"krate":0,"index":7001},{"krate":0,"index":6997},{"krate":0,"index":6998},{"krate":0,"index":2608},{"krate":0,"index":2614},{"krate":0,"index":2624},{"krate":0,"index":2627},{"krate":0,"index":2631},{"krate":0,"index":2633}],"decl_id":null,"docs":" The `CollapsibleArea` widget and related items.\n","sig":null,"attributes":[{"value":"! The `CollapsibleArea` widget and related items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":635685,"byte_end":635736,"line_start":1,"line_end":1,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":6905},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636075,"byte_end":636090,"line_start":14,"line_end":14,"column_start":12,"column_end":27},"name":"CollapsibleArea","qualname":"::widget::collapsible_area::CollapsibleArea","value":"CollapsibleArea {  }","parent":null,"children":[{"krate":0,"index":6910},{"krate":0,"index":6907},{"krate":0,"index":6908},{"krate":0,"index":6909}],"decl_id":null,"docs":" A vertically collapsible area.","sig":null,"attributes":[{"value":"/ A vertically collapsible area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":635895,"byte_end":635929,"line_start":10,"line_end":10,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":635930,"byte_end":635933,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ When \"open\" this widget returns a canvas upon which other widgets can be placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":635934,"byte_end":636018,"line_start":12,"line_end":12,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":6926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636381,"byte_end":636384,"line_start":25,"line_end":25,"column_start":16,"column_end":19},"name":"Ids","qualname":"::widget::collapsible_area::Ids","value":"Ids { button, triangle, area }","parent":null,"children":[{"krate":0,"index":6927},{"krate":0,"index":6928},{"krate":0,"index":6929}],"decl_id":null,"docs":" The unique identifiers for the `CollapsibleArea`'s child widgets.\n","sig":null,"attributes":[{"value":"allow(missing_docs, missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":506683,"byte_end":506691,"line_start":265,"line_end":265,"column_start":11,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":6927},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636395,"byte_end":636401,"line_start":26,"line_end":26,"column_start":9,"column_end":15},"name":"button","qualname":"::widget::collapsible_area::Ids::button","value":"daggy::NodeIndex","parent":{"krate":0,"index":6926},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6928},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636411,"byte_end":636419,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"triangle","qualname":"::widget::collapsible_area::Ids::triangle","value":"daggy::NodeIndex","parent":{"krate":0,"index":6926},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6929},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636429,"byte_end":636433,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"name":"area","qualname":"::widget::collapsible_area::Ids::area","value":"daggy::NodeIndex","parent":{"krate":0,"index":6926},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636534,"byte_end":636539,"line_start":33,"line_end":33,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::collapsible_area::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2607}],"decl_id":null,"docs":" The unique state cached within the widget graph for the `CollapsibleArea`.\n","sig":null,"attributes":[{"value":"/ The unique state cached within the widget graph for the `CollapsibleArea`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636444,"byte_end":636522,"line_start":32,"line_end":32,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":6930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636678,"byte_end":636683,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::collapsible_area::Style","value":"Style { color, border, border_color, label_color, label_font_size, label_font_id }","parent":null,"children":[{"krate":0,"index":6931},{"krate":0,"index":6932},{"krate":0,"index":6933},{"krate":0,"index":6934},{"krate":0,"index":6935},{"krate":0,"index":6936}],"decl_id":null,"docs":" Unique styling for the CollapsibleArea.\n","sig":null,"attributes":[{"value":"/ Unique styling for the CollapsibleArea.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636559,"byte_end":636602,"line_start":37,"line_end":37,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":6931},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636785,"byte_end":636790,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::collapsible_area::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6930},"children":[],"decl_id":null,"docs":" Color of the Button's pressable area.\n","sig":null,"attributes":[{"value":"/ Color of the Button's pressable area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636690,"byte_end":636731,"line_start":40,"line_end":40,"column_start":5,"column_end":46}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636736,"byte_end":636776,"line_start":41,"line_end":41,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6932},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636912,"byte_end":636918,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::collapsible_area::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":6930},"children":[],"decl_id":null,"docs":" Width of the border surrounding the button\n","sig":null,"attributes":[{"value":"/ Width of the border surrounding the button","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636811,"byte_end":636857,"line_start":43,"line_end":43,"column_start":5,"column_end":51}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636862,"byte_end":636903,"line_start":44,"line_end":44,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6933},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637023,"byte_end":637035,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::collapsible_area::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6930},"children":[],"decl_id":null,"docs":" The color of the border.\n","sig":null,"attributes":[{"value":"/ The color of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636940,"byte_end":636968,"line_start":46,"line_end":46,"column_start":5,"column_end":33}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636973,"byte_end":637014,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637146,"byte_end":637157,"line_start":51,"line_end":51,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::collapsible_area::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":6930},"children":[],"decl_id":null,"docs":" The color of the Button's label.\n","sig":null,"attributes":[{"value":"/ The color of the Button's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637056,"byte_end":637092,"line_start":49,"line_end":49,"column_start":5,"column_end":41}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637097,"byte_end":637137,"line_start":50,"line_end":50,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6935},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637259,"byte_end":637274,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::collapsible_area::Style::label_font_size","value":"std::option::Option<std::option::Option<u32>>","parent":{"krate":0,"index":6930},"children":[],"decl_id":null,"docs":" The font size of the Button's label.\n","sig":null,"attributes":[{"value":"/ The font size of the Button's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637178,"byte_end":637218,"line_start":52,"line_end":52,"column_start":5,"column_end":45}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637223,"byte_end":637250,"line_start":53,"line_end":53,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":6936},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637405,"byte_end":637418,"line_start":57,"line_end":57,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::collapsible_area::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":6930},"children":[],"decl_id":null,"docs":" The ID of the font used to display the label.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637306,"byte_end":637355,"line_start":55,"line_end":55,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637360,"byte_end":637396,"line_start":56,"line_end":56,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":6939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636785,"byte_end":636790,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6943},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":636912,"byte_end":636918,"line_start":45,"line_end":45,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637023,"byte_end":637035,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637146,"byte_end":637157,"line_start":51,"line_end":51,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6955},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637259,"byte_end":637274,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> Option<FontSize>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6959},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637405,"byte_end":637418,"line_start":57,"line_end":57,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6975},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637633,"byte_end":637637,"line_start":64,"line_end":64,"column_start":5,"column_end":9},"name":"Open","qualname":"::widget::collapsible_area::Event::Open","value":"Event::Open","parent":{"krate":0,"index":6974},"children":[],"decl_id":null,"docs":" The collapsible area was opened.\n","sig":null,"attributes":[{"value":"/ The collapsible area was opened.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637592,"byte_end":637628,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6977},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637684,"byte_end":637689,"line_start":66,"line_end":66,"column_start":5,"column_end":10},"name":"Close","qualname":"::widget::collapsible_area::Event::Close","value":"Event::Close","parent":{"krate":0,"index":6974},"children":[],"decl_id":null,"docs":" The collapsible area was closed.\n","sig":null,"attributes":[{"value":"/ The collapsible area was closed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637643,"byte_end":637679,"line_start":65,"line_end":65,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":6974},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637580,"byte_end":637585,"line_start":62,"line_end":62,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::collapsible_area::Event","value":"Event::{Open, Close}","parent":null,"children":[{"krate":0,"index":6975},{"krate":0,"index":6977}],"decl_id":null,"docs":" The event returned when the text bar or triangle is pressed.\n","sig":null,"attributes":[{"value":"/ The event returned when the text bar or triangle is pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637455,"byte_end":637519,"line_start":60,"line_end":60,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":6993},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637818,"byte_end":637822,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"Area","qualname":"::widget::collapsible_area::Area","value":"Area { id, collapsible_area_id, width }","parent":null,"children":[{"krate":0,"index":6994},{"krate":0,"index":6995},{"krate":0,"index":6996}],"decl_id":null,"docs":" The area returned by the widget when the `CollapsibleArea` is open.\n","sig":null,"attributes":[{"value":"/ The area returned by the widget when the `CollapsibleArea` is open.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637694,"byte_end":637765,"line_start":69,"line_end":69,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6994},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637884,"byte_end":637886,"line_start":73,"line_end":73,"column_start":9,"column_end":11},"name":"id","qualname":"::widget::collapsible_area::Area::id","value":"daggy::NodeIndex","parent":{"krate":0,"index":6993},"children":[],"decl_id":null,"docs":" A unique identifier for the user's widget.\n","sig":null,"attributes":[{"value":"/ A unique identifier for the user's widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637829,"byte_end":637875,"line_start":72,"line_end":72,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6995},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637983,"byte_end":638002,"line_start":75,"line_end":75,"column_start":9,"column_end":28},"name":"collapsible_area_id","qualname":"::widget::collapsible_area::Area::collapsible_area_id","value":"daggy::NodeIndex","parent":{"krate":0,"index":6993},"children":[],"decl_id":null,"docs":" The widget::Id for the collapsible area that produced this `Area`.\n","sig":null,"attributes":[{"value":"/ The widget::Id for the collapsible area that produced this `Area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":637904,"byte_end":637974,"line_start":74,"line_end":74,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":6996},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638094,"byte_end":638099,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"name":"width","qualname":"::widget::collapsible_area::Area::width","value":"f64","parent":{"krate":0,"index":6993},"children":[],"decl_id":null,"docs":" The width of the `CollapsibleArea` that produced this `Area`.\n","sig":null,"attributes":[{"value":"/ The width of the `CollapsibleArea` that produced this `Area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638020,"byte_end":638085,"line_start":76,"line_end":76,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638208,"byte_end":638211,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<CollapsibleArea>::new","value":"fn (is_open: bool, text: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building the `CollapsibleArea` widget.\n","sig":null,"attributes":[{"value":"/ Begin building the `CollapsibleArea` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638148,"byte_end":638196,"line_start":83,"line_end":83,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638511,"byte_end":638522,"line_start":94,"line_end":94,"column_start":12,"column_end":23},"name":"label_color","qualname":"<CollapsibleArea>::label_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the color of the `CollapsibleArea`'s label.\n","sig":null,"attributes":[{"value":"/ Specify the color of the `CollapsibleArea`'s label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638444,"byte_end":638499,"line_start":93,"line_end":93,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638699,"byte_end":638714,"line_start":100,"line_end":100,"column_start":12,"column_end":27},"name":"label_font_size","qualname":"<CollapsibleArea>::label_font_size","value":"fn (mut self, font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font size for the `CollapsibleArea`'s label.\n","sig":null,"attributes":[{"value":"/ Specify the font size for the `CollapsibleArea`'s label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638627,"byte_end":638687,"line_start":99,"line_end":99,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638907,"byte_end":638920,"line_start":106,"line_end":106,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<CollapsibleArea>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font for the `CollapsibleArea`'s label.\n","sig":null,"attributes":[{"value":"/ Specify the font for the `CollapsibleArea`'s label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638840,"byte_end":638895,"line_start":105,"line_end":105,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2632},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643137,"byte_end":643144,"line_start":233,"line_end":233,"column_start":12,"column_end":19},"name":"is_open","qualname":"<Event>::is_open","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether or not the `Event` results in an open collapsible area.\n","sig":null,"attributes":[{"value":"/ Returns whether or not the `Event` results in an open collapsible area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643050,"byte_end":643125,"line_start":232,"line_end":232,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643433,"byte_end":643436,"line_start":245,"line_end":245,"column_start":12,"column_end":15},"name":"set","qualname":"<Area>::set","value":"fn <W> (self, widget: W, ui: &mut UiCell) -> W::Event","parent":null,"children":[],"decl_id":null,"docs":" Set the user's given widget directly under the `CollapsibleArea`.","sig":null,"attributes":[{"value":"/ Set the user's given widget directly under the `CollapsibleArea`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643287,"byte_end":643356,"line_start":242,"line_end":242,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643361,"byte_end":643364,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Returns any events produced by the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643369,"byte_end":643421,"line_start":244,"line_end":244,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"drop_down_list","qualname":"::widget::drop_down_list","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","parent":null,"children":[{"krate":0,"index":2637},{"krate":0,"index":2645},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":7006},{"krate":0,"index":7015},{"krate":0,"index":7021},{"krate":0,"index":7094},{"krate":0,"index":7092},{"krate":0,"index":7090},{"krate":0,"index":7088},{"krate":0,"index":7084},{"krate":0,"index":7085},{"krate":0,"index":7034},{"krate":0,"index":7097},{"krate":0,"index":7095},{"krate":0,"index":2656},{"krate":0,"index":7100},{"krate":0,"index":7112},{"krate":0,"index":7113},{"krate":0,"index":7110},{"krate":0,"index":7109},{"krate":0,"index":7107},{"krate":0,"index":7116},{"krate":0,"index":7126},{"krate":0,"index":7127},{"krate":0,"index":7124},{"krate":0,"index":7123},{"krate":0,"index":7121},{"krate":0,"index":2659},{"krate":0,"index":2675},{"krate":0,"index":2695},{"krate":0,"index":2698},{"krate":0,"index":2701},{"krate":0,"index":2704}],"decl_id":null,"docs":" The `DropDownList` and related items.\n","sig":null,"attributes":[{"value":"! The `DropDownList` and related items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":643790,"byte_end":643831,"line_start":1,"line_end":1,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2654},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644045,"byte_end":644048,"line_start":11,"line_end":11,"column_start":10,"column_end":13},"name":"Idx","qualname":"::widget::drop_down_list::Idx","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The index of a selected item.\n","sig":null,"attributes":[{"value":"/ The index of a selected item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644002,"byte_end":644035,"line_start":10,"line_end":10,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":2655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644102,"byte_end":644105,"line_start":13,"line_end":13,"column_start":10,"column_end":13},"name":"Len","qualname":"::widget::drop_down_list::Len","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The number of items in a list.\n","sig":null,"attributes":[{"value":"/ The number of items in a list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644058,"byte_end":644092,"line_start":12,"line_end":12,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644285,"byte_end":644297,"line_start":19,"line_end":19,"column_start":12,"column_end":24},"name":"DropDownList","qualname":"::widget::drop_down_list::DropDownList","value":"DropDownList {  }","parent":null,"children":[{"krate":0,"index":7014},{"krate":0,"index":7009},{"krate":0,"index":7010},{"krate":0,"index":7011},{"krate":0,"index":7012},{"krate":0,"index":7013}],"decl_id":null,"docs":" Displays a given `Vec<String>` as a selectable drop down menu.","sig":null,"attributes":[{"value":"/ Displays a given `Vec<String>` as a selectable drop down menu.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644116,"byte_end":644182,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644183,"byte_end":644186,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ It's reaction is triggered upon selection of a list item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644187,"byte_end":644248,"line_start":17,"line_end":17,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":7021},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644657,"byte_end":644662,"line_start":31,"line_end":31,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::drop_down_list::Style","value":"Style { color, border, border_color, label_color, label_font_size, label_justify, label_x, label_y, maybe_max_visible_height, scrollbar_position, scrollbar_width, label_font_id }","parent":null,"children":[{"krate":0,"index":7022},{"krate":0,"index":7023},{"krate":0,"index":7024},{"krate":0,"index":7025},{"krate":0,"index":7026},{"krate":0,"index":7027},{"krate":0,"index":7028},{"krate":0,"index":7029},{"krate":0,"index":7030},{"krate":0,"index":7031},{"krate":0,"index":7032},{"krate":0,"index":7033}],"decl_id":null,"docs":" Styling for the DropDownList, necessary for constructing its renderable Element.\n","sig":null,"attributes":[{"value":"/ Styling for the DropDownList, necessary for constructing its renderable Element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644497,"byte_end":644581,"line_start":29,"line_end":29,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":7022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644747,"byte_end":644752,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::drop_down_list::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" Color of the widget.\n","sig":null,"attributes":[{"value":"/ Color of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644669,"byte_end":644693,"line_start":32,"line_end":32,"column_start":5,"column_end":29}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644698,"byte_end":644738,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644861,"byte_end":644867,"line_start":37,"line_end":37,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::drop_down_list::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" Width of the widget's border.\n","sig":null,"attributes":[{"value":"/ Width of the widget's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644773,"byte_end":644806,"line_start":35,"line_end":35,"column_start":5,"column_end":38}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644811,"byte_end":644852,"line_start":36,"line_end":36,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7024},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644977,"byte_end":644989,"line_start":40,"line_end":40,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::drop_down_list::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" Color of the widget's border.\n","sig":null,"attributes":[{"value":"/ Color of the widget's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644889,"byte_end":644922,"line_start":38,"line_end":38,"column_start":5,"column_end":38}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644927,"byte_end":644968,"line_start":39,"line_end":39,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7025},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645093,"byte_end":645104,"line_start":43,"line_end":43,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::drop_down_list::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" Color of the item labels.\n","sig":null,"attributes":[{"value":"/ Color of the item labels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645010,"byte_end":645039,"line_start":41,"line_end":41,"column_start":5,"column_end":34}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645044,"byte_end":645084,"line_start":42,"line_end":42,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7026},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645218,"byte_end":645233,"line_start":46,"line_end":46,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::drop_down_list::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" Font size for the item labels.\n","sig":null,"attributes":[{"value":"/ Font size for the item labels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645125,"byte_end":645159,"line_start":44,"line_end":44,"column_start":5,"column_end":39}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645164,"byte_end":645209,"line_start":45,"line_end":45,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":7027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645371,"byte_end":645384,"line_start":49,"line_end":49,"column_start":9,"column_end":22},"name":"label_justify","qualname":"::widget::drop_down_list::Style::label_justify","value":"std::option::Option<text::Justify>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" The label's typographic alignment over the *x* axis.\n","sig":null,"attributes":[{"value":"/ The label's typographic alignment over the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645257,"byte_end":645313,"line_start":47,"line_end":47,"column_start":5,"column_end":61}},{"value":"conrod(default = \"text::Justify::Center\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645318,"byte_end":645362,"line_start":48,"line_end":48,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":7028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645559,"byte_end":645566,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"label_x","qualname":"::widget::drop_down_list::Style::label_x","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" The label's position relative to its `Button` along the *x* axis.\n","sig":null,"attributes":[{"value":"/ The label's position relative to its `Button` along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645413,"byte_end":645482,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645487,"byte_end":645550,"line_start":51,"line_end":51,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":7029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645746,"byte_end":645753,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"name":"label_y","qualname":"::widget::drop_down_list::Style::label_y","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" The label's position relative to its `Button` along the *y* axis.\n","sig":null,"attributes":[{"value":"/ The label's position relative to its `Button` along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645600,"byte_end":645669,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645674,"byte_end":645737,"line_start":54,"line_end":54,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":7030},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645893,"byte_end":645917,"line_start":58,"line_end":58,"column_start":9,"column_end":33},"name":"maybe_max_visible_height","qualname":"::widget::drop_down_list::Style::maybe_max_visible_height","value":"std::option::Option<std::option::Option<widget::drop_down_list::MaxHeight>>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" Maximum height of the Open menu before the scrollbar appears.\n","sig":null,"attributes":[{"value":"/ Maximum height of the Open menu before the scrollbar appears.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645787,"byte_end":645852,"line_start":56,"line_end":56,"column_start":5,"column_end":70}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645857,"byte_end":645884,"line_start":57,"line_end":57,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7031},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646065,"byte_end":646083,"line_start":61,"line_end":61,"column_start":9,"column_end":27},"name":"scrollbar_position","qualname":"::widget::drop_down_list::Style::scrollbar_position","value":"std::option::Option<std::option::Option<widget::list::ScrollbarPosition>>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" The position of the scrollbar in the case that the list is scrollable.\n","sig":null,"attributes":[{"value":"/ The position of the scrollbar in the case that the list is scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645950,"byte_end":646024,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646029,"byte_end":646056,"line_start":60,"line_end":60,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7032},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646250,"byte_end":646265,"line_start":64,"line_end":64,"column_start":9,"column_end":24},"name":"scrollbar_width","qualname":"::widget::drop_down_list::Style::scrollbar_width","value":"std::option::Option<std::option::Option<f64>>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" The width of the scrollbar in the case that the list is scrollable.\n","sig":null,"attributes":[{"value":"/ The width of the scrollbar in the case that the list is scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646138,"byte_end":646209,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646214,"byte_end":646241,"line_start":63,"line_end":63,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646395,"byte_end":646408,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::drop_down_list::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":7021},"children":[],"decl_id":null,"docs":" The ID of the font used to display the labels.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the labels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646295,"byte_end":646345,"line_start":65,"line_end":65,"column_start":5,"column_end":55}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646350,"byte_end":646386,"line_start":66,"line_end":66,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":7036},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644747,"byte_end":644752,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644861,"byte_end":644867,"line_start":37,"line_end":37,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7044},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":644977,"byte_end":644989,"line_start":40,"line_end":40,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7048},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645093,"byte_end":645104,"line_start":43,"line_end":43,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645218,"byte_end":645233,"line_start":46,"line_end":46,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645371,"byte_end":645384,"line_start":49,"line_end":49,"column_start":9,"column_end":22},"name":"label_justify","qualname":"<Style>::label_justify","value":"fn (&self, theme: &::Theme) -> text::Justify","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7060},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645559,"byte_end":645566,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"label_x","qualname":"<Style>::label_x","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645746,"byte_end":645753,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"name":"label_y","qualname":"<Style>::label_y","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7068},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":645893,"byte_end":645917,"line_start":58,"line_end":58,"column_start":9,"column_end":33},"name":"maybe_max_visible_height","qualname":"<Style>::maybe_max_visible_height","value":"fn (&self, theme: &::Theme) -> Option<MaxHeight>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7072},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646065,"byte_end":646083,"line_start":61,"line_end":61,"column_start":9,"column_end":27},"name":"scrollbar_position","qualname":"<Style>::scrollbar_position","value":"fn (&self, theme: &::Theme) -> Option<widget::list::ScrollbarPosition>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7076},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646250,"byte_end":646265,"line_start":64,"line_end":64,"column_start":9,"column_end":24},"name":"scrollbar_width","qualname":"<Style>::scrollbar_width","value":"fn (&self, theme: &::Theme) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646395,"byte_end":646408,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646577,"byte_end":646582,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::drop_down_list::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2657},{"krate":0,"index":2658}],"decl_id":null,"docs":" Represents the state of the DropDownList.\n","sig":null,"attributes":[{"value":"/ Represents the state of the DropDownList.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646520,"byte_end":646565,"line_start":77,"line_end":77,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646827,"byte_end":646832,"line_start":87,"line_end":87,"column_start":5,"column_end":10},"name":"Items","qualname":"::widget::drop_down_list::MaxHeight::Items","value":"MaxHeight::Items(usize)","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" Specify the max height as a number of items.\n","sig":null,"attributes":[{"value":"/ Specify the max height as a number of items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646774,"byte_end":646822,"line_start":86,"line_end":86,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646908,"byte_end":646914,"line_start":89,"line_end":89,"column_start":5,"column_end":11},"name":"Scalar","qualname":"::widget::drop_down_list::MaxHeight::Scalar","value":"MaxHeight::Scalar(f64)","parent":{"krate":0,"index":7100},"children":[],"decl_id":null,"docs":" Specify the max height as an absolute scalar distance.\n","sig":null,"attributes":[{"value":"/ Specify the max height as an absolute scalar distance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646845,"byte_end":646903,"line_start":88,"line_end":88,"column_start":5,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":7100},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646758,"byte_end":646767,"line_start":85,"line_end":85,"column_start":10,"column_end":19},"name":"MaxHeight","qualname":"::widget::drop_down_list::MaxHeight","value":"MaxHeight::{Items, Scalar}","parent":null,"children":[{"krate":0,"index":7101},{"krate":0,"index":7104}],"decl_id":null,"docs":" Representations of the max height of the visible area of the DropDownList.\n","sig":null,"attributes":[{"value":"/ Representations of the max height of the visible area of the DropDownList.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":646629,"byte_end":646707,"line_start":83,"line_end":83,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647149,"byte_end":647152,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<DropDownList>::new","value":"fn (items: &'a [T], selected: Option<Idx>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new DropDownList.\n","sig":null,"attributes":[{"value":"/ Construct a new DropDownList.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647104,"byte_end":647137,"line_start":101,"line_end":101,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":7129},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647483,"byte_end":647490,"line_start":114,"line_end":114,"column_start":13,"column_end":20},"name":"enabled","qualname":"<DropDownList>::enabled","value":"fn (mut self, enabled: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647640,"byte_end":647657,"line_start":119,"line_end":119,"column_start":12,"column_end":29},"name":"max_visible_items","qualname":"<DropDownList>::max_visible_items","value":"fn (mut self, num: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the maximum height of the DropDownList (before the scrollbar appears) as a number of\n items.\n","sig":null,"attributes":[{"value":"/ Set the maximum height of the DropDownList (before the scrollbar appears) as a number of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647521,"byte_end":647613,"line_start":117,"line_end":117,"column_start":5,"column_end":97}},{"value":"/ items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647618,"byte_end":647628,"line_start":118,"line_end":118,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647912,"byte_end":647930,"line_start":126,"line_end":126,"column_start":12,"column_end":30},"name":"max_visible_height","qualname":"<DropDownList>::max_visible_height","value":"fn (mut self, height: f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the maximum height of the DropDownList (before the scrollbar appears) as a scalar\n height.\n","sig":null,"attributes":[{"value":"/ Set the maximum height of the DropDownList (before the scrollbar appears) as a scalar","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647795,"byte_end":647884,"line_start":124,"line_end":124,"column_start":5,"column_end":94}},{"value":"/ height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647889,"byte_end":647900,"line_start":125,"line_end":125,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2665},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648201,"byte_end":648218,"line_start":133,"line_end":133,"column_start":12,"column_end":29},"name":"scrollbar_next_to","qualname":"<DropDownList>::scrollbar_next_to","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the list should be scrollable and should provide a `Scrollbar` to the right\n of the items.\n","sig":null,"attributes":[{"value":"/ Specifies that the list should be scrollable and should provide a `Scrollbar` to the right","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648073,"byte_end":648167,"line_start":131,"line_end":131,"column_start":5,"column_end":99}},{"value":"/ of the items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648172,"byte_end":648189,"line_start":132,"line_end":132,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648559,"byte_end":648575,"line_start":140,"line_end":140,"column_start":12,"column_end":28},"name":"scrollbar_on_top","qualname":"<DropDownList>::scrollbar_on_top","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the list should be scrollable and should provide a `Scrollbar` that hovers\n above the right edge of the items and automatically hides when the user is not scrolling.\n","sig":null,"attributes":[{"value":"/ Specifies that the list should be scrollable and should provide a `Scrollbar` that hovers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648356,"byte_end":648449,"line_start":138,"line_end":138,"column_start":5,"column_end":98}},{"value":"/ above the right edge of the items and automatically hides when the user is not scrolling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648454,"byte_end":648547,"line_start":139,"line_end":139,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648803,"byte_end":648815,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"no_scrollbar","qualname":"<DropDownList>::no_scrollbar","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Even in the case that the list is scrollable, do not display a `Scrollbar`.\n","sig":null,"attributes":[{"value":"/ Even in the case that the list is scrollable, do not display a `Scrollbar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648712,"byte_end":648791,"line_start":145,"line_end":145,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648963,"byte_end":648978,"line_start":152,"line_end":152,"column_start":12,"column_end":27},"name":"scrollbar_width","qualname":"<DropDownList>::scrollbar_width","value":"fn (mut self, w: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the width of the scrollbar.\n","sig":null,"attributes":[{"value":"/ Specify the width of the scrollbar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":648912,"byte_end":648951,"line_start":151,"line_end":151,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649149,"byte_end":649162,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<DropDownList>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649086,"byte_end":649137,"line_start":157,"line_end":157,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649361,"byte_end":649379,"line_start":164,"line_end":164,"column_start":12,"column_end":30},"name":"left_justify_label","qualname":"<DropDownList>::left_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the labels to the left of their `Button`s' surface.\n","sig":null,"attributes":[{"value":"/ Align the labels to the left of their `Button`s' surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649288,"byte_end":649349,"line_start":163,"line_end":163,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649560,"byte_end":649579,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"right_justify_label","qualname":"<DropDownList>::right_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the labels to the right of their `Button`s' surface.\n","sig":null,"attributes":[{"value":"/ Align the labels to the right of their `Button`s' surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649486,"byte_end":649548,"line_start":169,"line_end":169,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649753,"byte_end":649773,"line_start":176,"line_end":176,"column_start":12,"column_end":32},"name":"center_justify_label","qualname":"<DropDownList>::center_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Center the labels to the their `Button`s' surface.\n","sig":null,"attributes":[{"value":"/ Center the labels to the their `Button`s' surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649687,"byte_end":649741,"line_start":175,"line_end":175,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649969,"byte_end":649976,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"label_x","qualname":"<DropDownList>::label_x","value":"fn (mut self, x: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Button` along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Button` along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":649882,"byte_end":649957,"line_start":181,"line_end":181,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":650169,"byte_end":650176,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"label_y","qualname":"<DropDownList>::label_y","value":"fn (mut self, y: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Button` along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Button` along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":650082,"byte_end":650157,"line_start":187,"line_end":187,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":656868,"byte_end":656880,"line_start":354,"line_end":354,"column_start":12,"column_end":24},"name":"button_style","qualname":"<Style>::button_style","value":"fn (&self, is_selected: bool) -> widget::button::Style","parent":null,"children":[],"decl_id":null,"docs":" Style for a `Button` given this `Style`'s current state.\n","sig":null,"attributes":[{"value":"/ Style for a `Button` given this `Style`'s current state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":656796,"byte_end":656856,"line_start":353,"line_end":353,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":2707},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"envelope_editor","qualname":"::widget::envelope_editor","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","parent":null,"children":[{"krate":0,"index":2708},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2724},{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":2731},{"krate":0,"index":7136},{"krate":0,"index":7149},{"krate":0,"index":7155},{"krate":0,"index":7213},{"krate":0,"index":7211},{"krate":0,"index":7209},{"krate":0,"index":7207},{"krate":0,"index":7203},{"krate":0,"index":7204},{"krate":0,"index":7165},{"krate":0,"index":7216},{"krate":0,"index":7214},{"krate":0,"index":2732},{"krate":0,"index":2735},{"krate":0,"index":2745},{"krate":0,"index":2753},{"krate":0,"index":7227},{"krate":0,"index":7244},{"krate":0,"index":7241},{"krate":0,"index":7238},{"krate":0,"index":2758},{"krate":0,"index":2764},{"krate":0,"index":2790},{"krate":0,"index":2793},{"krate":0,"index":2796}],"decl_id":null,"docs":" The `EnvelopeEditor` widget and related items.\n","sig":null,"attributes":[{"value":"! The `EnvelopeEditor` widget and related items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":657955,"byte_end":658005,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":7136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658505,"byte_end":658519,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"EnvelopeEditor","qualname":"::widget::envelope_editor::EnvelopeEditor","value":"EnvelopeEditor { skew_y_range }","parent":null,"children":[{"krate":0,"index":7148},{"krate":0,"index":7139},{"krate":0,"index":7140},{"krate":0,"index":7141},{"krate":0,"index":7142},{"krate":0,"index":7143},{"krate":0,"index":7144},{"krate":0,"index":7145},{"krate":0,"index":7146},{"krate":0,"index":7147}],"decl_id":null,"docs":" Used for editing a series of 2D Points on a cartesian (X, Y) plane within some given range.","sig":null,"attributes":[{"value":"/ Used for editing a series of 2D Points on a cartesian (X, Y) plane within some given range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658257,"byte_end":658352,"line_start":12,"line_end":12,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658353,"byte_end":658356,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Useful for things such as oscillator/automation envelopes or any value series represented","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658357,"byte_end":658450,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ periodically.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658451,"byte_end":658468,"line_start":15,"line_end":15,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":7140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658782,"byte_end":658794,"line_start":25,"line_end":25,"column_start":9,"column_end":21},"name":"skew_y_range","qualname":"::widget::envelope_editor::EnvelopeEditor::skew_y_range","value":"f32","parent":{"krate":0,"index":7136},"children":[],"decl_id":null,"docs":" The value skewing for the envelope's y-axis. This is useful for displaying exponential\n ranges such as frequency.\n","sig":null,"attributes":[{"value":"/ The value skewing for the envelope's y-axis. This is useful for displaying exponential","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658649,"byte_end":658739,"line_start":23,"line_end":23,"column_start":5,"column_end":95}},{"value":"/ ranges such as frequency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658744,"byte_end":658773,"line_start":24,"line_end":24,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":7155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659097,"byte_end":659102,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::envelope_editor::Style","value":"Style { color, border, border_color, label_color, label_font_size, value_font_size, point_radius, line_thickness, label_font_id }","parent":null,"children":[{"krate":0,"index":7156},{"krate":0,"index":7157},{"krate":0,"index":7158},{"krate":0,"index":7159},{"krate":0,"index":7160},{"krate":0,"index":7161},{"krate":0,"index":7162},{"krate":0,"index":7163},{"krate":0,"index":7164}],"decl_id":null,"docs":" Styling for the EnvelopeEditor, necessary for constructing its renderable Element.\n","sig":null,"attributes":[{"value":"/ Styling for the EnvelopeEditor, necessary for constructing its renderable Element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":658935,"byte_end":659021,"line_start":33,"line_end":33,"column_start":1,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":7156},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659223,"byte_end":659228,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::envelope_editor::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" Coloring for the EnvelopeEditor's **BorderedRectangle**.\n","sig":null,"attributes":[{"value":"/ Coloring for the EnvelopeEditor's **BorderedRectangle**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659109,"byte_end":659169,"line_start":36,"line_end":36,"column_start":5,"column_end":65}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659174,"byte_end":659214,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7157},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659356,"byte_end":659362,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::envelope_editor::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" Thickness of the **BorderedRectangle**'s border.\n","sig":null,"attributes":[{"value":"/ Thickness of the **BorderedRectangle**'s border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659249,"byte_end":659301,"line_start":39,"line_end":39,"column_start":5,"column_end":57}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659306,"byte_end":659347,"line_start":40,"line_end":40,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7158},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659460,"byte_end":659472,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::envelope_editor::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" Color of the border.\n","sig":null,"attributes":[{"value":"/ Color of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659381,"byte_end":659405,"line_start":42,"line_end":42,"column_start":5,"column_end":29}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659410,"byte_end":659451,"line_start":43,"line_end":43,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7159},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659570,"byte_end":659581,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::envelope_editor::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" Color of the label.\n","sig":null,"attributes":[{"value":"/ Color of the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659493,"byte_end":659516,"line_start":45,"line_end":45,"column_start":5,"column_end":28}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659521,"byte_end":659561,"line_start":46,"line_end":46,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659730,"byte_end":659745,"line_start":50,"line_end":50,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::envelope_editor::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" The font size of the **EnvelopeEditor**'s label if one was given.\n","sig":null,"attributes":[{"value":"/ The font size of the **EnvelopeEditor**'s label if one was given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659602,"byte_end":659671,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659676,"byte_end":659721,"line_start":49,"line_end":49,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":7161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659845,"byte_end":659860,"line_start":53,"line_end":53,"column_start":9,"column_end":24},"name":"value_font_size","qualname":"::widget::envelope_editor::Style::value_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" The font size of the value label.\n","sig":null,"attributes":[{"value":"/ The font size of the value label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659769,"byte_end":659806,"line_start":51,"line_end":51,"column_start":5,"column_end":42}},{"value":"conrod(default = \"14\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659811,"byte_end":659836,"line_start":52,"line_end":52,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":7162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659962,"byte_end":659974,"line_start":56,"line_end":56,"column_start":9,"column_end":21},"name":"point_radius","qualname":"::widget::envelope_editor::Style::point_radius","value":"std::option::Option<f64>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" The radius of the envelope points.\n","sig":null,"attributes":[{"value":"/ The radius of the envelope points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659884,"byte_end":659922,"line_start":54,"line_end":54,"column_start":5,"column_end":43}},{"value":"conrod(default = \"6.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659927,"byte_end":659953,"line_start":55,"line_end":55,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660076,"byte_end":660090,"line_start":59,"line_end":59,"column_start":9,"column_end":23},"name":"line_thickness","qualname":"::widget::envelope_editor::Style::line_thickness","value":"std::option::Option<f64>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" The thickness of the envelope lines.\n","sig":null,"attributes":[{"value":"/ The thickness of the envelope lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659996,"byte_end":660036,"line_start":57,"line_end":57,"column_start":5,"column_end":45}},{"value":"conrod(default = \"2.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660041,"byte_end":660067,"line_start":58,"line_end":58,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660211,"byte_end":660224,"line_start":62,"line_end":62,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::envelope_editor::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":7155},"children":[],"decl_id":null,"docs":" The ID of the font used to display the label.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660112,"byte_end":660161,"line_start":60,"line_end":60,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660166,"byte_end":660202,"line_start":61,"line_end":61,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":7167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659223,"byte_end":659228,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659356,"byte_end":659362,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659460,"byte_end":659472,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7179},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659570,"byte_end":659581,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7183},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659730,"byte_end":659745,"line_start":50,"line_end":50,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7187},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659845,"byte_end":659860,"line_start":53,"line_end":53,"column_start":9,"column_end":24},"name":"value_font_size","qualname":"<Style>::value_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":659962,"byte_end":659974,"line_start":56,"line_end":56,"column_start":9,"column_end":21},"name":"point_radius","qualname":"<Style>::point_radius","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7195},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660076,"byte_end":660090,"line_start":59,"line_end":59,"column_start":9,"column_end":23},"name":"line_thickness","qualname":"<Style>::line_thickness","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7199},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660211,"byte_end":660224,"line_start":62,"line_end":62,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660460,"byte_end":660465,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::envelope_editor::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2733},{"krate":0,"index":2734}],"decl_id":null,"docs":" Represents the state of the EnvelopeEditor widget.\n","sig":null,"attributes":[{"value":"/ Represents the state of the EnvelopeEditor widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660394,"byte_end":660448,"line_start":75,"line_end":75,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":2735},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660636,"byte_end":660649,"line_start":84,"line_end":84,"column_start":11,"column_end":24},"name":"EnvelopePoint","qualname":"::widget::envelope_editor::EnvelopePoint","value":"EnvelopePoint: Clone + PartialEq","parent":null,"children":[{"krate":0,"index":2736},{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2744}],"decl_id":null,"docs":" `EnvPoint` must be implemented for any type that is used as a 2D point within the\n EnvelopeEditor.\n","sig":null,"attributes":[{"value":"/ `EnvPoint` must be implemented for any type that is used as a 2D point within the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660520,"byte_end":660605,"line_start":82,"line_end":82,"column_start":1,"column_end":86}},{"value":"/ EnvelopeEditor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660606,"byte_end":660625,"line_start":83,"line_end":83,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":2736},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660727,"byte_end":660728,"line_start":86,"line_end":86,"column_start":10,"column_end":11},"name":"X","qualname":"::widget::envelope_editor::EnvelopePoint::X","value":"type X: Float + ToString;","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" A value on the X-axis of the envelope.\n","sig":null,"attributes":[{"value":"/ A value on the X-axis of the envelope.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660675,"byte_end":660717,"line_start":85,"line_end":85,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":2737},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660804,"byte_end":660805,"line_start":88,"line_end":88,"column_start":10,"column_end":11},"name":"Y","qualname":"::widget::envelope_editor::EnvelopePoint::Y","value":"type Y: Float + ToString;","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" A value on the Y-axis of the envelope.\n","sig":null,"attributes":[{"value":"/ A value on the Y-axis of the envelope.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660752,"byte_end":660794,"line_start":87,"line_end":87,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2738},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660860,"byte_end":660865,"line_start":90,"line_end":90,"column_start":8,"column_end":13},"name":"get_x","qualname":"::widget::envelope_editor::EnvelopePoint::get_x","value":"fn (&self) -> Self::X","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" Return the X value.\n","sig":null,"attributes":[{"value":"/ Return the X value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660829,"byte_end":660852,"line_start":89,"line_end":89,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2739},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660920,"byte_end":660925,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"get_y","qualname":"::widget::envelope_editor::EnvelopePoint::get_y","value":"fn (&self) -> Self::Y","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" Return the Y value.\n","sig":null,"attributes":[{"value":"/ Return the Y value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660889,"byte_end":660912,"line_start":91,"line_end":91,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2740},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660977,"byte_end":660982,"line_start":94,"line_end":94,"column_start":8,"column_end":13},"name":"set_x","qualname":"::widget::envelope_editor::EnvelopePoint::set_x","value":"fn (&mut self, _x: Self::X) -> ()","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" Set the X value.\n","sig":null,"attributes":[{"value":"/ Set the X value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660949,"byte_end":660969,"line_start":93,"line_end":93,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661040,"byte_end":661045,"line_start":96,"line_end":96,"column_start":8,"column_end":13},"name":"set_y","qualname":"::widget::envelope_editor::EnvelopePoint::set_y","value":"fn (&mut self, _y: Self::Y) -> ()","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" Set the Y value.\n","sig":null,"attributes":[{"value":"/ Set the Y value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661012,"byte_end":661032,"line_start":95,"line_end":95,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661156,"byte_end":661165,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"get_curve","qualname":"::widget::envelope_editor::EnvelopePoint::get_curve","value":"fn (&self) -> f32","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" Return the bezier curve depth (-1. to 1.) for the next interpolation.\n","sig":null,"attributes":[{"value":"/ Return the bezier curve depth (-1. to 1.) for the next interpolation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661075,"byte_end":661148,"line_start":97,"line_end":97,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2743},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661270,"byte_end":661279,"line_start":100,"line_end":100,"column_start":8,"column_end":17},"name":"set_curve","qualname":"::widget::envelope_editor::EnvelopePoint::set_curve","value":"fn (&mut self, _curve: f32) -> ()","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" Set the bezier curve depth (-1. to 1.) for the next interpolation.\n","sig":null,"attributes":[{"value":"/ Set the bezier curve depth (-1. to 1.) for the next interpolation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661192,"byte_end":661262,"line_start":99,"line_end":99,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661345,"byte_end":661348,"line_start":102,"line_end":102,"column_start":8,"column_end":11},"name":"new","qualname":"::widget::envelope_editor::EnvelopePoint::new","value":"fn (_x: Self::X, _y: Self::Y) -> Self","parent":{"krate":0,"index":2735},"children":[],"decl_id":null,"docs":" Create a new EnvPoint.\n","sig":null,"attributes":[{"value":"/ Create a new EnvPoint.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661311,"byte_end":661337,"line_start":101,"line_end":101,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661972,"byte_end":661975,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<EnvelopeEditor>::new","value":"fn (env: &'a [E], min_x: E::X, max_x: E::X, min_y: E::Y, max_y: E::Y) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an EnvelopeEditor widget.\n","sig":null,"attributes":[{"value":"/ Construct an EnvelopeEditor widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661921,"byte_end":661960,"line_start":125,"line_end":125,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662477,"byte_end":662490,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<EnvelopeEditor>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662414,"byte_end":662465,"line_start":139,"line_end":139,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":7222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662646,"byte_end":662658,"line_start":146,"line_end":146,"column_start":13,"column_end":25},"name":"point_radius","qualname":"<EnvelopeEditor>::point_radius","value":"fn (mut self, point_radius: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":7223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662709,"byte_end":662723,"line_start":147,"line_end":147,"column_start":13,"column_end":27},"name":"line_thickness","qualname":"<EnvelopeEditor>::line_thickness","value":"fn (mut self, line_thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":7224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662776,"byte_end":662791,"line_start":148,"line_end":148,"column_start":13,"column_end":28},"name":"value_font_size","qualname":"<EnvelopeEditor>::value_font_size","value":"fn (mut self, value_font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":7225},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662847,"byte_end":662853,"line_start":149,"line_end":149,"column_start":13,"column_end":19},"name":"skew_y","qualname":"<EnvelopeEditor>::skew_y","value":"fn (mut self, skew_y: f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":7226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662889,"byte_end":662896,"line_start":150,"line_end":150,"column_start":13,"column_end":20},"name":"enabled","qualname":"<EnvelopeEditor>::enabled","value":"fn (mut self, enabled: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"StructVariant","id":{"krate":0,"index":7229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663106,"byte_end":663114,"line_start":162,"line_end":162,"column_start":5,"column_end":13},"name":"AddPoint","qualname":"::widget::envelope_editor::Event::AddPoint","value":"Event::AddPoint { i, point }","parent":{"krate":0,"index":7227},"children":[],"decl_id":null,"docs":" Insert a new point.\n","sig":null,"attributes":[{"value":"/ Insert a new point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663078,"byte_end":663101,"line_start":161,"line_end":161,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":7232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663276,"byte_end":663287,"line_start":169,"line_end":169,"column_start":5,"column_end":16},"name":"RemovePoint","qualname":"::widget::envelope_editor::Event::RemovePoint","value":"Event::RemovePoint { i }","parent":{"krate":0,"index":7227},"children":[],"decl_id":null,"docs":" Remove a point.\n","sig":null,"attributes":[{"value":"/ Remove a point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663252,"byte_end":663271,"line_start":168,"line_end":168,"column_start":5,"column_end":24}}]},{"kind":"StructVariant","id":{"krate":0,"index":7234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663400,"byte_end":663409,"line_start":174,"line_end":174,"column_start":5,"column_end":14},"name":"MovePoint","qualname":"::widget::envelope_editor::Event::MovePoint","value":"Event::MovePoint { i, x, y }","parent":{"krate":0,"index":7227},"children":[],"decl_id":null,"docs":" Move a point.\n","sig":null,"attributes":[{"value":"/ Move a point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663378,"byte_end":663395,"line_start":173,"line_end":173,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":7227},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663035,"byte_end":663040,"line_start":158,"line_end":158,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::envelope_editor::Event","value":"Event::{AddPoint, RemovePoint, MovePoint}","parent":null,"children":[{"krate":0,"index":7229},{"krate":0,"index":7232},{"krate":0,"index":7234}],"decl_id":null,"docs":" The kinds of events that may be yielded by the `EnvelopeEditor`.\n","sig":null,"attributes":[{"value":"/ The kinds of events that may be yielded by the `EnvelopeEditor`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":662927,"byte_end":662995,"line_start":156,"line_end":156,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2760},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663737,"byte_end":663743,"line_start":190,"line_end":190,"column_start":12,"column_end":18},"name":"update","qualname":"<Event<E>>::update","value":"fn (self, envelope: &mut Vec<E>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the given `envelope` in accordance with the `Event`.\n","sig":null,"attributes":[{"value":"/ Update the given `envelope` in accordance with the `Event`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663662,"byte_end":663725,"line_start":189,"line_end":189,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":2799},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"file_navigator","qualname":"::widget::file_navigator","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","parent":null,"children":[{"krate":0,"index":2800},{"krate":0,"index":2809},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":7338},{"krate":0,"index":7345},{"krate":0,"index":7350},{"krate":0,"index":7362},{"krate":0,"index":7359},{"krate":0,"index":2872},{"krate":0,"index":7364},{"krate":0,"index":7371},{"krate":0,"index":7367},{"krate":0,"index":7368},{"krate":0,"index":7375},{"krate":0,"index":7373},{"krate":0,"index":7380},{"krate":0,"index":7423},{"krate":0,"index":7421},{"krate":0,"index":7419},{"krate":0,"index":7417},{"krate":0,"index":7413},{"krate":0,"index":7414},{"krate":0,"index":7387},{"krate":0,"index":7424},{"krate":0,"index":7449},{"krate":0,"index":7447},{"krate":0,"index":2876},{"krate":0,"index":2885},{"krate":0,"index":2911}],"decl_id":null,"docs":" A widget for navigating through through a file system. Generally inspired by Finder.","sig":null,"attributes":[{"value":"! A widget for navigating through through a file system. Generally inspired by Finder.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":681859,"byte_end":681947,"line_start":1,"line_end":1,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":681948,"byte_end":681951,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Useful for saving widgets that save/load files.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":681952,"byte_end":682003,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682004,"byte_end":682007,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! - `DirectoryView`: Lists the contents of a single directory. Reacts to events for selection","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682008,"byte_end":682103,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"! of one or more files, de-selection, deletion and double-clicking.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682104,"byte_end":682173,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"! - `FileView`: Displays some basic information about the file.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682174,"byte_end":682239,"line_start":7,"line_end":7,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":2813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"directory_view","qualname":"::widget::file_navigator::directory_view","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","parent":null,"children":[{"krate":0,"index":2814},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":7252},{"krate":0,"index":7259},{"krate":0,"index":2829},{"krate":0,"index":7264},{"krate":0,"index":7273},{"krate":0,"index":7271},{"krate":0,"index":7267},{"krate":0,"index":7268},{"krate":0,"index":7277},{"krate":0,"index":7275},{"krate":0,"index":7280},{"krate":0,"index":7313},{"krate":0,"index":7311},{"krate":0,"index":7309},{"krate":0,"index":7307},{"krate":0,"index":7303},{"krate":0,"index":7304},{"krate":0,"index":7285},{"krate":0,"index":7314},{"krate":0,"index":7334},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2837},{"krate":0,"index":2843},{"krate":0,"index":2870}],"decl_id":null,"docs":" Lists the contents of a single directory.","sig":null,"attributes":[{"value":"! Lists the contents of a single directory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":698676,"byte_end":698721,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":698722,"byte_end":698725,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Reacts to events for selection of one or more files, de-selection, deletion and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":698726,"byte_end":698809,"line_start":3,"line_end":3,"column_start":1,"column_end":84}},{"value":"! double-clicking.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":698810,"byte_end":698830,"line_start":4,"line_end":4,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":7252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699150,"byte_end":699163,"line_start":25,"line_end":25,"column_start":12,"column_end":25},"name":"DirectoryView","qualname":"::widget::file_navigator::directory_view::DirectoryView","value":"DirectoryView { style, directory, types }","parent":null,"children":[{"krate":0,"index":7258},{"krate":0,"index":7254},{"krate":0,"index":7255},{"krate":0,"index":7256},{"krate":0,"index":7257}],"decl_id":null,"docs":" For viewing, selecting, double-clicking, etc the contents of a directory.\n","sig":null,"attributes":[{"value":"/ For viewing, selecting, double-clicking, etc the contents of a directory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699036,"byte_end":699113,"line_start":23,"line_end":23,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":7254},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699282,"byte_end":699287,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::file_navigator::directory_view::DirectoryView::style","value":"widget::file_navigator::directory_view::Style","parent":{"krate":0,"index":7252},"children":[],"decl_id":null,"docs":" Unique styling for the widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699239,"byte_end":699273,"line_start":28,"line_end":28,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":7255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699350,"byte_end":699359,"line_start":31,"line_end":31,"column_start":9,"column_end":18},"name":"directory","qualname":"::widget::file_navigator::directory_view::DirectoryView::directory","value":"&'a std::path::Path","parent":{"krate":0,"index":7252},"children":[],"decl_id":null,"docs":" The path of the directory to display.\n","sig":null,"attributes":[{"value":"/ The path of the directory to display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699300,"byte_end":699341,"line_start":30,"line_end":30,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7256},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699436,"byte_end":699441,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"types","qualname":"::widget::file_navigator::directory_view::DirectoryView::types","value":"widget::file_navigator::Types<'a>","parent":{"krate":0,"index":7252},"children":[],"decl_id":null,"docs":" Only display files of the given type.\n","sig":null,"attributes":[{"value":"/ Only display files of the given type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699386,"byte_end":699427,"line_start":32,"line_end":32,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2829},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699638,"byte_end":699643,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::file_navigator::directory_view::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832}],"decl_id":null,"docs":" Unique state stored within the widget graph for each `FileNavigator`.\n","sig":null,"attributes":[{"value":"/ Unique state stored within the widget graph for each `FileNavigator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":699553,"byte_end":699626,"line_start":38,"line_end":38,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7264},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700127,"byte_end":700132,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"Entry","qualname":"::widget::file_navigator::directory_view::Entry","value":"Entry {  }","parent":null,"children":[{"krate":0,"index":7265},{"krate":0,"index":7266}],"decl_id":null,"docs":" Data stored for each `File` in the `State`.\n","sig":null,"attributes":[{"value":"/ Data stored for each `File` in the `State`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700033,"byte_end":700080,"line_start":51,"line_end":51,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":7280},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700381,"byte_end":700386,"line_start":67,"line_end":67,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::file_navigator::directory_view::Style","value":"Style { color, unselected_color, text_color, font_size }","parent":null,"children":[{"krate":0,"index":7281},{"krate":0,"index":7282},{"krate":0,"index":7283},{"krate":0,"index":7284}],"decl_id":null,"docs":" Unique styling for the widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700271,"byte_end":700305,"line_start":65,"line_end":65,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":7281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700481,"byte_end":700486,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::file_navigator::directory_view::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7280},"children":[],"decl_id":null,"docs":" Color of the selected entries.\n","sig":null,"attributes":[{"value":"/ Color of the selected entries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700393,"byte_end":700427,"line_start":68,"line_end":68,"column_start":5,"column_end":39}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700432,"byte_end":700472,"line_start":69,"line_end":69,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700588,"byte_end":700604,"line_start":73,"line_end":73,"column_start":9,"column_end":25},"name":"unselected_color","qualname":"::widget::file_navigator::directory_view::Style::unselected_color","value":"std::option::Option<std::option::Option<color::Color>>","parent":{"krate":0,"index":7280},"children":[],"decl_id":null,"docs":" The color of the unselected entries.\n","sig":null,"attributes":[{"value":"/ The color of the unselected entries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700507,"byte_end":700547,"line_start":71,"line_end":71,"column_start":5,"column_end":45}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700552,"byte_end":700579,"line_start":72,"line_end":72,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7283},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700720,"byte_end":700730,"line_start":76,"line_end":76,"column_start":9,"column_end":19},"name":"text_color","qualname":"::widget::file_navigator::directory_view::Style::text_color","value":"std::option::Option<std::option::Option<color::Color>>","parent":{"krate":0,"index":7280},"children":[],"decl_id":null,"docs":" The color of the directory and file names.\n","sig":null,"attributes":[{"value":"/ The color of the directory and file names.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700633,"byte_end":700679,"line_start":74,"line_end":74,"column_start":5,"column_end":51}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700684,"byte_end":700711,"line_start":75,"line_end":75,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7284},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700869,"byte_end":700878,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"name":"font_size","qualname":"::widget::file_navigator::directory_view::Style::font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":7280},"children":[],"decl_id":null,"docs":" The font size for the directory and file names.\n","sig":null,"attributes":[{"value":"/ The font size for the directory and file names.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700759,"byte_end":700810,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700815,"byte_end":700860,"line_start":78,"line_end":78,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":7287},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700481,"byte_end":700486,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7291},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700588,"byte_end":700604,"line_start":73,"line_end":73,"column_start":9,"column_end":25},"name":"unselected_color","qualname":"<Style>::unselected_color","value":"fn (&self, theme: &::Theme) -> Option<Color>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700720,"byte_end":700730,"line_start":76,"line_end":76,"column_start":9,"column_end":19},"name":"text_color","qualname":"<Style>::text_color","value":"fn (&self, theme: &::Theme) -> Option<Color>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700869,"byte_end":700878,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"name":"font_size","qualname":"<Style>::font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701087,"byte_end":701096,"line_start":86,"line_end":86,"column_start":5,"column_end":14},"name":"Selection","qualname":"::widget::file_navigator::directory_view::Event::Selection","value":"Event::Selection(Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7314},"children":[],"decl_id":null,"docs":" Some change in the `Selection` occurred. This represents the new full selection.\n","sig":null,"attributes":[{"value":"/ Some change in the `Selection` occurred. This represents the new full selection.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700998,"byte_end":701082,"line_start":85,"line_end":85,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701181,"byte_end":701186,"line_start":88,"line_end":88,"column_start":5,"column_end":10},"name":"Click","qualname":"::widget::file_navigator::directory_view::Event::Click","value":"Event::Click(event::Click, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7314},"children":[],"decl_id":null,"docs":" One or more entries have been double clicked.\n","sig":null,"attributes":[{"value":"/ One or more entries have been double clicked.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701127,"byte_end":701176,"line_start":87,"line_end":87,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7322},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701285,"byte_end":701296,"line_start":90,"line_end":90,"column_start":5,"column_end":16},"name":"DoubleClick","qualname":"::widget::file_navigator::directory_view::Event::DoubleClick","value":"Event::DoubleClick(event::DoubleClick, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7314},"children":[],"decl_id":null,"docs":" One or more entries have been double clicked.\n","sig":null,"attributes":[{"value":"/ One or more entries have been double clicked.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701231,"byte_end":701280,"line_start":89,"line_end":89,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7326},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701419,"byte_end":701424,"line_start":92,"line_end":92,"column_start":5,"column_end":10},"name":"Press","qualname":"::widget::file_navigator::directory_view::Event::Press","value":"Event::Press(event::Press, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7314},"children":[],"decl_id":null,"docs":" A `Press` event occurred while the given entries were selected.\n","sig":null,"attributes":[{"value":"/ A `Press` event occurred while the given entries were selected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701347,"byte_end":701414,"line_start":91,"line_end":91,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7330},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701543,"byte_end":701550,"line_start":94,"line_end":94,"column_start":5,"column_end":12},"name":"Release","qualname":"::widget::file_navigator::directory_view::Event::Release","value":"Event::Release(event::Release, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7314},"children":[],"decl_id":null,"docs":" A `Release` event occurred while the given entries were selected.\n","sig":null,"attributes":[{"value":"/ A `Release` event occurred while the given entries were selected.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":701469,"byte_end":701538,"line_start":93,"line_end":93,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":7314},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700986,"byte_end":700991,"line_start":84,"line_end":84,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::file_navigator::directory_view::Event","value":"Event::{Selection, Click, DoubleClick, Press, Release}","parent":null,"children":[{"krate":0,"index":7315},{"krate":0,"index":7318},{"krate":0,"index":7322},{"krate":0,"index":7326},{"krate":0,"index":7330}],"decl_id":null,"docs":" The kinds of `Event`s produced by the `DirectoryView`.\n","sig":null,"attributes":[{"value":"/ The kinds of `Event`s produced by the `DirectoryView`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":700901,"byte_end":700959,"line_start":82,"line_end":82,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":703832,"byte_end":703835,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<DirectoryView>::new","value":"fn (directory: &'a std::path::Path, types: super::Types<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a `DirectoryNavigator` widget that displays only files of the given types.\n","sig":null,"attributes":[{"value":"/ Begin building a `DirectoryNavigator` widget that displays only files of the given types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":703727,"byte_end":703820,"line_start":160,"line_end":160,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704211,"byte_end":704227,"line_start":172,"line_end":172,"column_start":12,"column_end":28},"name":"unselected_color","qualname":"<DirectoryView>::unselected_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The color of the unselected entries within each `DirectoryView`.\n","sig":null,"attributes":[{"value":"/ The color of the unselected entries within each `DirectoryView`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704131,"byte_end":704199,"line_start":171,"line_end":171,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704414,"byte_end":704424,"line_start":178,"line_end":178,"column_start":12,"column_end":22},"name":"text_color","qualname":"<DirectoryView>::text_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The color of the `Text` used to display the file names.\n","sig":null,"attributes":[{"value":"/ The color of the `Text` used to display the file names.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704343,"byte_end":704402,"line_start":177,"line_end":177,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704594,"byte_end":704611,"line_start":184,"line_end":184,"column_start":12,"column_end":29},"name":"show_hidden_files","qualname":"<DirectoryView>::show_hidden_files","value":"fn (mut self, show_hidden: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether to show hidden files and directories\n","sig":null,"attributes":[{"value":"/ Whether to show hidden files and directories","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704534,"byte_end":704582,"line_start":183,"line_end":183,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":7336},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704745,"byte_end":704754,"line_start":190,"line_end":190,"column_start":13,"column_end":22},"name":"font_size","qualname":"<DirectoryView>::font_size","value":"fn (mut self, font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":7338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682561,"byte_end":682574,"line_start":29,"line_end":29,"column_start":12,"column_end":25},"name":"FileNavigator","qualname":"::widget::file_navigator::FileNavigator","value":"FileNavigator { style, starting_directory, types }","parent":null,"children":[{"krate":0,"index":7344},{"krate":0,"index":7340},{"krate":0,"index":7341},{"krate":0,"index":7342},{"krate":0,"index":7343}],"decl_id":null,"docs":" A widget for navigating and interacting with a file system.\n","sig":null,"attributes":[{"value":"/ A widget for navigating and interacting with a file system.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682461,"byte_end":682524,"line_start":27,"line_end":27,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":7340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682693,"byte_end":682698,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::file_navigator::FileNavigator::style","value":"widget::file_navigator::Style","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" Unique styling for the widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682650,"byte_end":682684,"line_start":32,"line_end":32,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":7341},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682774,"byte_end":682792,"line_start":35,"line_end":35,"column_start":9,"column_end":27},"name":"starting_directory","qualname":"::widget::file_navigator::FileNavigator::starting_directory","value":"&'a std::path::Path","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" The first directory shown for the `FileNavigator`.\n","sig":null,"attributes":[{"value":"/ The first directory shown for the `FileNavigator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682711,"byte_end":682765,"line_start":34,"line_end":34,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":7342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682869,"byte_end":682874,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"types","qualname":"::widget::file_navigator::FileNavigator::types","value":"widget::file_navigator::Types<'a>","parent":{"krate":0,"index":7338},"children":[],"decl_id":null,"docs":" Only display files of the given type.\n","sig":null,"attributes":[{"value":"/ Only display files of the given type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682819,"byte_end":682860,"line_start":36,"line_end":36,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683152,"byte_end":683155,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"All","qualname":"::widget::file_navigator::Types::All","value":"Types::All","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" Indicates that files of all types should be shown.\n","sig":null,"attributes":[{"value":"/ Indicates that files of all types should be shown.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683093,"byte_end":683147,"line_start":45,"line_end":45,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683285,"byte_end":683298,"line_start":50,"line_end":50,"column_start":5,"column_end":18},"name":"WithExtension","qualname":"::widget::file_navigator::Types::WithExtension","value":"Types::WithExtension(&'a [&'a str])","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" A list of types of files that are accepted by the `FileNavigator`.","sig":null,"attributes":[{"value":"/ A list of types of files that are accepted by the `FileNavigator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683161,"byte_end":683231,"line_start":47,"line_end":47,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683236,"byte_end":683239,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ i.e. `&[\"wav\", \"wave\", \"aiff\"]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683244,"byte_end":683280,"line_start":49,"line_end":49,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683370,"byte_end":683381,"line_start":52,"line_end":52,"column_start":5,"column_end":16},"name":"Directories","qualname":"::widget::file_navigator::Types::Directories","value":"Types::Directories","parent":{"krate":0,"index":7350},"children":[],"decl_id":null,"docs":" Indicates only directories should be shown\n","sig":null,"attributes":[{"value":"/ Indicates only directories should be shown","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683319,"byte_end":683365,"line_start":51,"line_end":51,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":7350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683077,"byte_end":683082,"line_start":44,"line_end":44,"column_start":10,"column_end":15},"name":"Types","qualname":"::widget::file_navigator::Types","value":"Types::{All, WithExtension, Directories}","parent":null,"children":[{"krate":0,"index":7352},{"krate":0,"index":7354},{"krate":0,"index":7357}],"decl_id":null,"docs":" A type for specifying the types of files to be shown by a `FileNavigator`.\n","sig":null,"attributes":[{"value":"/ A type for specifying the types of files to be shown by a `FileNavigator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682966,"byte_end":683044,"line_start":42,"line_end":42,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683471,"byte_end":683476,"line_start":56,"line_end":56,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::file_navigator::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875}],"decl_id":null,"docs":" Unique state stored within the widget graph for each `FileNavigator`.\n","sig":null,"attributes":[{"value":"/ Unique state stored within the widget graph for each `FileNavigator`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":683386,"byte_end":683459,"line_start":55,"line_end":55,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":7364},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684203,"byte_end":684212,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"Directory","qualname":"::widget::file_navigator::Directory","value":"Directory {  }","parent":null,"children":[{"krate":0,"index":7365},{"krate":0,"index":7366}],"decl_id":null,"docs":" Represents the state for a single directory.\n","sig":null,"attributes":[{"value":"/ Represents the state for a single directory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684115,"byte_end":684163,"line_start":74,"line_end":74,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":7380},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684609,"byte_end":684614,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::file_navigator::Style","value":"Style { color, unselected_color, text_color, font_size, column_width, resize_handle_width }","parent":null,"children":[{"krate":0,"index":7381},{"krate":0,"index":7382},{"krate":0,"index":7383},{"krate":0,"index":7384},{"krate":0,"index":7385},{"krate":0,"index":7386}],"decl_id":null,"docs":" Unique styling for the widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684499,"byte_end":684533,"line_start":92,"line_end":92,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":7381},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684709,"byte_end":684714,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::file_navigator::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7380},"children":[],"decl_id":null,"docs":" Color of the selected entries.\n","sig":null,"attributes":[{"value":"/ Color of the selected entries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684621,"byte_end":684655,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684660,"byte_end":684700,"line_start":96,"line_end":96,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684816,"byte_end":684832,"line_start":100,"line_end":100,"column_start":9,"column_end":25},"name":"unselected_color","qualname":"::widget::file_navigator::Style::unselected_color","value":"std::option::Option<std::option::Option<color::Color>>","parent":{"krate":0,"index":7380},"children":[],"decl_id":null,"docs":" The color of the unselected entries.\n","sig":null,"attributes":[{"value":"/ The color of the unselected entries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684735,"byte_end":684775,"line_start":98,"line_end":98,"column_start":5,"column_end":45}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684780,"byte_end":684807,"line_start":99,"line_end":99,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684948,"byte_end":684958,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"text_color","qualname":"::widget::file_navigator::Style::text_color","value":"std::option::Option<std::option::Option<color::Color>>","parent":{"krate":0,"index":7380},"children":[],"decl_id":null,"docs":" The color of the directory and file names.\n","sig":null,"attributes":[{"value":"/ The color of the directory and file names.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684861,"byte_end":684907,"line_start":101,"line_end":101,"column_start":5,"column_end":51}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684912,"byte_end":684939,"line_start":102,"line_end":102,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685097,"byte_end":685106,"line_start":106,"line_end":106,"column_start":9,"column_end":18},"name":"font_size","qualname":"::widget::file_navigator::Style::font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":7380},"children":[],"decl_id":null,"docs":" The font size for the directory and file names.\n","sig":null,"attributes":[{"value":"/ The font size for the directory and file names.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684987,"byte_end":685038,"line_start":104,"line_end":104,"column_start":5,"column_end":56}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685043,"byte_end":685088,"line_start":105,"line_end":105,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":7385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685298,"byte_end":685310,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"column_width","qualname":"::widget::file_navigator::Style::column_width","value":"std::option::Option<f64>","parent":{"krate":0,"index":7380},"children":[],"decl_id":null,"docs":" The default width of a single directory view.","sig":null,"attributes":[{"value":"/ The default width of a single directory view.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685130,"byte_end":685179,"line_start":107,"line_end":107,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685184,"byte_end":685187,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ The first directory will always be initialised to this size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685192,"byte_end":685256,"line_start":109,"line_end":109,"column_start":5,"column_end":69}},{"value":"conrod(default = \"250.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685261,"byte_end":685289,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":7386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685473,"byte_end":685492,"line_start":115,"line_end":115,"column_start":9,"column_end":28},"name":"resize_handle_width","qualname":"::widget::file_navigator::Style::resize_handle_width","value":"std::option::Option<f64>","parent":{"krate":0,"index":7380},"children":[],"decl_id":null,"docs":" The width of the bar that separates each directory in the stack and allows for\n re-sizing.\n","sig":null,"attributes":[{"value":"/ The width of the bar that separates each directory in the stack and allows for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685332,"byte_end":685414,"line_start":112,"line_end":112,"column_start":5,"column_end":87}},{"value":"/ re-sizing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685419,"byte_end":685433,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"conrod(default = \"5.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685438,"byte_end":685464,"line_start":114,"line_end":114,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":7389},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684709,"byte_end":684714,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7393},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684816,"byte_end":684832,"line_start":100,"line_end":100,"column_start":9,"column_end":25},"name":"unselected_color","qualname":"<Style>::unselected_color","value":"fn (&self, theme: &::Theme) -> Option<Color>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7397},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":684948,"byte_end":684958,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"text_color","qualname":"<Style>::text_color","value":"fn (&self, theme: &::Theme) -> Option<Color>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7401},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685097,"byte_end":685106,"line_start":106,"line_end":106,"column_start":9,"column_end":18},"name":"font_size","qualname":"<Style>::font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685298,"byte_end":685310,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"column_width","qualname":"<Style>::column_width","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685473,"byte_end":685492,"line_start":115,"line_end":115,"column_start":9,"column_end":28},"name":"resize_handle_width","qualname":"<Style>::resize_handle_width","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7425},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685679,"byte_end":685694,"line_start":122,"line_end":122,"column_start":5,"column_end":20},"name":"ChangeDirectory","qualname":"::widget::file_navigator::Event::ChangeDirectory","value":"Event::ChangeDirectory(std::path::PathBuf)","parent":{"krate":0,"index":7424},"children":[],"decl_id":null,"docs":" The directory at the top of the stack has changed.\n","sig":null,"attributes":[{"value":"/ The directory at the top of the stack has changed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685620,"byte_end":685674,"line_start":121,"line_end":121,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685788,"byte_end":685803,"line_start":124,"line_end":124,"column_start":5,"column_end":20},"name":"ChangeSelection","qualname":"::widget::file_navigator::Event::ChangeSelection","value":"Event::ChangeSelection(Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7424},"children":[],"decl_id":null,"docs":" The selection of files in the top of the stack has changed.\n","sig":null,"attributes":[{"value":"/ The selection of files in the top of the stack has changed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685720,"byte_end":685783,"line_start":123,"line_end":123,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7431},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685896,"byte_end":685901,"line_start":126,"line_end":126,"column_start":5,"column_end":10},"name":"Click","qualname":"::widget::file_navigator::Event::Click","value":"Event::Click(event::Click, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7424},"children":[],"decl_id":null,"docs":" A `Click` event occurred over a selection of entries.\n","sig":null,"attributes":[{"value":"/ A `Click` event occurred over a selection of entries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685834,"byte_end":685891,"line_start":125,"line_end":125,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7435},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685981,"byte_end":685992,"line_start":128,"line_end":128,"column_start":5,"column_end":16},"name":"DoubleClick","qualname":"::widget::file_navigator::Event::DoubleClick","value":"Event::DoubleClick(event::DoubleClick, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7424},"children":[],"decl_id":null,"docs":" A file was double clicked.\n","sig":null,"attributes":[{"value":"/ A file was double clicked.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685946,"byte_end":685976,"line_start":127,"line_end":127,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7439},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686105,"byte_end":686110,"line_start":130,"line_end":130,"column_start":5,"column_end":10},"name":"Press","qualname":"::widget::file_navigator::Event::Press","value":"Event::Press(event::Press, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7424},"children":[],"decl_id":null,"docs":" A `Press` event occurred over a selection of entries.\n","sig":null,"attributes":[{"value":"/ A `Press` event occurred over a selection of entries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686043,"byte_end":686100,"line_start":129,"line_end":129,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7443},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686219,"byte_end":686226,"line_start":132,"line_end":132,"column_start":5,"column_end":12},"name":"Release","qualname":"::widget::file_navigator::Event::Release","value":"Event::Release(event::Release, Vec<std::path::PathBuf>)","parent":{"krate":0,"index":7424},"children":[],"decl_id":null,"docs":" A `Release` event occurred over a selection of entries.\n","sig":null,"attributes":[{"value":"/ A `Release` event occurred over a selection of entries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686155,"byte_end":686214,"line_start":131,"line_end":131,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":7424},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685608,"byte_end":685613,"line_start":120,"line_end":120,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::file_navigator::Event","value":"Event::{ChangeDirectory, ChangeSelection, Click, DoubleClick, Press, Release}","parent":null,"children":[{"krate":0,"index":7425},{"krate":0,"index":7428},{"krate":0,"index":7431},{"krate":0,"index":7435},{"krate":0,"index":7439},{"krate":0,"index":7443}],"decl_id":null,"docs":" The kinds of events that the `FileNavigator` may produce.\n","sig":null,"attributes":[{"value":"/ The kinds of events that the `FileNavigator` may produce.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":685513,"byte_end":685574,"line_start":118,"line_end":118,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686406,"byte_end":686409,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<FileNavigator>::new","value":"fn (starting_directory: &'a std::path::Path, types: Types<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a `FileNavigator` widget that displays only files of the given types.\n","sig":null,"attributes":[{"value":"/ Begin building a `FileNavigator` widget that displays only files of the given types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686306,"byte_end":686394,"line_start":137,"line_end":137,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686807,"byte_end":686810,"line_start":149,"line_end":149,"column_start":12,"column_end":15},"name":"all","qualname":"<FileNavigator>::all","value":"fn (starting_directory: &'a std::path::Path) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a `FileNavigator` that will display all file types.\n","sig":null,"attributes":[{"value":"/ Begin building a `FileNavigator` that will display all file types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686725,"byte_end":686795,"line_start":148,"line_end":148,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687237,"byte_end":687251,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"with_extension","qualname":"<FileNavigator>::with_extension","value":"fn (starting_directory: &'a std::path::Path, exts: &'a [&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a `FileNavigator` that will only display files whose extensions match one\n of those within the given extension list.","sig":null,"attributes":[{"value":"/ Begin building a `FileNavigator` that will only display files whose extensions match one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686923,"byte_end":687015,"line_start":153,"line_end":153,"column_start":5,"column_end":97}},{"value":"/ of those within the given extension list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687020,"byte_end":687065,"line_start":154,"line_end":154,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687070,"byte_end":687073,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ i.e. A `FileNavigator` used for navigating lossless audio files might use the following","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687078,"byte_end":687169,"line_start":156,"line_end":156,"column_start":5,"column_end":96}},{"value":"/ list of extensions: `&[\"wav\", \"wave\", \"aiff\"]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687174,"byte_end":687225,"line_start":157,"line_end":157,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2881},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687481,"byte_end":687492,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"directories","qualname":"<FileNavigator>::directories","value":"fn (starting_directory: &'a std::path::Path) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a `FileNavigator` that only displays directories.\n","sig":null,"attributes":[{"value":"/ Begin building a `FileNavigator` that only displays directories.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687401,"byte_end":687469,"line_start":162,"line_end":162,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687693,"byte_end":687709,"line_start":168,"line_end":168,"column_start":12,"column_end":28},"name":"unselected_color","qualname":"<FileNavigator>::unselected_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The color of the unselected entries within each `DirectoryView`.\n","sig":null,"attributes":[{"value":"/ The color of the unselected entries within each `DirectoryView`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687613,"byte_end":687681,"line_start":167,"line_end":167,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687896,"byte_end":687906,"line_start":174,"line_end":174,"column_start":12,"column_end":22},"name":"text_color","qualname":"<FileNavigator>::text_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The color of the `Text` used to display the file names.\n","sig":null,"attributes":[{"value":"/ The color of the `Text` used to display the file names.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":687825,"byte_end":687884,"line_start":173,"line_end":173,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":688077,"byte_end":688094,"line_start":180,"line_end":180,"column_start":12,"column_end":29},"name":"show_hidden_files","qualname":"<FileNavigator>::show_hidden_files","value":"fn (mut self, show_hidden: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether to show hidden files and directories.\n","sig":null,"attributes":[{"value":"/ Whether to show hidden files and directories.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":688016,"byte_end":688065,"line_start":179,"line_end":179,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":7451},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":688228,"byte_end":688237,"line_start":186,"line_end":186,"column_start":13,"column_end":22},"name":"font_size","qualname":"<FileNavigator>::font_size","value":"fn (mut self, font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":2913},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"grid","qualname":"::widget::grid","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","parent":null,"children":[{"krate":0,"index":2914},{"krate":0,"index":2920},{"krate":0,"index":2924},{"krate":0,"index":7453},{"krate":0,"index":7483},{"krate":0,"index":7478},{"krate":0,"index":7473},{"krate":0,"index":7466},{"krate":0,"index":7487},{"krate":0,"index":7510},{"krate":0,"index":7508},{"krate":0,"index":7506},{"krate":0,"index":7504},{"krate":0,"index":7500},{"krate":0,"index":7501},{"krate":0,"index":7490},{"krate":0,"index":7511},{"krate":0,"index":7523},{"krate":0,"index":7520},{"krate":0,"index":7517},{"krate":0,"index":7525},{"krate":0,"index":7542},{"krate":0,"index":7538},{"krate":0,"index":7534},{"krate":0,"index":7547},{"krate":0,"index":7545},{"krate":0,"index":2925},{"krate":0,"index":2927},{"krate":0,"index":2937},{"krate":0,"index":2944},{"krate":0,"index":2959}],"decl_id":null,"docs":" A widget for displaying a grid of lines across two axes.\n","sig":null,"attributes":[{"value":"! A widget for displaying a grid of lines across two axes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712139,"byte_end":712199,"line_start":1,"line_end":1,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":7453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712435,"byte_end":712439,"line_start":9,"line_end":9,"column_start":12,"column_end":16},"name":"Grid","qualname":"::widget::grid::Grid","value":"Grid { common, style, min_x, max_x, min_y, max_y, x_offset, y_offset, lines }","parent":null,"children":[{"krate":0,"index":7465},{"krate":0,"index":7457},{"krate":0,"index":7458},{"krate":0,"index":7459},{"krate":0,"index":7460},{"krate":0,"index":7461},{"krate":0,"index":7462},{"krate":0,"index":7463},{"krate":0,"index":7464}],"decl_id":null,"docs":" A widget for displaying a grid of lines across two axes.\n","sig":null,"attributes":[{"value":"/ A widget for displaying a grid of lines across two axes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712318,"byte_end":712378,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":7465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712550,"byte_end":712556,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::grid::Grid::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" Builder parameters that are common to all `Widget`s.\n","sig":null,"attributes":[{"value":"/ Builder parameters that are common to all `Widget`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712455,"byte_end":712511,"line_start":10,"line_end":10,"column_start":5,"column_end":61}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712516,"byte_end":712541,"line_start":11,"line_end":11,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":7457},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712638,"byte_end":712643,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::grid::Grid::style","value":"widget::grid::Style","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" Unique styling parameters for the `Grid` widget.\n","sig":null,"attributes":[{"value":"/ Unique styling parameters for the `Grid` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712577,"byte_end":712629,"line_start":13,"line_end":13,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":7458},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712714,"byte_end":712719,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"min_x","qualname":"::widget::grid::Grid::min_x","value":"X","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" The minimum visible bound along the *x* axis.\n","sig":null,"attributes":[{"value":"/ The minimum visible bound along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712656,"byte_end":712705,"line_start":15,"line_end":15,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":7459},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712786,"byte_end":712791,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"max_x","qualname":"::widget::grid::Grid::max_x","value":"X","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" The maximum visible bound along the *x* axis.\n","sig":null,"attributes":[{"value":"/ The maximum visible bound along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712728,"byte_end":712777,"line_start":17,"line_end":17,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":7460},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712858,"byte_end":712863,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"min_y","qualname":"::widget::grid::Grid::min_y","value":"Y","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" The minimum visible bound along the *y* axis.\n","sig":null,"attributes":[{"value":"/ The minimum visible bound along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712800,"byte_end":712849,"line_start":19,"line_end":19,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":7461},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712930,"byte_end":712935,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"name":"max_y","qualname":"::widget::grid::Grid::max_y","value":"Y","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" The maximum visible bound along the *y* axis.\n","sig":null,"attributes":[{"value":"/ The maximum visible bound along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712872,"byte_end":712921,"line_start":21,"line_end":21,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":7462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713022,"byte_end":713030,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"x_offset","qualname":"::widget::grid::Grid::x_offset","value":"std::option::Option<X>","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" An offset for all vertical lines distributed across the *x* axis.\n","sig":null,"attributes":[{"value":"/ An offset for all vertical lines distributed across the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":712944,"byte_end":713013,"line_start":23,"line_end":23,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":7463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713127,"byte_end":713135,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"name":"y_offset","qualname":"::widget::grid::Grid::y_offset","value":"std::option::Option<Y>","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" An offset for all horizontal lines distributed across the *y* axis.\n","sig":null,"attributes":[{"value":"/ An offset for all horizontal lines distributed across the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713047,"byte_end":713118,"line_start":25,"line_end":25,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":7464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713243,"byte_end":713248,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"lines","qualname":"::widget::grid::Grid::lines","value":"I","parent":{"krate":0,"index":7453},"children":[],"decl_id":null,"docs":" An iterator yielding each sequence of lines to be distributed across the grid.\n","sig":null,"attributes":[{"value":"/ An iterator yielding each sequence of lines to be distributed across the grid.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713152,"byte_end":713234,"line_start":27,"line_end":27,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":7487},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713384,"byte_end":713389,"line_start":33,"line_end":33,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::grid::Style","value":"Style { color, thickness }","parent":null,"children":[{"krate":0,"index":7488},{"krate":0,"index":7489}],"decl_id":null,"docs":" Unique styling parameters for the `Grid` widget.\n","sig":null,"attributes":[{"value":"/ Unique styling parameters for the `Grid` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713256,"byte_end":713308,"line_start":31,"line_end":31,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":7488},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713482,"byte_end":713487,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::grid::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7487},"children":[],"decl_id":null,"docs":" The color of the grid lines.\n","sig":null,"attributes":[{"value":"/ The color of the grid lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713396,"byte_end":713428,"line_start":34,"line_end":34,"column_start":5,"column_end":37}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713433,"byte_end":713473,"line_start":35,"line_end":35,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7489},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713584,"byte_end":713593,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"name":"thickness","qualname":"::widget::grid::Style::thickness","value":"std::option::Option<f64>","parent":{"krate":0,"index":7487},"children":[],"decl_id":null,"docs":" The thickness of the grid lines.\n","sig":null,"attributes":[{"value":"/ The thickness of the grid lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713508,"byte_end":713544,"line_start":37,"line_end":37,"column_start":5,"column_end":41}},{"value":"conrod(default = \"1.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713549,"byte_end":713575,"line_start":38,"line_end":38,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":7492},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713482,"byte_end":713487,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713584,"byte_end":713593,"line_start":39,"line_end":39,"column_start":9,"column_end":18},"name":"thickness","qualname":"<Style>::thickness","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7511},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713705,"byte_end":713710,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"Lines","qualname":"::widget::grid::Lines","value":"Lines { step, offset, thickness, color }","parent":null,"children":[{"krate":0,"index":7513},{"krate":0,"index":7514},{"krate":0,"index":7515},{"krate":0,"index":7516}],"decl_id":null,"docs":" A series of lines distributed across an axis.\n","sig":null,"attributes":[{"value":"/ A series of lines distributed across an axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713614,"byte_end":713663,"line_start":42,"line_end":42,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":7513},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713771,"byte_end":713775,"line_start":46,"line_end":46,"column_start":9,"column_end":13},"name":"step","qualname":"::widget::grid::Lines::step","value":"T","parent":{"krate":0,"index":7511},"children":[],"decl_id":null,"docs":" The distance that separates each line.\n","sig":null,"attributes":[{"value":"/ The distance that separates each line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713720,"byte_end":713762,"line_start":45,"line_end":45,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":7514},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713849,"byte_end":713855,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"name":"offset","qualname":"::widget::grid::Lines::offset","value":"std::option::Option<T>","parent":{"krate":0,"index":7511},"children":[],"decl_id":null,"docs":" An optional offset for the lines along they're axis.\n","sig":null,"attributes":[{"value":"/ An optional offset for the lines along they're axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713784,"byte_end":713840,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":7515},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714007,"byte_end":714016,"line_start":52,"line_end":52,"column_start":9,"column_end":18},"name":"thickness","qualname":"::widget::grid::Lines::thickness","value":"std::option::Option<f64>","parent":{"krate":0,"index":7511},"children":[],"decl_id":null,"docs":" The thickness of each of the lines drawn.","sig":null,"attributes":[{"value":"/ The thickness of each of the lines drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713872,"byte_end":713917,"line_start":49,"line_end":49,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713922,"byte_end":713925,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ If `None`, the `thickness` specified within the `Style` is used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":713930,"byte_end":713998,"line_start":51,"line_end":51,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":7516},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714165,"byte_end":714170,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::grid::Lines::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7511},"children":[],"decl_id":null,"docs":" The color of each of the lines drawn.","sig":null,"attributes":[{"value":"/ The color of each of the lines drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714038,"byte_end":714079,"line_start":53,"line_end":53,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714084,"byte_end":714087,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ If `None`, the `color` specified within the `Style` is used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714092,"byte_end":714156,"line_start":55,"line_end":55,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714354,"byte_end":714355,"line_start":63,"line_end":63,"column_start":5,"column_end":6},"name":"X","qualname":"::widget::grid::Axis::X","value":"Axis::X(Lines<X>)","parent":{"krate":0,"index":7525},"children":[],"decl_id":null,"docs":" Vertical lines that are spread across the *x* axis.\n","sig":null,"attributes":[{"value":"/ Vertical lines that are spread across the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714294,"byte_end":714349,"line_start":62,"line_end":62,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7531},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714433,"byte_end":714434,"line_start":65,"line_end":65,"column_start":5,"column_end":6},"name":"Y","qualname":"::widget::grid::Axis::Y","value":"Axis::Y(Lines<Y>)","parent":{"krate":0,"index":7525},"children":[],"decl_id":null,"docs":" Horizontal lines that are spread across the *y* axis.\n","sig":null,"attributes":[{"value":"/ Horizontal lines that are spread across the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714371,"byte_end":714428,"line_start":64,"line_end":64,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":7525},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714277,"byte_end":714281,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Axis","qualname":"::widget::grid::Axis","value":"Axis::{X, Y}","parent":null,"children":[{"krate":0,"index":7528},{"krate":0,"index":7531}],"decl_id":null,"docs":" A series of lines distributed over an axis.\n","sig":null,"attributes":[{"value":"/ A series of lines distributed over an axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714190,"byte_end":714237,"line_start":59,"line_end":59,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":2925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714575,"byte_end":714580,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::grid::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":2926}],"decl_id":null,"docs":" Unique state for the `Grid` retained between updates.\n","sig":null,"attributes":[{"value":"/ Unique state for the `Grid` retained between updates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714506,"byte_end":714563,"line_start":74,"line_end":74,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2929},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714793,"byte_end":714797,"line_start":83,"line_end":83,"column_start":12,"column_end":16},"name":"step","qualname":"<Lines<T>>::step","value":"fn (step: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new set of lines for the grid `step` distance apart.","sig":null,"attributes":[{"value":"/ Begin building a new set of lines for the grid `step` distance apart.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714623,"byte_end":714696,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714701,"byte_end":714704,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Lines with a `step` that equates to `0.0` or less will not be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714709,"byte_end":714781,"line_start":82,"line_end":82,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715107,"byte_end":715113,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"name":"offset","qualname":"<Lines<T>>::offset","value":"fn (mut self, offset: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify an offset for the grid.","sig":null,"attributes":[{"value":"/ Specify an offset for the grid.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714958,"byte_end":714993,"line_start":92,"line_end":92,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714998,"byte_end":715001,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Offsets that are greater than the `step` size will be wrapped around the `step` size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715006,"byte_end":715095,"line_start":94,"line_end":94,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":2931},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715264,"byte_end":715273,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"thickness","qualname":"<Lines<T>>::thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify a unique thickness for these lines.\n","sig":null,"attributes":[{"value":"/ Specify a unique thickness for these lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715205,"byte_end":715252,"line_start":100,"line_end":100,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2932},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715459,"byte_end":715464,"line_start":107,"line_end":107,"column_start":12,"column_end":17},"name":"color","qualname":"<Lines<T>>::color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Use the specified color to uniquely color the this set of lines.\n","sig":null,"attributes":[{"value":"/ Use the specified color to uniquely color the this set of lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715379,"byte_end":715447,"line_start":106,"line_end":106,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2933},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715604,"byte_end":715605,"line_start":113,"line_end":113,"column_start":12,"column_end":13},"name":"x","qualname":"<Lines<T>>::x","value":"fn <Y> (self) -> Axis<T, Y>","parent":null,"children":[],"decl_id":null,"docs":" Move the lines over the X axis.\n","sig":null,"attributes":[{"value":"/ Move the lines over the X axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715557,"byte_end":715592,"line_start":112,"line_end":112,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2935},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715711,"byte_end":715712,"line_start":118,"line_end":118,"column_start":12,"column_end":13},"name":"y","qualname":"<Lines<T>>::y","value":"fn <X> (self) -> Axis<X, T>","parent":null,"children":[],"decl_id":null,"docs":" Move the lines over the Y axis.\n","sig":null,"attributes":[{"value":"/ Move the lines over the Y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715664,"byte_end":715699,"line_start":117,"line_end":117,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716113,"byte_end":716116,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<Grid<X, Y, I>>::new","value":"fn (min_x: X, max_x: X, min_y: Y, max_y: Y, lines: I) -> Grid<X, Y, I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `PlotPath` widget instance.","sig":null,"attributes":[{"value":"/ Begin building a new `PlotPath` widget instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715803,"byte_end":715855,"line_start":124,"line_end":124,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715860,"byte_end":715863,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The first four arguments represent the visible range along both axes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715868,"byte_end":715941,"line_start":126,"line_end":126,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715946,"byte_end":715949,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ The final argument is an iterator yielding `Lines` across either `Axis`. The given lines","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715954,"byte_end":716046,"line_start":128,"line_end":128,"column_start":5,"column_end":97}},{"value":"/ will be drawn in the order that they're given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716051,"byte_end":716101,"line_start":129,"line_end":129,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716702,"byte_end":716710,"line_start":150,"line_end":150,"column_start":12,"column_end":20},"name":"x_offset","qualname":"<Grid<X, Y, I>>::x_offset","value":"fn (mut self, x: X) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify an offset for all vertical lines placed along the X axis.\n","sig":null,"attributes":[{"value":"/ Specify an offset for all vertical lines placed along the X axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716621,"byte_end":716690,"line_start":149,"line_end":149,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2943},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716877,"byte_end":716885,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"y_offset","qualname":"<Grid<X, Y, I>>::y_offset","value":"fn (mut self, y: Y) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify an offset for all horizontal lines placed along the Y axis.\n","sig":null,"attributes":[{"value":"/ Specify an offset for all horizontal lines placed along the Y axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716794,"byte_end":716865,"line_start":155,"line_end":155,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":2963},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"list","qualname":"::widget::list","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","parent":null,"children":[{"krate":0,"index":2964},{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2978},{"krate":0,"index":2979},{"krate":0,"index":7552},{"krate":0,"index":7567},{"krate":0,"index":7561},{"krate":0,"index":7571},{"krate":0,"index":7575},{"krate":0,"index":7574},{"krate":0,"index":7572},{"krate":0,"index":7577},{"krate":0,"index":7581},{"krate":0,"index":7580},{"krate":0,"index":7578},{"krate":0,"index":7583},{"krate":0,"index":7587},{"krate":0,"index":7586},{"krate":0,"index":7584},{"krate":0,"index":7589},{"krate":0,"index":7593},{"krate":0,"index":7592},{"krate":0,"index":7590},{"krate":0,"index":7595},{"krate":0,"index":7600},{"krate":0,"index":7599},{"krate":0,"index":7597},{"krate":0,"index":7602},{"krate":0,"index":7606},{"krate":0,"index":7605},{"krate":0,"index":7603},{"krate":0,"index":2980},{"krate":0,"index":2995},{"krate":0,"index":7608},{"krate":0,"index":7636},{"krate":0,"index":7634},{"krate":0,"index":7632},{"krate":0,"index":7630},{"krate":0,"index":7626},{"krate":0,"index":7627},{"krate":0,"index":7612},{"krate":0,"index":7639},{"krate":0,"index":7637},{"krate":0,"index":3001},{"krate":0,"index":7643},{"krate":0,"index":7662},{"krate":0,"index":7658},{"krate":0,"index":7654},{"krate":0,"index":7665},{"krate":0,"index":7677},{"krate":0,"index":7675},{"krate":0,"index":7673},{"krate":0,"index":7670},{"krate":0,"index":7671},{"krate":0,"index":7678},{"krate":0,"index":7690},{"krate":0,"index":7688},{"krate":0,"index":7686},{"krate":0,"index":7683},{"krate":0,"index":7684},{"krate":0,"index":3003},{"krate":0,"index":3007},{"krate":0,"index":3019},{"krate":0,"index":3022},{"krate":0,"index":3024},{"krate":0,"index":3026},{"krate":0,"index":3028},{"krate":0,"index":3030},{"krate":0,"index":3035},{"krate":0,"index":3039},{"krate":0,"index":3046},{"krate":0,"index":3055},{"krate":0,"index":3062},{"krate":0,"index":3069},{"krate":0,"index":3072},{"krate":0,"index":3074},{"krate":0,"index":3077},{"krate":0,"index":3079},{"krate":0,"index":3082},{"krate":0,"index":3084},{"krate":0,"index":3087},{"krate":0,"index":3089},{"krate":0,"index":3092},{"krate":0,"index":3102},{"krate":0,"index":3112},{"krate":0,"index":3127},{"krate":0,"index":3142},{"krate":0,"index":3157}],"decl_id":null,"docs":" A helper widget, useful for instantiating a sequence of widgets in a vertical list.\n","sig":null,"attributes":[{"value":"! A helper widget, useful for instantiating a sequence of widgets in a vertical list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":720817,"byte_end":720904,"line_start":1,"line_end":1,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":7552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721603,"byte_end":721607,"line_start":29,"line_end":29,"column_start":12,"column_end":16},"name":"List","qualname":"::widget::list::List","value":"List { common, style, item_instantiation }","parent":null,"children":[{"krate":0,"index":7560},{"krate":0,"index":7555},{"krate":0,"index":7556},{"krate":0,"index":7557},{"krate":0,"index":7558},{"krate":0,"index":7559}],"decl_id":null,"docs":" A helper widget, useful for instantiating a sequence of widgets in a vertical list.","sig":null,"attributes":[{"value":"/ A helper widget, useful for instantiating a sequence of widgets in a vertical list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721090,"byte_end":721177,"line_start":19,"line_end":19,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721178,"byte_end":721181,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The `List` widget simplifies this process by:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721182,"byte_end":721231,"line_start":21,"line_end":21,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721232,"byte_end":721235,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - Generating `widget::Id`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721236,"byte_end":721267,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/ - Simplifying the positioning and sizing of items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721268,"byte_end":721322,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/ - Optimised widget instantiation by only instantiating visible items. This is very useful for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721323,"byte_end":721420,"line_start":25,"line_end":25,"column_start":1,"column_end":98}},{"value":"/   lists containing many items, i.e. a `FileNavigator` over a directory with thousands of files.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721421,"byte_end":721520,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721553,"byte_end":721591,"line_start":28,"line_end":28,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":7560},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721708,"byte_end":721714,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::list::List::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":7552},"children":[],"decl_id":null,"docs":" Common widget building params for the `List`.\n","sig":null,"attributes":[{"value":"/ Common widget building params for the `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721620,"byte_end":721669,"line_start":30,"line_end":30,"column_start":5,"column_end":54}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721674,"byte_end":721699,"line_start":31,"line_end":31,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":7555},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721786,"byte_end":721791,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::list::List::style","value":"widget::list::Style","parent":{"krate":0,"index":7552},"children":[],"decl_id":null,"docs":" Unique styling for the `List`.\n","sig":null,"attributes":[{"value":"/ Unique styling for the `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721743,"byte_end":721777,"line_start":33,"line_end":33,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":7556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721874,"byte_end":721892,"line_start":36,"line_end":36,"column_start":9,"column_end":27},"name":"item_instantiation","qualname":"::widget::list::List::item_instantiation","value":"widget::list::ItemInstantiation","parent":{"krate":0,"index":7552},"children":[],"decl_id":null,"docs":" Whether all or only visible items should be instantiated.\n","sig":null,"attributes":[{"value":"/ Whether all or only visible items should be instantiated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":721804,"byte_end":721865,"line_start":35,"line_end":35,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":7571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722074,"byte_end":722076,"line_start":44,"line_end":44,"column_start":10,"column_end":12},"name":"Up","qualname":"::widget::list::Up","value":"Up::{}","parent":null,"children":[],"decl_id":null,"docs":" Items flow from bottom to top.\n","sig":null,"attributes":[{"value":"/ Items flow from bottom to top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722000,"byte_end":722034,"line_start":42,"line_end":42,"column_start":1,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":7577},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722154,"byte_end":722158,"line_start":47,"line_end":47,"column_start":10,"column_end":14},"name":"Down","qualname":"::widget::list::Down","value":"Down::{}","parent":null,"children":[],"decl_id":null,"docs":" Items flow from top to bottom.\n","sig":null,"attributes":[{"value":"/ Items flow from top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722080,"byte_end":722114,"line_start":45,"line_end":45,"column_start":1,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":7583},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722236,"byte_end":722240,"line_start":50,"line_end":50,"column_start":10,"column_end":14},"name":"Left","qualname":"::widget::list::Left","value":"Left::{}","parent":null,"children":[],"decl_id":null,"docs":" Items flow from right to left.\n","sig":null,"attributes":[{"value":"/ Items flow from right to left.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722162,"byte_end":722196,"line_start":48,"line_end":48,"column_start":1,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":7589},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722318,"byte_end":722323,"line_start":53,"line_end":53,"column_start":10,"column_end":15},"name":"Right","qualname":"::widget::list::Right","value":"Right::{}","parent":null,"children":[],"decl_id":null,"docs":" Items flow from left to right.\n","sig":null,"attributes":[{"value":"/ Items flow from left to right.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722244,"byte_end":722278,"line_start":51,"line_end":51,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7595},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722508,"byte_end":722513,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"Fixed","qualname":"::widget::list::Fixed","value":"Fixed { length }","parent":null,"children":[{"krate":0,"index":7596}],"decl_id":null,"docs":" A type that implements `ItemSize` for `List`s whose `Item`s are a fixed size and known prior to\n setting the widgets for each item.\n","sig":null,"attributes":[{"value":"/ A type that implements `ItemSize` for `List`s whose `Item`s are a fixed size and known prior to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722328,"byte_end":722427,"line_start":55,"line_end":55,"column_start":1,"column_end":100}},{"value":"/ setting the widgets for each item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722428,"byte_end":722466,"line_start":56,"line_end":56,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":7596},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722594,"byte_end":722600,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"name":"length","qualname":"::widget::list::Fixed::length","value":"f64","parent":{"krate":0,"index":7595},"children":[],"decl_id":null,"docs":" The length of each item in the direction that the list flows.\n","sig":null,"attributes":[{"value":"/ The length of each item in the direction that the list flows.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722520,"byte_end":722585,"line_start":59,"line_end":59,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":7602},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722782,"byte_end":722789,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"Dynamic","qualname":"::widget::list::Dynamic","value":"Dynamic {  }","parent":null,"children":[],"decl_id":null,"docs":" A type that implements `ItemSize` for `List`s whose `Item`s' length are unknown until setting\n the widget for each item.\n","sig":null,"attributes":[{"value":"/ A type that implements `ItemSize` for `List`s whose `Item`s' length are unknown until setting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722613,"byte_end":722710,"line_start":63,"line_end":63,"column_start":1,"column_end":98}},{"value":"/ the widget for each item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722711,"byte_end":722740,"line_start":64,"line_end":64,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":2980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722853,"byte_end":722862,"line_start":69,"line_end":69,"column_start":11,"column_end":20},"name":"Direction","qualname":"::widget::list::Direction","value":"Direction","parent":null,"children":[{"krate":0,"index":2981},{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2987},{"krate":0,"index":2989},{"krate":0,"index":2991},{"krate":0,"index":2993}],"decl_id":null,"docs":" The direction in which the list is laid out.\n","sig":null,"attributes":[{"value":"/ The direction in which the list is laid out.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722794,"byte_end":722842,"line_start":68,"line_end":68,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":2981},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722937,"byte_end":722941,"line_start":71,"line_end":71,"column_start":10,"column_end":14},"name":"Axis","qualname":"::widget::list::Direction::Axis","value":"type Axis: widget::scrollbar::Axis;","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" The direction along which the `Scrollbar` is laid out.\n","sig":null,"attributes":[{"value":"/ The direction along which the `Scrollbar` is laid out.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722869,"byte_end":722927,"line_start":70,"line_end":70,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723067,"byte_end":723073,"line_start":74,"line_end":74,"column_start":8,"column_end":14},"name":"ranges","qualname":"::widget::list::Direction::ranges","value":"fn (Rect) -> (Range, Range)","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" For some given `Rect`, returns the parallel and perpendicular ranges respectively.\n","sig":null,"attributes":[{"value":"/ For some given `Rect`, returns the parallel and perpendicular ranges respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":722973,"byte_end":723059,"line_start":73,"line_end":73,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723160,"byte_end":723169,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"name":"scrollbar","qualname":"::widget::list::Direction::scrollbar","value":"fn (widget::Id) -> widget::Scrollbar<Self::Axis>","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" Begin building the scrollbar for the `List`.\n","sig":null,"attributes":[{"value":"/ Begin building the scrollbar for the `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723104,"byte_end":723152,"line_start":76,"line_end":76,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723297,"byte_end":723310,"line_start":80,"line_end":80,"column_start":8,"column_end":21},"name":"common_scroll","qualname":"::widget::list::Direction::common_scroll","value":"fn (common: &widget::CommonBuilder) -> Option<&widget::scroll::Scroll>","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" Borrow the scroll state associated with this `Direction`'s axis.\n","sig":null,"attributes":[{"value":"/ Borrow the scroll state associated with this `Direction`'s axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723221,"byte_end":723289,"line_start":79,"line_end":79,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723423,"byte_end":723436,"line_start":83,"line_end":83,"column_start":8,"column_end":21},"name":"position_item","qualname":"::widget::list::Direction::position_item","value":"fn <W> (item_widget: W, last_id: Option<widget::Id>, scroll_trigger_id: widget::Id, first_item_margin: Scalar) -> W","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" Positions the given widget.\n","sig":null,"attributes":[{"value":"/ Positions the given widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723384,"byte_end":723415,"line_start":82,"line_end":82,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723738,"byte_end":723761,"line_start":90,"line_end":90,"column_start":8,"column_end":31},"name":"position_scroll_trigger","qualname":"::widget::list::Direction::position_scroll_trigger","value":"fn <W> (scroll_trigger: W, list: widget::Id) -> W","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" Position the `Rectangle` used for scrolling `List`s with fixed `Item` sizes.\n","sig":null,"attributes":[{"value":"/ Position the `Rectangle` used for scrolling `List`s with fixed `Item` sizes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723650,"byte_end":723730,"line_start":89,"line_end":89,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2989},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723910,"byte_end":723926,"line_start":94,"line_end":94,"column_start":8,"column_end":24},"name":"scroll_list_kids","qualname":"::widget::list::Direction::scroll_list_kids","value":"fn <S> (list: List<Self, S>) -> List<Self, S>","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" Calls the suitable `scroll_kids_<axis>` method on the `List`.\n","sig":null,"attributes":[{"value":"/ Calls the suitable `scroll_kids_<axis>` method on the `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":723837,"byte_end":723902,"line_start":93,"line_end":93,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724073,"byte_end":724085,"line_start":99,"line_end":99,"column_start":8,"column_end":20},"name":"size_breadth","qualname":"::widget::list::Direction::size_breadth","value":"fn <W> (widget: W, breadth: Scalar) -> W","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" Size the widget given its breadth.\n","sig":null,"attributes":[{"value":"/ Size the widget given its breadth.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724027,"byte_end":724065,"line_start":98,"line_end":98,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2993},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724197,"byte_end":724208,"line_start":103,"line_end":103,"column_start":8,"column_end":19},"name":"size_length","qualname":"::widget::list::Direction::size_length","value":"fn <W> (widget: W, length: Scalar) -> W","parent":{"krate":0,"index":2980},"children":[],"decl_id":null,"docs":" Size the widget given its length.\n","sig":null,"attributes":[{"value":"/ Size the widget given its length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724152,"byte_end":724189,"line_start":102,"line_end":102,"column_start":5,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":2995},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724360,"byte_end":724368,"line_start":108,"line_end":108,"column_start":11,"column_end":19},"name":"ItemSize","qualname":"::widget::list::ItemSize","value":"ItemSize: Sized + Clone + Copy","parent":null,"children":[{"krate":0,"index":2996},{"krate":0,"index":2998}],"decl_id":null,"docs":" The way in which the `List`'s items are sized. E.g. `Fired` or `Dynamic`.\n","sig":null,"attributes":[{"value":"/ The way in which the `List`'s items are sized. E.g. `Fired` or `Dynamic`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724272,"byte_end":724349,"line_start":107,"line_end":107,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724435,"byte_end":724446,"line_start":111,"line_end":111,"column_start":8,"column_end":19},"name":"update_list","qualname":"::widget::list::ItemSize::update_list","value":"fn <D> (List<D, Self>, widget::UpdateArgs<List<D, Self>>) -> <List<D, Self> as Widget>::Event","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Update the `List` widget.\n","sig":null,"attributes":[{"value":"/ Update the `List` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724398,"byte_end":724427,"line_start":110,"line_end":110,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2998},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724644,"byte_end":724653,"line_start":116,"line_end":116,"column_start":8,"column_end":17},"name":"size_item","qualname":"::widget::list::ItemSize::size_item","value":"fn <W, D> (&self, widget: W, breadth: Scalar) -> W","parent":{"krate":0,"index":2995},"children":[],"decl_id":null,"docs":" Set the size for the given item `widget` and return it.\n","sig":null,"attributes":[{"value":"/ Set the size for the given item `widget` and return it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724577,"byte_end":724636,"line_start":115,"line_end":115,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":7608},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724866,"byte_end":724871,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::list::Style","value":"Style { scrollbar_thickness, scrollbar_color, scrollbar_position }","parent":null,"children":[{"krate":0,"index":7609},{"krate":0,"index":7610},{"krate":0,"index":7611}],"decl_id":null,"docs":" Unique styling for the `List`.\n","sig":null,"attributes":[{"value":"/ Unique styling for the `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724756,"byte_end":724790,"line_start":121,"line_end":121,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":7609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724967,"byte_end":724986,"line_start":126,"line_end":126,"column_start":9,"column_end":28},"name":"scrollbar_thickness","qualname":"::widget::list::Style::scrollbar_thickness","value":"std::option::Option<std::option::Option<f64>>","parent":{"krate":0,"index":7608},"children":[],"decl_id":null,"docs":" The width of the scrollbar if it is visible.\n","sig":null,"attributes":[{"value":"/ The width of the scrollbar if it is visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724878,"byte_end":724926,"line_start":124,"line_end":124,"column_start":5,"column_end":53}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724931,"byte_end":724958,"line_start":125,"line_end":125,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725119,"byte_end":725134,"line_start":129,"line_end":129,"column_start":9,"column_end":24},"name":"scrollbar_color","qualname":"::widget::list::Style::scrollbar_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7608},"children":[],"decl_id":null,"docs":" The color of the scrollbar if it is visible.\n","sig":null,"attributes":[{"value":"/ The color of the scrollbar if it is visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725016,"byte_end":725064,"line_start":127,"line_end":127,"column_start":5,"column_end":53}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725069,"byte_end":725110,"line_start":128,"line_end":128,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725239,"byte_end":725257,"line_start":132,"line_end":132,"column_start":9,"column_end":27},"name":"scrollbar_position","qualname":"::widget::list::Style::scrollbar_position","value":"std::option::Option<std::option::Option<widget::list::ScrollbarPosition>>","parent":{"krate":0,"index":7608},"children":[],"decl_id":null,"docs":" The location of the `List`'s scrollbar.\n","sig":null,"attributes":[{"value":"/ The location of the `List`'s scrollbar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725155,"byte_end":725198,"line_start":130,"line_end":130,"column_start":5,"column_end":48}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725203,"byte_end":725230,"line_start":131,"line_end":131,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":7614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724967,"byte_end":724986,"line_start":126,"line_end":126,"column_start":9,"column_end":28},"name":"scrollbar_thickness","qualname":"<Style>::scrollbar_thickness","value":"fn (&self, theme: &::Theme) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7618},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725119,"byte_end":725134,"line_start":129,"line_end":129,"column_start":9,"column_end":24},"name":"scrollbar_color","qualname":"<Style>::scrollbar_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725239,"byte_end":725257,"line_start":132,"line_end":132,"column_start":9,"column_end":27},"name":"scrollbar_position","qualname":"<Style>::scrollbar_position","value":"fn (&self, theme: &::Theme) -> Option<ScrollbarPosition>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725453,"byte_end":725458,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::list::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3002}],"decl_id":null,"docs":" Represents the state of the List widget.\n","sig":null,"attributes":[{"value":"/ Represents the state of the List widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725397,"byte_end":725441,"line_start":143,"line_end":143,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":7643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725591,"byte_end":725595,"line_start":150,"line_end":150,"column_start":12,"column_end":16},"name":"Item","qualname":"::widget::list::Item","value":"Item { i, widget_id, last_id }","parent":null,"children":[{"krate":0,"index":7646},{"krate":0,"index":7647},{"krate":0,"index":7648},{"krate":0,"index":7649},{"krate":0,"index":7650},{"krate":0,"index":7651},{"krate":0,"index":7652},{"krate":0,"index":7653}],"decl_id":null,"docs":" The data necessary for instantiating a single item within a `List`.\n","sig":null,"attributes":[{"value":"/ The data necessary for instantiating a single item within a `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725478,"byte_end":725549,"line_start":148,"line_end":148,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":7646},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725659,"byte_end":725660,"line_start":152,"line_end":152,"column_start":9,"column_end":10},"name":"i","qualname":"::widget::list::Item::i","value":"usize","parent":{"krate":0,"index":7643},"children":[],"decl_id":null,"docs":" The index of the item within the list.\n","sig":null,"attributes":[{"value":"/ The index of the item within the list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725608,"byte_end":725650,"line_start":151,"line_end":151,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":7647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725718,"byte_end":725727,"line_start":154,"line_end":154,"column_start":9,"column_end":18},"name":"widget_id","qualname":"::widget::list::Item::widget_id","value":"daggy::NodeIndex","parent":{"krate":0,"index":7643},"children":[],"decl_id":null,"docs":" The id generated for the widget.\n","sig":null,"attributes":[{"value":"/ The id generated for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725673,"byte_end":725709,"line_start":153,"line_end":153,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":7648},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725801,"byte_end":725808,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"name":"last_id","qualname":"::widget::list::Item::last_id","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":7643},"children":[],"decl_id":null,"docs":" The id used for the previous item's widget.\n","sig":null,"attributes":[{"value":"/ The id used for the previous item's widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":725745,"byte_end":725792,"line_start":155,"line_end":155,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7666},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726506,"byte_end":726509,"line_start":172,"line_end":172,"column_start":5,"column_end":8},"name":"All","qualname":"::widget::list::ItemInstantiation::All","value":"ItemInstantiation::All","parent":{"krate":0,"index":7665},"children":[],"decl_id":null,"docs":" Instantiate an `Item` for every element, regardless of visibility.\n","sig":null,"attributes":[{"value":"/ Instantiate an `Item` for every element, regardless of visibility.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726431,"byte_end":726501,"line_start":171,"line_end":171,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726557,"byte_end":726568,"line_start":174,"line_end":174,"column_start":5,"column_end":16},"name":"OnlyVisible","qualname":"::widget::list::ItemInstantiation::OnlyVisible","value":"ItemInstantiation::OnlyVisible","parent":{"krate":0,"index":7665},"children":[],"decl_id":null,"docs":" Only instantiate visible `Item`s.\n","sig":null,"attributes":[{"value":"/ Only instantiate visible `Item`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726515,"byte_end":726552,"line_start":173,"line_end":173,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":7665},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726407,"byte_end":726424,"line_start":170,"line_end":170,"column_start":10,"column_end":27},"name":"ItemInstantiation","qualname":"::widget::list::ItemInstantiation","value":"ItemInstantiation::{All, OnlyVisible}","parent":null,"children":[{"krate":0,"index":7666},{"krate":0,"index":7668}],"decl_id":null,"docs":" The way in which a `List` should instantiate its `Item`s.\n","sig":null,"attributes":[{"value":"/ The way in which a `List` should instantiate its `Item`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726295,"byte_end":726356,"line_start":168,"line_end":168,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726803,"byte_end":726809,"line_start":181,"line_end":181,"column_start":5,"column_end":11},"name":"NextTo","qualname":"::widget::list::ScrollbarPosition::NextTo","value":"ScrollbarPosition::NextTo","parent":{"krate":0,"index":7678},"children":[],"decl_id":null,"docs":" To the right of the items (reduces the item width to fit).\n","sig":null,"attributes":[{"value":"/ To the right of the items (reduces the item width to fit).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726736,"byte_end":726798,"line_start":180,"line_end":180,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726887,"byte_end":726892,"line_start":183,"line_end":183,"column_start":5,"column_end":10},"name":"OnTop","qualname":"::widget::list::ScrollbarPosition::OnTop","value":"ScrollbarPosition::OnTop","parent":{"krate":0,"index":7678},"children":[],"decl_id":null,"docs":" On top of the right edge of the items with auto_hide activated.\n","sig":null,"attributes":[{"value":"/ On top of the right edge of the items with auto_hide activated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726815,"byte_end":726882,"line_start":182,"line_end":182,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":7678},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726712,"byte_end":726729,"line_start":179,"line_end":179,"column_start":10,"column_end":27},"name":"ScrollbarPosition","qualname":"::widget::list::ScrollbarPosition","value":"ScrollbarPosition::{NextTo, OnTop}","parent":null,"children":[{"krate":0,"index":7679},{"krate":0,"index":7681}],"decl_id":null,"docs":" If the `List` is scrollable, this describes how th `Scrollbar` should be positioned.\n","sig":null,"attributes":[{"value":"/ If the `List` is scrollable, this describes how th `Scrollbar` should be positioned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726573,"byte_end":726661,"line_start":177,"line_end":177,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":3003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726974,"byte_end":726983,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"Scrollbar","qualname":"::widget::list::Scrollbar","value":"Scrollbar {  }","parent":null,"children":[{"krate":0,"index":3005},{"krate":0,"index":3006}],"decl_id":null,"docs":" A wrapper around a `List`'s `Scrollbar` and its `widget::Id`.\n","sig":null,"attributes":[{"value":"/ A wrapper around a `List`'s `Scrollbar` and its `widget::Id`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":726897,"byte_end":726962,"line_start":186,"line_end":186,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":3007},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727109,"byte_end":727114,"line_start":193,"line_end":193,"column_start":12,"column_end":17},"name":"Items","qualname":"::widget::list::Items","value":"Items {  }","parent":null,"children":[{"krate":0,"index":3010},{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3015},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3018}],"decl_id":null,"docs":" An `Iterator` yielding each `Item` in the list.\n","sig":null,"attributes":[{"value":"/ An `Iterator` yielding each `Item` in the list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727046,"byte_end":727097,"line_start":192,"line_end":192,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3021},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727516,"byte_end":727519,"line_start":210,"line_end":210,"column_start":12,"column_end":15},"name":"new","qualname":"<List<D, Dynamic>>::new","value":"fn (num_items: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `List`.\n","sig":null,"attributes":[{"value":"/ Begin building a new `List`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727472,"byte_end":727504,"line_start":209,"line_end":209,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727711,"byte_end":727720,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"flow_left","qualname":"<List<Left, Dynamic>>::flow_left","value":"fn (num_items: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `List` flowing from right to left.\n","sig":null,"attributes":[{"value":"/ Begin building a new `List` flowing from right to left.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727640,"byte_end":727699,"line_start":216,"line_end":216,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3025},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727890,"byte_end":727900,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"flow_right","qualname":"<List<Right, Dynamic>>::flow_right","value":"fn (num_items: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `List` flowing from left to right.\n","sig":null,"attributes":[{"value":"/ Begin building a new `List` flowing from left to right.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727819,"byte_end":727878,"line_start":223,"line_end":223,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728067,"byte_end":728074,"line_start":231,"line_end":231,"column_start":12,"column_end":19},"name":"flow_up","qualname":"<List<Up, Dynamic>>::flow_up","value":"fn (num_items: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `List` flowing from bottom to top.\n","sig":null,"attributes":[{"value":"/ Begin building a new `List` flowing from bottom to top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727996,"byte_end":728055,"line_start":230,"line_end":230,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728243,"byte_end":728252,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"flow_down","qualname":"<List<Down, Dynamic>>::flow_down","value":"fn (num_items: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `List` flowing from top to bottom.\n","sig":null,"attributes":[{"value":"/ Begin building a new `List` flowing from top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728172,"byte_end":728231,"line_start":237,"line_end":237,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728473,"byte_end":728487,"line_start":248,"line_end":248,"column_start":12,"column_end":26},"name":"from_item_size","qualname":"<List<D, S>>::from_item_size","value":"fn (num_items: usize, item_size: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `List` given some direction and item size.\n","sig":null,"attributes":[{"value":"/ Begin building a new `List` given some direction and item size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728394,"byte_end":728461,"line_start":247,"line_end":247,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3034},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729060,"byte_end":729069,"line_start":262,"line_end":262,"column_start":12,"column_end":21},"name":"item_size","qualname":"<List<D, S>>::item_size","value":"fn (self, length: Scalar) -> List<D, Fixed>","parent":null,"children":[],"decl_id":null,"docs":" Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is\n flowing. When a `List` is constructed with this method, all items will have a fixed, equal\n length.\n","sig":null,"attributes":[{"value":"/ Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728842,"byte_end":728933,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ flowing. When a `List` is constructed with this method, all items will have a fixed, equal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728938,"byte_end":729032,"line_start":260,"line_end":260,"column_start":5,"column_end":99}},{"value":"/ length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729037,"byte_end":729048,"line_start":261,"line_end":261,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730246,"byte_end":730267,"line_start":288,"line_end":288,"column_start":12,"column_end":33},"name":"instantiate_all_items","qualname":"<List<D, Fixed>>::instantiate_all_items","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Indicates that an `Item` should be instantiated for every element in the list, regardless of\n whether or not the `Item` would be visible.","sig":null,"attributes":[{"value":"/ Indicates that an `Item` should be instantiated for every element in the list, regardless of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729507,"byte_end":729603,"line_start":278,"line_end":278,"column_start":5,"column_end":101}},{"value":"/ whether or not the `Item` would be visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729608,"byte_end":729655,"line_start":279,"line_end":279,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729660,"byte_end":729663,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This is the default (and only) behaviour for `List`s with dynamic item sizes. This is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729668,"byte_end":729757,"line_start":281,"line_end":281,"column_start":5,"column_end":94}},{"value":"/ because a `List` cannot know the total length of its combined items in advanced when each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729762,"byte_end":729855,"line_start":282,"line_end":282,"column_start":5,"column_end":98}},{"value":"/ item is dynamically sized and their size is not given until they are set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729860,"byte_end":729937,"line_start":283,"line_end":283,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729942,"byte_end":729945,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note: This may cause significantly heavier CPU load for lists containing many items (100+).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729950,"byte_end":730045,"line_start":285,"line_end":285,"column_start":5,"column_end":100}},{"value":"/ We only recommend using this when absolutely necessary as large lists may cause unnecessary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730050,"byte_end":730145,"line_start":286,"line_end":286,"column_start":5,"column_end":100}},{"value":"/ bloating within the widget graph, and in turn result in greater traversal times.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730150,"byte_end":730234,"line_start":287,"line_end":287,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730674,"byte_end":730704,"line_start":298,"line_end":298,"column_start":12,"column_end":42},"name":"instantiate_only_visible_items","qualname":"<List<D, Fixed>>::instantiate_only_visible_items","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Indicates that only `Item`s that are visible should be instantiated. This ensures that we\n avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to\n a minimum.","sig":null,"attributes":[{"value":"/ Indicates that only `Item`s that are visible should be instantiated. This ensures that we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730370,"byte_end":730463,"line_start":293,"line_end":293,"column_start":5,"column_end":98}},{"value":"/ avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730468,"byte_end":730562,"line_start":294,"line_end":294,"column_start":5,"column_end":99}},{"value":"/ a minimum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730567,"byte_end":730581,"line_start":295,"line_end":295,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730586,"byte_end":730589,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ This is the default behaviour for `List`s with fixed item sizes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730594,"byte_end":730662,"line_start":297,"line_end":297,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731018,"byte_end":731035,"line_start":310,"line_end":310,"column_start":12,"column_end":29},"name":"scrollbar_next_to","qualname":"<List<D, S>>::scrollbar_next_to","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the\n right of the items.\n","sig":null,"attributes":[{"value":"/ Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730888,"byte_end":730978,"line_start":308,"line_end":308,"column_start":5,"column_end":95}},{"value":"/ right of the items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730983,"byte_end":731006,"line_start":309,"line_end":309,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3043},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731385,"byte_end":731401,"line_start":317,"line_end":317,"column_start":12,"column_end":28},"name":"scrollbar_on_top","qualname":"<List<D, S>>::scrollbar_on_top","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers\n above the right edge of the items and automatically hides when the user is not scrolling.\n","sig":null,"attributes":[{"value":"/ Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731180,"byte_end":731275,"line_start":315,"line_end":315,"column_start":5,"column_end":100}},{"value":"/ above the right edge of the items and automatically hides when the user is not scrolling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731280,"byte_end":731373,"line_start":316,"line_end":316,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":3044},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731590,"byte_end":731609,"line_start":323,"line_end":323,"column_start":12,"column_end":31},"name":"scrollbar_thickness","qualname":"<List<D, S>>::scrollbar_thickness","value":"fn (mut self, w: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The width of the `Scrollbar`.\n","sig":null,"attributes":[{"value":"/ The width of the `Scrollbar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731545,"byte_end":731578,"line_start":322,"line_end":322,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3045},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731766,"byte_end":731781,"line_start":329,"line_end":329,"column_start":12,"column_end":27},"name":"scrollbar_color","qualname":"<List<D, S>>::scrollbar_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The color of the `Scrollbar`.\n","sig":null,"attributes":[{"value":"/ The color of the `Scrollbar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731721,"byte_end":731754,"line_start":328,"line_end":328,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":732532,"byte_end":732536,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"name":"next","qualname":"<Items<D, S>>::next","value":"fn (&mut self, ui: &Ui) -> Option<Item<D, S>>","parent":null,"children":[],"decl_id":null,"docs":" Yield the next `Item` in the list.\n","sig":null,"attributes":[{"value":"/ Yield the next `Item` in the list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":732482,"byte_end":732520,"line_start":364,"line_end":364,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734415,"byte_end":734418,"line_start":426,"line_end":426,"column_start":12,"column_end":15},"name":"set","qualname":"<Item<D, S>>::set","value":"fn <W> (self, widget: W, ui: &mut UiCell) -> W::Event","parent":null,"children":[],"decl_id":null,"docs":" Sets the given widget as the widget to use for the item.","sig":null,"attributes":[{"value":"/ Sets the given widget as the widget to use for the item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734160,"byte_end":734220,"line_start":419,"line_end":419,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734225,"byte_end":734228,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ Sets the:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734233,"byte_end":734246,"line_start":421,"line_end":421,"column_start":5,"column_end":18}},{"value":"/ - position of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734251,"byte_end":734280,"line_start":422,"line_end":422,"column_start":5,"column_end":34}},{"value":"/ - dimensions of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734285,"byte_end":734316,"line_start":423,"line_end":423,"column_start":5,"column_end":36}},{"value":"/ - parent of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734321,"byte_end":734348,"line_start":424,"line_end":424,"column_start":5,"column_end":32}},{"value":"/ - and finally sets the widget within the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734353,"byte_end":734403,"line_start":425,"line_end":425,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734935,"byte_end":734940,"line_start":444,"line_end":444,"column_start":12,"column_end":17},"name":"width","qualname":"<Item<Down, S>>::width","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The width of the `Item`.\n","sig":null,"attributes":[{"value":"/ The width of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734895,"byte_end":734923,"line_start":443,"line_end":443,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3073},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735060,"byte_end":735066,"line_start":451,"line_end":451,"column_start":12,"column_end":18},"name":"height","qualname":"<Item<Down, Fixed>>::height","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The height of the `Item`.\n","sig":null,"attributes":[{"value":"/ The height of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735019,"byte_end":735048,"line_start":450,"line_end":450,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735186,"byte_end":735191,"line_start":458,"line_end":458,"column_start":12,"column_end":17},"name":"width","qualname":"<Item<Up, S>>::width","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The width of the `Item`.\n","sig":null,"attributes":[{"value":"/ The width of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735146,"byte_end":735174,"line_start":457,"line_end":457,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735309,"byte_end":735315,"line_start":465,"line_end":465,"column_start":12,"column_end":18},"name":"height","qualname":"<Item<Up, Fixed>>::height","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The height of the `Item`.\n","sig":null,"attributes":[{"value":"/ The height of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735268,"byte_end":735297,"line_start":464,"line_end":464,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735439,"byte_end":735445,"line_start":472,"line_end":472,"column_start":12,"column_end":18},"name":"height","qualname":"<Item<Right, S>>::height","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The height of the `Item`.\n","sig":null,"attributes":[{"value":"/ The height of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735398,"byte_end":735427,"line_start":471,"line_end":471,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3083},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735565,"byte_end":735570,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"width","qualname":"<Item<Right, Fixed>>::width","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The width of the `Item`.\n","sig":null,"attributes":[{"value":"/ The width of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735525,"byte_end":735553,"line_start":478,"line_end":478,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3086},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735693,"byte_end":735699,"line_start":486,"line_end":486,"column_start":12,"column_end":18},"name":"height","qualname":"<Item<Left, S>>::height","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The height of the `Item`.\n","sig":null,"attributes":[{"value":"/ The height of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735652,"byte_end":735681,"line_start":485,"line_end":485,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3088},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735818,"byte_end":735823,"line_start":493,"line_end":493,"column_start":12,"column_end":17},"name":"width","qualname":"<Item<Left, Fixed>>::width","value":"fn (&self) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" The width of the `Item`.\n","sig":null,"attributes":[{"value":"/ The width of the `Item`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735778,"byte_end":735806,"line_start":492,"line_end":492,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3091},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":736001,"byte_end":736004,"line_start":503,"line_end":503,"column_start":12,"column_end":15},"name":"set","qualname":"<Scrollbar<A>>::set","value":"fn (self, ui: &mut UiCell) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the `Scrollbar` within the given `Ui`.\n","sig":null,"attributes":[{"value":"/ Set the `Scrollbar` within the given `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735943,"byte_end":735989,"line_start":502,"line_end":502,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":3172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"list_select","qualname":"::widget::list_select","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","parent":null,"children":[{"krate":0,"index":3173},{"krate":0,"index":3180},{"krate":0,"index":3185},{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":7691},{"krate":0,"index":7709},{"krate":0,"index":7702},{"krate":0,"index":3188},{"krate":0,"index":7714},{"krate":0,"index":7723},{"krate":0,"index":7721},{"krate":0,"index":7719},{"krate":0,"index":3190},{"krate":0,"index":7726},{"krate":0,"index":7724},{"krate":0,"index":3200},{"krate":0,"index":3203},{"krate":0,"index":3207},{"krate":0,"index":7728},{"krate":0,"index":7755},{"krate":0,"index":7750},{"krate":0,"index":7760},{"krate":0,"index":7764},{"krate":0,"index":7762},{"krate":0,"index":7765},{"krate":0,"index":7769},{"krate":0,"index":7767},{"krate":0,"index":7770},{"krate":0,"index":7781},{"krate":0,"index":7778},{"krate":0,"index":3216},{"krate":0,"index":3221},{"krate":0,"index":3223},{"krate":0,"index":3225},{"krate":0,"index":3234},{"krate":0,"index":3237},{"krate":0,"index":3245},{"krate":0,"index":3250},{"krate":0,"index":3261},{"krate":0,"index":3271},{"krate":0,"index":3281},{"krate":0,"index":3293},{"krate":0,"index":3295},{"krate":0,"index":3297},{"krate":0,"index":3299}],"decl_id":null,"docs":" A wrapper around the `List` widget providing the ability to select one or more items.\n","sig":null,"attributes":[{"value":"! A wrapper around the `List` widget providing the ability to select one or more items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750117,"byte_end":750206,"line_start":1,"line_end":1,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":7691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750548,"byte_end":750558,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"ListSelect","qualname":"::widget::list_select::ListSelect","value":"ListSelect {  }","parent":null,"children":[{"krate":0,"index":7701},{"krate":0,"index":7695},{"krate":0,"index":7696},{"krate":0,"index":7697},{"krate":0,"index":7698},{"krate":0,"index":7699},{"krate":0,"index":7700}],"decl_id":null,"docs":" A wrapper around the `List` widget that handles single and multiple selection logic.\n","sig":null,"attributes":[{"value":"/ A wrapper around the `List` widget that handles single and multiple selection logic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750377,"byte_end":750465,"line_start":9,"line_end":9,"column_start":1,"column_end":89}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750498,"byte_end":750536,"line_start":11,"line_end":11,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":3188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751011,"byte_end":751020,"line_start":27,"line_end":27,"column_start":11,"column_end":20},"name":"Direction","qualname":"::widget::list_select::Direction","value":"Direction: widget::list::Direction","parent":null,"children":[{"krate":0,"index":3189}],"decl_id":null,"docs":" A trait that extends the `List` `Direction` trait with behaviour necessary for the `ListSelect`\n widget.","sig":null,"attributes":[{"value":"/ A trait that extends the `List` `Direction` trait with behaviour necessary for the `ListSelect`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750824,"byte_end":750923,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750924,"byte_end":750935,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750936,"byte_end":750939,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Implemented for the `Down`, `Right`, `Up`, `Left` types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":750940,"byte_end":751000,"line_start":26,"line_end":26,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751113,"byte_end":751126,"line_start":29,"line_end":29,"column_start":8,"column_end":21},"name":"key_direction","qualname":"::widget::list_select::Direction::key_direction","value":"fn (key: input::Key) -> Option<ListDirection>","parent":{"krate":0,"index":3188},"children":[],"decl_id":null,"docs":" Maps a given `key` to a direction along the list.\n","sig":null,"attributes":[{"value":"/ Maps a given `key` to a direction along the list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751052,"byte_end":751105,"line_start":28,"line_end":28,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7715},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751356,"byte_end":751363,"line_start":36,"line_end":36,"column_start":5,"column_end":12},"name":"Forward","qualname":"::widget::list_select::ListDirection::Forward","value":"ListDirection::Forward","parent":{"krate":0,"index":7714},"children":[],"decl_id":null,"docs":" The direction flowing from the start of the list to the end of the list.\n","sig":null,"attributes":[{"value":"/ The direction flowing from the start of the list to the end of the list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751275,"byte_end":751351,"line_start":35,"line_end":35,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7717},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751450,"byte_end":751458,"line_start":38,"line_end":38,"column_start":5,"column_end":13},"name":"Backward","qualname":"::widget::list_select::ListDirection::Backward","value":"ListDirection::Backward","parent":{"krate":0,"index":7714},"children":[],"decl_id":null,"docs":" The direction flowing from the end of the list to the start of the list.\n","sig":null,"attributes":[{"value":"/ The direction flowing from the end of the list to the start of the list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751369,"byte_end":751445,"line_start":37,"line_end":37,"column_start":5,"column_end":81}}]},{"kind":"Enum","id":{"krate":0,"index":7714},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751255,"byte_end":751268,"line_start":34,"line_end":34,"column_start":10,"column_end":23},"name":"ListDirection","qualname":"::widget::list_select::ListDirection","value":"ListDirection::{Forward, Backward}","parent":null,"children":[{"krate":0,"index":7715},{"krate":0,"index":7717}],"decl_id":null,"docs":" The direction in which the list flows.\n","sig":null,"attributes":[{"value":"/ The direction in which the list flows.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751173,"byte_end":751215,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":3190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751624,"byte_end":751628,"line_start":44,"line_end":44,"column_start":11,"column_end":15},"name":"Mode","qualname":"::widget::list_select::Mode","value":"Mode","parent":null,"children":[{"krate":0,"index":3191},{"krate":0,"index":3192},{"krate":0,"index":3196}],"decl_id":null,"docs":" Allows the `ListSelect` to be generic over `Single` and `Multiple` selection modes.","sig":null,"attributes":[{"value":"/ Allows the `ListSelect` to be generic over `Single` and `Multiple` selection modes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751463,"byte_end":751550,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751551,"byte_end":751554,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Also allows for defining other custom selection modes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751555,"byte_end":751613,"line_start":43,"line_end":43,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":3191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751705,"byte_end":751714,"line_start":46,"line_end":46,"column_start":10,"column_end":19},"name":"Selection","qualname":"::widget::list_select::Mode::Selection","value":"type Selection;","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":" The data associated with the `Mode`s `Event::Selection`.\n","sig":null,"attributes":[{"value":"/ The data associated with the `Mode`s `Event::Selection`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751635,"byte_end":751695,"line_start":45,"line_end":45,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3192},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751803,"byte_end":751818,"line_start":49,"line_end":49,"column_start":8,"column_end":23},"name":"click_selection","qualname":"::widget::list_select::Mode::click_selection","value":"fn <F, D, S> (&self, event::Click, i: usize, num_items: usize, &State, is_selected: F, &mut PendingEvents<Self::Selection, D, S>) -> ()","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":" Update the `PendingEvents` in accordance with the given `Click` event.\n","sig":null,"attributes":[{"value":"/ Update the `PendingEvents` in accordance with the given `Click` event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751721,"byte_end":751795,"line_start":48,"line_end":48,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3196},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":752262,"byte_end":752275,"line_start":59,"line_end":59,"column_start":8,"column_end":21},"name":"key_selection","qualname":"::widget::list_select::Mode::key_selection","value":"fn <F, D, S> (&self, event::KeyPress, i: usize, num_items: usize, &State, is_selected: F, &mut PendingEvents<Self::Selection, D, S>) -> ()","parent":{"krate":0,"index":3190},"children":[],"decl_id":null,"docs":" Update the `PendingEvents` in accordance with the given `KeyPress` event.\n","sig":null,"attributes":[{"value":"/ Update the `PendingEvents` in accordance with the given `KeyPress` event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":752177,"byte_end":752254,"line_start":58,"line_end":58,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":3200},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":752760,"byte_end":752765,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::list_select::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3201},{"krate":0,"index":3202}],"decl_id":null,"docs":" Represents the state of the ListSelect.\n","sig":null,"attributes":[{"value":"/ Represents the state of the ListSelect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":752705,"byte_end":752748,"line_start":76,"line_end":76,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":3203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753104,"byte_end":753117,"line_start":85,"line_end":85,"column_start":10,"column_end":23},"name":"PendingEvents","qualname":"::widget::list_select::PendingEvents","value":"std::collections::VecDeque<Event<Selection, D, S>>","parent":null,"children":[],"decl_id":null,"docs":" Buffer used for storing events that have been produced but are yet to be yielded.\n","sig":null,"attributes":[{"value":"/ Buffer used for storing events that have been produced but are yet to be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753009,"byte_end":753094,"line_start":84,"line_end":84,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":3207},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753263,"byte_end":753269,"line_start":88,"line_end":88,"column_start":12,"column_end":18},"name":"Events","qualname":"::widget::list_select::Events","value":"Events {  }","parent":null,"children":[{"krate":0,"index":3211},{"krate":0,"index":3212},{"krate":0,"index":3213},{"krate":0,"index":3214},{"krate":0,"index":3215}],"decl_id":null,"docs":" An iterator-like type for yielding `ListSelect` `Event`s.\n","sig":null,"attributes":[{"value":"/ An iterator-like type for yielding `ListSelect` `Event`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753190,"byte_end":753251,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753715,"byte_end":753719,"line_start":103,"line_end":103,"column_start":5,"column_end":9},"name":"Item","qualname":"::widget::list_select::Event::Item","value":"Event::Item(widget::list::Item<Direction, Size>)","parent":{"krate":0,"index":7728},"children":[],"decl_id":null,"docs":" The next `Item` is ready for instantiation.\n","sig":null,"attributes":[{"value":"/ The next `Item` is ready for instantiation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753663,"byte_end":753710,"line_start":102,"line_end":102,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7735},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753806,"byte_end":753815,"line_start":105,"line_end":105,"column_start":5,"column_end":14},"name":"Selection","qualname":"::widget::list_select::Event::Selection","value":"Event::Selection(Selection)","parent":{"krate":0,"index":7728},"children":[],"decl_id":null,"docs":" A change in selection has occurred.\n","sig":null,"attributes":[{"value":"/ A change in selection has occurred.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753762,"byte_end":753801,"line_start":104,"line_end":104,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7738},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753906,"byte_end":753911,"line_start":107,"line_end":107,"column_start":5,"column_end":10},"name":"Press","qualname":"::widget::list_select::Event::Press","value":"Event::Press(event::Press)","parent":{"krate":0,"index":7728},"children":[],"decl_id":null,"docs":" A button press occurred while the widget was capturing the mouse.\n","sig":null,"attributes":[{"value":"/ A button press occurred while the widget was capturing the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753832,"byte_end":753901,"line_start":106,"line_end":106,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7741},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754007,"byte_end":754014,"line_start":109,"line_end":109,"column_start":5,"column_end":12},"name":"Release","qualname":"::widget::list_select::Event::Release","value":"Event::Release(event::Release)","parent":{"krate":0,"index":7728},"children":[],"decl_id":null,"docs":" A button release occurred while the widget was capturing the mouse.\n","sig":null,"attributes":[{"value":"/ A button release occurred while the widget was capturing the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753931,"byte_end":754002,"line_start":108,"line_end":108,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7744},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754103,"byte_end":754108,"line_start":111,"line_end":111,"column_start":5,"column_end":10},"name":"Click","qualname":"::widget::list_select::Event::Click","value":"Event::Click(event::Click)","parent":{"krate":0,"index":7728},"children":[],"decl_id":null,"docs":" A click occurred while the widget was capturing the mouse.\n","sig":null,"attributes":[{"value":"/ A click occurred while the widget was capturing the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754036,"byte_end":754098,"line_start":110,"line_end":110,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7747},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754202,"byte_end":754213,"line_start":113,"line_end":113,"column_start":5,"column_end":16},"name":"DoubleClick","qualname":"::widget::list_select::Event::DoubleClick","value":"Event::DoubleClick(event::DoubleClick)","parent":{"krate":0,"index":7728},"children":[],"decl_id":null,"docs":" A double click occurred while the widget was capturing the mouse.\n","sig":null,"attributes":[{"value":"/ A double click occurred while the widget was capturing the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754128,"byte_end":754197,"line_start":112,"line_end":112,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":7728},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753623,"byte_end":753628,"line_start":101,"line_end":101,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::list_select::Event","value":"Event::{Item, Selection, Press, Release, Click, DoubleClick}","parent":null,"children":[{"krate":0,"index":7732},{"krate":0,"index":7735},{"krate":0,"index":7738},{"krate":0,"index":7741},{"krate":0,"index":7744},{"krate":0,"index":7747}],"decl_id":null,"docs":" The kind of events that the `ListSelect` may `react` to.\n Provides tuple(s) of index in list and string representation of selection\n","sig":null,"attributes":[{"value":"/ The kind of events that the `ListSelect` may `react` to.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753451,"byte_end":753511,"line_start":98,"line_end":98,"column_start":1,"column_end":61}},{"value":"/ Provides tuple(s) of index in list and string representation of selection","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":753512,"byte_end":753589,"line_start":99,"line_end":99,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":7760},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754329,"byte_end":754335,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Single","qualname":"::widget::list_select::Single","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single item selection `Mode` for the `ListSelect`.\n","sig":null,"attributes":[{"value":"/ A single item selection `Mode` for the `ListSelect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754238,"byte_end":754294,"line_start":116,"line_end":116,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":7765},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754468,"byte_end":754476,"line_start":122,"line_end":122,"column_start":12,"column_end":20},"name":"Multiple","qualname":"::widget::list_select::Multiple","value":"","parent":null,"children":[],"decl_id":null,"docs":" A selection `Mode` for the `ListSelect` that allows selecting more than one item at a time.\n","sig":null,"attributes":[{"value":"/ A selection `Mode` for the `ListSelect` that allows selecting more than one item at a time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754338,"byte_end":754433,"line_start":120,"line_end":120,"column_start":1,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7772},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754735,"byte_end":754738,"line_start":128,"line_end":128,"column_start":5,"column_end":8},"name":"Add","qualname":"::widget::list_select::Selection::Add","value":"Selection::Add(std::collections::HashSet<usize, H>)","parent":{"krate":0,"index":7770},"children":[],"decl_id":null,"docs":" Items which have been added to the selection.\n","sig":null,"attributes":[{"value":"/ Items which have been added to the selection.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754681,"byte_end":754730,"line_start":127,"line_end":127,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754839,"byte_end":754845,"line_start":130,"line_end":130,"column_start":5,"column_end":11},"name":"Remove","qualname":"::widget::list_select::Selection::Remove","value":"Selection::Remove(std::collections::HashSet<usize, H>)","parent":{"krate":0,"index":7770},"children":[],"decl_id":null,"docs":" Items which have been removed from the selection.\n","sig":null,"attributes":[{"value":"/ Items which have been removed from the selection.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754781,"byte_end":754834,"line_start":129,"line_end":129,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":7770},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754596,"byte_end":754605,"line_start":126,"line_end":126,"column_start":10,"column_end":19},"name":"Selection","qualname":"::widget::list_select::Selection","value":"Selection::{Add, Remove}","parent":null,"children":[{"krate":0,"index":7772},{"krate":0,"index":7775}],"decl_id":null,"docs":" Represents some change in item selection for a `ListSelect` in `Multiple` mode.\n","sig":null,"attributes":[{"value":"/ Represents some change in item selection for a `ListSelect` in `Multiple` mode.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754479,"byte_end":754562,"line_start":124,"line_end":124,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":755095,"byte_end":755112,"line_start":139,"line_end":139,"column_start":12,"column_end":29},"name":"update_bool_slice","qualname":"<Selection<H>>::update_bool_slice","value":"fn (&self, slice: &mut [bool]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the given slice of `bool`s with this `Selection`.","sig":null,"attributes":[{"value":"/ Update the given slice of `bool`s with this `Selection`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754940,"byte_end":755000,"line_start":136,"line_end":136,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":755005,"byte_end":755008,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Each index in the `Selection` represents and index into the slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":755013,"byte_end":755083,"line_start":138,"line_end":138,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":3219},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":755690,"byte_end":755706,"line_start":157,"line_end":157,"column_start":12,"column_end":28},"name":"update_index_set","qualname":"<Selection<H>>::update_index_set","value":"fn <T> (&self, set: &mut std::collections::HashSet<usize, T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the given set of selected indices with this `Selection`.\n","sig":null,"attributes":[{"value":"/ Update the given set of selected indices with this `Selection`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":755611,"byte_end":755678,"line_start":156,"line_end":156,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756277,"byte_end":756283,"line_start":177,"line_end":177,"column_start":12,"column_end":18},"name":"single","qualname":"<ListSelect<Single, widget::list::Down, widget::list::Dynamic>>::single","value":"fn (num_items: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new ListSelect, allowing one selected item at a time.\n","sig":null,"attributes":[{"value":"/ Construct a new ListSelect, allowing one selected item at a time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756196,"byte_end":756265,"line_start":176,"line_end":176,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756510,"byte_end":756518,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"multiple","qualname":"<ListSelect<Multiple, widget::list::Down, widget::list::Dynamic>>::multiple","value":"fn (num_items: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new ListSelect, allowing multiple selected items.\n","sig":null,"attributes":[{"value":"/ Construct a new ListSelect, allowing multiple selected items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756433,"byte_end":756498,"line_start":183,"line_end":183,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756763,"byte_end":756772,"line_start":196,"line_end":196,"column_start":12,"column_end":21},"name":"flow_down","qualname":"<ListSelect<M, D, S>>::flow_down","value":"fn (self) -> ListSelect<M, widget::list::Down, S>","parent":null,"children":[],"decl_id":null,"docs":" Flows items from top to bottom.\n","sig":null,"attributes":[{"value":"/ Flows items from top to bottom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756716,"byte_end":756751,"line_start":195,"line_end":195,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":757258,"byte_end":757268,"line_start":210,"line_end":210,"column_start":12,"column_end":22},"name":"flow_right","qualname":"<ListSelect<M, D, S>>::flow_right","value":"fn (self) -> ListSelect<M, widget::list::Right, S>","parent":null,"children":[],"decl_id":null,"docs":" Flows items from left to right.\n","sig":null,"attributes":[{"value":"/ Flows items from left to right.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":757211,"byte_end":757246,"line_start":209,"line_end":209,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":757755,"byte_end":757764,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"flow_left","qualname":"<ListSelect<M, D, S>>::flow_left","value":"fn (self) -> ListSelect<M, widget::list::Left, S>","parent":null,"children":[],"decl_id":null,"docs":" Flows items from right to left.\n","sig":null,"attributes":[{"value":"/ Flows items from right to left.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":757708,"byte_end":757743,"line_start":223,"line_end":223,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":758250,"byte_end":758257,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"flow_up","qualname":"<ListSelect<M, D, S>>::flow_up","value":"fn (self) -> ListSelect<M, widget::list::Up, S>","parent":null,"children":[],"decl_id":null,"docs":" Flows items from bottom to top.\n","sig":null,"attributes":[{"value":"/ Flows items from bottom to top.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":758203,"byte_end":758238,"line_start":237,"line_end":237,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":758912,"byte_end":758921,"line_start":254,"line_end":254,"column_start":12,"column_end":21},"name":"item_size","qualname":"<ListSelect<M, D, S>>::item_size","value":"fn (self, length: Scalar) -> ListSelect<M, D, widget::list::Fixed>","parent":null,"children":[],"decl_id":null,"docs":" Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is\n flowing. When a `List` is constructed with this method, all items will have a fixed, equal\n length.\n","sig":null,"attributes":[{"value":"/ Specify a fixed item size, where size is a `Scalar` in the direction that the `List` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":758694,"byte_end":758785,"line_start":251,"line_end":251,"column_start":5,"column_end":96}},{"value":"/ flowing. When a `List` is constructed with this method, all items will have a fixed, equal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":758790,"byte_end":758884,"line_start":252,"line_end":252,"column_start":5,"column_end":99}},{"value":"/ length.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":758889,"byte_end":758900,"line_start":253,"line_end":253,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":759704,"byte_end":759707,"line_start":273,"line_end":273,"column_start":12,"column_end":15},"name":"new","qualname":"<ListSelect<M, widget::list::Down, widget::list::Dynamic>>::new","value":"fn (num_items: usize, mode: M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `ListSelect` with the given mode.","sig":null,"attributes":[{"value":"/ Begin building a new `ListSelect` with the given mode.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":759466,"byte_end":759524,"line_start":269,"line_end":269,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":759529,"byte_end":759532,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ This method is only useful when using a custom `Mode`, otherwise `ListSelect::single` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":759537,"byte_end":759629,"line_start":271,"line_end":271,"column_start":5,"column_end":97}},{"value":"/ `ListSelect::multiple` will probably be more suitable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":759634,"byte_end":759692,"line_start":272,"line_end":272,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760314,"byte_end":760331,"line_start":292,"line_end":292,"column_start":12,"column_end":29},"name":"scrollbar_next_to","qualname":"<ListSelect<M, D, S>>::scrollbar_next_to","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the\n right of the items.\n","sig":null,"attributes":[{"value":"/ Specifies that the `List` should be scrollable and should provide a `Scrollbar` to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760184,"byte_end":760274,"line_start":290,"line_end":290,"column_start":5,"column_end":95}},{"value":"/ right of the items.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760279,"byte_end":760302,"line_start":291,"line_end":291,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760674,"byte_end":760690,"line_start":299,"line_end":299,"column_start":12,"column_end":28},"name":"scrollbar_on_top","qualname":"<ListSelect<M, D, S>>::scrollbar_on_top","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers\n above the right edge of the items and automatically hides when the user is not scrolling.\n","sig":null,"attributes":[{"value":"/ Specifies that the `List` should be scrollable and should provide a `Scrollbar` that hovers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760469,"byte_end":760564,"line_start":297,"line_end":297,"column_start":5,"column_end":100}},{"value":"/ above the right edge of the items and automatically hides when the user is not scrolling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760569,"byte_end":760662,"line_start":298,"line_end":298,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760872,"byte_end":760891,"line_start":305,"line_end":305,"column_start":12,"column_end":31},"name":"scrollbar_thickness","qualname":"<ListSelect<M, D, S>>::scrollbar_thickness","value":"fn (mut self, w: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The width of the `Scrollbar`.\n","sig":null,"attributes":[{"value":"/ The width of the `Scrollbar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760827,"byte_end":760860,"line_start":304,"line_end":304,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761048,"byte_end":761063,"line_start":311,"line_end":311,"column_start":12,"column_end":27},"name":"scrollbar_color","qualname":"<ListSelect<M, D, S>>::scrollbar_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The color of the `Scrollbar`.\n","sig":null,"attributes":[{"value":"/ The color of the `Scrollbar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761003,"byte_end":761036,"line_start":310,"line_end":310,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3248},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761965,"byte_end":761986,"line_start":330,"line_end":330,"column_start":12,"column_end":33},"name":"instantiate_all_items","qualname":"<ListSelect<M, D, widget::list::Fixed>>::instantiate_all_items","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Indicates that an `Item` should be instatiated for every element in the list, regardless of\n whether or not the `Item` would be visible.","sig":null,"attributes":[{"value":"/ Indicates that an `Item` should be instatiated for every element in the list, regardless of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761227,"byte_end":761322,"line_start":320,"line_end":320,"column_start":5,"column_end":100}},{"value":"/ whether or not the `Item` would be visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761327,"byte_end":761374,"line_start":321,"line_end":321,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761379,"byte_end":761382,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This is the default (and only) behaviour for `List`s with dynamic item sizes. This is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761387,"byte_end":761476,"line_start":323,"line_end":323,"column_start":5,"column_end":94}},{"value":"/ because a `List` cannot know the total length of its combined items in advanced when each","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761481,"byte_end":761574,"line_start":324,"line_end":324,"column_start":5,"column_end":98}},{"value":"/ item is dynamically sized and their size is not given until they are set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761579,"byte_end":761656,"line_start":325,"line_end":325,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761661,"byte_end":761664,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Note: This may cause significantly heavier CPU load for lists containing many items (100+).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761669,"byte_end":761764,"line_start":327,"line_end":327,"column_start":5,"column_end":100}},{"value":"/ We only recommend using this when absolutely necessary as large lists may cause unnecessary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761769,"byte_end":761864,"line_start":328,"line_end":328,"column_start":5,"column_end":100}},{"value":"/ bloating within the widget graph, and in turn result in greater traversal times.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761869,"byte_end":761953,"line_start":329,"line_end":329,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762413,"byte_end":762443,"line_start":340,"line_end":340,"column_start":12,"column_end":42},"name":"instantiate_only_visible_items","qualname":"<ListSelect<M, D, widget::list::Fixed>>::instantiate_only_visible_items","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Indicates that only `Item`s that are visible should be instantiated. This ensures that we\n avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to\n a minimum.","sig":null,"attributes":[{"value":"/ Indicates that only `Item`s that are visible should be instantiated. This ensures that we","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762103,"byte_end":762196,"line_start":335,"line_end":335,"column_start":5,"column_end":98}},{"value":"/ avoid bloating the widget graph with unnecessary nodes and in turn keep traversal times to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762201,"byte_end":762295,"line_start":336,"line_end":336,"column_start":5,"column_end":99}},{"value":"/ a minimum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762300,"byte_end":762314,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762319,"byte_end":762322,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ This is the default behaviour for `ListSelect`s with fixed item sizes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762327,"byte_end":762401,"line_start":339,"line_end":339,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3265},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":764689,"byte_end":764693,"line_start":413,"line_end":413,"column_start":12,"column_end":16},"name":"next","qualname":"<Events<M, D, S>>::next","value":"fn <F> (&mut self, ui: &Ui, is_selected: F) -> Option<Event<M::Selection, D, S>>","parent":null,"children":[],"decl_id":null,"docs":" Yield the next `Event`.\n","sig":null,"attributes":[{"value":"/ Yield the next `Event`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":764650,"byte_end":764677,"line_start":412,"line_end":412,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":3301},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"matrix","qualname":"::widget::matrix","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","parent":null,"children":[{"krate":0,"index":3302},{"krate":0,"index":3307},{"krate":0,"index":3308},{"krate":0,"index":3309},{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3313},{"krate":0,"index":3314},{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":7784},{"krate":0,"index":7793},{"krate":0,"index":7789},{"krate":0,"index":3317},{"krate":0,"index":7795},{"krate":0,"index":7818},{"krate":0,"index":7816},{"krate":0,"index":7814},{"krate":0,"index":7812},{"krate":0,"index":7808},{"krate":0,"index":7809},{"krate":0,"index":7798},{"krate":0,"index":7819},{"krate":0,"index":7831},{"krate":0,"index":7833},{"krate":0,"index":7846},{"krate":0,"index":7844},{"krate":0,"index":7842},{"krate":0,"index":3319},{"krate":0,"index":3322},{"krate":0,"index":3333},{"krate":0,"index":3339}],"decl_id":null,"docs":" A helper widget for laying out child widgets in the form of a grid.\n","sig":null,"attributes":[{"value":"! A helper widget for laying out child widgets in the form of a grid.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775065,"byte_end":775136,"line_start":1,"line_end":1,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":3310},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775247,"byte_end":775256,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"WidgetNum","qualname":"::widget::matrix::WidgetNum","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The number of the widget.\n","sig":null,"attributes":[{"value":"/ The number of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775208,"byte_end":775237,"line_start":9,"line_end":9,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":3311},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775295,"byte_end":775301,"line_start":12,"line_end":12,"column_start":10,"column_end":16},"name":"ColNum","qualname":"::widget::matrix::ColNum","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" A column index.\n","sig":null,"attributes":[{"value":"/ A column index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775266,"byte_end":775285,"line_start":11,"line_end":11,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":3312},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775337,"byte_end":775343,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"name":"RowNum","qualname":"::widget::matrix::RowNum","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" A row index.\n","sig":null,"attributes":[{"value":"/ A row index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775311,"byte_end":775327,"line_start":13,"line_end":13,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":3313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775391,"byte_end":775396,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Width","qualname":"::widget::matrix::Width","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" The width of an element.\n","sig":null,"attributes":[{"value":"/ The width of an element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775353,"byte_end":775381,"line_start":15,"line_end":15,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":3314},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775446,"byte_end":775452,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Height","qualname":"::widget::matrix::Height","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" The height of an element.\n","sig":null,"attributes":[{"value":"/ The height of an element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775407,"byte_end":775436,"line_start":17,"line_end":17,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":3315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775523,"byte_end":775527,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"name":"PosX","qualname":"::widget::matrix::PosX","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" The position of an element along the *x* axis.\n","sig":null,"attributes":[{"value":"/ The position of an element along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775463,"byte_end":775513,"line_start":19,"line_end":19,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":3316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775598,"byte_end":775602,"line_start":22,"line_end":22,"column_start":10,"column_end":14},"name":"PosY","qualname":"::widget::matrix::PosY","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":" The position of an element along the *y* axis.\n","sig":null,"attributes":[{"value":"/ The position of an element along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775538,"byte_end":775588,"line_start":21,"line_end":21,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":7784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775942,"byte_end":775948,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Matrix","qualname":"::widget::matrix::Matrix","value":"Matrix {  }","parent":null,"children":[{"krate":0,"index":7788},{"krate":0,"index":7785},{"krate":0,"index":7786},{"krate":0,"index":7787}],"decl_id":null,"docs":" Draw a matrix of any rectangular widget type, where the matrix will provide a function with\n the widget number, it's `rows` and `cols` position, the width and height for the widget and\n the location at which the widget should be drawn.\n","sig":null,"attributes":[{"value":"/ Draw a matrix of any rectangular widget type, where the matrix will provide a function with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775614,"byte_end":775709,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"/ the widget number, it's `rows` and `cols` position, the width and height for the widget and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775710,"byte_end":775805,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ the location at which the widget should be drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775806,"byte_end":775859,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":775892,"byte_end":775930,"line_start":28,"line_end":28,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":3317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776158,"byte_end":776163,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::matrix::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3318}],"decl_id":null,"docs":" The state of the Matrix, to be cached within the `Ui`'s widget `Graph`.\n","sig":null,"attributes":[{"value":"/ The state of the Matrix, to be cached within the `Ui`'s widget `Graph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776071,"byte_end":776146,"line_start":37,"line_end":37,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":7795},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776504,"byte_end":776509,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::matrix::Style","value":"Style { cell_pad_w, cell_pad_h }","parent":null,"children":[{"krate":0,"index":7796},{"krate":0,"index":7797}],"decl_id":null,"docs":" Unique styling for the `Matrix`.\n","sig":null,"attributes":[{"value":"/ Unique styling for the `Matrix`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776392,"byte_end":776428,"line_start":45,"line_end":45,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":7796},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776618,"byte_end":776628,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"cell_pad_w","qualname":"::widget::matrix::Style::cell_pad_w","value":"std::option::Option<f64>","parent":{"krate":0,"index":7795},"children":[],"decl_id":null,"docs":" The width of the padding for each matrix element's \"cell\".\n","sig":null,"attributes":[{"value":"/ The width of the padding for each matrix element's \"cell\".","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776516,"byte_end":776578,"line_start":48,"line_end":48,"column_start":5,"column_end":67}},{"value":"conrod(default = \"0.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776583,"byte_end":776609,"line_start":49,"line_end":49,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7797},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776753,"byte_end":776763,"line_start":53,"line_end":53,"column_start":9,"column_end":19},"name":"cell_pad_h","qualname":"::widget::matrix::Style::cell_pad_h","value":"std::option::Option<f64>","parent":{"krate":0,"index":7795},"children":[],"decl_id":null,"docs":" The height of the padding for each matrix element's \"cell\".\n","sig":null,"attributes":[{"value":"/ The height of the padding for each matrix element's \"cell\".","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776650,"byte_end":776713,"line_start":51,"line_end":51,"column_start":5,"column_end":68}},{"value":"conrod(default = \"0.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776718,"byte_end":776744,"line_start":52,"line_end":52,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":7800},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776618,"byte_end":776628,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"cell_pad_w","qualname":"<Style>::cell_pad_w","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7804},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776753,"byte_end":776763,"line_start":53,"line_end":53,"column_start":9,"column_end":19},"name":"cell_pad_h","qualname":"<Style>::cell_pad_h","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776966,"byte_end":776974,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"Elements","qualname":"::widget::matrix::Elements","value":"Elements {  }","parent":null,"children":[{"krate":0,"index":7820},{"krate":0,"index":7821},{"krate":0,"index":7822},{"krate":0,"index":7823},{"krate":0,"index":7824},{"krate":0,"index":7825},{"krate":0,"index":7826},{"krate":0,"index":7827},{"krate":0,"index":7828},{"krate":0,"index":7829},{"krate":0,"index":7830}],"decl_id":null,"docs":" The event type yielded by the `Matrix`.","sig":null,"attributes":[{"value":"/ The event type yielded by the `Matrix`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776784,"byte_end":776827,"line_start":56,"line_end":56,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776828,"byte_end":776831,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This can be used to iterate over each element in the `Matrix`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776832,"byte_end":776898,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":776916,"byte_end":776954,"line_start":60,"line_end":60,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":7833},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777307,"byte_end":777314,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"Element","qualname":"::widget::matrix::Element","value":"Element { widget_id, row, col, w, h, rel_x, rel_y }","parent":null,"children":[{"krate":0,"index":7834},{"krate":0,"index":7835},{"krate":0,"index":7836},{"krate":0,"index":7837},{"krate":0,"index":7838},{"krate":0,"index":7839},{"krate":0,"index":7840},{"krate":0,"index":7841}],"decl_id":null,"docs":" Data necessary for instantiating a widget for a single `Matrix` element.\n","sig":null,"attributes":[{"value":"/ Data necessary for instantiating a widget for a single `Matrix` element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777189,"byte_end":777265,"line_start":73,"line_end":73,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":7834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777366,"byte_end":777375,"line_start":77,"line_end":77,"column_start":9,"column_end":18},"name":"widget_id","qualname":"::widget::matrix::Element::widget_id","value":"daggy::NodeIndex","parent":{"krate":0,"index":7833},"children":[],"decl_id":null,"docs":" The id generated for the widget.\n","sig":null,"attributes":[{"value":"/ The id generated for the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777321,"byte_end":777357,"line_start":76,"line_end":76,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":7835},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777439,"byte_end":777442,"line_start":79,"line_end":79,"column_start":9,"column_end":12},"name":"row","qualname":"::widget::matrix::Element::row","value":"usize","parent":{"krate":0,"index":7833},"children":[],"decl_id":null,"docs":" The row number for the `Element`.\n","sig":null,"attributes":[{"value":"/ The row number for the `Element`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777393,"byte_end":777430,"line_start":78,"line_end":78,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":7836},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777504,"byte_end":777507,"line_start":81,"line_end":81,"column_start":9,"column_end":12},"name":"col","qualname":"::widget::matrix::Element::col","value":"usize","parent":{"krate":0,"index":7833},"children":[],"decl_id":null,"docs":" The column number for the `Element`.\n","sig":null,"attributes":[{"value":"/ The column number for the `Element`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777455,"byte_end":777495,"line_start":80,"line_end":80,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7837},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777558,"byte_end":777559,"line_start":83,"line_end":83,"column_start":9,"column_end":10},"name":"w","qualname":"::widget::matrix::Element::w","value":"f64","parent":{"krate":0,"index":7833},"children":[],"decl_id":null,"docs":" The width of the element.\n","sig":null,"attributes":[{"value":"/ The width of the element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777520,"byte_end":777549,"line_start":82,"line_end":82,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":7838},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777612,"byte_end":777613,"line_start":85,"line_end":85,"column_start":9,"column_end":10},"name":"h","qualname":"::widget::matrix::Element::h","value":"f64","parent":{"krate":0,"index":7833},"children":[],"decl_id":null,"docs":" The height of the element.\n","sig":null,"attributes":[{"value":"/ The height of the element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777573,"byte_end":777603,"line_start":84,"line_end":84,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":7839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777711,"byte_end":777716,"line_start":87,"line_end":87,"column_start":9,"column_end":14},"name":"rel_x","qualname":"::widget::matrix::Element::rel_x","value":"f64","parent":{"krate":0,"index":7833},"children":[],"decl_id":null,"docs":" The *x* position of the element relative to the centre of the `Matrix`.\n","sig":null,"attributes":[{"value":"/ The *x* position of the element relative to the centre of the `Matrix`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777627,"byte_end":777702,"line_start":86,"line_end":86,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":7840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777814,"byte_end":777819,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"name":"rel_y","qualname":"::widget::matrix::Element::rel_y","value":"f64","parent":{"krate":0,"index":7833},"children":[],"decl_id":null,"docs":" The *y* position of the element relative to the centre of the `Matrix`.\n","sig":null,"attributes":[{"value":"/ The *y* position of the element relative to the centre of the `Matrix`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777730,"byte_end":777805,"line_start":88,"line_end":88,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777980,"byte_end":777983,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Matrix>::new","value":"fn (cols: usize, rows: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a widget matrix context.\n","sig":null,"attributes":[{"value":"/ Create a widget matrix context.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777933,"byte_end":777968,"line_start":97,"line_end":97,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3321},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":778261,"byte_end":778273,"line_start":108,"line_end":108,"column_start":12,"column_end":24},"name":"cell_padding","qualname":"<Matrix>::cell_padding","value":"fn (mut self, w: Scalar, h: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A builder method for adding padding to the cell.\n","sig":null,"attributes":[{"value":"/ A builder method for adding padding to the cell.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":778197,"byte_end":778249,"line_start":107,"line_end":107,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":780606,"byte_end":780610,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"next","qualname":"<Elements>::next","value":"fn (&mut self, ui: &Ui) -> Option<Element>","parent":null,"children":[],"decl_id":null,"docs":" Yield the next `Element`.\n","sig":null,"attributes":[{"value":"/ Yield the next `Element`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":780565,"byte_end":780594,"line_start":188,"line_end":188,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782260,"byte_end":782263,"line_start":249,"line_end":249,"column_start":12,"column_end":15},"name":"set","qualname":"<Element>::set","value":"fn <W> (self, widget: W, ui: &mut UiCell) -> W::Event","parent":null,"children":[],"decl_id":null,"docs":" Sets the given widget as the widget to use for the item.","sig":null,"attributes":[{"value":"/ Sets the given widget as the widget to use for the item.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782005,"byte_end":782065,"line_start":242,"line_end":242,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782070,"byte_end":782073,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Sets the:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782078,"byte_end":782091,"line_start":244,"line_end":244,"column_start":5,"column_end":18}},{"value":"/ - position of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782096,"byte_end":782125,"line_start":245,"line_end":245,"column_start":5,"column_end":34}},{"value":"/ - dimensions of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782130,"byte_end":782161,"line_start":246,"line_end":246,"column_start":5,"column_end":36}},{"value":"/ - parent of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782166,"byte_end":782193,"line_start":247,"line_end":247,"column_start":5,"column_end":32}},{"value":"/ - and finally sets the widget within the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":782198,"byte_end":782248,"line_start":248,"line_end":248,"column_start":5,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":3345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"graph","qualname":"::widget::graph","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","parent":null,"children":[{"krate":0,"index":3346},{"krate":0,"index":3357},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3364},{"krate":0,"index":3365},{"krate":0,"index":3366},{"krate":0,"index":3369},{"krate":0,"index":3373},{"krate":0,"index":3376},{"krate":0,"index":3380},{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":8007},{"krate":0,"index":8019},{"krate":0,"index":8016},{"krate":0,"index":8010},{"krate":0,"index":8012},{"krate":0,"index":3470},{"krate":0,"index":3474},{"krate":0,"index":8022},{"krate":0,"index":8043},{"krate":0,"index":8038},{"krate":0,"index":8031},{"krate":0,"index":8048},{"krate":0,"index":8066},{"krate":0,"index":8064},{"krate":0,"index":8062},{"krate":0,"index":8060},{"krate":0,"index":8056},{"krate":0,"index":8057},{"krate":0,"index":8050},{"krate":0,"index":8069},{"krate":0,"index":8067},{"krate":0,"index":3477},{"krate":0,"index":3481},{"krate":0,"index":8071},{"krate":0,"index":8078},{"krate":0,"index":8076},{"krate":0,"index":8074},{"krate":0,"index":8079},{"krate":0,"index":8082},{"krate":0,"index":3488},{"krate":0,"index":8084},{"krate":0,"index":8088},{"krate":0,"index":3491},{"krate":0,"index":8091},{"krate":0,"index":8108},{"krate":0,"index":8105},{"krate":0,"index":8099},{"krate":0,"index":8101},{"krate":0,"index":8111},{"krate":0,"index":8136},{"krate":0,"index":8133},{"krate":0,"index":8130},{"krate":0,"index":8124},{"krate":0,"index":8126},{"krate":0,"index":8119},{"krate":0,"index":8121},{"krate":0,"index":8115},{"krate":0,"index":8138},{"krate":0,"index":8159},{"krate":0,"index":8156},{"krate":0,"index":8153},{"krate":0,"index":8147},{"krate":0,"index":8149},{"krate":0,"index":8161},{"krate":0,"index":8192},{"krate":0,"index":8189},{"krate":0,"index":8186},{"krate":0,"index":8180},{"krate":0,"index":8182},{"krate":0,"index":8175},{"krate":0,"index":8177},{"krate":0,"index":8194},{"krate":0,"index":8207},{"krate":0,"index":8205},{"krate":0,"index":8203},{"krate":0,"index":8201},{"krate":0,"index":8197},{"krate":0,"index":8198},{"krate":0,"index":3499},{"krate":0,"index":3503},{"krate":0,"index":3506},{"krate":0,"index":3509},{"krate":0,"index":3512},{"krate":0,"index":3517},{"krate":0,"index":8208},{"krate":0,"index":8212},{"krate":0,"index":8210},{"krate":0,"index":3524},{"krate":0,"index":3532},{"krate":0,"index":3539},{"krate":0,"index":3546},{"krate":0,"index":3554},{"krate":0,"index":3561},{"krate":0,"index":3564},{"krate":0,"index":3567},{"krate":0,"index":3571},{"krate":0,"index":3577},{"krate":0,"index":3581},{"krate":0,"index":3590},{"krate":0,"index":3593},{"krate":0,"index":3600},{"krate":0,"index":3607},{"krate":0,"index":3615},{"krate":0,"index":3621},{"krate":0,"index":3629},{"krate":0,"index":3634},{"krate":0,"index":3640},{"krate":0,"index":3648},{"krate":0,"index":3656}],"decl_id":null,"docs":" A widget for viewing and controlling graph structures.\n","sig":null,"attributes":[{"value":"! A widget for viewing and controlling graph structures.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":782593,"byte_end":782651,"line_start":1,"line_end":1,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":3380},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"node","qualname":"::widget::graph::node","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","parent":null,"children":[{"krate":0,"index":3381},{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3397},{"krate":0,"index":3398},{"krate":0,"index":7847},{"krate":0,"index":7862},{"krate":0,"index":7859},{"krate":0,"index":7854},{"krate":0,"index":3401},{"krate":0,"index":3402},{"krate":0,"index":7865},{"krate":0,"index":7918},{"krate":0,"index":7916},{"krate":0,"index":7914},{"krate":0,"index":7912},{"krate":0,"index":7908},{"krate":0,"index":7909},{"krate":0,"index":7874},{"krate":0,"index":7919},{"krate":0,"index":7933},{"krate":0,"index":7931},{"krate":0,"index":7929},{"krate":0,"index":7925},{"krate":0,"index":7926},{"krate":0,"index":7922},{"krate":0,"index":7923},{"krate":0,"index":7934},{"krate":0,"index":7956},{"krate":0,"index":7954},{"krate":0,"index":7952},{"krate":0,"index":7949},{"krate":0,"index":7950},{"krate":0,"index":7946},{"krate":0,"index":7947},{"krate":0,"index":7943},{"krate":0,"index":7959},{"krate":0,"index":7957},{"krate":0,"index":3403},{"krate":0,"index":7962},{"krate":0,"index":7980},{"krate":0,"index":7978},{"krate":0,"index":7976},{"krate":0,"index":7973},{"krate":0,"index":7974},{"krate":0,"index":7970},{"krate":0,"index":7971},{"krate":0,"index":7967},{"krate":0,"index":7981},{"krate":0,"index":7987},{"krate":0,"index":7984},{"krate":0,"index":3408},{"krate":0,"index":3420},{"krate":0,"index":3424},{"krate":0,"index":3427},{"krate":0,"index":3428},{"krate":0,"index":3429},{"krate":0,"index":3431},{"krate":0,"index":3433},{"krate":0,"index":3434},{"krate":0,"index":3436},{"krate":0,"index":3437},{"krate":0,"index":3439},{"krate":0,"index":3441},{"krate":0,"index":7990},{"krate":0,"index":7997},{"krate":0,"index":3443},{"krate":0,"index":3446}],"decl_id":null,"docs":" A default container widget to use for nodes that exist within a `Graph` widget.\n","sig":null,"attributes":[{"value":"! A default container widget to use for nodes that exist within a `Graph` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":811913,"byte_end":811996,"line_start":1,"line_end":1,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":7847},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812323,"byte_end":812327,"line_start":11,"line_end":11,"column_start":12,"column_end":16},"name":"Node","qualname":"::widget::graph::node::Node","value":"Node { common, style, widget, inputs, outputs }","parent":null,"children":[{"krate":0,"index":7853},{"krate":0,"index":7849},{"krate":0,"index":7850},{"krate":0,"index":7851},{"krate":0,"index":7852}],"decl_id":null,"docs":" A widget that acts as a convenience container for some `Node`'s unique widgets.\n","sig":null,"attributes":[{"value":"/ A widget that acts as a convenience container for some `Node`'s unique widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812189,"byte_end":812272,"line_start":9,"line_end":9,"column_start":1,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":7853},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812435,"byte_end":812441,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::graph::node::Node::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":7847},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812337,"byte_end":812396,"line_start":12,"line_end":12,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812401,"byte_end":812426,"line_start":13,"line_end":13,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":7849},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812515,"byte_end":812520,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::graph::node::Node::style","value":"widget::graph::node::Style","parent":{"krate":0,"index":7847},"children":[],"decl_id":null,"docs":" Unique styling for the **Node**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **Node**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812470,"byte_end":812506,"line_start":15,"line_end":15,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":7850},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812588,"byte_end":812594,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"name":"widget","qualname":"::widget::graph::node::Node::widget","value":"W","parent":{"krate":0,"index":7847},"children":[],"decl_id":null,"docs":" The widget wrapped by this node container.\n","sig":null,"attributes":[{"value":"/ The widget wrapped by this node container.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812533,"byte_end":812579,"line_start":17,"line_end":17,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":7851},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812656,"byte_end":812662,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"name":"inputs","qualname":"::widget::graph::node::Node::inputs","value":"usize","parent":{"krate":0,"index":7847},"children":[],"decl_id":null,"docs":" The number of input sockets on the node.\n","sig":null,"attributes":[{"value":"/ The number of input sockets on the node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812603,"byte_end":812647,"line_start":19,"line_end":19,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":7852},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812729,"byte_end":812736,"line_start":22,"line_end":22,"column_start":9,"column_end":16},"name":"outputs","qualname":"::widget::graph::node::Node::outputs","value":"usize","parent":{"krate":0,"index":7847},"children":[],"decl_id":null,"docs":" The number of output sockets on the node.\n","sig":null,"attributes":[{"value":"/ The number of output sockets on the node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812675,"byte_end":812720,"line_start":21,"line_end":21,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":3401},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812781,"byte_end":812805,"line_start":26,"line_end":26,"column_start":11,"column_end":35},"name":"DEFAULT_BORDER_THICKNESS","qualname":"::widget::graph::node::DEFAULT_BORDER_THICKNESS","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812748,"byte_end":812770,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":3402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812854,"byte_end":812875,"line_start":28,"line_end":28,"column_start":11,"column_end":32},"name":"DEFAULT_SOCKET_LENGTH","qualname":"::widget::graph::node::DEFAULT_SOCKET_LENGTH","value":"Scalar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812821,"byte_end":812843,"line_start":27,"line_end":27,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7865},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813045,"byte_end":813050,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::graph::node::Style","value":"Style { color, socket_length, border, border_radius, border_color, socket_color, input_socket_layout, output_socket_layout }","parent":null,"children":[{"krate":0,"index":7866},{"krate":0,"index":7867},{"krate":0,"index":7868},{"krate":0,"index":7869},{"krate":0,"index":7870},{"krate":0,"index":7871},{"krate":0,"index":7872},{"krate":0,"index":7873}],"decl_id":null,"docs":" Unique styling for the **BorderedRectangle** widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **BorderedRectangle** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":812913,"byte_end":812969,"line_start":30,"line_end":30,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":7866},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813152,"byte_end":813157,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::graph::node::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" Shape color for the inner rectangle.\n","sig":null,"attributes":[{"value":"/ Shape color for the inner rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813057,"byte_end":813097,"line_start":33,"line_end":33,"column_start":5,"column_end":45}},{"value":"conrod(default = \"color::TRANSPARENT\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813102,"byte_end":813143,"line_start":34,"line_end":34,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7867},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813274,"byte_end":813287,"line_start":38,"line_end":38,"column_start":9,"column_end":22},"name":"socket_length","qualname":"::widget::graph::node::Style::socket_length","value":"std::option::Option<f64>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" The length of each rectangle along its `SocketSide`.\n","sig":null,"attributes":[{"value":"/ The length of each rectangle along its `SocketSide`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813178,"byte_end":813234,"line_start":36,"line_end":36,"column_start":5,"column_end":61}},{"value":"conrod(default = \"6.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813239,"byte_end":813265,"line_start":37,"line_end":37,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7868},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813491,"byte_end":813497,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::graph::node::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" The widget of the border around the widget.","sig":null,"attributes":[{"value":"/ The widget of the border around the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813309,"byte_end":813356,"line_start":39,"line_end":39,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813361,"byte_end":813364,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ this should always be a positive value in order for sockets to remain visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813369,"byte_end":813451,"line_start":41,"line_end":41,"column_start":5,"column_end":87}},{"value":"conrod(default = \"6.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813456,"byte_end":813482,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7869},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813736,"byte_end":813749,"line_start":50,"line_end":50,"column_start":9,"column_end":22},"name":"border_radius","qualname":"::widget::graph::node::Style::border_radius","value":"std::option::Option<f64>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" The radius of the rounded corners of the border.","sig":null,"attributes":[{"value":"/ The radius of the rounded corners of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813519,"byte_end":813571,"line_start":44,"line_end":44,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813576,"byte_end":813579,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This value will be clamped to the `border` thickness.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813584,"byte_end":813641,"line_start":46,"line_end":46,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813646,"byte_end":813649,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ A value of `0.0` gives square corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813654,"byte_end":813696,"line_start":48,"line_end":48,"column_start":5,"column_end":47}},{"value":"conrod(default = \"6.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813701,"byte_end":813727,"line_start":49,"line_end":49,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813852,"byte_end":813864,"line_start":53,"line_end":53,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::graph::node::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" Color of the border.\n","sig":null,"attributes":[{"value":"/ Color of the border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813771,"byte_end":813795,"line_start":51,"line_end":51,"column_start":5,"column_end":29}},{"value":"conrod(default = \"color::DARK_CHARCOAL\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813800,"byte_end":813843,"line_start":52,"line_end":52,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":7871},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813963,"byte_end":813975,"line_start":56,"line_end":56,"column_start":9,"column_end":21},"name":"socket_color","qualname":"::widget::graph::node::Style::socket_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" Color of the sockets.\n","sig":null,"attributes":[{"value":"/ Color of the sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813885,"byte_end":813910,"line_start":54,"line_end":54,"column_start":5,"column_end":30}},{"value":"conrod(default = \"color::DARK_GREY\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813915,"byte_end":813954,"line_start":55,"line_end":55,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":7872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814142,"byte_end":814161,"line_start":59,"line_end":59,"column_start":9,"column_end":28},"name":"input_socket_layout","qualname":"::widget::graph::node::Style::input_socket_layout","value":"std::option::Option<widget::graph::node::SocketLayout>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" Default layout for input sockets.\n","sig":null,"attributes":[{"value":"/ Default layout for input sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813996,"byte_end":814033,"line_start":57,"line_end":57,"column_start":5,"column_end":42}},{"value":"conrod(default =\n         \"SocketLayout { side: SocketSide::Left, direction: Direction::Backwards }\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814038,"byte_end":814133,"line_start":58,"line_end":58,"column_start":5,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":7873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814342,"byte_end":814362,"line_start":62,"line_end":62,"column_start":9,"column_end":29},"name":"output_socket_layout","qualname":"::widget::graph::node::Style::output_socket_layout","value":"std::option::Option<widget::graph::node::SocketLayout>","parent":{"krate":0,"index":7865},"children":[],"decl_id":null,"docs":" Default layout for node output sockets.\n","sig":null,"attributes":[{"value":"/ Default layout for node output sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814189,"byte_end":814232,"line_start":60,"line_end":60,"column_start":5,"column_end":48}},{"value":"conrod(default =\n         \"SocketLayout { side: SocketSide::Right, direction: Direction::Backwards }\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814237,"byte_end":814333,"line_start":61,"line_end":61,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":7876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813152,"byte_end":813157,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813274,"byte_end":813287,"line_start":38,"line_end":38,"column_start":9,"column_end":22},"name":"socket_length","qualname":"<Style>::socket_length","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813491,"byte_end":813497,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7888},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813736,"byte_end":813749,"line_start":50,"line_end":50,"column_start":9,"column_end":22},"name":"border_radius","qualname":"<Style>::border_radius","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813852,"byte_end":813864,"line_start":53,"line_end":53,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":813963,"byte_end":813975,"line_start":56,"line_end":56,"column_start":9,"column_end":21},"name":"socket_color","qualname":"<Style>::socket_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7900},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814142,"byte_end":814161,"line_start":59,"line_end":59,"column_start":9,"column_end":28},"name":"input_socket_layout","qualname":"<Style>::input_socket_layout","value":"fn (&self, theme: &::Theme) -> SocketLayout","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":7904},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814342,"byte_end":814362,"line_start":62,"line_end":62,"column_start":9,"column_end":29},"name":"output_socket_layout","qualname":"<Style>::output_socket_layout","value":"fn (&self, theme: &::Theme) -> SocketLayout","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814505,"byte_end":814517,"line_start":67,"line_end":67,"column_start":12,"column_end":24},"name":"SocketLayout","qualname":"::widget::graph::node::SocketLayout","value":"SocketLayout { side, direction }","parent":null,"children":[{"krate":0,"index":7920},{"krate":0,"index":7921}],"decl_id":null,"docs":" Describes the layout of either input or output sockets.\n","sig":null,"attributes":[{"value":"/ Describes the layout of either input or output sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814389,"byte_end":814448,"line_start":65,"line_end":65,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":7920},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814595,"byte_end":814599,"line_start":69,"line_end":69,"column_start":9,"column_end":13},"name":"side","qualname":"::widget::graph::node::SocketLayout::side","value":"widget::graph::node::SocketSide","parent":{"krate":0,"index":7919},"children":[],"decl_id":null,"docs":" Represents the side of a node widget's bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Represents the side of a node widget's bounding rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814524,"byte_end":814586,"line_start":68,"line_end":68,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":7921},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814692,"byte_end":814701,"line_start":71,"line_end":71,"column_start":9,"column_end":18},"name":"direction","qualname":"::widget::graph::node::SocketLayout::direction","value":"position::Direction","parent":{"krate":0,"index":7919},"children":[],"decl_id":null,"docs":" The direction in which sockets will be laid out over the side.\n","sig":null,"attributes":[{"value":"/ The direction in which sockets will be laid out over the side.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814617,"byte_end":814683,"line_start":70,"line_end":70,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7935},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814941,"byte_end":814945,"line_start":80,"line_end":80,"column_start":5,"column_end":9},"name":"Left","qualname":"::widget::graph::node::SocketSide::Left","value":"SocketSide::Left","parent":{"krate":0,"index":7934},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7937},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814951,"byte_end":814956,"line_start":81,"line_end":81,"column_start":5,"column_end":10},"name":"Right","qualname":"::widget::graph::node::SocketSide::Right","value":"SocketSide::Right","parent":{"krate":0,"index":7934},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814962,"byte_end":814965,"line_start":82,"line_end":82,"column_start":5,"column_end":8},"name":"Top","qualname":"::widget::graph::node::SocketSide::Top","value":"SocketSide::Top","parent":{"krate":0,"index":7934},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7941},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814971,"byte_end":814977,"line_start":83,"line_end":83,"column_start":5,"column_end":11},"name":"Bottom","qualname":"::widget::graph::node::SocketSide::Bottom","value":"SocketSide::Bottom","parent":{"krate":0,"index":7934},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814924,"byte_end":814934,"line_start":79,"line_end":79,"column_start":10,"column_end":20},"name":"SocketSide","qualname":"::widget::graph::node::SocketSide","value":"SocketSide::{Left, Right, Top, Bottom}","parent":null,"children":[{"krate":0,"index":7935},{"krate":0,"index":7937},{"krate":0,"index":7939},{"krate":0,"index":7941}],"decl_id":null,"docs":" Represents the side of a node widget's bounding rectangle.","sig":null,"attributes":[{"value":"/ Represents the side of a node widget's bounding rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814717,"byte_end":814779,"line_start":74,"line_end":74,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814780,"byte_end":814783,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ This is used to describe default node socket layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814784,"byte_end":814840,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":814892,"byte_end":814914,"line_start":78,"line_end":78,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3403},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":815547,"byte_end":815552,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::graph::node::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3407}],"decl_id":null,"docs":" Unique state for the `Node`.\n","sig":null,"attributes":[{"value":"/ Unique state for the `Node`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":815503,"byte_end":815535,"line_start":103,"line_end":103,"column_start":1,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7963},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":815986,"byte_end":815991,"line_start":117,"line_end":117,"column_start":23,"column_end":28},"name":"Input","qualname":"::widget::graph::node::SocketType::Input","value":"SocketType::Input","parent":{"krate":0,"index":7962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7965},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":815993,"byte_end":815999,"line_start":117,"line_end":117,"column_start":30,"column_end":36},"name":"Output","qualname":"::widget::graph::node::SocketType::Output","value":"SocketType::Output","parent":{"krate":0,"index":7962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":815973,"byte_end":815983,"line_start":117,"line_end":117,"column_start":10,"column_end":20},"name":"SocketType","qualname":"::widget::graph::node::SocketType","value":"SocketType::{Input, Output}","parent":null,"children":[{"krate":0,"index":7963},{"krate":0,"index":7965}],"decl_id":null,"docs":" Describes whether a socket is associated with a node's inputs or outputs.\n","sig":null,"attributes":[{"value":"/ Describes whether a socket is associated with a node's inputs or outputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":815812,"byte_end":815889,"line_start":114,"line_end":114,"column_start":1,"column_end":78}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":815941,"byte_end":815963,"line_start":116,"line_end":116,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":7981},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816083,"byte_end":816088,"line_start":121,"line_end":121,"column_start":12,"column_end":17},"name":"Event","qualname":"::widget::graph::node::Event","value":"Event { widget_event }","parent":null,"children":[{"krate":0,"index":7983}],"decl_id":null,"docs":" The event produced by the `Node` widget.\n","sig":null,"attributes":[{"value":"/ The event produced by the `Node` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816003,"byte_end":816047,"line_start":119,"line_end":119,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816154,"byte_end":816166,"line_start":123,"line_end":123,"column_start":9,"column_end":21},"name":"widget_event","qualname":"::widget::graph::node::Event::widget_event","value":"W","parent":{"krate":0,"index":7981},"children":[],"decl_id":null,"docs":" The event produced by the inner widget `W`.\n","sig":null,"attributes":[{"value":"/ The event produced by the inner widget `W`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816098,"byte_end":816145,"line_start":122,"line_end":122,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816247,"byte_end":816250,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"name":"new","qualname":"<Node<W>>::new","value":"fn (widget: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `Node` widget.\n","sig":null,"attributes":[{"value":"/ Begin building a new `Node` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816196,"byte_end":816235,"line_start":127,"line_end":127,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816531,"byte_end":816537,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"inputs","qualname":"<Node<W>>::inputs","value":"fn (mut self, inputs: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of input sockets for the node.\n","sig":null,"attributes":[{"value":"/ Specify the number of input sockets for the node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816466,"byte_end":816519,"line_start":138,"line_end":138,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816693,"byte_end":816700,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"outputs","qualname":"<Node<W>>::outputs","value":"fn (mut self, outputs: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of output sockets for the node.\n","sig":null,"attributes":[{"value":"/ Specify the number of output sockets for the node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816627,"byte_end":816681,"line_start":144,"line_end":144,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816858,"byte_end":816863,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"color","qualname":"<Node<W>>::color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the color for the node's inner rectangle.\n","sig":null,"attributes":[{"value":"/ Specify the color for the node's inner rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816793,"byte_end":816846,"line_start":150,"line_end":150,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817123,"byte_end":817139,"line_start":159,"line_end":159,"column_start":12,"column_end":28},"name":"border_thickness","qualname":"<Node<W>>::border_thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The thickness of the border around the inner widget.","sig":null,"attributes":[{"value":"/ The thickness of the border around the inner widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816962,"byte_end":817018,"line_start":156,"line_end":156,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817023,"byte_end":817026,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This must always be a positive value in order for sockets to remain visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817031,"byte_end":817111,"line_start":158,"line_end":158,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817338,"byte_end":817350,"line_start":166,"line_end":166,"column_start":12,"column_end":24},"name":"border_color","qualname":"<Node<W>>::border_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the color for the node's border.\n","sig":null,"attributes":[{"value":"/ Specify the color for the node's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817282,"byte_end":817326,"line_start":165,"line_end":165,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3416},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817513,"byte_end":817526,"line_start":172,"line_end":172,"column_start":12,"column_end":25},"name":"border_radius","qualname":"<Node<W>>::border_radius","value":"fn (mut self, radius: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the radius for the node's border.\n","sig":null,"attributes":[{"value":"/ Specify the radius for the node's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817456,"byte_end":817501,"line_start":171,"line_end":171,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3417},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817693,"byte_end":817705,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"socket_color","qualname":"<Node<W>>::socket_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the color for the node's sockets.\n","sig":null,"attributes":[{"value":"/ Specify the color for the node's sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817636,"byte_end":817681,"line_start":177,"line_end":177,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817867,"byte_end":817886,"line_start":184,"line_end":184,"column_start":12,"column_end":31},"name":"input_socket_layout","qualname":"<Node<W>>::input_socket_layout","value":"fn (mut self, layout: SocketLayout) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the layout of the input sockets.\n","sig":null,"attributes":[{"value":"/ Specify the layout of the input sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":817811,"byte_end":817855,"line_start":183,"line_end":183,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":818064,"byte_end":818084,"line_start":190,"line_end":190,"column_start":12,"column_end":32},"name":"output_socket_layout","qualname":"<Node<W>>::output_socket_layout","value":"fn (mut self, layout: SocketLayout) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the layout of the input sockets.\n","sig":null,"attributes":[{"value":"/ Specify the layout of the input sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":818008,"byte_end":818052,"line_start":189,"line_end":189,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":3437},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":821944,"byte_end":821955,"line_start":314,"line_end":314,"column_start":8,"column_end":19},"name":"socket_rect","qualname":"::widget::graph::node::socket_rect","value":"fn (node_id: widget::Id, socket_type: SocketType, socket_index: usize, ui: &Ui) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `Rect` for the given socket on the given node.","sig":null,"attributes":[{"value":"/ Retrieve the `Rect` for the given socket on the given node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":821769,"byte_end":821832,"line_start":311,"line_end":311,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":821833,"byte_end":821836,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if there is no node for the given `Id` or if the `socket_index` is out of range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":821837,"byte_end":821936,"line_start":313,"line_end":313,"column_start":1,"column_end":100}}]},{"kind":"Function","id":{"krate":0,"index":3439},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":823050,"byte_end":823067,"line_start":344,"line_end":344,"column_start":8,"column_end":25},"name":"edge_socket_rects","qualname":"::widget::graph::node::edge_socket_rects","value":"fn <NI> (edge: &super::Edge<NI>, ui: &Ui) -> (Rect, Rect)","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Rect` for an edge's start and end nodes.\n","sig":null,"attributes":[{"value":"/ Returns a `Rect` for an edge's start and end nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":822987,"byte_end":823042,"line_start":343,"line_end":343,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":3441},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":823788,"byte_end":823800,"line_start":362,"line_end":362,"column_start":8,"column_end":20},"name":"socket_rects","qualname":"::widget::graph::node::socket_rects","value":"fn (node_id: widget::Id, ui: &Ui) -> Option<(SocketRects, SocketRects)>","parent":null,"children":[],"decl_id":null,"docs":" Produces an iterator yielding a `Rect` for each socket for both inputs and outputs\n respectively.","sig":null,"attributes":[{"value":"/ Produces an iterator yielding a `Rect` for each socket for both inputs and outputs","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":823605,"byte_end":823691,"line_start":358,"line_end":358,"column_start":1,"column_end":87}},{"value":"/ respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":823692,"byte_end":823709,"line_start":359,"line_end":359,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":823710,"byte_end":823713,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if no node is found for the given `widget::Id`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":823714,"byte_end":823780,"line_start":361,"line_end":361,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":7990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":825126,"byte_end":825137,"line_start":397,"line_end":397,"column_start":12,"column_end":23},"name":"SocketRects","qualname":"::widget::graph::node::SocketRects","value":"SocketRects {  }","parent":null,"children":[{"krate":0,"index":7991},{"krate":0,"index":7992},{"krate":0,"index":7993},{"krate":0,"index":7994},{"krate":0,"index":7995},{"krate":0,"index":7996}],"decl_id":null,"docs":" The rectangle for each socket (either inputs or outputs only).\n","sig":null,"attributes":[{"value":"/ The rectangle for each socket (either inputs or outputs only).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":824992,"byte_end":825058,"line_start":394,"line_end":394,"column_start":1,"column_end":67}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":825076,"byte_end":825114,"line_start":396,"line_end":396,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":3467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783229,"byte_end":783235,"line_start":20,"line_end":20,"column_start":11,"column_end":17},"name":"NodeId","qualname":"::widget::graph::NodeId","value":"NodeId: 'static + Copy + Clone + PartialEq + Eq + Hash + Send","parent":null,"children":[],"decl_id":null,"docs":" Traits required by types that may be used as a graph node identifier.","sig":null,"attributes":[{"value":"/ Traits required by types that may be used as a graph node identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783058,"byte_end":783131,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783132,"byte_end":783135,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This trait has a blanket implementation for all types that satisfy the bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783136,"byte_end":783218,"line_start":19,"line_end":19,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":8007},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783584,"byte_end":783590,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Layout","qualname":"::widget::graph::Layout","value":"Layout {  }","parent":null,"children":[{"krate":0,"index":8009}],"decl_id":null,"docs":" Stores the layout of all nodes within the graph.","sig":null,"attributes":[{"value":"/ Stores the layout of all nodes within the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783382,"byte_end":783434,"line_start":23,"line_end":23,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783435,"byte_end":783438,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ All positions are relative to the centre of the `Graph` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783439,"byte_end":783506,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783507,"byte_end":783510,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Nodes can be moved by ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783511,"byte_end":783537,"line_start":27,"line_end":27,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":8022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784069,"byte_end":784074,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"Graph","qualname":"::widget::graph::Graph","value":"Graph { common, style, nodes, edges, layout }","parent":null,"children":[{"krate":0,"index":8030},{"krate":0,"index":8026},{"krate":0,"index":8027},{"krate":0,"index":8028},{"krate":0,"index":8029}],"decl_id":null,"docs":" A widget used for visualising and manipulating **Graph** types.\n","sig":null,"attributes":[{"value":"/ A widget used for visualising and manipulating **Graph** types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783951,"byte_end":784018,"line_start":55,"line_end":55,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8030},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784299,"byte_end":784305,"line_start":65,"line_end":65,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::graph::Graph::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":8022},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784201,"byte_end":784260,"line_start":63,"line_end":63,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784265,"byte_end":784290,"line_start":64,"line_end":64,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":8026},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784380,"byte_end":784385,"line_start":67,"line_end":67,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::graph::Graph::style","value":"widget::graph::Style","parent":{"krate":0,"index":8022},"children":[],"decl_id":null,"docs":" Unique styling for the **Graph**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **Graph**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784334,"byte_end":784371,"line_start":66,"line_end":66,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":8027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784470,"byte_end":784475,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"nodes","qualname":"::widget::graph::Graph::nodes","value":"N","parent":{"krate":0,"index":8022},"children":[],"decl_id":null,"docs":" All nodes within the graph that the widget is to represent.\n","sig":null,"attributes":[{"value":"/ All nodes within the graph that the widget is to represent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784398,"byte_end":784461,"line_start":68,"line_end":68,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784524,"byte_end":784529,"line_start":71,"line_end":71,"column_start":9,"column_end":14},"name":"edges","qualname":"::widget::graph::Graph::edges","value":"E","parent":{"krate":0,"index":8022},"children":[],"decl_id":null,"docs":" All edges within the graph.\n","sig":null,"attributes":[{"value":"/ All edges within the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784484,"byte_end":784515,"line_start":70,"line_end":70,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":8029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784594,"byte_end":784600,"line_start":73,"line_end":73,"column_start":9,"column_end":15},"name":"layout","qualname":"::widget::graph::Graph::layout","value":"&'a widget::graph::Layout<<N as std::iter::Iterator>::Item>","parent":{"krate":0,"index":8022},"children":[],"decl_id":null,"docs":" The position of each node within the graph.\n","sig":null,"attributes":[{"value":"/ The position of each node within the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784538,"byte_end":784585,"line_start":72,"line_end":72,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":8048},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784758,"byte_end":784763,"line_start":78,"line_end":78,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::graph::Style","value":"Style { background_color }","parent":null,"children":[{"krate":0,"index":8049}],"decl_id":null,"docs":" Unique styling for the **BorderedRectangle** widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **BorderedRectangle** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784626,"byte_end":784682,"line_start":76,"line_end":76,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":8049},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784867,"byte_end":784883,"line_start":81,"line_end":81,"column_start":9,"column_end":25},"name":"background_color","qualname":"::widget::graph::Style::background_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8048},"children":[],"decl_id":null,"docs":" Shape styling for the inner rectangle.\n","sig":null,"attributes":[{"value":"/ Shape styling for the inner rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784770,"byte_end":784812,"line_start":79,"line_end":79,"column_start":5,"column_end":47}},{"value":"conrod(default = \"color::TRANSPARENT\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784817,"byte_end":784858,"line_start":80,"line_end":80,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":8052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":784867,"byte_end":784883,"line_start":81,"line_end":81,"column_start":9,"column_end":25},"name":"background_color","qualname":"<Style>::background_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3477},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":785066,"byte_end":785071,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::graph::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3479},{"krate":0,"index":3480}],"decl_id":null,"docs":" Unique state for the `Graph`.\n","sig":null,"attributes":[{"value":"/ Unique state for the `Graph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":785021,"byte_end":785054,"line_start":91,"line_end":91,"column_start":1,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8093},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789477,"byte_end":789481,"line_start":227,"line_end":227,"column_start":5,"column_end":9},"name":"Node","qualname":"::widget::graph::Event::Node","value":"Event::Node(NodeEvent<NI>)","parent":{"krate":0,"index":8091},"children":[],"decl_id":null,"docs":" Events associated with nodes.\n","sig":null,"attributes":[{"value":"/ Events associated with nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789439,"byte_end":789472,"line_start":226,"line_end":226,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8096},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789540,"byte_end":789544,"line_start":229,"line_end":229,"column_start":5,"column_end":9},"name":"Edge","qualname":"::widget::graph::Event::Edge","value":"Event::Edge(EdgeEvent<NI>)","parent":{"krate":0,"index":8091},"children":[],"decl_id":null,"docs":" Events associated with edges.\n","sig":null,"attributes":[{"value":"/ Events associated with edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789502,"byte_end":789535,"line_start":228,"line_end":228,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":8091},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789423,"byte_end":789428,"line_start":225,"line_end":225,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::graph::Event","value":"Event::{Node, Edge}","parent":null,"children":[{"krate":0,"index":8093},{"krate":0,"index":8096}],"decl_id":null,"docs":" An interaction has caused some event to occur.\n","sig":null,"attributes":[{"value":"/ An interaction has caused some event to occur.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789249,"byte_end":789299,"line_start":218,"line_end":218,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":8111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789954,"byte_end":789964,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"NodeSocket","qualname":"::widget::graph::NodeSocket","value":"NodeSocket { id, socket_index }","parent":null,"children":[{"krate":0,"index":8113},{"krate":0,"index":8114}],"decl_id":null,"docs":" Represents a socket connection on a node.","sig":null,"attributes":[{"value":"/ Represents a socket connection on a node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789564,"byte_end":789609,"line_start":232,"line_end":232,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789610,"byte_end":789613,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ Assumed to be either an input or output socket based on its usage within a tuple. E.g. given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789614,"byte_end":789710,"line_start":234,"line_end":234,"column_start":1,"column_end":97}},{"value":"/ two sockets *(a, b)*, socket *a*'s `socket_index` refers its index within `a`'s ***output***","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789711,"byte_end":789807,"line_start":235,"line_end":235,"column_start":1,"column_end":97}},{"value":"/ socket list, while *b*'s refers its index within `b`'s ***input*** socket list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789808,"byte_end":789891,"line_start":236,"line_end":236,"column_start":1,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":8113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790023,"byte_end":790025,"line_start":240,"line_end":240,"column_start":9,"column_end":11},"name":"id","qualname":"::widget::graph::NodeSocket::id","value":"NI","parent":{"krate":0,"index":8111},"children":[],"decl_id":null,"docs":" The unique identifier for the node.\n","sig":null,"attributes":[{"value":"/ The unique identifier for the node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":789975,"byte_end":790014,"line_start":239,"line_end":239,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":8114},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790177,"byte_end":790189,"line_start":244,"line_end":244,"column_start":9,"column_end":21},"name":"socket_index","qualname":"::widget::graph::NodeSocket::socket_index","value":"usize","parent":{"krate":0,"index":8111},"children":[],"decl_id":null,"docs":" The index of the socket on one side of the node.","sig":null,"attributes":[{"value":"/ The index of the socket on one side of the node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790035,"byte_end":790087,"line_start":241,"line_end":241,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790092,"byte_end":790095,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ E.g. if the socket is the 3rd output socket, index would be `2`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790100,"byte_end":790168,"line_start":243,"line_end":243,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790393,"byte_end":790399,"line_start":251,"line_end":251,"column_start":5,"column_end":11},"name":"Remove","qualname":"::widget::graph::NodeEvent::Remove","value":"NodeEvent::Remove(NI)","parent":{"krate":0,"index":8138},"children":[],"decl_id":null,"docs":" The user attempted to remove the node with the given identifier.\n","sig":null,"attributes":[{"value":"/ The user attempted to remove the node with the given identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790320,"byte_end":790388,"line_start":250,"line_end":250,"column_start":5,"column_end":73}}]},{"kind":"StructVariant","id":{"krate":0,"index":8143},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790476,"byte_end":790483,"line_start":253,"line_end":253,"column_start":5,"column_end":12},"name":"Dragged","qualname":"::widget::graph::NodeEvent::Dragged","value":"NodeEvent::Dragged { node_id, from, to }","parent":{"krate":0,"index":8138},"children":[],"decl_id":null,"docs":" The widget used to represent this `Node` has been dragged.\n","sig":null,"attributes":[{"value":"/ The widget used to represent this `Node` has been dragged.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790409,"byte_end":790471,"line_start":252,"line_end":252,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":8138},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790300,"byte_end":790309,"line_start":249,"line_end":249,"column_start":10,"column_end":19},"name":"NodeEvent","qualname":"::widget::graph::NodeEvent","value":"NodeEvent::{Remove, Dragged}","parent":null,"children":[{"krate":0,"index":8140},{"krate":0,"index":8143}],"decl_id":null,"docs":" Events related to adding and removing nodes.\n","sig":null,"attributes":[{"value":"/ Events related to adding and removing nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790201,"byte_end":790249,"line_start":247,"line_end":247,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791022,"byte_end":791030,"line_start":269,"line_end":269,"column_start":5,"column_end":13},"name":"AddStart","qualname":"::widget::graph::EdgeEvent::AddStart","value":"EdgeEvent::AddStart(NodeSocket<NI>)","parent":{"krate":0,"index":8161},"children":[],"decl_id":null,"docs":" The user has pressed the given node socket with the left mouse button to begin creating an\n edge.\n","sig":null,"attributes":[{"value":"/ The user has pressed the given node socket with the left mouse button to begin creating an","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790909,"byte_end":791003,"line_start":267,"line_end":267,"column_start":5,"column_end":99}},{"value":"/ edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791008,"byte_end":791017,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"StructVariant","id":{"krate":0,"index":8166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791137,"byte_end":791140,"line_start":271,"line_end":271,"column_start":5,"column_end":8},"name":"Add","qualname":"::widget::graph::EdgeEvent::Add","value":"EdgeEvent::Add { start, end }","parent":{"krate":0,"index":8161},"children":[],"decl_id":null,"docs":" The user has attempted to create an edge between the two given node sockets.\n","sig":null,"attributes":[{"value":"/ The user has attempted to create an edge between the two given node sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791052,"byte_end":791132,"line_start":270,"line_end":270,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791285,"byte_end":791294,"line_start":276,"line_end":276,"column_start":5,"column_end":14},"name":"Cancelled","qualname":"::widget::graph::EdgeEvent::Cancelled","value":"EdgeEvent::Cancelled(NodeSocket<NI>)","parent":{"krate":0,"index":8161},"children":[],"decl_id":null,"docs":" The user has cancelled creating an edge from the given socket.\n","sig":null,"attributes":[{"value":"/ The user has cancelled creating an edge from the given socket.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791214,"byte_end":791280,"line_start":275,"line_end":275,"column_start":5,"column_end":71}}]},{"kind":"StructVariant","id":{"krate":0,"index":8172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791400,"byte_end":791406,"line_start":278,"line_end":278,"column_start":5,"column_end":11},"name":"Remove","qualname":"::widget::graph::EdgeEvent::Remove","value":"EdgeEvent::Remove { start, end }","parent":{"krate":0,"index":8161},"children":[],"decl_id":null,"docs":" The user has attempted to remove the edge connecting the two given sockets.\n","sig":null,"attributes":[{"value":"/ The user has attempted to remove the edge connecting the two given sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791316,"byte_end":791395,"line_start":277,"line_end":277,"column_start":5,"column_end":84}}]},{"kind":"Enum","id":{"krate":0,"index":8161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790889,"byte_end":790898,"line_start":266,"line_end":266,"column_start":10,"column_end":19},"name":"EdgeEvent","qualname":"::widget::graph::EdgeEvent","value":"EdgeEvent::{AddStart, Add, Cancelled, Remove}","parent":null,"children":[{"krate":0,"index":8163},{"krate":0,"index":8166},{"krate":0,"index":8169},{"krate":0,"index":8172}],"decl_id":null,"docs":" Events related to adding and removing edges.\n","sig":null,"attributes":[{"value":"/ Events related to adding and removing edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790763,"byte_end":790811,"line_start":263,"line_end":263,"column_start":1,"column_end":49}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":790857,"byte_end":790879,"line_start":265,"line_end":265,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791632,"byte_end":791638,"line_start":288,"line_end":288,"column_start":12,"column_end":18},"name":"Camera","qualname":"::widget::graph::Camera","value":"Camera {  }","parent":null,"children":[{"krate":0,"index":8195},{"krate":0,"index":8196}],"decl_id":null,"docs":" The camera used to view the graph.","sig":null,"attributes":[{"value":"/ The camera used to view the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791479,"byte_end":791517,"line_start":284,"line_end":284,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791518,"byte_end":791521,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ The camera supports 2D positioning and zoom.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":791522,"byte_end":791570,"line_start":286,"line_end":286,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3499},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792592,"byte_end":792599,"line_start":313,"line_end":313,"column_start":12,"column_end":19},"name":"Session","qualname":"::widget::graph::Session","value":"Session {  }","parent":null,"children":[{"krate":0,"index":3501},{"krate":0,"index":3502}],"decl_id":null,"docs":" A context for moving through the modes of graph widget instantiation in a type-safe manner.","sig":null,"attributes":[{"value":"/ A context for moving through the modes of graph widget instantiation in a type-safe manner.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792038,"byte_end":792133,"line_start":303,"line_end":303,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792134,"byte_end":792137,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ The **Session** is shared between 3 stages:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792138,"byte_end":792185,"line_start":305,"line_end":305,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792186,"byte_end":792189,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ 1. **SessionEvents**: Emit all graph events that have occurred since the last instantiation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792190,"byte_end":792286,"line_start":307,"line_end":307,"column_start":1,"column_end":97}},{"value":"/ 2. **SessionNodes**: Instantiate all node widgets in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792287,"byte_end":792354,"line_start":308,"line_end":308,"column_start":1,"column_end":68}},{"value":"/ 3. **SessionEdges**: Instantiate all edge widgets in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792355,"byte_end":792422,"line_start":309,"line_end":309,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792423,"byte_end":792426,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ NOTE: This should allow for different instantiation orders, e.g: nodes then edges, all","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792427,"byte_end":792517,"line_start":311,"line_end":311,"column_start":1,"column_end":91}},{"value":"/ connected components in topo order, edges then nodes, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792518,"byte_end":792580,"line_start":312,"line_end":312,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":3503},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792857,"byte_end":792870,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"SessionEvents","qualname":"::widget::graph::SessionEvents","value":"SessionEvents {  }","parent":null,"children":[{"krate":0,"index":3505}],"decl_id":null,"docs":" The first stage of the graph's **Session** event.\n","sig":null,"attributes":[{"value":"/ The first stage of the graph's **Session** event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792792,"byte_end":792845,"line_start":320,"line_end":320,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3506},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792980,"byte_end":792992,"line_start":326,"line_end":326,"column_start":12,"column_end":24},"name":"SessionNodes","qualname":"::widget::graph::SessionNodes","value":"SessionNodes {  }","parent":null,"children":[{"krate":0,"index":3508}],"decl_id":null,"docs":" The second stage of the graph's **Session** event.\n","sig":null,"attributes":[{"value":"/ The second stage of the graph's **Session** event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":792914,"byte_end":792968,"line_start":325,"line_end":325,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":3509},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793101,"byte_end":793113,"line_start":331,"line_end":331,"column_start":12,"column_end":24},"name":"SessionEdges","qualname":"::widget::graph::SessionEdges","value":"SessionEdges {  }","parent":null,"children":[{"krate":0,"index":3511}],"decl_id":null,"docs":" The third stage of the graph's **Session** event.\n","sig":null,"attributes":[{"value":"/ The third stage of the graph's **Session** event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793036,"byte_end":793089,"line_start":330,"line_end":330,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3512},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793213,"byte_end":793219,"line_start":336,"line_end":336,"column_start":12,"column_end":18},"name":"Events","qualname":"::widget::graph::Events","value":"Events {  }","parent":null,"children":[{"krate":0,"index":3515},{"krate":0,"index":3516}],"decl_id":null,"docs":" An iterator yielding all pending events.\n","sig":null,"attributes":[{"value":"/ An iterator yielding all pending events.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793157,"byte_end":793201,"line_start":335,"line_end":335,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":3517},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793588,"byte_end":793593,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"name":"Nodes","qualname":"::widget::graph::Nodes","value":"Nodes {  }","parent":null,"children":[{"krate":0,"index":3520},{"krate":0,"index":3521},{"krate":0,"index":3522},{"krate":0,"index":3523}],"decl_id":null,"docs":" An iterator-like type yielding a `NodeContext` for every node in the graph.","sig":null,"attributes":[{"value":"/ An iterator-like type yielding a `NodeContext` for every node in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793403,"byte_end":793482,"line_start":342,"line_end":342,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793483,"byte_end":793486,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ Each `NodeContext` can be used for instantiating a widget for each node in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":793487,"byte_end":793576,"line_start":344,"line_end":344,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":3524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794359,"byte_end":794370,"line_start":368,"line_end":368,"column_start":12,"column_end":23},"name":"NodeContext","qualname":"::widget::graph::NodeContext","value":"NodeContext {  }","parent":null,"children":[{"krate":0,"index":3527},{"krate":0,"index":3528},{"krate":0,"index":3529},{"krate":0,"index":3530},{"krate":0,"index":3531}],"decl_id":null,"docs":" A context for a node yielded during the node instantiation stage.","sig":null,"attributes":[{"value":"/ A context for a node yielded during the node instantiation stage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794041,"byte_end":794110,"line_start":361,"line_end":361,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794111,"byte_end":794114,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ This type can be used to:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794115,"byte_end":794144,"line_start":363,"line_end":363,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794145,"byte_end":794148,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/ 1. Get the position of the node via `point()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794149,"byte_end":794199,"line_start":365,"line_end":365,"column_start":1,"column_end":51}},{"value":"/ 2. Get the ID for this node via `node_id()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794200,"byte_end":794248,"line_start":366,"line_end":366,"column_start":1,"column_end":49}},{"value":"/ 3. Convert into a `NodeWidget` ready for instantiation within the `Ui` via `widget(a_widget)`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794249,"byte_end":794347,"line_start":367,"line_end":367,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":3532},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794871,"byte_end":794881,"line_start":382,"line_end":382,"column_start":12,"column_end":22},"name":"NodeWidget","qualname":"::widget::graph::NodeWidget","value":"NodeWidget {  }","parent":null,"children":[{"krate":0,"index":3536},{"krate":0,"index":3537},{"krate":0,"index":3538}],"decl_id":null,"docs":" Returned when a `NodeContext` is assigned a widget.","sig":null,"attributes":[{"value":"/ Returned when a `NodeContext` is assigned a widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794689,"byte_end":794744,"line_start":378,"line_end":378,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794745,"byte_end":794748,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ This intermediary type allows for accessing the `widget::Id` before the widget itself is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794749,"byte_end":794841,"line_start":380,"line_end":380,"column_start":1,"column_end":93}},{"value":"/ instantiated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":794842,"byte_end":794859,"line_start":381,"line_end":381,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":3539},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795255,"byte_end":795260,"line_start":392,"line_end":392,"column_start":12,"column_end":17},"name":"Edges","qualname":"::widget::graph::Edges","value":"Edges {  }","parent":null,"children":[{"krate":0,"index":3542},{"krate":0,"index":3543},{"krate":0,"index":3544},{"krate":0,"index":3545}],"decl_id":null,"docs":" An iterator-like type yielding a `NodeContext` for every node in the graph.","sig":null,"attributes":[{"value":"/ An iterator-like type yielding a `NodeContext` for every node in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795070,"byte_end":795149,"line_start":389,"line_end":389,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795150,"byte_end":795153,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ Each `NodeContext` can be used for instantiating a widget for each node in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795154,"byte_end":795243,"line_start":391,"line_end":391,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":3546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795744,"byte_end":795748,"line_start":405,"line_end":405,"column_start":12,"column_end":16},"name":"Edge","qualname":"::widget::graph::Edge","value":"Edge {  }","parent":null,"children":[{"krate":0,"index":3549},{"krate":0,"index":3550},{"krate":0,"index":3551},{"krate":0,"index":3552},{"krate":0,"index":3553}],"decl_id":null,"docs":" A context for an edge yielded during the edge instantiation stage.","sig":null,"attributes":[{"value":"/ A context for an edge yielded during the edge instantiation stage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795639,"byte_end":795709,"line_start":402,"line_end":402,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795710,"byte_end":795713,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ Tyis type can ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":795714,"byte_end":795732,"line_start":404,"line_end":404,"column_start":1,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3554},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":796385,"byte_end":796395,"line_start":422,"line_end":422,"column_start":12,"column_end":22},"name":"EdgeWidget","qualname":"::widget::graph::EdgeWidget","value":"EdgeWidget {  }","parent":null,"children":[{"krate":0,"index":3558},{"krate":0,"index":3559},{"krate":0,"index":3560}],"decl_id":null,"docs":" Returned when an `Edge` is assigned a widget.","sig":null,"attributes":[{"value":"/ Returned when an `Edge` is assigned a widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":796209,"byte_end":796258,"line_start":418,"line_end":418,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":796259,"byte_end":796262,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ This intermediary type allows for accessing the `widget::Id` before the widget itself is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":796263,"byte_end":796355,"line_start":420,"line_end":420,"column_start":1,"column_end":93}},{"value":"/ instantiated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":796356,"byte_end":796373,"line_start":421,"line_end":421,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":3569},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797431,"byte_end":797437,"line_start":467,"line_end":467,"column_start":12,"column_end":18},"name":"events","qualname":"<SessionEvents<NI>>::events","value":"fn (&self) -> Events<NI>","parent":null,"children":[],"decl_id":null,"docs":" All events that have occurred since the last \n","sig":null,"attributes":[{"value":"/ All events that have occurred since the last ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797370,"byte_end":797419,"line_start":466,"line_end":466,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3570},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797715,"byte_end":797719,"line_start":473,"line_end":473,"column_start":12,"column_end":16},"name":"next","qualname":"<SessionEvents<NI>>::next","value":"fn (self) -> SessionNodes<NI>","parent":null,"children":[],"decl_id":null,"docs":" Transition from the **SessionEvents** into **SessionNodes** for instantiating nodes.\n","sig":null,"attributes":[{"value":"/ Transition from the **SessionEvents** into **SessionNodes** for instantiating nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797615,"byte_end":797703,"line_start":472,"line_end":472,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":3579},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798239,"byte_end":798244,"line_start":496,"line_end":496,"column_start":12,"column_end":17},"name":"nodes","qualname":"<SessionNodes<NI>>::nodes","value":"fn (&mut self) -> Nodes<NI>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator yielding a `NodeContext` for each node present in the graph.\n","sig":null,"attributes":[{"value":"/ Produce an iterator yielding a `NodeContext` for each node present in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798143,"byte_end":798227,"line_start":495,"line_end":495,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798589,"byte_end":798593,"line_start":503,"line_end":503,"column_start":12,"column_end":16},"name":"next","qualname":"<SessionNodes<NI>>::next","value":"fn (self) -> SessionEdges<NI>","parent":null,"children":[],"decl_id":null,"docs":" Transition from the **SessionNodes** into **SessionEdges** for instantiating edges.\n","sig":null,"attributes":[{"value":"/ Transition from the **SessionNodes** into **SessionEdges** for instantiating edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798490,"byte_end":798577,"line_start":502,"line_end":502,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":3592},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":799614,"byte_end":799619,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"edges","qualname":"<SessionEdges<NI>>::edges","value":"fn (&mut self) -> Edges<NI>","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator yielding an `Edge` for each node present in the graph.\n","sig":null,"attributes":[{"value":"/ Produce an iterator yielding an `Edge` for each node present in the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":799524,"byte_end":799602,"line_start":540,"line_end":540,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3603},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800637,"byte_end":800644,"line_start":577,"line_end":577,"column_start":12,"column_end":19},"name":"node_id","qualname":"<NodeContext>::node_id","value":"fn (&self) -> NI","parent":null,"children":[],"decl_id":null,"docs":" The unique identifier associated with this node.\n","sig":null,"attributes":[{"value":"/ The unique identifier associated with this node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800573,"byte_end":800625,"line_start":576,"line_end":576,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3604},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800733,"byte_end":800738,"line_start":582,"line_end":582,"column_start":12,"column_end":17},"name":"point","qualname":"<NodeContext>::point","value":"fn (&self) -> Point","parent":null,"children":[],"decl_id":null,"docs":" The location of the node.\n","sig":null,"attributes":[{"value":"/ The location of the node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800692,"byte_end":800721,"line_start":581,"line_end":581,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3605},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800829,"byte_end":800835,"line_start":587,"line_end":587,"column_start":12,"column_end":18},"name":"widget","qualname":"<NodeContext>::widget","value":"fn <W> (self, widget: W) -> NodeWidget<'a, NI, W>","parent":null,"children":[],"decl_id":null,"docs":" Specify the widget to use \n","sig":null,"attributes":[{"value":"/ Specify the widget to use ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800787,"byte_end":800817,"line_start":586,"line_end":586,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":801192,"byte_end":801201,"line_start":602,"line_end":602,"column_start":12,"column_end":21},"name":"widget_id","qualname":"<NodeWidget>::widget_id","value":"fn (&self, ui: &mut UiCell) -> widget::Id","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `widget::Id` that will be used to instantiate this node's widget.\n","sig":null,"attributes":[{"value":"/ Retrieve the `widget::Id` that will be used to instantiate this node's widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":801098,"byte_end":801180,"line_start":601,"line_end":601,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":801740,"byte_end":801743,"line_start":617,"line_end":617,"column_start":12,"column_end":15},"name":"map","qualname":"<NodeWidget>::map","value":"fn <M> (self, map: M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Map over the inner widget.\n","sig":null,"attributes":[{"value":"/ Map over the inner widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":801698,"byte_end":801728,"line_start":616,"line_end":616,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802028,"byte_end":802031,"line_start":627,"line_end":627,"column_start":12,"column_end":15},"name":"set","qualname":"<NodeWidget>::set","value":"fn (self, ui: &mut UiCell) -> W::Event","parent":null,"children":[],"decl_id":null,"docs":" Set the given widget for the node at `node_id()`.\n","sig":null,"attributes":[{"value":"/ Set the given widget for the node at `node_id()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":801963,"byte_end":802016,"line_start":626,"line_end":626,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802688,"byte_end":802693,"line_start":654,"line_end":654,"column_start":12,"column_end":17},"name":"start","qualname":"<Edge>::start","value":"fn (&self) -> NodeSocket<NI>","parent":null,"children":[],"decl_id":null,"docs":" The start (or \"input\") for the edge.","sig":null,"attributes":[{"value":"/ The start (or \"input\") for the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802543,"byte_end":802583,"line_start":651,"line_end":651,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802588,"byte_end":802591,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ This is described via the node's `Id` and the position of its output socket.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802596,"byte_end":802676,"line_start":653,"line_end":653,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802894,"byte_end":802897,"line_start":661,"line_end":661,"column_start":12,"column_end":15},"name":"end","qualname":"<Edge>::end","value":"fn (&self) -> NodeSocket<NI>","parent":null,"children":[],"decl_id":null,"docs":" The end (or \"output\") for the edge.","sig":null,"attributes":[{"value":"/ The end (or \"output\") for the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802751,"byte_end":802790,"line_start":658,"line_end":658,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802795,"byte_end":802798,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ This is described via the node's `Id` and the position of its input socket.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802803,"byte_end":802882,"line_start":660,"line_end":660,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3626},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802995,"byte_end":803002,"line_start":666,"line_end":666,"column_start":12,"column_end":19},"name":"sockets","qualname":"<Edge>::sockets","value":"fn (&self) -> (NodeSocket<NI>, NodeSocket<NI>)","parent":null,"children":[],"decl_id":null,"docs":" The start and end sockets.\n","sig":null,"attributes":[{"value":"/ The start and end sockets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802953,"byte_end":802983,"line_start":665,"line_end":665,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3627},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803132,"byte_end":803138,"line_start":671,"line_end":671,"column_start":12,"column_end":18},"name":"widget","qualname":"<Edge>::widget","value":"fn <W> (self, widget: W) -> EdgeWidget<'a, NI, W>","parent":null,"children":[],"decl_id":null,"docs":" Specify the widget to use \n","sig":null,"attributes":[{"value":"/ Specify the widget to use ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803090,"byte_end":803120,"line_start":670,"line_end":670,"column_start":5,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":3629},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803715,"byte_end":803729,"line_start":688,"line_end":688,"column_start":8,"column_end":22},"name":"node_widget_id","qualname":"::widget::graph::node_widget_id","value":"fn <NI> (node_id: NI, graph_id: widget::Id, ui: &Ui) -> Option<widget::Id>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `widget::Id` for a node if one exists.","sig":null,"attributes":[{"value":"/ Returns the `widget::Id` for a node if one exists.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803310,"byte_end":803364,"line_start":680,"line_end":680,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803365,"byte_end":803368,"line_start":681,"line_end":681,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if there is no `Graph` for the given `graph_id` or if there is not yet a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803369,"byte_end":803460,"line_start":682,"line_end":682,"column_start":1,"column_end":92}},{"value":"/ `widget::Id` for the given `node_id`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803461,"byte_end":803502,"line_start":683,"line_end":683,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803503,"byte_end":803506,"line_start":684,"line_end":684,"column_start":1,"column_end":4}},{"value":"/ This will always return `None` if called between calls to the `Graph::set` and node","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803507,"byte_end":803594,"line_start":685,"line_end":685,"column_start":1,"column_end":88}},{"value":"/ instantiation stages, as `widget::Id`s for nodes are only populated during the node","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803595,"byte_end":803682,"line_start":686,"line_end":686,"column_start":1,"column_end":88}},{"value":"/ instantiation stage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":803683,"byte_end":803707,"line_start":687,"line_end":687,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804536,"byte_end":804556,"line_start":709,"line_end":709,"column_start":8,"column_end":28},"name":"edge_node_widget_ids","qualname":"::widget::graph::edge_node_widget_ids","value":"fn <NI> (edge: &Edge<NI>, ui: &Ui) -> (widget::Id, widget::Id)","parent":null,"children":[],"decl_id":null,"docs":" Returns the `widget::Id`s for the start and end nodes.","sig":null,"attributes":[{"value":"/ Returns the `widget::Id`s for the start and end nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804133,"byte_end":804191,"line_start":701,"line_end":701,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804192,"byte_end":804195,"line_start":702,"line_end":702,"column_start":1,"column_end":4}},{"value":"/ `Edge`s can only exist for the lifetime of a `SessionEdges`, thus we assume that there will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804196,"byte_end":804291,"line_start":703,"line_end":703,"column_start":1,"column_end":96}},{"value":"/ always be a `Graph` for the edge's `graph_id` and that there will always be a `widget::Id`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804292,"byte_end":804386,"line_start":704,"line_end":704,"column_start":1,"column_end":95}},{"value":"/ for the start and end nodes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804387,"byte_end":804419,"line_start":705,"line_end":705,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804420,"byte_end":804423,"line_start":706,"line_end":706,"column_start":1,"column_end":4}},{"value":"/ **Panic!**s if the given `Ui` is not the same one used to create the edge's parent Graph","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804424,"byte_end":804516,"line_start":707,"line_end":707,"column_start":1,"column_end":93}},{"value":"/ widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":804517,"byte_end":804528,"line_start":708,"line_end":708,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":805409,"byte_end":805418,"line_start":731,"line_end":731,"column_start":12,"column_end":21},"name":"widget_id","qualname":"<EdgeWidget>::widget_id","value":"fn (&self, ui: &mut UiCell) -> widget::Id","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `widget::Id` that will be used to instantiate this edge's widget.\n","sig":null,"attributes":[{"value":"/ Retrieve the `widget::Id` that will be used to instantiate this edge's widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":805315,"byte_end":805397,"line_start":730,"line_end":730,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3645},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":805941,"byte_end":805944,"line_start":745,"line_end":745,"column_start":12,"column_end":15},"name":"map","qualname":"<EdgeWidget>::map","value":"fn <M> (self, map: M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Apply the given function to the inner widget.\n","sig":null,"attributes":[{"value":"/ Apply the given function to the inner widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":805880,"byte_end":805929,"line_start":744,"line_end":744,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":806214,"byte_end":806217,"line_start":755,"line_end":755,"column_start":12,"column_end":15},"name":"set","qualname":"<EdgeWidget>::set","value":"fn (self, ui: &mut UiCell) -> W::Event","parent":null,"children":[],"decl_id":null,"docs":" Set the given widget for the edge.\n","sig":null,"attributes":[{"value":"/ Set the given widget for the edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":806164,"byte_end":806202,"line_start":754,"line_end":754,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3652},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":806643,"byte_end":806646,"line_start":771,"line_end":771,"column_start":12,"column_end":15},"name":"new","qualname":"<Graph>::new","value":"fn <NI, EI> (nodes: NI, edges: EI, layout: &'a Layout<NI::Item>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new **Graph** widget.\n","sig":null,"attributes":[{"value":"/ Begin building a new **Graph** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":806589,"byte_end":806631,"line_start":770,"line_end":770,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":807178,"byte_end":807194,"line_start":786,"line_end":786,"column_start":12,"column_end":28},"name":"background_color","qualname":"<Graph>::background_color","value":"fn (mut self, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Color the **Graph**'s rectangular area with the given color.\n","sig":null,"attributes":[{"value":"/ Color the **Graph**'s rectangular area with the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":807102,"byte_end":807166,"line_start":785,"line_end":785,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":3670},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"number_dialer","qualname":"::widget::number_dialer","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","parent":null,"children":[{"krate":0,"index":3671},{"krate":0,"index":3681},{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688},{"krate":0,"index":8213},{"krate":0,"index":8224},{"krate":0,"index":8230},{"krate":0,"index":8273},{"krate":0,"index":8271},{"krate":0,"index":8269},{"krate":0,"index":8267},{"krate":0,"index":8263},{"krate":0,"index":8264},{"krate":0,"index":8237},{"krate":0,"index":8276},{"krate":0,"index":8274},{"krate":0,"index":3689},{"krate":0,"index":8279},{"krate":0,"index":8290},{"krate":0,"index":8288},{"krate":0,"index":8286},{"krate":0,"index":8282},{"krate":0,"index":8283},{"krate":0,"index":3693},{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698},{"krate":0,"index":3703},{"krate":0,"index":3725},{"krate":0,"index":3728},{"krate":0,"index":3731}],"decl_id":null,"docs":" A widget for precision control over any base-10 digit within a given value.\n","sig":null,"attributes":[{"value":"! A widget for precision control over any base-10 digit within a given value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":832787,"byte_end":832866,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":8213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833356,"byte_end":833368,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"NumberDialer","qualname":"::widget::number_dialer::NumberDialer","value":"NumberDialer {  }","parent":null,"children":[{"krate":0,"index":8223},{"krate":0,"index":8216},{"krate":0,"index":8217},{"krate":0,"index":8218},{"krate":0,"index":8219},{"krate":0,"index":8220},{"krate":0,"index":8221},{"krate":0,"index":8222}],"decl_id":null,"docs":" A widget for precision control over any digit within a value.","sig":null,"attributes":[{"value":"/ A widget for precision control over any digit within a value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833117,"byte_end":833182,"line_start":22,"line_end":22,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833183,"byte_end":833186,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The reaction is triggered when the value is updated or if the mouse button is released while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833187,"byte_end":833283,"line_start":24,"line_end":24,"column_start":1,"column_end":97}},{"value":"/ the cursor is above the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833284,"byte_end":833319,"line_start":25,"line_end":25,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":8230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833777,"byte_end":833782,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::number_dialer::Style","value":"Style { color, border, border_color, label_color, label_font_size, font_id }","parent":null,"children":[{"krate":0,"index":8231},{"krate":0,"index":8232},{"krate":0,"index":8233},{"krate":0,"index":8234},{"krate":0,"index":8235},{"krate":0,"index":8236}],"decl_id":null,"docs":" Unique graphical styling for the NumberDialer.\n","sig":null,"attributes":[{"value":"/ Unique graphical styling for the NumberDialer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833651,"byte_end":833701,"line_start":40,"line_end":40,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":8231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833885,"byte_end":833890,"line_start":45,"line_end":45,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::number_dialer::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8230},"children":[],"decl_id":null,"docs":" Color of the NumberDialer's rectangle.\n","sig":null,"attributes":[{"value":"/ Color of the NumberDialer's rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833789,"byte_end":833831,"line_start":43,"line_end":43,"column_start":5,"column_end":47}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833836,"byte_end":833876,"line_start":44,"line_end":44,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834004,"byte_end":834010,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::number_dialer::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":8230},"children":[],"decl_id":null,"docs":" The color of the rectangle border.\n","sig":null,"attributes":[{"value":"/ The color of the rectangle border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833911,"byte_end":833949,"line_start":46,"line_end":46,"column_start":5,"column_end":43}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833954,"byte_end":833995,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834125,"byte_end":834137,"line_start":51,"line_end":51,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::number_dialer::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8230},"children":[],"decl_id":null,"docs":" The color of the rectangle border.\n","sig":null,"attributes":[{"value":"/ The color of the rectangle border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834032,"byte_end":834070,"line_start":49,"line_end":49,"column_start":5,"column_end":43}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834075,"byte_end":834116,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834254,"byte_end":834265,"line_start":54,"line_end":54,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::number_dialer::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8230},"children":[],"decl_id":null,"docs":" The color of the NumberDialer's label.\n","sig":null,"attributes":[{"value":"/ The color of the NumberDialer's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834158,"byte_end":834200,"line_start":52,"line_end":52,"column_start":5,"column_end":47}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834205,"byte_end":834245,"line_start":53,"line_end":53,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834392,"byte_end":834407,"line_start":57,"line_end":57,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::number_dialer::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8230},"children":[],"decl_id":null,"docs":" The font size for the NumberDialer's label.\n","sig":null,"attributes":[{"value":"/ The font size for the NumberDialer's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834286,"byte_end":834333,"line_start":55,"line_end":55,"column_start":5,"column_end":52}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834338,"byte_end":834383,"line_start":56,"line_end":56,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834556,"byte_end":834563,"line_start":60,"line_end":60,"column_start":9,"column_end":16},"name":"font_id","qualname":"::widget::number_dialer::Style::font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8230},"children":[],"decl_id":null,"docs":" The `Id` associated with the font to use for the `NumberDialer` values.\n","sig":null,"attributes":[{"value":"/ The `Id` associated with the font to use for the `NumberDialer` values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834431,"byte_end":834506,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834511,"byte_end":834547,"line_start":59,"line_end":59,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":8239},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":833885,"byte_end":833890,"line_start":45,"line_end":45,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834004,"byte_end":834010,"line_start":48,"line_end":48,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834125,"byte_end":834137,"line_start":51,"line_end":51,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834254,"byte_end":834265,"line_start":54,"line_end":54,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834392,"byte_end":834407,"line_start":57,"line_end":57,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834556,"byte_end":834563,"line_start":60,"line_end":60,"column_start":9,"column_end":16},"name":"font_id","qualname":"<Style>::font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3689},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834720,"byte_end":834725,"line_start":71,"line_end":71,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::number_dialer::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692}],"decl_id":null,"docs":" The state of the NumberDialer.\n","sig":null,"attributes":[{"value":"/ The state of the NumberDialer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834674,"byte_end":834708,"line_start":70,"line_end":70,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":835020,"byte_end":835029,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"GlyphSlot","qualname":"::widget::number_dialer::GlyphSlot","value":"GlyphSlot {  }","parent":null,"children":[{"krate":0,"index":8280},{"krate":0,"index":8281}],"decl_id":null,"docs":" Each digit in the adjustable value has its own **Rectangle** and **Text** widgets.\n","sig":null,"attributes":[{"value":"/ Each digit in the adjustable value has its own **Rectangle** and **Text** widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":834881,"byte_end":834967,"line_start":78,"line_end":78,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":837072,"byte_end":837075,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<NumberDialer>::new","value":"fn (value: T, min: T, max: T, precision: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new NumberDialer widget.\n","sig":null,"attributes":[{"value":"/ Construct a new NumberDialer widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":837020,"byte_end":837060,"line_start":137,"line_end":137,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":837504,"byte_end":837511,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"font_id","qualname":"<NumberDialer>::font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":837441,"byte_end":837492,"line_start":151,"line_end":151,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":8291},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":837661,"byte_end":837668,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"name":"enabled","qualname":"<NumberDialer>::enabled","value":"fn (mut self, enabled: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":3734},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"plot_path","qualname":"::widget::plot_path","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","parent":null,"children":[{"krate":0,"index":3735},{"krate":0,"index":3744},{"krate":0,"index":3745},{"krate":0,"index":3746},{"krate":0,"index":3747},{"krate":0,"index":8298},{"krate":0,"index":8309},{"krate":0,"index":8316},{"krate":0,"index":8339},{"krate":0,"index":8337},{"krate":0,"index":8335},{"krate":0,"index":8333},{"krate":0,"index":8329},{"krate":0,"index":8330},{"krate":0,"index":8319},{"krate":0,"index":8342},{"krate":0,"index":8340},{"krate":0,"index":3748},{"krate":0,"index":3750},{"krate":0,"index":3756},{"krate":0,"index":3771}],"decl_id":null,"docs":" A widget for plotting a series of lines using the given function *x -> y*.\n","sig":null,"attributes":[{"value":"! A widget for plotting a series of lines using the given function *x -> y*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":848425,"byte_end":848503,"line_start":1,"line_end":1,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":8298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":848919,"byte_end":848927,"line_start":15,"line_end":15,"column_start":12,"column_end":20},"name":"PlotPath","qualname":"::widget::plot_path::PlotPath","value":"PlotPath {  }","parent":null,"children":[{"krate":0,"index":8308},{"krate":0,"index":8302},{"krate":0,"index":8303},{"krate":0,"index":8304},{"krate":0,"index":8305},{"krate":0,"index":8306},{"krate":0,"index":8307}],"decl_id":null,"docs":" A widget that plots a series of lines using the given function *x -> y*.","sig":null,"attributes":[{"value":"/ A widget that plots a series of lines using the given function *x -> y*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":848627,"byte_end":848703,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":848704,"byte_end":848707,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The function is sampled once per pixel and the result is mapped to the widget's height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":848708,"byte_end":848799,"line_start":11,"line_end":11,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":848800,"byte_end":848803,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The resulting \"path\" is drawn using conrod's `PointPath` primitive widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":848804,"byte_end":848882,"line_start":13,"line_end":13,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":8316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849223,"byte_end":849228,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::plot_path::Style","value":"Style { thickness, color }","parent":null,"children":[{"krate":0,"index":8317},{"krate":0,"index":8318}],"decl_id":null,"docs":" Unique styling parameters for the `PlotPath` widget.\n","sig":null,"attributes":[{"value":"/ Unique styling parameters for the `PlotPath` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849091,"byte_end":849147,"line_start":26,"line_end":26,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":8317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849313,"byte_end":849322,"line_start":31,"line_end":31,"column_start":9,"column_end":18},"name":"thickness","qualname":"::widget::plot_path::Style::thickness","value":"std::option::Option<f64>","parent":{"krate":0,"index":8316},"children":[],"decl_id":null,"docs":" The thickness of the plotted line.\n","sig":null,"attributes":[{"value":"/ The thickness of the plotted line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849235,"byte_end":849273,"line_start":29,"line_end":29,"column_start":5,"column_end":43}},{"value":"conrod(default = \"1.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849278,"byte_end":849304,"line_start":30,"line_end":30,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":8318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849424,"byte_end":849429,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::plot_path::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8316},"children":[],"decl_id":null,"docs":" The color of the line.\n","sig":null,"attributes":[{"value":"/ The color of the line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849344,"byte_end":849370,"line_start":32,"line_end":32,"column_start":5,"column_end":31}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849375,"byte_end":849415,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":8321},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849313,"byte_end":849322,"line_start":31,"line_end":31,"column_start":9,"column_end":18},"name":"thickness","qualname":"<Style>::thickness","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8325},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849424,"byte_end":849429,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3748},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849587,"byte_end":849592,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::plot_path::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3749}],"decl_id":null,"docs":" Unique state stored between updates for the `PlotPath` widget.\n","sig":null,"attributes":[{"value":"/ Unique state stored between updates for the `PlotPath` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849509,"byte_end":849575,"line_start":43,"line_end":43,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849715,"byte_end":849718,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<PlotPath<X, Y, F>>::new","value":"fn (min_x: X, max_x: X, min_y: Y, max_y: Y, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new `PlotPath` widget instance.\n","sig":null,"attributes":[{"value":"/ Begin building a new `PlotPath` widget instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849651,"byte_end":849703,"line_start":50,"line_end":50,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3755},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":850098,"byte_end":850107,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"thickness","qualname":"<PlotPath<X, Y, F>>::thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The thickness of the point path used to draw the plot.\n","sig":null,"attributes":[{"value":"/ The thickness of the point path used to draw the plot.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":850028,"byte_end":850086,"line_start":63,"line_end":63,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":3775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range_slider","qualname":"::widget::range_slider","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","parent":null,"children":[{"krate":0,"index":3776},{"krate":0,"index":3784},{"krate":0,"index":3785},{"krate":0,"index":3790},{"krate":0,"index":3791},{"krate":0,"index":3792},{"krate":0,"index":8345},{"krate":0,"index":8356},{"krate":0,"index":8362},{"krate":0,"index":8405},{"krate":0,"index":8403},{"krate":0,"index":8401},{"krate":0,"index":8399},{"krate":0,"index":8395},{"krate":0,"index":8396},{"krate":0,"index":8369},{"krate":0,"index":8408},{"krate":0,"index":8406},{"krate":0,"index":3793},{"krate":0,"index":8412},{"krate":0,"index":8426},{"krate":0,"index":8424},{"krate":0,"index":8422},{"krate":0,"index":8418},{"krate":0,"index":8419},{"krate":0,"index":8427},{"krate":0,"index":8439},{"krate":0,"index":8437},{"krate":0,"index":8435},{"krate":0,"index":8432},{"krate":0,"index":8433},{"krate":0,"index":8440},{"krate":0,"index":8444},{"krate":0,"index":3796},{"krate":0,"index":3800},{"krate":0,"index":3806},{"krate":0,"index":3827},{"krate":0,"index":3830},{"krate":0,"index":3833}],"decl_id":null,"docs":" A widget for specifying start and end values for some linear range.\n","sig":null,"attributes":[{"value":"! A widget for specifying start and end values for some linear range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852240,"byte_end":852311,"line_start":1,"line_end":1,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":8345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852552,"byte_end":852563,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"RangeSlider","qualname":"::widget::range_slider::RangeSlider","value":"RangeSlider { skew }","parent":null,"children":[{"krate":0,"index":8355},{"krate":0,"index":8348},{"krate":0,"index":8349},{"krate":0,"index":8350},{"krate":0,"index":8351},{"krate":0,"index":8352},{"krate":0,"index":8353},{"krate":0,"index":8354}],"decl_id":null,"docs":" Linear range selection.\n","sig":null,"attributes":[{"value":"/ Linear range selection.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852488,"byte_end":852515,"line_start":10,"line_end":10,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":8354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853084,"byte_end":853088,"line_start":30,"line_end":30,"column_start":9,"column_end":13},"name":"skew","qualname":"::widget::range_slider::RangeSlider::skew","value":"f32","parent":{"krate":0,"index":8345},"children":[],"decl_id":null,"docs":" The amount in which the slider's display should be skewed.","sig":null,"attributes":[{"value":"/ The amount in which the slider's display should be skewed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852744,"byte_end":852806,"line_start":21,"line_end":21,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852811,"byte_end":852814,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ Higher skew amounts (above 1.0) will weight lower values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852819,"byte_end":852880,"line_start":23,"line_end":23,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852885,"byte_end":852888,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ Lower skew amounts (below 1.0) will weight heigher values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852893,"byte_end":852955,"line_start":25,"line_end":25,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852960,"byte_end":852963,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ All skew amounts should be greater than 0.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":852968,"byte_end":853016,"line_start":27,"line_end":27,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853021,"byte_end":853024,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ By default, this value is `1.0` (no skew).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853029,"byte_end":853075,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":8362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853229,"byte_end":853234,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::range_slider::Style","value":"Style { color, border, border_color, label_color, label_font_size, label_font_id }","parent":null,"children":[{"krate":0,"index":8363},{"krate":0,"index":8364},{"krate":0,"index":8365},{"krate":0,"index":8366},{"krate":0,"index":8367},{"krate":0,"index":8368}],"decl_id":null,"docs":" Graphical styling unique to the RangeSlider widget.\n","sig":null,"attributes":[{"value":"/ Graphical styling unique to the RangeSlider widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853098,"byte_end":853153,"line_start":33,"line_end":33,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":8363},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853335,"byte_end":853340,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::range_slider::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8362},"children":[],"decl_id":null,"docs":" The color of the slidable rectangle.\n","sig":null,"attributes":[{"value":"/ The color of the slidable rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853241,"byte_end":853281,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853286,"byte_end":853326,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8364},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853488,"byte_end":853494,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::range_slider::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":8362},"children":[],"decl_id":null,"docs":" The length of the border around the edges of the slidable rectangle.\n","sig":null,"attributes":[{"value":"/ The length of the border around the edges of the slidable rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853361,"byte_end":853433,"line_start":39,"line_end":39,"column_start":5,"column_end":77}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853438,"byte_end":853479,"line_start":40,"line_end":40,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8365},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853608,"byte_end":853620,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::range_slider::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8362},"children":[],"decl_id":null,"docs":" The color of the Slider's border.\n","sig":null,"attributes":[{"value":"/ The color of the Slider's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853516,"byte_end":853553,"line_start":42,"line_end":42,"column_start":5,"column_end":42}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853558,"byte_end":853599,"line_start":43,"line_end":43,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8366},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853731,"byte_end":853742,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::range_slider::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8362},"children":[],"decl_id":null,"docs":" The color of the Slider's label.\n","sig":null,"attributes":[{"value":"/ The color of the Slider's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853641,"byte_end":853677,"line_start":45,"line_end":45,"column_start":5,"column_end":41}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853682,"byte_end":853722,"line_start":46,"line_end":46,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8367},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853863,"byte_end":853878,"line_start":50,"line_end":50,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::range_slider::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8362},"children":[],"decl_id":null,"docs":" The font-size for the Slider's label.\n","sig":null,"attributes":[{"value":"/ The font-size for the Slider's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853763,"byte_end":853804,"line_start":48,"line_end":48,"column_start":5,"column_end":46}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853809,"byte_end":853854,"line_start":49,"line_end":49,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8368},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854001,"byte_end":854014,"line_start":53,"line_end":53,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::range_slider::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8362},"children":[],"decl_id":null,"docs":" The ID of the font used to display the label.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853902,"byte_end":853951,"line_start":51,"line_end":51,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853956,"byte_end":853992,"line_start":52,"line_end":52,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":8371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853335,"byte_end":853340,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8375},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853488,"byte_end":853494,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8379},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853608,"byte_end":853620,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853731,"byte_end":853742,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8387},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":853863,"byte_end":853878,"line_start":50,"line_end":50,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8391},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854001,"byte_end":854014,"line_start":53,"line_end":53,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3793},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854196,"byte_end":854201,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::range_slider::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3794},{"krate":0,"index":3795}],"decl_id":null,"docs":" Represents the state of the Slider widget.\n","sig":null,"attributes":[{"value":"/ Represents the state of the Slider widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854138,"byte_end":854184,"line_start":64,"line_end":64,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854424,"byte_end":854428,"line_start":74,"line_end":74,"column_start":5,"column_end":9},"name":"Edge","qualname":"::widget::range_slider::Drag::Edge","value":"Drag::Edge(Edge)","parent":{"krate":0,"index":8412},"children":[],"decl_id":null,"docs":" One of the edges is being dragged.\n","sig":null,"attributes":[{"value":"/ One of the edges is being dragged.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854381,"byte_end":854419,"line_start":73,"line_end":73,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8416},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854482,"byte_end":854488,"line_start":76,"line_end":76,"column_start":5,"column_end":11},"name":"Handle","qualname":"::widget::range_slider::Drag::Handle","value":"Drag::Handle","parent":{"krate":0,"index":8412},"children":[],"decl_id":null,"docs":" The whole range is being dragged.\n","sig":null,"attributes":[{"value":"/ The whole range is being dragged.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854440,"byte_end":854477,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":8412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854370,"byte_end":854374,"line_start":72,"line_end":72,"column_start":10,"column_end":14},"name":"Drag","qualname":"::widget::range_slider::Drag","value":"Drag::{Edge, Handle}","parent":null,"children":[{"krate":0,"index":8413},{"krate":0,"index":8416}],"decl_id":null,"docs":" The part of the `RangeSlider` that is in the process of being dragged.\n","sig":null,"attributes":[{"value":"/ The part of the `RangeSlider` that is in the process of being dragged.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854245,"byte_end":854319,"line_start":70,"line_end":70,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854669,"byte_end":854674,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Start","qualname":"::widget::range_slider::Edge::Start","value":"Edge::Start","parent":{"krate":0,"index":8427},"children":[],"decl_id":null,"docs":" The start edge of the scrollbar handle.\n","sig":null,"attributes":[{"value":"/ The start edge of the scrollbar handle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854621,"byte_end":854664,"line_start":82,"line_end":82,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854726,"byte_end":854729,"line_start":85,"line_end":85,"column_start":5,"column_end":8},"name":"End","qualname":"::widget::range_slider::Edge::End","value":"Edge::End","parent":{"krate":0,"index":8427},"children":[],"decl_id":null,"docs":" The end edge of the scrollbar handle.\n","sig":null,"attributes":[{"value":"/ The end edge of the scrollbar handle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854680,"byte_end":854721,"line_start":84,"line_end":84,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":8427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854610,"byte_end":854614,"line_start":81,"line_end":81,"column_start":10,"column_end":14},"name":"Edge","qualname":"::widget::range_slider::Edge","value":"Edge::{Start, End}","parent":null,"children":[{"krate":0,"index":8428},{"krate":0,"index":8430}],"decl_id":null,"docs":" Either the `Start` or `End` `Edge` of the `RangeSlider`'s bar.\n","sig":null,"attributes":[{"value":"/ Either the `Start` or `End` `Edge` of the `RangeSlider`'s bar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854493,"byte_end":854559,"line_start":79,"line_end":79,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":8440},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854890,"byte_end":854895,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"Event","qualname":"::widget::range_slider::Event","value":"Event {  }","parent":null,"children":[{"krate":0,"index":8442},{"krate":0,"index":8443}],"decl_id":null,"docs":" The `Event` type produced by the `RangeSlider`.","sig":null,"attributes":[{"value":"/ The `Event` type produced by the `RangeSlider`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854734,"byte_end":854785,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854786,"byte_end":854789,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This can be used as an `Iterator` that only yields changed `Edge`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854790,"byte_end":854861,"line_start":90,"line_end":90,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855384,"byte_end":855387,"line_start":114,"line_end":114,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeSlider>::new","value":"fn (start: T, end: T, min: T, max: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new RangeSlider widget.\n","sig":null,"attributes":[{"value":"/ Construct a new RangeSlider widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855333,"byte_end":855372,"line_start":113,"line_end":113,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3804},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855775,"byte_end":855788,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<RangeSlider>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855712,"byte_end":855763,"line_start":127,"line_end":127,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3805},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856257,"byte_end":856261,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"skew","qualname":"<RangeSlider>::skew","value":"fn (mut self, skew: f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The amount in which the slider's display should be skewed.","sig":null,"attributes":[{"value":"/ The amount in which the slider's display should be skewed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855914,"byte_end":855976,"line_start":133,"line_end":133,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855981,"byte_end":855984,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Higher skew amounts (above 1.0) will weight lower values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855989,"byte_end":856050,"line_start":135,"line_end":135,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856055,"byte_end":856058,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Lower skew amounts (below 1.0) will weight heigher values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856063,"byte_end":856125,"line_start":137,"line_end":137,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856130,"byte_end":856133,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ All skew amounts should be greater than 0.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856138,"byte_end":856186,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856191,"byte_end":856194,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ By default, this value is `1.0` (no skew).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856199,"byte_end":856245,"line_start":141,"line_end":141,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":3836},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rounded_rectangle","qualname":"::widget::rounded_rectangle","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","parent":null,"children":[{"krate":0,"index":3837},{"krate":0,"index":3849},{"krate":0,"index":3850},{"krate":0,"index":3851},{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":8453},{"krate":0,"index":8466},{"krate":0,"index":8464},{"krate":0,"index":8462},{"krate":0,"index":8458},{"krate":0,"index":8469},{"krate":0,"index":8467},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3857},{"krate":0,"index":3864},{"krate":0,"index":3872},{"krate":0,"index":8471},{"krate":0,"index":8477},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3876},{"krate":0,"index":3879},{"krate":0,"index":3880}],"decl_id":null,"docs":" Similar to the `Rectangle` widget however is drawn with rounded corners.","sig":null,"attributes":[{"value":"! Similar to the `Rectangle` widget however is drawn with rounded corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":867563,"byte_end":867639,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":867640,"byte_end":867643,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The roundedness of the corners is specified with a `radius`. This indicates the radius of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":867644,"byte_end":867741,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"! circle used to draw the corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":867742,"byte_end":867778,"line_start":4,"line_end":4,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":8453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868148,"byte_end":868164,"line_start":17,"line_end":17,"column_start":12,"column_end":28},"name":"RoundedRectangle","qualname":"::widget::rounded_rectangle::RoundedRectangle","value":"RoundedRectangle { common, style, radius, corner_resolution }","parent":null,"children":[{"krate":0,"index":8457},{"krate":0,"index":8454},{"krate":0,"index":8455},{"krate":0,"index":8456}],"decl_id":null,"docs":" Draws a rectangle with corners rounded via the given radius.\n","sig":null,"attributes":[{"value":"/ Draws a rectangle with corners rounded via the given radius.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868027,"byte_end":868091,"line_start":15,"line_end":15,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":8457},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868269,"byte_end":868275,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::rounded_rectangle::RoundedRectangle::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868171,"byte_end":868230,"line_start":18,"line_end":18,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868235,"byte_end":868260,"line_start":19,"line_end":19,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":8454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868361,"byte_end":868366,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::rounded_rectangle::RoundedRectangle::style","value":"widget::primitive::shape::Style","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":" Unique styling for the **RoundedRectangle**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **RoundedRectangle**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868304,"byte_end":868352,"line_start":21,"line_end":21,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":8455},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868460,"byte_end":868466,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"name":"radius","qualname":"::widget::rounded_rectangle::RoundedRectangle::radius","value":"f64","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":" The radius of the circle used to round each corner of the rectangle.\n","sig":null,"attributes":[{"value":"/ The radius of the circle used to round each corner of the rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868379,"byte_end":868451,"line_start":23,"line_end":23,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":8456},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868576,"byte_end":868593,"line_start":26,"line_end":26,"column_start":9,"column_end":26},"name":"corner_resolution","qualname":"::widget::rounded_rectangle::RoundedRectangle::corner_resolution","value":"usize","parent":{"krate":0,"index":8453},"children":[],"decl_id":null,"docs":" The number of points in each corner of the circle used to draw the rounded corners.\n","sig":null,"attributes":[{"value":"/ The number of points in each corner of the circle used to draw the rounded corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868480,"byte_end":868567,"line_start":25,"line_end":25,"column_start":5,"column_end":92}}]},{"kind":"Const","id":{"krate":0,"index":3854},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868734,"byte_end":868759,"line_start":34,"line_end":34,"column_start":11,"column_end":36},"name":"DEFAULT_CORNER_RESOLUTION","qualname":"::widget::rounded_rectangle::DEFAULT_CORNER_RESOLUTION","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The default resolution of the circle used to draw the rounded corners.\n","sig":null,"attributes":[{"value":"/ The default resolution of the circle used to draw the rounded corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868649,"byte_end":868723,"line_start":33,"line_end":33,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":3855},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868830,"byte_end":868835,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::rounded_rectangle::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3856}],"decl_id":null,"docs":" Unique state for the `RoundedRectangle`.\n","sig":null,"attributes":[{"value":"/ Unique state for the `RoundedRectangle`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868774,"byte_end":868818,"line_start":36,"line_end":36,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3858},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868961,"byte_end":868967,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"styled","qualname":"<RoundedRectangle>::styled","value":"fn (dim: Dimensions, radius: Scalar, style: Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a rounded rectangle with the given dimensions and style.\n","sig":null,"attributes":[{"value":"/ Build a rounded rectangle with the given dimensions and style.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868883,"byte_end":868949,"line_start":42,"line_end":42,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3859},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869300,"byte_end":869304,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"fill","qualname":"<RoundedRectangle>::fill","value":"fn (dim: Dimensions, radius: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new filled rounded rectangle.\n","sig":null,"attributes":[{"value":"/ Build a new filled rounded rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869247,"byte_end":869288,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3860},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869508,"byte_end":869517,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"fill_with","qualname":"<RoundedRectangle>::fill_with","value":"fn (dim: Dimensions, radius: Scalar, color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new filled rounded rectangle widget filled with the given color.\n","sig":null,"attributes":[{"value":"/ Build a new filled rounded rectangle widget filled with the given color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869420,"byte_end":869496,"line_start":57,"line_end":57,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3861},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869719,"byte_end":869726,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"outline","qualname":"<RoundedRectangle>::outline","value":"fn (dim: Dimensions, radius: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new outlined rounded rectangle widget.\n","sig":null,"attributes":[{"value":"/ Build a new outlined rounded rectangle widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869657,"byte_end":869707,"line_start":62,"line_end":62,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3862},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869922,"byte_end":869936,"line_start":68,"line_end":68,"column_start":12,"column_end":26},"name":"outline_styled","qualname":"<RoundedRectangle>::outline_styled","value":"fn (dim: Dimensions, radius: Scalar, line_style: widget::line::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build an outlined rounded rectangle rather than a filled one.\n","sig":null,"attributes":[{"value":"/ Build an outlined rounded rectangle rather than a filled one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":869845,"byte_end":869910,"line_start":67,"line_end":67,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3863},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":870204,"byte_end":870221,"line_start":73,"line_end":73,"column_start":12,"column_end":29},"name":"corner_resolution","qualname":"<RoundedRectangle>::corner_resolution","value":"fn (mut self, res: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The number of points in each corner of the circle used to draw the rounded corners.\n","sig":null,"attributes":[{"value":"/ The number of points in each corner of the circle used to draw the rounded corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":870105,"byte_end":870192,"line_start":72,"line_end":72,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":8471},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871503,"byte_end":871509,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"Points","qualname":"::widget::rounded_rectangle::Points","value":"Points {  }","parent":null,"children":[{"krate":0,"index":8472},{"krate":0,"index":8473},{"krate":0,"index":8474},{"krate":0,"index":8475},{"krate":0,"index":8476}],"decl_id":null,"docs":" An iterator yielding the outer points of a `RoundedRectangle`\n","sig":null,"attributes":[{"value":"/ An iterator yielding the outer points of a `RoundedRectangle`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871409,"byte_end":871474,"line_start":120,"line_end":120,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":3875},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871952,"byte_end":871958,"line_start":137,"line_end":137,"column_start":8,"column_end":14},"name":"points","qualname":"::widget::rounded_rectangle::points","value":"fn (rect: Rect, radius: Scalar, corner_resolution: usize) -> Points","parent":null,"children":[],"decl_id":null,"docs":" Produce an iterator yielding the outer points of a rounded rectangle.","sig":null,"attributes":[{"value":"/ Produce an iterator yielding the outer points of a rounded rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871685,"byte_end":871758,"line_start":132,"line_end":132,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871759,"byte_end":871762,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ - `rect` describes the location and dimensions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871763,"byte_end":871813,"line_start":134,"line_end":134,"column_start":1,"column_end":51}},{"value":"/ - `radius` describes the radius of the corner circles.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871814,"byte_end":871872,"line_start":135,"line_end":135,"column_start":1,"column_end":59}},{"value":"/ - `corner_resolution` the number of lines used to draw each corner.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871873,"byte_end":871944,"line_start":136,"line_end":136,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":3879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":873537,"byte_end":873546,"line_start":184,"line_end":184,"column_start":10,"column_end":19},"name":"Triangles","qualname":"::widget::rounded_rectangle::Triangles","value":"widget::polygon::Triangles<Points>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding triangles for a `RoundedRectangle`.\n","sig":null,"attributes":[{"value":"/ An iterator yielding triangles for a `RoundedRectangle`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":873467,"byte_end":873527,"line_start":183,"line_end":183,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":3880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":873672,"byte_end":873686,"line_start":187,"line_end":187,"column_start":8,"column_end":22},"name":"is_over_widget","qualname":"::widget::rounded_rectangle::is_over_widget","value":"fn (widget: &graph::Container, point: Point, _: &Theme) -> widget::IsOver","parent":null,"children":[],"decl_id":null,"docs":" The function to use for picking whether a given point is over the polygon.\n","sig":null,"attributes":[{"value":"/ The function to use for picking whether a given point is over the polygon.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":873586,"byte_end":873664,"line_start":186,"line_end":186,"column_start":1,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":3883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scrollbar","qualname":"::widget::scrollbar","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","parent":null,"children":[{"krate":0,"index":3884},{"krate":0,"index":3889},{"krate":0,"index":3890},{"krate":0,"index":3895},{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3900},{"krate":0,"index":8479},{"krate":0,"index":8485},{"krate":0,"index":3904},{"krate":0,"index":8490},{"krate":0,"index":8518},{"krate":0,"index":8516},{"krate":0,"index":8514},{"krate":0,"index":8512},{"krate":0,"index":8508},{"krate":0,"index":8509},{"krate":0,"index":8494},{"krate":0,"index":8521},{"krate":0,"index":8519},{"krate":0,"index":3912},{"krate":0,"index":3914},{"krate":0,"index":3919},{"krate":0,"index":3921},{"krate":0,"index":3923},{"krate":0,"index":3938},{"krate":0,"index":3946},{"krate":0,"index":3954}],"decl_id":null,"docs":" A widget that allows for manually scrolling via dragging the mouse.\n","sig":null,"attributes":[{"value":"! A widget that allows for manually scrolling via dragging the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":873941,"byte_end":874012,"line_start":1,"line_end":1,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":8479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874298,"byte_end":874307,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"Scrollbar","qualname":"::widget::scrollbar::Scrollbar","value":"Scrollbar {  }","parent":null,"children":[{"krate":0,"index":8484},{"krate":0,"index":8481},{"krate":0,"index":8482},{"krate":0,"index":8483}],"decl_id":null,"docs":" A widget that allows for scrolling via dragging the mouse.\n","sig":null,"attributes":[{"value":"/ A widget that allows for scrolling via dragging the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874199,"byte_end":874261,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Trait","id":{"krate":0,"index":3904},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874522,"byte_end":874526,"line_start":23,"line_end":23,"column_start":11,"column_end":15},"name":"Axis","qualname":"::widget::scrollbar::Axis","value":"Axis: scroll::Axis + Sized","parent":null,"children":[{"krate":0,"index":3905},{"krate":0,"index":3906},{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910}],"decl_id":null,"docs":" The axis that is scrolled by the `Scrollbar`.\n","sig":null,"attributes":[{"value":"/ The axis that is scrolled by the `Scrollbar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874462,"byte_end":874511,"line_start":22,"line_end":22,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3905},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874672,"byte_end":874682,"line_start":26,"line_end":26,"column_start":8,"column_end":18},"name":"track_rect","qualname":"::widget::scrollbar::Axis::track_rect","value":"fn (container: Rect, thickness: Scalar) -> Rect","parent":{"krate":0,"index":3904},"children":[],"decl_id":null,"docs":" The `Rect` for a scroll \"track\" with the given `thickness` for a container with the given\n `Rect`.\n","sig":null,"attributes":[{"value":"/ The `Rect` for a scroll \"track\" with the given `thickness` for a container with the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874555,"byte_end":874648,"line_start":24,"line_end":24,"column_start":5,"column_end":98}},{"value":"/ `Rect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874653,"byte_end":874664,"line_start":25,"line_end":25,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3906},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874795,"byte_end":874806,"line_start":28,"line_end":28,"column_start":8,"column_end":19},"name":"handle_rect","qualname":"::widget::scrollbar::Axis::handle_rect","value":"fn (perpendicular_track_range: Range, handle_range: Range) -> Rect","parent":{"krate":0,"index":3904},"children":[],"decl_id":null,"docs":" The `Rect` for a scroll handle given both `Range`s.\n","sig":null,"attributes":[{"value":"/ The `Rect` for a scroll handle given both `Range`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874732,"byte_end":874787,"line_start":27,"line_end":27,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874967,"byte_end":874979,"line_start":30,"line_end":30,"column_start":8,"column_end":20},"name":"scroll_state","qualname":"::widget::scrollbar::Axis::scroll_state","value":"fn (widget: &graph::Container) -> Option<&scroll::State<Self>>","parent":{"krate":0,"index":3904},"children":[],"decl_id":null,"docs":" Retrieve the related `scroll::State` for the axis from a given widget container.\n","sig":null,"attributes":[{"value":"/ Retrieve the related `scroll::State` for the axis from a given widget container.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874875,"byte_end":874959,"line_start":29,"line_end":29,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3908},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875160,"byte_end":875179,"line_start":33,"line_end":33,"column_start":8,"column_end":27},"name":"default_x_dimension","qualname":"::widget::scrollbar::Axis::default_x_dimension","value":"fn (scrollbar: &Scrollbar<Self>, ui: &Ui) -> Dimension","parent":{"krate":0,"index":3904},"children":[],"decl_id":null,"docs":" Determine a default *x* dimension for the scrollbar in the case that no specific width is\n given.\n","sig":null,"attributes":[{"value":"/ Determine a default *x* dimension for the scrollbar in the case that no specific width is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875044,"byte_end":875137,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875142,"byte_end":875152,"line_start":32,"line_end":32,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":3909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875353,"byte_end":875372,"line_start":36,"line_end":36,"column_start":8,"column_end":27},"name":"default_y_dimension","qualname":"::widget::scrollbar::Axis::default_y_dimension","value":"fn (scrollbar: &Scrollbar<Self>, ui: &Ui) -> Dimension","parent":{"krate":0,"index":3904},"children":[],"decl_id":null,"docs":" Determine a default *y* dimension for the scrollbar in the case that no specific height is\n given.\n","sig":null,"attributes":[{"value":"/ Determine a default *y* dimension for the scrollbar in the case that no specific height is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875236,"byte_end":875330,"line_start":34,"line_end":34,"column_start":5,"column_end":99}},{"value":"/ given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875335,"byte_end":875345,"line_start":35,"line_end":35,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":3910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875501,"byte_end":875506,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"to_2d","qualname":"::widget::scrollbar::Axis::to_2d","value":"fn (scalar: Scalar) -> [Scalar; 2]","parent":{"krate":0,"index":3904},"children":[],"decl_id":null,"docs":" Convert a given `Scalar` along the axis into two dimensions.\n","sig":null,"attributes":[{"value":"/ Convert a given `Scalar` along the axis into two dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875429,"byte_end":875493,"line_start":37,"line_end":37,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":8490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875702,"byte_end":875707,"line_start":43,"line_end":43,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::scrollbar::Style","value":"Style { color, thickness, auto_hide }","parent":null,"children":[{"krate":0,"index":8491},{"krate":0,"index":8492},{"krate":0,"index":8493}],"decl_id":null,"docs":" Styling for the DropDownList, necessary for constructing its renderable Element.\n","sig":null,"attributes":[{"value":"/ Styling for the DropDownList, necessary for constructing its renderable Element.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875542,"byte_end":875626,"line_start":41,"line_end":41,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":8491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875793,"byte_end":875798,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::scrollbar::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8490},"children":[],"decl_id":null,"docs":" Color of the widget.\n","sig":null,"attributes":[{"value":"/ Color of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875714,"byte_end":875738,"line_start":44,"line_end":44,"column_start":5,"column_end":29}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875743,"byte_end":875784,"line_start":45,"line_end":45,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8492},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875924,"byte_end":875933,"line_start":49,"line_end":49,"column_start":9,"column_end":18},"name":"thickness","qualname":"::widget::scrollbar::Style::thickness","value":"std::option::Option<f64>","parent":{"krate":0,"index":8490},"children":[],"decl_id":null,"docs":" The \"thickness\" of the scrollbar's track and handle `Rect`s.\n","sig":null,"attributes":[{"value":"/ The \"thickness\" of the scrollbar's track and handle `Rect`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875819,"byte_end":875883,"line_start":47,"line_end":47,"column_start":5,"column_end":69}},{"value":"conrod(default = \"10.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875888,"byte_end":875915,"line_start":48,"line_end":48,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":8493},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876163,"byte_end":876172,"line_start":55,"line_end":55,"column_start":9,"column_end":18},"name":"auto_hide","qualname":"::widget::scrollbar::Style::auto_hide","value":"std::option::Option<bool>","parent":{"krate":0,"index":8490},"children":[],"decl_id":null,"docs":" When true, the `Scrollbar` will only be visible when:","sig":null,"attributes":[{"value":"/ When true, the `Scrollbar` will only be visible when:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875955,"byte_end":876012,"line_start":50,"line_end":50,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876017,"byte_end":876020,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ - The target scrollable widget is being scrolled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876025,"byte_end":876078,"line_start":52,"line_end":52,"column_start":5,"column_end":58}},{"value":"/ - The mouse is over the scrollbar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876083,"byte_end":876121,"line_start":53,"line_end":53,"column_start":5,"column_end":43}},{"value":"conrod(default = \"false\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876126,"byte_end":876154,"line_start":54,"line_end":54,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":8496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875793,"byte_end":875798,"line_start":46,"line_end":46,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":875924,"byte_end":875933,"line_start":49,"line_end":49,"column_start":9,"column_end":18},"name":"thickness","qualname":"<Style>::thickness","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8504},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876163,"byte_end":876172,"line_start":55,"line_end":55,"column_start":9,"column_end":18},"name":"auto_hide","qualname":"<Style>::auto_hide","value":"fn (&self, theme: &::Theme) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876307,"byte_end":876312,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::scrollbar::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3913}],"decl_id":null,"docs":" The state of the `Scrollbar`.\n","sig":null,"attributes":[{"value":"/ The state of the `Scrollbar`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876262,"byte_end":876295,"line_start":65,"line_end":65,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877018,"byte_end":877027,"line_start":91,"line_end":91,"column_start":12,"column_end":21},"name":"auto_hide","qualname":"<Scrollbar<A>>::auto_hide","value":"fn (mut self, auto_hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" By default, this is set to `false`.","sig":null,"attributes":[{"value":"/ By default, this is set to `false`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876648,"byte_end":876687,"line_start":82,"line_end":82,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876692,"byte_end":876695,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ When false, the `Scrollbar` will always be visible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876700,"byte_end":876755,"line_start":84,"line_end":84,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876760,"byte_end":876763,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ When true, the `Scrollbar` will only be visible when:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876768,"byte_end":876825,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876830,"byte_end":876833,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ - The target scrollable widget is actually scrollable and:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876838,"byte_end":876900,"line_start":88,"line_end":88,"column_start":5,"column_end":67}},{"value":"/ - The target scrollable widget is being scrolled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876905,"byte_end":876958,"line_start":89,"line_end":89,"column_start":5,"column_end":58}},{"value":"/ - The scrollbar is capturing the mouse.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876963,"byte_end":877006,"line_start":90,"line_end":90,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3918},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877347,"byte_end":877356,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"thickness","qualname":"<Scrollbar<A>>::thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the widget with the given `thickness`.","sig":null,"attributes":[{"value":"/ Build the widget with the given `thickness`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877137,"byte_end":877185,"line_start":96,"line_end":96,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877190,"byte_end":877193,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This value sets the width of vertical scrollbars, or the height of horizontal scrollbars.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877198,"byte_end":877291,"line_start":98,"line_end":98,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877296,"byte_end":877299,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ By default, this is `10.0`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877304,"byte_end":877335,"line_start":100,"line_end":100,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3920},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877643,"byte_end":877649,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"x_axis","qualname":"<Scrollbar<X>>::x_axis","value":"fn (widget: widget::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new scrollbar widget that scrolls along the *X* axis along the range of\n the scrollable widget at the given Id.\n","sig":null,"attributes":[{"value":"/ Begin building a new scrollbar widget that scrolls along the *X* axis along the range of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877492,"byte_end":877584,"line_start":110,"line_end":110,"column_start":5,"column_end":97}},{"value":"/ the scrollable widget at the given Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877589,"byte_end":877631,"line_start":111,"line_end":111,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877973,"byte_end":877979,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"y_axis","qualname":"<Scrollbar<Y>>::y_axis","value":"fn (widget: widget::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Begin building a new scrollbar widget that scrolls along the *Y* axis along the range of\n the scrollable widget at the given Id.\n","sig":null,"attributes":[{"value":"/ Begin building a new scrollbar widget that scrolls along the *Y* axis along the range of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877822,"byte_end":877914,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/ the scrollable widget at the given Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877919,"byte_end":877961,"line_start":123,"line_end":123,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":3956},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slider","qualname":"::widget::slider","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","parent":null,"children":[{"krate":0,"index":3957},{"krate":0,"index":3965},{"krate":0,"index":3969},{"krate":0,"index":3974},{"krate":0,"index":3975},{"krate":0,"index":3976},{"krate":0,"index":8525},{"krate":0,"index":8536},{"krate":0,"index":8542},{"krate":0,"index":8585},{"krate":0,"index":8583},{"krate":0,"index":8581},{"krate":0,"index":8579},{"krate":0,"index":8575},{"krate":0,"index":8576},{"krate":0,"index":8549},{"krate":0,"index":8588},{"krate":0,"index":8586},{"krate":0,"index":3977},{"krate":0,"index":3979},{"krate":0,"index":3984},{"krate":0,"index":4005},{"krate":0,"index":4008},{"krate":0,"index":4011}],"decl_id":null,"docs":" A widget for selecting a single value along some linear range.\n","sig":null,"attributes":[{"value":"! A widget for selecting a single value along some linear range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":886972,"byte_end":887038,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":8525},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887617,"byte_end":887623,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Slider","qualname":"::widget::slider::Slider","value":"Slider { skew, enabled }","parent":null,"children":[{"krate":0,"index":8535},{"krate":0,"index":8528},{"krate":0,"index":8529},{"krate":0,"index":8530},{"krate":0,"index":8531},{"krate":0,"index":8532},{"krate":0,"index":8533},{"krate":0,"index":8534}],"decl_id":null,"docs":" Linear value selection.","sig":null,"attributes":[{"value":"/ Linear value selection.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887262,"byte_end":887289,"line_start":11,"line_end":11,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887290,"byte_end":887293,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ If the slider's width is greater than it's height, it will automatically become a horizontal","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887294,"byte_end":887390,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ slider, otherwise it will be a vertical slider.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887391,"byte_end":887442,"line_start":14,"line_end":14,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887443,"byte_end":887446,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Its reaction is triggered if the value is updated or if the mouse button is released while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887447,"byte_end":887541,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/ the cursor is above the rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887542,"byte_end":887580,"line_start":17,"line_end":17,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":8531},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888021,"byte_end":888025,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"skew","qualname":"::widget::slider::Slider::skew","value":"f32","parent":{"krate":0,"index":8525},"children":[],"decl_id":null,"docs":" The amount in which the slider's display should be skewed.","sig":null,"attributes":[{"value":"/ The amount in which the slider's display should be skewed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887740,"byte_end":887802,"line_start":25,"line_end":25,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887807,"byte_end":887810,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ Higher skew amounts (above 1.0) will weight lower values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887815,"byte_end":887876,"line_start":27,"line_end":27,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887881,"byte_end":887884,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ Lower skew amounts (below 1.0) will weight heigher values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887889,"byte_end":887951,"line_start":29,"line_end":29,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887956,"byte_end":887959,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ All skew amounts should be greater than 0.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":887964,"byte_end":888012,"line_start":31,"line_end":31,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":8534},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888153,"byte_end":888160,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"name":"enabled","qualname":"::widget::slider::Slider::enabled","value":"bool","parent":{"krate":0,"index":8525},"children":[],"decl_id":null,"docs":" Whether or not user input is enabled for the Slider.\n","sig":null,"attributes":[{"value":"/ Whether or not user input is enabled for the Slider.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888088,"byte_end":888144,"line_start":35,"line_end":35,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":8542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888297,"byte_end":888302,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::slider::Style","value":"Style { color, border, border_color, label_color, label_font_size, label_font_id }","parent":null,"children":[{"krate":0,"index":8543},{"krate":0,"index":8544},{"krate":0,"index":8545},{"krate":0,"index":8546},{"krate":0,"index":8547},{"krate":0,"index":8548}],"decl_id":null,"docs":" Graphical styling unique to the Slider widget.\n","sig":null,"attributes":[{"value":"/ Graphical styling unique to the Slider widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888171,"byte_end":888221,"line_start":39,"line_end":39,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":8543},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888403,"byte_end":888408,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::slider::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8542},"children":[],"decl_id":null,"docs":" The color of the slidable rectangle.\n","sig":null,"attributes":[{"value":"/ The color of the slidable rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888309,"byte_end":888349,"line_start":42,"line_end":42,"column_start":5,"column_end":45}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888354,"byte_end":888394,"line_start":43,"line_end":43,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8544},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888556,"byte_end":888562,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::slider::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":8542},"children":[],"decl_id":null,"docs":" The length of the border around the edges of the slidable rectangle.\n","sig":null,"attributes":[{"value":"/ The length of the border around the edges of the slidable rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888429,"byte_end":888501,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888506,"byte_end":888547,"line_start":46,"line_end":46,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8545},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888676,"byte_end":888688,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::slider::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8542},"children":[],"decl_id":null,"docs":" The color of the Slider's border.\n","sig":null,"attributes":[{"value":"/ The color of the Slider's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888584,"byte_end":888621,"line_start":48,"line_end":48,"column_start":5,"column_end":42}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888626,"byte_end":888667,"line_start":49,"line_end":49,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8546},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888799,"byte_end":888810,"line_start":53,"line_end":53,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::slider::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8542},"children":[],"decl_id":null,"docs":" The color of the Slider's label.\n","sig":null,"attributes":[{"value":"/ The color of the Slider's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888709,"byte_end":888745,"line_start":51,"line_end":51,"column_start":5,"column_end":41}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888750,"byte_end":888790,"line_start":52,"line_end":52,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8547},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888931,"byte_end":888946,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::slider::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8542},"children":[],"decl_id":null,"docs":" The font-size for the Slider's label.\n","sig":null,"attributes":[{"value":"/ The font-size for the Slider's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888831,"byte_end":888872,"line_start":54,"line_end":54,"column_start":5,"column_end":46}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888877,"byte_end":888922,"line_start":55,"line_end":55,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8548},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889069,"byte_end":889082,"line_start":59,"line_end":59,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::slider::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8542},"children":[],"decl_id":null,"docs":" The ID of the font used to display the label.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888970,"byte_end":889019,"line_start":57,"line_end":57,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889024,"byte_end":889060,"line_start":58,"line_end":58,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":8551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888403,"byte_end":888408,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8555},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888556,"byte_end":888562,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8559},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888676,"byte_end":888688,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8563},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888799,"byte_end":888810,"line_start":53,"line_end":53,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8567},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":888931,"byte_end":888946,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889069,"byte_end":889082,"line_start":59,"line_end":59,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3977},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889251,"byte_end":889256,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::slider::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":3978}],"decl_id":null,"docs":" Represents the state of the Slider widget.\n","sig":null,"attributes":[{"value":"/ Represents the state of the Slider widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889193,"byte_end":889239,"line_start":69,"line_end":69,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889355,"byte_end":889358,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<Slider>::new","value":"fn (value: T, min: T, max: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Slider widget.\n","sig":null,"attributes":[{"value":"/ Construct a new Slider widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889309,"byte_end":889343,"line_start":76,"line_end":76,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":3983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889738,"byte_end":889751,"line_start":91,"line_end":91,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<Slider>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889675,"byte_end":889726,"line_start":90,"line_end":90,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":8591},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889907,"byte_end":889911,"line_start":97,"line_end":97,"column_start":13,"column_end":17},"name":"skew","qualname":"<Slider>::skew","value":"fn (mut self, skew: f32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8592},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889939,"byte_end":889946,"line_start":98,"line_end":98,"column_start":13,"column_end":20},"name":"enabled","qualname":"<Slider>::enabled","value":"fn (mut self, enabled: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":4014},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tabs","qualname":"::widget::tabs","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","parent":null,"children":[{"krate":0,"index":4015},{"krate":0,"index":4023},{"krate":0,"index":4024},{"krate":0,"index":4025},{"krate":0,"index":4026},{"krate":0,"index":8599},{"krate":0,"index":8605},{"krate":0,"index":4027},{"krate":0,"index":8610},{"krate":0,"index":8621},{"krate":0,"index":8619},{"krate":0,"index":8617},{"krate":0,"index":8613},{"krate":0,"index":8614},{"krate":0,"index":4030},{"krate":0,"index":8622},{"krate":0,"index":8665},{"krate":0,"index":8663},{"krate":0,"index":8661},{"krate":0,"index":8659},{"krate":0,"index":8655},{"krate":0,"index":8656},{"krate":0,"index":8629},{"krate":0,"index":8666},{"krate":0,"index":8678},{"krate":0,"index":8676},{"krate":0,"index":8674},{"krate":0,"index":8671},{"krate":0,"index":8672},{"krate":0,"index":4031},{"krate":0,"index":4052},{"krate":0,"index":4079},{"krate":0,"index":4083},{"krate":0,"index":4084},{"krate":0,"index":4086},{"krate":0,"index":4088},{"krate":0,"index":4089},{"krate":0,"index":4093},{"krate":0,"index":4099},{"krate":0,"index":4105}],"decl_id":null,"docs":" A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.\n","sig":null,"attributes":[{"value":"! A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":896634,"byte_end":896725,"line_start":1,"line_end":1,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":8599},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":896994,"byte_end":896998,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"Tabs","qualname":"::widget::tabs::Tabs","value":"Tabs {  }","parent":null,"children":[{"krate":0,"index":8604},{"krate":0,"index":8601},{"krate":0,"index":8602},{"krate":0,"index":8603}],"decl_id":null,"docs":" A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.\n","sig":null,"attributes":[{"value":"/ A wrapper around a list of `Canvas`ses that displays them as a list of selectable tabs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":896866,"byte_end":896957,"line_start":18,"line_end":18,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":4027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":897230,"byte_end":897235,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::tabs::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":4028},{"krate":0,"index":4029}],"decl_id":null,"docs":" The state to be cached within the Canvas.\n","sig":null,"attributes":[{"value":"/ The state to be cached within the Canvas.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":897173,"byte_end":897218,"line_start":28,"line_end":28,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":8610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":897585,"byte_end":897588,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"Tab","qualname":"::widget::tabs::Tab","value":"Tab {  }","parent":null,"children":[{"krate":0,"index":8611},{"krate":0,"index":8612}],"decl_id":null,"docs":" A single **Tab** in the list owned by the **Tabs** **State**.\n","sig":null,"attributes":[{"value":"/ A single **Tab** in the list owned by the **Tabs** **State**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":897467,"byte_end":897532,"line_start":36,"line_end":36,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":8622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":897971,"byte_end":897976,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::tabs::Style","value":"Style { layout, bar_thickness, label_color, label_font_size, font_id, canvas }","parent":null,"children":[{"krate":0,"index":8623},{"krate":0,"index":8624},{"krate":0,"index":8625},{"krate":0,"index":8626},{"krate":0,"index":8627},{"krate":0,"index":8628}],"decl_id":null,"docs":" Unique styling for the `Tabs` widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the `Tabs` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":897854,"byte_end":897895,"line_start":48,"line_end":48,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":8623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898075,"byte_end":898081,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"layout","qualname":"::widget::tabs::Style::layout","value":"std::option::Option<widget::tabs::Layout>","parent":{"krate":0,"index":8622},"children":[],"decl_id":null,"docs":" Layout for the tab selection bar.\n","sig":null,"attributes":[{"value":"/ Layout for the tab selection bar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":897983,"byte_end":898020,"line_start":51,"line_end":51,"column_start":5,"column_end":42}},{"value":"conrod(default = \"Layout::Horizontal\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898025,"byte_end":898066,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898231,"byte_end":898244,"line_start":56,"line_end":56,"column_start":9,"column_end":22},"name":"bar_thickness","qualname":"::widget::tabs::Style::bar_thickness","value":"std::option::Option<std::option::Option<f64>>","parent":{"krate":0,"index":8622},"children":[],"decl_id":null,"docs":" The thickness of the tab selection bar (width for vertical, height for horizontal).\n","sig":null,"attributes":[{"value":"/ The thickness of the tab selection bar (width for vertical, height for horizontal).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898103,"byte_end":898190,"line_start":54,"line_end":54,"column_start":5,"column_end":92}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898195,"byte_end":898222,"line_start":55,"line_end":55,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":8625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898367,"byte_end":898378,"line_start":59,"line_end":59,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::tabs::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8622},"children":[],"decl_id":null,"docs":" Color of the number dialer's label.\n","sig":null,"attributes":[{"value":"/ Color of the number dialer's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898274,"byte_end":898313,"line_start":57,"line_end":57,"column_start":5,"column_end":44}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898318,"byte_end":898358,"line_start":58,"line_end":58,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8626},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898501,"byte_end":898516,"line_start":62,"line_end":62,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::tabs::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8622},"children":[],"decl_id":null,"docs":" Font size of the number dialer's label.\n","sig":null,"attributes":[{"value":"/ Font size of the number dialer's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898399,"byte_end":898442,"line_start":60,"line_end":60,"column_start":5,"column_end":48}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898447,"byte_end":898492,"line_start":61,"line_end":61,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8627},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898628,"byte_end":898635,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"name":"font_id","qualname":"::widget::tabs::Style::font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8622},"children":[],"decl_id":null,"docs":" The `font::Id` of the number dialer's font.\n","sig":null,"attributes":[{"value":"/ The `font::Id` of the number dialer's font.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898540,"byte_end":898587,"line_start":63,"line_end":63,"column_start":5,"column_end":52}},{"value":"conrod(default = \"None\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898592,"byte_end":898619,"line_start":64,"line_end":64,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":8628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898776,"byte_end":898782,"line_start":68,"line_end":68,"column_start":9,"column_end":15},"name":"canvas","qualname":"::widget::tabs::Style::canvas","value":"std::option::Option<widget::canvas::Style>","parent":{"krate":0,"index":8622},"children":[],"decl_id":null,"docs":" The styling for each `Canvas`.\n","sig":null,"attributes":[{"value":"/ The styling for each `Canvas`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898673,"byte_end":898707,"line_start":66,"line_end":66,"column_start":5,"column_end":39}},{"value":"conrod(default = \"widget::canvas::Style::default()\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898712,"byte_end":898767,"line_start":67,"line_end":67,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":8631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898075,"byte_end":898081,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"layout","qualname":"<Style>::layout","value":"fn (&self, theme: &::Theme) -> Layout","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898231,"byte_end":898244,"line_start":56,"line_end":56,"column_start":9,"column_end":22},"name":"bar_thickness","qualname":"<Style>::bar_thickness","value":"fn (&self, theme: &::Theme) -> Option<Scalar>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898367,"byte_end":898378,"line_start":59,"line_end":59,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898501,"byte_end":898516,"line_start":62,"line_end":62,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898628,"byte_end":898635,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"name":"font_id","qualname":"<Style>::font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898776,"byte_end":898782,"line_start":68,"line_end":68,"column_start":9,"column_end":15},"name":"canvas","qualname":"<Style>::canvas","value":"fn (&self, theme: &::Theme) -> widget::canvas::Style","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8667},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898995,"byte_end":899005,"line_start":75,"line_end":75,"column_start":5,"column_end":15},"name":"Horizontal","qualname":"::widget::tabs::Layout::Horizontal","value":"Layout::Horizontal","parent":{"krate":0,"index":8666},"children":[],"decl_id":null,"docs":" Tabs will be laid out horizontally (left to right).\n","sig":null,"attributes":[{"value":"/ Tabs will be laid out horizontally (left to right).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898935,"byte_end":898990,"line_start":74,"line_end":74,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899069,"byte_end":899077,"line_start":77,"line_end":77,"column_start":5,"column_end":13},"name":"Vertical","qualname":"::widget::tabs::Layout::Vertical","value":"Layout::Vertical","parent":{"krate":0,"index":8666},"children":[],"decl_id":null,"docs":" Tabs will be laid out vertically (top to bottom).\n","sig":null,"attributes":[{"value":"/ Tabs will be laid out vertically (top to bottom).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899011,"byte_end":899064,"line_start":76,"line_end":76,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":8666},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898922,"byte_end":898928,"line_start":73,"line_end":73,"column_start":10,"column_end":16},"name":"Layout","qualname":"::widget::tabs::Layout","value":"Layout::{Horizontal, Vertical}","parent":null,"children":[{"krate":0,"index":8667},{"krate":0,"index":8669}],"decl_id":null,"docs":" The direction in which the tabs will be laid out.\n","sig":null,"attributes":[{"value":"/ The direction in which the tabs will be laid out.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":898818,"byte_end":898871,"line_start":71,"line_end":71,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899155,"byte_end":899158,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Tabs>::new","value":"fn (tabs: &'a [(widget::Id, &'a str)]) -> Tabs<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct some new Canvas Tabs.\n","sig":null,"attributes":[{"value":"/ Construct some new Canvas Tabs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899108,"byte_end":899143,"line_start":83,"line_end":83,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":4034},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899481,"byte_end":899496,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"starting_canvas","qualname":"<Tabs>::starting_canvas","value":"fn (mut self, canvas_id: widget::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the initially selected tab with a Canvas via its widget::Id.\n","sig":null,"attributes":[{"value":"/ Set the initially selected tab with a Canvas via its widget::Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899401,"byte_end":899469,"line_start":93,"line_end":93,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899804,"byte_end":899807,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"pad","qualname":"<Tabs>::pad","value":"fn (self, pad: Scalar) -> Tabs<'a>","parent":null,"children":[],"decl_id":null,"docs":" Set the padding for all edges.\n","sig":null,"attributes":[{"value":"/ Set the padding for all edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899758,"byte_end":899792,"line_start":102,"line_end":102,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899968,"byte_end":899987,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"layout_horizontally","qualname":"<Tabs>::layout_horizontally","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Layout the tabs horizontally.\n","sig":null,"attributes":[{"value":"/ Layout the tabs horizontally.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899923,"byte_end":899956,"line_start":107,"line_end":107,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":4039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":900129,"byte_end":900146,"line_start":114,"line_end":114,"column_start":12,"column_end":29},"name":"layout_vertically","qualname":"<Tabs>::layout_vertically","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Layout the tabs vertically.\n","sig":null,"attributes":[{"value":"/ Layout the tabs vertically.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":900086,"byte_end":900117,"line_start":113,"line_end":113,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":900326,"byte_end":900338,"line_start":120,"line_end":120,"column_start":12,"column_end":24},"name":"canvas_style","qualname":"<Tabs>::canvas_style","value":"fn (mut self, style: widget::canvas::Style) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the `Tabs` widget with the given styling for its `Canvas`ses.\n","sig":null,"attributes":[{"value":"/ Build the `Tabs` widget with the given styling for its `Canvas`ses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":900243,"byte_end":900314,"line_start":119,"line_end":119,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":4043},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":900939,"byte_end":900947,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"pad_left","qualname":"<Tabs>::pad_left","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If the `Tabs` has some `widget::canvas::Style`, assign the left padding.\n","sig":null,"attributes":[{"value":"/ If the `Tabs` has some `widget::canvas::Style`, assign the left padding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":900851,"byte_end":900927,"line_start":136,"line_end":136,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":4045},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901157,"byte_end":901166,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"pad_right","qualname":"<Tabs>::pad_right","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If the `Tabs` has some `widget::canvas::Style`, assign the left padding.\n","sig":null,"attributes":[{"value":"/ If the `Tabs` has some `widget::canvas::Style`, assign the left padding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901069,"byte_end":901145,"line_start":141,"line_end":141,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":4047},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901377,"byte_end":901387,"line_start":147,"line_end":147,"column_start":12,"column_end":22},"name":"pad_bottom","qualname":"<Tabs>::pad_bottom","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If the `Tabs` has some `widget::canvas::Style`, assign the left padding.\n","sig":null,"attributes":[{"value":"/ If the `Tabs` has some `widget::canvas::Style`, assign the left padding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901289,"byte_end":901365,"line_start":146,"line_end":146,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":4049},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901599,"byte_end":901606,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"pad_top","qualname":"<Tabs>::pad_top","value":"fn (self, pad: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If the `Tabs` has some `widget::canvas::Style`, assign the left padding.\n","sig":null,"attributes":[{"value":"/ If the `Tabs` has some `widget::canvas::Style`, assign the left padding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901511,"byte_end":901587,"line_start":151,"line_end":151,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":4051},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901823,"byte_end":901836,"line_start":157,"line_end":157,"column_start":12,"column_end":25},"name":"bar_thickness","qualname":"<Tabs>::bar_thickness","value":"fn (mut self, thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The width of a vertical `Tabs` selection bar, or the height of a horizontal one.\n","sig":null,"attributes":[{"value":"/ The width of a vertical `Tabs` selection bar, or the height of a horizontal one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901727,"byte_end":901811,"line_start":156,"line_end":156,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":8679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":901988,"byte_end":902004,"line_start":163,"line_end":163,"column_start":13,"column_end":29},"name":"starting_tab_idx","qualname":"<Tabs>::starting_tab_idx","value":"fn (mut self, starting_tab_idx: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8680},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":902058,"byte_end":902069,"line_start":164,"line_end":164,"column_start":13,"column_end":24},"name":"label_color","qualname":"<Tabs>::label_color","value":"fn (mut self, label_color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8681},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":902118,"byte_end":902133,"line_start":165,"line_end":165,"column_start":13,"column_end":28},"name":"label_font_size","qualname":"<Tabs>::label_font_size","value":"fn (mut self, label_font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":4099},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":910864,"byte_end":910872,"line_start":404,"line_end":404,"column_start":12,"column_end":20},"name":"TabRects","qualname":"::widget::tabs::TabRects","value":"TabRects {  }","parent":null,"children":[{"krate":0,"index":4101},{"krate":0,"index":4102},{"krate":0,"index":4103},{"krate":0,"index":4104}],"decl_id":null,"docs":" An iterator yielding the **Rect** for each Tab in the given list.\n","sig":null,"attributes":[{"value":"/ An iterator yielding the **Rect** for each Tab in the given list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":910783,"byte_end":910852,"line_start":403,"line_end":403,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":911085,"byte_end":911088,"line_start":414,"line_end":414,"column_start":12,"column_end":15},"name":"new","qualname":"<TabRects>::new","value":"fn (tabs: &'a [(widget::Id, &'a str)], layout: Layout, rel_tab_bar_rect: Rect) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new **TabRects** iterator.\n","sig":null,"attributes":[{"value":"/ Construct a new **TabRects** iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":911031,"byte_end":911073,"line_start":413,"line_end":413,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":4108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":911959,"byte_end":911981,"line_start":437,"line_end":437,"column_start":12,"column_end":34},"name":"next_with_id_and_label","qualname":"<TabRects>::next_with_id_and_label","value":"fn (&mut self) -> Option<(Rect, widget::Id, &'a str)>","parent":null,"children":[],"decl_id":null,"docs":" Yield the next **Tab** **Rect**, along with the associated ID and label.\n","sig":null,"attributes":[{"value":"/ Yield the next **Tab** **Rect**, along with the associated ID and label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":911871,"byte_end":911947,"line_start":436,"line_end":436,"column_start":5,"column_end":81}}]},{"kind":"Mod","id":{"krate":0,"index":4110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"text_box","qualname":"::widget::text_box","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","parent":null,"children":[{"krate":0,"index":4111},{"krate":0,"index":4119},{"krate":0,"index":4120},{"krate":0,"index":4121},{"krate":0,"index":4125},{"krate":0,"index":4126},{"krate":0,"index":8682},{"krate":0,"index":8687},{"krate":0,"index":8692},{"krate":0,"index":8745},{"krate":0,"index":8743},{"krate":0,"index":8741},{"krate":0,"index":8739},{"krate":0,"index":8735},{"krate":0,"index":8736},{"krate":0,"index":8701},{"krate":0,"index":8748},{"krate":0,"index":8746},{"krate":0,"index":4127},{"krate":0,"index":4129},{"krate":0,"index":8755},{"krate":0,"index":8763},{"krate":0,"index":8761},{"krate":0,"index":4136},{"krate":0,"index":4144},{"krate":0,"index":4146}],"decl_id":null,"docs":" A widget for displaying and mutating a one-line field of text.\n","sig":null,"attributes":[{"value":"! A widget for displaying and mutating a one-line field of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":912353,"byte_end":912419,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":8682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":912818,"byte_end":912825,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"TextBox","qualname":"::widget::text_box::TextBox","value":"TextBox {  }","parent":null,"children":[{"krate":0,"index":8686},{"krate":0,"index":8684},{"krate":0,"index":8685}],"decl_id":null,"docs":" A widget for displaying and mutating a small, one-line field of text, given by the user in the\n form of a `String`.","sig":null,"attributes":[{"value":"/ A widget for displaying and mutating a small, one-line field of text, given by the user in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":912581,"byte_end":912679,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ form of a `String`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":912680,"byte_end":912703,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":912704,"byte_end":912707,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ It's reaction is triggered upon pressing of the `Enter`/`Return` key.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":912708,"byte_end":912781,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":8692},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913058,"byte_end":913063,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::text_box::Style","value":"Style { text_padding, color, border, border_color, text_color, font_size, justify, font_id }","parent":null,"children":[{"krate":0,"index":8693},{"krate":0,"index":8694},{"krate":0,"index":8695},{"krate":0,"index":8696},{"krate":0,"index":8697},{"krate":0,"index":8698},{"krate":0,"index":8699},{"krate":0,"index":8700}],"decl_id":null,"docs":" Unique graphical styling for the TextBox.\n","sig":null,"attributes":[{"value":"/ Unique graphical styling for the TextBox.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":912937,"byte_end":912982,"line_start":22,"line_end":22,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8693},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913201,"byte_end":913213,"line_start":27,"line_end":27,"column_start":9,"column_end":21},"name":"text_padding","qualname":"::widget::text_box::Style::text_padding","value":"std::option::Option<f64>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" The length of the gap between the bounding rectangle's border and the edge of the text.\n","sig":null,"attributes":[{"value":"/ The length of the gap between the bounding rectangle's border and the edge of the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913070,"byte_end":913161,"line_start":25,"line_end":25,"column_start":5,"column_end":96}},{"value":"conrod(default = \"5.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913166,"byte_end":913192,"line_start":26,"line_end":26,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":8694},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913476,"byte_end":913481,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::text_box::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" Color of the rectangle behind the text.","sig":null,"attributes":[{"value":"/ Color of the rectangle behind the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913235,"byte_end":913278,"line_start":28,"line_end":28,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913283,"byte_end":913286,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ If you don't want to see the rectangle, either set the color with a zeroed alpha or use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913291,"byte_end":913382,"line_start":30,"line_end":30,"column_start":5,"column_end":96}},{"value":"/ the `TextEdit` widget directly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913387,"byte_end":913422,"line_start":31,"line_end":31,"column_start":5,"column_end":40}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913427,"byte_end":913467,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8695},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913614,"byte_end":913620,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::text_box::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" The width of the bounding `BorderedRectangle` border.\n","sig":null,"attributes":[{"value":"/ The width of the bounding `BorderedRectangle` border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913502,"byte_end":913559,"line_start":34,"line_end":34,"column_start":5,"column_end":62}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913564,"byte_end":913605,"line_start":35,"line_end":35,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8696},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913746,"byte_end":913758,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::text_box::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" The color of the `BorderedRecangle`'s border.\n","sig":null,"attributes":[{"value":"/ The color of the `BorderedRecangle`'s border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913642,"byte_end":913691,"line_start":37,"line_end":37,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913696,"byte_end":913737,"line_start":38,"line_end":38,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8697},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913872,"byte_end":913882,"line_start":42,"line_end":42,"column_start":9,"column_end":19},"name":"text_color","qualname":"::widget::text_box::Style::text_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" The color of the `TextEdit` widget.\n","sig":null,"attributes":[{"value":"/ The color of the `TextEdit` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913779,"byte_end":913818,"line_start":40,"line_end":40,"column_start":5,"column_end":44}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913823,"byte_end":913863,"line_start":41,"line_end":41,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8698},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913993,"byte_end":914002,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"name":"font_size","qualname":"::widget::text_box::Style::font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" The font size for the text.\n","sig":null,"attributes":[{"value":"/ The font size for the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913903,"byte_end":913934,"line_start":43,"line_end":43,"column_start":5,"column_end":36}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913939,"byte_end":913984,"line_start":44,"line_end":44,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914124,"byte_end":914131,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"justify","qualname":"::widget::text_box::Style::justify","value":"std::option::Option<text::Justify>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" The typographic alignment of the text.\n","sig":null,"attributes":[{"value":"/ The typographic alignment of the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914026,"byte_end":914068,"line_start":46,"line_end":46,"column_start":5,"column_end":47}},{"value":"conrod(default = \"text::Justify::Left\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914073,"byte_end":914115,"line_start":47,"line_end":47,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":8700},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914243,"byte_end":914250,"line_start":51,"line_end":51,"column_start":9,"column_end":16},"name":"font_id","qualname":"::widget::text_box::Style::font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8692},"children":[],"decl_id":null,"docs":" The font used for the `Text`.\n","sig":null,"attributes":[{"value":"/ The font used for the `Text`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914160,"byte_end":914193,"line_start":49,"line_end":49,"column_start":5,"column_end":38}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914198,"byte_end":914234,"line_start":50,"line_end":50,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":8703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913201,"byte_end":913213,"line_start":27,"line_end":27,"column_start":9,"column_end":21},"name":"text_padding","qualname":"<Style>::text_padding","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8707},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913476,"byte_end":913481,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8711},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913614,"byte_end":913620,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8715},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913746,"byte_end":913758,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8719},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913872,"byte_end":913882,"line_start":42,"line_end":42,"column_start":9,"column_end":19},"name":"text_color","qualname":"<Style>::text_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8723},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":913993,"byte_end":914002,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"name":"font_size","qualname":"<Style>::font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8727},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914124,"byte_end":914131,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"justify","qualname":"<Style>::justify","value":"fn (&self, theme: &::Theme) -> text::Justify","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8731},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914243,"byte_end":914250,"line_start":51,"line_end":51,"column_start":9,"column_end":16},"name":"font_id","qualname":"<Style>::font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4127},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914453,"byte_end":914458,"line_start":62,"line_end":62,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::text_box::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":4128}],"decl_id":null,"docs":" The `State` of the `TextBox` widget that will be cached within the `Ui`.\n","sig":null,"attributes":[{"value":"/ The `State` of the `TextBox` widget that will be cached within the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914365,"byte_end":914441,"line_start":61,"line_end":61,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":4131},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914549,"byte_end":914552,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<TextBox>::new","value":"fn (text: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a TextBox widget.\n","sig":null,"attributes":[{"value":"/ Construct a TextBox widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914506,"byte_end":914537,"line_start":68,"line_end":68,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":4132},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914817,"byte_end":914829,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"left_justify","qualname":"<TextBox>::left_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the left of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the left of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914732,"byte_end":914805,"line_start":77,"line_end":77,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":4133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914986,"byte_end":915000,"line_start":83,"line_end":83,"column_start":12,"column_end":26},"name":"center_justify","qualname":"<TextBox>::center_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the middle of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the middle of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914899,"byte_end":914974,"line_start":82,"line_end":82,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915158,"byte_end":915171,"line_start":88,"line_end":88,"column_start":12,"column_end":25},"name":"right_justify","qualname":"<TextBox>::right_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the right of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the right of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915072,"byte_end":915146,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4135},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915304,"byte_end":915311,"line_start":93,"line_end":93,"column_start":12,"column_end":19},"name":"font_id","qualname":"<TextBox>::font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the text.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915242,"byte_end":915292,"line_start":92,"line_end":92,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":8751},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915461,"byte_end":915471,"line_start":99,"line_end":99,"column_start":13,"column_end":23},"name":"text_color","qualname":"<TextBox>::text_color","value":"fn (mut self, text_color: Color) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8752},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915519,"byte_end":915528,"line_start":100,"line_end":100,"column_start":13,"column_end":22},"name":"font_size","qualname":"<TextBox>::font_size","value":"fn (mut self, font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8753},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915578,"byte_end":915585,"line_start":101,"line_end":101,"column_start":13,"column_end":20},"name":"justify","qualname":"<TextBox>::justify","value":"fn (mut self, justify: text::Justify) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8754},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915638,"byte_end":915646,"line_start":102,"line_end":102,"column_start":13,"column_end":21},"name":"pad_text","qualname":"<TextBox>::pad_text","value":"fn (mut self, pad_text: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915812,"byte_end":915818,"line_start":111,"line_end":111,"column_start":5,"column_end":11},"name":"Update","qualname":"::widget::text_box::Event::Update","value":"Event::Update(String)","parent":{"krate":0,"index":8755},"children":[],"decl_id":null,"docs":" The `String` was updated.\n","sig":null,"attributes":[{"value":"/ The `String` was updated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915778,"byte_end":915807,"line_start":110,"line_end":110,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915881,"byte_end":915886,"line_start":113,"line_end":113,"column_start":5,"column_end":10},"name":"Enter","qualname":"::widget::text_box::Event::Enter","value":"Event::Enter","parent":{"krate":0,"index":8755},"children":[],"decl_id":null,"docs":" The `Return` or `Enter` key was pressed.\n","sig":null,"attributes":[{"value":"/ The `Return` or `Enter` key was pressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915832,"byte_end":915876,"line_start":112,"line_end":112,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":8755},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915766,"byte_end":915771,"line_start":109,"line_end":109,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::text_box::Event","value":"Event::{Update, Enter}","parent":null,"children":[{"krate":0,"index":8756},{"krate":0,"index":8759}],"decl_id":null,"docs":" Events produced by the `TextBox`.\n","sig":null,"attributes":[{"value":"/ Events produced by the `TextBox`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915695,"byte_end":915732,"line_start":107,"line_end":107,"column_start":1,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":4148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"text_edit","qualname":"::widget::text_edit","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","parent":null,"children":[{"krate":0,"index":4149},{"krate":0,"index":4157},{"krate":0,"index":4158},{"krate":0,"index":4159},{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4168},{"krate":0,"index":4169},{"krate":0,"index":4170},{"krate":0,"index":4171},{"krate":0,"index":4172},{"krate":0,"index":8768},{"krate":0,"index":8773},{"krate":0,"index":8778},{"krate":0,"index":8831},{"krate":0,"index":8829},{"krate":0,"index":8827},{"krate":0,"index":8825},{"krate":0,"index":8821},{"krate":0,"index":8822},{"krate":0,"index":8787},{"krate":0,"index":8834},{"krate":0,"index":8832},{"krate":0,"index":4175},{"krate":0,"index":8838},{"krate":0,"index":8850},{"krate":0,"index":8848},{"krate":0,"index":8846},{"krate":0,"index":8843},{"krate":0,"index":8844},{"krate":0,"index":8851},{"krate":0,"index":8865},{"krate":0,"index":8864},{"krate":0,"index":8862},{"krate":0,"index":8858},{"krate":0,"index":8859},{"krate":0,"index":4180},{"krate":0,"index":4193},{"krate":0,"index":4229}],"decl_id":null,"docs":" A widget for displaying and mutating multi-line text, given as a `String`.\n","sig":null,"attributes":[{"value":"! A widget for displaying and mutating multi-line text, given as a `String`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":918832,"byte_end":918910,"line_start":1,"line_end":1,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":8768},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919511,"byte_end":919519,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"TextEdit","qualname":"::widget::text_edit::TextEdit","value":"TextEdit {  }","parent":null,"children":[{"krate":0,"index":8772},{"krate":0,"index":8770},{"krate":0,"index":8771}],"decl_id":null,"docs":" A widget for displaying and mutating multi-line text, given as a `String`.","sig":null,"attributes":[{"value":"/ A widget for displaying and mutating multi-line text, given as a `String`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919210,"byte_end":919288,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919289,"byte_end":919292,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ By default the text is wrapped via the first whitespace before the line exceeds the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919293,"byte_end":919380,"line_start":17,"line_end":17,"column_start":1,"column_end":88}},{"value":"/ `TextEdit`'s width, however a user may change this using the `.wrap_by_character` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919381,"byte_end":919474,"line_start":18,"line_end":18,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":8778},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919753,"byte_end":919758,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::text_edit::Style","value":"Style { color, font_size, justify, y_align, line_spacing, line_wrap, restrict_to_height, font_id }","parent":null,"children":[{"krate":0,"index":8779},{"krate":0,"index":8780},{"krate":0,"index":8781},{"krate":0,"index":8782},{"krate":0,"index":8783},{"krate":0,"index":8784},{"krate":0,"index":8785},{"krate":0,"index":8786}],"decl_id":null,"docs":" Unique graphical styling for the TextEdit.\n","sig":null,"attributes":[{"value":"/ Unique graphical styling for the TextEdit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919631,"byte_end":919677,"line_start":27,"line_end":27,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":8779},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919888,"byte_end":919893,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::text_edit::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" The color of the text (this includes cursor and selection color).\n","sig":null,"attributes":[{"value":"/ The color of the text (this includes cursor and selection color).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919765,"byte_end":919834,"line_start":30,"line_end":30,"column_start":5,"column_end":74}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919839,"byte_end":919879,"line_start":31,"line_end":31,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8780},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920004,"byte_end":920013,"line_start":35,"line_end":35,"column_start":9,"column_end":18},"name":"font_size","qualname":"::widget::text_edit::Style::font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" The font size for the text.\n","sig":null,"attributes":[{"value":"/ The font size for the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919914,"byte_end":919945,"line_start":33,"line_end":33,"column_start":5,"column_end":36}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919950,"byte_end":919995,"line_start":34,"line_end":34,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8781},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920134,"byte_end":920141,"line_start":38,"line_end":38,"column_start":9,"column_end":16},"name":"justify","qualname":"::widget::text_edit::Style::justify","value":"std::option::Option<text::Justify>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" The horizontal alignment of the text.\n","sig":null,"attributes":[{"value":"/ The horizontal alignment of the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920037,"byte_end":920078,"line_start":36,"line_end":36,"column_start":5,"column_end":46}},{"value":"conrod(default = \"text::Justify::Left\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920083,"byte_end":920125,"line_start":37,"line_end":37,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":8782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920256,"byte_end":920263,"line_start":41,"line_end":41,"column_start":9,"column_end":16},"name":"y_align","qualname":"::widget::text_edit::Style::y_align","value":"std::option::Option<position::Align>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" The vertical alignment of the text.\n","sig":null,"attributes":[{"value":"/ The vertical alignment of the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920170,"byte_end":920209,"line_start":39,"line_end":39,"column_start":5,"column_end":44}},{"value":"conrod(default = \"Align::End\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920214,"byte_end":920247,"line_start":40,"line_end":40,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":8783},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920373,"byte_end":920385,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"line_spacing","qualname":"::widget::text_edit::Style::line_spacing","value":"std::option::Option<f64>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" The vertical space between each line of text.\n","sig":null,"attributes":[{"value":"/ The vertical space between each line of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920284,"byte_end":920333,"line_start":42,"line_end":42,"column_start":5,"column_end":54}},{"value":"conrod(default = \"1.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920338,"byte_end":920364,"line_start":43,"line_end":43,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":8784},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920518,"byte_end":920527,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"name":"line_wrap","qualname":"::widget::text_edit::Style::line_wrap","value":"std::option::Option<widget::primitive::text::Wrap>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" The way in which text is wrapped at the end of a line.\n","sig":null,"attributes":[{"value":"/ The way in which text is wrapped at the end of a line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920407,"byte_end":920465,"line_start":45,"line_end":45,"column_start":5,"column_end":63}},{"value":"conrod(default = \"Wrap::Whitespace\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920470,"byte_end":920509,"line_start":46,"line_end":46,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":8785},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920675,"byte_end":920693,"line_start":50,"line_end":50,"column_start":9,"column_end":27},"name":"restrict_to_height","qualname":"::widget::text_edit::Style::restrict_to_height","value":"std::option::Option<bool>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" Do not allow to enter text that would exceed the bounds of the `TextEdit`'s `Rect`.\n","sig":null,"attributes":[{"value":"/ Do not allow to enter text that would exceed the bounds of the `TextEdit`'s `Rect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920547,"byte_end":920634,"line_start":48,"line_end":48,"column_start":5,"column_end":92}},{"value":"conrod(default = \"true\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920639,"byte_end":920666,"line_start":49,"line_end":49,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":8786},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920796,"byte_end":920803,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"name":"font_id","qualname":"::widget::text_edit::Style::font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8778},"children":[],"decl_id":null,"docs":" The font used for the `Text`.\n","sig":null,"attributes":[{"value":"/ The font used for the `Text`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920713,"byte_end":920746,"line_start":51,"line_end":51,"column_start":5,"column_end":38}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920751,"byte_end":920787,"line_start":52,"line_end":52,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":8789},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":919888,"byte_end":919893,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8793},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920004,"byte_end":920013,"line_start":35,"line_end":35,"column_start":9,"column_end":18},"name":"font_size","qualname":"<Style>::font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8797},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920134,"byte_end":920141,"line_start":38,"line_end":38,"column_start":9,"column_end":16},"name":"justify","qualname":"<Style>::justify","value":"fn (&self, theme: &::Theme) -> text::Justify","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8801},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920256,"byte_end":920263,"line_start":41,"line_end":41,"column_start":9,"column_end":16},"name":"y_align","qualname":"<Style>::y_align","value":"fn (&self, theme: &::Theme) -> Align","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8805},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920373,"byte_end":920385,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"line_spacing","qualname":"<Style>::line_spacing","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8809},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920518,"byte_end":920527,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"name":"line_wrap","qualname":"<Style>::line_wrap","value":"fn (&self, theme: &::Theme) -> Wrap","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920675,"byte_end":920693,"line_start":50,"line_end":50,"column_start":9,"column_end":27},"name":"restrict_to_height","qualname":"<Style>::restrict_to_height","value":"fn (&self, theme: &::Theme) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8817},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920796,"byte_end":920803,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"name":"font_id","qualname":"<Style>::font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921024,"byte_end":921029,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::text_edit::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":4176},{"krate":0,"index":4177},{"krate":0,"index":4178},{"krate":0,"index":4179}],"decl_id":null,"docs":" The State of the TextEdit widget that will be cached within the Ui.\n","sig":null,"attributes":[{"value":"/ The State of the TextEdit widget that will be cached within the Ui.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":920941,"byte_end":921012,"line_start":64,"line_end":64,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8839},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921427,"byte_end":921436,"line_start":78,"line_end":78,"column_start":5,"column_end":14},"name":"Selecting","qualname":"::widget::text_edit::Drag::Selecting","value":"Drag::Selecting","parent":{"krate":0,"index":8838},"children":[],"decl_id":null,"docs":" The drag is currently selecting a range of text.\n","sig":null,"attributes":[{"value":"/ The drag is currently selecting a range of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921370,"byte_end":921422,"line_start":77,"line_end":77,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8841},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921539,"byte_end":921552,"line_start":81,"line_end":81,"column_start":5,"column_end":18},"name":"MoveSelection","qualname":"::widget::text_edit::Drag::MoveSelection","value":"Drag::MoveSelection","parent":{"krate":0,"index":8838},"children":[],"decl_id":null,"docs":" The drag is moving a selection of text.\n","sig":null,"attributes":[{"value":"/ The drag is moving a selection of text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921442,"byte_end":921485,"line_start":79,"line_end":79,"column_start":5,"column_end":48}},{"value":"allow(dead_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921490,"byte_end":921509,"line_start":80,"line_end":80,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":8838},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921359,"byte_end":921363,"line_start":76,"line_end":76,"column_start":10,"column_end":14},"name":"Drag","qualname":"::widget::text_edit::Drag","value":"Drag::{Selecting, MoveSelection}","parent":null,"children":[{"krate":0,"index":8839},{"krate":0,"index":8841}],"decl_id":null,"docs":" Track whether some sort of dragging is currently occurring.\n","sig":null,"attributes":[{"value":"/ Track whether some sort of dragging is currently occurring.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921245,"byte_end":921308,"line_start":74,"line_end":74,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8852},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921720,"byte_end":921723,"line_start":88,"line_end":88,"column_start":5,"column_end":8},"name":"Idx","qualname":"::widget::text_edit::Cursor::Idx","value":"Cursor::Idx(text::cursor::Index)","parent":{"krate":0,"index":8851},"children":[],"decl_id":null,"docs":" The cursor is at the given character index.\n","sig":null,"attributes":[{"value":"/ The cursor is at the given character index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921668,"byte_end":921715,"line_start":87,"line_end":87,"column_start":5,"column_end":52}}]},{"kind":"StructVariant","id":{"krate":0,"index":8855},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921811,"byte_end":921820,"line_start":90,"line_end":90,"column_start":5,"column_end":14},"name":"Selection","qualname":"::widget::text_edit::Cursor::Selection","value":"Cursor::Selection { start, end }","parent":{"krate":0,"index":8851},"children":[],"decl_id":null,"docs":" The cursor is a selection between these two indices.\n","sig":null,"attributes":[{"value":"/ The cursor is a selection between these two indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921750,"byte_end":921806,"line_start":89,"line_end":89,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":8851},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921655,"byte_end":921661,"line_start":86,"line_end":86,"column_start":10,"column_end":16},"name":"Cursor","qualname":"::widget::text_edit::Cursor","value":"Cursor::{Idx, Selection}","parent":null,"children":[{"krate":0,"index":8852},{"krate":0,"index":8855}],"decl_id":null,"docs":" The position of the `Cursor` over the text.\n","sig":null,"attributes":[{"value":"/ The position of the `Cursor` over the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":921557,"byte_end":921604,"line_start":84,"line_end":84,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":4182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922276,"byte_end":922279,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<TextEdit>::new","value":"fn (text: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a TextEdit widget.\n","sig":null,"attributes":[{"value":"/ Construct a TextEdit widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922232,"byte_end":922264,"line_start":104,"line_end":104,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4183},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922628,"byte_end":922646,"line_start":117,"line_end":117,"column_start":12,"column_end":30},"name":"wrap_by_whitespace","qualname":"<TextEdit>::wrap_by_whitespace","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding\n character.","sig":null,"attributes":[{"value":"/ The `TextEdit` will wrap text via the whitespace that precedes the first width-exceeding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922460,"byte_end":922552,"line_start":113,"line_end":113,"column_start":5,"column_end":97}},{"value":"/ character.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922557,"byte_end":922571,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922576,"byte_end":922579,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This is the default setting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922584,"byte_end":922616,"line_start":116,"line_end":116,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4184},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922955,"byte_end":922972,"line_start":125,"line_end":125,"column_start":12,"column_end":29},"name":"wrap_by_character","qualname":"<TextEdit>::wrap_by_character","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" By default, the `TextEdit` will wrap text via the whitespace that precedes the first\n width-exceeding character.","sig":null,"attributes":[{"value":"/ By default, the `TextEdit` will wrap text via the whitespace that precedes the first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922715,"byte_end":922803,"line_start":121,"line_end":121,"column_start":5,"column_end":93}},{"value":"/ width-exceeding character.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922808,"byte_end":922838,"line_start":122,"line_end":122,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922843,"byte_end":922846,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Calling this method causes the `TextEdit` to wrap text at the first exceeding character.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922851,"byte_end":922943,"line_start":124,"line_end":124,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":4185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923125,"byte_end":923137,"line_start":130,"line_end":130,"column_start":12,"column_end":24},"name":"left_justify","qualname":"<TextEdit>::left_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the left of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the left of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923040,"byte_end":923113,"line_start":129,"line_end":129,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":4186},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923294,"byte_end":923308,"line_start":135,"line_end":135,"column_start":12,"column_end":26},"name":"center_justify","qualname":"<TextEdit>::center_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the middle of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the middle of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923207,"byte_end":923282,"line_start":134,"line_end":134,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4187},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923466,"byte_end":923479,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"right_justify","qualname":"<TextEdit>::right_justify","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the right of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the right of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923380,"byte_end":923454,"line_start":139,"line_end":139,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923635,"byte_end":923652,"line_start":145,"line_end":145,"column_start":12,"column_end":29},"name":"align_text_bottom","qualname":"<TextEdit>::align_text_bottom","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the left of its bounding **Rect**'s *y* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the left of its bounding **Rect**'s *y* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923550,"byte_end":923623,"line_start":144,"line_end":144,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":4189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923807,"byte_end":923826,"line_start":150,"line_end":150,"column_start":12,"column_end":31},"name":"align_text_y_middle","qualname":"<TextEdit>::align_text_y_middle","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the middle of its bounding **Rect**'s *y* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the middle of its bounding **Rect**'s *y* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923720,"byte_end":923795,"line_start":149,"line_end":149,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923981,"byte_end":923995,"line_start":155,"line_end":155,"column_start":12,"column_end":26},"name":"align_text_top","qualname":"<TextEdit>::align_text_top","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the right of its bounding **Rect**'s *y* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the right of its bounding **Rect**'s *y* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":923895,"byte_end":923969,"line_start":154,"line_end":154,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924131,"byte_end":924148,"line_start":160,"line_end":160,"column_start":12,"column_end":29},"name":"align_text_middle","qualname":"<TextEdit>::align_text_middle","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the middle of its bounding **Rect**.\n","sig":null,"attributes":[{"value":"/ Align the text to the middle of its bounding **Rect**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924061,"byte_end":924119,"line_start":159,"line_end":159,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":4192},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924290,"byte_end":924297,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"font_id","qualname":"<TextEdit>::font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the text.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924228,"byte_end":924278,"line_start":164,"line_end":164,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":8867},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924447,"byte_end":924456,"line_start":171,"line_end":171,"column_start":13,"column_end":22},"name":"font_size","qualname":"<TextEdit>::font_size","value":"fn (mut self, font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8868},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924506,"byte_end":924513,"line_start":172,"line_end":172,"column_start":13,"column_end":20},"name":"justify","qualname":"<TextEdit>::justify","value":"fn (mut self, justify: text::Justify) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8869},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924566,"byte_end":924578,"line_start":173,"line_end":173,"column_start":13,"column_end":25},"name":"y_align_text","qualname":"<TextEdit>::y_align_text","value":"fn (mut self, y_align_text: Align) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924623,"byte_end":924632,"line_start":174,"line_end":174,"column_start":13,"column_end":22},"name":"line_wrap","qualname":"<TextEdit>::line_wrap","value":"fn (mut self, line_wrap: Wrap) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8871},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924678,"byte_end":924690,"line_start":175,"line_end":175,"column_start":13,"column_end":25},"name":"line_spacing","qualname":"<TextEdit>::line_spacing","value":"fn (mut self, line_spacing: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":8872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924741,"byte_end":924759,"line_start":176,"line_end":176,"column_start":13,"column_end":31},"name":"restrict_to_height","qualname":"<TextEdit>::restrict_to_height","value":"fn (mut self, restrict_to_height: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":4231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"title_bar","qualname":"::widget::title_bar","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","parent":null,"children":[{"krate":0,"index":4232},{"krate":0,"index":4241},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":8874},{"krate":0,"index":8884},{"krate":0,"index":8879},{"krate":0,"index":4250},{"krate":0,"index":8889},{"krate":0,"index":8887},{"krate":0,"index":8892},{"krate":0,"index":8960},{"krate":0,"index":8958},{"krate":0,"index":8956},{"krate":0,"index":8954},{"krate":0,"index":8950},{"krate":0,"index":8951},{"krate":0,"index":8904},{"krate":0,"index":4252},{"krate":0,"index":4253},{"krate":0,"index":4262},{"krate":0,"index":4263},{"krate":0,"index":4273},{"krate":0,"index":4275},{"krate":0,"index":4277}],"decl_id":null,"docs":" A simple title bar widget that automatically sizes itself to the top of some other widget.\n","sig":null,"attributes":[{"value":"! A simple title bar widget that automatically sizes itself to the top of some other widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965327,"byte_end":965421,"line_start":1,"line_end":1,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":8874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965734,"byte_end":965742,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"TitleBar","qualname":"::widget::title_bar::TitleBar","value":"TitleBar { common, style, label }","parent":null,"children":[{"krate":0,"index":8878},{"krate":0,"index":8876},{"krate":0,"index":8877}],"decl_id":null,"docs":" A simple title bar widget that automatically sizes itself to the top of some other widget.\n","sig":null,"attributes":[{"value":"/ A simple title bar widget that automatically sizes itself to the top of some other widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965596,"byte_end":965690,"line_start":9,"line_end":9,"column_start":1,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":8878},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965851,"byte_end":965857,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"name":"common","qualname":"::widget::title_bar::TitleBar::common","value":"widget::CommonBuilder","parent":{"krate":0,"index":8874},"children":[],"decl_id":null,"docs":" Data necessary and common for all widget builder types.\n","sig":null,"attributes":[{"value":"/ Data necessary and common for all widget builder types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965753,"byte_end":965812,"line_start":12,"line_end":12,"column_start":5,"column_end":64}},{"value":"conrod(common_builder)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965817,"byte_end":965842,"line_start":13,"line_end":13,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":8876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965944,"byte_end":965949,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::title_bar::TitleBar::style","value":"widget::title_bar::Style","parent":{"krate":0,"index":8874},"children":[],"decl_id":null,"docs":" Unique styling for the **BorderedRectangle**.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **BorderedRectangle**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965886,"byte_end":965935,"line_start":15,"line_end":15,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":8877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966023,"byte_end":966028,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"label","qualname":"::widget::title_bar::TitleBar::label","value":"&'a str","parent":{"krate":0,"index":8874},"children":[],"decl_id":null,"docs":" A label displayed in the middle of the TitleBar.\n","sig":null,"attributes":[{"value":"/ A label displayed in the middle of the TitleBar.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":965962,"byte_end":966014,"line_start":17,"line_end":17,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":4250},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966099,"byte_end":966104,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::title_bar::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":4251}],"decl_id":null,"docs":" Unique state for the **TitleBar** widget.\n","sig":null,"attributes":[{"value":"/ Unique state for the **TitleBar** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966042,"byte_end":966087,"line_start":21,"line_end":21,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":8892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966321,"byte_end":966326,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::title_bar::Style","value":"Style { color, border, border_color, text_color, font_size, maybe_wrap, line_spacing, justify, label_x, label_y, font_id }","parent":null,"children":[{"krate":0,"index":8893},{"krate":0,"index":8894},{"krate":0,"index":8895},{"krate":0,"index":8896},{"krate":0,"index":8897},{"krate":0,"index":8898},{"krate":0,"index":8899},{"krate":0,"index":8900},{"krate":0,"index":8901},{"krate":0,"index":8902},{"krate":0,"index":8903}],"decl_id":null,"docs":" Unique styling for the **TitleBar** widget.\n","sig":null,"attributes":[{"value":"/ Unique styling for the **TitleBar** widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966198,"byte_end":966245,"line_start":33,"line_end":33,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":8893},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966442,"byte_end":966447,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::title_bar::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The color of the TitleBar's rectangle surface.\n","sig":null,"attributes":[{"value":"/ The color of the TitleBar's rectangle surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966333,"byte_end":966383,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"conrod(default = \"theme.background_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966388,"byte_end":966433,"line_start":37,"line_end":37,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8894},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966588,"byte_end":966594,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::title_bar::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The width of the border surrounding the TitleBar's rectangle.\n","sig":null,"attributes":[{"value":"/ The width of the border surrounding the TitleBar's rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966468,"byte_end":966533,"line_start":39,"line_end":39,"column_start":5,"column_end":70}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966538,"byte_end":966579,"line_start":40,"line_end":40,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966710,"byte_end":966722,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::title_bar::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The color of the TitleBar's border.\n","sig":null,"attributes":[{"value":"/ The color of the TitleBar's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966616,"byte_end":966655,"line_start":42,"line_end":42,"column_start":5,"column_end":44}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966660,"byte_end":966701,"line_start":43,"line_end":43,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966835,"byte_end":966845,"line_start":47,"line_end":47,"column_start":9,"column_end":19},"name":"text_color","qualname":"::widget::title_bar::Style::text_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The color of the title bar's text.\n","sig":null,"attributes":[{"value":"/ The color of the title bar's text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966743,"byte_end":966781,"line_start":45,"line_end":45,"column_start":5,"column_end":43}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966786,"byte_end":966826,"line_start":46,"line_end":46,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8897},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966968,"byte_end":966977,"line_start":50,"line_end":50,"column_start":9,"column_end":18},"name":"font_size","qualname":"::widget::title_bar::Style::font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The font size for the title bar's text.\n","sig":null,"attributes":[{"value":"/ The font size for the title bar's text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966866,"byte_end":966909,"line_start":48,"line_end":48,"column_start":5,"column_end":48}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966914,"byte_end":966959,"line_start":49,"line_end":49,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967128,"byte_end":967138,"line_start":53,"line_end":53,"column_start":9,"column_end":19},"name":"maybe_wrap","qualname":"::widget::title_bar::Style::maybe_wrap","value":"std::option::Option<std::option::Option<widget::primitive::text::Wrap>>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The way in which the title bar's text should wrap.\n","sig":null,"attributes":[{"value":"/ The way in which the title bar's text should wrap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967001,"byte_end":967055,"line_start":51,"line_end":51,"column_start":5,"column_end":59}},{"value":"conrod(default = \"Some(widget::text::Wrap::Whitespace)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967060,"byte_end":967119,"line_start":52,"line_end":52,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":8899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967281,"byte_end":967293,"line_start":56,"line_end":56,"column_start":9,"column_end":21},"name":"line_spacing","qualname":"::widget::title_bar::Style::line_spacing","value":"std::option::Option<f64>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The distance between lines for multi-line title bar text.\n","sig":null,"attributes":[{"value":"/ The distance between lines for multi-line title bar text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967180,"byte_end":967241,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"conrod(default = \"1.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967246,"byte_end":967272,"line_start":55,"line_end":55,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":8900},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967424,"byte_end":967431,"line_start":59,"line_end":59,"column_start":9,"column_end":16},"name":"justify","qualname":"::widget::title_bar::Style::justify","value":"std::option::Option<text::Justify>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The horizontal alignment of the title bar text.\n","sig":null,"attributes":[{"value":"/ The horizontal alignment of the title bar text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967315,"byte_end":967366,"line_start":57,"line_end":57,"column_start":5,"column_end":56}},{"value":"conrod(default = \"text::Justify::Center\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967371,"byte_end":967415,"line_start":58,"line_end":58,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":8901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967606,"byte_end":967613,"line_start":62,"line_end":62,"column_start":9,"column_end":16},"name":"label_x","qualname":"::widget::title_bar::Style::label_x","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The position of the title bar's `Label` widget over the *x* axis.\n","sig":null,"attributes":[{"value":"/ The position of the title bar's `Label` widget over the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967460,"byte_end":967529,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967534,"byte_end":967597,"line_start":61,"line_end":61,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8902},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967793,"byte_end":967800,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"name":"label_y","qualname":"::widget::title_bar::Style::label_y","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The position of the title bar's `Label` widget over the *y* axis.\n","sig":null,"attributes":[{"value":"/ The position of the title bar's `Label` widget over the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967647,"byte_end":967716,"line_start":63,"line_end":63,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967721,"byte_end":967784,"line_start":64,"line_end":64,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8903},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967917,"byte_end":967924,"line_start":68,"line_end":68,"column_start":9,"column_end":16},"name":"font_id","qualname":"::widget::title_bar::Style::font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8892},"children":[],"decl_id":null,"docs":" The font used for the `Text`.\n","sig":null,"attributes":[{"value":"/ The font used for the `Text`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967834,"byte_end":967867,"line_start":66,"line_end":66,"column_start":5,"column_end":38}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967872,"byte_end":967908,"line_start":67,"line_end":67,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":8906},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966442,"byte_end":966447,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966588,"byte_end":966594,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8914},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966710,"byte_end":966722,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8918},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966835,"byte_end":966845,"line_start":47,"line_end":47,"column_start":9,"column_end":19},"name":"text_color","qualname":"<Style>::text_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":966968,"byte_end":966977,"line_start":50,"line_end":50,"column_start":9,"column_end":18},"name":"font_size","qualname":"<Style>::font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967128,"byte_end":967138,"line_start":53,"line_end":53,"column_start":9,"column_end":19},"name":"maybe_wrap","qualname":"<Style>::maybe_wrap","value":"fn (&self, theme: &::Theme) -> Option<widget::text::Wrap>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8930},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967281,"byte_end":967293,"line_start":56,"line_end":56,"column_start":9,"column_end":21},"name":"line_spacing","qualname":"<Style>::line_spacing","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8934},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967424,"byte_end":967431,"line_start":59,"line_end":59,"column_start":9,"column_end":16},"name":"justify","qualname":"<Style>::justify","value":"fn (&self, theme: &::Theme) -> text::Justify","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8938},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967606,"byte_end":967613,"line_start":62,"line_end":62,"column_start":9,"column_end":16},"name":"label_x","qualname":"<Style>::label_x","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967793,"byte_end":967800,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"name":"label_y","qualname":"<Style>::label_y","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8946},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":967917,"byte_end":967924,"line_start":68,"line_end":68,"column_start":9,"column_end":16},"name":"font_id","qualname":"<Style>::font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968256,"byte_end":968259,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<TitleBar>::new","value":"fn (label: &'a str, id: widget::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new TitleBar widget and attach it to the widget at the given index.\n","sig":null,"attributes":[{"value":"/ Construct a new TitleBar widget and attach it to the widget at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968161,"byte_end":968244,"line_start":79,"line_end":79,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":4256},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968568,"byte_end":968586,"line_start":89,"line_end":89,"column_start":12,"column_end":30},"name":"left_justify_label","qualname":"<TitleBar>::left_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the left of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the left of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968483,"byte_end":968556,"line_start":88,"line_end":88,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":4257},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968774,"byte_end":968794,"line_start":95,"line_end":95,"column_start":12,"column_end":32},"name":"center_justify_label","qualname":"<TitleBar>::center_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the middle of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the middle of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968687,"byte_end":968762,"line_start":94,"line_end":94,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4258},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968983,"byte_end":969002,"line_start":101,"line_end":101,"column_start":12,"column_end":31},"name":"right_justify_label","qualname":"<TitleBar>::right_justify_label","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Align the text to the right of its bounding **Rect**'s *x* axis range.\n","sig":null,"attributes":[{"value":"/ Align the text to the right of its bounding **Rect**'s *x* axis range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968897,"byte_end":968971,"line_start":100,"line_end":100,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":4259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969191,"byte_end":969198,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"label_x","qualname":"<TitleBar>::label_x","value":"fn (mut self, x: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Button` along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Button` along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969104,"byte_end":969179,"line_start":106,"line_end":106,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969391,"byte_end":969398,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"label_y","qualname":"<TitleBar>::label_y","value":"fn (mut self, y: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Button` along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Button` along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969304,"byte_end":969379,"line_start":112,"line_end":112,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969566,"byte_end":969573,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"font_id","qualname":"<TitleBar>::font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the text.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969504,"byte_end":969554,"line_start":118,"line_end":118,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":8961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969723,"byte_end":969735,"line_start":125,"line_end":125,"column_start":13,"column_end":25},"name":"line_spacing","qualname":"<TitleBar>::line_spacing","value":"fn (mut self, line_spacing: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":4262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969854,"byte_end":969865,"line_start":132,"line_end":132,"column_start":8,"column_end":19},"name":"calc_height","qualname":"::widget::title_bar::calc_height","value":"fn (font_size: FontSize) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Calculate the default height for the **TitleBar**'s rect.\n","sig":null,"attributes":[{"value":"/ Calculate the default height for the **TitleBar**'s rect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969785,"byte_end":969846,"line_start":131,"line_end":131,"column_start":1,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":4279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"toggle","qualname":"::widget::toggle","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","parent":null,"children":[{"krate":0,"index":4280},{"krate":0,"index":4289},{"krate":0,"index":4292},{"krate":0,"index":4293},{"krate":0,"index":8968},{"krate":0,"index":8980},{"krate":0,"index":8975},{"krate":0,"index":8983},{"krate":0,"index":9036},{"krate":0,"index":9034},{"krate":0,"index":9032},{"krate":0,"index":9030},{"krate":0,"index":9026},{"krate":0,"index":9027},{"krate":0,"index":8992},{"krate":0,"index":9039},{"krate":0,"index":9037},{"krate":0,"index":4294},{"krate":0,"index":9042},{"krate":0,"index":9047},{"krate":0,"index":9045},{"krate":0,"index":4296},{"krate":0,"index":4299},{"krate":0,"index":4305},{"krate":0,"index":4313},{"krate":0,"index":4315},{"krate":0,"index":4317}],"decl_id":null,"docs":" A button that allows for toggling boolean state.\n","sig":null,"attributes":[{"value":"! A button that allows for toggling boolean state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":972664,"byte_end":972716,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":8968},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973192,"byte_end":973198,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"Toggle","qualname":"::widget::toggle::Toggle","value":"Toggle { enabled }","parent":null,"children":[{"krate":0,"index":8974},{"krate":0,"index":8970},{"krate":0,"index":8971},{"krate":0,"index":8972},{"krate":0,"index":8973}],"decl_id":null,"docs":" A pressable widget for toggling the state of a bool.","sig":null,"attributes":[{"value":"/ A pressable widget for toggling the state of a bool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":972858,"byte_end":972914,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":972915,"byte_end":972918,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the Button widget, it's reaction is triggered upon release and will return the new bool","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":972919,"byte_end":973015,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973016,"byte_end":973026,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973027,"byte_end":973030,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Note that the Toggle will not mutate the bool for you, you should do this yourself within the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973031,"byte_end":973128,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ react function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973129,"byte_end":973148,"line_start":15,"line_end":15,"column_start":1,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":8973},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973425,"byte_end":973432,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"enabled","qualname":"::widget::toggle::Toggle::enabled","value":"bool","parent":{"krate":0,"index":8968},"children":[],"decl_id":null,"docs":" If true, will allow user inputs. If false, will disallow user inputs.\n","sig":null,"attributes":[{"value":"/ If true, will allow user inputs. If false, will disallow user inputs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973343,"byte_end":973416,"line_start":23,"line_end":23,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":8983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973590,"byte_end":973595,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::toggle::Style","value":"Style { color, border, border_color, label_color, label_font_size, label_font_id, label_x, label_y }","parent":null,"children":[{"krate":0,"index":8984},{"krate":0,"index":8985},{"krate":0,"index":8986},{"krate":0,"index":8987},{"krate":0,"index":8988},{"krate":0,"index":8989},{"krate":0,"index":8990},{"krate":0,"index":8991}],"decl_id":null,"docs":" Styling for the Toggle including coloring, bordering and labelling.\n","sig":null,"attributes":[{"value":"/ Styling for the Toggle including coloring, bordering and labelling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973443,"byte_end":973514,"line_start":27,"line_end":27,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":8984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973697,"byte_end":973702,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::toggle::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" Color of the Toggle's pressable area.\n","sig":null,"attributes":[{"value":"/ Color of the Toggle's pressable area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973602,"byte_end":973643,"line_start":30,"line_end":30,"column_start":5,"column_end":46}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973648,"byte_end":973688,"line_start":31,"line_end":31,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973841,"byte_end":973847,"line_start":35,"line_end":35,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::toggle::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" The width of the rectangular border surrounding the Toggle.\n","sig":null,"attributes":[{"value":"/ The width of the rectangular border surrounding the Toggle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973723,"byte_end":973786,"line_start":33,"line_end":33,"column_start":5,"column_end":68}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973791,"byte_end":973832,"line_start":34,"line_end":34,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8986},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973961,"byte_end":973973,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::toggle::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" The color of the Toggle's border.\n","sig":null,"attributes":[{"value":"/ The color of the Toggle's border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973869,"byte_end":973906,"line_start":36,"line_end":36,"column_start":5,"column_end":42}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973911,"byte_end":973952,"line_start":37,"line_end":37,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":8987},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974089,"byte_end":974100,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::toggle::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" The color of the Toggle's Text label.\n","sig":null,"attributes":[{"value":"/ The color of the Toggle's Text label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973994,"byte_end":974035,"line_start":39,"line_end":39,"column_start":5,"column_end":46}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974040,"byte_end":974080,"line_start":40,"line_end":40,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":8988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974226,"byte_end":974241,"line_start":44,"line_end":44,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::toggle::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" The font size for the Toggle's Text label.\n","sig":null,"attributes":[{"value":"/ The font size for the Toggle's Text label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974121,"byte_end":974167,"line_start":42,"line_end":42,"column_start":5,"column_end":51}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974172,"byte_end":974217,"line_start":43,"line_end":43,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8989},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974364,"byte_end":974377,"line_start":47,"line_end":47,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::toggle::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" The ID of the font used to display the label.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974265,"byte_end":974314,"line_start":45,"line_end":45,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974319,"byte_end":974355,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":8990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974561,"byte_end":974568,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"name":"label_x","qualname":"::widget::toggle::Style::label_x","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" The position of the title bar's `Label` widget over the *x* axis.\n","sig":null,"attributes":[{"value":"/ The position of the title bar's `Label` widget over the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974415,"byte_end":974484,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974489,"byte_end":974552,"line_start":49,"line_end":49,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974748,"byte_end":974755,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"name":"label_y","qualname":"::widget::toggle::Style::label_y","value":"std::option::Option<position::Relative>","parent":{"krate":0,"index":8983},"children":[],"decl_id":null,"docs":" The position of the title bar's `Label` widget over the *y* axis.\n","sig":null,"attributes":[{"value":"/ The position of the title bar's `Label` widget over the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974602,"byte_end":974671,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"conrod(default = \"position::Relative::Align(Align::Middle)\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974676,"byte_end":974739,"line_start":52,"line_end":52,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":8994},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973697,"byte_end":973702,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":8998},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973841,"byte_end":973847,"line_start":35,"line_end":35,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":973961,"byte_end":973973,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974089,"byte_end":974100,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9010},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974226,"byte_end":974241,"line_start":44,"line_end":44,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9014},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974364,"byte_end":974377,"line_start":47,"line_end":47,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9018},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974561,"byte_end":974568,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"name":"label_x","qualname":"<Style>::label_x","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974748,"byte_end":974755,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"name":"label_y","qualname":"<Style>::label_y","value":"fn (&self, theme: &::Theme) -> position::Relative","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974902,"byte_end":974907,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::toggle::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":4295}],"decl_id":null,"docs":" The state of the Toggle.\n","sig":null,"attributes":[{"value":"/ The state of the Toggle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974862,"byte_end":974890,"line_start":63,"line_end":63,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":9042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975220,"byte_end":975232,"line_start":74,"line_end":74,"column_start":12,"column_end":24},"name":"TimesClicked","qualname":"::widget::toggle::TimesClicked","value":"TimesClicked {  }","parent":null,"children":[{"krate":0,"index":9043},{"krate":0,"index":9044}],"decl_id":null,"docs":" The `Event` type yielded by the `Toggle` widget.","sig":null,"attributes":[{"value":"/ The `Event` type yielded by the `Toggle` widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974927,"byte_end":974979,"line_start":68,"line_end":68,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974980,"byte_end":974983,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Implements `Iterator` yielding a `bool` indicating the new state for each time the `Toggle` was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":974984,"byte_end":975083,"line_start":70,"line_end":70,"column_start":1,"column_end":100}},{"value":"/ clicked with the left mouse button since the last update.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975084,"byte_end":975145,"line_start":71,"line_end":71,"column_start":1,"column_end":62}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975170,"byte_end":975208,"line_start":73,"line_end":73,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4301},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975625,"byte_end":975628,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<Toggle>::new","value":"fn (value: bool) -> Toggle<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Toggle widget.\n","sig":null,"attributes":[{"value":"/ Construct a new Toggle widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975579,"byte_end":975613,"line_start":96,"line_end":96,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975934,"byte_end":975947,"line_start":108,"line_end":108,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<Toggle>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975871,"byte_end":975922,"line_start":107,"line_end":107,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":4303},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":976160,"byte_end":976167,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"label_x","qualname":"<Toggle>::label_x","value":"fn (mut self, x: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Toggle` along the *x* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Toggle` along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":976073,"byte_end":976148,"line_start":113,"line_end":113,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":4304},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":976360,"byte_end":976367,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"label_y","qualname":"<Toggle>::label_y","value":"fn (mut self, y: position::Relative) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the label's position relatively to `Toggle` along the *y* axis.\n","sig":null,"attributes":[{"value":"/ Specify the label's position relatively to `Toggle` along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":976273,"byte_end":976348,"line_start":119,"line_end":119,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":9049},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":976503,"byte_end":976510,"line_start":126,"line_end":126,"column_start":13,"column_end":20},"name":"enabled","qualname":"<Toggle>::enabled","value":"fn (mut self, enabled: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":4319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"xy_pad","qualname":"::widget::xy_pad","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","parent":null,"children":[{"krate":0,"index":4320},{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4334},{"krate":0,"index":9056},{"krate":0,"index":9070},{"krate":0,"index":9077},{"krate":0,"index":9130},{"krate":0,"index":9128},{"krate":0,"index":9126},{"krate":0,"index":9124},{"krate":0,"index":9120},{"krate":0,"index":9121},{"krate":0,"index":9086},{"krate":0,"index":9133},{"krate":0,"index":9131},{"krate":0,"index":4335},{"krate":0,"index":4337},{"krate":0,"index":4343},{"krate":0,"index":4359},{"krate":0,"index":4363},{"krate":0,"index":4367}],"decl_id":null,"docs":" Used for displaying and controlling a 2D point on a cartesian plane within a given range.\n","sig":null,"attributes":[{"value":"! Used for displaying and controlling a 2D point on a cartesian plane within a given range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":979527,"byte_end":979620,"line_start":1,"line_end":1,"column_start":1,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":9056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980093,"byte_end":980098,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"XYPad","qualname":"::widget::xy_pad::XYPad","value":"XYPad { enabled }","parent":null,"children":[{"krate":0,"index":9069},{"krate":0,"index":9060},{"krate":0,"index":9061},{"krate":0,"index":9062},{"krate":0,"index":9063},{"krate":0,"index":9064},{"krate":0,"index":9065},{"krate":0,"index":9066},{"krate":0,"index":9067},{"krate":0,"index":9068}],"decl_id":null,"docs":" Used for displaying and controlling a 2D point on a cartesian plane within a given range.","sig":null,"attributes":[{"value":"/ Used for displaying and controlling a 2D point on a cartesian plane within a given range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":979823,"byte_end":979916,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":979917,"byte_end":979920,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Its reaction is triggered when the value is updated or if the mouse button is released while","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":979921,"byte_end":980017,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/ the cursor is above the rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980018,"byte_end":980056,"line_start":22,"line_end":22,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":9068},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980360,"byte_end":980367,"line_start":32,"line_end":32,"column_start":9,"column_end":16},"name":"enabled","qualname":"::widget::xy_pad::XYPad::enabled","value":"bool","parent":{"krate":0,"index":9056},"children":[],"decl_id":null,"docs":" Indicates whether the XYPad will respond to user input.\n","sig":null,"attributes":[{"value":"/ Indicates whether the XYPad will respond to user input.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980292,"byte_end":980351,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":9077},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980497,"byte_end":980502,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"Style","qualname":"::widget::xy_pad::Style","value":"Style { color, border, border_color, label_color, label_font_size, label_font_id, value_font_size, line_thickness }","parent":null,"children":[{"krate":0,"index":9078},{"krate":0,"index":9079},{"krate":0,"index":9080},{"krate":0,"index":9081},{"krate":0,"index":9082},{"krate":0,"index":9083},{"krate":0,"index":9084},{"krate":0,"index":9085}],"decl_id":null,"docs":" Unique graphical styling for the XYPad.\n","sig":null,"attributes":[{"value":"/ Unique graphical styling for the XYPad.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980378,"byte_end":980421,"line_start":35,"line_end":35,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":9078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980602,"byte_end":980607,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"name":"color","qualname":"::widget::xy_pad::Style::color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The color of the XYPad's rectangle.\n","sig":null,"attributes":[{"value":"/ The color of the XYPad's rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980509,"byte_end":980548,"line_start":38,"line_end":38,"column_start":5,"column_end":44}},{"value":"conrod(default = \"theme.shape_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980553,"byte_end":980593,"line_start":39,"line_end":39,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":9079},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980737,"byte_end":980743,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"border","qualname":"::widget::xy_pad::Style::border","value":"std::option::Option<f64>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The width of the border surrounding the rectangle.\n","sig":null,"attributes":[{"value":"/ The width of the border surrounding the rectangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980628,"byte_end":980682,"line_start":41,"line_end":41,"column_start":5,"column_end":59}},{"value":"conrod(default = \"theme.border_width\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980687,"byte_end":980728,"line_start":42,"line_end":42,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":9080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980870,"byte_end":980882,"line_start":46,"line_end":46,"column_start":9,"column_end":21},"name":"border_color","qualname":"::widget::xy_pad::Style::border_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The color of the surrounding rectangle border.\n","sig":null,"attributes":[{"value":"/ The color of the surrounding rectangle border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980765,"byte_end":980815,"line_start":44,"line_end":44,"column_start":5,"column_end":55}},{"value":"conrod(default = \"theme.border_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980820,"byte_end":980861,"line_start":45,"line_end":45,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":9081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981013,"byte_end":981024,"line_start":49,"line_end":49,"column_start":9,"column_end":20},"name":"label_color","qualname":"::widget::xy_pad::Style::label_color","value":"std::option::Option<color::Color>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The color of the XYPad's label and value label text.\n","sig":null,"attributes":[{"value":"/ The color of the XYPad's label and value label text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980903,"byte_end":980959,"line_start":47,"line_end":47,"column_start":5,"column_end":61}},{"value":"conrod(default = \"theme.label_color\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980964,"byte_end":981004,"line_start":48,"line_end":48,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":9082},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981144,"byte_end":981159,"line_start":52,"line_end":52,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"::widget::xy_pad::Style::label_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The font size for the XYPad's label.\n","sig":null,"attributes":[{"value":"/ The font size for the XYPad's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981045,"byte_end":981085,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"conrod(default = \"theme.font_size_medium\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981090,"byte_end":981135,"line_start":51,"line_end":51,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":9083},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981282,"byte_end":981295,"line_start":55,"line_end":55,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"::widget::xy_pad::Style::label_font_id","value":"std::option::Option<std::option::Option<text::font::Id>>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The ID of the font used to display the label.\n","sig":null,"attributes":[{"value":"/ The ID of the font used to display the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981183,"byte_end":981232,"line_start":53,"line_end":53,"column_start":5,"column_end":54}},{"value":"conrod(default = \"theme.font_id\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981237,"byte_end":981273,"line_start":54,"line_end":54,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":9084},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981420,"byte_end":981435,"line_start":58,"line_end":58,"column_start":9,"column_end":24},"name":"value_font_size","qualname":"::widget::xy_pad::Style::value_font_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The font size for the XYPad's *value* label.\n","sig":null,"attributes":[{"value":"/ The font size for the XYPad's *value* label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981333,"byte_end":981381,"line_start":56,"line_end":56,"column_start":5,"column_end":53}},{"value":"conrod(default = \"14\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981386,"byte_end":981411,"line_start":57,"line_end":57,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":9085},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981548,"byte_end":981562,"line_start":61,"line_end":61,"column_start":9,"column_end":23},"name":"line_thickness","qualname":"::widget::xy_pad::Style::line_thickness","value":"std::option::Option<f64>","parent":{"krate":0,"index":9077},"children":[],"decl_id":null,"docs":" The thickness of the XYPad's crosshair lines.\n","sig":null,"attributes":[{"value":"/ The thickness of the XYPad's crosshair lines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981459,"byte_end":981508,"line_start":59,"line_end":59,"column_start":5,"column_end":54}},{"value":"conrod(default = \"2.0\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981513,"byte_end":981539,"line_start":60,"line_end":60,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":9088},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980602,"byte_end":980607,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"name":"color","qualname":"<Style>::color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9092},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980737,"byte_end":980743,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"name":"border","qualname":"<Style>::border","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9096},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":980870,"byte_end":980882,"line_start":46,"line_end":46,"column_start":9,"column_end":21},"name":"border_color","qualname":"<Style>::border_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9100},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981013,"byte_end":981024,"line_start":49,"line_end":49,"column_start":9,"column_end":20},"name":"label_color","qualname":"<Style>::label_color","value":"fn (&self, theme: &::Theme) -> Color","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981144,"byte_end":981159,"line_start":52,"line_end":52,"column_start":9,"column_end":24},"name":"label_font_size","qualname":"<Style>::label_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981282,"byte_end":981295,"line_start":55,"line_end":55,"column_start":9,"column_end":22},"name":"label_font_id","qualname":"<Style>::label_font_id","value":"fn (&self, theme: &::Theme) -> Option<text::font::Id>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9112},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981420,"byte_end":981435,"line_start":58,"line_end":58,"column_start":9,"column_end":24},"name":"value_font_size","qualname":"<Style>::value_font_size","value":"fn (&self, theme: &::Theme) -> FontSize","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9116},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981548,"byte_end":981562,"line_start":61,"line_end":61,"column_start":9,"column_end":23},"name":"line_thickness","qualname":"<Style>::line_thickness","value":"fn (&self, theme: &::Theme) -> Scalar","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value, falling back to a default values in the following order:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981749,"byte_end":981754,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::xy_pad::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":4336}],"decl_id":null,"docs":" The state of the XYPad.\n","sig":null,"attributes":[{"value":"/ The state of the XYPad.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981710,"byte_end":981737,"line_start":74,"line_end":74,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4341},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981854,"byte_end":981857,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<XYPad>::new","value":"fn (x_val: X, min_x: X, max_x: X, y_val: Y, min_y: Y, max_y: Y) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build a new XYPad widget.\n","sig":null,"attributes":[{"value":"/ Build a new XYPad widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981813,"byte_end":981842,"line_start":82,"line_end":82,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":4342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":982277,"byte_end":982290,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"label_font_id","qualname":"<XYPad>::label_font_id","value":"fn (mut self, font_id: text::font::Id) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the font used for displaying the label.\n","sig":null,"attributes":[{"value":"/ Specify the font used for displaying the label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":982214,"byte_end":982265,"line_start":94,"line_end":94,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":9139},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":982446,"byte_end":982460,"line_start":101,"line_end":101,"column_start":13,"column_end":27},"name":"line_thickness","qualname":"<XYPad>::line_thickness","value":"fn (mut self, line_thickness: Scalar) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":9140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":982513,"byte_end":982528,"line_start":102,"line_end":102,"column_start":13,"column_end":28},"name":"value_font_size","qualname":"<XYPad>::value_font_size","value":"fn (mut self, value_font_size: FontSize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492440,"byte_end":492502,"line_start":11,"line_end":11,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":492511,"byte_end":492520,"line_start":12,"line_end":12,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":9141},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":982584,"byte_end":982591,"line_start":103,"line_end":103,"column_start":13,"column_end":20},"name":"enabled","qualname":"<XYPad>::enabled","value":"fn (mut self, enabled: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Build the type's self.$($assignee).+ with the given $Type.\n","sig":null,"attributes":[{"value":"/ Build the type's self.$($assignee).+ with the given $Type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493218,"byte_end":493280,"line_start":31,"line_end":31,"column_start":9,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/builder.rs","byte_start":493289,"byte_end":493298,"line_start":32,"line_end":32,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":4371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439057,"byte_end":439067,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"UpdateArgs","qualname":"::widget::UpdateArgs","value":"UpdateArgs { id, maybe_parent_id, prev, state, rect, style, ui }","parent":null,"children":[{"krate":0,"index":4377},{"krate":0,"index":4378},{"krate":0,"index":4379},{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4382},{"krate":0,"index":4383}],"decl_id":null,"docs":" Arguments for the [**Widget::update**](./trait.Widget#method.update) method in a struct to\n simplify the method signature.\n","sig":null,"attributes":[{"value":"/ Arguments for the [**Widget::update**](./trait.Widget#method.update) method in a struct to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438916,"byte_end":439010,"line_start":91,"line_end":91,"column_start":1,"column_end":95}},{"value":"/ simplify the method signature.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439011,"byte_end":439045,"line_start":92,"line_end":92,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":4377},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439165,"byte_end":439167,"line_start":97,"line_end":97,"column_start":9,"column_end":11},"name":"id","qualname":"::widget::UpdateArgs::id","value":"daggy::NodeIndex","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" The **Widget**'s unique index.\n","sig":null,"attributes":[{"value":"/ The **Widget**'s unique index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439122,"byte_end":439156,"line_start":96,"line_end":96,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":4378},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439244,"byte_end":439259,"line_start":99,"line_end":99,"column_start":9,"column_end":24},"name":"maybe_parent_id","qualname":"::widget::UpdateArgs::maybe_parent_id","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" The **Widget**'s parent unique index, if there is one.\n","sig":null,"attributes":[{"value":"/ The **Widget**'s parent unique index, if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439177,"byte_end":439235,"line_start":98,"line_end":98,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":4379},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439444,"byte_end":439448,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"name":"prev","qualname":"::widget::UpdateArgs::prev","value":"&'a widget::CommonState","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" The **Widget**'s previous state. Specifically, the state that is common between all widgets,\n such as positioning, floatability, draggability, etc.\n","sig":null,"attributes":[{"value":"/ The **Widget**'s previous state. Specifically, the state that is common between all widgets,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439277,"byte_end":439373,"line_start":100,"line_end":100,"column_start":5,"column_end":101}},{"value":"/ such as positioning, floatability, draggability, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439378,"byte_end":439435,"line_start":101,"line_end":101,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":4380},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440023,"byte_end":440028,"line_start":112,"line_end":112,"column_start":9,"column_end":14},"name":"state","qualname":"::widget::UpdateArgs::state","value":"&'a mut widget::State<'b, <W as widget::Widget>::State>","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" A wrapper around the **Widget**'s unique state, providing methods for both immutably viewing\n and mutably updating the state.","sig":null,"attributes":[{"value":"/ A wrapper around the **Widget**'s unique state, providing methods for both immutably viewing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439471,"byte_end":439567,"line_start":103,"line_end":103,"column_start":5,"column_end":101}},{"value":"/ and mutably updating the state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439572,"byte_end":439607,"line_start":104,"line_end":104,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439612,"byte_end":439615,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ We wrap mutation in a method so that we can keep track of whether or not the unique state","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439620,"byte_end":439713,"line_start":106,"line_end":106,"column_start":5,"column_end":98}},{"value":"/ has been updated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439718,"byte_end":439739,"line_start":107,"line_end":107,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439744,"byte_end":439747,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ If **State::update** is called, we assume that there has been some mutation and in turn","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439752,"byte_end":439843,"line_start":109,"line_end":109,"column_start":5,"column_end":96}},{"value":"/ will require re-drawing the **Widget**. Thus, it is recommended that you *only* call","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439848,"byte_end":439936,"line_start":110,"line_end":110,"column_start":5,"column_end":93}},{"value":"/ **State::update** if you need to update the unique state in some way.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":439941,"byte_end":440014,"line_start":111,"line_end":111,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":4381},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440123,"byte_end":440127,"line_start":114,"line_end":114,"column_start":9,"column_end":13},"name":"rect","qualname":"::widget::UpdateArgs::rect","value":"position::rect::Rect","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" The rectangle describing the **Widget**'s area.\n","sig":null,"attributes":[{"value":"/ The rectangle describing the **Widget**'s area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440063,"byte_end":440114,"line_start":113,"line_end":113,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":4382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440195,"byte_end":440200,"line_start":116,"line_end":116,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::UpdateArgs::style","value":"&'a <W as widget::Widget>::Style","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" The **Widget**'s current **Widget::Style**.\n","sig":null,"attributes":[{"value":"/ The **Widget**'s current **Widget::Style**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440139,"byte_end":440186,"line_start":115,"line_end":115,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440436,"byte_end":440438,"line_start":121,"line_end":121,"column_start":9,"column_end":11},"name":"ui","qualname":"::widget::UpdateArgs::ui","value":"&'c mut ui::UiCell<'d>","parent":{"krate":0,"index":4371},"children":[],"decl_id":null,"docs":" Restricted access to the `Ui`.","sig":null,"attributes":[{"value":"/ Restricted access to the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440220,"byte_end":440254,"line_start":117,"line_end":117,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440259,"byte_end":440262,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Provides methods for immutably accessing the `Ui`'s `Theme` and `GlyphCache`.  Also allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440267,"byte_end":440361,"line_start":119,"line_end":119,"column_start":5,"column_end":99}},{"value":"/ calling `Widget::set` within the `Widget::update` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440366,"byte_end":440427,"line_start":120,"line_end":120,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":4384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440607,"byte_end":440618,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"KidAreaArgs","qualname":"::widget::KidAreaArgs","value":"KidAreaArgs { rect, style, theme, fonts }","parent":null,"children":[{"krate":0,"index":4387},{"krate":0,"index":4388},{"krate":0,"index":4389},{"krate":0,"index":4390}],"decl_id":null,"docs":" Arguments to the [**Widget::kid_area**](./trait.Widget#method.kid_area) method in a struct to\n simplify the method signature.\n","sig":null,"attributes":[{"value":"/ Arguments to the [**Widget::kid_area**](./trait.Widget#method.kid_area) method in a struct to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440463,"byte_end":440560,"line_start":124,"line_end":124,"column_start":1,"column_end":98}},{"value":"/ simplify the method signature.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440561,"byte_end":440595,"line_start":125,"line_end":125,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":4387},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440731,"byte_end":440735,"line_start":130,"line_end":130,"column_start":9,"column_end":13},"name":"rect","qualname":"::widget::KidAreaArgs::rect","value":"position::rect::Rect","parent":{"krate":0,"index":4384},"children":[],"decl_id":null,"docs":" The **Rect** describing the **Widget**'s position and dimensions.\n","sig":null,"attributes":[{"value":"/ The **Rect** describing the **Widget**'s position and dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440653,"byte_end":440722,"line_start":129,"line_end":129,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":4388},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440804,"byte_end":440809,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::KidAreaArgs::style","value":"&'a <W as widget::Widget>::Style","parent":{"krate":0,"index":4384},"children":[],"decl_id":null,"docs":" Current **Widget::Style** of the **Widget**.\n","sig":null,"attributes":[{"value":"/ Current **Widget::Style** of the **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440747,"byte_end":440795,"line_start":131,"line_end":131,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":4389},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440881,"byte_end":440886,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"name":"theme","qualname":"::widget::KidAreaArgs::theme","value":"&'a theme::Theme","parent":{"krate":0,"index":4384},"children":[],"decl_id":null,"docs":" The active **Theme** within the **Ui**.\n","sig":null,"attributes":[{"value":"/ The active **Theme** within the **Ui**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440829,"byte_end":440872,"line_start":133,"line_end":133,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":4390},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440958,"byte_end":440963,"line_start":136,"line_end":136,"column_start":9,"column_end":14},"name":"fonts","qualname":"::widget::KidAreaArgs::fonts","value":"&'a text::font::Map","parent":{"krate":0,"index":4384},"children":[],"decl_id":null,"docs":" The **Font** (for determining text width).\n","sig":null,"attributes":[{"value":"/ The **Font** (for determining text width).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440903,"byte_end":440949,"line_start":135,"line_end":135,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":9148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441104,"byte_end":441111,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"KidArea","qualname":"::widget::KidArea","value":"KidArea { rect, pad }","parent":null,"children":[{"krate":0,"index":9149},{"krate":0,"index":9150}],"decl_id":null,"docs":" The area upon which a **Widget**'s child widgets will be placed.\n","sig":null,"attributes":[{"value":"/ The area upon which a **Widget**'s child widgets will be placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":440983,"byte_end":441051,"line_start":139,"line_end":139,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":9149},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441184,"byte_end":441188,"line_start":143,"line_end":143,"column_start":9,"column_end":13},"name":"rect","qualname":"::widget::KidArea::rect","value":"position::rect::Rect","parent":{"krate":0,"index":9148},"children":[],"decl_id":null,"docs":" The **Rect** bounds describing the position and area.\n","sig":null,"attributes":[{"value":"/ The **Rect** bounds describing the position and area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441118,"byte_end":441175,"line_start":142,"line_end":142,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":9150},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441292,"byte_end":441295,"line_start":145,"line_end":145,"column_start":9,"column_end":12},"name":"pad","qualname":"::widget::KidArea::pad","value":"position::Padding","parent":{"krate":0,"index":9148},"children":[],"decl_id":null,"docs":" The distance between the edge of the area and where the widgets will be placed.\n","sig":null,"attributes":[{"value":"/ The distance between the edge of the area and where the widgets will be placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441200,"byte_end":441283,"line_start":144,"line_end":144,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441524,"byte_end":441528,"line_start":152,"line_end":152,"column_start":5,"column_end":9},"name":"None","qualname":"::widget::MaybeParent::None","value":"MaybeParent::None","parent":{"krate":0,"index":9160},"children":[],"decl_id":null,"docs":" The user specified the widget should not have any parents, so the Root will be used.\n","sig":null,"attributes":[{"value":"/ The user specified the widget should not have any parents, so the Root will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441431,"byte_end":441519,"line_start":151,"line_end":151,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441582,"byte_end":441586,"line_start":154,"line_end":154,"column_start":5,"column_end":9},"name":"Some","qualname":"::widget::MaybeParent::Some","value":"MaybeParent::Some(Id)","parent":{"krate":0,"index":9160},"children":[],"decl_id":null,"docs":" The user gave a specific parent widget.\n","sig":null,"attributes":[{"value":"/ The user gave a specific parent widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441534,"byte_end":441577,"line_start":153,"line_end":153,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441681,"byte_end":441692,"line_start":156,"line_end":156,"column_start":5,"column_end":16},"name":"Unspecified","qualname":"::widget::MaybeParent::Unspecified","value":"MaybeParent::Unspecified","parent":{"krate":0,"index":9160},"children":[],"decl_id":null,"docs":" No parent widget was specified, so we will assume they want the last parent.\n","sig":null,"attributes":[{"value":"/ No parent widget was specified, so we will assume they want the last parent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441596,"byte_end":441676,"line_start":155,"line_end":155,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":9160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441413,"byte_end":441424,"line_start":150,"line_end":150,"column_start":10,"column_end":21},"name":"MaybeParent","qualname":"::widget::MaybeParent","value":"MaybeParent::{None, Some, Unspecified}","parent":null,"children":[{"krate":0,"index":9161},{"krate":0,"index":9163},{"krate":0,"index":9166}],"decl_id":null,"docs":" The builder argument for the **Widget**'s parent.\n","sig":null,"attributes":[{"value":"/ The builder argument for the **Widget**'s parent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441309,"byte_end":441362,"line_start":148,"line_end":148,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4392},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":442180,"byte_end":442193,"line_start":169,"line_end":169,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"<MaybeParent>::get_unchecked","value":"fn (&self, ui: &Ui, x_pos: Position, y_pos: Position) -> Id","parent":null,"children":[],"decl_id":null,"docs":" Convert the **MaybeParent** into an **Option<Id>**.","sig":null,"attributes":[{"value":"/ Convert the **MaybeParent** into an **Option<Id>**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441720,"byte_end":441775,"line_start":160,"line_end":160,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441780,"byte_end":441783,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ If `Unspecified`, check the positioning to retrieve the **Id** from there.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441788,"byte_end":441866,"line_start":162,"line_end":162,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441871,"byte_end":441874,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ If `None`, the `Ui`'s `window` widget will be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441879,"byte_end":441934,"line_start":164,"line_end":164,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441939,"byte_end":441942,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ **Note:** This method does not check whether or not using the `window` widget as the parent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441947,"byte_end":442042,"line_start":166,"line_end":166,"column_start":5,"column_end":100}},{"value":"/ would cause a cycle. If it is important that the inferred parent should not cause a cycle,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":442047,"byte_end":442141,"line_start":167,"line_end":167,"column_start":5,"column_end":99}},{"value":"/ use `get` instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":442146,"byte_end":442168,"line_start":168,"line_end":168,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4393},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":442675,"byte_end":442678,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"get","qualname":"<MaybeParent>::get","value":"fn (&self, id: Id, ui: &Ui, x_pos: Position, y_pos: Position) -> Option<Id>","parent":null,"children":[],"decl_id":null,"docs":" The same as `get_unchecked`, but checks whether or not the widget that we're inferring the\n parent for is the `Ui`'s window (which cannot have a parent, without creating a cycle).\n","sig":null,"attributes":[{"value":"/ The same as `get_unchecked`, but checks whether or not the widget that we're inferring the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":442473,"byte_end":442567,"line_start":177,"line_end":177,"column_start":5,"column_end":99}},{"value":"/ parent for is the `Ui`'s window (which cannot have a parent, without creating a cycle).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":442572,"byte_end":442663,"line_start":178,"line_end":178,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":9177},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443001,"byte_end":443009,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"Floating","qualname":"::widget::Floating","value":"Floating { time_last_clicked }","parent":null,"children":[{"krate":0,"index":9178}],"decl_id":null,"docs":" State necessary for \"floating\" (pop-up style) widgets.\n","sig":null,"attributes":[{"value":"/ State necessary for \"floating\" (pop-up style) widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":442890,"byte_end":442948,"line_start":188,"line_end":188,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":9178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443119,"byte_end":443136,"line_start":192,"line_end":192,"column_start":9,"column_end":26},"name":"time_last_clicked","qualname":"::widget::Floating::time_last_clicked","value":"std::time::Instant","parent":{"krate":0,"index":9177},"children":[],"decl_id":null,"docs":" The time the **Widget** was last clicked (used for depth sorting in the widget **Graph**).\n","sig":null,"attributes":[{"value":"/ The time the **Widget** was last clicked (used for depth sorting in the widget **Graph**).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443016,"byte_end":443110,"line_start":191,"line_end":191,"column_start":5,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":9188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443507,"byte_end":443520,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"CommonBuilder","qualname":"::widget::CommonBuilder","value":"CommonBuilder { style, maybe_parent_id, is_floating, crop_kids, maybe_x_scroll, maybe_y_scroll, place_on_kid_area, maybe_graphics_for }","parent":null,"children":[{"krate":0,"index":9189},{"krate":0,"index":9190},{"krate":0,"index":9191},{"krate":0,"index":9192},{"krate":0,"index":9193},{"krate":0,"index":9194},{"krate":0,"index":9195},{"krate":0,"index":9196}],"decl_id":null,"docs":" A struct containing builder data common to all **Widget** types.","sig":null,"attributes":[{"value":"/ A struct containing builder data common to all **Widget** types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443159,"byte_end":443227,"line_start":195,"line_end":195,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443228,"byte_end":443231,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This type also allows us to do a blanket impl of **Positionable** and **Sizeable** for `T: Widget`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443232,"byte_end":443335,"line_start":197,"line_end":197,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443336,"byte_end":443339,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ When Rust gets some sort of field inheritance feature, this will most likely be refactored to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443340,"byte_end":443437,"line_start":199,"line_end":199,"column_start":1,"column_end":98}},{"value":"/ take advantage of that.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443438,"byte_end":443465,"line_start":200,"line_end":200,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":9189},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443609,"byte_end":443614,"line_start":204,"line_end":204,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::CommonBuilder::style","value":"widget::CommonStyle","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" Styling and positioning data that is common between all widget types.\n","sig":null,"attributes":[{"value":"/ Styling and positioning data that is common between all widget types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443527,"byte_end":443600,"line_start":203,"line_end":203,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":9190},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443678,"byte_end":443693,"line_start":206,"line_end":206,"column_start":9,"column_end":24},"name":"maybe_parent_id","qualname":"::widget::CommonBuilder::maybe_parent_id","value":"widget::MaybeParent","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" The parent widget of the Widget.\n","sig":null,"attributes":[{"value":"/ The parent widget of the Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443633,"byte_end":443669,"line_start":205,"line_end":205,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":9191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443774,"byte_end":443785,"line_start":208,"line_end":208,"column_start":9,"column_end":20},"name":"is_floating","qualname":"::widget::CommonBuilder::is_floating","value":"bool","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" Whether or not the Widget is a \"floating\" Widget.\n","sig":null,"attributes":[{"value":"/ Whether or not the Widget is a \"floating\" Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443712,"byte_end":443765,"line_start":207,"line_end":207,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":9192},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444048,"byte_end":444057,"line_start":213,"line_end":213,"column_start":9,"column_end":18},"name":"crop_kids","qualname":"::widget::CommonBuilder::crop_kids","value":"bool","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" Whether or not the children of this **Widget** should be cropped to its `kid_area`.","sig":null,"attributes":[{"value":"/ Whether or not the children of this **Widget** should be cropped to its `kid_area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443797,"byte_end":443884,"line_start":209,"line_end":209,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443889,"byte_end":443892,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ By default, the kid_area is the size of the entire widget, though it may be specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443897,"byte_end":443986,"line_start":211,"line_end":211,"column_start":5,"column_end":94}},{"value":"/ otherwise via the `Widget::kid_area` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":443991,"byte_end":444039,"line_start":212,"line_end":212,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":9193},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444134,"byte_end":444148,"line_start":215,"line_end":215,"column_start":9,"column_end":23},"name":"maybe_x_scroll","qualname":"::widget::CommonBuilder::maybe_x_scroll","value":"std::option::Option<widget::scroll::Scroll>","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" Arguments to the scrolling of the widget's *x* axis.\n","sig":null,"attributes":[{"value":"/ Arguments to the scrolling of the widget's *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444069,"byte_end":444125,"line_start":214,"line_end":214,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":9194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444243,"byte_end":444257,"line_start":217,"line_end":217,"column_start":9,"column_end":23},"name":"maybe_y_scroll","qualname":"::widget::CommonBuilder::maybe_y_scroll","value":"std::option::Option<widget::scroll::Scroll>","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" Arguments to the scrolling of the widget's *y* axis.\n","sig":null,"attributes":[{"value":"/ Arguments to the scrolling of the widget's *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444178,"byte_end":444234,"line_start":216,"line_end":216,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":9195},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444639,"byte_end":444656,"line_start":224,"line_end":224,"column_start":9,"column_end":26},"name":"place_on_kid_area","qualname":"::widget::CommonBuilder::place_on_kid_area","value":"bool","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" Whether or not the **Widget** should be placed on the kid_area.","sig":null,"attributes":[{"value":"/ Whether or not the **Widget** should be placed on the kid_area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444287,"byte_end":444354,"line_start":218,"line_end":218,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444359,"byte_end":444362,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ If `true`, the **Widget** will be placed on the `kid_area` of the parent **Widget** if the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444367,"byte_end":444461,"line_start":220,"line_end":220,"column_start":5,"column_end":99}},{"value":"/ **Widget** is given a **Place** variant for its **Position**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444466,"byte_end":444531,"line_start":221,"line_end":221,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444536,"byte_end":444539,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ If `false`, the **Widget** will be placed on the parent **Widget**'s *total* area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444544,"byte_end":444630,"line_start":223,"line_end":223,"column_start":5,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":9196},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445447,"byte_end":445465,"line_start":238,"line_end":238,"column_start":9,"column_end":27},"name":"maybe_graphics_for","qualname":"::widget::CommonBuilder::maybe_graphics_for","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":9188},"children":[],"decl_id":null,"docs":" Describes whether or not the **Widget** is instantiated as a graphical element for some\n other **Widget**.","sig":null,"attributes":[{"value":"/ Describes whether or not the **Widget** is instantiated as a graphical element for some","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444668,"byte_end":444759,"line_start":225,"line_end":225,"column_start":5,"column_end":96}},{"value":"/ other **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444764,"byte_end":444785,"line_start":226,"line_end":226,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444790,"byte_end":444793,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ When adding an edge *a -> b* where *b* is considered to be a graphical element of *a*,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444798,"byte_end":444888,"line_start":228,"line_end":228,"column_start":5,"column_end":95}},{"value":"/ several things are implied about *b*:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444893,"byte_end":444934,"line_start":229,"line_end":229,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444939,"byte_end":444942,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ - If *b* is picked within either **Graph::pick_widget** or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":444947,"byte_end":445009,"line_start":231,"line_end":231,"column_start":5,"column_end":67}},{"value":"/ **Graph::pick_top_scrollable_widget**, it will instead return the index for *a*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445014,"byte_end":445098,"line_start":232,"line_end":232,"column_start":5,"column_end":89}},{"value":"/ - When determining the **Graph::scroll_offset** for *b*, *a*'s scrolling (if it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445103,"byte_end":445189,"line_start":233,"line_end":233,"column_start":5,"column_end":91}},{"value":"/ scrollable, that is) will be skipped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445194,"byte_end":445235,"line_start":234,"line_end":234,"column_start":5,"column_end":46}},{"value":"/ - *b* will always be placed upon *a*'s total area, rather than its kid_area which is the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445240,"byte_end":445332,"line_start":235,"line_end":235,"column_start":5,"column_end":97}},{"value":"/ default.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445337,"byte_end":445349,"line_start":236,"line_end":236,"column_start":5,"column_end":17}},{"value":"/ - Any **Graphic** child of *b* will be considered as a **Graphic** child of *a*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445354,"byte_end":445438,"line_start":237,"line_end":237,"column_start":5,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":9202},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445617,"byte_end":445628,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"CommonStyle","qualname":"::widget::CommonStyle","value":"CommonStyle { maybe_x_dimension, maybe_y_dimension, maybe_x_position, maybe_y_position, maybe_depth }","parent":null,"children":[{"krate":0,"index":9203},{"krate":0,"index":9204},{"krate":0,"index":9205},{"krate":0,"index":9206},{"krate":0,"index":9207}],"decl_id":null,"docs":" Styling and positioning data that is common between all widget types.\n","sig":null,"attributes":[{"value":"/ Styling and positioning data that is common between all widget types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445482,"byte_end":445555,"line_start":241,"line_end":241,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":9203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445670,"byte_end":445687,"line_start":245,"line_end":245,"column_start":9,"column_end":26},"name":"maybe_x_dimension","qualname":"::widget::CommonStyle::maybe_x_dimension","value":"std::option::Option<position::Dimension>","parent":{"krate":0,"index":9202},"children":[],"decl_id":null,"docs":" The width of a Widget.\n","sig":null,"attributes":[{"value":"/ The width of a Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445635,"byte_end":445661,"line_start":244,"line_end":244,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":9204},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445748,"byte_end":445765,"line_start":247,"line_end":247,"column_start":9,"column_end":26},"name":"maybe_y_dimension","qualname":"::widget::CommonStyle::maybe_y_dimension","value":"std::option::Option<position::Dimension>","parent":{"krate":0,"index":9202},"children":[],"decl_id":null,"docs":" The height of a Widget.\n","sig":null,"attributes":[{"value":"/ The height of a Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445712,"byte_end":445739,"line_start":246,"line_end":246,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":9205},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445847,"byte_end":445863,"line_start":249,"line_end":249,"column_start":9,"column_end":25},"name":"maybe_x_position","qualname":"::widget::CommonStyle::maybe_x_position","value":"std::option::Option<position::Position>","parent":{"krate":0,"index":9202},"children":[],"decl_id":null,"docs":" The position of a Widget along the *x* axis.\n","sig":null,"attributes":[{"value":"/ The position of a Widget along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445790,"byte_end":445838,"line_start":248,"line_end":248,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":9206},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445944,"byte_end":445960,"line_start":251,"line_end":251,"column_start":9,"column_end":25},"name":"maybe_y_position","qualname":"::widget::CommonStyle::maybe_y_position","value":"std::option::Option<position::Position>","parent":{"krate":0,"index":9202},"children":[],"decl_id":null,"docs":" The position of a Widget along the *y* axis.\n","sig":null,"attributes":[{"value":"/ The position of a Widget along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445887,"byte_end":445935,"line_start":250,"line_end":250,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":9207},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446031,"byte_end":446042,"line_start":253,"line_end":253,"column_start":9,"column_end":20},"name":"maybe_depth","qualname":"::widget::CommonStyle::maybe_depth","value":"std::option::Option<f32>","parent":{"krate":0,"index":9202},"children":[],"decl_id":null,"docs":" The rendering Depth of the Widget.\n","sig":null,"attributes":[{"value":"/ The rendering Depth of the Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":445984,"byte_end":446022,"line_start":252,"line_end":252,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":4394},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446748,"byte_end":446753,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"State","qualname":"::widget::State","value":"State {  }","parent":null,"children":[{"krate":0,"index":4397},{"krate":0,"index":4398}],"decl_id":null,"docs":" A wrapper around a **Widget**'s unique **Widget::State**.","sig":null,"attributes":[{"value":"/ A wrapper around a **Widget**'s unique **Widget::State**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446062,"byte_end":446123,"line_start":256,"line_end":256,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446124,"byte_end":446127,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ This type is used to provide limited access to the **Widget::State** within the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446128,"byte_end":446211,"line_start":258,"line_end":258,"column_start":1,"column_end":84}},{"value":"/ [**Widget::update**](./trait.Widget#method.update) method (to which it is passed via the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446212,"byte_end":446304,"line_start":259,"line_end":259,"column_start":1,"column_end":93}},{"value":"/ [**UpdateArgs**](./struct.UpdateArgs)).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446305,"byte_end":446348,"line_start":260,"line_end":260,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446349,"byte_end":446352,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ The type provides only two methods. One for viewing the state, the other for mutating it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446353,"byte_end":446446,"line_start":262,"line_end":262,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446447,"byte_end":446450,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ We do this so that we can keep track of whether or not the **Widget::State** has been mutated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446451,"byte_end":446548,"line_start":264,"line_end":264,"column_start":1,"column_end":98}},{"value":"/ (using an internal `has_updated` flag). This allows us to know whether or not we need to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446549,"byte_end":446641,"line_start":265,"line_end":265,"column_start":1,"column_end":93}},{"value":"/ re-draw the **Widget**, without having to compare the previous and new **Widget::State**s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446642,"byte_end":446736,"line_start":266,"line_end":266,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":9219},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447012,"byte_end":447023,"line_start":275,"line_end":275,"column_start":12,"column_end":23},"name":"CommonState","qualname":"::widget::CommonState","value":"CommonState { rect, depth, maybe_dragged_from, maybe_floating, kid_area, maybe_x_scroll_state, maybe_y_scroll_state }","parent":null,"children":[{"krate":0,"index":9220},{"krate":0,"index":9221},{"krate":0,"index":9222},{"krate":0,"index":9223},{"krate":0,"index":9224},{"krate":0,"index":9225},{"krate":0,"index":9226}],"decl_id":null,"docs":" A wrapper around state that is common to all **Widget** types.\n","sig":null,"attributes":[{"value":"/ A wrapper around state that is common to all **Widget** types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":446893,"byte_end":446959,"line_start":273,"line_end":273,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":9220},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447088,"byte_end":447092,"line_start":277,"line_end":277,"column_start":9,"column_end":13},"name":"rect","qualname":"::widget::CommonState::rect","value":"position::rect::Rect","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":" The rectangle describing the `Widget`'s area.\n","sig":null,"attributes":[{"value":"/ The rectangle describing the `Widget`'s area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447030,"byte_end":447079,"line_start":276,"line_end":276,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":9221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447173,"byte_end":447178,"line_start":279,"line_end":279,"column_start":9,"column_end":14},"name":"depth","qualname":"::widget::CommonState::depth","value":"f32","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":" The rendering depth for the Widget (the default is 0.0).\n","sig":null,"attributes":[{"value":"/ The rendering depth for the Widget (the default is 0.0).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447104,"byte_end":447164,"line_start":278,"line_end":278,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":9222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447273,"byte_end":447291,"line_start":281,"line_end":281,"column_start":9,"column_end":27},"name":"maybe_dragged_from","qualname":"::widget::CommonState::maybe_dragged_from","value":"std::option::Option<[f64; 2]>","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":" If widget is draggable and is being dragged, this is where it started\n","sig":null,"attributes":[{"value":"/ If widget is draggable and is being dragged, this is where it started","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447191,"byte_end":447264,"line_start":280,"line_end":280,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":9223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447373,"byte_end":447387,"line_start":283,"line_end":283,"column_start":9,"column_end":23},"name":"maybe_floating","qualname":"::widget::CommonState::maybe_floating","value":"std::option::Option<widget::Floating>","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":" Floating state for the widget if it is floating.\n","sig":null,"attributes":[{"value":"/ Floating state for the widget if it is floating.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447312,"byte_end":447364,"line_start":282,"line_end":282,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":9224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447481,"byte_end":447489,"line_start":285,"line_end":285,"column_start":9,"column_end":17},"name":"kid_area","qualname":"::widget::CommonState::kid_area","value":"widget::KidArea","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":" The area of the widget upon which kid widgets are placed.\n","sig":null,"attributes":[{"value":"/ The area of the widget upon which kid widgets are placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447411,"byte_end":447472,"line_start":284,"line_end":284,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":9225},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447565,"byte_end":447585,"line_start":287,"line_end":287,"column_start":9,"column_end":29},"name":"maybe_x_scroll_state","qualname":"::widget::CommonState::maybe_x_scroll_state","value":"std::option::Option<widget::scroll::State<widget::scroll::X>>","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":" If the widget is scrollable across the *x* axis.\n","sig":null,"attributes":[{"value":"/ If the widget is scrollable across the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447504,"byte_end":447556,"line_start":286,"line_end":286,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":9226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447676,"byte_end":447696,"line_start":289,"line_end":289,"column_start":9,"column_end":29},"name":"maybe_y_scroll_state","qualname":"::widget::CommonState::maybe_y_scroll_state","value":"std::option::Option<widget::scroll::State<widget::scroll::Y>>","parent":{"krate":0,"index":9219},"children":[],"decl_id":null,"docs":" If the widget is scrollable across the *y* axis.\n","sig":null,"attributes":[{"value":"/ If the widget is scrollable across the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":447615,"byte_end":447667,"line_start":288,"line_end":288,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":4399},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448116,"byte_end":448130,"line_start":300,"line_end":300,"column_start":12,"column_end":26},"name":"PreUpdateCache","qualname":"::widget::PreUpdateCache","value":"PreUpdateCache { type_id, id, maybe_parent_id, maybe_x_positioned_relatively_id, maybe_y_positioned_relatively_id, rect, depth, kid_area, maybe_dragged_from, maybe_floating, crop_kids, maybe_x_scroll_state, maybe_y_scroll_state, maybe_graphics_for, is_over }","parent":null,"children":[{"krate":0,"index":4400},{"krate":0,"index":4401},{"krate":0,"index":4402},{"krate":0,"index":4403},{"krate":0,"index":4404},{"krate":0,"index":4405},{"krate":0,"index":4406},{"krate":0,"index":4407},{"krate":0,"index":4408},{"krate":0,"index":4409},{"krate":0,"index":4410},{"krate":0,"index":4411},{"krate":0,"index":4412},{"krate":0,"index":4413},{"krate":0,"index":4414}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448043,"byte_end":448065,"line_start":298,"line_end":298,"column_start":1,"column_end":23}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448066,"byte_end":448104,"line_start":299,"line_end":299,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":4400},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448190,"byte_end":448197,"line_start":302,"line_end":302,"column_start":9,"column_end":16},"name":"type_id","qualname":"::widget::PreUpdateCache::type_id","value":"std::any::TypeId","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" The **Widget**'s unique type identifier.\n","sig":null,"attributes":[{"value":"/ The **Widget**'s unique type identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448137,"byte_end":448181,"line_start":301,"line_end":301,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":4401},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448261,"byte_end":448263,"line_start":304,"line_end":304,"column_start":9,"column_end":11},"name":"id","qualname":"::widget::PreUpdateCache::id","value":"daggy::NodeIndex","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" The **Widget**'s unique Id.\n","sig":null,"attributes":[{"value":"/ The **Widget**'s unique Id.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448221,"byte_end":448252,"line_start":303,"line_end":303,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448346,"byte_end":448361,"line_start":306,"line_end":306,"column_start":9,"column_end":24},"name":"maybe_parent_id","qualname":"::widget::PreUpdateCache::maybe_parent_id","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" The **Widget**'s parent's unique index (if it has a parent).\n","sig":null,"attributes":[{"value":"/ The **Widget**'s parent's unique index (if it has a parent).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448273,"byte_end":448337,"line_start":305,"line_end":305,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":4403},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448577,"byte_end":448609,"line_start":309,"line_end":309,"column_start":9,"column_end":41},"name":"maybe_x_positioned_relatively_id","qualname":"::widget::PreUpdateCache::maybe_x_positioned_relatively_id","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" If this **Widget** is relatively positioned to another **Widget**, this will be the index\n of the **Widget** to which this **Widget** is relatively positioned along the *x* axis.\n","sig":null,"attributes":[{"value":"/ If this **Widget** is relatively positioned to another **Widget**, this will be the index","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448379,"byte_end":448472,"line_start":307,"line_end":307,"column_start":5,"column_end":98}},{"value":"/ of the **Widget** to which this **Widget** is relatively positioned along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448477,"byte_end":448568,"line_start":308,"line_end":308,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":4404},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448825,"byte_end":448857,"line_start":312,"line_end":312,"column_start":9,"column_end":41},"name":"maybe_y_positioned_relatively_id","qualname":"::widget::PreUpdateCache::maybe_y_positioned_relatively_id","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" If this **Widget** is relatively positioned to another **Widget**, this will be the index\n of the **Widget** to which this **Widget** is relatively positioned along the *y* axis.\n","sig":null,"attributes":[{"value":"/ If this **Widget** is relatively positioned to another **Widget**, this will be the index","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448627,"byte_end":448720,"line_start":310,"line_end":310,"column_start":5,"column_end":98}},{"value":"/ of the **Widget** to which this **Widget** is relatively positioned along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448725,"byte_end":448816,"line_start":311,"line_end":311,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":4405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448953,"byte_end":448957,"line_start":314,"line_end":314,"column_start":9,"column_end":13},"name":"rect","qualname":"::widget::PreUpdateCache::rect","value":"position::rect::Rect","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" The **Rect** describing the **Widget**'s position and dimensions.\n","sig":null,"attributes":[{"value":"/ The **Rect** describing the **Widget**'s position and dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448875,"byte_end":448944,"line_start":313,"line_end":313,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":4406},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449045,"byte_end":449050,"line_start":316,"line_end":316,"column_start":9,"column_end":14},"name":"depth","qualname":"::widget::PreUpdateCache::depth","value":"f32","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" The z-axis depth - affects the render order of sibling widgets.\n","sig":null,"attributes":[{"value":"/ The z-axis depth - affects the render order of sibling widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":448969,"byte_end":449036,"line_start":315,"line_end":315,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4407},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449145,"byte_end":449153,"line_start":318,"line_end":318,"column_start":9,"column_end":17},"name":"kid_area","qualname":"::widget::PreUpdateCache::kid_area","value":"widget::KidArea","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" The area upon which the **Widget**'s children widgets will be placed.\n","sig":null,"attributes":[{"value":"/ The area upon which the **Widget**'s children widgets will be placed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449063,"byte_end":449136,"line_start":317,"line_end":317,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":4408},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449254,"byte_end":449272,"line_start":320,"line_end":320,"column_start":9,"column_end":27},"name":"maybe_dragged_from","qualname":"::widget::PreUpdateCache::maybe_dragged_from","value":"std::option::Option<[f64; 2]>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" If **Widget** is draggable and is being dragged, this is where it started\n","sig":null,"attributes":[{"value":"/ If **Widget** is draggable and is being dragged, this is where it started","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449168,"byte_end":449245,"line_start":319,"line_end":319,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":4409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449356,"byte_end":449370,"line_start":322,"line_end":322,"column_start":9,"column_end":23},"name":"maybe_floating","qualname":"::widget::PreUpdateCache::maybe_floating","value":"std::option::Option<widget::Floating>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" Floating data for the **Widget** if there is some.\n","sig":null,"attributes":[{"value":"/ Floating data for the **Widget** if there is some.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449293,"byte_end":449347,"line_start":321,"line_end":321,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449489,"byte_end":449498,"line_start":324,"line_end":324,"column_start":9,"column_end":18},"name":"crop_kids","qualname":"::widget::PreUpdateCache::crop_kids","value":"bool","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" Whether or not the children of the **Widget** should be cropped to its `kid_area`.\n","sig":null,"attributes":[{"value":"/ Whether or not the children of the **Widget** should be cropped to its `kid_area`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449394,"byte_end":449480,"line_start":323,"line_end":323,"column_start":5,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":4411},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449585,"byte_end":449605,"line_start":326,"line_end":326,"column_start":9,"column_end":29},"name":"maybe_x_scroll_state","qualname":"::widget::PreUpdateCache::maybe_x_scroll_state","value":"std::option::Option<widget::scroll::State<widget::scroll::X>>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" Scrolling data for the **Widget**'s *x* axis if there is some.\n","sig":null,"attributes":[{"value":"/ Scrolling data for the **Widget**'s *x* axis if there is some.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449510,"byte_end":449576,"line_start":325,"line_end":325,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449710,"byte_end":449730,"line_start":328,"line_end":328,"column_start":9,"column_end":29},"name":"maybe_y_scroll_state","qualname":"::widget::PreUpdateCache::maybe_y_scroll_state","value":"std::option::Option<widget::scroll::State<widget::scroll::Y>>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" Scrolling data for the **Widget**'s *y* axis if there is some.\n","sig":null,"attributes":[{"value":"/ Scrolling data for the **Widget**'s *y* axis if there is some.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449635,"byte_end":449701,"line_start":327,"line_end":327,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449878,"byte_end":449896,"line_start":331,"line_end":331,"column_start":9,"column_end":27},"name":"maybe_graphics_for","qualname":"::widget::PreUpdateCache::maybe_graphics_for","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" Whether or not the **Widget** has been instantiated as a graphical element for some other\n widget.\n","sig":null,"attributes":[{"value":"/ Whether or not the **Widget** has been instantiated as a graphical element for some other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449760,"byte_end":449853,"line_start":329,"line_end":329,"column_start":5,"column_end":98}},{"value":"/ widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449858,"byte_end":449869,"line_start":330,"line_end":330,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":4414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449997,"byte_end":450004,"line_start":333,"line_end":333,"column_start":9,"column_end":16},"name":"is_over","qualname":"::widget::PreUpdateCache::is_over","value":"for<'r, 's> fn(&'r graph::Container, [f64; 2], &'s theme::Theme) -> widget::IsOver","parent":{"krate":0,"index":4399},"children":[],"decl_id":null,"docs":" A function describing whether or not a given point is over the widget.\n","sig":null,"attributes":[{"value":"/ A function describing whether or not a given point is over the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":449914,"byte_end":449988,"line_start":332,"line_end":332,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":4415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450381,"byte_end":450396,"line_start":343,"line_end":343,"column_start":12,"column_end":27},"name":"PostUpdateCache","qualname":"::widget::PostUpdateCache","value":"PostUpdateCache { id, maybe_parent_id, state, style }","parent":null,"children":[{"krate":0,"index":4417},{"krate":0,"index":4418},{"krate":0,"index":4419},{"krate":0,"index":4420}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450347,"byte_end":450369,"line_start":342,"line_end":342,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":4417},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450471,"byte_end":450473,"line_start":347,"line_end":347,"column_start":9,"column_end":11},"name":"id","qualname":"::widget::PostUpdateCache::id","value":"daggy::NodeIndex","parent":{"krate":0,"index":4415},"children":[],"decl_id":null,"docs":" The **Widget**'s unique **Id**.\n","sig":null,"attributes":[{"value":"/ The **Widget**'s unique **Id**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450427,"byte_end":450462,"line_start":346,"line_end":346,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":4418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450557,"byte_end":450572,"line_start":349,"line_end":349,"column_start":9,"column_end":24},"name":"maybe_parent_id","qualname":"::widget::PostUpdateCache::maybe_parent_id","value":"std::option::Option<daggy::NodeIndex>","parent":{"krate":0,"index":4415},"children":[],"decl_id":null,"docs":" The **Widget**'s parent's unique **Id** (if it has a parent).\n","sig":null,"attributes":[{"value":"/ The **Widget**'s parent's unique **Id** (if it has a parent).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450483,"byte_end":450548,"line_start":348,"line_end":348,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":4419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450678,"byte_end":450683,"line_start":351,"line_end":351,"column_start":9,"column_end":14},"name":"state","qualname":"::widget::PostUpdateCache::state","value":"<W as widget::Widget>::State","parent":{"krate":0,"index":4415},"children":[],"decl_id":null,"docs":" The newly produced unique **Widget::State** associated with the **Widget**.\n","sig":null,"attributes":[{"value":"/ The newly produced unique **Widget::State** associated with the **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450590,"byte_end":450669,"line_start":350,"line_end":350,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":4420},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450787,"byte_end":450792,"line_start":353,"line_end":353,"column_start":9,"column_end":14},"name":"style","qualname":"::widget::PostUpdateCache::style","value":"<W as widget::Widget>::Style","parent":{"krate":0,"index":4415},"children":[],"decl_id":null,"docs":" The newly produced unique **Widget::Style** associated with the **Widget**.\n","sig":null,"attributes":[{"value":"/ The newly produced unique **Widget::Style** associated with the **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450699,"byte_end":450778,"line_start":352,"line_end":352,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450952,"byte_end":450956,"line_start":360,"line_end":360,"column_start":5,"column_end":9},"name":"Bool","qualname":"::widget::IsOver::Bool","value":"IsOver::Bool(bool)","parent":{"krate":0,"index":9236},"children":[],"decl_id":null,"docs":" Whether or not the point was over the widget.\n","sig":null,"attributes":[{"value":"/ Whether or not the point was over the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450898,"byte_end":450947,"line_start":359,"line_end":359,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451094,"byte_end":451100,"line_start":363,"line_end":363,"column_start":5,"column_end":11},"name":"Widget","qualname":"::widget::IsOver::Widget","value":"IsOver::Widget(Id)","parent":{"krate":0,"index":9236},"children":[],"decl_id":null,"docs":" Check whether or not the point is over the widget at the given `Id` and if so, assume it is\n over this widget.\n","sig":null,"attributes":[{"value":"/ Check whether or not the point is over the widget at the given `Id` and if so, assume it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450968,"byte_end":451063,"line_start":361,"line_end":361,"column_start":5,"column_end":100}},{"value":"/ over this widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451068,"byte_end":451089,"line_start":362,"line_end":362,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":9236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450885,"byte_end":450891,"line_start":358,"line_end":358,"column_start":10,"column_end":16},"name":"IsOver","qualname":"::widget::IsOver","value":"IsOver::{Bool, Widget}","parent":null,"children":[{"krate":0,"index":9237},{"krate":0,"index":9240}],"decl_id":null,"docs":" Returned by the `Widget::is_over` method.\n","sig":null,"attributes":[{"value":"/ Returned by the `Widget::is_over` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":450807,"byte_end":450852,"line_start":356,"line_end":356,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":4425},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451389,"byte_end":451397,"line_start":379,"line_end":379,"column_start":10,"column_end":18},"name":"IsOverFn","qualname":"::widget::IsOverFn","value":"fn(&Container, Point, &Theme) -> IsOver","parent":null,"children":[],"decl_id":null,"docs":" A function type used to determine whether or not a given point is over a widget.\n","sig":null,"attributes":[{"value":"/ A function type used to determine whether or not a given point is over a widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451295,"byte_end":451379,"line_start":378,"line_end":378,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":4426},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451532,"byte_end":451544,"line_start":382,"line_end":382,"column_start":8,"column_end":20},"name":"is_over_rect","qualname":"::widget::is_over_rect","value":"fn (container: &Container, point: Point, _: &Theme) -> IsOver","parent":null,"children":[],"decl_id":null,"docs":" The default `IsOverFn` used if the `Widget::is_over` method is not overridden.\n","sig":null,"attributes":[{"value":"/ The default `IsOverFn` used if the `Widget::is_over` method is not overridden.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451442,"byte_end":451524,"line_start":381,"line_end":381,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":4427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451730,"byte_end":451735,"line_start":387,"line_end":387,"column_start":11,"column_end":16},"name":"Style","qualname":"::widget::Style","value":"Style: std::any::Any + std::fmt::Debug + PartialEq + Sized","parent":null,"children":[],"decl_id":null,"docs":" The necessary bounds for a **Widget**'s associated **Style** type.\n","sig":null,"attributes":[{"value":"/ The necessary bounds for a **Widget**'s associated **Style** type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451649,"byte_end":451719,"line_start":386,"line_end":386,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":4436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453685,"byte_end":453704,"line_start":427,"line_end":427,"column_start":8,"column_end":27},"name":"default_x_dimension","qualname":"::widget::default_x_dimension","value":"fn <W> (widget: &W, ui: &Ui) -> Dimension","parent":null,"children":[],"decl_id":null,"docs":" Determines the default **Dimension** for a **Widget**.","sig":null,"attributes":[{"value":"/ Determines the default **Dimension** for a **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":452968,"byte_end":453026,"line_start":415,"line_end":415,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453027,"byte_end":453030,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ This function checks for a default dimension in the following order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453031,"byte_end":453103,"line_start":417,"line_end":417,"column_start":1,"column_end":73}},{"value":"/ 1. Check for a default value within the **Ui**'s **Theme**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453104,"byte_end":453167,"line_start":418,"line_end":418,"column_start":1,"column_end":64}},{"value":"/ 2. Otherwise attempts to copy the dimension of the previously set widget if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453168,"byte_end":453261,"line_start":419,"line_end":419,"column_start":1,"column_end":94}},{"value":"/ 3. Otherwise attempts to copy the dimension of our parent widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453262,"byte_end":453331,"line_start":420,"line_end":420,"column_start":1,"column_end":70}},{"value":"/ 4. If no parent widget can be inferred, the window dimensions are used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453332,"byte_end":453407,"line_start":421,"line_end":421,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453408,"byte_end":453411,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ This is called by the default implementations of **Widget::default_x_dimension**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453412,"byte_end":453497,"line_start":423,"line_end":423,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453498,"byte_end":453501,"line_start":424,"line_end":424,"column_start":1,"column_end":4}},{"value":"/ If you wish to override **Widget::default_x_dimension**, feel free to call this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453502,"byte_end":453594,"line_start":425,"line_end":425,"column_start":1,"column_end":93}},{"value":"/ internally if you partly require the bahaviour of the default implementations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453595,"byte_end":453677,"line_start":426,"line_end":426,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":4439},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454563,"byte_end":454582,"line_start":445,"line_end":445,"column_start":8,"column_end":27},"name":"default_y_dimension","qualname":"::widget::default_y_dimension","value":"fn <W> (widget: &W, ui: &Ui) -> Dimension","parent":null,"children":[],"decl_id":null,"docs":" Determines the default **Dimension** for a **Widget**.","sig":null,"attributes":[{"value":"/ Determines the default **Dimension** for a **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453846,"byte_end":453904,"line_start":433,"line_end":433,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453905,"byte_end":453908,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ This function checks for a default dimension in the following order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453909,"byte_end":453981,"line_start":435,"line_end":435,"column_start":1,"column_end":73}},{"value":"/ 1. Check for a default value within the **Ui**'s **Theme**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":453982,"byte_end":454045,"line_start":436,"line_end":436,"column_start":1,"column_end":64}},{"value":"/ 2. Otherwise attempts to copy the dimension of the previously set widget if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454046,"byte_end":454139,"line_start":437,"line_end":437,"column_start":1,"column_end":94}},{"value":"/ 3. Otherwise attempts to copy the dimension of our parent widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454140,"byte_end":454209,"line_start":438,"line_end":438,"column_start":1,"column_end":70}},{"value":"/ 4. If no parent widget can be inferred, the window dimensions are used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454210,"byte_end":454285,"line_start":439,"line_end":439,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454286,"byte_end":454289,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ This is called by the default implementations of **Widget::default_y_dimension**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454290,"byte_end":454375,"line_start":441,"line_end":441,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454376,"byte_end":454379,"line_start":442,"line_end":442,"column_start":1,"column_end":4}},{"value":"/ If you wish to override **Widget::default_y_dimension**, feel free to call this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454380,"byte_end":454472,"line_start":443,"line_end":443,"column_start":1,"column_end":93}},{"value":"/ internally if you partly require the bahaviour of the default implementations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454473,"byte_end":454555,"line_start":444,"line_end":444,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":4442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455374,"byte_end":455380,"line_start":471,"line_end":471,"column_start":11,"column_end":17},"name":"Common","qualname":"::widget::Common","value":"Common","parent":null,"children":[{"krate":0,"index":4443},{"krate":0,"index":4444}],"decl_id":null,"docs":" A trait implemented by all **Widget** types.","sig":null,"attributes":[{"value":"/ A trait implemented by all **Widget** types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454725,"byte_end":454773,"line_start":452,"line_end":452,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454774,"byte_end":454777,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ This trait provides access to a field of type **CommonBuilder** on the implementor. This allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454778,"byte_end":454877,"line_start":454,"line_end":454,"column_start":1,"column_end":100}},{"value":"/ the `Widget` trait to automatically provide a large number of methods including those from the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454878,"byte_end":454976,"line_start":455,"line_end":455,"column_start":1,"column_end":99}},{"value":"/ **Positionable** and **Sizeable** traits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":454977,"byte_end":455022,"line_start":456,"line_end":456,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455023,"byte_end":455026,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ The **Common** trait can be automatically derived for widgets like so:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455027,"byte_end":455101,"line_start":458,"line_end":458,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455102,"byte_end":455105,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455106,"byte_end":455119,"line_start":460,"line_end":460,"column_start":1,"column_end":14}},{"value":"/ extern crate conrod_core;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455120,"byte_end":455149,"line_start":461,"line_end":461,"column_start":1,"column_end":30}},{"value":"/ #[macro_use] extern crate conrod_derive;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455150,"byte_end":455194,"line_start":462,"line_end":462,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455195,"byte_end":455198,"line_start":463,"line_end":463,"column_start":1,"column_end":4}},{"value":"/ #[derive(WidgetCommon)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455199,"byte_end":455226,"line_start":464,"line_end":464,"column_start":1,"column_end":28}},{"value":"/ struct MyWidget {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455227,"byte_end":455248,"line_start":465,"line_end":465,"column_start":1,"column_end":22}},{"value":"/     #[conrod(common_builder)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455249,"byte_end":455282,"line_start":466,"line_end":466,"column_start":1,"column_end":34}},{"value":"/     common: conrod_core::widget::CommonBuilder,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455283,"byte_end":455334,"line_start":467,"line_end":467,"column_start":1,"column_end":52}},{"value":"/     // etc","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455335,"byte_end":455349,"line_start":468,"line_end":468,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455350,"byte_end":455355,"line_start":469,"line_end":469,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455356,"byte_end":455363,"line_start":470,"line_end":470,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":4443},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455433,"byte_end":455439,"line_start":473,"line_end":473,"column_start":8,"column_end":14},"name":"common","qualname":"::widget::Common::common","value":"fn (&self) -> &CommonBuilder","parent":{"krate":0,"index":4442},"children":[],"decl_id":null,"docs":" Borrows the `CommonBuilder` field.\n","sig":null,"attributes":[{"value":"/ Borrows the `CommonBuilder` field.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455387,"byte_end":455425,"line_start":472,"line_end":472,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":4444},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455524,"byte_end":455534,"line_start":475,"line_end":475,"column_start":8,"column_end":18},"name":"common_mut","qualname":"::widget::Common::common_mut","value":"fn (&mut self) -> &mut CommonBuilder","parent":{"krate":0,"index":4442},"children":[],"decl_id":null,"docs":" Mutably borrows the `CommonBuilder` field.\n","sig":null,"attributes":[{"value":"/ Mutably borrows the `CommonBuilder` field.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455470,"byte_end":455516,"line_start":474,"line_end":474,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":4445},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456409,"byte_end":456415,"line_start":510,"line_end":510,"column_start":11,"column_end":17},"name":"Widget","qualname":"::widget::Widget","value":"Widget: Common + Sized","parent":null,"children":[{"krate":0,"index":4446},{"krate":0,"index":4447},{"krate":0,"index":4448},{"krate":0,"index":4449},{"krate":0,"index":4450},{"krate":0,"index":4451},{"krate":0,"index":4452},{"krate":0,"index":4454},{"krate":0,"index":4456},{"krate":0,"index":4457},{"krate":0,"index":4458},{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461},{"krate":0,"index":4462},{"krate":0,"index":4463},{"krate":0,"index":4464},{"krate":0,"index":4465},{"krate":0,"index":4466},{"krate":0,"index":4467},{"krate":0,"index":4468},{"krate":0,"index":4469},{"krate":0,"index":4470},{"krate":0,"index":4472},{"krate":0,"index":4474},{"krate":0,"index":4476},{"krate":0,"index":4479}],"decl_id":null,"docs":" A trait to be implemented by all **Widget** types.","sig":null,"attributes":[{"value":"/ A trait to be implemented by all **Widget** types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455573,"byte_end":455627,"line_start":479,"line_end":479,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455628,"byte_end":455631,"line_start":480,"line_end":480,"column_start":1,"column_end":4}},{"value":"/ A type that implements **Widget** can be thought of as a collection of arguments to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455632,"byte_end":455723,"line_start":481,"line_end":481,"column_start":1,"column_end":92}},{"value":"/ **Widget**'s **Widget::update** method. They type itself is not stored between updates, but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455724,"byte_end":455819,"line_start":482,"line_end":482,"column_start":1,"column_end":96}},{"value":"/ rather is used to update an instance of the **Widget**'s **Widget::State**, which *is* stored.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455820,"byte_end":455918,"line_start":483,"line_end":483,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455919,"byte_end":455922,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ Methods that *must* be overridden:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455923,"byte_end":455961,"line_start":485,"line_end":485,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455962,"byte_end":455965,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ - init_state","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455966,"byte_end":455982,"line_start":487,"line_end":487,"column_start":1,"column_end":17}},{"value":"/ - style","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455983,"byte_end":455994,"line_start":488,"line_end":488,"column_start":1,"column_end":12}},{"value":"/ - update","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":455995,"byte_end":456007,"line_start":489,"line_end":489,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456008,"byte_end":456011,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ Methods that can be optionally overridden:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456012,"byte_end":456058,"line_start":491,"line_end":491,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456059,"byte_end":456062,"line_start":492,"line_end":492,"column_start":1,"column_end":4}},{"value":"/ - default_x_position","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456063,"byte_end":456087,"line_start":493,"line_end":493,"column_start":1,"column_end":25}},{"value":"/ - default_y_position","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456088,"byte_end":456112,"line_start":494,"line_end":494,"column_start":1,"column_end":25}},{"value":"/ - default_width","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456113,"byte_end":456132,"line_start":495,"line_end":495,"column_start":1,"column_end":20}},{"value":"/ - default_height","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456133,"byte_end":456153,"line_start":496,"line_end":496,"column_start":1,"column_end":21}},{"value":"/ - drag_area","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456154,"byte_end":456169,"line_start":497,"line_end":497,"column_start":1,"column_end":16}},{"value":"/ - kid_area","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456170,"byte_end":456184,"line_start":498,"line_end":498,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456185,"byte_end":456188,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ Methods that should not be overridden:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456189,"byte_end":456231,"line_start":500,"line_end":500,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456232,"byte_end":456235,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ - floating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456236,"byte_end":456250,"line_start":502,"line_end":502,"column_start":1,"column_end":15}},{"value":"/ - scroll_kids","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456251,"byte_end":456268,"line_start":503,"line_end":503,"column_start":1,"column_end":18}},{"value":"/ - scroll_kids_vertically","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456269,"byte_end":456297,"line_start":504,"line_end":504,"column_start":1,"column_end":29}},{"value":"/ - scroll_kids_horizontally","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456298,"byte_end":456328,"line_start":505,"line_end":505,"column_start":1,"column_end":31}},{"value":"/ - place_widget_on_kid_area","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456329,"byte_end":456359,"line_start":506,"line_end":506,"column_start":1,"column_end":31}},{"value":"/ - parent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456360,"byte_end":456372,"line_start":507,"line_end":507,"column_start":1,"column_end":13}},{"value":"/ - no_parent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456373,"byte_end":456388,"line_start":508,"line_end":508,"column_start":1,"column_end":16}},{"value":"/ - set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456389,"byte_end":456398,"line_start":509,"line_end":509,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":4446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456804,"byte_end":456809,"line_start":518,"line_end":518,"column_start":10,"column_end":15},"name":"State","qualname":"::widget::Widget::State","value":"type State: std::any::Any + Send;","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" State to be stored within the `Ui`s widget cache.","sig":null,"attributes":[{"value":"/ State to be stored within the `Ui`s widget cache.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456438,"byte_end":456491,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456496,"byte_end":456499,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ Take advantage of this type for any large allocations that you would like to avoid","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456504,"byte_end":456590,"line_start":513,"line_end":513,"column_start":5,"column_end":91}},{"value":"/ repeating between updates, or any calculations that you'd like to avoid repeating between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456595,"byte_end":456688,"line_start":514,"line_end":514,"column_start":5,"column_end":98}},{"value":"/ calls to `update`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456693,"byte_end":456715,"line_start":515,"line_end":515,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456720,"byte_end":456723,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ Conrod will never clone the state, it will only ever be moved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456728,"byte_end":456794,"line_start":517,"line_end":517,"column_start":5,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":4447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460861,"byte_end":460866,"line_start":589,"line_end":589,"column_start":10,"column_end":15},"name":"Style","qualname":"::widget::Widget::Style","value":"type Style: Style + Send;","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Every widget is required to have its own associated `Style` type. This type is intended to\n contain high-level styling information for the widget that can be *optionally specified* by\n a user of the widget.","sig":null,"attributes":[{"value":"/ Every widget is required to have its own associated `Style` type. This type is intended to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456837,"byte_end":456931,"line_start":519,"line_end":519,"column_start":5,"column_end":99}},{"value":"/ contain high-level styling information for the widget that can be *optionally specified* by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456936,"byte_end":457031,"line_start":520,"line_end":520,"column_start":5,"column_end":100}},{"value":"/ a user of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457036,"byte_end":457061,"line_start":521,"line_end":521,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457066,"byte_end":457069,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ All `Style` structs are typically `Copy` and contain simple, descriptive fields like","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457074,"byte_end":457162,"line_start":523,"line_end":523,"column_start":5,"column_end":93}},{"value":"/ `color`, `font_size`, `line_spacing`, `border_width`, etc. These types are also required to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457167,"byte_end":457262,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ be `PartialEq`. This is so that the `Ui` may automatically compare the previous style to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457267,"byte_end":457359,"line_start":525,"line_end":525,"column_start":5,"column_end":97}},{"value":"/ the new style each time `.set` is called, allowing conrod to automatically determine","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457364,"byte_end":457452,"line_start":526,"line_end":526,"column_start":5,"column_end":93}},{"value":"/ whether or not something has changed and if a re-draw is required.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457457,"byte_end":457527,"line_start":527,"line_end":527,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457532,"byte_end":457535,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Each field in a `Style` struct is typically an `Option<T>`. This is so that each field may","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457540,"byte_end":457634,"line_start":529,"line_end":529,"column_start":5,"column_end":99}},{"value":"/ be *optionally specified*, indicating to fall back to defaults if the fields are `None`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457639,"byte_end":457730,"line_start":530,"line_end":530,"column_start":5,"column_end":96}},{"value":"/ upon style retrieval.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457735,"byte_end":457760,"line_start":531,"line_end":531,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457765,"byte_end":457768,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ The reason this data is required to be in its own `Style` type (rather than in the widget","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457773,"byte_end":457866,"line_start":533,"line_end":533,"column_start":5,"column_end":98}},{"value":"/ type itself) is so that conrod can distinguish between default style data that may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457871,"byte_end":457960,"line_start":534,"line_end":534,"column_start":5,"column_end":94}},{"value":"/ stored within the `Theme`'s `widget_styling` field, and other data that is necessary for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":457965,"byte_end":458057,"line_start":535,"line_end":535,"column_start":5,"column_end":97}},{"value":"/ the widget's behaviour logic. Having `Style` be an associated type makes it trivial to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458062,"byte_end":458152,"line_start":536,"line_end":536,"column_start":5,"column_end":95}},{"value":"/ retrieve unique, widget-specific styling data for each widget from a single method (see","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458157,"byte_end":458248,"line_start":537,"line_end":537,"column_start":5,"column_end":96}},{"value":"/ [`Theme::widget_style`](./theme/struct.Theme.html#method.widget_style)).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458253,"byte_end":458329,"line_start":538,"line_end":538,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458334,"byte_end":458337,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ## `#[derive(WidgetStyle)]`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458342,"byte_end":458373,"line_start":540,"line_end":540,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458378,"byte_end":458381,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ These `Style` types are often quite similar and their implementations can involve a lot of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458386,"byte_end":458480,"line_start":542,"line_end":542,"column_start":5,"column_end":99}},{"value":"/ boilerplate when written by hand. To get around this, conrod provides","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458485,"byte_end":458558,"line_start":543,"line_end":543,"column_start":5,"column_end":78}},{"value":"/ `#[derive(WidgetStyle)]`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458563,"byte_end":458592,"line_start":544,"line_end":544,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458597,"byte_end":458600,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This procedural macro generates a \"getter\"-style method for each struct field that is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458605,"byte_end":458694,"line_start":546,"line_end":546,"column_start":5,"column_end":94}},{"value":"/ decorated with a `#[conrod(default = \"expr\")]` attribute. The generated methods have the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458699,"byte_end":458791,"line_start":547,"line_end":547,"column_start":5,"column_end":97}},{"value":"/ same name as their respective fields and behave as follows:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458796,"byte_end":458859,"line_start":548,"line_end":548,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458864,"byte_end":458867,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ 1. First, the method will attempt to return the value directly if the field is `Some`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458872,"byte_end":458962,"line_start":550,"line_end":550,"column_start":5,"column_end":95}},{"value":"/ 2. If the field is `None`, the method will fall back to the `Widget::Style` stored within","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":458967,"byte_end":459060,"line_start":551,"line_end":551,"column_start":5,"column_end":98}},{"value":"/    the `Theme`'s `widget_styling` map.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459065,"byte_end":459107,"line_start":552,"line_end":552,"column_start":5,"column_end":47}},{"value":"/ 3. If there are no style defaults for the widget in the `Theme`, or if there is but the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459112,"byte_end":459203,"line_start":553,"line_end":553,"column_start":5,"column_end":96}},{"value":"/    default field is also `None`, the method will fall back to the expression specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459208,"byte_end":459298,"line_start":554,"line_end":554,"column_start":5,"column_end":95}},{"value":"/    within the field's `#[conrod(default = \"expr\")]` attribute.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459303,"byte_end":459369,"line_start":555,"line_end":555,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459374,"byte_end":459377,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ The given \"expr\" can be a string containing any expression that returns the type specified","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459382,"byte_end":459476,"line_start":557,"line_end":557,"column_start":5,"column_end":99}},{"value":"/ within the field's `Option` type parameter. The expression may also utilise the `theme` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459481,"byte_end":459576,"line_start":558,"line_end":558,"column_start":5,"column_end":100}},{"value":"/ `self` bindings, where `theme` is a binding to the borrowed `Theme` and `self` is a binding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459581,"byte_end":459676,"line_start":559,"line_end":559,"column_start":5,"column_end":100}},{"value":"/ to the borrowed instance of this `Style` type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459681,"byte_end":459731,"line_start":560,"line_end":560,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459736,"byte_end":459739,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459744,"byte_end":459758,"line_start":562,"line_end":562,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459763,"byte_end":459766,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459771,"byte_end":459778,"line_start":564,"line_end":564,"column_start":5,"column_end":12}},{"value":"/ # extern crate conrod_core;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459783,"byte_end":459814,"line_start":565,"line_end":565,"column_start":5,"column_end":36}},{"value":"/ # #[macro_use] extern crate conrod_derive;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459819,"byte_end":459865,"line_start":566,"line_end":566,"column_start":5,"column_end":51}},{"value":"/ # use conrod_core::{Color, FontSize, Scalar};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459870,"byte_end":459919,"line_start":567,"line_end":567,"column_start":5,"column_end":54}},{"value":"/ # fn main() {}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459924,"byte_end":459942,"line_start":568,"line_end":568,"column_start":5,"column_end":23}},{"value":"/ /// Unique styling for a Button widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459947,"byte_end":459990,"line_start":569,"line_end":569,"column_start":5,"column_end":48}},{"value":"/ #[derive(Copy, Clone, Debug, Default, PartialEq, WidgetStyle)]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":459995,"byte_end":460061,"line_start":570,"line_end":570,"column_start":5,"column_end":71}},{"value":"/ pub struct Style {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460066,"byte_end":460088,"line_start":571,"line_end":571,"column_start":5,"column_end":27}},{"value":"/     /// Color of the Button's pressable area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460093,"byte_end":460142,"line_start":572,"line_end":572,"column_start":5,"column_end":54}},{"value":"/     #[conrod(default = \"theme.shape_color\")]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460147,"byte_end":460195,"line_start":573,"line_end":573,"column_start":5,"column_end":53}},{"value":"/     pub color: Option<Color>,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460200,"byte_end":460233,"line_start":574,"line_end":574,"column_start":5,"column_end":38}},{"value":"/     /// Width of the border surrounding the button.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460238,"byte_end":460293,"line_start":575,"line_end":575,"column_start":5,"column_end":60}},{"value":"/     #[conrod(default = \"1.0\")]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460298,"byte_end":460332,"line_start":576,"line_end":576,"column_start":5,"column_end":39}},{"value":"/     pub border: Option<Scalar>,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460337,"byte_end":460372,"line_start":577,"line_end":577,"column_start":5,"column_end":40}},{"value":"/     /// The color of the Button's rectangular border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460377,"byte_end":460434,"line_start":578,"line_end":578,"column_start":5,"column_end":62}},{"value":"/     #[conrod(default = \"conrod_core::color::BLACK\")]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460439,"byte_end":460495,"line_start":579,"line_end":579,"column_start":5,"column_end":61}},{"value":"/     pub border_color: Option<Color>,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460500,"byte_end":460540,"line_start":580,"line_end":580,"column_start":5,"column_end":45}},{"value":"/     /// The color of the Button's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460545,"byte_end":460589,"line_start":581,"line_end":581,"column_start":5,"column_end":49}},{"value":"/     #[conrod(default = \"theme.label_color\")]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460594,"byte_end":460642,"line_start":582,"line_end":582,"column_start":5,"column_end":53}},{"value":"/     pub label_color: Option<Color>,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460647,"byte_end":460686,"line_start":583,"line_end":583,"column_start":5,"column_end":44}},{"value":"/     /// The font size for the Button's label.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460691,"byte_end":460740,"line_start":584,"line_end":584,"column_start":5,"column_end":54}},{"value":"/     #[conrod(default = \"12\")]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460745,"byte_end":460778,"line_start":585,"line_end":585,"column_start":5,"column_end":38}},{"value":"/     pub label_font_size: Option<FontSize>,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460783,"byte_end":460829,"line_start":586,"line_end":586,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460834,"byte_end":460839,"line_start":587,"line_end":587,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460844,"byte_end":460851,"line_start":588,"line_end":588,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":4448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461128,"byte_end":461133,"line_start":595,"line_end":595,"column_start":10,"column_end":15},"name":"Event","qualname":"::widget::Widget::Event","value":"type Event;","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" The type of event yielded by the widget, returned via the `Widget::set` function.","sig":null,"attributes":[{"value":"/ The type of event yielded by the widget, returned via the `Widget::set` function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460886,"byte_end":460971,"line_start":590,"line_end":590,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460976,"byte_end":460979,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ For a `Toggle` widget, this might be a `bool`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":460984,"byte_end":461034,"line_start":592,"line_end":592,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461039,"byte_end":461042,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ For a non-interactive, purely graphical widget, this might be `()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461047,"byte_end":461118,"line_start":594,"line_end":594,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":4449},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461331,"byte_end":461341,"line_start":601,"line_end":601,"column_start":8,"column_end":18},"name":"init_state","qualname":"::widget::Widget::init_state","value":"fn (&self, id::Generator) -> Self::State","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Return the initial **State** of the Widget.","sig":null,"attributes":[{"value":"/ Return the initial **State** of the Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461140,"byte_end":461187,"line_start":597,"line_end":597,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461192,"byte_end":461195,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ The `Ui` will only call this once, immediately prior to the first time that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461200,"byte_end":461279,"line_start":599,"line_end":599,"column_start":5,"column_end":84}},{"value":"/ **Widget::update** is first called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461284,"byte_end":461323,"line_start":600,"line_end":600,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461607,"byte_end":461612,"line_start":607,"line_end":607,"column_start":8,"column_end":13},"name":"style","qualname":"::widget::Widget::style","value":"fn (&self) -> Self::Style","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Return the styling of the widget.","sig":null,"attributes":[{"value":"/ Return the styling of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461385,"byte_end":461422,"line_start":603,"line_end":603,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461427,"byte_end":461430,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ The `Ui` will call this once prior to each `update`. It does this so that it can check for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461435,"byte_end":461529,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ differences in `Style` in case we need to re-draw the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461534,"byte_end":461599,"line_start":606,"line_end":606,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4451},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463027,"byte_end":463033,"line_start":629,"line_end":629,"column_start":8,"column_end":14},"name":"update","qualname":"::widget::Widget::update","value":"fn (self, args: UpdateArgs<Self>) -> Self::Event","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Update our **Widget**'s unique **Widget::State** via the **State** wrapper type (the\n `state` field within the [**UpdateArgs**](./struct.UpdateArgs)).","sig":null,"attributes":[{"value":"/ Update our **Widget**'s unique **Widget::State** via the **State** wrapper type (the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461641,"byte_end":461729,"line_start":609,"line_end":609,"column_start":5,"column_end":93}},{"value":"/ `state` field within the [**UpdateArgs**](./struct.UpdateArgs)).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461734,"byte_end":461802,"line_start":610,"line_end":610,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461807,"byte_end":461810,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ Whenever [**State::update**](./struct.State.html#method.update) is called, a `has_updated`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461815,"byte_end":461909,"line_start":612,"line_end":612,"column_start":5,"column_end":99}},{"value":"/ flag is set within the **State**, indicating that there has been some change to the unique","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":461914,"byte_end":462008,"line_start":613,"line_end":613,"column_start":5,"column_end":99}},{"value":"/ **Widget::State** and that we require re-drawing the **Widget**. As a result, widget","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462013,"byte_end":462101,"line_start":614,"line_end":614,"column_start":5,"column_end":93}},{"value":"/ designers should only call **State::update** when necessary, checking whether or not the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462106,"byte_end":462198,"line_start":615,"line_end":615,"column_start":5,"column_end":97}},{"value":"/ state has changed before invoking the method. See the custom_widget.rs example for a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462203,"byte_end":462291,"line_start":616,"line_end":616,"column_start":5,"column_end":93}},{"value":"/ demonstration of this.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462296,"byte_end":462322,"line_start":617,"line_end":617,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462327,"byte_end":462330,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462335,"byte_end":462350,"line_start":619,"line_end":619,"column_start":5,"column_end":20}},{"value":"/ * id - The `Widget`'s unique index (whether `Public` or `Internal`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462355,"byte_end":462427,"line_start":620,"line_end":620,"column_start":5,"column_end":77}},{"value":"/ * prev - The previous common state of the Widget. If this is the first time **update** is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462432,"byte_end":462525,"line_start":621,"line_end":621,"column_start":5,"column_end":98}},{"value":"/ called, `Widget::init_state` will be used to produce some initial state instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462530,"byte_end":462614,"line_start":622,"line_end":622,"column_start":5,"column_end":89}},{"value":"/ * state - A wrapper around the `Widget::State`. See the [**State** docs](./struct.State)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462619,"byte_end":462711,"line_start":623,"line_end":623,"column_start":5,"column_end":97}},{"value":"/ for more details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462716,"byte_end":462737,"line_start":624,"line_end":624,"column_start":5,"column_end":26}},{"value":"/ * rect - The position (centered) and dimensions of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462742,"byte_end":462808,"line_start":625,"line_end":625,"column_start":5,"column_end":71}},{"value":"/ * style - The style produced by the `Widget::style` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462813,"byte_end":462876,"line_start":626,"line_end":626,"column_start":5,"column_end":68}},{"value":"/ * ui - A wrapper around the `Ui`, offering restricted access to its functionality. See the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462881,"byte_end":462975,"line_start":627,"line_end":627,"column_start":5,"column_end":99}},{"value":"/ docs for `UiCell` for more details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":462980,"byte_end":463019,"line_start":628,"line_end":628,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463257,"byte_end":463275,"line_start":634,"line_end":634,"column_start":8,"column_end":26},"name":"default_x_position","qualname":"::widget::Widget::default_x_position","value":"fn (&self, ui: &Ui) -> Position","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" The default **Position** for the widget along the *x* axis.","sig":null,"attributes":[{"value":"/ The default **Position** for the widget along the *x* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463085,"byte_end":463148,"line_start":631,"line_end":631,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463153,"byte_end":463156,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ This is used when no **Position** is explicitly given when instantiating the Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463161,"byte_end":463249,"line_start":633,"line_end":633,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":4454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463641,"byte_end":463659,"line_start":643,"line_end":643,"column_start":8,"column_end":26},"name":"default_y_position","qualname":"::widget::Widget::default_y_position","value":"fn (&self, ui: &Ui) -> Position","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" The default **Position** for the widget along the *y* axis.","sig":null,"attributes":[{"value":"/ The default **Position** for the widget along the *y* axis.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463469,"byte_end":463532,"line_start":640,"line_end":640,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463537,"byte_end":463540,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ This is used when no **Position** is explicitly given when instantiating the Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463545,"byte_end":463633,"line_start":642,"line_end":642,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":4456},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464122,"byte_end":464141,"line_start":655,"line_end":655,"column_start":8,"column_end":27},"name":"default_x_dimension","qualname":"::widget::Widget::default_x_dimension","value":"fn (&self, ui: &Ui) -> Dimension","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" The default width for the **Widget**.","sig":null,"attributes":[{"value":"/ The default width for the **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463853,"byte_end":463894,"line_start":649,"line_end":649,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463899,"byte_end":463902,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ This method is only used if no height is explicitly given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463907,"byte_end":463969,"line_start":651,"line_end":651,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463974,"byte_end":463977,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ By default, this simply calls [**default_dimension**](./fn.default_dimension) with a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":463982,"byte_end":464070,"line_start":653,"line_end":653,"column_start":5,"column_end":93}},{"value":"/ fallback absolute dimension of 0.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464075,"byte_end":464114,"line_start":654,"line_end":654,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4457},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464412,"byte_end":464431,"line_start":663,"line_end":663,"column_start":8,"column_end":27},"name":"default_y_dimension","qualname":"::widget::Widget::default_y_dimension","value":"fn (&self, ui: &Ui) -> Dimension","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" The default height of the widget.","sig":null,"attributes":[{"value":"/ The default height of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464222,"byte_end":464259,"line_start":659,"line_end":659,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464264,"byte_end":464267,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ By default, this simply calls [**default_dimension**](./fn.default_dimension) with a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464272,"byte_end":464360,"line_start":661,"line_end":661,"column_start":5,"column_end":93}},{"value":"/ fallback absolute dimension of 0.0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464365,"byte_end":464404,"line_start":662,"line_end":662,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4458},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464705,"byte_end":464714,"line_start":669,"line_end":669,"column_start":8,"column_end":17},"name":"drag_area","qualname":"::widget::Widget::drag_area","value":"fn (&self, _dim: Dimensions, _style: &Self::Style, _theme: &Theme) -> Option<Rect>","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" If the widget is draggable, implement this method and return the position and dimensions of\n the draggable space. The position should be relative to the center of the widget.\n","sig":null,"attributes":[{"value":"/ If the widget is draggable, implement this method and return the position and dimensions of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464512,"byte_end":464607,"line_start":667,"line_end":667,"column_start":5,"column_end":100}},{"value":"/ the draggable space. The position should be relative to the center of the widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464612,"byte_end":464697,"line_start":668,"line_end":668,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":4459},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464976,"byte_end":464984,"line_start":678,"line_end":678,"column_start":8,"column_end":16},"name":"kid_area","qualname":"::widget::Widget::kid_area","value":"fn (&self, args: KidAreaArgs<Self>) -> KidArea","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" The area on which child widgets will be placed when using the `Place` `Position` methods.\n","sig":null,"attributes":[{"value":"/ The area on which child widgets will be placed when using the `Place` `Position` methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":464875,"byte_end":464968,"line_start":677,"line_end":677,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":4460},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466057,"byte_end":466064,"line_start":701,"line_end":701,"column_start":8,"column_end":15},"name":"is_over","qualname":"::widget::Widget::is_over","value":"fn (&self) -> IsOverFn","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Returns either of the following:","sig":null,"attributes":[{"value":"/ Returns either of the following:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465132,"byte_end":465168,"line_start":685,"line_end":685,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465173,"byte_end":465176,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ - A `Function` that can be used to describe whether or not a given point is over the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465181,"byte_end":465269,"line_start":687,"line_end":687,"column_start":5,"column_end":93}},{"value":"/ widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465274,"byte_end":465285,"line_start":688,"line_end":688,"column_start":5,"column_end":16}},{"value":"/ - The `Id` of another `Widget` that can be used to determine if the point is over this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465290,"byte_end":465380,"line_start":689,"line_end":689,"column_start":5,"column_end":95}},{"value":"/ widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465385,"byte_end":465396,"line_start":690,"line_end":690,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465401,"byte_end":465404,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ By default, this is a function returns `true` if the given `Point` is over the bounding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465409,"byte_end":465500,"line_start":692,"line_end":692,"column_start":5,"column_end":96}},{"value":"/ `Rect` and returns `false` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465505,"byte_end":465546,"line_start":693,"line_end":693,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465551,"byte_end":465554,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ *NOTE: It could be worth removing this in favour of adding a `widget::State` trait, adding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465559,"byte_end":465653,"line_start":695,"line_end":695,"column_start":5,"column_end":99}},{"value":"/ an `is_over` method to it and then refactoring the `Container` to store a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465658,"byte_end":465735,"line_start":696,"line_end":696,"column_start":5,"column_end":82}},{"value":"/ `Box<widget::State>` and `Box<widget::Style>` rather than `Box<Any>`. This would however","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465740,"byte_end":465832,"line_start":697,"line_end":697,"column_start":5,"column_end":97}},{"value":"/ involve some significant breakage (which could perhaps be mitigated by adding a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465837,"byte_end":465920,"line_start":698,"line_end":698,"column_start":5,"column_end":88}},{"value":"/ `derive(WidgetState)` macro - a fair chunk of work) so this might be the easiest temporary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":465925,"byte_end":466019,"line_start":699,"line_end":699,"column_start":5,"column_end":99}},{"value":"/ way forward for now.*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466024,"byte_end":466049,"line_start":700,"line_end":700,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4461},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466579,"byte_end":466585,"line_start":715,"line_end":715,"column_start":8,"column_end":14},"name":"parent","qualname":"::widget::Widget::parent","value":"fn (mut self, parent_id: Id) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Set the parent widget for this Widget by passing the WidgetId of the parent.","sig":null,"attributes":[{"value":"/ Set the parent widget for this Widget by passing the WidgetId of the parent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466424,"byte_end":466504,"line_start":712,"line_end":712,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466509,"byte_end":466512,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ This will attach this Widget to the parent widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466517,"byte_end":466571,"line_start":714,"line_end":714,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466778,"byte_end":466787,"line_start":721,"line_end":721,"column_start":8,"column_end":17},"name":"no_parent","qualname":"::widget::Widget::no_parent","value":"fn (mut self) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Specify that this widget has no parent widgets.\n","sig":null,"attributes":[{"value":"/ Specify that this widget has no parent widgets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466719,"byte_end":466770,"line_start":720,"line_end":720,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":4463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467479,"byte_end":467496,"line_start":736,"line_end":736,"column_start":8,"column_end":25},"name":"place_on_kid_area","qualname":"::widget::Widget::place_on_kid_area","value":"fn (mut self, b: bool) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Set whether or not the **Widget** should be placed on the kid_area.","sig":null,"attributes":[{"value":"/ Set whether or not the **Widget** should be placed on the kid_area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466895,"byte_end":466966,"line_start":726,"line_end":726,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466971,"byte_end":466974,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ If `true`, the **Widget** will be placed on the `kid_area` of the parent **Widget** if the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":466979,"byte_end":467073,"line_start":728,"line_end":728,"column_start":5,"column_end":99}},{"value":"/ **Widget** is given a **Place** variant for its **Position**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467078,"byte_end":467143,"line_start":729,"line_end":729,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467148,"byte_end":467151,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ If `false`, the **Widget** will be placed on the parent **Widget**'s *total* area.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467156,"byte_end":467242,"line_start":731,"line_end":731,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467247,"byte_end":467250,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ By default, conrod will automatically determine this for you by checking whether or not the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467255,"byte_end":467350,"line_start":733,"line_end":733,"column_start":5,"column_end":100}},{"value":"/ **Widget** that our **Widget** is being placed upon returns `Some` from its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467355,"byte_end":467434,"line_start":734,"line_end":734,"column_start":5,"column_end":84}},{"value":"/ **Widget::kid_area** method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467439,"byte_end":467471,"line_start":735,"line_end":735,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468466,"byte_end":468478,"line_start":756,"line_end":756,"column_start":8,"column_end":20},"name":"graphics_for","qualname":"::widget::Widget::graphics_for","value":"fn (mut self, id: Id) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Indicates that the **Widget** is used as a non-interactive graphical element for some other\n widget.","sig":null,"attributes":[{"value":"/ Indicates that the **Widget** is used as a non-interactive graphical element for some other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467599,"byte_end":467694,"line_start":741,"line_end":741,"column_start":5,"column_end":100}},{"value":"/ widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467699,"byte_end":467710,"line_start":742,"line_end":742,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467715,"byte_end":467718,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ This is useful for **Widget**s that are used to compose some other **Widget**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467723,"byte_end":467805,"line_start":744,"line_end":744,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467810,"byte_end":467813,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ When adding an edge *a -> b* where *b* is considered to be a graphical element of *a*,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467818,"byte_end":467908,"line_start":746,"line_end":746,"column_start":5,"column_end":95}},{"value":"/ several things are implied about *b*:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467913,"byte_end":467954,"line_start":747,"line_end":747,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467959,"byte_end":467962,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ - If *b* is picked within either **Graph::pick_widget** or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":467967,"byte_end":468029,"line_start":749,"line_end":749,"column_start":5,"column_end":67}},{"value":"/ **Graph::pick_top_scrollable_widget**, it will instead return the index for *a*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468034,"byte_end":468118,"line_start":750,"line_end":750,"column_start":5,"column_end":89}},{"value":"/ - When determining the **Graph::scroll_offset** for *b*, *a*'s scrolling (if it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468123,"byte_end":468209,"line_start":751,"line_end":751,"column_start":5,"column_end":91}},{"value":"/ scrollable, that is) will be skipped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468214,"byte_end":468255,"line_start":752,"line_end":752,"column_start":5,"column_end":46}},{"value":"/ - *b* will always be placed upon *a*'s total area, rather than its kid_area which is the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468260,"byte_end":468352,"line_start":753,"line_end":753,"column_start":5,"column_end":97}},{"value":"/ default.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468357,"byte_end":468369,"line_start":754,"line_end":754,"column_start":5,"column_end":17}},{"value":"/ - Any **Graphic** child of *b* will be considered as a **Graphic** child of *a*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468374,"byte_end":468458,"line_start":755,"line_end":755,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":4465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469103,"byte_end":469111,"line_start":768,"line_end":768,"column_start":8,"column_end":16},"name":"floating","qualname":"::widget::Widget::floating","value":"fn (mut self, is_floating: bool) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Set whether or not the widget is floating (the default is `false`).\n A typical example of a floating widget would be a pop-up or alert window.","sig":null,"attributes":[{"value":"/ Set whether or not the widget is floating (the default is `false`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468588,"byte_end":468659,"line_start":761,"line_end":761,"column_start":5,"column_end":76}},{"value":"/ A typical example of a floating widget would be a pop-up or alert window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468664,"byte_end":468741,"line_start":762,"line_end":762,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468746,"byte_end":468749,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ A \"floating\" widget will always be rendered *after* its parent tree and all widgets","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468754,"byte_end":468841,"line_start":764,"line_end":764,"column_start":5,"column_end":92}},{"value":"/ connected to its parent tree. If two sibling widgets are both floating, then the one that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468846,"byte_end":468939,"line_start":765,"line_end":765,"column_start":5,"column_end":98}},{"value":"/ was last clicked will be rendered last. If neither are clicked, they will be rendered in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":468944,"byte_end":469036,"line_start":766,"line_end":766,"column_start":5,"column_end":97}},{"value":"/ the order in which they were cached into the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469041,"byte_end":469095,"line_start":767,"line_end":767,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4466},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469358,"byte_end":469367,"line_start":775,"line_end":775,"column_start":8,"column_end":17},"name":"crop_kids","qualname":"::widget::Widget::crop_kids","value":"fn (mut self) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Indicates that all widgets who are children of this widget should be cropped to the\n `kid_area` of this widget.\n","sig":null,"attributes":[{"value":"/ Indicates that all widgets who are children of this widget should be cropped to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469228,"byte_end":469315,"line_start":773,"line_end":773,"column_start":5,"column_end":92}},{"value":"/ `kid_area` of this widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469320,"byte_end":469350,"line_start":774,"line_end":774,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469726,"byte_end":469737,"line_start":786,"line_end":786,"column_start":8,"column_end":19},"name":"scroll_kids","qualname":"::widget::Widget::scroll_kids","value":"fn (self) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Makes the widget's `KidArea` scrollable.","sig":null,"attributes":[{"value":"/ Makes the widget's `KidArea` scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469456,"byte_end":469500,"line_start":780,"line_end":780,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469505,"byte_end":469508,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ If a widget is scrollable and it has children widgets that fall outside of its `KidArea`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469513,"byte_end":469606,"line_start":782,"line_end":782,"column_start":5,"column_end":98}},{"value":"/ the `KidArea` will become scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469611,"byte_end":469652,"line_start":783,"line_end":783,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469657,"byte_end":469660,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ This method calls `Widget::crop_kids` internally.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469665,"byte_end":469718,"line_start":785,"line_end":785,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470112,"byte_end":470134,"line_start":796,"line_end":796,"column_start":8,"column_end":30},"name":"scroll_kids_vertically","qualname":"::widget::Widget::scroll_kids_vertically","value":"fn (mut self) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Makes the widget's `KidArea` scrollable.","sig":null,"attributes":[{"value":"/ Makes the widget's `KidArea` scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469842,"byte_end":469886,"line_start":790,"line_end":790,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469891,"byte_end":469894,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ If a widget is scrollable and it has children widgets that fall outside of its `KidArea`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469899,"byte_end":469992,"line_start":792,"line_end":792,"column_start":5,"column_end":98}},{"value":"/ the `KidArea` will become scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":469997,"byte_end":470038,"line_start":793,"line_end":793,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470043,"byte_end":470046,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ This method calls `Widget::crop_kids` internally.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470051,"byte_end":470104,"line_start":795,"line_end":795,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470572,"byte_end":470596,"line_start":807,"line_end":807,"column_start":8,"column_end":32},"name":"scroll_kids_horizontally","qualname":"::widget::Widget::scroll_kids_horizontally","value":"fn (mut self) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Set whether or not the widget's `KidArea` is scrollable (the default is false).","sig":null,"attributes":[{"value":"/ Set whether or not the widget's `KidArea` is scrollable (the default is false).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470263,"byte_end":470346,"line_start":801,"line_end":801,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470351,"byte_end":470354,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ If a widget is scrollable and it has children widgets that fall outside of its `KidArea`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470359,"byte_end":470452,"line_start":803,"line_end":803,"column_start":5,"column_end":98}},{"value":"/ the `KidArea` will become scrollable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470457,"byte_end":470498,"line_start":804,"line_end":804,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470503,"byte_end":470506,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ This method calls `Widget::crop_kids` internally.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470511,"byte_end":470564,"line_start":806,"line_end":806,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":4470},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470996,"byte_end":470999,"line_start":817,"line_end":817,"column_start":8,"column_end":11},"name":"and","qualname":"::widget::Widget::and","value":"fn <F> (self, build: F) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" A builder method that \"lifts\" the **Widget** through the given `build` function.","sig":null,"attributes":[{"value":"/ A builder method that \"lifts\" the **Widget** through the given `build` function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470725,"byte_end":470809,"line_start":812,"line_end":812,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470814,"byte_end":470817,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ This method is solely for providing slight ergonomic improvement by helping to maintain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470822,"byte_end":470913,"line_start":814,"line_end":814,"column_start":5,"column_end":96}},{"value":"/ the symmetry of the `builder` pattern in some cases.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470918,"byte_end":470974,"line_start":815,"line_end":815,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":470979,"byte_end":470988,"line_start":816,"line_end":816,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4472},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471372,"byte_end":471379,"line_start":828,"line_end":828,"column_start":8,"column_end":15},"name":"and_mut","qualname":"::widget::Widget::and_mut","value":"fn <F> (mut self, mutate: F) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" A builder method that mutates the **Widget** with the given `mutate` function.","sig":null,"attributes":[{"value":"/ A builder method that mutates the **Widget** with the given `mutate` function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471103,"byte_end":471185,"line_start":823,"line_end":823,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471190,"byte_end":471193,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ This method is solely for providing slight ergonomic improvement by helping to maintain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471198,"byte_end":471289,"line_start":825,"line_end":825,"column_start":5,"column_end":96}},{"value":"/ the symmetry of the `builder` pattern in some cases.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471294,"byte_end":471350,"line_start":826,"line_end":826,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471355,"byte_end":471364,"line_start":827,"line_end":827,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4474},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471739,"byte_end":471745,"line_start":841,"line_end":841,"column_start":8,"column_end":14},"name":"and_if","qualname":"::widget::Widget::and_if","value":"fn <F> (self, cond: bool, build: F) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" A method that conditionally builds the **Widget** with the given `build` function.","sig":null,"attributes":[{"value":"/ A method that conditionally builds the **Widget** with the given `build` function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471505,"byte_end":471591,"line_start":835,"line_end":835,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471596,"byte_end":471599,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ If `cond` is `true`, `build(self)` is evaluated and returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471604,"byte_end":471669,"line_start":837,"line_end":837,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471674,"byte_end":471677,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ If `false`, `self` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471682,"byte_end":471717,"line_start":839,"line_end":839,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471722,"byte_end":471731,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4476},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472124,"byte_end":472132,"line_start":853,"line_end":853,"column_start":8,"column_end":16},"name":"and_then","qualname":"::widget::Widget::and_then","value":"fn <T, F> (self, maybe: Option<T>, build: F) -> Self","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" A method that optionally builds the **Widget** with the given `build` function.","sig":null,"attributes":[{"value":"/ A method that optionally builds the **Widget** with the given `build` function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471887,"byte_end":471970,"line_start":847,"line_end":847,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471975,"byte_end":471978,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ If `maybe` is `Some(t)`, `build(self, t)` is evaluated and returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":471983,"byte_end":472055,"line_start":849,"line_end":849,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472060,"byte_end":472063,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ If `None`, `self` is returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472068,"byte_end":472102,"line_start":851,"line_end":851,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472107,"byte_end":472116,"line_start":852,"line_end":852,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472990,"byte_end":472993,"line_start":869,"line_end":869,"column_start":8,"column_end":11},"name":"set","qualname":"::widget::Widget::set","value":"fn <'a, 'b> (self, id: Id, ui_cell: &'a mut UiCell<'b>) -> Self::Event","parent":{"krate":0,"index":4445},"children":[],"decl_id":null,"docs":" Note: There should be no need to override this method.","sig":null,"attributes":[{"value":"/ Note: There should be no need to override this method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472304,"byte_end":472362,"line_start":859,"line_end":859,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472367,"byte_end":472370,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ After building the widget, you call this method to set its current state into the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472375,"byte_end":472466,"line_start":861,"line_end":861,"column_start":5,"column_end":96}},{"value":"/ `Ui`. More precisely, the following will occur when calling this method:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472471,"byte_end":472547,"line_start":862,"line_end":862,"column_start":5,"column_end":81}},{"value":"/ - The widget's previous state and style will be retrieved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472552,"byte_end":472614,"line_start":863,"line_end":863,"column_start":5,"column_end":67}},{"value":"/ - The widget's current `Style` will be retrieved (from the `Widget::style` method).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472619,"byte_end":472706,"line_start":864,"line_end":864,"column_start":5,"column_end":92}},{"value":"/ - The widget's state will be updated (using the `Widget::udpate` method).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472711,"byte_end":472788,"line_start":865,"line_end":865,"column_start":5,"column_end":82}},{"value":"/ - If the widget's state or style has changed, the **Ui** will be notified that the widget","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472793,"byte_end":472886,"line_start":866,"line_end":866,"column_start":5,"column_end":98}},{"value":"/ needs to be re-drawn.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472891,"byte_end":472916,"line_start":867,"line_end":867,"column_start":5,"column_end":30}},{"value":"/ - The new State and Style will be cached within the `Ui`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":472921,"byte_end":472982,"line_start":868,"line_end":868,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4509},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488098,"byte_end":488104,"line_start":1223,"line_end":1223,"column_start":12,"column_end":18},"name":"update","qualname":"<State>::update","value":"fn <F> (&mut self, f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mutate the internal widget state and set a flag notifying us that there has been a mutation.","sig":null,"attributes":[{"value":"/ Mutate the internal widget state and set a flag notifying us that there has been a mutation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487584,"byte_end":487680,"line_start":1215,"line_end":1215,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487685,"byte_end":487688,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ If this method is *not* called, we assume that there has been no mutation and in turn we do","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487693,"byte_end":487788,"line_start":1217,"line_end":1217,"column_start":5,"column_end":100}},{"value":"/ not need to re-draw the Widget.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487793,"byte_end":487828,"line_start":1218,"line_end":1218,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487833,"byte_end":487836,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ If this method *is* called, we assume that there has been some mutation and in turn will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487841,"byte_end":487933,"line_start":1220,"line_end":1220,"column_start":5,"column_end":97}},{"value":"/ need to re-draw the Widget. Thus, it is recommended that you *only* call this method if you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487938,"byte_end":488033,"line_start":1221,"line_end":1221,"column_start":5,"column_end":100}},{"value":"/ need to update the unique state in some way.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488038,"byte_end":488086,"line_start":1222,"line_end":1222,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":4540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor","qualname":"::cursor","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","parent":null,"children":[{"krate":0,"index":9246},{"krate":0,"index":9281},{"krate":0,"index":9279},{"krate":0,"index":9277},{"krate":0,"index":9273},{"krate":0,"index":9274},{"krate":0,"index":9270},{"krate":0,"index":9271}],"decl_id":null,"docs":" Contains an extendable enum of supported mouse cursor types.","sig":null,"attributes":[{"value":"! Contains an extendable enum of supported mouse cursor types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":988672,"byte_end":988736,"line_start":1,"line_end":1,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":988737,"byte_end":988740,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Use this module to map from the conrod's mouse cursor types to the types known to the window","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":988741,"byte_end":988837,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"! backend you are using. A lot of these are already implemented in `conrod::backend`. Unless you","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":988838,"byte_end":988936,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"! are using custom mouse cursor types not provided here, then using one of the implementations in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":988937,"byte_end":989036,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"! `conrod::backend` should be sufficient.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989037,"byte_end":989080,"line_start":6,"line_end":6,"column_start":1,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989366,"byte_end":989371,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Arrow","qualname":"::cursor::MouseCursor::Arrow","value":"MouseCursor::Arrow","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Default mouse cursor.\n","sig":null,"attributes":[{"value":"/ Default mouse cursor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989336,"byte_end":989361,"line_start":12,"line_end":12,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989404,"byte_end":989408,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Text","qualname":"::cursor::MouseCursor::Text","value":"MouseCursor::Text","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Text input curosr.\n","sig":null,"attributes":[{"value":"/ Text input curosr.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989377,"byte_end":989399,"line_start":14,"line_end":14,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989452,"byte_end":989464,"line_start":17,"line_end":17,"column_start":5,"column_end":17},"name":"VerticalText","qualname":"::cursor::MouseCursor::VerticalText","value":"MouseCursor::VerticalText","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Text input for vertical text.\n","sig":null,"attributes":[{"value":"/ Text input for vertical text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989414,"byte_end":989447,"line_start":16,"line_end":16,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9253},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989519,"byte_end":989523,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Hand","qualname":"::cursor::MouseCursor::Hand","value":"MouseCursor::Hand","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Open hand with index finger pointing up.\n","sig":null,"attributes":[{"value":"/ Open hand with index finger pointing up.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989470,"byte_end":989514,"line_start":18,"line_end":18,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989548,"byte_end":989552,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Grab","qualname":"::cursor::MouseCursor::Grab","value":"MouseCursor::Grab","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Open hand.\n","sig":null,"attributes":[{"value":"/ Open hand.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989529,"byte_end":989543,"line_start":20,"line_end":20,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9257},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989579,"byte_end":989587,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"name":"Grabbing","qualname":"::cursor::MouseCursor::Grabbing","value":"MouseCursor::Grabbing","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Closed hand.\n","sig":null,"attributes":[{"value":"/ Closed hand.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989558,"byte_end":989574,"line_start":22,"line_end":22,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9259},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989625,"byte_end":989639,"line_start":25,"line_end":25,"column_start":5,"column_end":19},"name":"ResizeVertical","qualname":"::cursor::MouseCursor::ResizeVertical","value":"MouseCursor::ResizeVertical","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Vertical resize cursor.\n","sig":null,"attributes":[{"value":"/ Vertical resize cursor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989593,"byte_end":989620,"line_start":24,"line_end":24,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989679,"byte_end":989695,"line_start":27,"line_end":27,"column_start":5,"column_end":21},"name":"ResizeHorizontal","qualname":"::cursor::MouseCursor::ResizeHorizontal","value":"MouseCursor::ResizeHorizontal","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Horizontal resize cursor.\n","sig":null,"attributes":[{"value":"/ Horizontal resize cursor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989645,"byte_end":989674,"line_start":26,"line_end":26,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9263},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989779,"byte_end":989803,"line_start":29,"line_end":29,"column_start":5,"column_end":29},"name":"ResizeTopLeftBottomRight","qualname":"::cursor::MouseCursor::ResizeTopLeftBottomRight","value":"MouseCursor::ResizeTopLeftBottomRight","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Diagonal resize cursor pointing to top left and bottom right corners.\n","sig":null,"attributes":[{"value":"/ Diagonal resize cursor pointing to top left and bottom right corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989701,"byte_end":989774,"line_start":28,"line_end":28,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9265},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989886,"byte_end":989910,"line_start":31,"line_end":31,"column_start":5,"column_end":29},"name":"ResizeTopRightBottomLeft","qualname":"::cursor::MouseCursor::ResizeTopRightBottomLeft","value":"MouseCursor::ResizeTopRightBottomLeft","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Diagonal resize cursor pointing to top right to bottom left corners.\n","sig":null,"attributes":[{"value":"/ Diagonal resize cursor pointing to top right to bottom left corners.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989809,"byte_end":989881,"line_start":30,"line_end":30,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9267},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989987,"byte_end":989993,"line_start":33,"line_end":33,"column_start":5,"column_end":11},"name":"Custom","qualname":"::cursor::MouseCursor::Custom","value":"MouseCursor::Custom(u8)","parent":{"krate":0,"index":9246},"children":[],"decl_id":null,"docs":" Custom cursor variant. Encode your favourite cursor with a u8.\n","sig":null,"attributes":[{"value":"/ Custom cursor variant. Encode your favourite cursor with a u8.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989916,"byte_end":989982,"line_start":32,"line_end":32,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":9246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989318,"byte_end":989329,"line_start":11,"line_end":11,"column_start":10,"column_end":21},"name":"MouseCursor","qualname":"::cursor::MouseCursor","value":"MouseCursor::{Arrow, Text, VerticalText, Hand, Grab, Grabbing, ResizeVertical, ResizeHorizontal, ResizeTopLeftBottomRight, ResizeTopRightBottomLeft, Custom}","parent":null,"children":[{"krate":0,"index":9247},{"krate":0,"index":9249},{"krate":0,"index":9251},{"krate":0,"index":9253},{"krate":0,"index":9255},{"krate":0,"index":9257},{"krate":0,"index":9259},{"krate":0,"index":9261},{"krate":0,"index":9263},{"krate":0,"index":9265},{"krate":0,"index":9267}],"decl_id":null,"docs":" This enum specifies cursor types used by internal widgets. For custom widgets using custom\n cursor types, you can still use this enum by specifying a numbered custom variant.\n","sig":null,"attributes":[{"value":"/ This enum specifies cursor types used by internal widgets. For custom widgets using custom","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989082,"byte_end":989176,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ cursor types, you can still use this enum by specifying a numbered custom variant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/cursor.rs","byte_start":989177,"byte_end":989263,"line_start":9,"line_end":9,"column_start":1,"column_end":87}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5499,"byte_end":5504,"line_start":101,"line_end":101,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11480,"byte_end":11484,"line_start":288,"line_end":288,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11575,"byte_end":11580,"line_start":294,"line_end":294,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11847,"byte_end":11851,"line_start":306,"line_end":306,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11942,"byte_end":11947,"line_start":312,"line_end":312,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":12061,"byte_end":12065,"line_start":318,"line_end":318,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34367,"byte_end":34373,"line_start":326,"line_end":326,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34792,"byte_end":34798,"line_start":341,"line_end":341,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35090,"byte_end":35095,"line_start":351,"line_end":351,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36097,"byte_end":36104,"line_start":388,"line_end":388,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37124,"byte_end":37127,"line_start":425,"line_end":425,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37341,"byte_end":37346,"line_start":435,"line_end":435,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37563,"byte_end":37574,"line_start":445,"line_end":445,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37809,"byte_end":37813,"line_start":455,"line_end":455,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38141,"byte_end":38146,"line_start":468,"line_end":468,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38261,"byte_end":38266,"line_start":474,"line_end":474,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38367,"byte_end":38372,"line_start":480,"line_end":480,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38457,"byte_end":38462,"line_start":486,"line_end":486,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38556,"byte_end":38562,"line_start":492,"line_end":492,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38657,"byte_end":38663,"line_start":498,"line_end":498,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38772,"byte_end":38778,"line_start":504,"line_end":504,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38883,"byte_end":38889,"line_start":510,"line_end":510,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38989,"byte_end":38995,"line_start":516,"line_end":516,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39101,"byte_end":39107,"line_start":522,"line_end":522,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39211,"byte_end":39217,"line_start":528,"line_end":528,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39339,"byte_end":39345,"line_start":534,"line_end":534,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39436,"byte_end":39442,"line_start":540,"line_end":540,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39543,"byte_end":39549,"line_start":546,"line_end":546,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73245,"byte_end":73256,"line_start":34,"line_end":34,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75845,"byte_end":75866,"line_start":107,"line_end":107,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85741,"byte_end":85751,"line_start":21,"line_end":21,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44048,"byte_end":44056,"line_start":110,"line_end":110,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46090,"byte_end":46099,"line_start":167,"line_end":167,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46908,"byte_end":46912,"line_start":190,"line_end":190,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47099,"byte_end":47104,"line_start":200,"line_end":200,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71409,"byte_end":71417,"line_start":781,"line_end":781,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71593,"byte_end":71600,"line_start":789,"line_end":789,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71793,"byte_end":71798,"line_start":798,"line_end":798,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71964,"byte_end":71969,"line_start":805,"line_end":805,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":72111,"byte_end":72116,"line_start":811,"line_end":811,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":72270,"byte_end":72275,"line_start":818,"line_end":818,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131052,"byte_end":131055,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131172,"byte_end":131175,"line_start":47,"line_end":47,"column_start":11,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":133772,"byte_end":133778,"line_start":118,"line_end":118,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":134019,"byte_end":134025,"line_start":128,"line_end":128,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140250,"byte_end":140255,"line_start":43,"line_end":43,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143427,"byte_end":143432,"line_start":145,"line_end":145,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143646,"byte_end":143660,"line_start":155,"line_end":155,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145139,"byte_end":145148,"line_start":201,"line_end":201,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":147188,"byte_end":147197,"line_start":262,"line_end":262,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":147389,"byte_end":147403,"line_start":269,"line_end":269,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153774,"byte_end":153780,"line_start":162,"line_end":162,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157410,"byte_end":157415,"line_start":258,"line_end":258,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157885,"byte_end":157892,"line_start":277,"line_end":277,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158343,"byte_end":158355,"line_start":296,"line_end":296,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159227,"byte_end":159235,"line_start":323,"line_end":323,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159704,"byte_end":159717,"line_start":343,"line_end":343,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160601,"byte_end":160607,"line_start":370,"line_end":370,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161306,"byte_end":161311,"line_start":397,"line_end":397,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":162018,"byte_end":162024,"line_start":425,"line_end":425,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":164829,"byte_end":164836,"line_start":493,"line_end":493,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":165134,"byte_end":165146,"line_start":505,"line_end":505,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":165454,"byte_end":165472,"line_start":517,"line_end":517,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":165836,"byte_end":165846,"line_start":529,"line_end":529,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":166146,"byte_end":166154,"line_start":541,"line_end":541,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":166460,"byte_end":166473,"line_start":553,"line_end":553,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":166792,"byte_end":166811,"line_start":565,"line_end":565,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":167184,"byte_end":167195,"line_start":577,"line_end":577,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":167506,"byte_end":167512,"line_start":589,"line_end":589,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":167810,"byte_end":167822,"line_start":601,"line_end":601,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168108,"byte_end":168112,"line_start":613,"line_end":613,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168402,"byte_end":168407,"line_start":625,"line_end":625,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168701,"byte_end":168712,"line_start":637,"line_end":637,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168993,"byte_end":168998,"line_start":649,"line_end":649,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":169292,"byte_end":169299,"line_start":661,"line_end":661,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171076,"byte_end":171082,"line_start":40,"line_end":40,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171953,"byte_end":171959,"line_start":72,"line_end":72,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":172226,"byte_end":172232,"line_start":80,"line_end":80,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":172376,"byte_end":172384,"line_start":87,"line_end":87,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138335,"byte_end":138337,"line_start":115,"line_end":115,"column_start":10,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138465,"byte_end":138470,"line_start":124,"line_end":124,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178503,"byte_end":178507,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":710},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196285,"byte_end":196293,"line_start":563,"line_end":563,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196869,"byte_end":196879,"line_start":581,"line_end":581,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":197014,"byte_end":197024,"line_start":588,"line_end":588,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":197127,"byte_end":197137,"line_start":594,"line_end":594,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":197281,"byte_end":197291,"line_start":600,"line_end":600,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230744,"byte_end":230749,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251364,"byte_end":251368,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229894,"byte_end":229901,"line_start":814,"line_end":814,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265862,"byte_end":265872,"line_start":69,"line_end":69,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265993,"byte_end":266012,"line_start":75,"line_end":75,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271273,"byte_end":271277,"line_start":235,"line_end":235,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":273599,"byte_end":273609,"line_start":287,"line_end":287,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":295201,"byte_end":295216,"line_start":756,"line_end":756,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":295927,"byte_end":295946,"line_start":780,"line_end":780,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304457,"byte_end":304462,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306000,"byte_end":306002,"line_start":146,"line_end":146,"column_start":10,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1186}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306143,"byte_end":306146,"line_start":155,"line_end":155,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1193}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":308875,"byte_end":308881,"line_start":233,"line_end":233,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309053,"byte_end":309056,"line_start":240,"line_end":240,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309232,"byte_end":309237,"line_start":247,"line_end":247,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309358,"byte_end":309363,"line_start":253,"line_end":253,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309586,"byte_end":309591,"line_start":262,"line_end":262,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":314574,"byte_end":314586,"line_start":385,"line_end":385,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1258},{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":315326,"byte_end":315346,"line_start":404,"line_end":404,"column_start":30,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1264},{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":316891,"byte_end":316896,"line_start":445,"line_end":445,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":317516,"byte_end":317529,"line_start":461,"line_end":461,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320179,"byte_end":320184,"line_start":532,"line_end":532,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1299},{"krate":0,"index":1303},{"krate":0,"index":1307},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":333612,"byte_end":333622,"line_start":842,"line_end":842,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":334673,"byte_end":334691,"line_start":866,"line_end":866,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":334874,"byte_end":334876,"line_start":873,"line_end":873,"column_start":31,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339867,"byte_end":339872,"line_start":996,"line_end":996,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":340595,"byte_end":340600,"line_start":1020,"line_end":1020,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341067,"byte_end":341071,"line_start":1037,"line_end":1037,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341829,"byte_end":341834,"line_start":1061,"line_end":1061,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353973,"byte_end":353978,"line_start":1366,"line_end":1366,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1419},{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":357626,"byte_end":357631,"line_start":1455,"line_end":1455,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":358745,"byte_end":358758,"line_start":1487,"line_end":1487,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362024,"byte_end":362037,"line_start":77,"line_end":77,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362269,"byte_end":362274,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369390,"byte_end":369399,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":371111,"byte_end":371113,"line_start":167,"line_end":167,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":1501},{"krate":0,"index":1505},{"krate":0,"index":1507},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1569},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419406,"byte_end":419412,"line_start":1189,"line_end":1189,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421879,"byte_end":421885,"line_start":1256,"line_end":1256,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":423168,"byte_end":423174,"line_start":1293,"line_end":1293,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1602},{"krate":0,"index":1603}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":423280,"byte_end":423286,"line_start":1300,"line_end":1300,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500133,"byte_end":500142,"line_start":33,"line_end":33,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1795}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500905,"byte_end":500909,"line_start":57,"line_end":57,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501690,"byte_end":501694,"line_start":85,"line_end":85,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501790,"byte_end":501798,"line_start":92,"line_end":92,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1804}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513211,"byte_end":513217,"line_start":67,"line_end":67,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513370,"byte_end":513375,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":519410,"byte_end":519411,"line_start":228,"line_end":228,"column_start":15,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":519780,"byte_end":519781,"line_start":253,"line_end":253,"column_start":15,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522979,"byte_end":522983,"line_start":70,"line_end":70,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525932,"byte_end":525937,"line_start":154,"line_end":154,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1892},{"krate":0,"index":1895},{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":529007,"byte_end":529011,"line_start":259,"line_end":259,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":530217,"byte_end":530221,"line_start":304,"line_end":304,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533500,"byte_end":533505,"line_start":43,"line_end":43,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":6143}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":535450,"byte_end":535455,"line_start":93,"line_end":93,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537900,"byte_end":537909,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541924,"byte_end":541933,"line_start":145,"line_end":145,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":543813,"byte_end":543822,"line_start":202,"line_end":202,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":544512,"byte_end":544521,"line_start":231,"line_end":231,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2002},{"krate":0,"index":2003}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":547951,"byte_end":547957,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550071,"byte_end":550075,"line_start":37,"line_end":37,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2051}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550641,"byte_end":550648,"line_start":54,"line_end":54,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2053}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551092,"byte_end":551096,"line_start":70,"line_end":70,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2060}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552107,"byte_end":552111,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2063},{"krate":0,"index":2064}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552751,"byte_end":552755,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2066}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":553065,"byte_end":553069,"line_start":131,"line_end":131,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":553894,"byte_end":553898,"line_start":165,"line_end":165,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554901,"byte_end":554914,"line_start":199,"line_end":199,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556566,"byte_end":556579,"line_start":243,"line_end":243,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557624,"byte_end":557637,"line_start":271,"line_end":271,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2093},{"krate":0,"index":2094}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":558223,"byte_end":558232,"line_start":293,"line_end":293,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2096},{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561797,"byte_end":561804,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":567205,"byte_end":567212,"line_start":191,"line_end":191,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":569425,"byte_end":569432,"line_start":260,"line_end":260,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2160}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":570153,"byte_end":570162,"line_start":290,"line_end":290,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2165},{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572167,"byte_end":572176,"line_start":38,"line_end":38,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":573143,"byte_end":573152,"line_start":71,"line_end":71,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":573861,"byte_end":573870,"line_start":103,"line_end":103,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2201}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576168,"byte_end":576173,"line_start":62,"line_end":62,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2226},{"krate":0,"index":2227}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576319,"byte_end":576331,"line_start":71,"line_end":71,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2229},{"krate":0,"index":2230}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576506,"byte_end":576517,"line_start":81,"line_end":81,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2232}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576563,"byte_end":576573,"line_start":85,"line_end":85,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576935,"byte_end":576943,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2237},{"krate":0,"index":2238}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577421,"byte_end":577429,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2241},{"krate":0,"index":2242}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577951,"byte_end":577959,"line_start":129,"line_end":129,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2245},{"krate":0,"index":2247}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578101,"byte_end":578109,"line_start":138,"line_end":138,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2251}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578236,"byte_end":578244,"line_start":146,"line_end":146,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2255}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578377,"byte_end":578385,"line_start":154,"line_end":154,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578494,"byte_end":578502,"line_start":162,"line_end":162,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2263}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578619,"byte_end":578628,"line_start":171,"line_end":171,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2267}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578889,"byte_end":578898,"line_start":182,"line_end":182,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2270}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579377,"byte_end":579386,"line_start":196,"line_end":196,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2274}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580014,"byte_end":580030,"line_start":216,"line_end":216,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2284},{"krate":0,"index":2285}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580496,"byte_end":580517,"line_start":234,"line_end":234,"column_start":12,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583881,"byte_end":583890,"line_start":305,"line_end":305,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587057,"byte_end":587065,"line_start":418,"line_end":418,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546359,"byte_end":546364,"line_start":24,"line_end":24,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590959,"byte_end":590963,"line_start":83,"line_end":83,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":6547},{"krate":0,"index":6548},{"krate":0,"index":6549}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592930,"byte_end":592934,"line_start":148,"line_end":148,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2370},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2374},{"krate":0,"index":2377}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":597821,"byte_end":597825,"line_start":279,"line_end":279,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2386}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599201,"byte_end":599218,"line_start":55,"line_end":55,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2412},{"krate":0,"index":6596}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599527,"byte_end":599544,"line_start":70,"line_end":70,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":600714,"byte_end":600731,"line_start":111,"line_end":111,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6597}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":600816,"byte_end":600833,"line_start":116,"line_end":116,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":6598},{"krate":0,"index":6599}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602892,"byte_end":602914,"line_start":179,"line_end":179,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2426}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":604113,"byte_end":604135,"line_start":208,"line_end":208,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2429}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609074,"byte_end":609086,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2453}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609224,"byte_end":609236,"line_start":132,"line_end":132,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2455},{"krate":0,"index":2456}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609439,"byte_end":609445,"line_start":145,"line_end":145,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611002,"byte_end":611008,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611890,"byte_end":611896,"line_start":227,"line_end":227,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":6751}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":613548,"byte_end":613554,"line_start":284,"line_end":284,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2483},{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2488}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":614768,"byte_end":614774,"line_start":323,"line_end":323,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":618640,"byte_end":618646,"line_start":435,"line_end":435,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6752}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":618744,"byte_end":618750,"line_start":439,"line_end":439,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6753},{"krate":0,"index":6754}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":618926,"byte_end":618932,"line_start":446,"line_end":446,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":6755},{"krate":0,"index":6756},{"krate":0,"index":6757}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624185,"byte_end":624191,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2550},{"krate":0,"index":6894},{"krate":0,"index":6895},{"krate":0,"index":6896},{"krate":0,"index":6897},{"krate":0,"index":6898},{"krate":0,"index":6899},{"krate":0,"index":2551},{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2557},{"krate":0,"index":2558},{"krate":0,"index":2559},{"krate":0,"index":2560}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626933,"byte_end":626939,"line_start":226,"line_end":226,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2572},{"krate":0,"index":2573}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":634787,"byte_end":634792,"line_start":421,"line_end":421,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2581}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":635132,"byte_end":635138,"line_start":431,"line_end":431,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":6900}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":635240,"byte_end":635246,"line_start":435,"line_end":435,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":6901},{"krate":0,"index":6902}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":635425,"byte_end":635431,"line_start":442,"line_end":442,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2588},{"krate":0,"index":6903},{"krate":0,"index":6904}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638121,"byte_end":638136,"line_start":81,"line_end":81,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":639065,"byte_end":639080,"line_start":113,"line_end":113,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2621}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":642622,"byte_end":642637,"line_start":213,"line_end":213,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":642777,"byte_end":642792,"line_start":220,"line_end":220,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2629},{"krate":0,"index":2630}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643038,"byte_end":643043,"line_start":231,"line_end":231,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2632}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643276,"byte_end":643280,"line_start":241,"line_end":241,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2634}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647077,"byte_end":647089,"line_start":99,"line_end":99,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2662},{"krate":0,"index":7129},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":650305,"byte_end":650317,"line_start":196,"line_end":196,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":656783,"byte_end":656788,"line_start":351,"line_end":351,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2696}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":657435,"byte_end":657447,"line_start":371,"line_end":371,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":7130}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":657545,"byte_end":657557,"line_start":375,"line_end":375,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":7131},{"krate":0,"index":7132}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":657733,"byte_end":657745,"line_start":382,"line_end":382,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":7133},{"krate":0,"index":7134},{"krate":0,"index":7135}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661410,"byte_end":661415,"line_start":105,"line_end":105,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2746},{"krate":0,"index":2747},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2752}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661864,"byte_end":661878,"line_start":121,"line_end":121,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2756},{"krate":0,"index":2757},{"krate":0,"index":7222},{"krate":0,"index":7223},{"krate":0,"index":7224},{"krate":0,"index":7225},{"krate":0,"index":7226}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663618,"byte_end":663623,"line_start":185,"line_end":185,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2760}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":665064,"byte_end":665078,"line_start":229,"line_end":229,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2767},{"krate":0,"index":2768},{"krate":0,"index":2769},{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":2772}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":681252,"byte_end":681266,"line_start":593,"line_end":593,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":7246}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":681391,"byte_end":681405,"line_start":599,"line_end":599,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":7247},{"krate":0,"index":7248}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":681608,"byte_end":681622,"line_start":608,"line_end":608,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":7249},{"krate":0,"index":7250},{"krate":0,"index":7251}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":703702,"byte_end":703715,"line_start":158,"line_end":158,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2839},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2842},{"krate":0,"index":7336}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704822,"byte_end":704835,"line_start":195,"line_end":195,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2845},{"krate":0,"index":2846},{"krate":0,"index":2847},{"krate":0,"index":2848},{"krate":0,"index":2849},{"krate":0,"index":2850}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":712058,"byte_end":712071,"line_start":379,"line_end":379,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":7337}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686281,"byte_end":686294,"line_start":135,"line_end":135,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2884},{"krate":0,"index":7451}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":688306,"byte_end":688319,"line_start":192,"line_end":192,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2892}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":698595,"byte_end":698608,"line_start":434,"line_end":434,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":7452}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714608,"byte_end":714613,"line_start":79,"line_end":79,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2935}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715783,"byte_end":715787,"line_start":123,"line_end":123,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2941},{"krate":0,"index":2942},{"krate":0,"index":2943}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716992,"byte_end":716996,"line_start":162,"line_end":162,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2948},{"krate":0,"index":2949},{"krate":0,"index":2950},{"krate":0,"index":2951},{"krate":0,"index":2952},{"krate":0,"index":2953}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":720740,"byte_end":720744,"line_start":281,"line_end":281,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":7551}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727425,"byte_end":727429,"line_start":206,"line_end":206,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3021}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727614,"byte_end":727618,"line_start":215,"line_end":215,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3023}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727792,"byte_end":727796,"line_start":222,"line_end":222,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3025}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727972,"byte_end":727976,"line_start":229,"line_end":229,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3027}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728146,"byte_end":728150,"line_start":236,"line_end":236,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3029}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728330,"byte_end":728334,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3033},{"krate":0,"index":3034}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729462,"byte_end":729466,"line_start":275,"line_end":275,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3037},{"krate":0,"index":3038}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730824,"byte_end":730828,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3042},{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3045}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731910,"byte_end":731914,"line_start":335,"line_end":335,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3054}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":732416,"byte_end":732421,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3058}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734095,"byte_end":734099,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3065}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734875,"byte_end":734879,"line_start":442,"line_end":442,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3071}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734995,"byte_end":734999,"line_start":449,"line_end":449,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3073}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735128,"byte_end":735132,"line_start":456,"line_end":456,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735246,"byte_end":735250,"line_start":463,"line_end":463,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3078}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735377,"byte_end":735381,"line_start":470,"line_end":470,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3081}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735500,"byte_end":735504,"line_start":477,"line_end":477,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3083}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735632,"byte_end":735636,"line_start":484,"line_end":484,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3086}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735754,"byte_end":735758,"line_start":491,"line_end":491,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3088}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735886,"byte_end":735895,"line_start":499,"line_end":499,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3091}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":736131,"byte_end":736136,"line_start":510,"line_end":510,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3093},{"krate":0,"index":3099}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":741713,"byte_end":741720,"line_start":638,"line_end":638,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3103},{"krate":0,"index":3109}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":744466,"byte_end":744470,"line_start":716,"line_end":716,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3115},{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3119},{"krate":0,"index":3121},{"krate":0,"index":3123},{"krate":0,"index":3125}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":745885,"byte_end":745887,"line_start":771,"line_end":771,"column_start":20,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132},{"krate":0,"index":3134},{"krate":0,"index":3136},{"krate":0,"index":3138},{"krate":0,"index":3140}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":747297,"byte_end":747301,"line_start":826,"line_end":826,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3143},{"krate":0,"index":3144},{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147},{"krate":0,"index":3149},{"krate":0,"index":3151},{"krate":0,"index":3153},{"krate":0,"index":3155}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":748721,"byte_end":748726,"line_start":881,"line_end":881,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3158},{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161},{"krate":0,"index":3162},{"krate":0,"index":3164},{"krate":0,"index":3166},{"krate":0,"index":3168},{"krate":0,"index":3170}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754920,"byte_end":754929,"line_start":134,"line_end":134,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3218},{"krate":0,"index":3219}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756128,"byte_end":756138,"line_start":175,"line_end":175,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3222}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756363,"byte_end":756373,"line_start":182,"line_end":182,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3224}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756609,"byte_end":756619,"line_start":189,"line_end":189,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3229},{"krate":0,"index":3230},{"krate":0,"index":3231},{"krate":0,"index":3232},{"krate":0,"index":3233}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":759403,"byte_end":759413,"line_start":268,"line_end":268,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3236}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760157,"byte_end":760167,"line_start":288,"line_end":288,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3244}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761182,"byte_end":761192,"line_start":318,"line_end":318,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3248},{"krate":0,"index":3249}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762592,"byte_end":762602,"line_start":347,"line_end":347,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3254},{"krate":0,"index":3255},{"krate":0,"index":3256},{"krate":0,"index":3257},{"krate":0,"index":3258},{"krate":0,"index":3259}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":764547,"byte_end":764553,"line_start":406,"line_end":406,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3265}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":768767,"byte_end":768773,"line_start":524,"line_end":524,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3272},{"krate":0,"index":3273},{"krate":0,"index":3277}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":770305,"byte_end":770313,"line_start":569,"line_end":569,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3282},{"krate":0,"index":3283},{"krate":0,"index":3288}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":773933,"byte_end":773937,"line_start":666,"line_end":666,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3294}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":774223,"byte_end":774225,"line_start":676,"line_end":676,"column_start":34,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3296}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":774511,"byte_end":774516,"line_start":686,"line_end":686,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3298}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":774805,"byte_end":774809,"line_start":696,"line_end":696,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3300}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777919,"byte_end":777925,"line_start":95,"line_end":95,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3320},{"krate":0,"index":3321}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":778438,"byte_end":778444,"line_start":117,"line_end":117,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3325},{"krate":0,"index":3326},{"krate":0,"index":3327},{"krate":0,"index":3328}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":780549,"byte_end":780557,"line_start":186,"line_end":186,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3334}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":781990,"byte_end":781997,"line_start":240,"line_end":240,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3340}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816182,"byte_end":816186,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3419}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":818223,"byte_end":818228,"line_start":196,"line_end":196,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3422},{"krate":0,"index":3423}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":818351,"byte_end":818356,"line_start":203,"line_end":203,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3426}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":825439,"byte_end":825450,"line_start":409,"line_end":409,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3444},{"krate":0,"index":3445}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":826030,"byte_end":826034,"line_start":432,"line_end":432,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3448},{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3451},{"krate":0,"index":3452},{"krate":0,"index":3453}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783313,"byte_end":783314,"line_start":21,"line_end":21,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783673,"byte_end":783679,"line_start":36,"line_end":36,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3472},{"krate":0,"index":3473}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783834,"byte_end":783840,"line_start":46,"line_end":46,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3476}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":786240,"byte_end":786253,"line_start":134,"line_end":134,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3489}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":787301,"byte_end":787312,"line_start":167,"line_end":167,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3493},{"krate":0,"index":3494},{"krate":0,"index":3495},{"krate":0,"index":3497}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797030,"byte_end":797036,"line_start":443,"line_end":443,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3563}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797182,"byte_end":797188,"line_start":452,"line_end":452,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3566}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797324,"byte_end":797337,"line_start":462,"line_end":462,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3569},{"krate":0,"index":3570}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797862,"byte_end":797868,"line_start":479,"line_end":479,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3574},{"krate":0,"index":3575}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798098,"byte_end":798110,"line_start":491,"line_end":491,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3579},{"krate":0,"index":3580}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798735,"byte_end":798740,"line_start":509,"line_end":509,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3584},{"krate":0,"index":3585}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":799479,"byte_end":799491,"line_start":536,"line_end":536,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3592}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":799889,"byte_end":799894,"line_start":548,"line_end":548,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3596},{"krate":0,"index":3597}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800525,"byte_end":800536,"line_start":572,"line_end":572,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":801023,"byte_end":801033,"line_start":596,"line_end":596,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3611},{"krate":0,"index":3612},{"krate":0,"index":3614}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802337,"byte_end":802347,"line_start":637,"line_end":637,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3619},{"krate":0,"index":3620}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802502,"byte_end":802506,"line_start":647,"line_end":647,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3624},{"krate":0,"index":3625},{"krate":0,"index":3626},{"krate":0,"index":3627}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":805240,"byte_end":805250,"line_start":725,"line_end":725,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3644},{"krate":0,"index":3645},{"krate":0,"index":3647}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":806457,"byte_end":806462,"line_start":764,"line_end":764,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3652},{"krate":0,"index":3655}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":807328,"byte_end":807333,"line_start":792,"line_end":792,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3664},{"krate":0,"index":3665}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":836974,"byte_end":836986,"line_start":134,"line_end":134,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":8291}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":837720,"byte_end":837732,"line_start":162,"line_end":162,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3706},{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3709},{"krate":0,"index":3710},{"krate":0,"index":3711}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":847905,"byte_end":847917,"line_start":400,"line_end":400,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":8292}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":848015,"byte_end":848027,"line_start":404,"line_end":404,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":8293},{"krate":0,"index":8294}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":848203,"byte_end":848215,"line_start":411,"line_end":411,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":8295},{"krate":0,"index":8296},{"krate":0,"index":8297}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849627,"byte_end":849635,"line_start":49,"line_end":49,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3754},{"krate":0,"index":3755}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":850243,"byte_end":850251,"line_start":71,"line_end":71,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3760},{"krate":0,"index":3761},{"krate":0,"index":3762},{"krate":0,"index":3763},{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3767}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":852159,"byte_end":852167,"line_start":132,"line_end":132,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":8344}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854968,"byte_end":854973,"line_start":98,"line_end":98,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3798},{"krate":0,"index":3799}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855308,"byte_end":855319,"line_start":112,"line_end":112,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3803},{"krate":0,"index":3804},{"krate":0,"index":3805}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856364,"byte_end":856375,"line_start":148,"line_end":148,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3809},{"krate":0,"index":3810},{"krate":0,"index":3811},{"krate":0,"index":3812},{"krate":0,"index":3813},{"krate":0,"index":3814},{"krate":0,"index":3816}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":867046,"byte_end":867057,"line_start":387,"line_end":387,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":8447}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":867155,"byte_end":867166,"line_start":391,"line_end":391,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":8448},{"krate":0,"index":8449}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":867342,"byte_end":867353,"line_start":398,"line_end":398,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":8450},{"krate":0,"index":8451},{"krate":0,"index":8452}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868860,"byte_end":868876,"line_start":41,"line_end":41,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3858},{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3861},{"krate":0,"index":3862},{"krate":0,"index":3863}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":870330,"byte_end":870346,"line_start":79,"line_end":79,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3865},{"krate":0,"index":3866},{"krate":0,"index":3867},{"krate":0,"index":3868},{"krate":0,"index":3869},{"krate":0,"index":3870},{"krate":0,"index":3871}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871284,"byte_end":871300,"line_start":113,"line_end":113,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3873}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":872533,"byte_end":872539,"line_start":155,"line_end":155,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3877},{"krate":0,"index":3878}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876340,"byte_end":876349,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3918}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877472,"byte_end":877481,"line_start":108,"line_end":108,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3920}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877802,"byte_end":877811,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3922}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":878145,"byte_end":878154,"line_start":132,"line_end":132,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3925},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3928},{"krate":0,"index":3929},{"krate":0,"index":3930},{"krate":0,"index":3931},{"krate":0,"index":3932}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":885019,"byte_end":885020,"line_start":300,"line_end":300,"column_start":15,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3939},{"krate":0,"index":3940},{"krate":0,"index":3941},{"krate":0,"index":3942},{"krate":0,"index":3943},{"krate":0,"index":3944}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":885954,"byte_end":885955,"line_start":334,"line_end":334,"column_start":15,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3947},{"krate":0,"index":3948},{"krate":0,"index":3949},{"krate":0,"index":3950},{"krate":0,"index":3951},{"krate":0,"index":3952}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":886896,"byte_end":886905,"line_start":368,"line_end":368,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":8524}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889288,"byte_end":889294,"line_start":74,"line_end":74,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3982},{"krate":0,"index":3983},{"krate":0,"index":8591},{"krate":0,"index":8592}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889999,"byte_end":890005,"line_start":103,"line_end":103,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3987},{"krate":0,"index":3988},{"krate":0,"index":3989},{"krate":0,"index":3990},{"krate":0,"index":3991},{"krate":0,"index":3992},{"krate":0,"index":3994}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":896132,"byte_end":896138,"line_start":259,"line_end":259,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":8593}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":896236,"byte_end":896242,"line_start":263,"line_end":263,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":8594},{"krate":0,"index":8595}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":896418,"byte_end":896424,"line_start":270,"line_end":270,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":8596},{"krate":0,"index":8597},{"krate":0,"index":8598}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899092,"byte_end":899096,"line_start":81,"line_end":81,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4033},{"krate":0,"index":4034},{"krate":0,"index":4037},{"krate":0,"index":4038},{"krate":0,"index":4039},{"krate":0,"index":4040},{"krate":0,"index":4041},{"krate":0,"index":4043},{"krate":0,"index":4045},{"krate":0,"index":4047},{"krate":0,"index":4049},{"krate":0,"index":4051},{"krate":0,"index":8679},{"krate":0,"index":8680},{"krate":0,"index":8681}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":902208,"byte_end":902212,"line_start":171,"line_end":171,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4056},{"krate":0,"index":4057},{"krate":0,"index":4058},{"krate":0,"index":4059},{"krate":0,"index":4062}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":910224,"byte_end":910228,"line_start":379,"line_end":379,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4091}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":910433,"byte_end":910437,"line_start":388,"line_end":388,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4095},{"krate":0,"index":4097}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":911011,"byte_end":911019,"line_start":411,"line_end":411,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4107},{"krate":0,"index":4108}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914487,"byte_end":914494,"line_start":66,"line_end":66,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4133},{"krate":0,"index":4134},{"krate":0,"index":4135},{"krate":0,"index":8751},{"krate":0,"index":8752},{"krate":0,"index":8753},{"krate":0,"index":8754}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915911,"byte_end":915918,"line_start":116,"line_end":116,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4138},{"krate":0,"index":4139},{"krate":0,"index":4140},{"krate":0,"index":4141},{"krate":0,"index":4142},{"krate":0,"index":4143}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":918584,"byte_end":918591,"line_start":198,"line_end":198,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":8765},{"krate":0,"index":8766}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":918757,"byte_end":918764,"line_start":205,"line_end":205,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":8767}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922212,"byte_end":922220,"line_start":102,"line_end":102,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4182},{"krate":0,"index":4183},{"krate":0,"index":4184},{"krate":0,"index":4185},{"krate":0,"index":4186},{"krate":0,"index":4187},{"krate":0,"index":4188},{"krate":0,"index":4189},{"krate":0,"index":4190},{"krate":0,"index":4191},{"krate":0,"index":4192},{"krate":0,"index":8867},{"krate":0,"index":8868},{"krate":0,"index":8869},{"krate":0,"index":8870},{"krate":0,"index":8871},{"krate":0,"index":8872}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924832,"byte_end":924840,"line_start":181,"line_end":181,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4195},{"krate":0,"index":4196},{"krate":0,"index":4197},{"krate":0,"index":4198},{"krate":0,"index":4199},{"krate":0,"index":4200},{"krate":0,"index":4202}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":965251,"byte_end":965259,"line_start":986,"line_end":986,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":8873}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968141,"byte_end":968149,"line_start":77,"line_end":77,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4255},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4258},{"krate":0,"index":4259},{"krate":0,"index":4260},{"krate":0,"index":4261},{"krate":0,"index":8961}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969969,"byte_end":969977,"line_start":137,"line_end":137,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4265},{"krate":0,"index":4266},{"krate":0,"index":4267},{"krate":0,"index":4268},{"krate":0,"index":4269},{"krate":0,"index":4270},{"krate":0,"index":4271}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":972190,"byte_end":972198,"line_start":203,"line_end":203,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":8962}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":972290,"byte_end":972298,"line_start":207,"line_end":207,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":8963},{"krate":0,"index":8964}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":972468,"byte_end":972476,"line_start":214,"line_end":214,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":8965},{"krate":0,"index":8966},{"krate":0,"index":8967}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975290,"byte_end":975302,"line_start":80,"line_end":80,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4297},{"krate":0,"index":4298}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975561,"byte_end":975567,"line_start":94,"line_end":94,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4301},{"krate":0,"index":4302},{"krate":0,"index":4303},{"krate":0,"index":4304},{"krate":0,"index":9049}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":976560,"byte_end":976566,"line_start":131,"line_end":131,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4307},{"krate":0,"index":4308},{"krate":0,"index":4309},{"krate":0,"index":4310},{"krate":0,"index":4311},{"krate":0,"index":4312}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":979040,"byte_end":979046,"line_start":204,"line_end":204,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":9050}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":979138,"byte_end":979144,"line_start":208,"line_end":208,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":9051},{"krate":0,"index":9052}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":979314,"byte_end":979320,"line_start":215,"line_end":215,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":9053},{"krate":0,"index":9054},{"krate":0,"index":9055}],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981790,"byte_end":981795,"line_start":80,"line_end":80,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4341},{"krate":0,"index":4342},{"krate":0,"index":9139},{"krate":0,"index":9140},{"krate":0,"index":9141}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":982647,"byte_end":982652,"line_start":108,"line_end":108,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4347},{"krate":0,"index":4348},{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4352}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":988158,"byte_end":988163,"line_start":257,"line_end":257,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":9142}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":988267,"byte_end":988272,"line_start":261,"line_end":261,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":9143},{"krate":0,"index":9144}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":988454,"byte_end":988459,"line_start":268,"line_end":268,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":9145},{"krate":0,"index":9146},{"krate":0,"index":9147}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441702,"byte_end":441713,"line_start":159,"line_end":159,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4392},{"krate":0,"index":4393}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451129,"byte_end":451135,"line_start":366,"line_end":366,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4422}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451220,"byte_end":451226,"line_start":372,"line_end":372,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4424}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451876,"byte_end":451877,"line_start":390,"line_end":390,"column_start":19,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487564,"byte_end":487569,"line_start":1213,"line_end":1213,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4509}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488249,"byte_end":488254,"line_start":1230,"line_end":1230,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4514},{"krate":0,"index":4515}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488359,"byte_end":488372,"line_start":1237,"line_end":1237,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4517}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488773,"byte_end":488774,"line_start":1252,"line_end":1252,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4522},{"krate":0,"index":4525},{"krate":0,"index":4528},{"krate":0,"index":4529}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":490931,"byte_end":490932,"line_start":1306,"line_end":1306,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4534},{"krate":0,"index":4535},{"krate":0,"index":4536},{"krate":0,"index":4538}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":813,"byte_end":818,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":51}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":828,"byte_end":833,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":146}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":843,"byte_end":848,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":201}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40042,"byte_end":40046,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":218}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":40056,"byte_end":40067,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":259}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":858,"byte_end":863,"line_start":32,"line_end":32,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":407}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/mod.rs","byte_start":92859,"byte_end":92868,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":408}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/mod.rs","byte_start":92878,"byte_end":92887,"line_start":71,"line_end":71,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":409}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/guide/mod.rs","byte_start":92897,"byte_end":92906,"line_start":72,"line_end":72,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":410}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":873,"byte_end":878,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":411}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":888,"byte_end":893,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":443}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135477,"byte_end":135482,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":444}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135492,"byte_end":135498,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":491}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":135508,"byte_end":135514,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":612}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":914,"byte_end":918,"line_start":36,"line_end":36,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":673}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":928,"byte_end":936,"line_start":37,"line_end":37,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":757}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197953,"byte_end":197958,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":766}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":197968,"byte_end":197972,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":799}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":946,"byte_end":952,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1012}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":962,"byte_end":966,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1144}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":976,"byte_end":981,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1433}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":999,"byte_end":1004,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1623}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":1014,"byte_end":1020,"line_start":43,"line_end":43,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1702}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438357,"byte_end":438359,"line_start":57,"line_end":57,"column_start":22,"column_end":24},"ref_id":{"krate":0,"index":1782}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438369,"byte_end":438375,"line_start":58,"line_end":58,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1806}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438415,"byte_end":438424,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1845}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520486,"byte_end":520490,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1846}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520500,"byte_end":520505,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1923}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520515,"byte_end":520525,"line_start":9,"line_end":9,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1947}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520535,"byte_end":520540,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2011}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546027,"byte_end":546033,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2015}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546043,"byte_end":546047,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2032}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546057,"byte_end":546064,"line_start":9,"line_end":9,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2105}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546074,"byte_end":546083,"line_start":10,"line_end":10,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2174}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546093,"byte_end":546102,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2203}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/mod.rs","byte_start":520550,"byte_end":520554,"line_start":11,"line_end":11,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2340}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438455,"byte_end":438473,"line_start":65,"line_end":65,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":2395}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438483,"byte_end":438489,"line_start":66,"line_end":66,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2433}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438499,"byte_end":438505,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2514}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438515,"byte_end":438531,"line_start":68,"line_end":68,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":2589}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438541,"byte_end":438555,"line_start":69,"line_end":69,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":2636}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438565,"byte_end":438580,"line_start":70,"line_end":70,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":2707}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438590,"byte_end":438604,"line_start":71,"line_end":71,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":2799}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":682444,"byte_end":682458,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":2813}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438614,"byte_end":438618,"line_start":72,"line_end":72,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2913}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438628,"byte_end":438632,"line_start":73,"line_end":73,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2963}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438642,"byte_end":438653,"line_start":74,"line_end":74,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":3172}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438663,"byte_end":438669,"line_start":75,"line_end":75,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3301}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438679,"byte_end":438684,"line_start":76,"line_end":76,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3345}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783051,"byte_end":783055,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3380}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438694,"byte_end":438707,"line_start":77,"line_end":77,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":3670}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438717,"byte_end":438726,"line_start":78,"line_end":78,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3734}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438736,"byte_end":438748,"line_start":79,"line_end":79,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":3775}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438758,"byte_end":438775,"line_start":80,"line_end":80,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":3836}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438785,"byte_end":438794,"line_start":81,"line_end":81,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":3883}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438804,"byte_end":438810,"line_start":82,"line_end":82,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3956}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438820,"byte_end":438824,"line_start":83,"line_end":83,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4014}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438834,"byte_end":438842,"line_start":84,"line_end":84,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":4110}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438852,"byte_end":438861,"line_start":85,"line_end":85,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":4148}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438871,"byte_end":438880,"line_start":86,"line_end":86,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":4231}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438890,"byte_end":438896,"line_start":87,"line_end":87,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4279}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":438906,"byte_end":438912,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4319}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/lib.rs","byte_start":1030,"byte_end":1036,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4540}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/border.rs","byte_start":1388,"byte_end":1393,"line_start":15,"line_end":15,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":5499,"byte_end":5504,"line_start":101,"line_end":101,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":4551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11480,"byte_end":11484,"line_start":288,"line_end":288,"column_start":22,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":4573},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11575,"byte_end":11580,"line_start":294,"line_end":294,"column_start":21,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":4551},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11847,"byte_end":11851,"line_start":306,"line_end":306,"column_start":22,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":4588},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":11942,"byte_end":11947,"line_start":312,"line_end":312,"column_start":21,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":4551},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":12061,"byte_end":12065,"line_start":318,"line_end":318,"column_start":25,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":4588},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/color.rs","byte_start":19311,"byte_end":19316,"line_start":491,"line_end":491,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34367,"byte_end":34373,"line_start":326,"line_end":326,"column_start":6,"column_end":12},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":34792,"byte_end":34798,"line_start":341,"line_end":341,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4799},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":35090,"byte_end":35095,"line_start":351,"line_end":351,"column_start":6,"column_end":11},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":4819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":36097,"byte_end":36104,"line_start":388,"line_end":388,"column_start":6,"column_end":13},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":4856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37124,"byte_end":37127,"line_start":425,"line_end":425,"column_start":6,"column_end":9},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":4936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37341,"byte_end":37346,"line_start":435,"line_end":435,"column_start":6,"column_end":11},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":4910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37563,"byte_end":37574,"line_start":445,"line_end":445,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":4923},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":37809,"byte_end":37813,"line_start":455,"line_end":455,"column_start":6,"column_end":10},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38141,"byte_end":38146,"line_start":468,"line_end":468,"column_start":30,"column_end":35},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4620},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38261,"byte_end":38266,"line_start":474,"line_end":474,"column_start":29,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4620},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38367,"byte_end":38372,"line_start":480,"line_end":480,"column_start":19,"column_end":24},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":4653},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38457,"byte_end":38462,"line_start":486,"line_end":486,"column_start":22,"column_end":27},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4653},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38556,"byte_end":38562,"line_start":492,"line_end":492,"column_start":21,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38657,"byte_end":38663,"line_start":498,"line_end":498,"column_start":23,"column_end":29},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38772,"byte_end":38778,"line_start":504,"line_end":504,"column_start":29,"column_end":35},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38883,"byte_end":38889,"line_start":510,"line_end":510,"column_start":22,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":38989,"byte_end":38995,"line_start":516,"line_end":516,"column_start":24,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39101,"byte_end":39107,"line_start":522,"line_end":522,"column_start":22,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39211,"byte_end":39217,"line_start":528,"line_end":528,"column_start":28,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39339,"byte_end":39345,"line_start":534,"line_end":534,"column_start":20,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39436,"byte_end":39442,"line_start":540,"line_end":540,"column_start":23,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/event.rs","byte_start":39543,"byte_end":39549,"line_start":546,"line_end":546,"column_start":21,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":4728},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":73245,"byte_end":73256,"line_start":34,"line_end":34,"column_start":6,"column_end":17},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":4961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/algo.rs","byte_start":75845,"byte_end":75866,"line_start":107,"line_end":107,"column_start":6,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":4966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/depth_order.rs","byte_start":85741,"byte_end":85751,"line_start":21,"line_end":21,"column_start":6,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":4970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":44048,"byte_end":44056,"line_start":110,"line_end":110,"column_start":26,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4999},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46090,"byte_end":46099,"line_start":167,"line_end":167,"column_start":6,"column_end":15},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":4984},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":46908,"byte_end":46912,"line_start":190,"line_end":190,"column_start":6,"column_end":10},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":5005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":47099,"byte_end":47104,"line_start":200,"line_end":200,"column_start":6,"column_end":11},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":5033},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71409,"byte_end":71417,"line_start":781,"line_end":781,"column_start":24,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":279},"to":{"krate":16,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71593,"byte_end":71600,"line_start":789,"line_end":789,"column_start":24,"column_end":31},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":278},"to":{"krate":16,"index":32}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71793,"byte_end":71798,"line_start":798,"line_end":798,"column_start":40,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":5033},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":71964,"byte_end":71969,"line_start":805,"line_end":805,"column_start":43,"column_end":48},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":5033},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":72111,"byte_end":72116,"line_start":811,"line_end":811,"column_start":27,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":5033},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/graph/mod.rs","byte_start":72270,"byte_end":72275,"line_start":818,"line_end":818,"column_start":30,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":5033},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131052,"byte_end":131055,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":131172,"byte_end":131175,"line_start":47,"line_end":47,"column_start":11,"column_end":14},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":133772,"byte_end":133778,"line_start":118,"line_end":118,"column_start":19,"column_end":25},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":421},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/image.rs","byte_start":134019,"byte_end":134025,"line_start":128,"line_end":128,"column_start":28,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":421},"to":{"krate":2,"index":4728}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":140250,"byte_end":140255,"line_start":43,"line_end":43,"column_start":6,"column_end":11},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5063},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143427,"byte_end":143432,"line_start":145,"line_end":145,"column_start":10,"column_end":15},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":5104},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":143646,"byte_end":143660,"line_start":155,"line_end":155,"column_start":10,"column_end":24},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":145139,"byte_end":145148,"line_start":201,"line_end":201,"column_start":10,"column_end":19},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":147188,"byte_end":147197,"line_start":262,"line_end":262,"column_start":38,"column_end":47},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5132},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/state.rs","byte_start":147389,"byte_end":147403,"line_start":269,"line_end":269,"column_start":27,"column_end":41},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5145},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":153774,"byte_end":153780,"line_start":162,"line_end":162,"column_start":10,"column_end":16},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157410,"byte_end":157415,"line_start":258,"line_end":258,"column_start":10,"column_end":15},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":157885,"byte_end":157892,"line_start":277,"line_end":277,"column_start":10,"column_end":17},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":158343,"byte_end":158355,"line_start":296,"line_end":296,"column_start":10,"column_end":22},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159227,"byte_end":159235,"line_start":323,"line_end":323,"column_start":10,"column_end":18},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":159704,"byte_end":159717,"line_start":343,"line_end":343,"column_start":10,"column_end":23},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":5220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":160601,"byte_end":160607,"line_start":370,"line_end":370,"column_start":10,"column_end":16},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":5232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":161306,"byte_end":161311,"line_start":397,"line_end":397,"column_start":10,"column_end":15},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":5251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":162018,"byte_end":162024,"line_start":425,"line_end":425,"column_start":23,"column_end":29},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":5172},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":164829,"byte_end":164836,"line_start":493,"line_end":493,"column_start":23,"column_end":30},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":5182},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":165134,"byte_end":165146,"line_start":505,"line_end":505,"column_start":23,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":5188},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":165454,"byte_end":165472,"line_start":517,"line_end":517,"column_start":23,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5194},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":165836,"byte_end":165846,"line_start":529,"line_end":529,"column_start":23,"column_end":33},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5201},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":166146,"byte_end":166154,"line_start":541,"line_end":541,"column_start":23,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":5207},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":166460,"byte_end":166473,"line_start":553,"line_end":553,"column_start":23,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5220},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":166792,"byte_end":166811,"line_start":565,"line_end":565,"column_start":23,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5213},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":167184,"byte_end":167195,"line_start":577,"line_end":577,"column_start":23,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5226},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":167506,"byte_end":167512,"line_start":589,"line_end":589,"column_start":23,"column_end":29},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5232},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":167810,"byte_end":167822,"line_start":601,"line_end":601,"column_start":23,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":5238},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168108,"byte_end":168112,"line_start":613,"line_end":613,"column_start":23,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":5245},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168402,"byte_end":168407,"line_start":625,"line_end":625,"column_start":23,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":5251},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168701,"byte_end":168712,"line_start":637,"line_end":637,"column_start":23,"column_end":34},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":5257},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":168993,"byte_end":168998,"line_start":649,"line_end":649,"column_start":23,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":5264},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/widget.rs","byte_start":169292,"byte_end":169299,"line_start":661,"line_end":661,"column_start":23,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":5270},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171076,"byte_end":171082,"line_start":40,"line_end":40,"column_start":6,"column_end":12},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":5276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":171953,"byte_end":171959,"line_start":72,"line_end":72,"column_start":10,"column_end":16},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":5283},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":172226,"byte_end":172232,"line_start":80,"line_end":80,"column_start":23,"column_end":29},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":5283},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/global.rs","byte_start":172376,"byte_end":172384,"line_start":87,"line_end":87,"column_start":23,"column_end":31},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":5289},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138335,"byte_end":138337,"line_start":115,"line_end":115,"column_start":10,"column_end":12},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":5334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/input/mod.rs","byte_start":138465,"byte_end":138470,"line_start":124,"line_end":124,"column_start":10,"column_end":15},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/label.rs","byte_start":172854,"byte_end":172859,"line_start":9,"line_end":9,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":178503,"byte_end":178507,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196285,"byte_end":196293,"line_start":563,"line_end":563,"column_start":23,"column_end":31},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":690},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":196869,"byte_end":196879,"line_start":581,"line_end":581,"column_start":21,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":197014,"byte_end":197024,"line_start":588,"line_end":588,"column_start":24,"column_end":34},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":197127,"byte_end":197137,"line_start":594,"line_end":594,"column_start":21,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/mesh.rs","byte_start":197281,"byte_end":197291,"line_start":600,"line_end":600,"column_start":42,"column_end":52},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":695},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/range.rs","byte_start":230744,"byte_end":230749,"line_start":29,"line_end":29,"column_start":6,"column_end":11},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":5500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/rect.rs","byte_start":251364,"byte_end":251368,"line_start":31,"line_end":31,"column_start":6,"column_end":10},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":5528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":202893,"byte_end":202898,"line_start":148,"line_end":148,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":224542,"byte_end":224547,"line_start":672,"line_end":672,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/position/mod.rs","byte_start":229894,"byte_end":229901,"line_start":814,"line_end":814,"column_start":6,"column_end":13},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":5689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265862,"byte_end":265872,"line_start":69,"line_end":69,"column_start":30,"column_end":40},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1036},"to":{"krate":0,"index":1046}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":265993,"byte_end":266012,"line_start":75,"line_end":75,"column_start":30,"column_end":49},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1092},"to":{"krate":0,"index":1046}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":271273,"byte_end":271277,"line_start":235,"line_end":235,"column_start":10,"column_end":14},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":273599,"byte_end":273609,"line_start":287,"line_end":287,"column_start":10,"column_end":20},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":295201,"byte_end":295216,"line_start":756,"line_end":756,"column_start":6,"column_end":21},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":5701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/render.rs","byte_start":295927,"byte_end":295946,"line_start":780,"line_end":780,"column_start":10,"column_end":29},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":304457,"byte_end":304462,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":5747},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306000,"byte_end":306002,"line_start":146,"line_end":146,"column_start":10,"column_end":12},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":5774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":306143,"byte_end":306146,"line_start":155,"line_end":155,"column_start":10,"column_end":13},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":5800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":308875,"byte_end":308881,"line_start":233,"line_end":233,"column_start":23,"column_end":29},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1183},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309053,"byte_end":309056,"line_start":240,"line_end":240,"column_start":27,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":5805},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309232,"byte_end":309237,"line_start":247,"line_end":247,"column_start":35,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":5811},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309358,"byte_end":309363,"line_start":253,"line_end":253,"column_start":32,"column_end":37},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":5811},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":309586,"byte_end":309591,"line_start":262,"line_end":262,"column_start":32,"column_end":37},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":5811},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":314574,"byte_end":314586,"line_start":385,"line_end":385,"column_start":30,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1229},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":315326,"byte_end":315346,"line_start":404,"line_end":404,"column_start":30,"column_end":50},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1235},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":316891,"byte_end":316896,"line_start":445,"line_end":445,"column_start":31,"column_end":36},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1223},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":317516,"byte_end":317529,"line_start":461,"line_end":461,"column_start":31,"column_end":44},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1241},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":320179,"byte_end":320184,"line_start":532,"line_end":532,"column_start":10,"column_end":15},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":5836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":333612,"byte_end":333622,"line_start":842,"line_end":842,"column_start":30,"column_end":40},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":5819},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":334673,"byte_end":334691,"line_start":866,"line_end":866,"column_start":27,"column_end":45},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":5830},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":334874,"byte_end":334876,"line_start":873,"line_end":873,"column_start":31,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1290},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":339867,"byte_end":339872,"line_start":996,"line_end":996,"column_start":10,"column_end":15},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":5863},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":340595,"byte_end":340600,"line_start":1020,"line_end":1020,"column_start":27,"column_end":32},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1360},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341067,"byte_end":341071,"line_start":1037,"line_end":1037,"column_start":10,"column_end":14},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":5884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":341829,"byte_end":341834,"line_start":1061,"line_end":1061,"column_start":14,"column_end":19},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":353973,"byte_end":353978,"line_start":1366,"line_end":1366,"column_start":30,"column_end":35},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1360},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":357626,"byte_end":357631,"line_start":1455,"line_end":1455,"column_start":26,"column_end":31},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":5898},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/text.rs","byte_start":358745,"byte_end":358758,"line_start":1487,"line_end":1487,"column_start":30,"column_end":43},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1371},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362024,"byte_end":362037,"line_start":77,"line_end":77,"column_start":6,"column_end":19},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":5926},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/theme.rs","byte_start":362269,"byte_end":362274,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":5907},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":369390,"byte_end":369399,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":371111,"byte_end":371113,"line_start":167,"line_end":167,"column_start":6,"column_end":8},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":5947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":419406,"byte_end":419412,"line_start":1189,"line_end":1189,"column_start":10,"column_end":16},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":5967},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":421879,"byte_end":421885,"line_start":1256,"line_end":1256,"column_start":19,"column_end":25},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":5967},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":423168,"byte_end":423174,"line_start":1293,"line_end":1293,"column_start":32,"column_end":38},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":5967},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/ui.rs","byte_start":423280,"byte_end":423286,"line_start":1300,"line_end":1300,"column_start":24,"column_end":30},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":5967},"to":{"krate":2,"index":1798}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500133,"byte_end":500142,"line_start":33,"line_end":33,"column_start":10,"column_end":19},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":500905,"byte_end":500909,"line_start":57,"line_end":57,"column_start":6,"column_end":10},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":5973},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501690,"byte_end":501694,"line_start":85,"line_end":85,"column_start":26,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":5973},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/id.rs","byte_start":501790,"byte_end":501798,"line_start":92,"line_end":92,"column_start":6,"column_end":14},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513211,"byte_end":513217,"line_start":67,"line_end":67,"column_start":6,"column_end":12},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":5987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":513370,"byte_end":513375,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":5998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":519410,"byte_end":519411,"line_start":228,"line_end":228,"column_start":15,"column_end":16},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":6019},"to":{"krate":0,"index":1816}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scroll.rs","byte_start":519780,"byte_end":519781,"line_start":253,"line_end":253,"column_start":15,"column_end":16},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":6028},"to":{"krate":0,"index":1816}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":522979,"byte_end":522983,"line_start":70,"line_end":70,"column_start":6,"column_end":10},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":6037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":525932,"byte_end":525937,"line_start":154,"line_end":154,"column_start":6,"column_end":11},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":6064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":529007,"byte_end":529011,"line_start":259,"line_end":259,"column_start":17,"column_end":21},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":6037},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/line.rs","byte_start":530217,"byte_end":530221,"line_start":304,"line_end":304,"column_start":20,"column_end":24},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":6037},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":533500,"byte_end":533505,"line_start":43,"line_end":43,"column_start":6,"column_end":11},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":6106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/image.rs","byte_start":535450,"byte_end":535455,"line_start":93,"line_end":93,"column_start":17,"column_end":22},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":6106},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":537900,"byte_end":537909,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":6144},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":541924,"byte_end":541933,"line_start":145,"line_end":145,"column_start":20,"column_end":29},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":6144},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":543813,"byte_end":543822,"line_start":202,"line_end":202,"column_start":23,"column_end":32},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":6144},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/point_path.rs","byte_start":544512,"byte_end":544521,"line_start":231,"line_end":231,"column_start":22,"column_end":31},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":6171},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/circle.rs","byte_start":547951,"byte_end":547957,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":6181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549723,"byte_end":549727,"line_start":26,"line_end":26,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549730,"byte_end":549739,"line_start":26,"line_end":26,"column_start":41,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":1619},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":549742,"byte_end":549746,"line_start":26,"line_end":26,"column_start":53,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550071,"byte_end":550075,"line_start":37,"line_end":37,"column_start":22,"column_end":26},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":6207},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":550641,"byte_end":550648,"line_start":54,"line_end":54,"column_start":22,"column_end":29},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":6220},"to":{"krate":0,"index":2048}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":551092,"byte_end":551096,"line_start":70,"line_end":70,"column_start":6,"column_end":10},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":6188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552107,"byte_end":552111,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":6188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":552751,"byte_end":552755,"line_start":121,"line_end":121,"column_start":6,"column_end":10},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":6188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":553065,"byte_end":553069,"line_start":131,"line_end":131,"column_start":20,"column_end":24},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":6188},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":553894,"byte_end":553898,"line_start":165,"line_end":165,"column_start":23,"column_end":27},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":6188},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":554901,"byte_end":554914,"line_start":199,"line_end":199,"column_start":6,"column_end":19},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":6250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":556566,"byte_end":556579,"line_start":243,"line_end":243,"column_start":6,"column_end":19},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":6250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":557624,"byte_end":557637,"line_start":271,"line_end":271,"column_start":19,"column_end":32},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":6250},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/oval.rs","byte_start":558223,"byte_end":558232,"line_start":293,"line_end":293,"column_start":19,"column_end":28},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":6260},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":561797,"byte_end":561804,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":6265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":567205,"byte_end":567212,"line_start":191,"line_end":191,"column_start":20,"column_end":27},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":6265},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":569425,"byte_end":569432,"line_start":260,"line_end":260,"column_start":23,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":6265},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/polygon.rs","byte_start":570153,"byte_end":570162,"line_start":290,"line_end":290,"column_start":22,"column_end":31},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":6308},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":572167,"byte_end":572176,"line_start":38,"line_end":38,"column_start":6,"column_end":15},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":6316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":573143,"byte_end":573152,"line_start":71,"line_end":71,"column_start":17,"column_end":26},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":6316},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/rectangle.rs","byte_start":573861,"byte_end":573870,"line_start":103,"line_end":103,"column_start":20,"column_end":29},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":6316},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575072,"byte_end":575077,"line_start":25,"line_end":25,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":2219}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575080,"byte_end":575084,"line_start":25,"line_end":25,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":2219}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575087,"byte_end":575096,"line_start":25,"line_end":25,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1619},"to":{"krate":0,"index":2219}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575350,"byte_end":575355,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":4427},"to":{"krate":0,"index":2222}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575358,"byte_end":575363,"line_start":33,"line_end":33,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":2222}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":575366,"byte_end":575370,"line_start":33,"line_end":33,"column_start":42,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":2222}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576168,"byte_end":576173,"line_start":62,"line_end":62,"column_start":17,"column_end":22},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":876},"to":{"krate":0,"index":2219}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576319,"byte_end":576331,"line_start":71,"line_end":71,"column_start":17,"column_end":29},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2224},"to":{"krate":0,"index":2219}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576506,"byte_end":576517,"line_start":81,"line_end":81,"column_start":16,"column_end":27},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":6376},"to":{"krate":0,"index":2222}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576563,"byte_end":576573,"line_start":85,"line_end":85,"column_start":16,"column_end":26},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":6388},"to":{"krate":0,"index":2222}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":576935,"byte_end":576943,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":6398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577421,"byte_end":577429,"line_start":117,"line_end":117,"column_start":6,"column_end":14},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":6398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":577951,"byte_end":577959,"line_start":129,"line_end":129,"column_start":29,"column_end":37},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":6398},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578101,"byte_end":578109,"line_start":138,"line_end":138,"column_start":26,"column_end":34},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":6398},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578236,"byte_end":578244,"line_start":146,"line_end":146,"column_start":29,"column_end":37},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":6398},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578377,"byte_end":578385,"line_start":154,"line_end":154,"column_start":26,"column_end":34},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":6398},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578494,"byte_end":578502,"line_start":162,"line_end":162,"column_start":29,"column_end":37},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":6398},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578619,"byte_end":578628,"line_start":171,"line_end":171,"column_start":12,"column_end":21},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":6352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":578889,"byte_end":578898,"line_start":182,"line_end":182,"column_start":9,"column_end":18},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":6352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":579377,"byte_end":579386,"line_start":196,"line_end":196,"column_start":9,"column_end":18},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":6352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580014,"byte_end":580030,"line_start":216,"line_end":216,"column_start":26,"column_end":42},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2278},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":580496,"byte_end":580517,"line_start":234,"line_end":234,"column_start":12,"column_end":33},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":6432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":583881,"byte_end":583890,"line_start":305,"line_end":305,"column_start":23,"column_end":32},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":6352},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/triangles.rs","byte_start":587057,"byte_end":587065,"line_start":418,"line_end":418,"column_start":32,"column_end":40},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":6398},"to":{"krate":2,"index":1798}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/shape/mod.rs","byte_start":546359,"byte_end":546364,"line_start":24,"line_end":24,"column_start":6,"column_end":11},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":6447},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":590959,"byte_end":590963,"line_start":83,"line_end":83,"column_start":10,"column_end":14},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":6463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":592930,"byte_end":592934,"line_start":148,"line_end":148,"column_start":21,"column_end":25},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":6463},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/primitive/text.rs","byte_start":597821,"byte_end":597825,"line_start":279,"line_end":279,"column_start":24,"column_end":28},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":6463},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599201,"byte_end":599218,"line_start":55,"line_end":55,"column_start":6,"column_end":23},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":6550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":599527,"byte_end":599544,"line_start":70,"line_end":70,"column_start":17,"column_end":34},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":6550},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":600714,"byte_end":600731,"line_start":111,"line_end":111,"column_start":20,"column_end":37},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":6550},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":600816,"byte_end":600833,"line_start":116,"line_end":116,"column_start":21,"column_end":38},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":6550},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":602892,"byte_end":602914,"line_start":179,"line_end":179,"column_start":6,"column_end":28},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":6600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/bordered_rectangle.rs","byte_start":604113,"byte_end":604135,"line_start":208,"line_end":208,"column_start":19,"column_end":41},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6600},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609074,"byte_end":609086,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":6744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609224,"byte_end":609236,"line_start":132,"line_end":132,"column_start":19,"column_end":31},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":6744},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":609439,"byte_end":609445,"line_start":145,"line_end":145,"column_start":10,"column_end":16},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":6610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611002,"byte_end":611008,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":6610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":611890,"byte_end":611896,"line_start":227,"line_end":227,"column_start":13,"column_end":19},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":6610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":613548,"byte_end":613554,"line_start":284,"line_end":284,"column_start":21,"column_end":27},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":6610},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":614768,"byte_end":614774,"line_start":323,"line_end":323,"column_start":21,"column_end":27},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":6610},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":618640,"byte_end":618646,"line_start":435,"line_end":435,"column_start":27,"column_end":33},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":6610},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":618744,"byte_end":618750,"line_start":439,"line_end":439,"column_start":28,"column_end":34},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":6610},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/button.rs","byte_start":618926,"byte_end":618932,"line_start":446,"line_end":446,"column_start":31,"column_end":37},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":6610},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":624185,"byte_end":624191,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":6758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":626933,"byte_end":626939,"line_start":226,"line_end":226,"column_start":21,"column_end":27},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":6758},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":634787,"byte_end":634792,"line_start":421,"line_end":421,"column_start":6,"column_end":11},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":6782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":635132,"byte_end":635138,"line_start":431,"line_end":431,"column_start":33,"column_end":39},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":6758},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":635240,"byte_end":635246,"line_start":435,"line_end":435,"column_start":35,"column_end":41},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":6758},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/canvas.rs","byte_start":635425,"byte_end":635431,"line_start":442,"line_end":442,"column_start":37,"column_end":43},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":6758},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":638121,"byte_end":638136,"line_start":81,"line_end":81,"column_start":10,"column_end":25},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":6905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":639065,"byte_end":639080,"line_start":113,"line_end":113,"column_start":21,"column_end":36},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":6905},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":642622,"byte_end":642637,"line_start":213,"line_end":213,"column_start":24,"column_end":39},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":6905},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":642777,"byte_end":642792,"line_start":220,"line_end":220,"column_start":25,"column_end":40},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":6905},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643038,"byte_end":643043,"line_start":231,"line_end":231,"column_start":6,"column_end":11},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":6974},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/collapsible_area.rs","byte_start":643276,"byte_end":643280,"line_start":241,"line_end":241,"column_start":6,"column_end":10},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":6993},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":647077,"byte_end":647089,"line_start":99,"line_end":99,"column_start":13,"column_end":25},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":7006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":650305,"byte_end":650317,"line_start":196,"line_end":196,"column_start":24,"column_end":36},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":7006},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":656783,"byte_end":656788,"line_start":351,"line_end":351,"column_start":6,"column_end":11},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":7021},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":657435,"byte_end":657447,"line_start":371,"line_end":371,"column_start":27,"column_end":39},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":7006},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":657545,"byte_end":657557,"line_start":375,"line_end":375,"column_start":28,"column_end":40},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":7006},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/drop_down_list.rs","byte_start":657733,"byte_end":657745,"line_start":382,"line_end":382,"column_start":31,"column_end":43},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":7006},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660651,"byte_end":660656,"line_start":84,"line_end":84,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":2735}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":660659,"byte_end":660668,"line_start":84,"line_end":84,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1619},"to":{"krate":0,"index":2735}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661410,"byte_end":661415,"line_start":105,"line_end":105,"column_start":24,"column_end":29},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":876},"to":{"krate":0,"index":2735}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":661864,"byte_end":661878,"line_start":121,"line_end":121,"column_start":13,"column_end":27},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":7136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":663618,"byte_end":663623,"line_start":185,"line_end":185,"column_start":9,"column_end":14},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":7227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":665064,"byte_end":665078,"line_start":229,"line_end":229,"column_start":24,"column_end":38},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":7136},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":681252,"byte_end":681266,"line_start":593,"line_end":593,"column_start":27,"column_end":41},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":7136},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":681391,"byte_end":681405,"line_start":599,"line_end":599,"column_start":28,"column_end":42},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":7136},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/envelope_editor.rs","byte_start":681608,"byte_end":681622,"line_start":608,"line_end":608,"column_start":31,"column_end":45},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":7136},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":703702,"byte_end":703715,"line_start":158,"line_end":158,"column_start":10,"column_end":23},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":7252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":704822,"byte_end":704835,"line_start":195,"line_end":195,"column_start":21,"column_end":34},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":7252},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/directory_view.rs","byte_start":712058,"byte_end":712071,"line_start":379,"line_end":379,"column_start":24,"column_end":37},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":7252},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":686281,"byte_end":686294,"line_start":135,"line_end":135,"column_start":10,"column_end":23},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":7338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":688306,"byte_end":688319,"line_start":192,"line_end":192,"column_start":21,"column_end":34},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":7338},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/file_navigator/mod.rs","byte_start":698595,"byte_end":698608,"line_start":434,"line_end":434,"column_start":24,"column_end":37},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":7338},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":714608,"byte_end":714613,"line_start":79,"line_end":79,"column_start":9,"column_end":14},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":7511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":715783,"byte_end":715787,"line_start":123,"line_end":123,"column_start":15,"column_end":19},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":7453},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":716992,"byte_end":716996,"line_start":162,"line_end":162,"column_start":26,"column_end":30},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":7453},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/grid.rs","byte_start":720740,"byte_end":720744,"line_start":281,"line_end":281,"column_start":29,"column_end":33},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":7453},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724370,"byte_end":724375,"line_start":108,"line_end":108,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":2995}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724378,"byte_end":724383,"line_start":108,"line_end":108,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":2995}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":724386,"byte_end":724390,"line_start":108,"line_end":108,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":2995}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727425,"byte_end":727429,"line_start":206,"line_end":206,"column_start":9,"column_end":13},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727614,"byte_end":727618,"line_start":215,"line_end":215,"column_start":6,"column_end":10},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727792,"byte_end":727796,"line_start":222,"line_end":222,"column_start":6,"column_end":10},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":727972,"byte_end":727976,"line_start":229,"line_end":229,"column_start":6,"column_end":10},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728146,"byte_end":728150,"line_start":236,"line_end":236,"column_start":6,"column_end":10},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":728330,"byte_end":728334,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":729462,"byte_end":729466,"line_start":275,"line_end":275,"column_start":9,"column_end":13},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":730824,"byte_end":730828,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":731910,"byte_end":731914,"line_start":335,"line_end":335,"column_start":23,"column_end":27},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":7552},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":732416,"byte_end":732421,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":3007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734095,"byte_end":734099,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734875,"byte_end":734879,"line_start":442,"line_end":442,"column_start":9,"column_end":13},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":734995,"byte_end":734999,"line_start":449,"line_end":449,"column_start":6,"column_end":10},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735128,"byte_end":735132,"line_start":456,"line_end":456,"column_start":9,"column_end":13},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735246,"byte_end":735250,"line_start":463,"line_end":463,"column_start":6,"column_end":10},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735377,"byte_end":735381,"line_start":470,"line_end":470,"column_start":9,"column_end":13},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735500,"byte_end":735504,"line_start":477,"line_end":477,"column_start":6,"column_end":10},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735632,"byte_end":735636,"line_start":484,"line_end":484,"column_start":9,"column_end":13},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735754,"byte_end":735758,"line_start":491,"line_end":491,"column_start":6,"column_end":10},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":7643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":735886,"byte_end":735895,"line_start":499,"line_end":499,"column_start":9,"column_end":18},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":3003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":736131,"byte_end":736136,"line_start":510,"line_end":510,"column_start":19,"column_end":24},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":7595},"to":{"krate":0,"index":2995}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":741713,"byte_end":741720,"line_start":638,"line_end":638,"column_start":19,"column_end":26},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":7602},"to":{"krate":0,"index":2995}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":744466,"byte_end":744470,"line_start":716,"line_end":716,"column_start":20,"column_end":24},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":7577},"to":{"krate":0,"index":2980}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":745885,"byte_end":745887,"line_start":771,"line_end":771,"column_start":20,"column_end":22},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":7571},"to":{"krate":0,"index":2980}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":747297,"byte_end":747301,"line_start":826,"line_end":826,"column_start":20,"column_end":24},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":7583},"to":{"krate":0,"index":2980}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list.rs","byte_start":748721,"byte_end":748726,"line_start":881,"line_end":881,"column_start":20,"column_end":25},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":7589},"to":{"krate":0,"index":2980}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":751036,"byte_end":751045,"line_start":27,"line_end":27,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":2980},"to":{"krate":0,"index":3188}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":754920,"byte_end":754929,"line_start":134,"line_end":134,"column_start":33,"column_end":42},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":7770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756128,"byte_end":756138,"line_start":175,"line_end":175,"column_start":6,"column_end":16},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":7691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756363,"byte_end":756373,"line_start":182,"line_end":182,"column_start":6,"column_end":16},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":7691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":756609,"byte_end":756619,"line_start":189,"line_end":189,"column_start":15,"column_end":25},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":7691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":759403,"byte_end":759413,"line_start":268,"line_end":268,"column_start":9,"column_end":19},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":7691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":760157,"byte_end":760167,"line_start":288,"line_end":288,"column_start":15,"column_end":25},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":7691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":761182,"byte_end":761192,"line_start":318,"line_end":318,"column_start":12,"column_end":22},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":7691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":762592,"byte_end":762602,"line_start":347,"line_end":347,"column_start":26,"column_end":36},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":7691},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":764547,"byte_end":764553,"line_start":406,"line_end":406,"column_start":15,"column_end":21},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":3207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":768767,"byte_end":768773,"line_start":524,"line_end":524,"column_start":15,"column_end":21},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":7760},"to":{"krate":0,"index":3190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":770305,"byte_end":770313,"line_start":569,"line_end":569,"column_start":15,"column_end":23},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":7765},"to":{"krate":0,"index":3190}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":773933,"byte_end":773937,"line_start":666,"line_end":666,"column_start":34,"column_end":38},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":7577},"to":{"krate":0,"index":3188}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":774223,"byte_end":774225,"line_start":676,"line_end":676,"column_start":34,"column_end":36},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":7571},"to":{"krate":0,"index":3188}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":774511,"byte_end":774516,"line_start":686,"line_end":686,"column_start":34,"column_end":39},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":7589},"to":{"krate":0,"index":3188}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/list_select.rs","byte_start":774805,"byte_end":774809,"line_start":696,"line_end":696,"column_start":34,"column_end":38},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":7583},"to":{"krate":0,"index":3188}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":777919,"byte_end":777925,"line_start":95,"line_end":95,"column_start":6,"column_end":12},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":7784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":778438,"byte_end":778444,"line_start":117,"line_end":117,"column_start":17,"column_end":23},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":7784},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":780549,"byte_end":780557,"line_start":186,"line_end":186,"column_start":6,"column_end":14},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":7819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/matrix.rs","byte_start":781990,"byte_end":781997,"line_start":240,"line_end":240,"column_start":6,"column_end":13},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":7833},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":816182,"byte_end":816186,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":7847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":818223,"byte_end":818228,"line_start":196,"line_end":196,"column_start":19,"column_end":24},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":7981},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":818351,"byte_end":818356,"line_start":203,"line_end":203,"column_start":22,"column_end":27},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":7981},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":825439,"byte_end":825450,"line_start":409,"line_end":409,"column_start":19,"column_end":30},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":7990},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/node.rs","byte_start":826030,"byte_end":826034,"line_start":432,"line_end":432,"column_start":20,"column_end":24},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":7847},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783247,"byte_end":783251,"line_start":20,"line_end":20,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":3467}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783254,"byte_end":783259,"line_start":20,"line_end":20,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":3467}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783262,"byte_end":783271,"line_start":20,"line_end":20,"column_start":44,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1619},"to":{"krate":0,"index":3467}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783274,"byte_end":783276,"line_start":20,"line_end":20,"column_start":56,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":1624},"to":{"krate":0,"index":3467}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783279,"byte_end":783283,"line_start":20,"line_end":20,"column_start":61,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":6169},"to":{"krate":0,"index":3467}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783286,"byte_end":783290,"line_start":20,"line_end":20,"column_start":68,"column_end":72},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":3467}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783313,"byte_end":783314,"line_start":21,"line_end":21,"column_start":20,"column_end":21},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":3469},"to":{"krate":0,"index":3467}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783673,"byte_end":783679,"line_start":36,"line_end":36,"column_start":20,"column_end":26},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":8007},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":783834,"byte_end":783840,"line_start":46,"line_end":46,"column_start":23,"column_end":29},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":8007},"to":{"krate":2,"index":2065}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":786240,"byte_end":786253,"line_start":134,"line_end":134,"column_start":6,"column_end":19},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":8079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":787301,"byte_end":787312,"line_start":167,"line_end":167,"column_start":10,"column_end":21},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":8084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797030,"byte_end":797036,"line_start":443,"line_end":443,"column_start":39,"column_end":45},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":8007},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797182,"byte_end":797188,"line_start":452,"line_end":452,"column_start":39,"column_end":45},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":8007},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797324,"byte_end":797337,"line_start":462,"line_end":462,"column_start":10,"column_end":23},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":3503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":797862,"byte_end":797868,"line_start":479,"line_end":479,"column_start":27,"column_end":33},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":3512},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798098,"byte_end":798110,"line_start":491,"line_end":491,"column_start":10,"column_end":22},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":3506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":798735,"byte_end":798740,"line_start":509,"line_end":509,"column_start":27,"column_end":32},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":3517},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":799479,"byte_end":799491,"line_start":536,"line_end":536,"column_start":10,"column_end":22},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":3509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":799889,"byte_end":799894,"line_start":548,"line_end":548,"column_start":27,"column_end":32},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":3539},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":800525,"byte_end":800536,"line_start":572,"line_end":572,"column_start":14,"column_end":25},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":3524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":801023,"byte_end":801033,"line_start":596,"line_end":596,"column_start":17,"column_end":27},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":3532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802337,"byte_end":802347,"line_start":637,"line_end":637,"column_start":27,"column_end":37},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":3532},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":802502,"byte_end":802506,"line_start":647,"line_end":647,"column_start":14,"column_end":18},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":3546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":805240,"byte_end":805250,"line_start":725,"line_end":725,"column_start":17,"column_end":27},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":3554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":806457,"byte_end":806462,"line_start":764,"line_end":764,"column_start":16,"column_end":21},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":8022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/graph/mod.rs","byte_start":807328,"byte_end":807333,"line_start":792,"line_end":792,"column_start":27,"column_end":32},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":8022},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":836974,"byte_end":836986,"line_start":134,"line_end":134,"column_start":13,"column_end":25},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":8213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":837720,"byte_end":837732,"line_start":162,"line_end":162,"column_start":24,"column_end":36},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":8213},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":847905,"byte_end":847917,"line_start":400,"line_end":400,"column_start":27,"column_end":39},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":8213},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":848015,"byte_end":848027,"line_start":404,"line_end":404,"column_start":28,"column_end":40},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":8213},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/number_dialer.rs","byte_start":848203,"byte_end":848215,"line_start":411,"line_end":411,"column_start":31,"column_end":43},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":8213},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":849627,"byte_end":849635,"line_start":49,"line_end":49,"column_start":15,"column_end":23},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":8298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":850243,"byte_end":850251,"line_start":71,"line_end":71,"column_start":26,"column_end":34},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":8298},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/plot_path.rs","byte_start":852159,"byte_end":852167,"line_start":132,"line_end":132,"column_start":29,"column_end":37},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":8298},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":854968,"byte_end":854973,"line_start":98,"line_end":98,"column_start":22,"column_end":27},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":8440},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":855308,"byte_end":855319,"line_start":112,"line_end":112,"column_start":13,"column_end":24},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":8345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":856364,"byte_end":856375,"line_start":148,"line_end":148,"column_start":24,"column_end":35},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":8345},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":867046,"byte_end":867057,"line_start":387,"line_end":387,"column_start":27,"column_end":38},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":8345},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":867155,"byte_end":867166,"line_start":391,"line_end":391,"column_start":28,"column_end":39},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":8345},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/range_slider.rs","byte_start":867342,"byte_end":867353,"line_start":398,"line_end":398,"column_start":31,"column_end":42},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":8345},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":868860,"byte_end":868876,"line_start":41,"line_end":41,"column_start":6,"column_end":22},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":8453},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":870330,"byte_end":870346,"line_start":79,"line_end":79,"column_start":17,"column_end":33},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":8453},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":871284,"byte_end":871300,"line_start":113,"line_end":113,"column_start":20,"column_end":36},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":8453},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/rounded_rectangle.rs","byte_start":872533,"byte_end":872539,"line_start":155,"line_end":155,"column_start":19,"column_end":25},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":8471},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874536,"byte_end":874540,"line_start":23,"line_end":23,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":1816},"to":{"krate":0,"index":3904}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":874543,"byte_end":874548,"line_start":23,"line_end":23,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":3904}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":876340,"byte_end":876349,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":8479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877472,"byte_end":877481,"line_start":108,"line_end":108,"column_start":6,"column_end":15},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":8479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":877802,"byte_end":877811,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":8479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":878145,"byte_end":878154,"line_start":132,"line_end":132,"column_start":20,"column_end":29},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":8479},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":885019,"byte_end":885020,"line_start":300,"line_end":300,"column_start":15,"column_end":16},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":6019},"to":{"krate":0,"index":3904}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":885954,"byte_end":885955,"line_start":334,"line_end":334,"column_start":15,"column_end":16},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":6028},"to":{"krate":0,"index":3904}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/scrollbar.rs","byte_start":886896,"byte_end":886905,"line_start":368,"line_end":368,"column_start":23,"column_end":32},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":8479},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889288,"byte_end":889294,"line_start":74,"line_end":74,"column_start":13,"column_end":19},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":8525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":889999,"byte_end":890005,"line_start":103,"line_end":103,"column_start":24,"column_end":30},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":8525},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":896132,"byte_end":896138,"line_start":259,"line_end":259,"column_start":27,"column_end":33},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":8525},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":896236,"byte_end":896242,"line_start":263,"line_end":263,"column_start":28,"column_end":34},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":8525},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/slider.rs","byte_start":896418,"byte_end":896424,"line_start":270,"line_end":270,"column_start":31,"column_end":37},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":8525},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":899092,"byte_end":899096,"line_start":81,"line_end":81,"column_start":10,"column_end":14},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":8599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":902208,"byte_end":902212,"line_start":171,"line_end":171,"column_start":21,"column_end":25},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":8599},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":910224,"byte_end":910228,"line_start":379,"line_end":379,"column_start":33,"column_end":37},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":8599},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":910433,"byte_end":910437,"line_start":388,"line_end":388,"column_start":35,"column_end":39},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":8599},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/tabs.rs","byte_start":911011,"byte_end":911019,"line_start":411,"line_end":411,"column_start":10,"column_end":18},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":4099},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":914487,"byte_end":914494,"line_start":66,"line_end":66,"column_start":10,"column_end":17},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":8682},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":915911,"byte_end":915918,"line_start":116,"line_end":116,"column_start":21,"column_end":28},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":8682},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":918584,"byte_end":918591,"line_start":198,"line_end":198,"column_start":25,"column_end":32},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":8682},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_box.rs","byte_start":918757,"byte_end":918764,"line_start":205,"line_end":205,"column_start":24,"column_end":31},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":8682},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":922212,"byte_end":922220,"line_start":102,"line_end":102,"column_start":10,"column_end":18},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":8768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":924832,"byte_end":924840,"line_start":181,"line_end":181,"column_start":21,"column_end":29},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":8768},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/text_edit.rs","byte_start":965251,"byte_end":965259,"line_start":986,"line_end":986,"column_start":24,"column_end":32},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":8768},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":968141,"byte_end":968149,"line_start":77,"line_end":77,"column_start":10,"column_end":18},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":8874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":969969,"byte_end":969977,"line_start":137,"line_end":137,"column_start":21,"column_end":29},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":8874},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":972190,"byte_end":972198,"line_start":203,"line_end":203,"column_start":24,"column_end":32},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":8874},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":972290,"byte_end":972298,"line_start":207,"line_end":207,"column_start":25,"column_end":33},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":8874},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/title_bar.rs","byte_start":972468,"byte_end":972476,"line_start":214,"line_end":214,"column_start":28,"column_end":36},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":8874},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975290,"byte_end":975302,"line_start":80,"line_end":80,"column_start":19,"column_end":31},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":9042},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":975561,"byte_end":975567,"line_start":94,"line_end":94,"column_start":10,"column_end":16},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":8968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":976560,"byte_end":976566,"line_start":131,"line_end":131,"column_start":21,"column_end":27},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":8968},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":979040,"byte_end":979046,"line_start":204,"line_end":204,"column_start":24,"column_end":30},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":8968},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":979138,"byte_end":979144,"line_start":208,"line_end":208,"column_start":25,"column_end":31},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":8968},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/toggle.rs","byte_start":979314,"byte_end":979320,"line_start":215,"line_end":215,"column_start":28,"column_end":34},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":8968},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":981790,"byte_end":981795,"line_start":80,"line_end":80,"column_start":16,"column_end":21},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":9056},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":982647,"byte_end":982652,"line_start":108,"line_end":108,"column_start":27,"column_end":32},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":9056},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":988158,"byte_end":988163,"line_start":257,"line_end":257,"column_start":30,"column_end":35},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":9056},"to":{"krate":0,"index":140}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":988267,"byte_end":988272,"line_start":261,"line_end":261,"column_start":31,"column_end":36},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":9056},"to":{"krate":0,"index":44}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/xy_pad.rs","byte_start":988454,"byte_end":988459,"line_start":268,"line_end":268,"column_start":34,"column_end":39},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":9056},"to":{"krate":0,"index":661}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":441702,"byte_end":441713,"line_start":159,"line_end":159,"column_start":6,"column_end":17},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":9160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451129,"byte_end":451135,"line_start":366,"line_end":366,"column_start":21,"column_end":27},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":9236},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451220,"byte_end":451226,"line_start":372,"line_end":372,"column_start":19,"column_end":25},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":9236},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451747,"byte_end":451750,"line_start":387,"line_end":387,"column_start":28,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":4427}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451763,"byte_end":451768,"line_start":387,"line_end":387,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":4427}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451771,"byte_end":451780,"line_start":387,"line_end":387,"column_start":52,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":1619},"to":{"krate":0,"index":4427}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451783,"byte_end":451788,"line_start":387,"line_end":387,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":4427}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":451876,"byte_end":451877,"line_start":390,"line_end":390,"column_start":19,"column_end":20},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":4429},"to":{"krate":0,"index":4427}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456417,"byte_end":456423,"line_start":510,"line_end":510,"column_start":19,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":4442},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":456426,"byte_end":456431,"line_start":510,"line_end":510,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":4445}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":487564,"byte_end":487569,"line_start":1213,"line_end":1213,"column_start":13,"column_end":18},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":4394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488249,"byte_end":488254,"line_start":1230,"line_end":1230,"column_start":33,"column_end":38},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":4394},"to":{"krate":2,"index":2054}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488359,"byte_end":488372,"line_start":1237,"line_end":1237,"column_start":18,"column_end":31},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":9188},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":488773,"byte_end":488774,"line_start":1252,"line_end":1252,"column_start":26,"column_end":27},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":4519},"to":{"krate":0,"index":879}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_core-0.70.0/src/widget/mod.rs","byte_start":490931,"byte_end":490932,"line_start":1306,"line_end":1306,"column_start":22,"column_end":23},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":4533},"to":{"krate":0,"index":978}}]}