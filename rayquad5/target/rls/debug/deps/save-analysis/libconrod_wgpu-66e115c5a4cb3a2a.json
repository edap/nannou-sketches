{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","conrod_wgpu","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=66e115c5a4cb3a2a","-C","extra-filename=-66e115c5a4cb3a2a","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","conrod_core=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libconrod_core-1ecc6dabef746803.rmeta","--extern","wgpu=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libwgpu-52d762efab7690ff.rmeta","--cap-lints","allow","-L","native=/usr/lib/x86_64-linux-gnu","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libconrod_wgpu-66e115c5a4cb3a2a.rmeta"},"prelude":{"crate_id":{"name":"conrod_wgpu","disambiguator":[3037158012914089553,15761985621289124782]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":15,"id":{"name":"conrod_core","disambiguator":[3669700690814996850,4083983147112921473]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":16,"id":{"name":"conrod_derive","disambiguator":[9342511705839896519,7872944015647106597]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":17,"id":{"name":"daggy","disambiguator":[1013770809337084085,13972747579097955032]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":18,"id":{"name":"petgraph","disambiguator":[3315239079231450119,958776490011743235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":19,"id":{"name":"fixedbitset","disambiguator":[12136443693809048143,16088621428177435084]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":20,"id":{"name":"fnv","disambiguator":[14281685175553729897,390416791569617835]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":21,"id":{"name":"num","disambiguator":[4845004307707135205,1049910000399833287]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":22,"id":{"name":"num_bigint","disambiguator":[4986794666047575125,10821525405673859681]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":23,"id":{"name":"num_integer","disambiguator":[6180277847919311141,9508011011995319903]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":24,"id":{"name":"num_traits","disambiguator":[2136015123687830033,9735163811384062178]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":25,"id":{"name":"num_complex","disambiguator":[14161839126359287092,9104376030932332877]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":26,"id":{"name":"num_iter","disambiguator":[6584923289254514014,2865933681195123743]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":27,"id":{"name":"num_rational","disambiguator":[3692822974015002852,1929092048819883759]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":28,"id":{"name":"input","disambiguator":[5540246849700381785,6377906306683581924]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":29,"id":{"name":"bitflags","disambiguator":[381175081479133518,10994153786536176848]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":30,"id":{"name":"serde_derive","disambiguator":[4068705472082037422,6216815937653911113]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":31,"id":{"name":"serde","disambiguator":[16461157006250760294,16969646198258567013]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":32,"id":{"name":"viewport","disambiguator":[4951742417841838600,11974149403952088686]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":33,"id":{"name":"float","disambiguator":[7058803201048799360,15073071385537191820]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":34,"id":{"name":"rusttype","disambiguator":[8321851766944748726,10627738263869689343]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":35,"id":{"name":"approx","disambiguator":[3974204333726389161,9801222716720129469]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":36,"id":{"name":"ordered_float","disambiguator":[11999856798631254802,9466996267134285281]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":37,"id":{"name":"linked_hash_map","disambiguator":[2338188053214421811,62691985004639161]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":38,"id":{"name":"rustc_hash","disambiguator":[642462796696129389,1517420890865137522]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":39,"id":{"name":"crossbeam_deque","disambiguator":[5235303285713816219,1168591414518111885]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":40,"id":{"name":"crossbeam_epoch","disambiguator":[17163470530562775512,8709529870593392442]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":41,"id":{"name":"cfg_if","disambiguator":[905820604123660737,9080961431952796619]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":42,"id":{"name":"maybe_uninit","disambiguator":[9925295721960399709,5075810066591430732]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":43,"id":{"name":"crossbeam_utils","disambiguator":[12815700305172623123,14563506393251252287]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":44,"id":{"name":"lazy_static","disambiguator":[9660684555614800310,8568331244489293542]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":45,"id":{"name":"memoffset","disambiguator":[2892690869131483658,14795605606618073579]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":46,"id":{"name":"scopeguard","disambiguator":[5081943333480440636,9076196664652206448]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":47,"id":{"name":"stb_truetype","disambiguator":[7859580680744222542,12689058129209723278]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":48,"id":{"name":"byteorder","disambiguator":[10719404080946289605,17148540255389135738]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":49,"id":{"name":"num_cpus","disambiguator":[5911647018467507976,7042850928943217931]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":50,"id":{"name":"libc","disambiguator":[7997064065336242500,8511025302220419458]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":51,"id":{"name":"copypasta","disambiguator":[12885462965552187201,14801356417931910637]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":52,"id":{"name":"smithay_clipboard","disambiguator":[1720983756907955291,4120069654822330779]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":53,"id":{"name":"nix","disambiguator":[15620197577567632531,14544443222869993471]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":54,"id":{"name":"void","disambiguator":[15288213692648777334,766411746124632892]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":55,"id":{"name":"smithay_client_toolkit","disambiguator":[6299729684330695960,594554865109829038]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":56,"id":{"name":"dlib","disambiguator":[3572392270384705459,10284649347613603682]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":57,"id":{"name":"libloading","disambiguator":[11641301825938901659,14827736444180748540]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":58,"id":{"name":"andrew","disambiguator":[18257031280259246793,2503471863536104115]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":59,"id":{"name":"line_drawing","disambiguator":[4535907520618111930,15715399478272792272]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":60,"id":{"name":"rusttype","disambiguator":[14243846864571247546,14119812811183285507]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":61,"id":{"name":"walkdir","disambiguator":[15836095841209596364,100417286177859557]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":62,"id":{"name":"same_file","disambiguator":[3476162871963927227,13059679438823549728]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":63,"id":{"name":"xdg","disambiguator":[7453588217950002805,11507294192943688732]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":64,"id":{"name":"xml","disambiguator":[15017834915304358724,772194227792966984]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":65,"id":{"name":"memmap","disambiguator":[3175860337248092939,5153411100839449853]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":66,"id":{"name":"wayland_client","disambiguator":[6311827216580410303,9016086078008703494]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":67,"id":{"name":"calloop","disambiguator":[4271121796891661057,3960389200219368413]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":68,"id":{"name":"mio","disambiguator":[10752672390248736491,3541940276479623666]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":69,"id":{"name":"net2","disambiguator":[15724288642931917556,10167986607080482737]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":70,"id":{"name":"iovec","disambiguator":[2383767226138008962,8111536067661003810]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":71,"id":{"name":"slab","disambiguator":[4729543071339994363,11740316045407999008]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":72,"id":{"name":"log","disambiguator":[2463566853520751095,647246307195811942]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":73,"id":{"name":"mio_extras","disambiguator":[14790969942441726164,5662599318725477735]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":74,"id":{"name":"lazycell","disambiguator":[9872127294747603159,6643548488606914393]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":75,"id":{"name":"wayland_commons","disambiguator":[7793301036586629500,1033779467939928083]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":76,"id":{"name":"wayland_sys","disambiguator":[10467944146308249229,7230107118439387192]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":77,"id":{"name":"wayland_protocols","disambiguator":[9409596664844979507,15923066989530266284]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":78,"id":{"name":"x11_clipboard","disambiguator":[8496550220409904580,9917863987564031944]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":79,"id":{"name":"xcb","disambiguator":[15072210138273375568,9612976937841548783]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":80,"id":{"name":"instant","disambiguator":[6200477003012787208,15772367084207058342]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":81,"id":{"name":"wgpu","disambiguator":[12528335196973600570,17071705015952214038]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":82,"id":{"name":"parking_lot","disambiguator":[16554682812003532951,3232511923212470204]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":83,"id":{"name":"lock_api","disambiguator":[2863804777762583869,14799884867851676310]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":84,"id":{"name":"parking_lot_core","disambiguator":[17423062282415908726,2925042377433277499]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":85,"id":{"name":"smallvec","disambiguator":[8424235311401871579,2024392795712170874]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":86,"id":{"name":"arrayvec","disambiguator":[9004341979910421875,14891185808555529484]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":87,"id":{"name":"wgpu_types","disambiguator":[14357785073259150552,3354238834040034292]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":88,"id":{"name":"peek_poke","disambiguator":[14331327832270415912,8630366020488660477]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":89,"id":{"name":"peek_poke_derive","disambiguator":[15107351388756802746,4536164632405274167]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":90,"id":{"name":"wgpu_core","disambiguator":[4849257671602977732,14968735803367757800]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":91,"id":{"name":"gfx_backend_empty","disambiguator":[15570638977034065362,3005036407645018242]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":92,"id":{"name":"gfx_hal","disambiguator":[11122676734006237625,10181242700647790931]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":93,"id":{"name":"raw_window_handle","disambiguator":[6552574937117001955,7578084645408101463]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":94,"id":{"name":"gfx_backend_vulkan","disambiguator":[1293028570960877467,1827271728393022748]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":95,"id":{"name":"ash","disambiguator":[13326526696875271192,14646632525963250969]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":96,"id":{"name":"gfx_descriptor","disambiguator":[6095036957982477111,17269523964587798349]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":97,"id":{"name":"fxhash","disambiguator":[949214370214060910,13199831759942322742]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":98,"id":{"name":"copyless","disambiguator":[5348737350794132577,14259337281780975958]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":99,"id":{"name":"gfx_memory","disambiguator":[12972892183308685379,12518162897643129721]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":100,"id":{"name":"hibitset","disambiguator":[12551236931944093258,15446363680029529775]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":101,"id":{"name":"atom","disambiguator":[7388032441240403036,7755558300585397009]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":102,"id":{"name":"vec_map","disambiguator":[7922345956730970798,7298238641922458119]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","num":103,"id":{"name":"wgpu_native","disambiguator":[17234771122095828114,13023491115061837703]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":0,"byte_end":29802,"line_start":1,"line_end":789,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":0,"byte_end":29802,"line_start":1,"line_end":789,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":104},{"krate":0,"index":139},{"krate":0,"index":138},{"krate":0,"index":136},{"krate":0,"index":134},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":112},{"krate":0,"index":20},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":41},{"krate":0,"index":45},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":81},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":15},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":203,"byte_end":208,"line_start":11,"line_end":11,"column_start":12,"column_end":17},"name":"Image","qualname":"::Image","value":"Image { texture, texture_format, width, height }","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19}],"decl_id":null,"docs":" A loaded wgpu texture and it's width/height\n","sig":null,"attributes":[{"value":"/ A loaded wgpu texture and it's width/height","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":144,"byte_end":191,"line_start":10,"line_end":10,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":16},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":393,"byte_end":400,"line_start":15,"line_end":15,"column_start":9,"column_end":16},"name":"texture","qualname":"::Image::texture","value":"wgpu::Texture","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" The immutable image type, represents the data loaded onto the GPU.","sig":null,"attributes":[{"value":"/ The immutable image type, represents the data loaded onto the GPU.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":215,"byte_end":285,"line_start":12,"line_end":12,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":290,"byte_end":293,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Uses a dynamic format for flexibility on the kinds of images that might be loaded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":298,"byte_end":384,"line_start":14,"line_end":14,"column_start":5,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":17},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":462,"byte_end":476,"line_start":17,"line_end":17,"column_start":9,"column_end":23},"name":"texture_format","qualname":"::Image::texture_format","value":"wgpu_types::TextureFormat","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" The format of the `texture`.\n","sig":null,"attributes":[{"value":"/ The format of the `texture`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":421,"byte_end":453,"line_start":16,"line_end":16,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":18},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":539,"byte_end":544,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"width","qualname":"::Image::width","value":"u32","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" The width of the image.\n","sig":null,"attributes":[{"value":"/ The width of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":503,"byte_end":530,"line_start":18,"line_end":18,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":19},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":592,"byte_end":598,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"height","qualname":"::Image::height","value":"u32","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" The height of the image.\n","sig":null,"attributes":[{"value":"/ The height of the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":555,"byte_end":583,"line_start":20,"line_end":20,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":738,"byte_end":744,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Vertex","qualname":"::Vertex","value":"Vertex { position, tex_coords, rgba, mode }","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111}],"decl_id":null,"docs":" The data associated with a single vertex.\n","sig":null,"attributes":[{"value":"/ The data associated with a single vertex.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":608,"byte_end":653,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":654,"byte_end":664,"line_start":25,"line_end":25,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":966,"byte_end":974,"line_start":32,"line_end":32,"column_start":9,"column_end":17},"name":"position","qualname":"::Vertex::position","value":"[f32; 2]","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The normalised position of the vertex within vector space.","sig":null,"attributes":[{"value":"/ The normalised position of the vertex within vector space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":751,"byte_end":813,"line_start":28,"line_end":28,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":818,"byte_end":821,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ [-1.0, 1.0] is the leftmost, bottom position of the display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":826,"byte_end":890,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/ [1.0, -1.0] is the rightmost, top position of the display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":895,"byte_end":957,"line_start":31,"line_end":31,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1198,"byte_end":1208,"line_start":37,"line_end":37,"column_start":9,"column_end":19},"name":"tex_coords","qualname":"::Vertex::tex_coords","value":"[f32; 2]","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The coordinates of the texture used by this `Vertex`.","sig":null,"attributes":[{"value":"/ The coordinates of the texture used by this `Vertex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":990,"byte_end":1047,"line_start":33,"line_end":33,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1052,"byte_end":1055,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ [0.0, 0.0] is the leftmost, top position of the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1060,"byte_end":1120,"line_start":35,"line_end":35,"column_start":5,"column_end":65}},{"value":"/ [1.0, 1.0] is the rightmost, bottom position of the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1125,"byte_end":1189,"line_start":36,"line_end":36,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1271,"byte_end":1275,"line_start":39,"line_end":39,"column_start":9,"column_end":13},"name":"rgba","qualname":"::Vertex::rgba","value":"[f32; 4]","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Linear sRGB with an alpha channel.\n","sig":null,"attributes":[{"value":"/ Linear sRGB with an alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1224,"byte_end":1262,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1598,"byte_end":1602,"line_start":47,"line_end":47,"column_start":9,"column_end":13},"name":"mode","qualname":"::Vertex::mode","value":"u32","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" The mode with which the `Vertex` will be drawn within the fragment shader.","sig":null,"attributes":[{"value":"/ The mode with which the `Vertex` will be drawn within the fragment shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1291,"byte_end":1369,"line_start":40,"line_end":40,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1374,"byte_end":1377,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ `0` for rendering text.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1382,"byte_end":1409,"line_start":42,"line_end":42,"column_start":5,"column_end":32}},{"value":"/ `1` for rendering an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1414,"byte_end":1445,"line_start":43,"line_end":43,"column_start":5,"column_end":36}},{"value":"/ `2` for rendering non-textured 2D geometry.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1450,"byte_end":1497,"line_start":44,"line_end":44,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1502,"byte_end":1505,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ If any other value is given, the fragment shader will not output any color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1510,"byte_end":1589,"line_start":46,"line_end":46,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1707,"byte_end":1715,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"Renderer","qualname":"::Renderer","value":"Renderer {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":" A helper type aimed at simplifying the rendering of conrod primitives via wgpu.\n","sig":null,"attributes":[{"value":"/ A helper type aimed at simplifying the rendering of conrod primitives via wgpu.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":1612,"byte_end":1695,"line_start":50,"line_end":50,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":35},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2641,"byte_end":2658,"line_start":77,"line_end":77,"column_start":12,"column_end":29},"name":"GlyphCacheCommand","qualname":"::GlyphCacheCommand","value":"GlyphCacheCommand { glyph_cache_pixel_buffer, glyph_cache_texture, width, height }","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":" An command for uploading an individual glyph.\n","sig":null,"attributes":[{"value":"/ An command for uploading an individual glyph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2580,"byte_end":2629,"line_start":76,"line_end":76,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":37},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2723,"byte_end":2747,"line_start":79,"line_end":79,"column_start":9,"column_end":33},"name":"glyph_cache_pixel_buffer","qualname":"::GlyphCacheCommand::glyph_cache_pixel_buffer","value":"&'a [u8]","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" The CPU buffer containing the pixel data.\n","sig":null,"attributes":[{"value":"/ The CPU buffer containing the pixel data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2669,"byte_end":2714,"line_start":78,"line_end":78,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":38},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2821,"byte_end":2840,"line_start":81,"line_end":81,"column_start":9,"column_end":28},"name":"glyph_cache_texture","qualname":"::GlyphCacheCommand::glyph_cache_texture","value":"&'a wgpu::Texture","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" The GPU image to which the glyphs are cached.\n","sig":null,"attributes":[{"value":"/ The GPU image to which the glyphs are cached.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2763,"byte_end":2812,"line_start":80,"line_end":80,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":39},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2903,"byte_end":2908,"line_start":83,"line_end":83,"column_start":9,"column_end":14},"name":"width","qualname":"::GlyphCacheCommand::width","value":"u32","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" The width of the texture.\n","sig":null,"attributes":[{"value":"/ The width of the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2865,"byte_end":2894,"line_start":82,"line_end":82,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":40},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2958,"byte_end":2964,"line_start":85,"line_end":85,"column_start":9,"column_end":15},"name":"height","qualname":"::GlyphCacheCommand::height","value":"u32","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" The height of the texture.\n","sig":null,"attributes":[{"value":"/ The height of the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2919,"byte_end":2949,"line_start":84,"line_end":84,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":41},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3041,"byte_end":3047,"line_start":89,"line_end":89,"column_start":12,"column_end":18},"name":"Render","qualname":"::Render","value":"Render { vertex_buffer, commands }","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" A render produced by the `Renderer::render` method.\n","sig":null,"attributes":[{"value":"/ A render produced by the `Renderer::render` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":2974,"byte_end":3029,"line_start":88,"line_end":88,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":43},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3062,"byte_end":3075,"line_start":90,"line_end":90,"column_start":9,"column_end":22},"name":"vertex_buffer","qualname":"::Render::vertex_buffer","value":"wgpu::Buffer","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":44},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3099,"byte_end":3107,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"commands","qualname":"::Render::commands","value":"std::vec::Vec<RenderPassCommand<'a>>","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":47},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3494,"byte_end":3504,"line_start":99,"line_end":99,"column_start":5,"column_end":15},"name":"SetScissor","qualname":"::RenderPassCommand::SetScissor","value":"RenderPassCommand::SetScissor { top_left, dimensions }","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Specify the rectangle to which drawing should be cropped.\n","sig":null,"attributes":[{"value":"/ Specify the rectangle to which drawing should be cropped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3428,"byte_end":3489,"line_start":98,"line_end":98,"column_start":5,"column_end":66}}]},{"kind":"StructVariant","id":{"krate":0,"index":52},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3622,"byte_end":3626,"line_start":104,"line_end":104,"column_start":5,"column_end":9},"name":"Draw","qualname":"::RenderPassCommand::Draw","value":"RenderPassCommand::Draw { vertex_range }","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Draw the specified range of vertices.\n","sig":null,"attributes":[{"value":"/ Draw the specified range of vertices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3576,"byte_end":3617,"line_start":103,"line_end":103,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":54},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3755,"byte_end":3767,"line_start":106,"line_end":106,"column_start":5,"column_end":17},"name":"SetBindGroup","qualname":"::RenderPassCommand::SetBindGroup","value":"RenderPassCommand::SetBindGroup { bind_group }","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" A new image requires drawing and in turn a new bind group requires setting.\n","sig":null,"attributes":[{"value":"/ A new image requires drawing and in turn a new bind group requires setting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3671,"byte_end":3750,"line_start":105,"line_end":105,"column_start":5,"column_end":84}}]},{"kind":"StructVariant","id":{"krate":0,"index":56},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3947,"byte_end":3958,"line_start":109,"line_end":109,"column_start":5,"column_end":16},"name":"SetPipeline","qualname":"::RenderPassCommand::SetPipeline","value":"RenderPassCommand::SetPipeline { pipeline }","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" An image requiring a different bind group layout requires drawing and in turn, we must set\n the necessary render pipeline.\n","sig":null,"attributes":[{"value":"/ An image requiring a different bind group layout requires drawing and in turn, we must set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3809,"byte_end":3903,"line_start":107,"line_end":107,"column_start":5,"column_end":99}},{"value":"/ the necessary render pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3908,"byte_end":3942,"line_start":108,"line_end":108,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":45},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3400,"byte_end":3417,"line_start":97,"line_end":97,"column_start":10,"column_end":27},"name":"RenderPassCommand","qualname":"::RenderPassCommand","value":"RenderPassCommand::{SetScissor, Draw, SetBindGroup, SetPipeline}","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56}],"decl_id":null,"docs":" A draw command that maps directly to the `wgpu::CommandEncoder` method. By returning\n `RenderPassCommand`s, we can avoid consuming the entire `AutoCommandBufferBuilder` itself which might\n not always be available from APIs that wrap Vulkan.\n","sig":null,"attributes":[{"value":"/ A draw command that maps directly to the `wgpu::CommandEncoder` method. By returning","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3140,"byte_end":3228,"line_start":94,"line_end":94,"column_start":1,"column_end":89}},{"value":"/ `RenderPassCommand`s, we can avoid consuming the entire `AutoCommandBufferBuilder` itself which might","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3229,"byte_end":3334,"line_start":95,"line_end":95,"column_start":1,"column_end":106}},{"value":"/ not always be available from APIs that wrap Vulkan.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":3335,"byte_end":3390,"line_start":96,"line_end":96,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4401,"byte_end":4423,"line_start":123,"line_end":123,"column_start":12,"column_end":34},"name":"texture_component_type","qualname":"<Image>::texture_component_type","value":"fn (&self) -> wgpu::TextureComponentType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4875,"byte_end":4878,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<Renderer>::new","value":"fn (device: &wgpu::Device, dst_sample_count: u32, dst_format: wgpu::TextureFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Renderer`.","sig":null,"attributes":[{"value":"/ Construct a new `Renderer`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4554,"byte_end":4585,"line_start":129,"line_end":129,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4590,"byte_end":4593,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ The `dst_sample_count` and `dst_format` refer to the associated properties of the output","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4598,"byte_end":4690,"line_start":131,"line_end":131,"column_start":5,"column_end":97}},{"value":"/ attachment to which the `Renderer` will draw. Note that if the `dst_sample_count` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4695,"byte_end":4783,"line_start":132,"line_end":132,"column_start":5,"column_end":93}},{"value":"/ `dst_format` change at runtime, the `Renderer` should be reconstructed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4788,"byte_end":4863,"line_start":133,"line_end":133,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":5524,"byte_end":5551,"line_start":148,"line_end":148,"column_start":12,"column_end":39},"name":"with_glyph_cache_dimensions","qualname":"<Renderer>::with_glyph_cache_dimensions","value":"fn (device: &wgpu::Device, dst_sample_count: u32, dst_format: wgpu::TextureFormat, glyph_cache_dims: [u32; 2]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a renderer with a specific size for the glyph cache.","sig":null,"attributes":[{"value":"/ Create a renderer with a specific size for the glyph cache.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":5171,"byte_end":5234,"line_start":143,"line_end":143,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":5239,"byte_end":5242,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ The `dst_sample_count` and `dst_format` refer to the associated properties of the output","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":5247,"byte_end":5339,"line_start":145,"line_end":145,"column_start":5,"column_end":97}},{"value":"/ attachment to which the `Renderer` will draw. Note that if the `dst_sample_count` or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":5344,"byte_end":5432,"line_start":146,"line_end":146,"column_start":5,"column_end":93}},{"value":"/ `dst_format` change at runtime, the `Renderer` should be reconstructed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":5437,"byte_end":5512,"line_start":147,"line_end":147,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":8689,"byte_end":8697,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"commands","qualname":"<Renderer>::commands","value":"fn (&self) -> mesh::Commands","parent":null,"children":[],"decl_id":null,"docs":" Produce an `Iterator` yielding `Command`s.\n","sig":null,"attributes":[{"value":"/ Produce an `Iterator` yielding `Command`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":8631,"byte_end":8677,"line_start":231,"line_end":231,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":9162,"byte_end":9166,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"fill","qualname":"<Renderer>::fill","value":"fn <'a, P> (&'a mut self, image_map: &image::Map<Image>, viewport: [f32; 4], scale_factor: f64, primitives: P) -> Result<Option<GlyphCacheCommand<'a>>, rt::gpu_cache::CacheWriteErr>","parent":null,"children":[],"decl_id":null,"docs":" Fill the inner vertex and command buffers by translating the given `primitives`.","sig":null,"attributes":[{"value":"/ Fill the inner vertex and command buffers by translating the given `primitives`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":8765,"byte_end":8849,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":8854,"byte_end":8857,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This method may return an `Option<GlyphCacheCommand>`, in which case the user should use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":8862,"byte_end":8954,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ the contained `glyph_cpu_buffer_pool` to write the pixel data to the GPU, and then use a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":8959,"byte_end":9051,"line_start":239,"line_end":239,"column_start":5,"column_end":97}},{"value":"/ `copy_buffer_to_image` command to write the data to the given `glyph_cache_texture` image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":9056,"byte_end":9150,"line_start":240,"line_end":240,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":10608,"byte_end":10614,"line_start":279,"line_end":279,"column_start":12,"column_end":18},"name":"render","qualname":"<Renderer>::render","value":"fn (&mut self, device: &wgpu::Device, image_map: &image::Map<Image>) -> Render","parent":null,"children":[],"decl_id":null,"docs":" Converts the inner list of `Command`s generated via `fill` to a list of\n `RenderPassCommand`s that are easily digestible by a `wgpu::RenderPass` produced by a\n `wgpu::CommandEncoder`.\n","sig":null,"attributes":[{"value":"/ Converts the inner list of `Command`s generated via `fill` to a list of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":10395,"byte_end":10470,"line_start":276,"line_end":276,"column_start":5,"column_end":80}},{"value":"/ `RenderPassCommand`s that are easily digestible by a `wgpu::RenderPass` produced by a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":10475,"byte_end":10564,"line_start":277,"line_end":277,"column_start":5,"column_end":94}},{"value":"/ `wgpu::CommandEncoder`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":10569,"byte_end":10596,"line_start":278,"line_end":278,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18227,"byte_end":18240,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"create_buffer","qualname":"<GlyphCacheCommand>::create_buffer","value":"fn (&self, device: &wgpu::Device) -> wgpu::Buffer","parent":null,"children":[],"decl_id":null,"docs":" Creates a buffer on the GPU loaded with the updated pixel data.","sig":null,"attributes":[{"value":"/ Creates a buffer on the GPU loaded with the updated pixel data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17537,"byte_end":17604,"line_start":441,"line_end":441,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17609,"byte_end":17612,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Created with `BufferUsage::COPY_SRC`, ready to be copied to the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17617,"byte_end":17693,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17698,"byte_end":17701,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ TODO: In the future, we should consider re-using the same buffer and writing to it via","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17706,"byte_end":17796,"line_start":445,"line_end":445,"column_start":5,"column_end":95}},{"value":"/ `Buffer::map_write_async`. When asking about how to ensure that the write completes before","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17801,"byte_end":17895,"line_start":446,"line_end":446,"column_start":5,"column_end":99}},{"value":"/ the following `copy_buffer_to_texture` command, I was advised to just create a new buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17900,"byte_end":17993,"line_start":447,"line_end":447,"column_start":5,"column_end":98}},{"value":"/ each time instead for now.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17998,"byte_end":18028,"line_start":448,"line_end":448,"column_start":5,"column_end":35}},{"value":"/ EDIT:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18033,"byte_end":18042,"line_start":449,"line_end":449,"column_start":5,"column_end":14}},{"value":"/ > if you try to map an existing buffer, it will give it to you only after all the gpu use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18047,"byte_end":18140,"line_start":450,"line_end":450,"column_start":5,"column_end":98}},{"value":"/ > of the buffer is over. So you can't do it every frame reasonably","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18145,"byte_end":18215,"line_start":451,"line_end":451,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18485,"byte_end":18501,"line_start":457,"line_end":457,"column_start":12,"column_end":28},"name":"buffer_copy_view","qualname":"<GlyphCacheCommand>::buffer_copy_view","value":"fn <'b> (&self, buffer: &'b wgpu::Buffer) -> wgpu::BufferCopyView<'b>","parent":null,"children":[],"decl_id":null,"docs":" Create the copy view ready for copying the pixel data to the texture.\n","sig":null,"attributes":[{"value":"/ Create the copy view ready for copying the pixel data to the texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18400,"byte_end":18473,"line_start":456,"line_end":456,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18840,"byte_end":18857,"line_start":467,"line_end":467,"column_start":12,"column_end":29},"name":"texture_copy_view","qualname":"<GlyphCacheCommand>::texture_copy_view","value":"fn (&self) -> wgpu::TextureCopyView","parent":null,"children":[],"decl_id":null,"docs":" Create the texture copy view ready for receiving the pixel data from the buffer.\n","sig":null,"attributes":[{"value":"/ Create the texture copy view ready for receiving the pixel data from the buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":18744,"byte_end":18828,"line_start":466,"line_end":466,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":19187,"byte_end":19193,"line_start":477,"line_end":477,"column_start":12,"column_end":18},"name":"encode","qualname":"<GlyphCacheCommand>::encode","value":"fn (&self, buffer: &wgpu::Buffer, encoder: &mut wgpu::CommandEncoder) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Encode the command for copying the buffer's pixel data to the glyph cache texture.\n","sig":null,"attributes":[{"value":"/ Encode the command for copying the buffer's pixel data to the glyph cache texture.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":19089,"byte_end":19175,"line_start":476,"line_end":476,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":19572,"byte_end":19578,"line_start":485,"line_end":485,"column_start":12,"column_end":18},"name":"extent","qualname":"<GlyphCacheCommand>::extent","value":"fn (&self) -> wgpu::Extent3d","parent":null,"children":[],"decl_id":null,"docs":" The extent required for the copy command.\n","sig":null,"attributes":[{"value":"/ The extent required for the copy command.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":19515,"byte_end":19560,"line_start":484,"line_end":484,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":19812,"byte_end":19834,"line_start":494,"line_end":494,"column_start":12,"column_end":34},"name":"load_buffer_and_encode","qualname":"<GlyphCacheCommand>::load_buffer_and_encode","value":"fn (&self, device: &wgpu::Device, e: &mut wgpu::CommandEncoder) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Short-hand for `create_buffer` and `encode` in succession.\n","sig":null,"attributes":[{"value":"/ Short-hand for `create_buffer` and `encode` in succession.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":19738,"byte_end":19800,"line_start":493,"line_end":493,"column_start":5,"column_end":67}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4287,"byte_end":4292,"line_start":116,"line_end":116,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4382,"byte_end":4387,"line_start":122,"line_end":122,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4539,"byte_end":4547,"line_start":128,"line_end":128,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17509,"byte_end":17526,"line_start":440,"line_end":440,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4287,"byte_end":4292,"line_start":116,"line_end":116,"column_start":32,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":15,"index":687}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4382,"byte_end":4387,"line_start":122,"line_end":122,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":15},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":4539,"byte_end":4547,"line_start":128,"line_end":128,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/conrod_wgpu-0.70.0/src/lib.rs","byte_start":17509,"byte_end":17526,"line_start":440,"line_end":440,"column_start":10,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}}]}