{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","daggy","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=08ae4f44e7afc6ff","-C","extra-filename=-08ae4f44e7afc6ff","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","petgraph=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libpetgraph-502887356f2cb431.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libdaggy-08ae4f44e7afc6ff.rmeta"},"prelude":{"crate_id":{"name":"daggy","disambiguator":[12402683436263649661,6141715347489716029]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":15,"id":{"name":"petgraph","disambiguator":[3315239079231450119,958776490011743235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","num":16,"id":{"name":"fixedbitset","disambiguator":[12136443693809048143,16088621428177435084]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":0,"byte_end":32911,"line_start":1,"line_end":966,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":2673},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1614,"byte_end":1623,"line_start":35,"line_end":35,"column_start":27,"column_end":36},"alias_span":null,"name":"EdgeIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":1198},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1625,"byte_end":1639,"line_start":35,"line_end":35,"column_start":38,"column_end":52},"alias_span":null,"name":"EdgeWeightsMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":2636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1641,"byte_end":1650,"line_start":35,"line_end":35,"column_start":54,"column_end":63},"alias_span":null,"name":"NodeIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":1185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1652,"byte_end":1666,"line_start":35,"line_end":35,"column_start":65,"column_end":79},"alias_span":null,"name":"NodeWeightsMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1694,"byte_end":1700,"line_start":36,"line_end":36,"column_start":26,"column_end":32},"alias_span":null,"name":"Walker","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":0,"byte_end":32911,"line_start":1,"line_end":966,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":154},{"krate":0,"index":158},{"krate":0,"index":162},{"krate":0,"index":572},{"krate":0,"index":583},{"krate":0,"index":578},{"krate":0,"index":166},{"krate":0,"index":173},{"krate":0,"index":180},{"krate":0,"index":184},{"krate":0,"index":588},{"krate":0,"index":595},{"krate":0,"index":592},{"krate":0,"index":189},{"krate":0,"index":246},{"krate":0,"index":250},{"krate":0,"index":255},{"krate":0,"index":260},{"krate":0,"index":266},{"krate":0,"index":271},{"krate":0,"index":277},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":296},{"krate":0,"index":302},{"krate":0,"index":309},{"krate":0,"index":316},{"krate":0,"index":324},{"krate":0,"index":331},{"krate":0,"index":338},{"krate":0,"index":345},{"krate":0,"index":353},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":370},{"krate":0,"index":375},{"krate":0,"index":381},{"krate":0,"index":386},{"krate":0,"index":393},{"krate":0,"index":400},{"krate":0,"index":407},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418}],"decl_id":null,"docs":" **daggy** is a directed acyclic graph data structure library.","sig":null,"attributes":[{"value":"! **daggy** is a directed acyclic graph data structure library.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":0,"byte_end":65,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":66,"byte_end":69,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The most prominent type is [**Dag**](./struct.Dag.html) - a wrapper around [petgraph]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":70,"byte_end":159,"line_start":3,"line_end":3,"column_start":1,"column_end":90}},{"value":"! (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/index.html)'s [**Graph**]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":160,"byte_end":256,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"! (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/graph/struct.Graph.html)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":257,"byte_end":352,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"! data structure, exposing a refined API targeted towards directed acyclic graph related","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":353,"byte_end":443,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"! functionality.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":444,"byte_end":462,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":463,"byte_end":466,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! The [**Walker** trait](./walker/trait.Walker.html) defines a variety of useful methods for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":467,"byte_end":561,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"! traversing any graph type. Its methods behave similarly to iterator types, however **Walker**s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":562,"byte_end":660,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"! do not require borrowing the graph. This means that we can still safely mutably borrow from the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":661,"byte_end":760,"line_start":11,"line_end":11,"column_start":1,"column_end":100}},{"value":"! graph whilst we traverse it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":761,"byte_end":793,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":795,"byte_end":818,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"warn(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":819,"byte_end":841,"line_start":15,"line_end":15,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":39},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"walker","qualname":"::walker","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":421},{"krate":0,"index":431},{"krate":0,"index":427},{"krate":0,"index":45},{"krate":0,"index":51},{"krate":0,"index":435},{"krate":0,"index":447},{"krate":0,"index":442},{"krate":0,"index":57},{"krate":0,"index":62},{"krate":0,"index":452},{"krate":0,"index":464},{"krate":0,"index":459},{"krate":0,"index":70},{"krate":0,"index":75},{"krate":0,"index":469},{"krate":0,"index":479},{"krate":0,"index":475},{"krate":0,"index":81},{"krate":0,"index":86},{"krate":0,"index":483},{"krate":0,"index":495},{"krate":0,"index":490},{"krate":0,"index":92},{"krate":0,"index":97},{"krate":0,"index":500},{"krate":0,"index":512},{"krate":0,"index":507},{"krate":0,"index":103},{"krate":0,"index":108},{"krate":0,"index":517},{"krate":0,"index":527},{"krate":0,"index":523},{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":531},{"krate":0,"index":541},{"krate":0,"index":537},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":545},{"krate":0,"index":555},{"krate":0,"index":551},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":559},{"krate":0,"index":568},{"krate":0,"index":564},{"krate":0,"index":143},{"krate":0,"index":147}],"decl_id":null,"docs":" **Walker** is a trait providing a variety of useful methods for traversing graph types.\n","sig":null,"attributes":[{"value":"! **Walker** is a trait providing a variety of useful methods for traversing graph types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":32913,"byte_end":33004,"line_start":1,"line_end":1,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":421},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33199,"byte_end":33208,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"name":"Recursive","qualname":"::walker::Recursive","value":"Recursive {  }","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426}],"decl_id":null,"docs":" Recursively walks a graph using the recursive function `recursive_fn`.\n","sig":null,"attributes":[{"value":"/ Recursively walks a graph using the recursive function `recursive_fn`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33089,"byte_end":33163,"line_start":6,"line_end":6,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33533,"byte_end":33536,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<Recursive<G, F>>::new","value":"fn (start: G::NodeId, recursive_fn: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new **Recursive** **Walker** starting from the node at the given index.\n","sig":null,"attributes":[{"value":"/ Construct a new **Recursive** **Walker** starting from the node at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33434,"byte_end":33521,"line_start":22,"line_end":22,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33767,"byte_end":33771,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"next","qualname":"<Recursive<G, F>>::next","value":"fn (&mut self, g: &G) -> Option<(G::EdgeId, G::NodeId)>","parent":null,"children":[],"decl_id":null,"docs":" Yield the next recursion step.\n","sig":null,"attributes":[{"value":"/ Yield the next recursion step.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33721,"byte_end":33755,"line_start":31,"line_end":31,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34434,"byte_end":34439,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"Chain","qualname":"::walker::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":" Walks the entirety of `a` before walking the entirety of `b`.\n","sig":null,"attributes":[{"value":"/ Walks the entirety of `a` before walking the entirety of `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34333,"byte_end":34398,"line_start":57,"line_end":57,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34582,"byte_end":34585,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<Chain<G, A, B>>::new","value":"fn (a: A, b: B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Chain`.\n","sig":null,"attributes":[{"value":"/ Create a new `Chain`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34545,"byte_end":34570,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35506,"byte_end":35512,"line_start":104,"line_end":104,"column_start":12,"column_end":18},"name":"Filter","qualname":"::walker::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"decl_id":null,"docs":" A walker that applies some given predicate to each element returned by its walker.","sig":null,"attributes":[{"value":"/ A walker that applies some given predicate to each element returned by its walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35282,"byte_end":35368,"line_start":100,"line_end":100,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35369,"byte_end":35372,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ The only index pairs that will be yielded are those that make the predicate evaluate to true.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35373,"byte_end":35470,"line_start":102,"line_end":102,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35662,"byte_end":35665,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<G, W, P>>::new","value":"fn (walker: W, predicate: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Filter`.\n","sig":null,"attributes":[{"value":"/ Create a new `Filter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35624,"byte_end":35650,"line_start":111,"line_end":111,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36445,"byte_end":36453,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"Peekable","qualname":"::walker::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"decl_id":null,"docs":" A walker that has a `.peek(&graph)` method that returns an optional next neighbor.\n","sig":null,"attributes":[{"value":"/ A walker that has a `.peek(&graph)` method that returns an optional next neighbor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36323,"byte_end":36409,"line_start":144,"line_end":144,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36685,"byte_end":36688,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<Peekable<G, W>>::new","value":"fn (walker: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Peekable` walker.\n","sig":null,"attributes":[{"value":"/ Create a new `Peekable` walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36638,"byte_end":36673,"line_start":160,"line_end":160,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36952,"byte_end":36956,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<G, W>>::peek","value":"fn (&mut self, graph: G) -> Option<&W::Item>","parent":null,"children":[],"decl_id":null,"docs":" The edge node index pair of the neighbor at the next step in our walk of the given graph.\n","sig":null,"attributes":[{"value":"/ The edge node index pair of the neighbor at the next step in our walk of the given graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36833,"byte_end":36926,"line_start":169,"line_end":169,"column_start":5,"column_end":98}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36931,"byte_end":36940,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":483},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37646,"byte_end":37655,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::walker::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489}],"decl_id":null,"docs":" A walker that invokes the predicate on elements until it returns false.","sig":null,"attributes":[{"value":"/ A walker that invokes the predicate on elements until it returns false.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37442,"byte_end":37517,"line_start":193,"line_end":193,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37518,"byte_end":37521,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ Once the predicate returns false, that element and all further elements are yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37522,"byte_end":37610,"line_start":195,"line_end":195,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37832,"byte_end":37835,"line_start":205,"line_end":205,"column_start":12,"column_end":15},"name":"new","qualname":"<SkipWhile<G, W, P>>::new","value":"fn (walker: W, predicate: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `SkipWhile` walker.\n","sig":null,"attributes":[{"value":"/ Create a new `SkipWhile` walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37784,"byte_end":37820,"line_start":204,"line_end":204,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":38926,"byte_end":38935,"line_start":246,"line_end":246,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::walker::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506}],"decl_id":null,"docs":" A walker that yields elements so long as the predicate returns true.","sig":null,"attributes":[{"value":"/ A walker that yields elements so long as the predicate returns true.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":38719,"byte_end":38791,"line_start":242,"line_end":242,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":38792,"byte_end":38795,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ After the predicate returns false for the first time, no further elements will be yielded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":38796,"byte_end":38890,"line_start":244,"line_end":244,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":39112,"byte_end":39115,"line_start":254,"line_end":254,"column_start":12,"column_end":15},"name":"new","qualname":"<TakeWhile<G, W, P>>::new","value":"fn (walker: W, predicate: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TakeWhile` walker.\n","sig":null,"attributes":[{"value":"/ Create a new `TakeWhile` walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":39064,"byte_end":39100,"line_start":253,"line_end":253,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":517},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40214,"byte_end":40218,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"name":"Skip","qualname":"::walker::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522}],"decl_id":null,"docs":" A walker that skips the first n steps of this walk, and then yields all further steps.\n","sig":null,"attributes":[{"value":"/ A walker that skips the first n steps of this walk, and then yields all further steps.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40088,"byte_end":40178,"line_start":296,"line_end":296,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40365,"byte_end":40368,"line_start":306,"line_end":306,"column_start":12,"column_end":15},"name":"new","qualname":"<Skip<G, W>>::new","value":"fn (walker: W, to_skip: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Skip` walker..\n","sig":null,"attributes":[{"value":"/ Create a new `Skip` walker..","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40321,"byte_end":40353,"line_start":305,"line_end":305,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":531},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41001,"byte_end":41005,"line_start":335,"line_end":335,"column_start":12,"column_end":16},"name":"Take","qualname":"::walker::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"decl_id":null,"docs":" A walker that yields the first n steps of this walk.\n","sig":null,"attributes":[{"value":"/ A walker that yields the first n steps of this walk.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40909,"byte_end":40965,"line_start":333,"line_end":333,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41151,"byte_end":41154,"line_start":343,"line_end":343,"column_start":12,"column_end":15},"name":"new","qualname":"<Take<G, W>>::new","value":"fn (walker: W, to_take: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Take` walker.\n","sig":null,"attributes":[{"value":"/ Create a new `Take` walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41108,"byte_end":41139,"line_start":342,"line_end":342,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":545},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41727,"byte_end":41732,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::walker::Cycle","value":"Cycle {  }","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"decl_id":null,"docs":" A walker that repeats its internal walker endlessly.\n","sig":null,"attributes":[{"value":"/ A walker that repeats its internal walker endlessly.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41635,"byte_end":41691,"line_start":369,"line_end":369,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41894,"byte_end":41897,"line_start":382,"line_end":382,"column_start":12,"column_end":15},"name":"new","qualname":"<Cycle<G, W>>::new","value":"fn (walker: W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Cycle` walker.\n","sig":null,"attributes":[{"value":"/ Create a new `Cycle` walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41850,"byte_end":41882,"line_start":381,"line_end":381,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":559},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42596,"byte_end":42603,"line_start":411,"line_end":411,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::walker::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563}],"decl_id":null,"docs":" A walker that calls a function with a reference to each index pair before yielding them.","sig":null,"attributes":[{"value":"/ A walker that calls a function with a reference to each index pair before yielding them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42406,"byte_end":42498,"line_start":407,"line_end":407,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42499,"byte_end":42502,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ This is often useful for debugging a walker pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42503,"byte_end":42560,"line_start":409,"line_end":409,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42717,"byte_end":42720,"line_start":418,"line_end":418,"column_start":12,"column_end":15},"name":"new","qualname":"<Inspect<W, F>>::new","value":"fn (walker: W, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Inspect` walker.\n","sig":null,"attributes":[{"value":"/ Create a new `Inspect` walker.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42671,"byte_end":42705,"line_start":417,"line_end":417,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1788,"byte_end":1796,"line_start":41,"line_end":41,"column_start":10,"column_end":18},"name":"RawNodes","qualname":"::RawNodes","value":"&'a [pg::graph::Node<N, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Read only access into a **Dag**'s internal node array.\n","sig":null,"attributes":[{"value":"/ Read only access into a **Dag**'s internal node array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1720,"byte_end":1778,"line_start":40,"line_end":40,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":158},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1908,"byte_end":1916,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"RawEdges","qualname":"::RawEdges","value":"&'a [pg::graph::Edge<E, Ix>]","parent":null,"children":[],"decl_id":null,"docs":" Read only access into a **Dag**'s internal edge array.\n","sig":null,"attributes":[{"value":"/ Read only access into a **Dag**'s internal edge array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1840,"byte_end":1898,"line_start":42,"line_end":42,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2023,"byte_end":2028,"line_start":45,"line_end":45,"column_start":10,"column_end":15},"name":"Edges","qualname":"::Edges","value":"pg::graph::Edges<'a, E, pg::Directed, Ix>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding all edges to/from some node.\n","sig":null,"attributes":[{"value":"/ An iterator yielding all edges to/from some node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1960,"byte_end":2013,"line_start":44,"line_end":44,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":572},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3404,"byte_end":3407,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"Dag","qualname":"::Dag","value":"Dag {  }","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577}],"decl_id":null,"docs":" A Directed acyclic graph (DAG) data structure.","sig":null,"attributes":[{"value":"/ A Directed acyclic graph (DAG) data structure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2086,"byte_end":2136,"line_start":47,"line_end":47,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2137,"byte_end":2140,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Dag is a thin wrapper around petgraph's `Graph` data structure, providing a refined API for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2141,"byte_end":2236,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ dealing specifically with DAGs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2237,"byte_end":2272,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2273,"byte_end":2276,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Note: The following documentation is adapted from petgraph's [**Graph** documentation]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2277,"byte_end":2367,"line_start":52,"line_end":52,"column_start":1,"column_end":91}},{"value":"/ (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/graph/struct.Graph.html).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2368,"byte_end":2464,"line_start":53,"line_end":53,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2465,"byte_end":2468,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ **Dag** is parameterized over the node weight **N**, edge weight **E** and index type **Ix**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2469,"byte_end":2566,"line_start":55,"line_end":55,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2567,"byte_end":2570,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ **NodeIndex** is a type that acts as a reference to nodes, but these are only stable across","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2571,"byte_end":2666,"line_start":57,"line_end":57,"column_start":1,"column_end":96}},{"value":"/ certain operations. **Removing nodes may shift other indices.** Adding kids to the **Dag**","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2667,"byte_end":2761,"line_start":58,"line_end":58,"column_start":1,"column_end":95}},{"value":"/ keeps all indices stable, but removing a node will force the last node to shift its index to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2762,"byte_end":2858,"line_start":59,"line_end":59,"column_start":1,"column_end":97}},{"value":"/ take its place.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2859,"byte_end":2878,"line_start":60,"line_end":60,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2879,"byte_end":2882,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ The fact that the node indices in the **Dag** are numbered in a compact interval from 0 to *n*-1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2883,"byte_end":2983,"line_start":62,"line_end":62,"column_start":1,"column_end":101}},{"value":"/ simplifies some graph algorithms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":2984,"byte_end":3021,"line_start":63,"line_end":63,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3022,"byte_end":3025,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ The **Ix** parameter is u32 by default. The goal is that you can ignore this parameter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3026,"byte_end":3116,"line_start":65,"line_end":65,"column_start":1,"column_end":91}},{"value":"/ completely unless you need a very large **Dag** -- then you can use usize.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3117,"byte_end":3195,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3196,"byte_end":3199,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The **Dag** also offers methods for accessing the underlying **Graph**, which can be useful","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3200,"byte_end":3295,"line_start":68,"line_end":68,"column_start":1,"column_end":96}},{"value":"/ for taking advantage of petgraph's various graph-related algorithms.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3296,"byte_end":3368,"line_start":69,"line_end":69,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3657,"byte_end":3665,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"Children","qualname":"::Children","value":"Children {  }","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"decl_id":null,"docs":" A **Walker** type that can be used to step through the children of some parent node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that can be used to step through the children of some parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3557,"byte_end":3645,"line_start":76,"line_end":76,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":173},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3890,"byte_end":3897,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"Parents","qualname":"::Parents","value":"Parents {  }","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"decl_id":null,"docs":" A **Walker** type that can be used to step through the parents of some child node.\n","sig":null,"attributes":[{"value":"/ A **Walker** type that can be used to step through the parents of some child node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":3792,"byte_end":3878,"line_start":83,"line_end":83,"column_start":1,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":180},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4126,"byte_end":4137,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"EdgeIndices","qualname":"::EdgeIndices","value":"EdgeIndices {  }","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"decl_id":null,"docs":" An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.\n","sig":null,"attributes":[{"value":"/ An iterator yielding multiple `EdgeIndex`s, returned by the `Graph::add_edges` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4024,"byte_end":4114,"line_start":90,"line_end":90,"column_start":1,"column_end":91}}]},{"kind":"Type","id":{"krate":0,"index":184},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4315,"byte_end":4328,"line_start":97,"line_end":97,"column_start":10,"column_end":23},"name":"RecursiveWalk","qualname":"::RecursiveWalk","value":"walker::Recursive<Dag<N, E, Ix>, F>","parent":null,"children":[],"decl_id":null,"docs":" An alias to simplify the **Recursive** **Walker** type returned by **Dag**.\n","sig":null,"attributes":[{"value":"/ An alias to simplify the **Recursive** **Walker** type returned by **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4226,"byte_end":4305,"line_start":96,"line_end":96,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":588},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4542,"byte_end":4552,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"WouldCycle","qualname":"::WouldCycle","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error returned by the `Dag::add_edge` method in the case that adding an edge would have\n caused the graph to cycle.\n","sig":null,"attributes":[{"value":"/ An error returned by the `Dag::add_edge` method in the case that adding an edge would have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4382,"byte_end":4476,"line_start":99,"line_end":99,"column_start":1,"column_end":95}},{"value":"/ caused the graph to cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4477,"byte_end":4507,"line_start":100,"line_end":100,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4667,"byte_end":4670,"line_start":109,"line_end":109,"column_start":12,"column_end":15},"name":"new","qualname":"<Dag<N, E, Ix>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty `Dag`.\n","sig":null,"attributes":[{"value":"/ Create a new, empty `Dag`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4625,"byte_end":4655,"line_start":108,"line_end":108,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4814,"byte_end":4827,"line_start":114,"line_end":114,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Dag<N, E, Ix>>::with_capacity","value":"fn (nodes: usize, edges: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Dag` with estimated capacity for its node and edge Vecs.\n","sig":null,"attributes":[{"value":"/ Create a new `Dag` with estimated capacity for its node and edge Vecs.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4728,"byte_end":4802,"line_start":113,"line_end":113,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5397,"byte_end":5407,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"from_edges","qualname":"<Dag<N, E, Ix>>::from_edges","value":"fn <I> (edges: I) -> Result<Self, WouldCycle<E>>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dag` from an iterator yielding edges.","sig":null,"attributes":[{"value":"/ Create a `Dag` from an iterator yielding edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5004,"byte_end":5055,"line_start":121,"line_end":121,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5060,"byte_end":5063,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5068,"byte_end":5115,"line_start":123,"line_end":123,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5120,"byte_end":5123,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ `Edge` weights `E` may either be specified in the list, or they are filled with default","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5128,"byte_end":5219,"line_start":125,"line_end":125,"column_start":5,"column_end":96}},{"value":"/ values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5224,"byte_end":5235,"line_start":126,"line_end":126,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5240,"byte_end":5243,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5248,"byte_end":5304,"line_start":128,"line_end":128,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5309,"byte_end":5312,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Returns an `Err` if adding any of the edges would cause a cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5317,"byte_end":5385,"line_start":130,"line_end":130,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":6100,"byte_end":6117,"line_start":153,"line_end":153,"column_start":12,"column_end":29},"name":"extend_with_edges","qualname":"<Dag<N, E, Ix>>::extend_with_edges","value":"fn <I> (&mut self, edges: I) -> Result<(), WouldCycle<E>>","parent":null,"children":[],"decl_id":null,"docs":" Extend the `Dag` with the given edges.","sig":null,"attributes":[{"value":"/ Extend the `Dag` with the given edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5727,"byte_end":5769,"line_start":143,"line_end":143,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5774,"byte_end":5777,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Node weights `N` are set to default values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5782,"byte_end":5829,"line_start":145,"line_end":145,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5834,"byte_end":5837,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Edge weights `E` may either be specified in the list, or they are filled with default","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5842,"byte_end":5931,"line_start":147,"line_end":147,"column_start":5,"column_end":94}},{"value":"/ values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5936,"byte_end":5947,"line_start":148,"line_end":148,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5952,"byte_end":5955,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Nodes are inserted automatically to match the edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":5960,"byte_end":6016,"line_start":150,"line_end":150,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":6021,"byte_end":6024,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Returns an `Err` if adding an edge would cause a cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":6029,"byte_end":6088,"line_start":152,"line_end":152,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":6905,"byte_end":6918,"line_start":175,"line_end":175,"column_start":12,"column_end":25},"name":"from_elements","qualname":"<Dag<N, E, Ix>>::from_elements","value":"fn <I> (elements: I) -> Result<Self, WouldCycle<E>>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dag` from an iterator yielding elements.","sig":null,"attributes":[{"value":"/ Create a `Dag` from an iterator yielding elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":6757,"byte_end":6811,"line_start":172,"line_end":172,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":6816,"byte_end":6819,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Returns an `Err` if an edge would cause a cycle within the graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":6824,"byte_end":6893,"line_start":174,"line_end":174,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":7826,"byte_end":7829,"line_start":203,"line_end":203,"column_start":12,"column_end":15},"name":"map","qualname":"<Dag<N, E, Ix>>::map","value":"fn <'a, F, G, N2, E2> (&'a self, node_map: F, edge_map: G) -> Dag<N2, E2, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Graph` by mapping node and edge weights to new values.","sig":null,"attributes":[{"value":"/ Create a new `Graph` by mapping node and edge weights to new values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":7645,"byte_end":7717,"line_start":200,"line_end":200,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":7722,"byte_end":7725,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the same structure and the same graph indices as `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":7730,"byte_end":7814,"line_start":202,"line_end":202,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9001,"byte_end":9011,"line_start":229,"line_end":229,"column_start":12,"column_end":22},"name":"filter_map","qualname":"<Dag<N, E, Ix>>::filter_map","value":"fn <'a, F, G, N2, E2> (&'a self, node_map: F, edge_map: G) -> Dag<N2, E2, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Dag` by mapping node and edge weights. A node or edge may be mapped to `None`\n to exclude it from the resulting `Dag`.","sig":null,"attributes":[{"value":"/ Create a new `Dag` by mapping node and edge weights. A node or edge may be mapped to `None`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8218,"byte_end":8313,"line_start":216,"line_end":216,"column_start":5,"column_end":100}},{"value":"/ to exclude it from the resulting `Dag`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8318,"byte_end":8361,"line_start":217,"line_end":217,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8366,"byte_end":8369,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Nodes are mapped first with the `node_map` closure, then `edge_map` is called for the edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8374,"byte_end":8469,"line_start":219,"line_end":219,"column_start":5,"column_end":100}},{"value":"/ that have not had any endpoint removed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8474,"byte_end":8517,"line_start":220,"line_end":220,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8522,"byte_end":8525,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the structure of a subgraph of the original graph. If no noodes are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8530,"byte_end":8625,"line_start":222,"line_end":222,"column_start":5,"column_end":100}},{"value":"/ removed, the resulting graph has compatible node indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8630,"byte_end":8691,"line_start":223,"line_end":223,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8696,"byte_end":8699,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ If neither nodes nor edges are removed, the resulting graph has compatible node indices. If","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8704,"byte_end":8799,"line_start":225,"line_end":225,"column_start":5,"column_end":100}},{"value":"/ neither nodes nor edges are removed the result has the same graph indices as `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8804,"byte_end":8892,"line_start":226,"line_end":226,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8897,"byte_end":8900,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ The resulting graph has the same structure and the same graph indices as `self`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":8905,"byte_end":8989,"line_start":228,"line_end":228,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9481,"byte_end":9486,"line_start":243,"line_end":243,"column_start":12,"column_end":17},"name":"clear","qualname":"<Dag<N, E, Ix>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all nodes and edges from the **Dag**.\n","sig":null,"attributes":[{"value":"/ Removes all nodes and edges from the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9420,"byte_end":9469,"line_start":242,"line_end":242,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9596,"byte_end":9606,"line_start":248,"line_end":248,"column_start":12,"column_end":22},"name":"node_count","qualname":"<Dag<N, E, Ix>>::node_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of nodes in the **Dag**.\n","sig":null,"attributes":[{"value":"/ The total number of nodes in the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9539,"byte_end":9584,"line_start":247,"line_end":247,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9726,"byte_end":9736,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"edge_count","qualname":"<Dag<N, E, Ix>>::edge_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total number of edgees in the **Dag**.\n","sig":null,"attributes":[{"value":"/ The total number of edgees in the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9668,"byte_end":9714,"line_start":252,"line_end":252,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10002,"byte_end":10007,"line_start":261,"line_end":261,"column_start":12,"column_end":17},"name":"graph","qualname":"<Dag<N, E, Ix>>::graph","value":"fn (&self) -> &DiGraph<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the `Dag`'s underlying `DiGraph<N, Ix>`.","sig":null,"attributes":[{"value":"/ Borrow the `Dag`'s underlying `DiGraph<N, Ix>`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9798,"byte_end":9849,"line_start":257,"line_end":257,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9854,"byte_end":9857,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ All existing indices may be used to index into this `DiGraph` the same way they may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9862,"byte_end":9952,"line_start":259,"line_end":259,"column_start":5,"column_end":95}},{"value":"/ used to index into the `Dag`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":9957,"byte_end":9990,"line_start":260,"line_end":260,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10289,"byte_end":10299,"line_start":269,"line_end":269,"column_start":12,"column_end":22},"name":"into_graph","qualname":"<Dag<N, E, Ix>>::into_graph","value":"fn (self) -> DiGraph<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the `Dag` and return the internal `DiGraph`.","sig":null,"attributes":[{"value":"/ Take ownership of the `Dag` and return the internal `DiGraph`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10070,"byte_end":10136,"line_start":265,"line_end":265,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10141,"byte_end":10144,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ All existing indices may be used to index into this `DiGraph` the same way they may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10149,"byte_end":10239,"line_start":267,"line_end":267,"column_start":5,"column_end":95}},{"value":"/ used to index into the `Dag`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10244,"byte_end":10277,"line_start":268,"line_end":268,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10948,"byte_end":10956,"line_start":285,"line_end":285,"column_start":12,"column_end":20},"name":"add_node","qualname":"<Dag<N, E, Ix>>::add_node","value":"fn (&mut self, weight: N) -> NodeIndex<Ix>","parent":null,"children":[],"decl_id":null,"docs":" Add a new node to the `Dag` with the given weight.","sig":null,"attributes":[{"value":"/ Add a new node to the `Dag` with the given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10392,"byte_end":10446,"line_start":274,"line_end":274,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10451,"byte_end":10454,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10459,"byte_end":10489,"line_start":276,"line_end":276,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10494,"byte_end":10497,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the new node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10502,"byte_end":10540,"line_start":278,"line_end":278,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10545,"byte_end":10548,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a new node and immediately adding a single edge to that node from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10553,"byte_end":10649,"line_start":280,"line_end":280,"column_start":5,"column_end":101}},{"value":"/ some other node, consider using the [add_child](./struct.Dag.html#method.add_child) or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10654,"byte_end":10744,"line_start":281,"line_end":281,"column_start":5,"column_end":95}},{"value":"/ [add_parent](./struct.Dag.html#method.add_parent) methods instead for better performance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10749,"byte_end":10842,"line_start":282,"line_end":282,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10847,"byte_end":10850,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":10855,"byte_end":10936,"line_start":284,"line_end":284,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12492,"byte_end":12500,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"add_edge","qualname":"<Dag<N, E, Ix>>::add_edge","value":"fn (&mut self, a: NodeIndex<Ix>, b: NodeIndex<Ix>, weight: E) -> Result<EdgeIndex<Ix>, WouldCycle<E>>","parent":null,"children":[],"decl_id":null,"docs":" Add a new directed edge to the `Dag` with the given weight.","sig":null,"attributes":[{"value":"/ Add a new directed edge to the `Dag` with the given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11045,"byte_end":11108,"line_start":289,"line_end":289,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11113,"byte_end":11116,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The added edge will be in the direction `a` -> `b`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11121,"byte_end":11175,"line_start":291,"line_end":291,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11180,"byte_end":11183,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Checks if the edge would create a cycle in the Graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11188,"byte_end":11245,"line_start":293,"line_end":293,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11250,"byte_end":11253,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ If adding the edge **would not** cause the graph to cycle, the edge will be added and its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11258,"byte_end":11351,"line_start":295,"line_end":295,"column_start":5,"column_end":98}},{"value":"/ `EdgeIndex` returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11356,"byte_end":11381,"line_start":296,"line_end":296,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11386,"byte_end":11389,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ If adding the edge **would** cause the graph to cycle, the edge will not be added and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11394,"byte_end":11483,"line_start":298,"line_end":298,"column_start":5,"column_end":94}},{"value":"/ instead a `WouldCycle<E>` error with the given weight will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11488,"byte_end":11563,"line_start":299,"line_end":299,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11568,"byte_end":11571,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ In the worst case, petgraph's [`is_cyclic_directed`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11576,"byte_end":11632,"line_start":301,"line_end":301,"column_start":5,"column_end":61}},{"value":"/ (http://bluss.github.io/petulant-avenger-graphlibrary/doc/petgraph/algo/fn.is_cyclic_directed.html)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11637,"byte_end":11740,"line_start":302,"line_end":302,"column_start":5,"column_end":108}},{"value":"/ function is used to check whether or not adding the edge would create a cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11745,"byte_end":11827,"line_start":303,"line_end":303,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11832,"byte_end":11835,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ **Note:** Dag allows adding parallel (\"duplicate\") edges. If you want to avoid this, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11840,"byte_end":11932,"line_start":305,"line_end":305,"column_start":5,"column_end":97}},{"value":"/ [`update_edge`](./struct.Dag.html#method.update_edge) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":11937,"byte_end":12003,"line_start":306,"line_end":306,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12008,"byte_end":12011,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a new node and immediately adding a single edge to that node from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12016,"byte_end":12112,"line_start":308,"line_end":308,"column_start":5,"column_end":101}},{"value":"/ some other node, consider using the [add_child](./struct.Dag.html#method.add_child) or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12117,"byte_end":12207,"line_start":309,"line_end":309,"column_start":5,"column_end":95}},{"value":"/ [add_parent](./struct.Dag.html#method.add_parent) methods instead for better performance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12212,"byte_end":12305,"line_start":310,"line_end":310,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12310,"byte_end":12313,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ **Panics** if either `a` or `b` do not exist within the **Dag**.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12318,"byte_end":12386,"line_start":312,"line_end":312,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12391,"byte_end":12394,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12399,"byte_end":12480,"line_start":314,"line_end":314,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14763,"byte_end":14772,"line_start":361,"line_end":361,"column_start":12,"column_end":21},"name":"add_edges","qualname":"<Dag<N, E, Ix>>::add_edges","value":"fn <I> (&mut self, edges: I) -> Result<EdgeIndices<Ix>, WouldCycle<Vec<E>>>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given directed edges to the `Dag`, each with their own given weight.","sig":null,"attributes":[{"value":"/ Adds the given directed edges to the `Dag`, each with their own given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":12957,"byte_end":13038,"line_start":330,"line_end":330,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13043,"byte_end":13046,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ The given iterator should yield a `NodeIndex` pair along with a weight for each Edge to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13051,"byte_end":13145,"line_start":332,"line_end":332,"column_start":5,"column_end":99}},{"value":"/ added in a tuple.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13150,"byte_end":13171,"line_start":333,"line_end":333,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13176,"byte_end":13179,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ If we were to describe the tuple as *(a, b, weight)*, the connection would be directed as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13184,"byte_end":13277,"line_start":335,"line_end":335,"column_start":5,"column_end":98}},{"value":"/ follows:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13282,"byte_end":13294,"line_start":336,"line_end":336,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13299,"byte_end":13302,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ *a -> b*","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13307,"byte_end":13319,"line_start":338,"line_end":338,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13324,"byte_end":13327,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ This method behaves similarly to the [`add_edge`](./struct.Dag.html#method.add_edge)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13332,"byte_end":13420,"line_start":340,"line_end":340,"column_start":5,"column_end":93}},{"value":"/ method, however rather than checking whether or not a cycle has been created after adding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13425,"byte_end":13518,"line_start":341,"line_end":341,"column_start":5,"column_end":98}},{"value":"/ each edge, it only checks after all edges have been added. This makes it a slightly more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13523,"byte_end":13615,"line_start":342,"line_end":342,"column_start":5,"column_end":97}},{"value":"/ performant and ergonomic option that repeatedly calling `add_edge`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13620,"byte_end":13691,"line_start":343,"line_end":343,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13696,"byte_end":13699,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ If adding the edges **would not** cause the graph to cycle, the edges will be added and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13704,"byte_end":13795,"line_start":345,"line_end":345,"column_start":5,"column_end":96}},{"value":"/ their indices returned in an `EdgeIndices` iterator, yielding indices for each edge in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13800,"byte_end":13894,"line_start":346,"line_end":346,"column_start":5,"column_end":99}},{"value":"/ same order that they were given.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13899,"byte_end":13935,"line_start":347,"line_end":347,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13940,"byte_end":13943,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ If adding the edges **would** cause the graph to cycle, the edges will not be added and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":13948,"byte_end":14039,"line_start":349,"line_end":349,"column_start":5,"column_end":96}},{"value":"/ instead a `WouldCycle<Vec<E>>` error with the unused weights will be returned. The order of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14044,"byte_end":14139,"line_start":350,"line_end":350,"column_start":5,"column_end":100}},{"value":"/ the returned `Vec` will be the reverse of the given order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14144,"byte_end":14206,"line_start":351,"line_end":351,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14211,"byte_end":14214,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ **Note:** Dag allows adding parallel (\"duplicate\") edges. If you want to avoid this, use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14219,"byte_end":14311,"line_start":353,"line_end":353,"column_start":5,"column_end":97}},{"value":"/ [`update_edges`](./struct.Dag.html#method.update_edges) instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14316,"byte_end":14384,"line_start":354,"line_end":354,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14389,"byte_end":14392,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a series of new nodes and edges to a single node, consider using","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14397,"byte_end":14492,"line_start":356,"line_end":356,"column_start":5,"column_end":100}},{"value":"/  the [add_child](./struct.Dag.html#method.add_child) or [add_parent]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14497,"byte_end":14569,"line_start":357,"line_end":357,"column_start":5,"column_end":77}},{"value":"/  (./struct.Dag.html#method.add_parent) methods instead for greater convenience.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14574,"byte_end":14657,"line_start":358,"line_end":358,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14662,"byte_end":14665,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":14670,"byte_end":14751,"line_start":360,"line_end":360,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17010,"byte_end":17021,"line_start":417,"line_end":417,"column_start":12,"column_end":23},"name":"update_edge","qualname":"<Dag<N, E, Ix>>::update_edge","value":"fn (&mut self, a: NodeIndex<Ix>, b: NodeIndex<Ix>, weight: E) -> Result<EdgeIndex<Ix>, WouldCycle<E>>","parent":null,"children":[],"decl_id":null,"docs":" Update the edge from nodes `a` -> `b` with the given weight.","sig":null,"attributes":[{"value":"/ Update the edge from nodes `a` -> `b` with the given weight.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16036,"byte_end":16100,"line_start":398,"line_end":398,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16105,"byte_end":16108,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ If the edge doesn't already exist, it will be added using the `add_edge` method.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16113,"byte_end":16197,"line_start":400,"line_end":400,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16202,"byte_end":16205,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ Please read the [`add_edge`](./struct.Dag.html#method.add_edge) for more important details.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16210,"byte_end":16305,"line_start":402,"line_end":402,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16310,"byte_end":16313,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Checks if the edge would create a cycle in the Graph.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16318,"byte_end":16375,"line_start":404,"line_end":404,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16380,"byte_end":16383,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(t + e)** time where \"t\" is the complexity of `add_edge` and e is the number","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16388,"byte_end":16483,"line_start":406,"line_end":406,"column_start":5,"column_end":100}},{"value":"/ of edges connected to the nodes a and b.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16488,"byte_end":16532,"line_start":407,"line_end":407,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16537,"byte_end":16540,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Returns the index of the edge, or a `WouldCycle` error if adding the edge would create a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16545,"byte_end":16637,"line_start":409,"line_end":409,"column_start":5,"column_end":97}},{"value":"/ cycle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16642,"byte_end":16652,"line_start":410,"line_end":410,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16657,"byte_end":16660,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ **Note:** If you're adding a new node and immediately adding a single edge to that node from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16665,"byte_end":16761,"line_start":412,"line_end":412,"column_start":5,"column_end":101}},{"value":"/ some parent node, consider using the [`add_child`](./struct.Dag.html#method.add_child)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16766,"byte_end":16856,"line_start":413,"line_end":413,"column_start":5,"column_end":95}},{"value":"/ method instead for greater convenience.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16861,"byte_end":16904,"line_start":414,"line_end":414,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16909,"byte_end":16912,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of nodes for its index type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":16917,"byte_end":16998,"line_start":416,"line_end":416,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17641,"byte_end":17650,"line_start":436,"line_end":436,"column_start":12,"column_end":21},"name":"find_edge","qualname":"<Dag<N, E, Ix>>::find_edge","value":"fn (&self, a: NodeIndex<Ix>, b: NodeIndex<Ix>) -> Option<EdgeIndex<Ix>>","parent":null,"children":[],"decl_id":null,"docs":" Find and return the index to the edge that describes `a` -> `b` if there is one.","sig":null,"attributes":[{"value":"/ Find and return the index to the edge that describes `a` -> `b` if there is one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17421,"byte_end":17505,"line_start":432,"line_end":432,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17510,"byte_end":17513,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the number of edges connected to the nodes `a`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17518,"byte_end":17612,"line_start":434,"line_end":434,"column_start":5,"column_end":99}},{"value":"/ and `b`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17617,"byte_end":17629,"line_start":435,"line_end":435,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17843,"byte_end":17857,"line_start":441,"line_end":441,"column_start":12,"column_end":26},"name":"edge_endpoints","qualname":"<Dag<N, E, Ix>>::edge_endpoints","value":"fn (&self, e: EdgeIndex<Ix>) -> Option<(NodeIndex<Ix>, NodeIndex<Ix>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the parent and child nodes for the given `EdgeIndex`.\n","sig":null,"attributes":[{"value":"/ Access the parent and child nodes for the given `EdgeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17767,"byte_end":17831,"line_start":440,"line_end":440,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18008,"byte_end":18019,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"clear_edges","qualname":"<Dag<N, E, Ix>>::clear_edges","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all edges.\n","sig":null,"attributes":[{"value":"/ Remove all edges.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":17975,"byte_end":17996,"line_start":445,"line_end":445,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18726,"byte_end":18736,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"add_parent","qualname":"<Dag<N, E, Ix>>::add_parent","value":"fn (&mut self, child: NodeIndex<Ix>, edge: E, node: N) -> (EdgeIndex<Ix>, NodeIndex<Ix>)","parent":null,"children":[],"decl_id":null,"docs":" Add a new edge and parent node to the node at the given `NodeIndex`.","sig":null,"attributes":[{"value":"/ Add a new edge and parent node to the node at the given `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18077,"byte_end":18149,"line_start":450,"line_end":450,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18154,"byte_end":18157,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18162,"byte_end":18229,"line_start":452,"line_end":452,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18234,"byte_end":18237,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ node -> edge -> child","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18242,"byte_end":18267,"line_start":454,"line_end":454,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18272,"byte_end":18275,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18280,"byte_end":18310,"line_start":456,"line_end":456,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18315,"byte_end":18318,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This is faster than using `add_node` and `add_edge`. This is because we don't have to check","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18323,"byte_end":18418,"line_start":458,"line_end":458,"column_start":5,"column_end":100}},{"value":"/ if the graph would cycle when adding an edge to the new node, as we know it it will be the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18423,"byte_end":18517,"line_start":459,"line_end":459,"column_start":5,"column_end":99}},{"value":"/ only edge connected to that node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18522,"byte_end":18559,"line_start":460,"line_end":460,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18564,"byte_end":18567,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the given child node doesn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18572,"byte_end":18625,"line_start":462,"line_end":462,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18630,"byte_end":18633,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":18638,"byte_end":18714,"line_start":464,"line_end":464,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19676,"byte_end":19685,"line_start":490,"line_end":490,"column_start":12,"column_end":21},"name":"add_child","qualname":"<Dag<N, E, Ix>>::add_child","value":"fn (&mut self, parent: NodeIndex<Ix>, edge: E, node: N) -> (EdgeIndex<Ix>, NodeIndex<Ix>)","parent":null,"children":[],"decl_id":null,"docs":" Add a new edge and child node to the node at the given `NodeIndex`.\n Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.","sig":null,"attributes":[{"value":"/ Add a new edge and child node to the node at the given `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19035,"byte_end":19106,"line_start":476,"line_end":476,"column_start":5,"column_end":76}},{"value":"/ Returns both the edge's `EdgeIndex` and the node's `NodeIndex`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19111,"byte_end":19178,"line_start":477,"line_end":477,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19183,"byte_end":19186,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ child -> edge -> node","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19191,"byte_end":19216,"line_start":479,"line_end":479,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19221,"byte_end":19224,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19229,"byte_end":19259,"line_start":481,"line_end":481,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19264,"byte_end":19267,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ This is faster than using `add_node` and `add_edge`. This is because we don't have to check","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19272,"byte_end":19367,"line_start":483,"line_end":483,"column_start":5,"column_end":100}},{"value":"/ if the graph would cycle when adding an edge to the new node, as we know it it will be the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19372,"byte_end":19466,"line_start":484,"line_end":484,"column_start":5,"column_end":99}},{"value":"/ only edge connected to that node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19471,"byte_end":19508,"line_start":485,"line_end":485,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19513,"byte_end":19516,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the given parent node doesn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19521,"byte_end":19575,"line_start":487,"line_end":487,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19580,"byte_end":19583,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the Graph is at the maximum number of edges for its index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19588,"byte_end":19664,"line_start":489,"line_end":489,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20048,"byte_end":20059,"line_start":502,"line_end":502,"column_start":12,"column_end":23},"name":"node_weight","qualname":"<Dag<N, E, Ix>>::node_weight","value":"fn (&self, node: NodeIndex<Ix>) -> Option<&N>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the weight from the node at the given index.\n","sig":null,"attributes":[{"value":"/ Borrow the weight from the node at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":19981,"byte_end":20036,"line_start":501,"line_end":501,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20227,"byte_end":20242,"line_start":507,"line_end":507,"column_start":12,"column_end":27},"name":"node_weight_mut","qualname":"<Dag<N, E, Ix>>::node_weight_mut","value":"fn (&mut self, node: NodeIndex<Ix>) -> Option<&mut N>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrow the weight from the node at the given index.\n","sig":null,"attributes":[{"value":"/ Mutably borrow the weight from the node at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20152,"byte_end":20215,"line_start":506,"line_end":506,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20397,"byte_end":20406,"line_start":512,"line_end":512,"column_start":12,"column_end":21},"name":"raw_nodes","qualname":"<Dag<N, E, Ix>>::raw_nodes","value":"fn (&self) -> RawNodes<N, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Read from the internal node array.\n","sig":null,"attributes":[{"value":"/ Read from the internal node array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20347,"byte_end":20385,"line_start":511,"line_end":511,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20645,"byte_end":20661,"line_start":519,"line_end":519,"column_start":12,"column_end":28},"name":"node_weights_mut","qualname":"<Dag<N, E, Ix>>::node_weights_mut","value":"fn (&mut self) -> NodeWeightsMut<N, Ix>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding mutable access to all node weights.","sig":null,"attributes":[{"value":"/ An iterator yielding mutable access to all node weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20477,"byte_end":20537,"line_start":516,"line_end":516,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20542,"byte_end":20545,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their node indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20550,"byte_end":20633,"line_start":518,"line_end":518,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20816,"byte_end":20827,"line_start":524,"line_end":524,"column_start":12,"column_end":23},"name":"edge_weight","qualname":"<Dag<N, E, Ix>>::edge_weight","value":"fn (&self, edge: EdgeIndex<Ix>) -> Option<&E>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the weight from the edge at the given index.\n","sig":null,"attributes":[{"value":"/ Borrow the weight from the edge at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20749,"byte_end":20804,"line_start":523,"line_end":523,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20995,"byte_end":21010,"line_start":529,"line_end":529,"column_start":12,"column_end":27},"name":"edge_weight_mut","qualname":"<Dag<N, E, Ix>>::edge_weight_mut","value":"fn (&mut self, edge: EdgeIndex<Ix>) -> Option<&mut E>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrow the weight from the edge at the given index.\n","sig":null,"attributes":[{"value":"/ Mutably borrow the weight from the edge at the given index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":20920,"byte_end":20983,"line_start":528,"line_end":528,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21165,"byte_end":21174,"line_start":534,"line_end":534,"column_start":12,"column_end":21},"name":"raw_edges","qualname":"<Dag<N, E, Ix>>::raw_edges","value":"fn (&self) -> RawEdges<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" Read from the internal edge array.\n","sig":null,"attributes":[{"value":"/ Read from the internal edge array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21115,"byte_end":21153,"line_start":533,"line_end":533,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21413,"byte_end":21429,"line_start":541,"line_end":541,"column_start":12,"column_end":28},"name":"edge_weights_mut","qualname":"<Dag<N, E, Ix>>::edge_weights_mut","value":"fn (&mut self) -> EdgeWeightsMut<E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding mutable access to all edge weights.","sig":null,"attributes":[{"value":"/ An iterator yielding mutable access to all edge weights.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21245,"byte_end":21305,"line_start":538,"line_end":538,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21310,"byte_end":21313,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ The order in which weights are yielded matches the order of their edge indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21318,"byte_end":21401,"line_start":540,"line_end":540,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21745,"byte_end":21760,"line_start":550,"line_end":550,"column_start":12,"column_end":27},"name":"index_twice_mut","qualname":"<Dag<N, E, Ix>>::index_twice_mut","value":"fn <A, B> (&mut self, a: A, b: B) -> (&mut <DiGraph<N, E, Ix> as Index<A>>::Output,\n &mut <DiGraph<N, E, Ix> as Index<B>>::Output)","parent":null,"children":[],"decl_id":null,"docs":" Index the `Dag` by two indices.","sig":null,"attributes":[{"value":"/ Index the `Dag` by two indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21517,"byte_end":21552,"line_start":545,"line_end":545,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21557,"byte_end":21560,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ Both indices can be either `NodeIndex`s, `EdgeIndex`s or a combination of the two.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21565,"byte_end":21651,"line_start":547,"line_end":547,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21656,"byte_end":21659,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the indices are equal or if they are out of bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":21664,"byte_end":21733,"line_start":549,"line_end":549,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22305,"byte_end":22316,"line_start":569,"line_end":569,"column_start":12,"column_end":23},"name":"remove_node","qualname":"<Dag<N, E, Ix>>::remove_node","value":"fn (&mut self, node: NodeIndex<Ix>) -> Option<N>","parent":null,"children":[],"decl_id":null,"docs":" Remove the node at the given index from the `Dag` and return it if it exists.","sig":null,"attributes":[{"value":"/ Remove the node at the given index from the `Dag` and return it if it exists.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22108,"byte_end":22189,"line_start":566,"line_end":566,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22194,"byte_end":22197,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ Note: Calling this may shift (and in turn invalidate) previously returned node indices!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22202,"byte_end":22293,"line_start":568,"line_end":568,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22666,"byte_end":22677,"line_start":577,"line_end":577,"column_start":12,"column_end":23},"name":"remove_edge","qualname":"<Dag<N, E, Ix>>::remove_edge","value":"fn (&mut self, e: EdgeIndex<Ix>) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":" Remove an edge and return its weight, or `None` if it didn't exist.","sig":null,"attributes":[{"value":"/ Remove an edge and return its weight, or `None` if it didn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22412,"byte_end":22483,"line_start":573,"line_end":573,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22488,"byte_end":22491,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(e')** time, where **e'** is the size of four particular edge lists, for the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22496,"byte_end":22591,"line_start":575,"line_end":575,"column_start":5,"column_end":100}},{"value":"/ nodes of **e** and the nodes of another affected edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22596,"byte_end":22654,"line_start":576,"line_end":576,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23333,"byte_end":23340,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"parents","qualname":"<Dag<N, E, Ix>>::parents","value":"fn (&self, child: NodeIndex<Ix>) -> Parents<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that may be used to step through the parents of the given child node.","sig":null,"attributes":[{"value":"/ A **Walker** type that may be used to step through the parents of the given child node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22767,"byte_end":22858,"line_start":581,"line_end":581,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22863,"byte_end":22866,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ Unlike iterator types, **Walker**s do not require borrowing the internal **Graph**. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22871,"byte_end":22963,"line_start":583,"line_end":583,"column_start":5,"column_end":97}},{"value":"/ makes them useful for traversing the **Graph** while still being able to mutably borrow it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":22968,"byte_end":23063,"line_start":584,"line_end":584,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23068,"byte_end":23071,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ If you require an iterator, use one of the **Walker** methods for converting this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23076,"byte_end":23161,"line_start":586,"line_end":586,"column_start":5,"column_end":90}},{"value":"/ **Walker** into a similarly behaving **Iterator** type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23166,"byte_end":23225,"line_start":587,"line_end":587,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23230,"byte_end":23233,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ See the [**Walker**](./walker/trait.Walker.html) trait for more useful methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23238,"byte_end":23321,"line_start":589,"line_end":589,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24186,"byte_end":24194,"line_start":608,"line_end":608,"column_start":12,"column_end":20},"name":"children","qualname":"<Dag<N, E, Ix>>::children","value":"fn (&self, parent: NodeIndex<Ix>) -> Children<N, E, Ix>","parent":null,"children":[],"decl_id":null,"docs":" A \"walker\" object that may be used to step through the children of the given parent node.","sig":null,"attributes":[{"value":"/ A \"walker\" object that may be used to step through the children of the given parent node.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23618,"byte_end":23711,"line_start":599,"line_end":599,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23716,"byte_end":23719,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ Unlike iterator types, **Walker**s do not require borrowing the internal **Graph**. This","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23724,"byte_end":23816,"line_start":601,"line_end":601,"column_start":5,"column_end":97}},{"value":"/ makes them useful for traversing the **Graph** while still being able to mutably borrow it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23821,"byte_end":23916,"line_start":602,"line_end":602,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23921,"byte_end":23924,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ If you require an iterator, use one of the **Walker** methods for converting this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":23929,"byte_end":24014,"line_start":604,"line_end":604,"column_start":5,"column_end":90}},{"value":"/ **Walker** into a similarly behaving **Iterator** type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24019,"byte_end":24078,"line_start":605,"line_end":605,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24083,"byte_end":24086,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ See the [**Walker**](./walker/trait.Walker.html) trait for more useful methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24091,"byte_end":24174,"line_start":607,"line_end":607,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24672,"byte_end":24686,"line_start":620,"line_end":620,"column_start":12,"column_end":26},"name":"recursive_walk","qualname":"<Dag<N, E, Ix>>::recursive_walk","value":"fn <F> (&self, start: NodeIndex<Ix>, recursive_fn: F) -> RecursiveWalk<N, E, Ix, F>","parent":null,"children":[],"decl_id":null,"docs":" A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.","sig":null,"attributes":[{"value":"/ A **Walker** type that recursively walks the **Dag** using the given `recursive_fn`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24476,"byte_end":24564,"line_start":617,"line_end":617,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24569,"byte_end":24572,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ See the [**Walker**](./walker/trait.Walker.html) trait for more useful methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":24577,"byte_end":24660,"line_start":619,"line_end":619,"column_start":5,"column_end":88}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33325,"byte_end":33334,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34085,"byte_end":34094,"line_start":45,"line_end":45,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34524,"byte_end":34529,"line_start":65,"line_end":65,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34751,"byte_end":34756,"line_start":76,"line_end":76,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35602,"byte_end":35608,"line_start":110,"line_end":110,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35937,"byte_end":35943,"line_start":126,"line_end":126,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36576,"byte_end":36584,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37176,"byte_end":37184,"line_start":179,"line_end":179,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37759,"byte_end":37768,"line_start":203,"line_end":203,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":38133,"byte_end":38142,"line_start":219,"line_end":219,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":39039,"byte_end":39048,"line_start":252,"line_end":252,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":39410,"byte_end":39419,"line_start":268,"line_end":268,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40304,"byte_end":40308,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40539,"byte_end":40543,"line_start":315,"line_end":315,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41091,"byte_end":41095,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41325,"byte_end":41329,"line_start":352,"line_end":352,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41812,"byte_end":41817,"line_start":377,"line_end":377,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42087,"byte_end":42092,"line_start":392,"line_end":392,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42651,"byte_end":42658,"line_start":416,"line_end":416,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42815,"byte_end":42822,"line_start":423,"line_end":423,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4580,"byte_end":4583,"line_start":104,"line_end":104,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":207},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":25620,"byte_end":25623,"line_start":647,"line_end":647,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":25764,"byte_end":25767,"line_start":656,"line_end":656,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":26734,"byte_end":26737,"line_start":702,"line_end":702,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":26873,"byte_end":26876,"line_start":710,"line_end":710,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27018,"byte_end":27021,"line_start":719,"line_end":719,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27191,"byte_end":27194,"line_start":729,"line_end":729,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27487,"byte_end":27490,"line_start":742,"line_end":742,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27618,"byte_end":27621,"line_start":750,"line_end":750,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27934,"byte_end":27937,"line_start":762,"line_end":762,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30131,"byte_end":30134,"line_start":846,"line_end":846,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30474,"byte_end":30477,"line_start":861,"line_end":861,"column_start":41,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30558,"byte_end":30561,"line_start":867,"line_end":867,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30749,"byte_end":30752,"line_start":877,"line_end":877,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30932,"byte_end":30935,"line_start":886,"line_end":886,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":31123,"byte_end":31126,"line_start":896,"line_end":896,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":31304,"byte_end":31307,"line_start":905,"line_end":905,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":31717,"byte_end":31725,"line_start":918,"line_end":918,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32000,"byte_end":32007,"line_start":929,"line_end":929,"column_start":50,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32255,"byte_end":32266,"line_start":940,"line_end":940,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32471,"byte_end":32481,"line_start":950,"line_end":950,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32629,"byte_end":32639,"line_start":956,"line_end":956,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32798,"byte_end":32808,"line_start":962,"line_end":962,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":1711,"byte_end":1717,"line_start":38,"line_end":38,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":39}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":33325,"byte_end":33334,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34085,"byte_end":34094,"line_start":45,"line_end":45,"column_start":34,"column_end":43},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":421},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34524,"byte_end":34529,"line_start":65,"line_end":65,"column_start":15,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":34751,"byte_end":34756,"line_start":76,"line_end":76,"column_start":37,"column_end":42},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":435},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35602,"byte_end":35608,"line_start":110,"line_end":110,"column_start":15,"column_end":21},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":35937,"byte_end":35943,"line_start":126,"line_end":126,"column_start":29,"column_end":35},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":452},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":36576,"byte_end":36584,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37176,"byte_end":37184,"line_start":179,"line_end":179,"column_start":26,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":469},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":37759,"byte_end":37768,"line_start":203,"line_end":203,"column_start":15,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":38133,"byte_end":38142,"line_start":219,"line_end":219,"column_start":29,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":483},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":39039,"byte_end":39048,"line_start":252,"line_end":252,"column_start":15,"column_end":24},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":39410,"byte_end":39419,"line_start":268,"line_end":268,"column_start":29,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":500},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40304,"byte_end":40308,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":40539,"byte_end":40543,"line_start":315,"line_end":315,"column_start":26,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":517},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41091,"byte_end":41095,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41325,"byte_end":41329,"line_start":352,"line_end":352,"column_start":26,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":531},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":41812,"byte_end":41817,"line_start":377,"line_end":377,"column_start":12,"column_end":17},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42087,"byte_end":42092,"line_start":392,"line_end":392,"column_start":26,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":545},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42651,"byte_end":42658,"line_start":416,"line_end":416,"column_start":12,"column_end":19},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":559},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/walker.rs","byte_start":42815,"byte_end":42822,"line_start":423,"line_end":423,"column_start":29,"column_end":36},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":559},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":4580,"byte_end":4583,"line_start":104,"line_end":104,"column_start":16,"column_end":19},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":25620,"byte_end":25623,"line_start":647,"line_end":647,"column_start":44,"column_end":47},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":572},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":25764,"byte_end":25767,"line_start":656,"line_end":656,"column_start":28,"column_end":31},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":572},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":26734,"byte_end":26737,"line_start":702,"line_end":702,"column_start":30,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2210}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":26873,"byte_end":26876,"line_start":710,"line_end":710,"column_start":30,"column_end":33},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2324}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27018,"byte_end":27021,"line_start":719,"line_end":719,"column_start":30,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2305}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27191,"byte_end":27194,"line_start":729,"line_end":729,"column_start":41,"column_end":44},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2336}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27487,"byte_end":27490,"line_start":742,"line_end":742,"column_start":36,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2269}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27618,"byte_end":27621,"line_start":750,"line_end":750,"column_start":38,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2504}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":27934,"byte_end":27937,"line_start":762,"line_end":762,"column_start":41,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2522}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30131,"byte_end":30134,"line_start":846,"line_end":846,"column_start":34,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2313}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30474,"byte_end":30477,"line_start":861,"line_end":861,"column_start":41,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2331}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30558,"byte_end":30561,"line_start":867,"line_end":867,"column_start":41,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":572},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30749,"byte_end":30752,"line_start":877,"line_end":877,"column_start":44,"column_end":47},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":572},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":30932,"byte_end":30935,"line_start":886,"line_end":886,"column_start":41,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":572},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":31123,"byte_end":31126,"line_start":896,"line_end":896,"column_start":44,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":572},"to":{"krate":2,"index":2137}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":31304,"byte_end":31307,"line_start":905,"line_end":905,"column_start":39,"column_end":42},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":572},"to":{"krate":15,"index":2347}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":31717,"byte_end":31725,"line_start":918,"line_end":918,"column_start":50,"column_end":58},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":166},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32000,"byte_end":32007,"line_start":929,"line_end":929,"column_start":50,"column_end":57},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":173},"to":{"krate":15,"index":134}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32255,"byte_end":32266,"line_start":940,"line_end":940,"column_start":23,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":180},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32471,"byte_end":32481,"line_start":950,"line_end":950,"column_start":29,"column_end":39},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":588},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32629,"byte_end":32639,"line_start":956,"line_end":956,"column_start":31,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":588},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/daggy-0.6.0/src/lib.rs","byte_start":32798,"byte_end":32808,"line_start":962,"line_end":962,"column_start":31,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":588},"to":{"krate":1,"index":1624}}]}