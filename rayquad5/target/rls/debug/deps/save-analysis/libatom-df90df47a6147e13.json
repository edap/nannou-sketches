{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","atom","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=df90df47a6147e13","-C","extra-filename=-df90df47a6147e13","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad4/target/rls/debug/deps/libatom-df90df47a6147e13.rmeta"},"prelude":{"crate_id":{"name":"atom","disambiguator":[7388032441240403036,7755558300585397009]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":612,"byte_end":9613,"line_start":15,"line_end":340,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":612,"byte_end":9613,"line_start":15,"line_end":340,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":61},{"krate":0,"index":69},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":82}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":931,"byte_end":935,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"Atom","qualname":"::Atom","value":"Atom {  }","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":17}],"decl_id":null,"docs":" An Atom wraps an AtomicPtr, it allows for safe mutation of an atomic\n into common Rust Types.\n","sig":null,"attributes":[{"value":"/ An Atom wraps an AtomicPtr, it allows for safe mutation of an atomic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":819,"byte_end":891,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ into common Rust Types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":892,"byte_end":919,"line_start":25,"line_end":25,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1337,"byte_end":1342,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"empty","qualname":"<Atom<P>>::empty","value":"fn () -> Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Create a empty Atom\n","sig":null,"attributes":[{"value":"/ Create a empty Atom","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1302,"byte_end":1325,"line_start":47,"line_end":47,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1527,"byte_end":1530,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Atom<P>>::new","value":"fn (value: P) -> Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Atomic from Pointer P\n","sig":null,"attributes":[{"value":"/ Create a new Atomic from Pointer P","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1477,"byte_end":1515,"line_start":55,"line_end":55,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1820,"byte_end":1824,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"swap","qualname":"<Atom<P>>::swap","value":"fn (&self, v: P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Swap a new value into the Atom, This will try multiple\n times until it succeeds. The old value will be returned.\n","sig":null,"attributes":[{"value":"/ Swap a new value into the Atom, This will try multiple","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1685,"byte_end":1743,"line_start":63,"line_end":63,"column_start":5,"column_end":63}},{"value":"/ times until it succeeds. The old value will be returned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1748,"byte_end":1808,"line_start":64,"line_end":64,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2269,"byte_end":2273,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"take","qualname":"<Atom<P>>::take","value":"fn (&self) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Take the value of the Atom replacing it with null pointer\n Returning the contents. If the contents was a `null` pointer the\n result will be `None`.\n","sig":null,"attributes":[{"value":"/ Take the value of the Atom replacing it with null pointer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2092,"byte_end":2153,"line_start":75,"line_end":75,"column_start":5,"column_end":66}},{"value":"/ Returning the contents. If the contents was a `null` pointer the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2158,"byte_end":2226,"line_start":76,"line_end":76,"column_start":5,"column_end":73}},{"value":"/ result will be `None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2231,"byte_end":2257,"line_start":77,"line_end":77,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2762,"byte_end":2773,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"set_if_none","qualname":"<Atom<P>>::set_if_none","value":"fn (&self, v: P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" This will do a `CAS` setting the value only if it is NULL\n this will return `None` if the value was written,\n otherwise a `Some(v)` will be returned, where the value was\n the same value that you passed into this function\n","sig":null,"attributes":[{"value":"/ This will do a `CAS` setting the value only if it is NULL","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2505,"byte_end":2566,"line_start":87,"line_end":87,"column_start":5,"column_end":66}},{"value":"/ this will return `None` if the value was written,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2571,"byte_end":2624,"line_start":88,"line_end":88,"column_start":5,"column_end":58}},{"value":"/ otherwise a `Some(v)` will be returned, where the value was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2629,"byte_end":2692,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"/ the same value that you passed into this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":2697,"byte_end":2750,"line_start":90,"line_end":90,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":3320,"byte_end":3340,"line_start":106,"line_end":106,"column_start":12,"column_end":32},"name":"replace_and_set_next","qualname":"<Atom<P>>::replace_and_set_next","value":"fn (&self, mut value: P) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Take the current content, write it into P then do a CAS to extent this\n Atom with the previous contents. This can be used to create a LIFO","sig":null,"attributes":[{"value":"/ Take the current content, write it into P then do a CAS to extent this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":3084,"byte_end":3158,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ Atom with the previous contents. This can be used to create a LIFO","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":3163,"byte_end":3233,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":3238,"byte_end":3241,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Returns true if this set this migrated the Atom from null.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":3246,"byte_end":3308,"line_start":105,"line_end":105,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4337,"byte_end":4344,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Atom<P>>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if an atom is None","sig":null,"attributes":[{"value":"/ Check to see if an atom is None","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4210,"byte_end":4245,"line_start":132,"line_end":132,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4250,"byte_end":4253,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This only means that the contents was None when it was measured","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4258,"byte_end":4325,"line_start":134,"line_end":134,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4903,"byte_end":4913,"line_start":166,"line_end":166,"column_start":11,"column_end":21},"name":"IntoRawPtr","qualname":"::IntoRawPtr","value":"IntoRawPtr","parent":null,"children":[{"krate":0,"index":38}],"decl_id":null,"docs":" Convert from into a raw pointer\n","sig":null,"attributes":[{"value":"/ Convert from into a raw pointer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4857,"byte_end":4892,"line_start":165,"line_end":165,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4930,"byte_end":4938,"line_start":167,"line_end":167,"column_start":15,"column_end":23},"name":"into_raw","qualname":"::IntoRawPtr::into_raw","value":"fn (self) -> *mut ()","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":39},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5012,"byte_end":5022,"line_start":171,"line_end":171,"column_start":11,"column_end":21},"name":"FromRawPtr","qualname":"::FromRawPtr","value":"FromRawPtr","parent":null,"children":[{"krate":0,"index":40}],"decl_id":null,"docs":" Convert from a raw ptr into a pointer\n","sig":null,"attributes":[{"value":"/ Convert from a raw ptr into a pointer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4960,"byte_end":5001,"line_start":170,"line_end":170,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5039,"byte_end":5047,"line_start":172,"line_end":172,"column_start":15,"column_end":23},"name":"from_raw","qualname":"::FromRawPtr::from_raw","value":"fn (ptr: *mut ()) -> Self","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6289,"byte_end":6300,"line_start":221,"line_end":221,"column_start":12,"column_end":23},"name":"AtomSetOnce","qualname":"::AtomSetOnce","value":"AtomSetOnce {  }","parent":null,"children":[{"krate":0,"index":87}],"decl_id":null,"docs":" This is a restricted version of the Atom. It allows for only\n `set_if_none` to be called.","sig":null,"attributes":[{"value":"/ This is a restricted version of the Atom. It allows for only","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6047,"byte_end":6111,"line_start":215,"line_end":215,"column_start":1,"column_end":65}},{"value":"/ `set_if_none` to be called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6112,"byte_end":6143,"line_start":216,"line_end":216,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6144,"byte_end":6147,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ `swap` and `take` can be used only with a mutable reference. Meaning","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6148,"byte_end":6220,"line_start":218,"line_end":218,"column_start":1,"column_end":73}},{"value":"/ that AtomSetOnce is not usable as a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6221,"byte_end":6260,"line_start":219,"line_end":219,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6479,"byte_end":6484,"line_start":233,"line_end":233,"column_start":12,"column_end":17},"name":"empty","qualname":"<AtomSetOnce<P>>::empty","value":"fn () -> AtomSetOnce<P>","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `AtomSetOnce`\n","sig":null,"attributes":[{"value":"/ Create an empty `AtomSetOnce`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6434,"byte_end":6467,"line_start":232,"line_end":232,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6641,"byte_end":6644,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomSetOnce<P>>::new","value":"fn (value: P) -> AtomSetOnce<P>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AtomSetOnce` from Pointer P\n","sig":null,"attributes":[{"value":"/ Create a new `AtomSetOnce` from Pointer P","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6584,"byte_end":6629,"line_start":239,"line_end":239,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7013,"byte_end":7024,"line_start":250,"line_end":250,"column_start":12,"column_end":23},"name":"set_if_none","qualname":"<AtomSetOnce<P>>::set_if_none","value":"fn (&self, v: P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" This will do a `CAS` setting the value only if it is NULL\n this will return `OK(())` if the value was written,\n otherwise a `Err(P)` will be returned, where the value was\n the same value that you passed into this function\n","sig":null,"attributes":[{"value":"/ This will do a `CAS` setting the value only if it is NULL","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6755,"byte_end":6816,"line_start":246,"line_end":246,"column_start":5,"column_end":66}},{"value":"/ this will return `OK(())` if the value was written,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6821,"byte_end":6876,"line_start":247,"line_end":247,"column_start":5,"column_end":60}},{"value":"/ otherwise a `Err(P)` will be returned, where the value was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6881,"byte_end":6943,"line_start":248,"line_end":248,"column_start":5,"column_end":67}},{"value":"/ the same value that you passed into this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6948,"byte_end":7001,"line_start":249,"line_end":249,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7153,"byte_end":7162,"line_start":255,"line_end":255,"column_start":12,"column_end":21},"name":"into_atom","qualname":"<AtomSetOnce<P>>::into_atom","value":"fn (self) -> Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Convert an `AtomSetOnce` into an `Atom`\n","sig":null,"attributes":[{"value":"/ Convert an `AtomSetOnce` into an `Atom`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7098,"byte_end":7141,"line_start":254,"line_end":254,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7283,"byte_end":7287,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"name":"atom","qualname":"<AtomSetOnce<P>>::atom","value":"fn (&mut self) -> &mut Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Allow access to the atom if exclusive access is granted\n","sig":null,"attributes":[{"value":"/ Allow access to the atom if exclusive access is granted","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7212,"byte_end":7271,"line_start":259,"line_end":259,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7479,"byte_end":7486,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"is_none","qualname":"<AtomSetOnce<P>>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if an atom is None","sig":null,"attributes":[{"value":"/ Check to see if an atom is None","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7352,"byte_end":7387,"line_start":264,"line_end":264,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7392,"byte_end":7395,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This only means that the contents was None when it was measured","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7400,"byte_end":7467,"line_start":266,"line_end":266,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7681,"byte_end":7684,"line_start":277,"line_end":277,"column_start":12,"column_end":15},"name":"get","qualname":"<AtomSetOnce<P>>::get","value":"fn <'a> (&'a self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" If the Atom is set, get the value\n","sig":null,"attributes":[{"value":"/ If the Atom is set, get the value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7632,"byte_end":7669,"line_start":276,"line_end":276,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8279,"byte_end":8286,"line_start":296,"line_end":296,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomSetOnce<Box<T>>>::get_mut","value":"fn <'a> (&'a mut self) -> Option<&'a mut T>","parent":null,"children":[],"decl_id":null,"docs":" If the Atom is set, get the value\n","sig":null,"attributes":[{"value":"/ If the Atom is set, get the value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8230,"byte_end":8267,"line_start":295,"line_end":295,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8954,"byte_end":8957,"line_start":318,"line_end":318,"column_start":12,"column_end":15},"name":"dup","qualname":"<AtomSetOnce<T>>::dup","value":"fn <'a> (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate the inner pointer if it is set\n","sig":null,"attributes":[{"value":"/ Duplicate the inner pointer if it is set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8898,"byte_end":8942,"line_start":317,"line_end":317,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":9531,"byte_end":9541,"line_start":337,"line_end":337,"column_start":11,"column_end":21},"name":"GetNextMut","qualname":"::GetNextMut","value":"GetNextMut","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" This is a utility Trait that fetches the next ptr from\n an object.\n","sig":null,"attributes":[{"value":"/ This is a utility Trait that fetches the next ptr from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":9447,"byte_end":9505,"line_start":335,"line_end":335,"column_start":1,"column_end":59}},{"value":"/ an object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":9506,"byte_end":9520,"line_start":336,"line_end":336,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":83},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":9553,"byte_end":9560,"line_start":338,"line_end":338,"column_start":10,"column_end":17},"name":"NextPtr","qualname":"::GetNextMut::NextPtr","value":"type NextPtr;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":9569,"byte_end":9577,"line_start":339,"line_end":339,"column_start":8,"column_end":16},"name":"get_next","qualname":"::GetNextMut::get_next","value":"fn (&mut self) -> &mut Self::NextPtr","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1052,"byte_end":1056,"line_start":34,"line_end":34,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1250,"byte_end":1254,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4441,"byte_end":4445,"line_start":140,"line_end":140,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4732,"byte_end":4736,"line_start":154,"line_end":154,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4806,"byte_end":4810,"line_start":159,"line_end":159,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5097,"byte_end":5100,"line_start":175,"line_end":175,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5233,"byte_end":5236,"line_start":182,"line_end":182,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5374,"byte_end":5377,"line_start":189,"line_end":189,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5520,"byte_end":5523,"line_start":196,"line_end":196,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6375,"byte_end":6386,"line_start":228,"line_end":228,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7553,"byte_end":7564,"line_start":272,"line_end":272,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8204,"byte_end":8215,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8831,"byte_end":8842,"line_start":313,"line_end":313,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1052,"byte_end":1056,"line_start":34,"line_end":34,"column_start":19,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":14},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":1250,"byte_end":1254,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":14},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4441,"byte_end":4445,"line_start":140,"line_end":140,"column_start":18,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":14},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4732,"byte_end":4736,"line_start":154,"line_end":154,"column_start":25,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":14},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":4806,"byte_end":4810,"line_start":159,"line_end":159,"column_start":25,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":14},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5097,"byte_end":5100,"line_start":175,"line_end":175,"column_start":24,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5233,"byte_end":5236,"line_start":182,"line_end":182,"column_start":24,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5374,"byte_end":5377,"line_start":189,"line_end":189,"column_start":24,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":3769},"to":{"krate":0,"index":37}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":5520,"byte_end":5523,"line_start":196,"line_end":196,"column_start":24,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":5,"index":3769},"to":{"krate":0,"index":39}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":6375,"byte_end":6386,"line_start":228,"line_end":228,"column_start":9,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":7553,"byte_end":7564,"line_start":272,"line_end":272,"column_start":12,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8204,"byte_end":8215,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","byte_start":8831,"byte_end":8842,"line_start":313,"line_end":313,"column_start":9,"column_end":20},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":85},"to":{"krate":4294967295,"index":4294967295}}]}