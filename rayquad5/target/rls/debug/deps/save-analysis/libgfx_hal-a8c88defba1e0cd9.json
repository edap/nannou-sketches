{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","gfx_hal","--edition=2018","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=a8c88defba1e0cd9","-C","extra-filename=-a8c88defba1e0cd9","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","bitflags=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libbitflags-217c3325f1eff011.rmeta","--extern","raw_window_handle=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libraw_window_handle-43b2017ba65de332.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libgfx_hal-a8c88defba1e0cd9.rmeta"},"prelude":{"crate_id":{"name":"gfx_hal","disambiguator":[11122676734006237625,10181242700647790931]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":15,"id":{"name":"bitflags","disambiguator":[381175081479133518,10994153786536176848]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":16,"id":{"name":"raw_window_handle","disambiguator":[6552574937117001955,7578084645408101463]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","num":17,"id":{"name":"libc","disambiguator":[7997064065336242500,8511025302220419458]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":0,"byte_end":19737,"line_start":1,"line_end":494,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":32668,"byte_end":32669,"line_start":37,"line_end":37,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"ClearValue, AttachmentClear","parent":{"krate":0,"index":58}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":32668,"byte_end":32669,"line_start":37,"line_end":37,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"BufferImageCopy, ImageCopy, ImageResolve, ImageBlit, BufferCopy","parent":{"krate":0,"index":58}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156605,"byte_end":156606,"line_start":16,"line_end":16,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"ComputePipelineDesc","parent":{"krate":0,"index":537}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156605,"byte_end":156606,"line_start":16,"line_end":16,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"DescriptorPool, DescriptorSetIndex, DescriptorPoolCreateFlags, DescriptorRangeDesc, DescriptorSetWrite, DescriptorSetLayoutBinding, Descriptor, DescriptorSetCopy","parent":{"krate":0,"index":537}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156605,"byte_end":156606,"line_start":16,"line_end":16,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"DepthValue, Rect, DepthBias, StencilValue, ClearRect, GraphicsPipelineDesc, Viewport, ColorValue","parent":{"krate":0,"index":537}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156605,"byte_end":156606,"line_start":16,"line_end":16,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"BufferIndex, PatchSize","parent":{"krate":0,"index":537}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156605,"byte_end":156606,"line_start":16,"line_end":16,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Comparison, Face","parent":{"krate":0,"index":537}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156605,"byte_end":156606,"line_start":16,"line_end":16,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Specialization","parent":{"krate":0,"index":537}},{"kind":"Use","ref_id":{"krate":0,"index":726},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214105,"byte_end":214116,"line_start":19,"line_end":19,"column_start":24,"column_end":35},"alias_span":null,"name":"QueueFamily","value":"","parent":{"krate":0,"index":720}},{"kind":"Use","ref_id":{"krate":0,"index":10506},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214118,"byte_end":214131,"line_start":19,"line_end":19,"column_start":37,"column_end":50},"alias_span":null,"name":"QueueFamilyId","value":"","parent":{"krate":0,"index":720}},{"kind":"Use","ref_id":{"krate":0,"index":10524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214133,"byte_end":214143,"line_start":19,"line_end":19,"column_start":52,"column_end":62},"alias_span":null,"name":"QueueGroup","value":"","parent":{"krate":0,"index":720}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":695,"byte_end":709,"line_start":34,"line_end":34,"column_start":18,"column_end":32},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":713,"byte_end":714,"line_start":34,"line_end":34,"column_start":36,"column_end":37},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":733,"byte_end":746,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":750,"byte_end":751,"line_start":35,"line_end":35,"column_start":35,"column_end":36},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":258},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":769,"byte_end":775,"line_start":36,"line_end":36,"column_start":17,"column_end":23},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":779,"byte_end":780,"line_start":36,"line_end":36,"column_start":27,"column_end":28},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":796,"byte_end":807,"line_start":37,"line_end":37,"column_start":15,"column_end":26},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":811,"byte_end":812,"line_start":37,"line_end":37,"column_start":30,"column_end":31},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":574},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":827,"byte_end":841,"line_start":38,"line_end":38,"column_start":14,"column_end":28},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":845,"byte_end":846,"line_start":38,"line_end":38,"column_start":32,"column_end":33},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":864,"byte_end":876,"line_start":39,"line_end":39,"column_start":17,"column_end":29},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":880,"byte_end":881,"line_start":39,"line_end":39,"column_start":33,"column_end":34},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":726},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":883,"byte_end":894,"line_start":39,"line_end":39,"column_start":36,"column_end":47},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":898,"byte_end":899,"line_start":39,"line_end":39,"column_start":51,"column_end":52},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":919,"byte_end":938,"line_start":40,"line_end":40,"column_start":18,"column_end":37},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":942,"byte_end":943,"line_start":40,"line_end":40,"column_start":41,"column_end":42},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":945,"byte_end":952,"line_start":40,"line_end":40,"column_start":44,"column_end":51},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":956,"byte_end":957,"line_start":40,"line_end":40,"column_start":55,"column_end":56},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":843},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":959,"byte_end":968,"line_start":40,"line_end":40,"column_start":58,"column_end":67},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":972,"byte_end":973,"line_start":40,"line_end":40,"column_start":71,"column_end":72},"name":"_","value":"","parent":{"krate":0,"index":855}},{"kind":"Use","ref_id":{"krate":0,"index":877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":984,"byte_end":992,"line_start":41,"line_end":41,"column_start":9,"column_end":17},"alias_span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":996,"byte_end":997,"line_start":41,"line_end":41,"column_start":21,"column_end":22},"name":"_","value":"","parent":{"krate":0,"index":855}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":0,"byte_end":19737,"line_start":1,"line_end":494,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":33},{"krate":0,"index":58},{"krate":0,"index":185},{"krate":0,"index":370},{"krate":0,"index":399},{"krate":0,"index":474},{"krate":0,"index":487},{"krate":0,"index":521},{"krate":0,"index":537},{"krate":0,"index":712},{"krate":0,"index":720},{"krate":0,"index":782},{"krate":0,"index":855},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":10894},{"krate":0,"index":10916},{"krate":0,"index":10912},{"krate":0,"index":10913},{"krate":0,"index":10909},{"krate":0,"index":10910},{"krate":0,"index":10907},{"krate":0,"index":10901},{"krate":0,"index":10899},{"krate":0,"index":10896},{"krate":0,"index":10917},{"krate":0,"index":10990},{"krate":0,"index":10992},{"krate":0,"index":10994},{"krate":0,"index":10996},{"krate":0,"index":10998},{"krate":0,"index":11073},{"krate":0,"index":11076},{"krate":0,"index":11078},{"krate":0,"index":11081},{"krate":0,"index":11083},{"krate":0,"index":11086},{"krate":0,"index":11088},{"krate":0,"index":11091},{"krate":0,"index":11093},{"krate":0,"index":11096},{"krate":0,"index":11099},{"krate":0,"index":11320},{"krate":0,"index":11342},{"krate":0,"index":11338},{"krate":0,"index":11339},{"krate":0,"index":11335},{"krate":0,"index":11336},{"krate":0,"index":11333},{"krate":0,"index":11327},{"krate":0,"index":11325},{"krate":0,"index":11322},{"krate":0,"index":11343},{"krate":0,"index":11348},{"krate":0,"index":11350},{"krate":0,"index":11352},{"krate":0,"index":11354},{"krate":0,"index":11356},{"krate":0,"index":11363},{"krate":0,"index":11366},{"krate":0,"index":11368},{"krate":0,"index":11371},{"krate":0,"index":11373},{"krate":0,"index":11376},{"krate":0,"index":11378},{"krate":0,"index":11381},{"krate":0,"index":11383},{"krate":0,"index":11386},{"krate":0,"index":11389},{"krate":0,"index":11406},{"krate":0,"index":11486},{"krate":0,"index":11485},{"krate":0,"index":11483},{"krate":0,"index":11481},{"krate":0,"index":11477},{"krate":0,"index":11478},{"krate":0,"index":11490},{"krate":0,"index":11511},{"krate":0,"index":11510},{"krate":0,"index":11508},{"krate":0,"index":11505},{"krate":0,"index":11506},{"krate":0,"index":11502},{"krate":0,"index":11500},{"krate":0,"index":11497},{"krate":0,"index":11498},{"krate":0,"index":11495},{"krate":0,"index":11513},{"krate":0,"index":11520},{"krate":0,"index":11518},{"krate":0,"index":11515},{"krate":0,"index":11516},{"krate":0,"index":877},{"krate":0,"index":11522},{"krate":0,"index":11547},{"krate":0,"index":11545},{"krate":0,"index":11543},{"krate":0,"index":11539},{"krate":0,"index":11540},{"krate":0,"index":11536},{"krate":0,"index":11537},{"krate":0,"index":11530},{"krate":0,"index":11528},{"krate":0,"index":11525},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":890},{"krate":0,"index":894}],"decl_id":null,"docs":" Low-level graphics abstraction for Rust. Mostly operates on data, not types.\n Designed for use by libraries and higher-level abstractions only.\n","sig":null,"attributes":[{"value":"deny(missing_debug_implementations, missing_docs, unused)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":0,"byte_end":61,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"! Low-level graphics abstraction for Rust. Mostly operates on data, not types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":63,"byte_end":143,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"! Designed for use by libraries and higher-level abstractions only.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":144,"byte_end":213,"line_start":4,"line_end":4,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::adapter","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":924},{"krate":0,"index":938},{"krate":0,"index":936},{"krate":0,"index":934},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":939},{"krate":0,"index":951},{"krate":0,"index":949},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":953},{"krate":0,"index":957},{"krate":0,"index":23},{"krate":0,"index":960},{"krate":0,"index":984},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":976},{"krate":0,"index":986},{"krate":0,"index":1000},{"krate":0,"index":998},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":1002},{"krate":0,"index":1007}],"decl_id":null,"docs":" Physical devices and adapters.","sig":null,"attributes":[{"value":"! Physical devices and adapters.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":19739,"byte_end":19773,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":19774,"byte_end":19777,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The `PhysicalDevice` trait specifies the API a backend must provide for dealing with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":19778,"byte_end":19866,"line_start":3,"line_end":3,"column_start":1,"column_end":89}},{"value":"! and querying a physical device, such as a particular GPU.  An `Adapter` is a struct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":19867,"byte_end":19954,"line_start":4,"line_end":4,"column_start":1,"column_end":88}},{"value":"! containing a `PhysicalDevice` and metadata for a particular GPU, generally created","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":19955,"byte_end":20041,"line_start":5,"line_end":5,"column_start":1,"column_end":87}},{"value":"! from an `Instance` of that backend.  `adapter.open_with(...)` will return a `Device`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20042,"byte_end":20130,"line_start":6,"line_end":6,"column_start":1,"column_end":89}},{"value":"! that has the properties specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20131,"byte_end":20169,"line_start":7,"line_end":7,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":924},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20529,"byte_end":20539,"line_start":26,"line_end":26,"column_start":12,"column_end":22},"name":"MemoryType","qualname":"::adapter::MemoryType","value":"MemoryType { properties, heap_index }","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":926}],"decl_id":null,"docs":" A description for a single chunk of memory in a heap.\n","sig":null,"attributes":[{"value":"/ A description for a single chunk of memory in a heap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20352,"byte_end":20409,"line_start":23,"line_end":23,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20673,"byte_end":20683,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"name":"properties","qualname":"::adapter::MemoryType::properties","value":"memory::Properties","parent":{"krate":0,"index":924},"children":[],"decl_id":null,"docs":" Properties of the associated memory, such as synchronization\n properties or whether it's on the CPU or GPU.\n","sig":null,"attributes":[{"value":"/ Properties of the associated memory, such as synchronization","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20546,"byte_end":20610,"line_start":27,"line_end":27,"column_start":5,"column_end":69}},{"value":"/ properties or whether it's on the CPU or GPU.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20615,"byte_end":20664,"line_start":28,"line_end":28,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":926},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20780,"byte_end":20790,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"name":"heap_index","qualname":"::adapter::MemoryType::heap_index","value":"usize","parent":{"krate":0,"index":924},"children":[],"decl_id":null,"docs":" Index to the underlying memory heap in `Gpu::memory_heaps`\n","sig":null,"attributes":[{"value":"/ Index to the underlying memory heap in `Gpu::memory_heaps`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20709,"byte_end":20771,"line_start":30,"line_end":30,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":939},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20983,"byte_end":20999,"line_start":37,"line_end":37,"column_start":12,"column_end":28},"name":"MemoryProperties","qualname":"::adapter::MemoryProperties","value":"MemoryProperties { memory_types, memory_heaps }","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":941}],"decl_id":null,"docs":" Types of memory supported by this adapter and available memory.\n","sig":null,"attributes":[{"value":"/ Types of memory supported by this adapter and available memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":20802,"byte_end":20869,"line_start":34,"line_end":34,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":940},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21133,"byte_end":21145,"line_start":40,"line_end":40,"column_start":9,"column_end":21},"name":"memory_types","qualname":"::adapter::MemoryProperties::memory_types","value":"std::vec::Vec<adapter::MemoryType>","parent":{"krate":0,"index":939},"children":[],"decl_id":null,"docs":" Each memory type is associated with one heap of `memory_heaps`.\n Multiple types can point to the same heap.\n","sig":null,"attributes":[{"value":"/ Each memory type is associated with one heap of `memory_heaps`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21006,"byte_end":21073,"line_start":38,"line_end":38,"column_start":5,"column_end":72}},{"value":"/ Multiple types can point to the same heap.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21078,"byte_end":21124,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":941},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21219,"byte_end":21231,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"memory_heaps","qualname":"::adapter::MemoryProperties::memory_heaps","value":"std::vec::Vec<u64>","parent":{"krate":0,"index":939},"children":[],"decl_id":null,"docs":" Memory heaps with their size in bytes.\n","sig":null,"attributes":[{"value":"/ Memory heaps with their size in bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21168,"byte_end":21210,"line_start":41,"line_end":41,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":953},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21428,"byte_end":21431,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"Gpu","qualname":"::adapter::Gpu","value":"Gpu { device, queue_groups }","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956}],"decl_id":null,"docs":" Represents a combination of a logical device and the\n hardware queues it provides.","sig":null,"attributes":[{"value":"/ Represents a combination of a logical device and the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21246,"byte_end":21302,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/ hardware queues it provides.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21303,"byte_end":21335,"line_start":46,"line_end":46,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21336,"byte_end":21339,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This structure is typically created using an `Adapter`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21340,"byte_end":21399,"line_start":48,"line_end":48,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":955},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21498,"byte_end":21504,"line_start":52,"line_end":52,"column_start":9,"column_end":15},"name":"device","qualname":"::adapter::Gpu::device","value":"<B as Backend>::Device","parent":{"krate":0,"index":953},"children":[],"decl_id":null,"docs":" Logical device for a given backend.\n","sig":null,"attributes":[{"value":"/ Logical device for a given backend.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21450,"byte_end":21489,"line_start":51,"line_end":51,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":956},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21578,"byte_end":21590,"line_start":54,"line_end":54,"column_start":9,"column_end":21},"name":"queue_groups","qualname":"::adapter::Gpu::queue_groups","value":"std::vec::Vec<queue::family::QueueGroup<B>>","parent":{"krate":0,"index":953},"children":[],"decl_id":null,"docs":" The command queues that the device provides.\n","sig":null,"attributes":[{"value":"/ The command queues that the device provides.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21521,"byte_end":21569,"line_start":53,"line_end":53,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21715,"byte_end":21729,"line_start":58,"line_end":58,"column_start":11,"column_end":25},"name":"PhysicalDevice","qualname":"::adapter::PhysicalDevice","value":"PhysicalDevice<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" Represents a physical device (such as a GPU) capable of supporting the given backend.\n","sig":null,"attributes":[{"value":"/ Represents a physical device (such as a GPU) capable of supporting the given backend.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21615,"byte_end":21704,"line_start":57,"line_end":57,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22660,"byte_end":22664,"line_start":81,"line_end":81,"column_start":15,"column_end":19},"name":"open","qualname":"::adapter::PhysicalDevice::open","value":"fn (&self, families: &[(&B::QueueFamily, &[QueuePriority])], requested_features: Features) -> Result<Gpu<B>, device::CreationError>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Create a new logical device with the requested features. If `requested_features` is\n empty (e.g. through `Features::empty()`) then only the core features are supported.","sig":null,"attributes":[{"value":"/ Create a new logical device with the requested features. If `requested_features` is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21780,"byte_end":21867,"line_start":59,"line_end":59,"column_start":5,"column_end":92}},{"value":"/ empty (e.g. through `Features::empty()`) then only the core features are supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21872,"byte_end":21959,"line_start":60,"line_end":60,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21964,"byte_end":21967,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21972,"byte_end":21984,"line_start":62,"line_end":62,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21989,"byte_end":21992,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ - Returns `TooManyObjects` if the implementation can't create a new logical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21997,"byte_end":22084,"line_start":64,"line_end":64,"column_start":5,"column_end":92}},{"value":"/ - Returns `MissingFeature` if the implementation does not support a requested feature.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22089,"byte_end":22179,"line_start":65,"line_end":65,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22184,"byte_end":22187,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22192,"byte_end":22206,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22211,"byte_end":22214,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22219,"byte_end":22232,"line_start":69,"line_end":69,"column_start":5,"column_end":18}},{"value":"/ # extern crate gfx_backend_empty as empty;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22237,"byte_end":22283,"line_start":70,"line_end":70,"column_start":5,"column_end":51}},{"value":"/ # extern crate gfx_hal;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22288,"byte_end":22315,"line_start":71,"line_end":71,"column_start":5,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22320,"byte_end":22337,"line_start":72,"line_end":72,"column_start":5,"column_end":22}},{"value":"/ use gfx_hal::{adapter::PhysicalDevice, Features};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22342,"byte_end":22395,"line_start":73,"line_end":73,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22400,"byte_end":22403,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # let physical_device: empty::PhysicalDevice = return;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22408,"byte_end":22466,"line_start":75,"line_end":75,"column_start":5,"column_end":63}},{"value":"/ # let family: empty::QueueFamily = return;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22471,"byte_end":22517,"line_start":76,"line_end":76,"column_start":5,"column_end":51}},{"value":"/ # unsafe {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22522,"byte_end":22536,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/ let gpu = physical_device.open(&[(&family, &[1.0; 1])], Features::empty());","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22541,"byte_end":22620,"line_start":78,"line_end":78,"column_start":5,"column_end":84}},{"value":"/ # }}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22625,"byte_end":22633,"line_start":79,"line_end":79,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22638,"byte_end":22645,"line_start":80,"line_end":80,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22880,"byte_end":22897,"line_start":88,"line_end":88,"column_start":8,"column_end":25},"name":"format_properties","qualname":"::adapter::PhysicalDevice::format_properties","value":"fn (&self, format: Option<format::Format>) -> format::Properties","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Fetch details for a particular format.\n","sig":null,"attributes":[{"value":"/ Fetch details for a particular format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22830,"byte_end":22872,"line_start":87,"line_end":87,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23021,"byte_end":23044,"line_start":91,"line_end":91,"column_start":8,"column_end":31},"name":"image_format_properties","qualname":"::adapter::PhysicalDevice::image_format_properties","value":"fn (&self, format: format::Format, dimensions: u8, tiling: image::Tiling, usage: image::Usage, view_caps: image::ViewCapabilities) -> Option<image::FormatProperties>","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Fetch details for a particular image format.\n","sig":null,"attributes":[{"value":"/ Fetch details for a particular image format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":22965,"byte_end":23013,"line_start":90,"line_end":90,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23340,"byte_end":23357,"line_start":101,"line_end":101,"column_start":8,"column_end":25},"name":"memory_properties","qualname":"::adapter::PhysicalDevice::memory_properties","value":"fn (&self) -> MemoryProperties","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Fetch details for the memory regions provided by the device.\n","sig":null,"attributes":[{"value":"/ Fetch details for the memory regions provided by the device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23268,"byte_end":23332,"line_start":100,"line_end":100,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23510,"byte_end":23518,"line_start":105,"line_end":105,"column_start":8,"column_end":16},"name":"features","qualname":"::adapter::PhysicalDevice::features","value":"fn (&self) -> Features","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Returns the features of this `PhysicalDevice`. This usually depends on the graphics API being\n used.\n","sig":null,"attributes":[{"value":"/ Returns the features of this `PhysicalDevice`. This usually depends on the graphics API being","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23391,"byte_end":23488,"line_start":103,"line_end":103,"column_start":5,"column_end":102}},{"value":"/ used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23493,"byte_end":23502,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23611,"byte_end":23616,"line_start":108,"line_end":108,"column_start":8,"column_end":13},"name":"hints","qualname":"::adapter::PhysicalDevice::hints","value":"fn (&self) -> Hints","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Returns the performance hints of this `PhysicalDevice`.\n","sig":null,"attributes":[{"value":"/ Returns the performance hints of this `PhysicalDevice`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23544,"byte_end":23603,"line_start":107,"line_end":107,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23704,"byte_end":23710,"line_start":111,"line_end":111,"column_start":8,"column_end":14},"name":"limits","qualname":"::adapter::PhysicalDevice::limits","value":"fn (&self) -> Limits","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Returns the resource limits of this `PhysicalDevice`.\n","sig":null,"attributes":[{"value":"/ Returns the resource limits of this `PhysicalDevice`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23639,"byte_end":23696,"line_start":110,"line_end":110,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23798,"byte_end":23812,"line_start":114,"line_end":114,"column_start":8,"column_end":22},"name":"is_valid_cache","qualname":"::adapter::PhysicalDevice::is_valid_cache","value":"fn (&self, _cache: &[u8]) -> bool","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Check cache compatibility with the `PhysicalDevice`.\n","sig":null,"attributes":[{"value":"/ Check cache compatibility with the `PhysicalDevice`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23734,"byte_end":23790,"line_start":113,"line_end":113,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24046,"byte_end":24051,"line_start":124,"line_end":124,"column_start":5,"column_end":10},"name":"Other","qualname":"::adapter::DeviceType::Other","value":"DeviceType::Other","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":" Other\n","sig":null,"attributes":[{"value":"/ Other","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24032,"byte_end":24041,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":964},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24080,"byte_end":24093,"line_start":126,"line_end":126,"column_start":5,"column_end":18},"name":"IntegratedGpu","qualname":"::adapter::DeviceType::IntegratedGpu","value":"DeviceType::IntegratedGpu","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":" Integrated\n","sig":null,"attributes":[{"value":"/ Integrated","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24061,"byte_end":24075,"line_start":125,"line_end":125,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24120,"byte_end":24131,"line_start":128,"line_end":128,"column_start":5,"column_end":16},"name":"DiscreteGpu","qualname":"::adapter::DeviceType::DiscreteGpu","value":"DeviceType::DiscreteGpu","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":" Discrete\n","sig":null,"attributes":[{"value":"/ Discrete","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24103,"byte_end":24115,"line_start":127,"line_end":127,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24166,"byte_end":24176,"line_start":130,"line_end":130,"column_start":5,"column_end":15},"name":"VirtualGpu","qualname":"::adapter::DeviceType::VirtualGpu","value":"DeviceType::VirtualGpu","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":" Virtual / Hosted\n","sig":null,"attributes":[{"value":"/ Virtual / Hosted","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24141,"byte_end":24161,"line_start":129,"line_end":129,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":973},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24219,"byte_end":24222,"line_start":132,"line_end":132,"column_start":5,"column_end":8},"name":"Cpu","qualname":"::adapter::DeviceType::Cpu","value":"DeviceType::Cpu","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":" Cpu / Software Rendering\n","sig":null,"attributes":[{"value":"/ Cpu / Software Rendering","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24186,"byte_end":24214,"line_start":131,"line_end":131,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":960},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24015,"byte_end":24025,"line_start":122,"line_end":122,"column_start":10,"column_end":20},"name":"DeviceType","qualname":"::adapter::DeviceType","value":"DeviceType::{Other, IntegratedGpu, DiscreteGpu, VirtualGpu, Cpu}","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973}],"decl_id":null,"docs":" Supported physical device types\n","sig":null,"attributes":[{"value":"/ Supported physical device types","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":23868,"byte_end":23903,"line_start":119,"line_end":119,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":986},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24382,"byte_end":24393,"line_start":138,"line_end":138,"column_start":12,"column_end":23},"name":"AdapterInfo","qualname":"::adapter::AdapterInfo","value":"AdapterInfo { name, vendor, device, device_type }","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990}],"decl_id":null,"docs":" Metadata about a backend adapter.\n","sig":null,"attributes":[{"value":"/ Metadata about a backend adapter.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24231,"byte_end":24268,"line_start":135,"line_end":135,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":987},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24425,"byte_end":24429,"line_start":140,"line_end":140,"column_start":9,"column_end":13},"name":"name","qualname":"::adapter::AdapterInfo::name","value":"std::string::String","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Adapter name\n","sig":null,"attributes":[{"value":"/ Adapter name","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24400,"byte_end":24416,"line_start":139,"line_end":139,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24484,"byte_end":24490,"line_start":142,"line_end":142,"column_start":9,"column_end":15},"name":"vendor","qualname":"::adapter::AdapterInfo::vendor","value":"usize","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Vendor PCI id of the adapter\n","sig":null,"attributes":[{"value":"/ Vendor PCI id of the adapter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24443,"byte_end":24475,"line_start":141,"line_end":141,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":989},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24537,"byte_end":24543,"line_start":144,"line_end":144,"column_start":9,"column_end":15},"name":"device","qualname":"::adapter::AdapterInfo::device","value":"usize","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" PCI id of the adapter\n","sig":null,"attributes":[{"value":"/ PCI id of the adapter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24503,"byte_end":24528,"line_start":143,"line_end":143,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24583,"byte_end":24594,"line_start":146,"line_end":146,"column_start":9,"column_end":20},"name":"device_type","qualname":"::adapter::AdapterInfo::device_type","value":"adapter::DeviceType","parent":{"krate":0,"index":986},"children":[],"decl_id":null,"docs":" Type of device\n","sig":null,"attributes":[{"value":"/ Type of device","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24556,"byte_end":24574,"line_start":145,"line_end":145,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":25035,"byte_end":25042,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"Adapter","qualname":"::adapter::Adapter","value":"Adapter { info, physical_device, queue_families }","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006}],"decl_id":null,"docs":" The list of `Adapter` instances is obtained by calling `Instance::enumerate_adapters()`.","sig":null,"attributes":[{"value":"/ The list of `Adapter` instances is obtained by calling `Instance::enumerate_adapters()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24611,"byte_end":24703,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24704,"byte_end":24707,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Given an `Adapter` a `Gpu` can be constructed by calling `PhysicalDevice::open()` on its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24708,"byte_end":24800,"line_start":151,"line_end":151,"column_start":1,"column_end":93}},{"value":"/ `physical_device` field. However, if only a single queue family is needed or if no","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24801,"byte_end":24887,"line_start":152,"line_end":152,"column_start":1,"column_end":87}},{"value":"/ additional device features are required, then the `Adapter::open_with` convenience method","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24888,"byte_end":24981,"line_start":153,"line_end":153,"column_start":1,"column_end":94}},{"value":"/ can be used instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":24982,"byte_end":25006,"line_start":154,"line_end":154,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1004},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":25113,"byte_end":25117,"line_start":158,"line_end":158,"column_start":9,"column_end":13},"name":"info","qualname":"::adapter::Adapter::info","value":"adapter::AdapterInfo","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" General information about this adapter.\n","sig":null,"attributes":[{"value":"/ General information about this adapter.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":25061,"byte_end":25104,"line_start":157,"line_end":157,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1005},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":25172,"byte_end":25187,"line_start":160,"line_end":160,"column_start":9,"column_end":24},"name":"physical_device","qualname":"::adapter::Adapter::physical_device","value":"<B as Backend>::PhysicalDevice","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Actual physical device.\n","sig":null,"attributes":[{"value":"/ Actual physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":25136,"byte_end":25163,"line_start":159,"line_end":159,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":25266,"byte_end":25280,"line_start":162,"line_end":162,"column_start":9,"column_end":23},"name":"queue_families","qualname":"::adapter::Adapter::queue_families","value":"std::vec::Vec<<B as Backend>::QueueFamily>","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":" Queue families supported by this adapter.\n","sig":null,"attributes":[{"value":"/ Queue families supported by this adapter.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":25212,"byte_end":25257,"line_start":161,"line_end":161,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":39},{"krate":0,"index":1010},{"krate":0,"index":1027},{"krate":0,"index":1025},{"krate":0,"index":1023},{"krate":0,"index":1020},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":1029},{"krate":0,"index":1041},{"krate":0,"index":1039},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":1043},{"krate":0,"index":1056},{"krate":0,"index":1054},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":1058},{"krate":0,"index":1080},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1071},{"krate":0,"index":1065},{"krate":0,"index":1063},{"krate":0,"index":1060},{"krate":0,"index":1081},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1117},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1127},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":56},{"krate":0,"index":1184},{"krate":0,"index":1206},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1197},{"krate":0,"index":1191},{"krate":0,"index":1189},{"krate":0,"index":1186},{"krate":0,"index":1207},{"krate":0,"index":1223},{"krate":0,"index":1225},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1249},{"krate":0,"index":1252},{"krate":0,"index":1254},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1325},{"krate":0,"index":1331}],"decl_id":null,"docs":" Memory buffers.","sig":null,"attributes":[{"value":"! Memory buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25306,"byte_end":25325,"line_start":1,"line_end":1,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25326,"byte_end":25329,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25330,"byte_end":25342,"line_start":3,"line_end":3,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25343,"byte_end":25346,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Buffers interpret memory slices as linear contiguous data array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25347,"byte_end":25415,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"! They can be used as shader resources, vertex buffers, index buffers or for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25416,"byte_end":25494,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"! specifying the action commands for indirect execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25495,"byte_end":25553,"line_start":7,"line_end":7,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":39},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25655,"byte_end":25661,"line_start":12,"line_end":12,"column_start":10,"column_end":16},"name":"Offset","qualname":"::buffer::Offset","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" An offset inside a buffer, in bytes.\n","sig":null,"attributes":[{"value":"/ An offset inside a buffer, in bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25605,"byte_end":25645,"line_start":11,"line_end":11,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1010},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25828,"byte_end":25836,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"SubRange","qualname":"::buffer::SubRange","value":"SubRange { offset, size }","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012}],"decl_id":null,"docs":" A subrange of the buffer.\n","sig":null,"attributes":[{"value":"/ A subrange of the buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25670,"byte_end":25699,"line_start":14,"line_end":14,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":1011},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25879,"byte_end":25885,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"name":"offset","qualname":"::buffer::SubRange::offset","value":"u64","parent":{"krate":0,"index":1010},"children":[],"decl_id":null,"docs":" Offset to the subrange.\n","sig":null,"attributes":[{"value":"/ Offset to the subrange.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25843,"byte_end":25870,"line_start":18,"line_end":18,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1012},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25979,"byte_end":25983,"line_start":21,"line_end":21,"column_start":9,"column_end":13},"name":"size","qualname":"::buffer::SubRange::size","value":"std::option::Option<u64>","parent":{"krate":0,"index":1010},"children":[],"decl_id":null,"docs":" Size of the subrange, or None for the remaining size of the buffer.\n","sig":null,"attributes":[{"value":"/ Size of the subrange, or None for the remaining size of the buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":25899,"byte_end":25970,"line_start":20,"line_end":20,"column_start":5,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":41},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26065,"byte_end":26070,"line_start":26,"line_end":26,"column_start":15,"column_end":20},"name":"WHOLE","qualname":"::buffer::SubRange::WHOLE","value":"Self","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Whole buffer subrange.\n","sig":null,"attributes":[{"value":"/ Whole buffer subrange.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26024,"byte_end":26050,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26229,"byte_end":26236,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"size_to","qualname":"<SubRange>::size_to","value":"fn (&self, limit: Offset) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the stored size, if present, or computed size based on the limit.\n","sig":null,"attributes":[{"value":"/ Return the stored size, if present, or computed size based on the limit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26141,"byte_end":26217,"line_start":31,"line_end":31,"column_start":5,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":43},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26356,"byte_end":26361,"line_start":38,"line_end":38,"column_start":10,"column_end":15},"name":"State","qualname":"::buffer::State","value":"Access","parent":null,"children":[],"decl_id":null,"docs":" Buffer state.\n","sig":null,"attributes":[{"value":"/ Buffer state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26329,"byte_end":26346,"line_start":37,"line_end":37,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1030},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26511,"byte_end":26522,"line_start":44,"line_end":44,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::buffer::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26466,"byte_end":26506,"line_start":43,"line_end":43,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":1033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26688,"byte_end":26704,"line_start":49,"line_end":49,"column_start":5,"column_end":21},"name":"UnsupportedUsage","qualname":"::buffer::CreationError::UnsupportedUsage","value":"CreationError::UnsupportedUsage { usage }","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" Requested buffer usage is not supported.","sig":null,"attributes":[{"value":"/ Requested buffer usage is not supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26550,"byte_end":26594,"line_start":46,"line_end":46,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26599,"byte_end":26602,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Older GL version don't support constant buffers or multiple usage flags.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26607,"byte_end":26683,"line_start":48,"line_end":48,"column_start":5,"column_end":81}}]},{"kind":"Enum","id":{"krate":0,"index":1029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26446,"byte_end":26459,"line_start":42,"line_end":42,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::buffer::CreationError","value":"CreationError::{OutOfMemory, UnsupportedUsage}","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1033}],"decl_id":null,"docs":" Error creating a buffer.\n","sig":null,"attributes":[{"value":"/ Error creating a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26373,"byte_end":26401,"line_start":40,"line_end":40,"column_start":1,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1044},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27773,"byte_end":27784,"line_start":87,"line_end":87,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::buffer::ViewCreationError::OutOfMemory","value":"ViewCreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27728,"byte_end":27768,"line_start":86,"line_end":86,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1047},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27857,"byte_end":27874,"line_start":90,"line_end":90,"column_start":5,"column_end":22},"name":"UnsupportedFormat","qualname":"::buffer::ViewCreationError::UnsupportedFormat","value":"ViewCreationError::UnsupportedFormat(Option<format::Format>)","parent":{"krate":0,"index":1043},"children":[],"decl_id":null,"docs":" Buffer view format is not supported.\n","sig":null,"attributes":[{"value":"/ Buffer view format is not supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27812,"byte_end":27852,"line_start":89,"line_end":89,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":1043},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27704,"byte_end":27721,"line_start":85,"line_end":85,"column_start":10,"column_end":27},"name":"ViewCreationError","qualname":"::buffer::ViewCreationError","value":"ViewCreationError::{OutOfMemory, UnsupportedFormat}","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1047}],"decl_id":null,"docs":" Error creating a buffer view.\n","sig":null,"attributes":[{"value":"/ Error creating a buffer view.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27626,"byte_end":27659,"line_start":83,"line_end":83,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29083,"byte_end":29088,"line_start":129,"line_end":129,"column_start":16,"column_end":21},"name":"Usage","qualname":"::buffer::Usage","value":"Usage {  }","parent":null,"children":[{"krate":0,"index":1059}],"decl_id":null,"docs":" Buffer usage flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1103},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29122,"byte_end":29134,"line_start":131,"line_end":131,"column_start":15,"column_end":27},"name":"TRANSFER_SRC","qualname":"::buffer::Usage::TRANSFER_SRC","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29169,"byte_end":29181,"line_start":133,"line_end":133,"column_start":15,"column_end":27},"name":"TRANSFER_DST","qualname":"::buffer::Usage::TRANSFER_DST","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29215,"byte_end":29228,"line_start":135,"line_end":135,"column_start":15,"column_end":28},"name":"UNIFORM_TEXEL","qualname":"::buffer::Usage::UNIFORM_TEXEL","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29262,"byte_end":29275,"line_start":137,"line_end":137,"column_start":15,"column_end":28},"name":"STORAGE_TEXEL","qualname":"::buffer::Usage::STORAGE_TEXEL","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29309,"byte_end":29316,"line_start":139,"line_end":139,"column_start":15,"column_end":22},"name":"UNIFORM","qualname":"::buffer::Usage::UNIFORM","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29351,"byte_end":29358,"line_start":141,"line_end":141,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::buffer::Usage::STORAGE","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29393,"byte_end":29398,"line_start":143,"line_end":143,"column_start":15,"column_end":20},"name":"INDEX","qualname":"::buffer::Usage::INDEX","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29433,"byte_end":29439,"line_start":145,"line_end":145,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::buffer::Usage::VERTEX","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29474,"byte_end":29482,"line_start":147,"line_end":147,"column_start":15,"column_end":23},"name":"INDIRECT","qualname":"::buffer::Usage::INDIRECT","value":"Usage","parent":{"krate":0,"index":1102},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29592,"byte_end":29604,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"can_transfer","qualname":"<Usage>::can_transfer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the buffer can be used in transfer operations.\n","sig":null,"attributes":[{"value":"/ Returns if the buffer can be used in transfer operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29519,"byte_end":29580,"line_start":152,"line_end":152,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1184},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29882,"byte_end":29888,"line_start":163,"line_end":163,"column_start":16,"column_end":22},"name":"Access","qualname":"::buffer::Access","value":"Access {  }","parent":null,"children":[{"krate":0,"index":1185}],"decl_id":null,"docs":" Buffer access flags.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29972,"byte_end":29993,"line_start":165,"line_end":165,"column_start":15,"column_end":36},"name":"INDIRECT_COMMAND_READ","qualname":"::buffer::Access::INDIRECT_COMMAND_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":" Read commands instruction for indirect execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30293,"byte_end":30310,"line_start":170,"line_end":170,"column_start":15,"column_end":32},"name":"INDEX_BUFFER_READ","qualname":"::buffer::Access::INDEX_BUFFER_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":" Read index values for indexed draw commands.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30505,"byte_end":30523,"line_start":173,"line_end":173,"column_start":15,"column_end":33},"name":"VERTEX_BUFFER_READ","qualname":"::buffer::Access::VERTEX_BUFFER_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":" Read vertices from vertex buffer for draw commands in the [`VERTEX_INPUT`](\n ../pso/struct.PipelineStage.html#associatedconstant.VERTEX_INPUT) stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30557,"byte_end":30569,"line_start":175,"line_end":175,"column_start":15,"column_end":27},"name":"UNIFORM_READ","qualname":"::buffer::Access::UNIFORM_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30603,"byte_end":30614,"line_start":177,"line_end":177,"column_start":15,"column_end":26},"name":"SHADER_READ","qualname":"::buffer::Access::SHADER_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30649,"byte_end":30661,"line_start":179,"line_end":179,"column_start":15,"column_end":27},"name":"SHADER_WRITE","qualname":"::buffer::Access::SHADER_WRITE","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30696,"byte_end":30709,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"name":"TRANSFER_READ","qualname":"::buffer::Access::TRANSFER_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1239},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30745,"byte_end":30759,"line_start":183,"line_end":183,"column_start":15,"column_end":29},"name":"TRANSFER_WRITE","qualname":"::buffer::Access::TRANSFER_WRITE","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30796,"byte_end":30805,"line_start":185,"line_end":185,"column_start":15,"column_end":24},"name":"HOST_READ","qualname":"::buffer::Access::HOST_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30842,"byte_end":30852,"line_start":187,"line_end":187,"column_start":15,"column_end":25},"name":"HOST_WRITE","qualname":"::buffer::Access::HOST_WRITE","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30889,"byte_end":30900,"line_start":189,"line_end":189,"column_start":15,"column_end":26},"name":"MEMORY_READ","qualname":"::buffer::Access::MEMORY_READ","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30937,"byte_end":30949,"line_start":191,"line_end":191,"column_start":15,"column_end":27},"name":"MEMORY_WRITE","qualname":"::buffer::Access::MEMORY_WRITE","value":"Access","parent":{"krate":0,"index":1231},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1325},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31195,"byte_end":31210,"line_start":200,"line_end":200,"column_start":12,"column_end":27},"name":"IndexBufferView","qualname":"::buffer::IndexBufferView","value":"IndexBufferView { buffer, range, index_type }","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330}],"decl_id":null,"docs":" Index buffer view for `bind_index_buffer`.","sig":null,"attributes":[{"value":"/ Index buffer view for `bind_index_buffer`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":30971,"byte_end":31017,"line_start":195,"line_end":195,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31018,"byte_end":31021,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ Defines a buffer slice used for acquiring the indices on draw commands.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31022,"byte_end":31097,"line_start":197,"line_end":197,"column_start":1,"column_end":76}},{"value":"/ Indices are used to lookup vertex indices in the vertex buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31098,"byte_end":31166,"line_start":198,"line_end":198,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31265,"byte_end":31271,"line_start":202,"line_end":202,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer::IndexBufferView::buffer","value":"&'a <B as Backend>::Buffer","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" The buffer to bind.\n","sig":null,"attributes":[{"value":"/ The buffer to bind.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31233,"byte_end":31256,"line_start":201,"line_end":201,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1329},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31332,"byte_end":31337,"line_start":204,"line_end":204,"column_start":9,"column_end":14},"name":"range","qualname":"::buffer::IndexBufferView::range","value":"buffer::SubRange","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" The subrange of the buffer.\n","sig":null,"attributes":[{"value":"/ The subrange of the buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31292,"byte_end":31323,"line_start":203,"line_end":203,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1330},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31414,"byte_end":31424,"line_start":206,"line_end":206,"column_start":9,"column_end":19},"name":"index_type","qualname":"::buffer::IndexBufferView::index_type","value":"IndexType","parent":{"krate":0,"index":1325},"children":[],"decl_id":null,"docs":" The type of the table elements (`u16` or `u32`).\n","sig":null,"attributes":[{"value":"/ The type of the table elements (`u16` or `u32`).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":31353,"byte_end":31405,"line_start":205,"line_end":205,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"command","qualname":"::command","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":66},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":87},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":1422},{"krate":0,"index":1445},{"krate":0,"index":1444},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1435},{"krate":0,"index":1429},{"krate":0,"index":1427},{"krate":0,"index":1424},{"krate":0,"index":1447},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1463},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1481},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":1499},{"krate":0,"index":1525},{"krate":0,"index":1536},{"krate":0,"index":1535},{"krate":0,"index":1533},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1538},{"krate":0,"index":1543},{"krate":0,"index":1545},{"krate":0,"index":1553},{"krate":0,"index":98},{"krate":0,"index":102}],"decl_id":null,"docs":" Command buffers.","sig":null,"attributes":[{"value":"! Command buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31440,"byte_end":31460,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31461,"byte_end":31464,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! A command buffer collects a list of commands to be submitted to the device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31465,"byte_end":31544,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"! Each command buffer has specific capabilities for graphics, compute or transfer operations,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31545,"byte_end":31640,"line_start":4,"line_end":4,"column_start":1,"column_end":96}},{"value":"! and can be either a \"primary\" command buffer or a \"secondary\" command buffer.  Operations","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31641,"byte_end":31734,"line_start":5,"line_end":5,"column_start":1,"column_end":94}},{"value":"! always start from a primary command buffer, but a primary command buffer can contain calls","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31735,"byte_end":31829,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"! to secondary command buffers that contain snippets of commands that do specific things, similar","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31830,"byte_end":31929,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"! to function calls.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31930,"byte_end":31952,"line_start":8,"line_end":8,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31953,"byte_end":31956,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! All the possible commands are implemented in the `RawCommandBuffer` trait, and then the `CommandBuffer`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":31957,"byte_end":32064,"line_start":10,"line_end":10,"column_start":1,"column_end":108}},{"value":"! and related types make a generic, strongly-typed wrapper around it that only expose the methods that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":32065,"byte_end":32169,"line_start":11,"line_end":11,"column_start":1,"column_end":105}},{"value":"! are valid for the capabilities it provides.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":32170,"byte_end":32217,"line_start":12,"line_end":12,"column_start":1,"column_end":48}}]},{"kind":"Union","id":{"krate":0,"index":1335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55548,"byte_end":55558,"line_start":7,"line_end":7,"column_start":11,"column_end":21},"name":"ClearColor","qualname":"::command::clear::ClearColor","value":"ClearColor { float32, sint32, uint32 }","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340}],"decl_id":null,"docs":" A clear color union, which can be either f32, i32, or u32.\n","sig":null,"attributes":[{"value":"/ A clear color union, which can be either f32, i32, or u32.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55441,"byte_end":55503,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55504,"byte_end":55514,"line_start":5,"line_end":5,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1336},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55591,"byte_end":55598,"line_start":9,"line_end":9,"column_start":9,"column_end":16},"name":"float32","qualname":"::command::clear::ClearColor::float32","value":"[f32; 4]","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" `f32` variant\n","sig":null,"attributes":[{"value":"/ `f32` variant","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55565,"byte_end":55582,"line_start":8,"line_end":8,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":1338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55640,"byte_end":55646,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"sint32","qualname":"::command::clear::ClearColor::sint32","value":"[i32; 4]","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" `i32` variant\n","sig":null,"attributes":[{"value":"/ `i32` variant","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55614,"byte_end":55631,"line_start":10,"line_end":10,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":1340},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55688,"byte_end":55694,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"uint32","qualname":"::command::clear::ClearColor::uint32","value":"[u32; 4]","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" `u32` variant\n","sig":null,"attributes":[{"value":"/ `u32` variant","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55662,"byte_end":55679,"line_start":12,"line_end":12,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1345},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56012,"byte_end":56029,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"ClearDepthStencil","qualname":"::command::clear::ClearDepthStencil","value":"ClearDepthStencil { depth, stencil }","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347}],"decl_id":null,"docs":" A combination of depth and stencil clear values.\n","sig":null,"attributes":[{"value":"/ A combination of depth and stencil clear values.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55844,"byte_end":55896,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55897,"byte_end":55907,"line_start":23,"line_end":23,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1346},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56060,"byte_end":56065,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"depth","qualname":"::command::clear::ClearDepthStencil::depth","value":"f32","parent":{"krate":0,"index":1345},"children":[],"decl_id":null,"docs":" Depth value\n","sig":null,"attributes":[{"value":"/ Depth value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56036,"byte_end":56051,"line_start":27,"line_end":27,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":1347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56102,"byte_end":56109,"line_start":30,"line_end":30,"column_start":9,"column_end":16},"name":"stencil","qualname":"::command::clear::ClearDepthStencil::stencil","value":"u32","parent":{"krate":0,"index":1345},"children":[],"decl_id":null,"docs":" Stencil value\n","sig":null,"attributes":[{"value":"/ Stencil value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56076,"byte_end":56093,"line_start":29,"line_end":29,"column_start":5,"column_end":22}}]},{"kind":"Union","id":{"krate":0,"index":1353},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56214,"byte_end":56224,"line_start":36,"line_end":36,"column_start":11,"column_end":21},"name":"ClearValue","qualname":"::command::clear::ClearValue","value":"ClearValue { color, depth_stencil }","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356}],"decl_id":null,"docs":" A set of clear values for a single attachment.\n","sig":null,"attributes":[{"value":"/ A set of clear values for a single attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56119,"byte_end":56169,"line_start":33,"line_end":33,"column_start":1,"column_end":51}},{"value":"repr(C)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56170,"byte_end":56180,"line_start":34,"line_end":34,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56255,"byte_end":56260,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"color","qualname":"::command::clear::ClearValue::color","value":"command::clear::ClearColor","parent":{"krate":0,"index":1353},"children":[],"decl_id":null,"docs":" Clear color\n","sig":null,"attributes":[{"value":"/ Clear color","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56231,"byte_end":56246,"line_start":37,"line_end":37,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":1355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56314,"byte_end":56327,"line_start":40,"line_end":40,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::command::clear::ClearValue::depth_stencil","value":"command::clear::ClearDepthStencil","parent":{"krate":0,"index":1353},"children":[],"decl_id":null,"docs":" Clear depth and stencil\n","sig":null,"attributes":[{"value":"/ Clear depth and stencil","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56278,"byte_end":56305,"line_start":39,"line_end":39,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":1362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56811,"byte_end":56816,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Color","qualname":"::command::clear::AttachmentClear::Color","value":"AttachmentClear::Color { index, value }","parent":{"krate":0,"index":1361},"children":[],"decl_id":null,"docs":" Clear color attachment.\n","sig":null,"attributes":[{"value":"/ Clear color attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56779,"byte_end":56806,"line_start":56,"line_end":56,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":1365},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":57010,"byte_end":57022,"line_start":64,"line_end":64,"column_start":5,"column_end":17},"name":"DepthStencil","qualname":"::command::clear::AttachmentClear::DepthStencil","value":"AttachmentClear::DepthStencil { depth, stencil }","parent":{"krate":0,"index":1361},"children":[],"decl_id":null,"docs":" Clear depth-stencil attachment.\n","sig":null,"attributes":[{"value":"/ Clear depth-stencil attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56970,"byte_end":57005,"line_start":63,"line_end":63,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":1361},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56757,"byte_end":56772,"line_start":55,"line_end":55,"column_start":10,"column_end":25},"name":"AttachmentClear","qualname":"::command::clear::AttachmentClear","value":"AttachmentClear::{Color, DepthStencil}","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1365}],"decl_id":null,"docs":" Attachment clear description for the current subpass.\n","sig":null,"attributes":[{"value":"/ Attachment clear description for the current subpass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56660,"byte_end":56717,"line_start":53,"line_end":53,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1373},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57477,"byte_end":57487,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"BufferCopy","qualname":"::command::structs::BufferCopy","value":"BufferCopy { src, dst, size }","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376}],"decl_id":null,"docs":" Specifies a source region and a destination\n region in a buffer for copying.  All values\n are in units of bytes.\n","sig":null,"attributes":[{"value":"/ Specifies a source region and a destination","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57250,"byte_end":57297,"line_start":5,"line_end":5,"column_start":1,"column_end":48}},{"value":"/ region in a buffer for copying.  All values","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57298,"byte_end":57345,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/ are in units of bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57346,"byte_end":57372,"line_start":7,"line_end":7,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1374},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57535,"byte_end":57538,"line_start":12,"line_end":12,"column_start":9,"column_end":12},"name":"src","qualname":"::command::structs::BufferCopy::src","value":"u64","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Buffer region source offset.\n","sig":null,"attributes":[{"value":"/ Buffer region source offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57494,"byte_end":57526,"line_start":11,"line_end":11,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57606,"byte_end":57609,"line_start":14,"line_end":14,"column_start":9,"column_end":12},"name":"dst","qualname":"::command::structs::BufferCopy::dst","value":"u64","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Buffer region destination offset.\n","sig":null,"attributes":[{"value":"/ Buffer region destination offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57560,"byte_end":57597,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1376},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57656,"byte_end":57660,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"name":"size","qualname":"::command::structs::BufferCopy::size","value":"u64","parent":{"krate":0,"index":1373},"children":[],"decl_id":null,"docs":" Region size.\n","sig":null,"attributes":[{"value":"/ Region size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57631,"byte_end":57647,"line_start":15,"line_end":15,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57872,"byte_end":57881,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"ImageCopy","qualname":"::command::structs::ImageCopy","value":"ImageCopy { src_subresource, src_offset, dst_subresource, dst_offset, extent }","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387}],"decl_id":null,"docs":" Bundles together all the parameters needed to copy data from one `Image`\n to another.\n","sig":null,"attributes":[{"value":"/ Bundles together all the parameters needed to copy data from one `Image`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57681,"byte_end":57757,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ to another.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57758,"byte_end":57773,"line_start":20,"line_end":20,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":1383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57936,"byte_end":57951,"line_start":25,"line_end":25,"column_start":9,"column_end":24},"name":"src_subresource","qualname":"::command::structs::ImageCopy::src_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" The image subresource to copy from.\n","sig":null,"attributes":[{"value":"/ The image subresource to copy from.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57888,"byte_end":57927,"line_start":24,"line_end":24,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58014,"byte_end":58024,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"name":"src_offset","qualname":"::command::structs::ImageCopy::src_offset","value":"image::Offset","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" The source offset.\n","sig":null,"attributes":[{"value":"/ The source offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":57983,"byte_end":58005,"line_start":26,"line_end":26,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58091,"byte_end":58106,"line_start":29,"line_end":29,"column_start":9,"column_end":24},"name":"dst_subresource","qualname":"::command::structs::ImageCopy::dst_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" The image subresource to copy to.\n","sig":null,"attributes":[{"value":"/ The image subresource to copy to.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58045,"byte_end":58082,"line_start":28,"line_end":28,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58174,"byte_end":58184,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"name":"dst_offset","qualname":"::command::structs::ImageCopy::dst_offset","value":"image::Offset","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" The destination offset.\n","sig":null,"attributes":[{"value":"/ The destination offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58138,"byte_end":58165,"line_start":30,"line_end":30,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1387},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58251,"byte_end":58257,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"name":"extent","qualname":"::command::structs::ImageCopy::extent","value":"image::Extent","parent":{"krate":0,"index":1382},"children":[],"decl_id":null,"docs":" The extent of the region to copy.\n","sig":null,"attributes":[{"value":"/ The extent of the region to copy.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58205,"byte_end":58242,"line_start":32,"line_end":32,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1392},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58470,"byte_end":58485,"line_start":40,"line_end":40,"column_start":12,"column_end":27},"name":"BufferImageCopy","qualname":"::command::structs::BufferImageCopy","value":"BufferImageCopy { buffer_offset, buffer_width, buffer_height, image_layers, image_offset, image_extent }","parent":null,"children":[{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398}],"decl_id":null,"docs":" Bundles together all the parameters needed to copy a buffer\n to an image or vice-versa.\n","sig":null,"attributes":[{"value":"/ Bundles together all the parameters needed to copy a buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58277,"byte_end":58340,"line_start":36,"line_end":36,"column_start":1,"column_end":64}},{"value":"/ to an image or vice-versa.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58341,"byte_end":58371,"line_start":37,"line_end":37,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1393},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58528,"byte_end":58541,"line_start":42,"line_end":42,"column_start":9,"column_end":22},"name":"buffer_offset","qualname":"::command::structs::BufferImageCopy::buffer_offset","value":"u64","parent":{"krate":0,"index":1392},"children":[],"decl_id":null,"docs":" Buffer offset in bytes.\n","sig":null,"attributes":[{"value":"/ Buffer offset in bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58492,"byte_end":58519,"line_start":41,"line_end":41,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1394},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58610,"byte_end":58622,"line_start":44,"line_end":44,"column_start":9,"column_end":21},"name":"buffer_width","qualname":"::command::structs::BufferImageCopy::buffer_width","value":"u32","parent":{"krate":0,"index":1392},"children":[],"decl_id":null,"docs":" Width of a buffer 'row' in texels.\n","sig":null,"attributes":[{"value":"/ Width of a buffer 'row' in texels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58563,"byte_end":58601,"line_start":43,"line_end":43,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1395},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58689,"byte_end":58702,"line_start":46,"line_end":46,"column_start":9,"column_end":22},"name":"buffer_height","qualname":"::command::structs::BufferImageCopy::buffer_height","value":"u32","parent":{"krate":0,"index":1392},"children":[],"decl_id":null,"docs":" Height of a buffer 'image slice' in texels.\n","sig":null,"attributes":[{"value":"/ Height of a buffer 'image slice' in texels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58633,"byte_end":58680,"line_start":45,"line_end":45,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1396},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58748,"byte_end":58760,"line_start":48,"line_end":48,"column_start":9,"column_end":21},"name":"image_layers","qualname":"::command::structs::BufferImageCopy::image_layers","value":"image::SubresourceLayers","parent":{"krate":0,"index":1392},"children":[],"decl_id":null,"docs":" The image subresource.\n","sig":null,"attributes":[{"value":"/ The image subresource.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58713,"byte_end":58739,"line_start":47,"line_end":47,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1397},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58852,"byte_end":58864,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"name":"image_offset","qualname":"::command::structs::BufferImageCopy::image_offset","value":"image::Offset","parent":{"krate":0,"index":1392},"children":[],"decl_id":null,"docs":" The offset of the portion of the image to copy.\n","sig":null,"attributes":[{"value":"/ The offset of the portion of the image to copy.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58792,"byte_end":58843,"line_start":49,"line_end":49,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1398},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58939,"byte_end":58951,"line_start":52,"line_end":52,"column_start":9,"column_end":21},"name":"image_extent","qualname":"::command::structs::BufferImageCopy::image_extent","value":"image::Extent","parent":{"krate":0,"index":1392},"children":[],"decl_id":null,"docs":" Size of the portion of the image to copy.\n","sig":null,"attributes":[{"value":"/ Size of the portion of the image to copy.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58885,"byte_end":58930,"line_start":51,"line_end":51,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1403},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59191,"byte_end":59203,"line_start":60,"line_end":60,"column_start":12,"column_end":24},"name":"ImageResolve","qualname":"::command::structs::ImageResolve","value":"ImageResolve { src_subresource, src_offset, dst_subresource, dst_offset, extent }","parent":null,"children":[{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408}],"decl_id":null,"docs":" Parameters for an image resolve operation,\n where a multi-sampled image is copied into a single-sampled\n image.\n","sig":null,"attributes":[{"value":"/ Parameters for an image resolve operation,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":58971,"byte_end":59017,"line_start":55,"line_end":55,"column_start":1,"column_end":47}},{"value":"/ where a multi-sampled image is copied into a single-sampled","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59018,"byte_end":59081,"line_start":56,"line_end":56,"column_start":1,"column_end":64}},{"value":"/ image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59082,"byte_end":59092,"line_start":57,"line_end":57,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1404},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59247,"byte_end":59262,"line_start":62,"line_end":62,"column_start":9,"column_end":24},"name":"src_subresource","qualname":"::command::structs::ImageResolve::src_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":1403},"children":[],"decl_id":null,"docs":" Source image and layers.\n","sig":null,"attributes":[{"value":"/ Source image and layers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59210,"byte_end":59238,"line_start":61,"line_end":61,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59327,"byte_end":59337,"line_start":64,"line_end":64,"column_start":9,"column_end":19},"name":"src_offset","qualname":"::command::structs::ImageResolve::src_offset","value":"image::Offset","parent":{"krate":0,"index":1403},"children":[],"decl_id":null,"docs":" Source image offset.\n","sig":null,"attributes":[{"value":"/ Source image offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59294,"byte_end":59318,"line_start":63,"line_end":63,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1406},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59400,"byte_end":59415,"line_start":66,"line_end":66,"column_start":9,"column_end":24},"name":"dst_subresource","qualname":"::command::structs::ImageResolve::dst_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":1403},"children":[],"decl_id":null,"docs":" Destination image and layers.\n","sig":null,"attributes":[{"value":"/ Destination image and layers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59358,"byte_end":59391,"line_start":65,"line_end":65,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1407},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59485,"byte_end":59495,"line_start":68,"line_end":68,"column_start":9,"column_end":19},"name":"dst_offset","qualname":"::command::structs::ImageResolve::dst_offset","value":"image::Offset","parent":{"krate":0,"index":1403},"children":[],"decl_id":null,"docs":" Destination image offset.\n","sig":null,"attributes":[{"value":"/ Destination image offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59447,"byte_end":59476,"line_start":67,"line_end":67,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1408},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59542,"byte_end":59548,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"name":"extent","qualname":"::command::structs::ImageResolve::extent","value":"image::Extent","parent":{"krate":0,"index":1403},"children":[],"decl_id":null,"docs":" Image extent.\n","sig":null,"attributes":[{"value":"/ Image extent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59516,"byte_end":59533,"line_start":69,"line_end":69,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59804,"byte_end":59813,"line_start":77,"line_end":77,"column_start":12,"column_end":21},"name":"ImageBlit","qualname":"::command::structs::ImageBlit","value":"ImageBlit { src_subresource, src_bounds, dst_subresource, dst_bounds }","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417}],"decl_id":null,"docs":" Parameters for an image blit operation, where a portion of one image\n is copied into another, possibly with scaling and filtering.\n","sig":null,"attributes":[{"value":"/ Parameters for an image blit operation, where a portion of one image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59568,"byte_end":59640,"line_start":73,"line_end":73,"column_start":1,"column_end":73}},{"value":"/ is copied into another, possibly with scaling and filtering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59641,"byte_end":59705,"line_start":74,"line_end":74,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":1414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59857,"byte_end":59872,"line_start":79,"line_end":79,"column_start":9,"column_end":24},"name":"src_subresource","qualname":"::command::structs::ImageBlit::src_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Source image and layers.\n","sig":null,"attributes":[{"value":"/ Source image and layers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59820,"byte_end":59848,"line_start":78,"line_end":78,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59937,"byte_end":59947,"line_start":81,"line_end":81,"column_start":9,"column_end":19},"name":"src_bounds","qualname":"::command::structs::ImageBlit::src_bounds","value":"std::ops::Range<image::Offset>","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Source image bounds.\n","sig":null,"attributes":[{"value":"/ Source image bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59904,"byte_end":59928,"line_start":80,"line_end":80,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1416},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":60017,"byte_end":60032,"line_start":83,"line_end":83,"column_start":9,"column_end":24},"name":"dst_subresource","qualname":"::command::structs::ImageBlit::dst_subresource","value":"image::SubresourceLayers","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Destination image and layers.\n","sig":null,"attributes":[{"value":"/ Destination image and layers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":59975,"byte_end":60008,"line_start":82,"line_end":82,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1417},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":60102,"byte_end":60112,"line_start":85,"line_end":85,"column_start":9,"column_end":19},"name":"dst_bounds","qualname":"::command::structs::ImageBlit::dst_bounds","value":"std::ops::Range<image::Offset>","parent":{"krate":0,"index":1413},"children":[],"decl_id":null,"docs":" Destination image bounds.\n","sig":null,"attributes":[{"value":"/ Destination image bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/structs.rs","byte_start":60064,"byte_end":60093,"line_start":84,"line_end":84,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":97},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":32743,"byte_end":32762,"line_start":41,"line_end":41,"column_start":10,"column_end":29},"name":"DescriptorSetOffset","qualname":"::command::DescriptorSetOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset for dynamic descriptors.\n","sig":null,"attributes":[{"value":"/ Offset for dynamic descriptors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":32698,"byte_end":32733,"line_start":40,"line_end":40,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":32879,"byte_end":32897,"line_start":46,"line_end":46,"column_start":16,"column_end":34},"name":"CommandBufferFlags","qualname":"::command::CommandBufferFlags","value":"CommandBufferFlags {  }","parent":null,"children":[{"krate":0,"index":1423}],"decl_id":null,"docs":" Option flags for various command buffer settings.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33043,"byte_end":33048,"line_start":49,"line_end":49,"column_start":15,"column_end":20},"name":"EMPTY","qualname":"::command::CommandBufferFlags::EMPTY","value":"CommandBufferFlags","parent":{"krate":0,"index":1463},"children":[],"decl_id":null,"docs":" No flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33216,"byte_end":33231,"line_start":53,"line_end":53,"column_start":15,"column_end":30},"name":"ONE_TIME_SUBMIT","qualname":"::command::CommandBufferFlags::ONE_TIME_SUBMIT","value":"CommandBufferFlags","parent":{"krate":0,"index":1463},"children":[],"decl_id":null,"docs":" Says that the command buffer will be recorded, submitted only once, and then reset and re-filled\n for another submission.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1466},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33421,"byte_end":33441,"line_start":57,"line_end":57,"column_start":15,"column_end":35},"name":"RENDER_PASS_CONTINUE","qualname":"::command::CommandBufferFlags::RENDER_PASS_CONTINUE","value":"CommandBufferFlags","parent":{"krate":0,"index":1463},"children":[],"decl_id":null,"docs":" If set on a secondary command buffer, it says the command buffer takes place entirely inside\n a render pass. Ignored on primary command buffer.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33622,"byte_end":33638,"line_start":61,"line_end":61,"column_start":15,"column_end":31},"name":"SIMULTANEOUS_USE","qualname":"::command::CommandBufferFlags::SIMULTANEOUS_USE","value":"CommandBufferFlags","parent":{"krate":0,"index":1463},"children":[],"decl_id":null,"docs":" Says that a command buffer can be recorded into multiple primary command buffers,\n and submitted to a queue while it is still pending.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1526},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33916,"byte_end":33923,"line_start":71,"line_end":71,"column_start":5,"column_end":12},"name":"Primary","qualname":"::command::Level::Primary","value":"Level::Primary","parent":{"krate":0,"index":1525},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33929,"byte_end":33938,"line_start":72,"line_end":72,"column_start":5,"column_end":14},"name":"Secondary","qualname":"::command::Level::Secondary","value":"Level::Secondary","parent":{"krate":0,"index":1525},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1525},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33904,"byte_end":33909,"line_start":70,"line_end":70,"column_start":10,"column_end":15},"name":"Level","qualname":"::command::Level","value":"Level::{Primary, Secondary}","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1528}],"decl_id":null,"docs":" An enum that indicates at runtime whether a command buffer\n is primary or secondary, similar to what `command::Primary`\n and `command::Secondary` do at compile-time.\n","sig":null,"attributes":[{"value":"/ An enum that indicates at runtime whether a command buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33655,"byte_end":33717,"line_start":65,"line_end":65,"column_start":1,"column_end":63}},{"value":"/ is primary or secondary, similar to what `command::Primary`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33718,"byte_end":33781,"line_start":66,"line_end":66,"column_start":1,"column_end":64}},{"value":"/ and `command::Secondary` do at compile-time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33782,"byte_end":33830,"line_start":67,"line_end":67,"column_start":1,"column_end":49}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33831,"byte_end":33853,"line_start":68,"line_end":68,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1539},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34179,"byte_end":34185,"line_start":80,"line_end":80,"column_start":5,"column_end":11},"name":"Inline","qualname":"::command::SubpassContents::Inline","value":"SubpassContents::Inline","parent":{"krate":0,"index":1538},"children":[],"decl_id":null,"docs":" Contents of the subpass will be inline in the command buffer,\n NOT in secondary command buffers.\n","sig":null,"attributes":[{"value":"/ Contents of the subpass will be inline in the command buffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34067,"byte_end":34132,"line_start":78,"line_end":78,"column_start":5,"column_end":70}},{"value":"/ NOT in secondary command buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34137,"byte_end":34174,"line_start":79,"line_end":79,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1541},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34398,"byte_end":34414,"line_start":84,"line_end":84,"column_start":5,"column_end":21},"name":"SecondaryBuffers","qualname":"::command::SubpassContents::SecondaryBuffers","value":"SubpassContents::SecondaryBuffers","parent":{"krate":0,"index":1538},"children":[],"decl_id":null,"docs":" Contents of the subpass will be in secondary command buffers, and\n the primary command buffer will only contain `execute_command()` calls\n until the subpass or render pass is complete.\n","sig":null,"attributes":[{"value":"/ Contents of the subpass will be in secondary command buffers, and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34191,"byte_end":34260,"line_start":81,"line_end":81,"column_start":5,"column_end":74}},{"value":"/ the primary command buffer will only contain `execute_command()` calls","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34265,"byte_end":34339,"line_start":82,"line_end":82,"column_start":5,"column_end":79}},{"value":"/ until the subpass or render pass is complete.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34344,"byte_end":34393,"line_start":83,"line_end":83,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":1538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34045,"byte_end":34060,"line_start":77,"line_end":77,"column_start":10,"column_end":25},"name":"SubpassContents","qualname":"::command::SubpassContents","value":"SubpassContents::{Inline, SecondaryBuffers}","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1541}],"decl_id":null,"docs":" Specifies how commands for the following renderpasses will be recorded.\n","sig":null,"attributes":[{"value":"/ Specifies how commands for the following renderpasses will be recorded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":33943,"byte_end":34018,"line_start":75,"line_end":75,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1545},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34470,"byte_end":34498,"line_start":89,"line_end":89,"column_start":12,"column_end":40},"name":"CommandBufferInheritanceInfo","qualname":"::command::CommandBufferInheritanceInfo","value":"CommandBufferInheritanceInfo { subpass, framebuffer, occlusion_query_enable, occlusion_query_flags, pipeline_statistics }","parent":null,"children":[{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34419,"byte_end":34441,"line_start":87,"line_end":87,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1548},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34525,"byte_end":34532,"line_start":90,"line_end":90,"column_start":9,"column_end":16},"name":"subpass","qualname":"::command::CommandBufferInheritanceInfo::subpass","value":"std::option::Option<pass::Subpass<'a, B>>","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1549},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34572,"byte_end":34583,"line_start":91,"line_end":91,"column_start":9,"column_end":20},"name":"framebuffer","qualname":"::command::CommandBufferInheritanceInfo::framebuffer","value":"std::option::Option<&'a <B as Backend>::Framebuffer>","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1550},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34621,"byte_end":34643,"line_start":92,"line_end":92,"column_start":9,"column_end":31},"name":"occlusion_query_enable","qualname":"::command::CommandBufferInheritanceInfo::occlusion_query_enable","value":"bool","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34659,"byte_end":34680,"line_start":93,"line_end":93,"column_start":9,"column_end":30},"name":"occlusion_query_flags","qualname":"::command::CommandBufferInheritanceInfo::occlusion_query_flags","value":"query::ControlFlags","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1552},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34711,"byte_end":34730,"line_start":94,"line_end":94,"column_start":9,"column_end":28},"name":"pipeline_statistics","qualname":"::command::CommandBufferInheritanceInfo::pipeline_statistics","value":"query::PipelineStatistic","parent":{"krate":0,"index":1545},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35266,"byte_end":35279,"line_start":111,"line_end":111,"column_start":11,"column_end":24},"name":"CommandBuffer","qualname":"::command::CommandBuffer","value":"CommandBuffer<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"decl_id":null,"docs":" A trait that describes all the operations that must be\n provided by a `Backend`'s command buffer.\n","sig":null,"attributes":[{"value":"/ A trait that describes all the operations that must be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35151,"byte_end":35209,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/ provided by a `Backend`'s command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35210,"byte_end":35255,"line_start":110,"line_end":110,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35395,"byte_end":35400,"line_start":113,"line_end":113,"column_start":15,"column_end":20},"name":"begin","qualname":"::command::CommandBuffer::begin","value":"fn (&mut self, flags: CommandBufferFlags, inheritance_info: CommandBufferInheritanceInfo<B>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Begins recording commands to a command buffer.\n","sig":null,"attributes":[{"value":"/ Begins recording commands to a command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35330,"byte_end":35380,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35634,"byte_end":35647,"line_start":121,"line_end":121,"column_start":15,"column_end":28},"name":"begin_primary","qualname":"::command::CommandBuffer::begin_primary","value":"fn (&mut self, flags: CommandBufferFlags) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Begins recording a primary command buffer\n (that has no inheritance information).\n","sig":null,"attributes":[{"value":"/ Begins recording a primary command buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35527,"byte_end":35572,"line_start":119,"line_end":119,"column_start":5,"column_end":50}},{"value":"/ (that has no inheritance information).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35577,"byte_end":35619,"line_start":120,"line_end":120,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35832,"byte_end":35838,"line_start":126,"line_end":126,"column_start":15,"column_end":21},"name":"finish","qualname":"::command::CommandBuffer::finish","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Finish recording commands to a command buffer.\n","sig":null,"attributes":[{"value":"/ Finish recording commands to a command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35767,"byte_end":35817,"line_start":125,"line_end":125,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35989,"byte_end":35994,"line_start":130,"line_end":130,"column_start":15,"column_end":20},"name":"reset","qualname":"::command::CommandBuffer::reset","value":"fn (&mut self, release_resources: bool) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Empties the command buffer, optionally releasing all\n resources from the commands that have been submitted.\n","sig":null,"attributes":[{"value":"/ Empties the command buffer, optionally releasing all","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35856,"byte_end":35912,"line_start":128,"line_end":128,"column_start":5,"column_end":61}},{"value":"/ resources from the commands that have been submitted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35917,"byte_end":35974,"line_start":129,"line_end":129,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36298,"byte_end":36314,"line_start":136,"line_end":136,"column_start":15,"column_end":31},"name":"pipeline_barrier","qualname":"::command::CommandBuffer::pipeline_barrier","value":"fn <'a, T> (&mut self, stages: Range<pso::PipelineStage>, dependencies: Dependencies, barriers: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Inserts a synchronization dependency between pipeline stages\n in the command buffer.\n","sig":null,"attributes":[{"value":"/ Inserts a synchronization dependency between pipeline stages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36188,"byte_end":36252,"line_start":134,"line_end":134,"column_start":5,"column_end":69}},{"value":"/ in the command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36257,"byte_end":36283,"line_start":135,"line_end":135,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36585,"byte_end":36596,"line_start":146,"line_end":146,"column_start":15,"column_end":26},"name":"fill_buffer","qualname":"::command::CommandBuffer::fill_buffer","value":"fn (&mut self, buffer: &B::Buffer, range: buffer::SubRange, data: u32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Fill a buffer with the given `u32` value.\n","sig":null,"attributes":[{"value":"/ Fill a buffer with the given `u32` value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36525,"byte_end":36570,"line_start":145,"line_end":145,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36734,"byte_end":36747,"line_start":149,"line_end":149,"column_start":15,"column_end":28},"name":"update_buffer","qualname":"::command::CommandBuffer::update_buffer","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, data: &[u8]) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Copy data from the given slice into a buffer.\n","sig":null,"attributes":[{"value":"/ Copy data from the given slice into a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36670,"byte_end":36719,"line_start":148,"line_end":148,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36890,"byte_end":36901,"line_start":152,"line_end":152,"column_start":15,"column_end":26},"name":"clear_image","qualname":"::command::CommandBuffer::clear_image","value":"fn <T> (&mut self, image: &B::Image, layout: Layout, value: ClearValue, subresource_ranges: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Clears an image to the given color/depth/stencil.\n","sig":null,"attributes":[{"value":"/ Clears an image to the given color/depth/stencil.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":36822,"byte_end":36875,"line_start":151,"line_end":151,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37255,"byte_end":37272,"line_start":164,"line_end":164,"column_start":15,"column_end":32},"name":"clear_attachments","qualname":"::command::CommandBuffer::clear_attachments","value":"fn <T, U> (&mut self, clears: T, rects: U) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Takes an iterator of attachments and an iterator of rect's,\n and clears the given rect's for *each* attachment.\n","sig":null,"attributes":[{"value":"/ Takes an iterator of attachments and an iterator of rect's,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37118,"byte_end":37181,"line_start":162,"line_end":162,"column_start":5,"column_end":68}},{"value":"/ and clears the given rect's for *each* attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37186,"byte_end":37240,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37620,"byte_end":37633,"line_start":173,"line_end":173,"column_start":15,"column_end":28},"name":"resolve_image","qualname":"::command::CommandBuffer::resolve_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Image, dst_layout: Layout, regions: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" \"Resolves\" a multisampled image, converting it into a non-multisampled\n image. Takes an iterator of regions to apply the resolution to.\n","sig":null,"attributes":[{"value":"/ \"Resolves\" a multisampled image, converting it into a non-multisampled","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37459,"byte_end":37533,"line_start":171,"line_end":171,"column_start":5,"column_end":79}},{"value":"/ image. Takes an iterator of regions to apply the resolution to.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37538,"byte_end":37605,"line_start":172,"line_end":172,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38004,"byte_end":38014,"line_start":186,"line_end":186,"column_start":15,"column_end":25},"name":"blit_image","qualname":"::command::CommandBuffer::blit_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Image, dst_layout: Layout, filter: Filter, regions: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Copies regions from the source to destination image,\n applying scaling, filtering and potentially format conversion.\n","sig":null,"attributes":[{"value":"/ Copies regions from the source to destination image,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37862,"byte_end":37918,"line_start":184,"line_end":184,"column_start":5,"column_end":61}},{"value":"/ applying scaling, filtering and potentially format conversion.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":37923,"byte_end":37989,"line_start":185,"line_end":185,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38382,"byte_end":38399,"line_start":200,"line_end":200,"column_start":15,"column_end":32},"name":"bind_index_buffer","qualname":"::command::CommandBuffer::bind_index_buffer","value":"fn (&mut self, view: buffer::IndexBufferView<B>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Bind the index buffer view, making it the \"current\" one that draw commands\n will operate on.\n","sig":null,"attributes":[{"value":"/ Bind the index buffer view, making it the \"current\" one that draw commands","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38264,"byte_end":38342,"line_start":198,"line_end":198,"column_start":5,"column_end":83}},{"value":"/ will operate on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38347,"byte_end":38367,"line_start":199,"line_end":199,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39353,"byte_end":39372,"line_start":217,"line_end":217,"column_start":15,"column_end":34},"name":"bind_vertex_buffers","qualname":"::command::CommandBuffer::bind_vertex_buffers","value":"fn <I, T> (&mut self, first_binding: pso::BufferIndex, buffers: I) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Bind the vertex buffer set, making it the \"current\" one that draw commands\n will operate on.","sig":null,"attributes":[{"value":"/ Bind the vertex buffer set, making it the \"current\" one that draw commands","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38451,"byte_end":38529,"line_start":202,"line_end":202,"column_start":5,"column_end":83}},{"value":"/ will operate on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38534,"byte_end":38554,"line_start":203,"line_end":203,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38559,"byte_end":38562,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Each buffer passed corresponds to the vertex input binding with the same index,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38567,"byte_end":38650,"line_start":205,"line_end":205,"column_start":5,"column_end":88}},{"value":"/ starting from an offset index `first_binding`. For example an iterator with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38655,"byte_end":38734,"line_start":206,"line_end":206,"column_start":5,"column_end":84}},{"value":"/ two items and `first_binding` of 1 would fill vertex buffer binding numbers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38739,"byte_end":38818,"line_start":207,"line_end":207,"column_start":5,"column_end":84}},{"value":"/ 1 and 2.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38823,"byte_end":38835,"line_start":208,"line_end":208,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38840,"byte_end":38843,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This binding number refers only to binding points for vertex buffers and is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38848,"byte_end":38927,"line_start":210,"line_end":210,"column_start":5,"column_end":84}},{"value":"/ completely separate from the binding numbers of `Descriptor`s in `DescriptorSet`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":38932,"byte_end":39018,"line_start":211,"line_end":211,"column_start":5,"column_end":91}},{"value":"/ It needs to match with the `VertexBufferDesc` and `AttributeDesc`s to which the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39023,"byte_end":39106,"line_start":212,"line_end":212,"column_start":5,"column_end":88}},{"value":"/ data from each bound vertex buffer should flow.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39111,"byte_end":39162,"line_start":213,"line_end":213,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39167,"byte_end":39170,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ The `buffers` iterator should yield the `Buffer` to bind, as well as a subrange,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39175,"byte_end":39259,"line_start":215,"line_end":215,"column_start":5,"column_end":89}},{"value":"/ in bytes, into that buffer where the vertex data that should be bound.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39264,"byte_end":39338,"line_start":216,"line_end":216,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40345,"byte_end":40358,"line_start":239,"line_end":239,"column_start":15,"column_end":28},"name":"set_viewports","qualname":"::command::CommandBuffer::set_viewports","value":"fn <T> (&mut self, first_viewport: u32, viewports: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Set the viewport parameters for the rasterizer.","sig":null,"attributes":[{"value":"/ Set the viewport parameters for the rasterizer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39535,"byte_end":39586,"line_start":222,"line_end":222,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39591,"byte_end":39594,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ Each viewport passed corresponds to the viewport with the same index,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39599,"byte_end":39672,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ starting from an offset index `first_viewport`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39677,"byte_end":39728,"line_start":225,"line_end":225,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39733,"byte_end":39736,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39741,"byte_end":39753,"line_start":227,"line_end":227,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39758,"byte_end":39761,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ This function does not return an error. Invalid usage of this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39766,"byte_end":39840,"line_start":229,"line_end":229,"column_start":5,"column_end":79}},{"value":"/ will result in undefined behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39845,"byte_end":39883,"line_start":230,"line_end":230,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39888,"byte_end":39891,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ - Command buffer must be in recording state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39896,"byte_end":39944,"line_start":232,"line_end":232,"column_start":5,"column_end":53}},{"value":"/ - Number of viewports must be between 1 and `max_viewports - first_viewport`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":39949,"byte_end":40030,"line_start":233,"line_end":233,"column_start":5,"column_end":86}},{"value":"/ - The first viewport must be less than `max_viewports`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40035,"byte_end":40094,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ - Only queues with graphics capability support this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40099,"byte_end":40164,"line_start":235,"line_end":235,"column_start":5,"column_end":70}},{"value":"/ - The bound pipeline must not have baked viewport state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40169,"byte_end":40229,"line_start":236,"line_end":236,"column_start":5,"column_end":65}},{"value":"/ - All viewports used by the pipeline must be specified before the first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40234,"byte_end":40309,"line_start":237,"line_end":237,"column_start":5,"column_end":80}},{"value":"/   draw call.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40314,"byte_end":40330,"line_start":238,"line_end":238,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41283,"byte_end":41295,"line_start":261,"line_end":261,"column_start":15,"column_end":27},"name":"set_scissors","qualname":"::command::CommandBuffer::set_scissors","value":"fn <T> (&mut self, first_scissor: u32, rects: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Set the scissor rectangles for the rasterizer.","sig":null,"attributes":[{"value":"/ Set the scissor rectangles for the rasterizer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40488,"byte_end":40538,"line_start":244,"line_end":244,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40543,"byte_end":40546,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Each scissor corresponds to the viewport with the same index, starting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40551,"byte_end":40625,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ from an offset index `first_scissor`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40630,"byte_end":40671,"line_start":247,"line_end":247,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40676,"byte_end":40679,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40684,"byte_end":40696,"line_start":249,"line_end":249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40701,"byte_end":40704,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This function does not return an error. Invalid usage of this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40709,"byte_end":40783,"line_start":251,"line_end":251,"column_start":5,"column_end":79}},{"value":"/ will result in undefined behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40788,"byte_end":40826,"line_start":252,"line_end":252,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40831,"byte_end":40834,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ - Command buffer must be in recording state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40839,"byte_end":40887,"line_start":254,"line_end":254,"column_start":5,"column_end":53}},{"value":"/ - Number of scissors must be between 1 and `max_viewports - first_scissor`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40892,"byte_end":40971,"line_start":255,"line_end":255,"column_start":5,"column_end":84}},{"value":"/ - The first scissor must be less than `max_viewports`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":40976,"byte_end":41034,"line_start":256,"line_end":256,"column_start":5,"column_end":63}},{"value":"/ - Only queues with graphics capability support this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41039,"byte_end":41104,"line_start":257,"line_end":257,"column_start":5,"column_end":70}},{"value":"/ - The bound pipeline must not have baked scissor state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41109,"byte_end":41168,"line_start":258,"line_end":258,"column_start":5,"column_end":64}},{"value":"/ - All scissors used by the pipeline must be specified before the first draw","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41173,"byte_end":41252,"line_start":259,"line_end":259,"column_start":5,"column_end":84}},{"value":"/   call.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41257,"byte_end":41268,"line_start":260,"line_end":260,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41629,"byte_end":41650,"line_start":269,"line_end":269,"column_start":15,"column_end":36},"name":"set_stencil_reference","qualname":"::command::CommandBuffer::set_stencil_reference","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Sets the stencil reference value for comparison operations and store operations.\n Will be used on the LHS of stencil compare ops and as store value when the\n store op is Reference.\n","sig":null,"attributes":[{"value":"/ Sets the stencil reference value for comparison operations and store operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41416,"byte_end":41500,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/ Will be used on the LHS of stencil compare ops and as store value when the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41505,"byte_end":41583,"line_start":267,"line_end":267,"column_start":5,"column_end":83}},{"value":"/ store op is Reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41588,"byte_end":41614,"line_start":268,"line_end":268,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41758,"byte_end":41779,"line_start":272,"line_end":272,"column_start":15,"column_end":36},"name":"set_stencil_read_mask","qualname":"::command::CommandBuffer::set_stencil_read_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Sets the stencil read mask.\n","sig":null,"attributes":[{"value":"/ Sets the stencil read mask.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41712,"byte_end":41743,"line_start":271,"line_end":271,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41888,"byte_end":41910,"line_start":275,"line_end":275,"column_start":15,"column_end":37},"name":"set_stencil_write_mask","qualname":"::command::CommandBuffer::set_stencil_write_mask","value":"fn (&mut self, faces: pso::Face, value: pso::StencilValue) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Sets the stencil write mask.\n","sig":null,"attributes":[{"value":"/ Sets the stencil write mask.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41841,"byte_end":41873,"line_start":274,"line_end":274,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42033,"byte_end":42052,"line_start":278,"line_end":278,"column_start":15,"column_end":34},"name":"set_blend_constants","qualname":"::command::CommandBuffer::set_blend_constants","value":"fn (&mut self, color: pso::ColorValue) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Set the blend constant values dynamically.\n","sig":null,"attributes":[{"value":"/ Set the blend constant values dynamically.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":41972,"byte_end":42018,"line_start":277,"line_end":277,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42158,"byte_end":42174,"line_start":281,"line_end":281,"column_start":15,"column_end":31},"name":"set_depth_bounds","qualname":"::command::CommandBuffer::set_depth_bounds","value":"fn (&mut self, bounds: Range<f32>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Set the depth bounds test values dynamically.\n","sig":null,"attributes":[{"value":"/ Set the depth bounds test values dynamically.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42094,"byte_end":42143,"line_start":280,"line_end":280,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42335,"byte_end":42349,"line_start":286,"line_end":286,"column_start":15,"column_end":29},"name":"set_line_width","qualname":"::command::CommandBuffer::set_line_width","value":"fn (&mut self, width: f32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Set the line width dynamically.","sig":null,"attributes":[{"value":"/ Set the line width dynamically.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42212,"byte_end":42247,"line_start":283,"line_end":283,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42252,"byte_end":42255,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Only valid to call if `Features::LINE_WIDTH` is enabled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42260,"byte_end":42320,"line_start":285,"line_end":285,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42429,"byte_end":42443,"line_start":289,"line_end":289,"column_start":15,"column_end":29},"name":"set_depth_bias","qualname":"::command::CommandBuffer::set_depth_bias","value":"fn (&mut self, depth_bias: pso::DepthBias) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Set the depth bias dynamically.\n","sig":null,"attributes":[{"value":"/ Set the depth bias dynamically.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42379,"byte_end":42414,"line_start":288,"line_end":288,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43006,"byte_end":43023,"line_start":299,"line_end":299,"column_start":15,"column_end":32},"name":"begin_render_pass","qualname":"::command::CommandBuffer::begin_render_pass","value":"fn <T> (&mut self, render_pass: &B::RenderPass, framebuffer: &B::Framebuffer, render_area: pso::Rect, clear_values: T, first_subpass: SubpassContents) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Begins recording commands for a render pass on the given framebuffer.\n `render_area` is the section of the framebuffer to render,\n `clear_values` is an iterator of `ClearValueRaw`'s to use to use for\n `clear_*` commands, one for each attachment of the render pass\n that has a clear operation.\n `first_subpass` specifies, for the first subpass, whether the\n rendering commands are provided inline or whether the render\n pass is composed of subpasses.\n","sig":null,"attributes":[{"value":"/ Begins recording commands for a render pass on the given framebuffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42489,"byte_end":42562,"line_start":291,"line_end":291,"column_start":5,"column_end":78}},{"value":"/ `render_area` is the section of the framebuffer to render,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42567,"byte_end":42629,"line_start":292,"line_end":292,"column_start":5,"column_end":67}},{"value":"/ `clear_values` is an iterator of `ClearValueRaw`'s to use to use for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42634,"byte_end":42706,"line_start":293,"line_end":293,"column_start":5,"column_end":77}},{"value":"/ `clear_*` commands, one for each attachment of the render pass","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42711,"byte_end":42777,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/ that has a clear operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42782,"byte_end":42813,"line_start":295,"line_end":295,"column_start":5,"column_end":36}},{"value":"/ `first_subpass` specifies, for the first subpass, whether the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42818,"byte_end":42883,"line_start":296,"line_end":296,"column_start":5,"column_end":70}},{"value":"/ rendering commands are provided inline or whether the render","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42888,"byte_end":42952,"line_start":297,"line_end":297,"column_start":5,"column_end":69}},{"value":"/ pass is composed of subpasses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":42957,"byte_end":42991,"line_start":298,"line_end":298,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43370,"byte_end":43382,"line_start":311,"line_end":311,"column_start":15,"column_end":27},"name":"next_subpass","qualname":"::command::CommandBuffer::next_subpass","value":"fn (&mut self, contents: SubpassContents) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Steps to the next subpass in the current render pass.\n","sig":null,"attributes":[{"value":"/ Steps to the next subpass in the current render pass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43298,"byte_end":43355,"line_start":310,"line_end":310,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43504,"byte_end":43519,"line_start":314,"line_end":314,"column_start":15,"column_end":30},"name":"end_render_pass","qualname":"::command::CommandBuffer::end_render_pass","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Finishes recording commands for the current a render pass.\n","sig":null,"attributes":[{"value":"/ Finishes recording commands for the current a render pass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43427,"byte_end":43489,"line_start":313,"line_end":313,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43869,"byte_end":43891,"line_start":325,"line_end":325,"column_start":15,"column_end":37},"name":"bind_graphics_pipeline","qualname":"::command::CommandBuffer::bind_graphics_pipeline","value":"fn (&mut self, pipeline: &B::GraphicsPipeline) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Bind a graphics pipeline.","sig":null,"attributes":[{"value":"/ Bind a graphics pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43537,"byte_end":43566,"line_start":316,"line_end":316,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43571,"byte_end":43574,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43579,"byte_end":43591,"line_start":318,"line_end":318,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43596,"byte_end":43599,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ This function does not return an error. Invalid usage of this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43604,"byte_end":43678,"line_start":320,"line_end":320,"column_start":5,"column_end":79}},{"value":"/ will result in an error on `finish`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43683,"byte_end":43723,"line_start":321,"line_end":321,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43728,"byte_end":43731,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ - Command buffer must be in recording state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43736,"byte_end":43784,"line_start":323,"line_end":323,"column_start":5,"column_end":53}},{"value":"/ - Only queues with graphics capability support this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43789,"byte_end":43854,"line_start":324,"line_end":324,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44141,"byte_end":44170,"line_start":329,"line_end":329,"column_start":15,"column_end":44},"name":"bind_graphics_descriptor_sets","qualname":"::command::CommandBuffer::bind_graphics_descriptor_sets","value":"fn <I, J> (&mut self, layout: &B::PipelineLayout, first_set: usize, sets: I, offsets: J) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Takes an iterator of graphics `DescriptorSet`'s, and binds them to the command buffer.\n `first_set` is the index that the first descriptor is mapped to in the command buffer.\n","sig":null,"attributes":[{"value":"/ Takes an iterator of graphics `DescriptorSet`'s, and binds them to the command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":43941,"byte_end":44031,"line_start":327,"line_end":327,"column_start":5,"column_end":95}},{"value":"/ `first_set` is the index that the first descriptor is mapped to in the command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44036,"byte_end":44126,"line_start":328,"line_end":328,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44782,"byte_end":44803,"line_start":350,"line_end":350,"column_start":15,"column_end":36},"name":"bind_compute_pipeline","qualname":"::command::CommandBuffer::bind_compute_pipeline","value":"fn (&mut self, pipeline: &B::ComputePipeline) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Bind a compute pipeline.","sig":null,"attributes":[{"value":"/ Bind a compute pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44452,"byte_end":44480,"line_start":341,"line_end":341,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44485,"byte_end":44488,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44493,"byte_end":44505,"line_start":343,"line_end":343,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44510,"byte_end":44513,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ This function does not return an error. Invalid usage of this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44518,"byte_end":44592,"line_start":345,"line_end":345,"column_start":5,"column_end":79}},{"value":"/ will result in an error on `finish`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44597,"byte_end":44637,"line_start":346,"line_end":346,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44642,"byte_end":44645,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ - Command buffer must be in recording state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44650,"byte_end":44698,"line_start":348,"line_end":348,"column_start":5,"column_end":53}},{"value":"/ - Only queues with compute capability support this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44703,"byte_end":44767,"line_start":349,"line_end":349,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45051,"byte_end":45079,"line_start":354,"line_end":354,"column_start":15,"column_end":43},"name":"bind_compute_descriptor_sets","qualname":"::command::CommandBuffer::bind_compute_descriptor_sets","value":"fn <I, J> (&mut self, layout: &B::PipelineLayout, first_set: usize, sets: I, offsets: J) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Takes an iterator of compute `DescriptorSet`'s, and binds them to the command buffer,\n `first_set` is the index that the first descriptor is mapped to in the command buffer.\n","sig":null,"attributes":[{"value":"/ Takes an iterator of compute `DescriptorSet`'s, and binds them to the command buffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44852,"byte_end":44941,"line_start":352,"line_end":352,"column_start":5,"column_end":94}},{"value":"/ `first_set` is the index that the first descriptor is mapped to in the command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":44946,"byte_end":45036,"line_start":353,"line_end":353,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46115,"byte_end":46123,"line_start":382,"line_end":382,"column_start":15,"column_end":23},"name":"dispatch","qualname":"::command::CommandBuffer::dispatch","value":"fn (&mut self, count: WorkGroupCount) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Execute a workgroup in the compute pipeline. `x`, `y` and `z` are the\n number of local workgroups to dispatch along each \"axis\"; a total of `x`*`y`*`z`\n local workgroups will be created.","sig":null,"attributes":[{"value":"/ Execute a workgroup in the compute pipeline. `x`, `y` and `z` are the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45361,"byte_end":45434,"line_start":366,"line_end":366,"column_start":5,"column_end":78}},{"value":"/ number of local workgroups to dispatch along each \"axis\"; a total of `x`*`y`*`z`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45439,"byte_end":45523,"line_start":367,"line_end":367,"column_start":5,"column_end":89}},{"value":"/ local workgroups will be created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45528,"byte_end":45565,"line_start":368,"line_end":368,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45570,"byte_end":45573,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45578,"byte_end":45590,"line_start":370,"line_end":370,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45595,"byte_end":45598,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ This function does not return an error. Invalid usage of this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45603,"byte_end":45677,"line_start":372,"line_end":372,"column_start":5,"column_end":79}},{"value":"/ will result in an error on `finish`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45682,"byte_end":45722,"line_start":373,"line_end":373,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45727,"byte_end":45730,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ - Command buffer must be in recording state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45735,"byte_end":45783,"line_start":375,"line_end":375,"column_start":5,"column_end":53}},{"value":"/ - A compute pipeline must be bound using `bind_compute_pipeline`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45788,"byte_end":45857,"line_start":376,"line_end":376,"column_start":5,"column_end":74}},{"value":"/ - Only queues with compute capability support this function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45862,"byte_end":45926,"line_start":377,"line_end":377,"column_start":5,"column_end":69}},{"value":"/ - This function must be called outside of a render pass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45931,"byte_end":45991,"line_start":378,"line_end":378,"column_start":5,"column_end":65}},{"value":"/ - `count` must be less than or equal to `Limits::max_compute_work_group_count`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":45996,"byte_end":46078,"line_start":379,"line_end":379,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46083,"byte_end":46086,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ TODO:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46091,"byte_end":46100,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46283,"byte_end":46300,"line_start":386,"line_end":386,"column_start":15,"column_end":32},"name":"dispatch_indirect","qualname":"::command::CommandBuffer::dispatch_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Works similarly to `dispatch()` but reads parameters from the given\n buffer during execution.\n","sig":null,"attributes":[{"value":"/ Works similarly to `dispatch()` but reads parameters from the given","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46164,"byte_end":46235,"line_start":384,"line_end":384,"column_start":5,"column_end":76}},{"value":"/ buffer during execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46240,"byte_end":46268,"line_start":385,"line_end":385,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46450,"byte_end":46461,"line_start":389,"line_end":389,"column_start":15,"column_end":26},"name":"copy_buffer","qualname":"::command::CommandBuffer::copy_buffer","value":"fn <T> (&mut self, src: &B::Buffer, dst: &B::Buffer, regions: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Adds a command to copy regions from the source to destination buffer.\n","sig":null,"attributes":[{"value":"/ Adds a command to copy regions from the source to destination buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46362,"byte_end":46435,"line_start":388,"line_end":388,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46902,"byte_end":46912,"line_start":398,"line_end":398,"column_start":15,"column_end":25},"name":"copy_image","qualname":"::command::CommandBuffer::copy_image","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Image, dst_layout: Layout, regions: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Copies regions from the source to the destination images, which\n have the given layouts.  No format conversion is done; the source and destination\n `Layout`'s **must** have the same sized image formats (such as `Rgba8Unorm` and\n `R32`, both of which are 32 bits).\n","sig":null,"attributes":[{"value":"/ Copies regions from the source to the destination images, which","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46599,"byte_end":46666,"line_start":394,"line_end":394,"column_start":5,"column_end":72}},{"value":"/ have the given layouts.  No format conversion is done; the source and destination","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46671,"byte_end":46756,"line_start":395,"line_end":395,"column_start":5,"column_end":90}},{"value":"/ `Layout`'s **must** have the same sized image formats (such as `Rgba8Unorm` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46761,"byte_end":46844,"line_start":396,"line_end":396,"column_start":5,"column_end":88}},{"value":"/ `R32`, both of which are 32 bits).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":46849,"byte_end":46887,"line_start":397,"line_end":397,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47220,"byte_end":47240,"line_start":410,"line_end":410,"column_start":15,"column_end":35},"name":"copy_buffer_to_image","qualname":"::command::CommandBuffer::copy_buffer_to_image","value":"fn <T> (&mut self, src: &B::Buffer, dst: &B::Image, dst_layout: Layout, regions: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Copies regions from the source buffer to the destination image.\n","sig":null,"attributes":[{"value":"/ Copies regions from the source buffer to the destination image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47138,"byte_end":47205,"line_start":409,"line_end":409,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47527,"byte_end":47547,"line_start":421,"line_end":421,"column_start":15,"column_end":35},"name":"copy_image_to_buffer","qualname":"::command::CommandBuffer::copy_image_to_buffer","value":"fn <T> (&mut self, src: &B::Image, src_layout: Layout, dst: &B::Buffer, regions: T) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Copies regions from the source image to the destination buffer.\n","sig":null,"attributes":[{"value":"/ Copies regions from the source image to the destination buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47445,"byte_end":47512,"line_start":420,"line_end":420,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48079,"byte_end":48083,"line_start":436,"line_end":436,"column_start":15,"column_end":19},"name":"draw","qualname":"::command::CommandBuffer::draw","value":"fn (&mut self, vertices: Range<VertexCount>, instances: Range<InstanceCount>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Performs a non-indexed drawing operation, fetching vertex attributes\n from the currently bound vertex buffers.  It performs instanced\n drawing, drawing `instances.len()`\n times with an `instanceIndex` starting with the start of the range.\n","sig":null,"attributes":[{"value":"/ Performs a non-indexed drawing operation, fetching vertex attributes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47801,"byte_end":47873,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/ from the currently bound vertex buffers.  It performs instanced","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47878,"byte_end":47945,"line_start":433,"line_end":433,"column_start":5,"column_end":72}},{"value":"/ drawing, drawing `instances.len()`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47950,"byte_end":47988,"line_start":434,"line_end":434,"column_start":5,"column_end":43}},{"value":"/ times with an `instanceIndex` starting with the start of the range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":47993,"byte_end":48064,"line_start":435,"line_end":435,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48546,"byte_end":48558,"line_start":444,"line_end":444,"column_start":15,"column_end":27},"name":"draw_indexed","qualname":"::command::CommandBuffer::draw_indexed","value":"fn (&mut self, indices: Range<IndexCount>, base_vertex: VertexOffset, instances: Range<InstanceCount>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Performs indexed drawing, drawing the range of indices\n given by the current index buffer and any bound vertex buffers.\n `base_vertex` specifies the vertex offset corresponding to index 0.\n That is, the offset into the vertex buffer is `(current_index + base_vertex)`","sig":null,"attributes":[{"value":"/ Performs indexed drawing, drawing the range of indices","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48164,"byte_end":48222,"line_start":438,"line_end":438,"column_start":5,"column_end":63}},{"value":"/ given by the current index buffer and any bound vertex buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48227,"byte_end":48294,"line_start":439,"line_end":439,"column_start":5,"column_end":72}},{"value":"/ `base_vertex` specifies the vertex offset corresponding to index 0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48299,"byte_end":48370,"line_start":440,"line_end":440,"column_start":5,"column_end":76}},{"value":"/ That is, the offset into the vertex buffer is `(current_index + base_vertex)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48375,"byte_end":48456,"line_start":441,"line_end":441,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48461,"byte_end":48464,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ It also performs instanced drawing, identical to `draw()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48469,"byte_end":48531,"line_start":443,"line_end":443,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49253,"byte_end":49266,"line_start":460,"line_end":460,"column_start":15,"column_end":28},"name":"draw_indirect","qualname":"::command::CommandBuffer::draw_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, draw_count: DrawCount, stride: u32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Functions identically to `draw()`, except the parameters are read\n from the given buffer, starting at `offset` and increasing `stride`\n bytes with each successive draw.  Performs `draw_count` draws total.\n `draw_count` may be zero.","sig":null,"attributes":[{"value":"/ Functions identically to `draw()`, except the parameters are read","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48703,"byte_end":48772,"line_start":451,"line_end":451,"column_start":5,"column_end":74}},{"value":"/ from the given buffer, starting at `offset` and increasing `stride`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48777,"byte_end":48848,"line_start":452,"line_end":452,"column_start":5,"column_end":76}},{"value":"/ bytes with each successive draw.  Performs `draw_count` draws total.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48853,"byte_end":48925,"line_start":453,"line_end":453,"column_start":5,"column_end":77}},{"value":"/ `draw_count` may be zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48930,"byte_end":48959,"line_start":454,"line_end":454,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48964,"byte_end":48967,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ Each draw command in the buffer is a series of 4 `u32` values specifying,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":48972,"byte_end":49049,"line_start":456,"line_end":456,"column_start":5,"column_end":82}},{"value":"/ in order, the number of vertices to draw, the number of instances to draw,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49054,"byte_end":49132,"line_start":457,"line_end":457,"column_start":5,"column_end":83}},{"value":"/ the index of the first vertex to draw, and the instance ID of the first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49137,"byte_end":49212,"line_start":458,"line_end":458,"column_start":5,"column_end":80}},{"value":"/ instance to draw.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49217,"byte_end":49238,"line_start":459,"line_end":459,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49852,"byte_end":49873,"line_start":475,"line_end":475,"column_start":15,"column_end":36},"name":"draw_indexed_indirect","qualname":"::command::CommandBuffer::draw_indexed_indirect","value":"fn (&mut self, buffer: &B::Buffer, offset: buffer::Offset, draw_count: DrawCount, stride: u32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Like `draw_indirect()`, this does indexed drawing a la `draw_indexed()` but\n reads the draw parameters out of the given buffer.","sig":null,"attributes":[{"value":"/ Like `draw_indirect()`, this does indexed drawing a la `draw_indexed()` but","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49411,"byte_end":49490,"line_start":468,"line_end":468,"column_start":5,"column_end":84}},{"value":"/ reads the draw parameters out of the given buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49495,"byte_end":49549,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49554,"byte_end":49557,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Each draw command in the buffer is a series of 5 values specifying,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49562,"byte_end":49633,"line_start":471,"line_end":471,"column_start":5,"column_end":76}},{"value":"/ in order, the number of indices, the number of instances, the first index,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49638,"byte_end":49716,"line_start":472,"line_end":472,"column_start":5,"column_end":83}},{"value":"/ the vertex offset, and the first instance.  All are `u32`'s except","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49721,"byte_end":49791,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/ the vertex offset, which is an `i32`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":49796,"byte_end":49837,"line_start":474,"line_end":474,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50526,"byte_end":50545,"line_start":491,"line_end":491,"column_start":15,"column_end":34},"name":"draw_indirect_count","qualname":"::command::CommandBuffer::draw_indirect_count","value":"fn (&mut self, _buffer: &B::Buffer, _offset: buffer::Offset, _count_buffer: &B::Buffer, _count_buffer_offset: buffer::Offset, _max_draw_count: u32, _stride: u32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Functions identically to `draw_indirect()`, except the amount of draw\n calls are specified by the u32 in `count_buffer` at `count_buffer_offset`.\n There is a limit of `max_draw_count` invocations.","sig":null,"attributes":[{"value":"/ Functions identically to `draw_indirect()`, except the amount of draw","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50018,"byte_end":50091,"line_start":483,"line_end":483,"column_start":5,"column_end":78}},{"value":"/ calls are specified by the u32 in `count_buffer` at `count_buffer_offset`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50096,"byte_end":50174,"line_start":484,"line_end":484,"column_start":5,"column_end":83}},{"value":"/ There is a limit of `max_draw_count` invocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50179,"byte_end":50232,"line_start":485,"line_end":485,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50237,"byte_end":50240,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ Each draw command in the buffer is a series of 4 `u32` values specifying,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50245,"byte_end":50322,"line_start":487,"line_end":487,"column_start":5,"column_end":82}},{"value":"/ in order, the number of vertices to draw, the number of instances to draw,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50327,"byte_end":50405,"line_start":488,"line_end":488,"column_start":5,"column_end":83}},{"value":"/ the index of the first vertex to draw, and the instance ID of the first","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50410,"byte_end":50485,"line_start":489,"line_end":489,"column_start":5,"column_end":80}},{"value":"/ instance to draw.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50490,"byte_end":50511,"line_start":490,"line_end":490,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51375,"byte_end":51402,"line_start":511,"line_end":511,"column_start":15,"column_end":42},"name":"draw_indexed_indirect_count","qualname":"::command::CommandBuffer::draw_indexed_indirect_count","value":"fn (&mut self, _buffer: &B::Buffer, _offset: buffer::Offset, _count_buffer: &B::Buffer, _count_buffer_offset: buffer::Offset, _max_draw_count: u32, _stride: u32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Functions identically to `draw_indexed_indirect()`, except the amount of draw\n calls are specified by the u32 in `count_buffer` at `count_buffer_offset`.\n There is a limit of `max_draw_count` invocations.","sig":null,"attributes":[{"value":"/ Functions identically to `draw_indexed_indirect()`, except the amount of draw","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50850,"byte_end":50931,"line_start":503,"line_end":503,"column_start":5,"column_end":86}},{"value":"/ calls are specified by the u32 in `count_buffer` at `count_buffer_offset`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":50936,"byte_end":51014,"line_start":504,"line_end":504,"column_start":5,"column_end":83}},{"value":"/ There is a limit of `max_draw_count` invocations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51019,"byte_end":51072,"line_start":505,"line_end":505,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51077,"byte_end":51080,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Each draw command in the buffer is a series of 5 values specifying,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51085,"byte_end":51156,"line_start":507,"line_end":507,"column_start":5,"column_end":76}},{"value":"/ in order, the number of indices, the number of instances, the first index,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51161,"byte_end":51239,"line_start":508,"line_end":508,"column_start":5,"column_end":83}},{"value":"/ the vertex offset, and the first instance.  All are `u32`'s except","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51244,"byte_end":51314,"line_start":509,"line_end":509,"column_start":5,"column_end":75}},{"value":"/ the vertex offset, which is an `i32`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51319,"byte_end":51360,"line_start":510,"line_end":510,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51815,"byte_end":51824,"line_start":524,"line_end":524,"column_start":15,"column_end":24},"name":"set_event","qualname":"::command::CommandBuffer::set_event","value":"fn (&mut self, event: &B::Event, stages: pso::PipelineStage) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Signals an event once all specified stages of the shader pipeline have completed.\n","sig":null,"attributes":[{"value":"/ Signals an event once all specified stages of the shader pipeline have completed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51715,"byte_end":51800,"line_start":523,"line_end":523,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51987,"byte_end":51998,"line_start":527,"line_end":527,"column_start":15,"column_end":26},"name":"reset_event","qualname":"::command::CommandBuffer::reset_event","value":"fn (&mut self, event: &B::Event, stages: pso::PipelineStage) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Resets an event once all specified stages of the shader pipeline have completed.\n","sig":null,"attributes":[{"value":"/ Resets an event once all specified stages of the shader pipeline have completed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":51888,"byte_end":51972,"line_start":526,"line_end":526,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52463,"byte_end":52474,"line_start":535,"line_end":535,"column_start":15,"column_end":26},"name":"wait_events","qualname":"::command::CommandBuffer::wait_events","value":"fn <'a, I, J> (&mut self, events: I, stages: Range<pso::PipelineStage>, barriers: J) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Waits at some shader stage(s) until all events have been signalled.","sig":null,"attributes":[{"value":"/ Waits at some shader stage(s) until all events have been signalled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52062,"byte_end":52133,"line_start":529,"line_end":529,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52138,"byte_end":52141,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ - `src_stages` specifies the shader pipeline stages in which the events were signalled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52146,"byte_end":52237,"line_start":531,"line_end":531,"column_start":5,"column_end":96}},{"value":"/ - `dst_stages` specifies the shader pipeline stages at which execution should wait.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52242,"byte_end":52329,"line_start":532,"line_end":532,"column_start":5,"column_end":92}},{"value":"/ - `barriers` specifies a series of memory barriers to be executed before pipeline execution","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52334,"byte_end":52429,"line_start":533,"line_end":533,"column_start":5,"column_end":100}},{"value":"/   resumes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52434,"byte_end":52448,"line_start":534,"line_end":534,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52957,"byte_end":52968,"line_start":549,"line_end":549,"column_start":15,"column_end":26},"name":"begin_query","qualname":"::command::CommandBuffer::begin_query","value":"fn (&mut self, query: query::Query<B>, flags: query::ControlFlags) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Begins a query operation.  Queries count operations or record timestamps\n resulting from commands that occur between the beginning and end of the query,\n and save the results to the query pool.\n","sig":null,"attributes":[{"value":"/ Begins a query operation.  Queries count operations or record timestamps","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52731,"byte_end":52807,"line_start":546,"line_end":546,"column_start":5,"column_end":81}},{"value":"/ resulting from commands that occur between the beginning and end of the query,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52812,"byte_end":52894,"line_start":547,"line_end":547,"column_start":5,"column_end":87}},{"value":"/ and save the results to the query pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":52899,"byte_end":52942,"line_start":548,"line_end":548,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53069,"byte_end":53078,"line_start":552,"line_end":552,"column_start":15,"column_end":24},"name":"end_query","qualname":"::command::CommandBuffer::end_query","value":"fn (&mut self, query: query::Query<B>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" End a query.\n","sig":null,"attributes":[{"value":"/ End a query.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53038,"byte_end":53054,"line_start":551,"line_end":551,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53199,"byte_end":53215,"line_start":555,"line_end":555,"column_start":15,"column_end":31},"name":"reset_query_pool","qualname":"::command::CommandBuffer::reset_query_pool","value":"fn (&mut self, pool: &B::QueryPool, queries: Range<query::Id>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Reset/clear the values in the given range of the query pool.\n","sig":null,"attributes":[{"value":"/ Reset/clear the values in the given range of the query pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53120,"byte_end":53184,"line_start":554,"line_end":554,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53333,"byte_end":53356,"line_start":558,"line_end":558,"column_start":15,"column_end":38},"name":"copy_query_pool_results","qualname":"::command::CommandBuffer::copy_query_pool_results","value":"fn (&mut self, pool: &B::QueryPool, queries: Range<query::Id>, buffer: &B::Buffer, offset: buffer::Offset, stride: buffer::Offset, flags: query::ResultFlags) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Copy query results into a buffer.\n","sig":null,"attributes":[{"value":"/ Copy query results into a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53281,"byte_end":53318,"line_start":557,"line_end":557,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53634,"byte_end":53649,"line_start":569,"line_end":569,"column_start":15,"column_end":30},"name":"write_timestamp","qualname":"::command::CommandBuffer::write_timestamp","value":"fn (&mut self, stage: pso::PipelineStage, query: query::Query<B>) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Requests a timestamp to be written.\n","sig":null,"attributes":[{"value":"/ Requests a timestamp to be written.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53580,"byte_end":53619,"line_start":568,"line_end":568,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54118,"byte_end":54141,"line_start":576,"line_end":576,"column_start":15,"column_end":38},"name":"push_graphics_constants","qualname":"::command::CommandBuffer::push_graphics_constants","value":"fn (&mut self, layout: &B::PipelineLayout, stages: pso::ShaderStageFlags, offset: u32, constants: &[u32]) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Modify constant data in a graphics pipeline. Push constants are intended to modify data in a\n pipeline more quickly than a updating the values inside a descriptor set.","sig":null,"attributes":[{"value":"/ Modify constant data in a graphics pipeline. Push constants are intended to modify data in a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53718,"byte_end":53814,"line_start":571,"line_end":571,"column_start":5,"column_end":101}},{"value":"/ pipeline more quickly than a updating the values inside a descriptor set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53819,"byte_end":53896,"line_start":572,"line_end":572,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53901,"byte_end":53904,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ Push constants must be aligned to 4 bytes, and to guarantee alignment, this function takes a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":53909,"byte_end":54005,"line_start":574,"line_end":574,"column_start":5,"column_end":101}},{"value":"/ `&[u32]` instead of a `&[u8]`. Note that the offset is still specified in units of bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54010,"byte_end":54103,"line_start":575,"line_end":575,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54696,"byte_end":54718,"line_start":589,"line_end":589,"column_start":15,"column_end":37},"name":"push_compute_constants","qualname":"::command::CommandBuffer::push_compute_constants","value":"fn (&mut self, layout: &B::PipelineLayout, offset: u32, constants: &[u32]) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Modify constant data in a compute pipeline. Push constants are intended to modify data in a\n pipeline more quickly than a updating the values inside a descriptor set.","sig":null,"attributes":[{"value":"/ Modify constant data in a compute pipeline. Push constants are intended to modify data in a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54297,"byte_end":54392,"line_start":584,"line_end":584,"column_start":5,"column_end":100}},{"value":"/ pipeline more quickly than a updating the values inside a descriptor set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54397,"byte_end":54474,"line_start":585,"line_end":585,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54479,"byte_end":54482,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ Push constants must be aligned to 4 bytes, and to guarantee alignment, this function takes a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54487,"byte_end":54583,"line_start":587,"line_end":587,"column_start":5,"column_end":101}},{"value":"/ `&[u32]` instead of a `&[u8]`. Note that the offset is still specified in units of bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54588,"byte_end":54681,"line_start":588,"line_end":588,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54898,"byte_end":54914,"line_start":597,"line_end":597,"column_start":15,"column_end":31},"name":"execute_commands","qualname":"::command::CommandBuffer::execute_commands","value":"fn <'a, T, I> (&mut self, cmd_buffers: I) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Execute the given secondary command buffers.\n","sig":null,"attributes":[{"value":"/ Execute the given secondary command buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":54835,"byte_end":54883,"line_start":596,"line_end":596,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":55117,"byte_end":55136,"line_start":603,"line_end":603,"column_start":15,"column_end":34},"name":"insert_debug_marker","qualname":"::command::CommandBuffer::insert_debug_marker","value":"fn (&mut self, name: &str, color: u32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Debug mark the current spot in the command buffer.\n","sig":null,"attributes":[{"value":"/ Debug mark the current spot in the command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":55048,"byte_end":55102,"line_start":602,"line_end":602,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":55260,"byte_end":55278,"line_start":605,"line_end":605,"column_start":15,"column_end":33},"name":"begin_debug_marker","qualname":"::command::CommandBuffer::begin_debug_marker","value":"fn (&mut self, name: &str, color: u32) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" Start a debug marker at the current place in the command buffer.\n","sig":null,"attributes":[{"value":"/ Start a debug marker at the current place in the command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":55177,"byte_end":55245,"line_start":604,"line_end":604,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":55378,"byte_end":55394,"line_start":607,"line_end":607,"column_start":15,"column_end":31},"name":"end_debug_marker","qualname":"::command::CommandBuffer::end_debug_marker","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":" End the last started debug marker scope.\n","sig":null,"attributes":[{"value":"/ End the last started debug marker scope.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":55319,"byte_end":55363,"line_start":606,"line_end":606,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"device","qualname":"::device","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":1557},{"krate":0,"index":1564},{"krate":0,"index":1562},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":1566},{"krate":0,"index":1573},{"krate":0,"index":1571},{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":1575},{"krate":0,"index":1582},{"krate":0,"index":1580},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":1584},{"krate":0,"index":1594},{"krate":0,"index":1592},{"krate":0,"index":1589},{"krate":0,"index":1590},{"krate":0,"index":219},{"krate":0,"index":221},{"krate":0,"index":1596},{"krate":0,"index":1609},{"krate":0,"index":1607},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":1611},{"krate":0,"index":1623},{"krate":0,"index":1621},{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":1625},{"krate":0,"index":1645},{"krate":0,"index":1643},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":1647},{"krate":0,"index":1661},{"krate":0,"index":1659},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":1663},{"krate":0,"index":1677},{"krate":0,"index":1675},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":1679},{"krate":0,"index":1689},{"krate":0,"index":1687},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1691},{"krate":0,"index":1713},{"krate":0,"index":1711},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"decl_id":null,"docs":" Logical device","sig":null,"attributes":[{"value":"! Logical device","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60139,"byte_end":60157,"line_start":1,"line_end":1,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60158,"byte_end":60161,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Device","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60162,"byte_end":60174,"line_start":3,"line_end":3,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60175,"byte_end":60178,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! This module exposes the `Device` trait, which provides methods for creating","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60179,"byte_end":60258,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"! and managing graphics resources such as buffers, images and memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60259,"byte_end":60330,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60331,"byte_end":60334,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The `Adapter` and `Device` types are very similar to the Vulkan concept of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60335,"byte_end":60413,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"! \"physical devices\" vs. \"logical devices\"; an `Adapter` is single GPU","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60414,"byte_end":60486,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! (or CPU) that implements a backend, a `Device` is a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60487,"byte_end":60542,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"! handle to that physical device that has the requested capabilities","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60543,"byte_end":60613,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"! and is used to actually do things.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":60614,"byte_end":60652,"line_start":12,"line_end":12,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":1557},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61116,"byte_end":61126,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"DeviceLost","qualname":"::device::DeviceLost","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error occurred caused device to be lost.\n","sig":null,"attributes":[{"value":"/ Error occurred caused device to be lost.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61025,"byte_end":61069,"line_start":35,"line_end":35,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1566},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61424,"byte_end":61435,"line_start":49,"line_end":49,"column_start":12,"column_end":23},"name":"SurfaceLost","qualname":"::device::SurfaceLost","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error occurred caused surface to be lost.\n","sig":null,"attributes":[{"value":"/ Error occurred caused surface to be lost.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61332,"byte_end":61377,"line_start":47,"line_end":47,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1575},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61743,"byte_end":61754,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"WindowInUse","qualname":"::device::WindowInUse","value":"","parent":null,"children":[],"decl_id":null,"docs":" Native window is already in use by graphics API.\n","sig":null,"attributes":[{"value":"/ Native window is already in use by graphics API.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61644,"byte_end":61696,"line_start":59,"line_end":59,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1585},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62089,"byte_end":62093,"line_start":75,"line_end":75,"column_start":5,"column_end":9},"name":"Host","qualname":"::device::OutOfMemory::Host","value":"OutOfMemory::Host","parent":{"krate":0,"index":1584},"children":[],"decl_id":null,"docs":" Host memory exhausted.\n","sig":null,"attributes":[{"value":"/ Host memory exhausted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62058,"byte_end":62084,"line_start":74,"line_end":74,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1587},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62132,"byte_end":62138,"line_start":77,"line_end":77,"column_start":5,"column_end":11},"name":"Device","qualname":"::device::OutOfMemory::Device","value":"OutOfMemory::Device","parent":{"krate":0,"index":1584},"children":[],"decl_id":null,"docs":" Device memory exhausted.\n","sig":null,"attributes":[{"value":"/ Device memory exhausted.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62099,"byte_end":62127,"line_start":76,"line_end":76,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":1584},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62040,"byte_end":62051,"line_start":73,"line_end":73,"column_start":10,"column_end":21},"name":"OutOfMemory","qualname":"::device::OutOfMemory","value":"OutOfMemory::{Host, Device}","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1587}],"decl_id":null,"docs":" Error allocating memory.\n","sig":null,"attributes":[{"value":"/ Error allocating memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61967,"byte_end":61995,"line_start":71,"line_end":71,"column_start":1,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1597},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62665,"byte_end":62676,"line_start":96,"line_end":96,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::OomOrDeviceLost::OutOfMemory","value":"OomOrDeviceLost::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62620,"byte_end":62660,"line_start":95,"line_end":95,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1600},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62718,"byte_end":62728,"line_start":98,"line_end":98,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::device::OomOrDeviceLost::DeviceLost","value":"OomOrDeviceLost::DeviceLost(DeviceLost)","parent":{"krate":0,"index":1596},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"/ Device is lost","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62695,"byte_end":62713,"line_start":97,"line_end":97,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1596},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62598,"byte_end":62613,"line_start":94,"line_end":94,"column_start":10,"column_end":25},"name":"OomOrDeviceLost","qualname":"::device::OomOrDeviceLost","value":"OomOrDeviceLost::{OutOfMemory, DeviceLost}","parent":null,"children":[{"krate":0,"index":1597},{"krate":0,"index":1600}],"decl_id":null,"docs":" Error occurred caused device to be lost\n or out of memory error.\n","sig":null,"attributes":[{"value":"/ Error occurred caused device to be lost","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62482,"byte_end":62525,"line_start":91,"line_end":91,"column_start":1,"column_end":44}},{"value":"/ or out of memory error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62526,"byte_end":62553,"line_start":92,"line_end":92,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63801,"byte_end":63812,"line_start":135,"line_end":135,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::AllocationError::OutOfMemory","value":"AllocationError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":1611},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63756,"byte_end":63796,"line_start":134,"line_end":134,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1615},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63872,"byte_end":63886,"line_start":138,"line_end":138,"column_start":5,"column_end":19},"name":"TooManyObjects","qualname":"::device::AllocationError::TooManyObjects","value":"AllocationError::TooManyObjects","parent":{"krate":0,"index":1611},"children":[],"decl_id":null,"docs":" Cannot create any more objects.\n","sig":null,"attributes":[{"value":"/ Cannot create any more objects.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63832,"byte_end":63867,"line_start":137,"line_end":137,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":1611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63734,"byte_end":63749,"line_start":133,"line_end":133,"column_start":10,"column_end":25},"name":"AllocationError","qualname":"::device::AllocationError","value":"AllocationError::{OutOfMemory, TooManyObjects}","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1615}],"decl_id":null,"docs":" Possible cause of allocation failure.\n","sig":null,"attributes":[{"value":"/ Possible cause of allocation failure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63648,"byte_end":63689,"line_start":131,"line_end":131,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1626},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64817,"byte_end":64828,"line_start":171,"line_end":171,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64772,"byte_end":64812,"line_start":170,"line_end":170,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1629},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64923,"byte_end":64943,"line_start":173,"line_end":173,"column_start":5,"column_end":25},"name":"InitializationFailed","qualname":"::device::CreationError::InitializationFailed","value":"CreationError::InitializationFailed","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Device initialization failed due to implementation specific errors.\n","sig":null,"attributes":[{"value":"/ Device initialization failed due to implementation specific errors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64847,"byte_end":64918,"line_start":172,"line_end":172,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65052,"byte_end":65068,"line_start":176,"line_end":176,"column_start":5,"column_end":21},"name":"MissingExtension","qualname":"::device::CreationError::MissingExtension","value":"CreationError::MissingExtension","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" At least one of the user requested extensions if not supported by the\n physical device.\n","sig":null,"attributes":[{"value":"/ At least one of the user requested extensions if not supported by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64949,"byte_end":65022,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/ physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65027,"byte_end":65047,"line_start":175,"line_end":175,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65298,"byte_end":65312,"line_start":182,"line_end":182,"column_start":5,"column_end":19},"name":"MissingFeature","qualname":"::device::CreationError::MissingFeature","value":"CreationError::MissingFeature","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" At least one of the user requested features if not supported by the\n physical device.","sig":null,"attributes":[{"value":"/ At least one of the user requested features if not supported by the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65074,"byte_end":65145,"line_start":177,"line_end":177,"column_start":5,"column_end":76}},{"value":"/ physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65150,"byte_end":65170,"line_start":178,"line_end":178,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65175,"byte_end":65178,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Use [`features`](trait.PhysicalDevice.html#tymethod.features)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65183,"byte_end":65248,"line_start":180,"line_end":180,"column_start":5,"column_end":70}},{"value":"/ for checking the supported features.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65253,"byte_end":65293,"line_start":181,"line_end":181,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65545,"byte_end":65559,"line_start":187,"line_end":187,"column_start":5,"column_end":19},"name":"TooManyObjects","qualname":"::device::CreationError::TooManyObjects","value":"CreationError::TooManyObjects","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" Too many logical devices have been created from this physical device.","sig":null,"attributes":[{"value":"/ Too many logical devices have been created from this physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65318,"byte_end":65391,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65396,"byte_end":65399,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ The implementation may only support one logical device for each physical","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65404,"byte_end":65480,"line_start":185,"line_end":185,"column_start":5,"column_end":81}},{"value":"/ device or lacks resources to allocate a new device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65485,"byte_end":65540,"line_start":186,"line_end":186,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65765,"byte_end":65775,"line_start":193,"line_end":193,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::device::CreationError::DeviceLost","value":"CreationError::DeviceLost","parent":{"krate":0,"index":1625},"children":[],"decl_id":null,"docs":" The logical or physical device are lost during the device creation\n process.","sig":null,"attributes":[{"value":"/ The logical or physical device are lost during the device creation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65565,"byte_end":65635,"line_start":188,"line_end":188,"column_start":5,"column_end":75}},{"value":"/ process.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65640,"byte_end":65652,"line_start":189,"line_end":189,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65657,"byte_end":65660,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This may be caused by hardware failure, physical device removal,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65665,"byte_end":65733,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"/ power outage, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65738,"byte_end":65760,"line_start":192,"line_end":192,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":1625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64752,"byte_end":64765,"line_start":169,"line_end":169,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::device::CreationError","value":"CreationError::{OutOfMemory, InitializationFailed, MissingExtension, MissingFeature, TooManyObjects, DeviceLost}","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1629},{"krate":0,"index":1631},{"krate":0,"index":1633},{"krate":0,"index":1635},{"krate":0,"index":1637}],"decl_id":null,"docs":" Device creation errors during `open`.\n","sig":null,"attributes":[{"value":"/ Device creation errors during `open`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64666,"byte_end":64707,"line_start":167,"line_end":167,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1648},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67204,"byte_end":67215,"line_start":235,"line_end":235,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::MapError::OutOfMemory","value":"MapError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67159,"byte_end":67199,"line_start":234,"line_end":234,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67298,"byte_end":67309,"line_start":237,"line_end":237,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::device::MapError::OutOfBounds","value":"MapError::OutOfBounds","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":" The requested mapping range is outside of the resource.\n","sig":null,"attributes":[{"value":"/ The requested mapping range is outside of the resource.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67234,"byte_end":67293,"line_start":236,"line_end":236,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1653},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67398,"byte_end":67411,"line_start":239,"line_end":239,"column_start":5,"column_end":18},"name":"MappingFailed","qualname":"::device::MapError::MappingFailed","value":"MapError::MappingFailed","parent":{"krate":0,"index":1647},"children":[],"decl_id":null,"docs":" Failed to allocate an appropriately sized contiguous virtual address range\n","sig":null,"attributes":[{"value":"/ Failed to allocate an appropriately sized contiguous virtual address range","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67315,"byte_end":67393,"line_start":238,"line_end":238,"column_start":5,"column_end":83}}]},{"kind":"Enum","id":{"krate":0,"index":1647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67144,"byte_end":67152,"line_start":233,"line_end":233,"column_start":10,"column_end":18},"name":"MapError","qualname":"::device::MapError","value":"MapError::{OutOfMemory, OutOfBounds, MappingFailed}","parent":null,"children":[{"krate":0,"index":1648},{"krate":0,"index":1651},{"krate":0,"index":1653}],"decl_id":null,"docs":" Error accessing a mapping.\n","sig":null,"attributes":[{"value":"/ Error accessing a mapping.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67069,"byte_end":67099,"line_start":231,"line_end":231,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68429,"byte_end":68440,"line_start":271,"line_end":271,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::BindError::OutOfMemory","value":"BindError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":1663},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68384,"byte_end":68424,"line_start":270,"line_end":270,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1667},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68541,"byte_end":68552,"line_start":273,"line_end":273,"column_start":5,"column_end":16},"name":"WrongMemory","qualname":"::device::BindError::WrongMemory","value":"BindError::WrongMemory","parent":{"krate":0,"index":1663},"children":[],"decl_id":null,"docs":" Requested binding to memory that doesn't support the required operations.\n","sig":null,"attributes":[{"value":"/ Requested binding to memory that doesn't support the required operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68459,"byte_end":68536,"line_start":272,"line_end":272,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68606,"byte_end":68617,"line_start":275,"line_end":275,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::device::BindError::OutOfBounds","value":"BindError::OutOfBounds","parent":{"krate":0,"index":1663},"children":[],"decl_id":null,"docs":" Requested binding to an invalid memory.\n","sig":null,"attributes":[{"value":"/ Requested binding to an invalid memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68558,"byte_end":68601,"line_start":274,"line_end":274,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":1663},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68368,"byte_end":68377,"line_start":269,"line_end":269,"column_start":10,"column_end":19},"name":"BindError","qualname":"::device::BindError","value":"BindError::{OutOfMemory, WrongMemory, OutOfBounds}","parent":null,"children":[{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1669}],"decl_id":null,"docs":" Error binding a resource to memory allocation.\n","sig":null,"attributes":[{"value":"/ Error binding a resource to memory allocation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68273,"byte_end":68323,"line_start":267,"line_end":267,"column_start":1,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1680},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69767,"byte_end":69770,"line_start":315,"line_end":315,"column_start":5,"column_end":8},"name":"Any","qualname":"::device::WaitFor::Any","value":"WaitFor::Any","parent":{"krate":0,"index":1679},"children":[],"decl_id":null,"docs":" Wait for any target.\n","sig":null,"attributes":[{"value":"/ Wait for any target.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69738,"byte_end":69762,"line_start":314,"line_end":314,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69814,"byte_end":69817,"line_start":317,"line_end":317,"column_start":5,"column_end":8},"name":"All","qualname":"::device::WaitFor::All","value":"WaitFor::All","parent":{"krate":0,"index":1679},"children":[],"decl_id":null,"docs":" Wait for all targets at once.\n","sig":null,"attributes":[{"value":"/ Wait for all targets at once.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69776,"byte_end":69809,"line_start":316,"line_end":316,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":1679},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69724,"byte_end":69731,"line_start":313,"line_end":313,"column_start":10,"column_end":17},"name":"WaitFor","qualname":"::device::WaitFor","value":"WaitFor::{Any, All}","parent":null,"children":[{"krate":0,"index":1680},{"krate":0,"index":1682}],"decl_id":null,"docs":" Specifies the waiting targets.\n","sig":null,"attributes":[{"value":"/ Specifies the waiting targets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69582,"byte_end":69616,"line_start":310,"line_end":310,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1692},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69966,"byte_end":69983,"line_start":324,"line_end":324,"column_start":5,"column_end":22},"name":"CompilationFailed","qualname":"::device::ShaderError::CompilationFailed","value":"ShaderError::CompilationFailed(String)","parent":{"krate":0,"index":1691},"children":[],"decl_id":null,"docs":" The shader failed to compile.\n","sig":null,"attributes":[{"value":"/ The shader failed to compile.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69928,"byte_end":69961,"line_start":323,"line_end":323,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1695},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70043,"byte_end":70060,"line_start":326,"line_end":326,"column_start":5,"column_end":22},"name":"MissingEntryPoint","qualname":"::device::ShaderError::MissingEntryPoint","value":"ShaderError::MissingEntryPoint(String)","parent":{"krate":0,"index":1691},"children":[],"decl_id":null,"docs":" The shader is missing an entry point.\n","sig":null,"attributes":[{"value":"/ The shader is missing an entry point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69997,"byte_end":70038,"line_start":325,"line_end":325,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1698},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70151,"byte_end":70168,"line_start":328,"line_end":328,"column_start":5,"column_end":22},"name":"InterfaceMismatch","qualname":"::device::ShaderError::InterfaceMismatch","value":"ShaderError::InterfaceMismatch(String)","parent":{"krate":0,"index":1691},"children":[],"decl_id":null,"docs":" The shader has a mismatch of interface (e.g missing push constants).\n","sig":null,"attributes":[{"value":"/ The shader has a mismatch of interface (e.g missing push constants).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70074,"byte_end":70146,"line_start":327,"line_end":327,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70225,"byte_end":70241,"line_start":330,"line_end":330,"column_start":5,"column_end":21},"name":"UnsupportedStage","qualname":"::device::ShaderError::UnsupportedStage","value":"ShaderError::UnsupportedStage(pso::Stage)","parent":{"krate":0,"index":1691},"children":[],"decl_id":null,"docs":" The shader stage is not supported.\n","sig":null,"attributes":[{"value":"/ The shader stage is not supported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70182,"byte_end":70220,"line_start":329,"line_end":329,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1704},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70304,"byte_end":70315,"line_start":332,"line_end":332,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::device::ShaderError::OutOfMemory","value":"ShaderError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":1691},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70259,"byte_end":70299,"line_start":331,"line_end":331,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":1691},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69910,"byte_end":69921,"line_start":322,"line_end":322,"column_start":10,"column_end":21},"name":"ShaderError","qualname":"::device::ShaderError","value":"ShaderError::{CompilationFailed, MissingEntryPoint, InterfaceMismatch, UnsupportedStage, OutOfMemory}","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704}],"decl_id":null,"docs":" An error from creating a shader module.\n","sig":null,"attributes":[{"value":"/ An error from creating a shader module.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69822,"byte_end":69865,"line_start":320,"line_end":320,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":258},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72318,"byte_end":72324,"line_start":390,"line_end":390,"column_start":11,"column_end":17},"name":"Device","qualname":"::device::Device","value":"Device<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71516,"byte_end":71530,"line_start":370,"line_end":370,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71531,"byte_end":71534,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ A `Device` is responsible for creating and managing resources for the physical device","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71535,"byte_end":71624,"line_start":372,"line_end":372,"column_start":1,"column_end":90}},{"value":"/ it was created from.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71625,"byte_end":71649,"line_start":373,"line_end":373,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71650,"byte_end":71653,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ ## Resource Construction and Handling","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71654,"byte_end":71695,"line_start":375,"line_end":375,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71696,"byte_end":71699,"line_start":376,"line_end":376,"column_start":1,"column_end":4}},{"value":"/ This device structure can then be used to create and manage different resources, like buffers,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71700,"byte_end":71798,"line_start":377,"line_end":377,"column_start":1,"column_end":99}},{"value":"/ shader programs and textures. See the individual methods for more information.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71799,"byte_end":71881,"line_start":378,"line_end":378,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71882,"byte_end":71885,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ ## Mutability","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71886,"byte_end":71903,"line_start":380,"line_end":380,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71904,"byte_end":71907,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ All the methods get `&self`. Any internal mutability of the `Device` is hidden from the user.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71908,"byte_end":72005,"line_start":382,"line_end":382,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72006,"byte_end":72009,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ ## Synchronization","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72010,"byte_end":72032,"line_start":384,"line_end":384,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72033,"byte_end":72036,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ `Device` should be usable concurrently from multiple threads. The `Send` and `Sync` bounds","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72037,"byte_end":72131,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ are not enforced at the HAL level due to OpenGL constraint (to be revised). Users can still","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72132,"byte_end":72227,"line_start":387,"line_end":387,"column_start":1,"column_end":96}},{"value":"/ benefit from the backends that support synchronization of the `Device`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72228,"byte_end":72303,"line_start":388,"line_end":388,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72304,"byte_end":72307,"line_start":389,"line_end":389,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72734,"byte_end":72749,"line_start":399,"line_end":399,"column_start":15,"column_end":30},"name":"allocate_memory","qualname":"::device::Device::allocate_memory","value":"fn (&self, memory_type: MemoryTypeId, size: u64) -> Result<B::Memory, AllocationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Allocates a memory segment of a specified type.","sig":null,"attributes":[{"value":"/ Allocates a memory segment of a specified type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72375,"byte_end":72426,"line_start":391,"line_end":391,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72431,"byte_end":72434,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ There is only a limited amount of allocations allowed depending on the implementation!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72439,"byte_end":72529,"line_start":393,"line_end":393,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72534,"byte_end":72537,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72542,"byte_end":72557,"line_start":395,"line_end":395,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72562,"byte_end":72565,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ * `memory_type` - Index of the memory type in the memory properties of the associated physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72570,"byte_end":72676,"line_start":397,"line_end":397,"column_start":5,"column_end":111}},{"value":"/ * `size` - Size of the allocation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72681,"byte_end":72719,"line_start":398,"line_end":398,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72907,"byte_end":72918,"line_start":406,"line_end":406,"column_start":15,"column_end":26},"name":"free_memory","qualname":"::device::Device::free_memory","value":"fn (&self, memory: B::Memory) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Free device memory\n","sig":null,"attributes":[{"value":"/ Free device memory","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72870,"byte_end":72892,"line_start":405,"line_end":405,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73112,"byte_end":73131,"line_start":411,"line_end":411,"column_start":15,"column_end":34},"name":"create_command_pool","qualname":"::device::Device::create_command_pool","value":"fn (&self, family: QueueFamilyId, create_flags: CommandPoolCreateFlags) -> Result<B::CommandPool, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new command pool for a given queue family.","sig":null,"attributes":[{"value":"/ Create a new command pool for a given queue family.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72951,"byte_end":73006,"line_start":408,"line_end":408,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73011,"byte_end":73014,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ *Note*: the family has to be associated by one as the `Gpu::queue_groups`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73019,"byte_end":73097,"line_start":410,"line_end":410,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73318,"byte_end":73338,"line_start":418,"line_end":418,"column_start":15,"column_end":35},"name":"destroy_command_pool","qualname":"::device::Device::destroy_command_pool","value":"fn (&self, pool: B::CommandPool) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a command pool.\n","sig":null,"attributes":[{"value":"/ Destroy a command pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73276,"byte_end":73303,"line_start":417,"line_end":417,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73745,"byte_end":73763,"line_start":425,"line_end":425,"column_start":15,"column_end":33},"name":"create_render_pass","qualname":"::device::Device::create_render_pass","value":"fn <'a, IA, IS, ID> (&self, attachments: IA, subpasses: IS, dependencies: ID) -> Result<B::RenderPass, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a render pass with the given attachments and subpasses.","sig":null,"attributes":[{"value":"/ Create a render pass with the given attachments and subpasses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73374,"byte_end":73440,"line_start":420,"line_end":420,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73445,"byte_end":73448,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ A *render pass* represents a collection of attachments, subpasses, and dependencies between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73453,"byte_end":73548,"line_start":422,"line_end":422,"column_start":5,"column_end":100}},{"value":"/ the subpasses, and describes how the attachments are used over the course of the subpasses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73553,"byte_end":73648,"line_start":423,"line_end":423,"column_start":5,"column_end":100}},{"value":"/ The use of a render pass in a command buffer is a *render pass* instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":73653,"byte_end":73730,"line_start":424,"line_end":424,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74193,"byte_end":74212,"line_start":440,"line_end":440,"column_start":15,"column_end":34},"name":"destroy_render_pass","qualname":"::device::Device::destroy_render_pass","value":"fn (&self, rp: B::RenderPass) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a `RenderPass`.\n","sig":null,"attributes":[{"value":"/ Destroy a `RenderPass`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74151,"byte_end":74178,"line_start":439,"line_end":439,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75182,"byte_end":75204,"line_start":458,"line_end":458,"column_start":15,"column_end":37},"name":"create_pipeline_layout","qualname":"::device::Device::create_pipeline_layout","value":"fn <IS, IR> (&self, set_layouts: IS, push_constant: IR) -> Result<B::PipelineLayout, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new pipeline layout object.","sig":null,"attributes":[{"value":"/ Create a new pipeline layout object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74245,"byte_end":74285,"line_start":442,"line_end":442,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74290,"byte_end":74293,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74298,"byte_end":74313,"line_start":444,"line_end":444,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74318,"byte_end":74321,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ * `set_layouts` - Descriptor set layouts","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74326,"byte_end":74370,"line_start":446,"line_end":446,"column_start":5,"column_end":49}},{"value":"/ * `push_constants` - Ranges of push constants. A shader stage may only contain one push","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74375,"byte_end":74466,"line_start":447,"line_end":447,"column_start":5,"column_end":96}},{"value":"/     constant block. The range is defined in units of bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74471,"byte_end":74534,"line_start":448,"line_end":448,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74539,"byte_end":74542,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # PipelineLayout","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74547,"byte_end":74567,"line_start":450,"line_end":450,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74572,"byte_end":74575,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Access to descriptor sets from a pipeline is accomplished through a *pipeline layout*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74580,"byte_end":74670,"line_start":452,"line_end":452,"column_start":5,"column_end":95}},{"value":"/ Zero or more descriptor set layouts and zero or more push constant ranges are combined to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74675,"byte_end":74768,"line_start":453,"line_end":453,"column_start":5,"column_end":98}},{"value":"/ form a pipeline layout object which describes the complete set of resources that **can** be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74773,"byte_end":74868,"line_start":454,"line_end":454,"column_start":5,"column_end":100}},{"value":"/ accessed by a pipeline. The pipeline layout represents a sequence of descriptor sets with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74873,"byte_end":74966,"line_start":455,"line_end":455,"column_start":5,"column_end":98}},{"value":"/ each having a specific layout. This sequence of layouts is used to determine the interface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":74971,"byte_end":75065,"line_start":456,"line_end":456,"column_start":5,"column_end":99}},{"value":"/ between shader stages and shader resources. Each pipeline is created using a pipeline layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75070,"byte_end":75167,"line_start":457,"line_end":457,"column_start":5,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75560,"byte_end":75583,"line_start":470,"line_end":470,"column_start":15,"column_end":38},"name":"destroy_pipeline_layout","qualname":"::device::Device::destroy_pipeline_layout","value":"fn (&self, layout: B::PipelineLayout) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a pipeline layout object\n","sig":null,"attributes":[{"value":"/ Destroy a pipeline layout object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75509,"byte_end":75545,"line_start":469,"line_end":469,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75674,"byte_end":75695,"line_start":473,"line_end":473,"column_start":15,"column_end":36},"name":"create_pipeline_cache","qualname":"::device::Device::create_pipeline_cache","value":"fn (&self, data: Option<&[u8]>) -> Result<B::PipelineCache, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a pipeline cache object.\n","sig":null,"attributes":[{"value":"/ Create a pipeline cache object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75624,"byte_end":75659,"line_start":472,"line_end":472,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75854,"byte_end":75877,"line_start":479,"line_end":479,"column_start":15,"column_end":38},"name":"get_pipeline_cache_data","qualname":"::device::Device::get_pipeline_cache_data","value":"fn (&self, cache: &B::PipelineCache) -> Result<Vec<u8>, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Retrieve data from pipeline cache object.\n","sig":null,"attributes":[{"value":"/ Retrieve data from pipeline cache object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75794,"byte_end":75839,"line_start":478,"line_end":478,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":76052,"byte_end":76073,"line_start":485,"line_end":485,"column_start":15,"column_end":36},"name":"merge_pipeline_caches","qualname":"::device::Device::merge_pipeline_caches","value":"fn <I> (&self, target: &B::PipelineCache, sources: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Merge a number of source pipeline caches into the target one.\n","sig":null,"attributes":[{"value":"/ Merge a number of source pipeline caches into the target one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":75972,"byte_end":76037,"line_start":484,"line_end":484,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":76315,"byte_end":76337,"line_start":495,"line_end":495,"column_start":15,"column_end":37},"name":"destroy_pipeline_cache","qualname":"::device::Device::destroy_pipeline_cache","value":"fn (&self, cache: B::PipelineCache) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a pipeline cache object.\n","sig":null,"attributes":[{"value":"/ Destroy a pipeline cache object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":76264,"byte_end":76300,"line_start":494,"line_end":494,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":76422,"byte_end":76446,"line_start":498,"line_end":498,"column_start":15,"column_end":39},"name":"create_graphics_pipeline","qualname":"::device::Device::create_graphics_pipeline","value":"fn <'a> (&self, desc: &pso::GraphicsPipelineDesc<'a, B>, cache: Option<&B::PipelineCache>) -> Result<B::GraphicsPipeline, pso::CreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a graphics pipeline.\n","sig":null,"attributes":[{"value":"/ Create a graphics pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":76376,"byte_end":76407,"line_start":497,"line_end":497,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":76666,"byte_end":76691,"line_start":505,"line_end":505,"column_start":15,"column_end":40},"name":"create_graphics_pipelines","qualname":"::device::Device::create_graphics_pipelines","value":"fn <'a, I> (&self, descs: I, cache: Option<&B::PipelineCache>) -> Vec<Result<B::GraphicsPipeline, pso::CreationError>>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create graphics pipelines.\n","sig":null,"attributes":[{"value":"/ Create graphics pipelines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":76621,"byte_end":76651,"line_start":504,"line_end":504,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77304,"byte_end":77329,"line_start":524,"line_end":524,"column_start":15,"column_end":40},"name":"destroy_graphics_pipeline","qualname":"::device::Device::destroy_graphics_pipeline","value":"fn (&self, pipeline: B::GraphicsPipeline) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a graphics pipeline.","sig":null,"attributes":[{"value":"/ Destroy a graphics pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77087,"byte_end":77119,"line_start":520,"line_end":520,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77124,"byte_end":77127,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ The graphics pipeline shouldn't be destroyed before any submitted command buffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77132,"byte_end":77217,"line_start":522,"line_end":522,"column_start":5,"column_end":90}},{"value":"/ which references the graphics pipeline, has finished execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77222,"byte_end":77289,"line_start":523,"line_end":523,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77419,"byte_end":77442,"line_start":527,"line_end":527,"column_start":15,"column_end":38},"name":"create_compute_pipeline","qualname":"::device::Device::create_compute_pipeline","value":"fn <'a> (&self, desc: &pso::ComputePipelineDesc<'a, B>, cache: Option<&B::PipelineCache>) -> Result<B::ComputePipeline, pso::CreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a compute pipeline.\n","sig":null,"attributes":[{"value":"/ Create a compute pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77374,"byte_end":77404,"line_start":526,"line_end":526,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77659,"byte_end":77683,"line_start":534,"line_end":534,"column_start":15,"column_end":39},"name":"create_compute_pipelines","qualname":"::device::Device::create_compute_pipelines","value":"fn <'a, I> (&self, descs: I, cache: Option<&B::PipelineCache>) -> Vec<Result<B::ComputePipeline, pso::CreationError>>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create compute pipelines.\n","sig":null,"attributes":[{"value":"/ Create compute pipelines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":77615,"byte_end":77644,"line_start":533,"line_end":533,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78290,"byte_end":78314,"line_start":553,"line_end":553,"column_start":15,"column_end":39},"name":"destroy_compute_pipeline","qualname":"::device::Device::destroy_compute_pipeline","value":"fn (&self, pipeline: B::ComputePipeline) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a compute pipeline.","sig":null,"attributes":[{"value":"/ Destroy a compute pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78076,"byte_end":78107,"line_start":549,"line_end":549,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78112,"byte_end":78115,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ The compute pipeline shouldn't be destroyed before any submitted command buffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78120,"byte_end":78204,"line_start":551,"line_end":551,"column_start":5,"column_end":89}},{"value":"/ which references the compute pipeline, has finished execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78209,"byte_end":78275,"line_start":552,"line_end":552,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78525,"byte_end":78543,"line_start":559,"line_end":559,"column_start":15,"column_end":33},"name":"create_framebuffer","qualname":"::device::Device::create_framebuffer","value":"fn <I> (&self, pass: &B::RenderPass, attachments: I, extent: image::Extent) -> Result<B::Framebuffer, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new framebuffer object.","sig":null,"attributes":[{"value":"/ Create a new framebuffer object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78358,"byte_end":78394,"line_start":555,"line_end":555,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78399,"byte_end":78402,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78407,"byte_end":78419,"line_start":557,"line_end":557,"column_start":5,"column_end":17}},{"value":"/ - `extent.width`, `extent.height` and `extent.depth` **must** be greater than `0`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78424,"byte_end":78510,"line_start":558,"line_end":558,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78969,"byte_end":78988,"line_start":573,"line_end":573,"column_start":15,"column_end":34},"name":"destroy_framebuffer","qualname":"::device::Device::destroy_framebuffer","value":"fn (&self, buf: B::Framebuffer) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a framebuffer.","sig":null,"attributes":[{"value":"/ Destroy a framebuffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78772,"byte_end":78798,"line_start":569,"line_end":569,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78803,"byte_end":78806,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ The framebuffer shouldn't be destroy before any submitted command buffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78811,"byte_end":78888,"line_start":571,"line_end":571,"column_start":5,"column_end":82}},{"value":"/ which references the framebuffer, has finished execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":78893,"byte_end":78954,"line_start":572,"line_end":572,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79299,"byte_end":79319,"line_start":579,"line_end":579,"column_start":15,"column_end":35},"name":"create_shader_module","qualname":"::device::Device::create_shader_module","value":"fn (&self, spirv_data: &[u32]) -> Result<B::ShaderModule, ShaderError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new shader module object through the SPIR-V binary data.","sig":null,"attributes":[{"value":"/ Create a new shader module object through the SPIR-V binary data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79023,"byte_end":79092,"line_start":575,"line_end":575,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79097,"byte_end":79100,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Once a shader module has been created, any entry points it contains can be used in pipeline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79105,"byte_end":79200,"line_start":577,"line_end":577,"column_start":5,"column_end":100}},{"value":"/ shader stages as described in *Compute Pipelines* and *Graphics Pipelines*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79205,"byte_end":79284,"line_start":578,"line_end":578,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79574,"byte_end":79595,"line_start":587,"line_end":587,"column_start":15,"column_end":36},"name":"destroy_shader_module","qualname":"::device::Device::destroy_shader_module","value":"fn (&self, shader: B::ShaderModule) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a shader module module","sig":null,"attributes":[{"value":"/ Destroy a shader module module","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79416,"byte_end":79450,"line_start":584,"line_end":584,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79455,"byte_end":79458,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ A shader module can be destroyed while pipelines created using its shaders are still in use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79463,"byte_end":79559,"line_start":586,"line_end":586,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79785,"byte_end":79798,"line_start":592,"line_end":592,"column_start":15,"column_end":28},"name":"create_buffer","qualname":"::device::Device::create_buffer","value":"fn (&self, size: u64, usage: buffer::Usage) -> Result<B::Buffer, buffer::CreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new buffer (unbound).","sig":null,"attributes":[{"value":"/ Create a new buffer (unbound).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79634,"byte_end":79668,"line_start":589,"line_end":589,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79673,"byte_end":79676,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ The created buffer won't have associated memory until `bind_buffer_memory` is called.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79681,"byte_end":79770,"line_start":591,"line_end":591,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79977,"byte_end":80000,"line_start":599,"line_end":599,"column_start":15,"column_end":38},"name":"get_buffer_requirements","qualname":"::device::Device::get_buffer_requirements","value":"fn (&self, buf: &B::Buffer) -> Requirements","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Get memory requirements for the buffer\n","sig":null,"attributes":[{"value":"/ Get memory requirements for the buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":79920,"byte_end":79962,"line_start":598,"line_end":598,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80251,"byte_end":80269,"line_start":605,"line_end":605,"column_start":15,"column_end":33},"name":"bind_buffer_memory","qualname":"::device::Device::bind_buffer_memory","value":"fn (&self, memory: &B::Memory, offset: u64, buf: &mut B::Buffer) -> Result<(), BindError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Bind memory to a buffer.","sig":null,"attributes":[{"value":"/ Bind memory to a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80047,"byte_end":80075,"line_start":601,"line_end":601,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80080,"byte_end":80083,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Be sure to check that there is enough memory available for the buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80088,"byte_end":80162,"line_start":603,"line_end":603,"column_start":5,"column_end":79}},{"value":"/ Use `get_buffer_requirements` to acquire the memory requirements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80167,"byte_end":80236,"line_start":604,"line_end":604,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80585,"byte_end":80599,"line_start":616,"line_end":616,"column_start":15,"column_end":29},"name":"destroy_buffer","qualname":"::device::Device::destroy_buffer","value":"fn (&self, buffer: B::Buffer) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a buffer.","sig":null,"attributes":[{"value":"/ Destroy a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80401,"byte_end":80422,"line_start":612,"line_end":612,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80427,"byte_end":80430,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ The buffer shouldn't be destroyed before any submitted command buffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80435,"byte_end":80509,"line_start":614,"line_end":614,"column_start":5,"column_end":79}},{"value":"/ which references the images, has finished execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80514,"byte_end":80570,"line_start":615,"line_end":615,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80682,"byte_end":80700,"line_start":619,"line_end":619,"column_start":15,"column_end":33},"name":"create_buffer_view","qualname":"::device::Device::create_buffer_view","value":"fn (&self, buf: &B::Buffer, fmt: Option<format::Format>, range: buffer::SubRange) -> Result<B::BufferView, buffer::ViewCreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new buffer view object\n","sig":null,"attributes":[{"value":"/ Create a new buffer view object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80632,"byte_end":80667,"line_start":618,"line_end":618,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80923,"byte_end":80942,"line_start":627,"line_end":627,"column_start":15,"column_end":34},"name":"destroy_buffer_view","qualname":"::device::Device::destroy_buffer_view","value":"fn (&self, view: B::BufferView) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a buffer view object\n","sig":null,"attributes":[{"value":"/ Destroy a buffer view object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80876,"byte_end":80908,"line_start":626,"line_end":626,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81021,"byte_end":81033,"line_start":630,"line_end":630,"column_start":15,"column_end":27},"name":"create_image","qualname":"::device::Device::create_image","value":"fn (&self, kind: image::Kind, mip_levels: image::Level, format: format::Format, tiling: image::Tiling, usage: image::Usage, view_caps: image::ViewCapabilities) -> Result<B::Image, image::CreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new image object\n","sig":null,"attributes":[{"value":"/ Create a new image object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":80977,"byte_end":81006,"line_start":629,"line_end":629,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81357,"byte_end":81379,"line_start":641,"line_end":641,"column_start":15,"column_end":37},"name":"get_image_requirements","qualname":"::device::Device::get_image_requirements","value":"fn (&self, image: &B::Image) -> Requirements","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Get memory requirements for the Image\n","sig":null,"attributes":[{"value":"/ Get memory requirements for the Image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81301,"byte_end":81342,"line_start":640,"line_end":640,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81445,"byte_end":81476,"line_start":644,"line_end":644,"column_start":15,"column_end":46},"name":"get_image_subresource_footprint","qualname":"::device::Device::get_image_subresource_footprint","value":"fn (&self, image: &B::Image, subresource: image::Subresource) -> image::SubresourceFootprint","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81427,"byte_end":81430,"line_start":643,"line_end":643,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81659,"byte_end":81676,"line_start":651,"line_end":651,"column_start":15,"column_end":32},"name":"bind_image_memory","qualname":"::device::Device::bind_image_memory","value":"fn (&self, memory: &B::Memory, offset: u64, image: &mut B::Image) -> Result<(), BindError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Bind device memory to an image object\n","sig":null,"attributes":[{"value":"/ Bind device memory to an image object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81603,"byte_end":81644,"line_start":650,"line_end":650,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81992,"byte_end":82005,"line_start":662,"line_end":662,"column_start":15,"column_end":28},"name":"destroy_image","qualname":"::device::Device::destroy_image","value":"fn (&self, image: B::Image) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy an image.","sig":null,"attributes":[{"value":"/ Destroy an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81809,"byte_end":81830,"line_start":658,"line_end":658,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81835,"byte_end":81838,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ The image shouldn't be destroyed before any submitted command buffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81843,"byte_end":81916,"line_start":660,"line_end":660,"column_start":5,"column_end":78}},{"value":"/ which references the images, has finished execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":81921,"byte_end":81977,"line_start":661,"line_end":661,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82098,"byte_end":82115,"line_start":665,"line_end":665,"column_start":15,"column_end":32},"name":"create_image_view","qualname":"::device::Device::create_image_view","value":"fn (&self, image: &B::Image, view_kind: image::ViewKind, format: format::Format, swizzle: format::Swizzle, range: image::SubresourceRange) -> Result<B::ImageView, image::ViewCreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create an image view from an existing image\n","sig":null,"attributes":[{"value":"/ Create an image view from an existing image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82036,"byte_end":82083,"line_start":664,"line_end":664,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82409,"byte_end":82427,"line_start":675,"line_end":675,"column_start":15,"column_end":33},"name":"destroy_image_view","qualname":"::device::Device::destroy_image_view","value":"fn (&self, view: B::ImageView) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy an image view object\n","sig":null,"attributes":[{"value":"/ Destroy an image view object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82362,"byte_end":82394,"line_start":674,"line_end":674,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82507,"byte_end":82521,"line_start":678,"line_end":678,"column_start":15,"column_end":29},"name":"create_sampler","qualname":"::device::Device::create_sampler","value":"fn (&self, desc: &image::SamplerDesc) -> Result<B::Sampler, AllocationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new sampler object\n","sig":null,"attributes":[{"value":"/ Create a new sampler object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82461,"byte_end":82492,"line_start":677,"line_end":677,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82667,"byte_end":82682,"line_start":684,"line_end":684,"column_start":15,"column_end":30},"name":"destroy_sampler","qualname":"::device::Device::destroy_sampler","value":"fn (&self, sampler: B::Sampler) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a sampler object\n","sig":null,"attributes":[{"value":"/ Destroy a sampler object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82624,"byte_end":82652,"line_start":683,"line_end":683,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82915,"byte_end":82937,"line_start":690,"line_end":690,"column_start":15,"column_end":37},"name":"create_descriptor_pool","qualname":"::device::Device::create_descriptor_pool","value":"fn <I> (&self, max_sets: usize, descriptor_ranges: I, flags: DescriptorPoolCreateFlags) -> Result<B::DescriptorPool, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a descriptor pool.","sig":null,"attributes":[{"value":"/ Create a descriptor pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82717,"byte_end":82746,"line_start":686,"line_end":686,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82751,"byte_end":82754,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ Descriptor pools allow allocation of descriptor sets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82759,"byte_end":82816,"line_start":688,"line_end":688,"column_start":5,"column_end":62}},{"value":"/ The pool can't be modified directly, only through updating descriptor sets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":82821,"byte_end":82900,"line_start":689,"line_end":689,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83495,"byte_end":83518,"line_start":705,"line_end":705,"column_start":15,"column_end":38},"name":"destroy_descriptor_pool","qualname":"::device::Device::destroy_descriptor_pool","value":"fn (&self, pool: B::DescriptorPool) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a descriptor pool object","sig":null,"attributes":[{"value":"/ Destroy a descriptor pool object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83193,"byte_end":83229,"line_start":700,"line_end":700,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83234,"byte_end":83237,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ When a pool is destroyed, all descriptor sets allocated from the pool are implicitly freed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83242,"byte_end":83336,"line_start":702,"line_end":702,"column_start":5,"column_end":99}},{"value":"/ and become invalid. Descriptor sets allocated from a given pool do not need to be freed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83341,"byte_end":83432,"line_start":703,"line_end":703,"column_start":5,"column_end":96}},{"value":"/ before destroying that descriptor pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83437,"byte_end":83480,"line_start":704,"line_end":704,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83997,"byte_end":84025,"line_start":713,"line_end":713,"column_start":15,"column_end":43},"name":"create_descriptor_set_layout","qualname":"::device::Device::create_descriptor_set_layout","value":"fn <I, J> (&self, bindings: I, immutable_samplers: J) -> Result<B::DescriptorSetLayout, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a descriptor set layout.","sig":null,"attributes":[{"value":"/ Create a descriptor set layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83557,"byte_end":83592,"line_start":707,"line_end":707,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83597,"byte_end":83600,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ A descriptor set layout object is defined by an array of zero or more descriptor bindings.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83605,"byte_end":83699,"line_start":709,"line_end":709,"column_start":5,"column_end":99}},{"value":"/ Each individual descriptor binding is specified by a descriptor type, a count (array size)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83704,"byte_end":83798,"line_start":710,"line_end":710,"column_start":5,"column_end":99}},{"value":"/ of the number of descriptors in the binding, a set of shader stages that **can** access the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83803,"byte_end":83898,"line_start":711,"line_end":711,"column_start":5,"column_end":100}},{"value":"/ binding, and (if using immutable samplers) an array of sampler descriptors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":83903,"byte_end":83982,"line_start":712,"line_end":712,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":84370,"byte_end":84399,"line_start":725,"line_end":725,"column_start":15,"column_end":44},"name":"destroy_descriptor_set_layout","qualname":"::device::Device::destroy_descriptor_set_layout","value":"fn (&self, layout: B::DescriptorSetLayout) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a descriptor set layout object\n","sig":null,"attributes":[{"value":"/ Destroy a descriptor set layout object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":84313,"byte_end":84355,"line_start":724,"line_end":724,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":84525,"byte_end":84546,"line_start":728,"line_end":728,"column_start":15,"column_end":36},"name":"write_descriptor_sets","qualname":"::device::Device::write_descriptor_sets","value":"fn <'a, I, J> (&self, write_iter: I) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Specifying the parameters of a descriptor set write operation\n","sig":null,"attributes":[{"value":"/ Specifying the parameters of a descriptor set write operation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":84445,"byte_end":84510,"line_start":727,"line_end":727,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":84806,"byte_end":84826,"line_start":735,"line_end":735,"column_start":15,"column_end":35},"name":"copy_descriptor_sets","qualname":"::device::Device::copy_descriptor_sets","value":"fn <'a, I> (&self, copy_iter: I) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Structure specifying a copy descriptor set operation\n","sig":null,"attributes":[{"value":"/ Structure specifying a copy descriptor set operation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":84735,"byte_end":84791,"line_start":734,"line_end":734,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85139,"byte_end":85149,"line_start":743,"line_end":743,"column_start":15,"column_end":25},"name":"map_memory","qualname":"::device::Device::map_memory","value":"fn (&self, memory: &B::Memory, segment: Segment) -> Result<*mut u8, MapError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Map a memory object into application address space","sig":null,"attributes":[{"value":"/ Map a memory object into application address space","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":84951,"byte_end":85005,"line_start":740,"line_end":740,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85010,"byte_end":85013,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ Call `map_memory()` to retrieve a host virtual address pointer to a region of a mappable memory object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85018,"byte_end":85124,"line_start":742,"line_end":742,"column_start":5,"column_end":111}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85275,"byte_end":85301,"line_start":746,"line_end":746,"column_start":15,"column_end":41},"name":"flush_mapped_memory_ranges","qualname":"::device::Device::flush_mapped_memory_ranges","value":"fn <'a, I> (&self, ranges: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Flush mapped memory ranges\n","sig":null,"attributes":[{"value":"/ Flush mapped memory ranges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85230,"byte_end":85260,"line_start":745,"line_end":745,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85525,"byte_end":85556,"line_start":752,"line_end":752,"column_start":15,"column_end":46},"name":"invalidate_mapped_memory_ranges","qualname":"::device::Device::invalidate_mapped_memory_ranges","value":"fn <'a, I> (&self, ranges: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Invalidate ranges of non-coherent memory from the host caches\n","sig":null,"attributes":[{"value":"/ Invalidate ranges of non-coherent memory from the host caches","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85445,"byte_end":85510,"line_start":751,"line_end":751,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85802,"byte_end":85814,"line_start":758,"line_end":758,"column_start":15,"column_end":27},"name":"unmap_memory","qualname":"::device::Device::unmap_memory","value":"fn (&self, memory: &B::Memory) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Unmap a memory object once host access to it is no longer needed by the application\n","sig":null,"attributes":[{"value":"/ Unmap a memory object once host access to it is no longer needed by the application","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85700,"byte_end":85787,"line_start":757,"line_end":757,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85889,"byte_end":85905,"line_start":761,"line_end":761,"column_start":8,"column_end":24},"name":"create_semaphore","qualname":"::device::Device::create_semaphore","value":"fn (&self) -> Result<B::Semaphore, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new semaphore object\n","sig":null,"attributes":[{"value":"/ Create a new semaphore object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85848,"byte_end":85881,"line_start":760,"line_end":760,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86001,"byte_end":86018,"line_start":764,"line_end":764,"column_start":15,"column_end":32},"name":"destroy_semaphore","qualname":"::device::Device::destroy_semaphore","value":"fn (&self, semaphore: B::Semaphore) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a semaphore object\n","sig":null,"attributes":[{"value":"/ Destroy a semaphore object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":85956,"byte_end":85986,"line_start":763,"line_end":763,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86591,"byte_end":86603,"line_start":773,"line_end":773,"column_start":8,"column_end":20},"name":"create_fence","qualname":"::device::Device::create_fence","value":"fn (&self, signaled: bool) -> Result<B::Fence, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new fence object","sig":null,"attributes":[{"value":"/ Create a new fence object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86057,"byte_end":86086,"line_start":766,"line_end":766,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86091,"byte_end":86094,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ Fences are a synchronization primitive that **can** be used to insert a dependency from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86099,"byte_end":86190,"line_start":768,"line_end":768,"column_start":5,"column_end":96}},{"value":"/ a queue to the host. Fences have two states - signaled and unsignaled. A fence **can** be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86195,"byte_end":86288,"line_start":769,"line_end":769,"column_start":5,"column_end":98}},{"value":"/ signaled as part of the execution of a *queue submission* command. Fences **can** be unsignaled","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86293,"byte_end":86392,"line_start":770,"line_end":770,"column_start":5,"column_end":104}},{"value":"/ on the host with *reset_fences*. Fences **can** be waited on by the host with the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86397,"byte_end":86482,"line_start":771,"line_end":771,"column_start":5,"column_end":90}},{"value":"/ *wait_for_fences* command, and the current state **can** be queried with *get_fence_status*.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86487,"byte_end":86583,"line_start":772,"line_end":772,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86684,"byte_end":86695,"line_start":776,"line_end":776,"column_start":15,"column_end":26},"name":"reset_fence","qualname":"::device::Device::reset_fence","value":"fn (&self, fence: &B::Fence) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86666,"byte_end":86669,"line_start":775,"line_end":775,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86824,"byte_end":86836,"line_start":781,"line_end":781,"column_start":15,"column_end":27},"name":"reset_fences","qualname":"::device::Device::reset_fences","value":"fn <I> (&self, fences: I) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":86806,"byte_end":86809,"line_start":780,"line_end":780,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":87201,"byte_end":87215,"line_start":794,"line_end":794,"column_start":15,"column_end":29},"name":"wait_for_fence","qualname":"::device::Device::wait_for_fence","value":"fn (&self, fence: &B::Fence, timeout_ns: u64) -> Result<bool, OomOrDeviceLost>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Blocks until the given fence is signaled.\n Returns true if the fence was signaled before the timeout.\n","sig":null,"attributes":[{"value":"/ Blocks until the given fence is signaled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":87074,"byte_end":87119,"line_start":792,"line_end":792,"column_start":5,"column_end":50}},{"value":"/ Returns true if the fence was signaled before the timeout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":87124,"byte_end":87186,"line_start":793,"line_end":793,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":87550,"byte_end":87565,"line_start":804,"line_end":804,"column_start":15,"column_end":30},"name":"wait_for_fences","qualname":"::device::Device::wait_for_fences","value":"fn <I> (&self, fences: I, wait: WaitFor, timeout_ns: u64) -> Result<bool, OomOrDeviceLost>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Blocks until all or one of the given fences are signaled.\n Returns true if fences were signaled before the timeout.\n","sig":null,"attributes":[{"value":"/ Blocks until all or one of the given fences are signaled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":87409,"byte_end":87470,"line_start":802,"line_end":802,"column_start":5,"column_end":66}},{"value":"/ Returns true if fences were signaled before the timeout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":87475,"byte_end":87535,"line_start":803,"line_end":803,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89201,"byte_end":89217,"line_start":853,"line_end":853,"column_start":15,"column_end":31},"name":"get_fence_status","qualname":"::device::Device::get_fence_status","value":"fn (&self, fence: &B::Fence) -> Result<bool, DeviceLost>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" true for signaled, false for not ready\n","sig":null,"attributes":[{"value":"/ true for signaled, false for not ready","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89144,"byte_end":89186,"line_start":852,"line_end":852,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89318,"byte_end":89331,"line_start":856,"line_end":856,"column_start":15,"column_end":28},"name":"destroy_fence","qualname":"::device::Device::destroy_fence","value":"fn (&self, fence: B::Fence) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a fence object\n","sig":null,"attributes":[{"value":"/ Destroy a fence object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89277,"byte_end":89303,"line_start":855,"line_end":855,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89397,"byte_end":89409,"line_start":859,"line_end":859,"column_start":8,"column_end":20},"name":"create_event","qualname":"::device::Device::create_event","value":"fn (&self) -> Result<B::Event, OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create an event object.\n","sig":null,"attributes":[{"value":"/ Create an event object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89362,"byte_end":89389,"line_start":858,"line_end":858,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89499,"byte_end":89512,"line_start":862,"line_end":862,"column_start":15,"column_end":28},"name":"destroy_event","qualname":"::device::Device::destroy_event","value":"fn (&self, event: B::Event) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy an event object.\n","sig":null,"attributes":[{"value":"/ Destroy an event object.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89456,"byte_end":89484,"line_start":861,"line_end":861,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89670,"byte_end":89686,"line_start":867,"line_end":867,"column_start":15,"column_end":31},"name":"get_event_status","qualname":"::device::Device::get_event_status","value":"fn (&self, event: &B::Event) -> Result<bool, OomOrDeviceLost>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Query the status of an event.","sig":null,"attributes":[{"value":"/ Query the status of an event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89543,"byte_end":89576,"line_start":864,"line_end":864,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89581,"byte_end":89584,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the event is set, or `false` if it is reset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89589,"byte_end":89655,"line_start":866,"line_end":866,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89784,"byte_end":89793,"line_start":870,"line_end":870,"column_start":15,"column_end":24},"name":"set_event","qualname":"::device::Device::set_event","value":"fn (&self, event: &B::Event) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Sets an event.\n","sig":null,"attributes":[{"value":"/ Sets an event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89751,"byte_end":89769,"line_start":869,"line_end":869,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89887,"byte_end":89898,"line_start":873,"line_end":873,"column_start":15,"column_end":26},"name":"reset_event","qualname":"::device::Device::reset_event","value":"fn (&self, event: &B::Event) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Resets an event.\n","sig":null,"attributes":[{"value":"/ Resets an event.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89852,"byte_end":89872,"line_start":872,"line_end":872,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90162,"byte_end":90179,"line_start":879,"line_end":879,"column_start":15,"column_end":32},"name":"create_query_pool","qualname":"::device::Device::create_query_pool","value":"fn (&self, ty: query::Type, count: query::Id) -> Result<B::QueryPool, query::CreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new query pool object","sig":null,"attributes":[{"value":"/ Create a new query pool object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89957,"byte_end":89991,"line_start":875,"line_end":875,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":89996,"byte_end":89999,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Queries are managed using query pool objects. Each query pool is a collection of a specific","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90004,"byte_end":90099,"line_start":877,"line_end":877,"column_start":5,"column_end":100}},{"value":"/ number of queries of a particular type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90104,"byte_end":90147,"line_start":878,"line_end":878,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90351,"byte_end":90369,"line_start":886,"line_end":886,"column_start":15,"column_end":33},"name":"destroy_query_pool","qualname":"::device::Device::destroy_query_pool","value":"fn (&self, pool: B::QueryPool) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Destroy a query pool object\n","sig":null,"attributes":[{"value":"/ Destroy a query pool object","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90305,"byte_end":90336,"line_start":885,"line_end":885,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90586,"byte_end":90608,"line_start":890,"line_end":890,"column_start":15,"column_end":37},"name":"get_query_pool_results","qualname":"::device::Device::get_query_pool_results","value":"fn (&self, pool: &B::QueryPool, queries: Range<query::Id>, data: &mut [u8], stride: buffer::Offset, flags: query::ResultFlags) -> Result<bool, OomOrDeviceLost>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Get query pool results into the specified CPU memory.\n Returns `Ok(false)` if the results are not ready yet and neither of `WAIT` or `PARTIAL` flags are set.\n","sig":null,"attributes":[{"value":"/ Get query pool results into the specified CPU memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90403,"byte_end":90460,"line_start":888,"line_end":888,"column_start":5,"column_end":62}},{"value":"/ Returns `Ok(false)` if the results are not ready yet and neither of `WAIT` or `PARTIAL` flags are set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90465,"byte_end":90571,"line_start":889,"line_end":889,"column_start":5,"column_end":111}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91909,"byte_end":91925,"line_start":926,"line_end":926,"column_start":15,"column_end":31},"name":"create_swapchain","qualname":"::device::Device::create_swapchain","value":"fn (&self, surface: &mut B::Surface, config: SwapchainConfig, old_swapchain: Option<B::Swapchain>) -> Result<(B::Swapchain, Vec<B::Image>), window::CreationError>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Create a new swapchain from a surface and a queue family, optionally providing the old\n swapchain to aid in resource reuse and rendering continuity.","sig":null,"attributes":[{"value":"/ Create a new swapchain from a surface and a queue family, optionally providing the old","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90826,"byte_end":90916,"line_start":899,"line_end":899,"column_start":5,"column_end":95}},{"value":"/ swapchain to aid in resource reuse and rendering continuity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90921,"byte_end":90985,"line_start":900,"line_end":900,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90990,"byte_end":90993,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ *Note*: The number of exposed images in the back buffer might differ","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":90998,"byte_end":91070,"line_start":902,"line_end":902,"column_start":5,"column_end":77}},{"value":"/ from number of internally used buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91075,"byte_end":91118,"line_start":903,"line_end":903,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91123,"byte_end":91126,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91131,"byte_end":91143,"line_start":905,"line_end":905,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91148,"byte_end":91151,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ The queue family _must_ support surface presentation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91156,"byte_end":91213,"line_start":907,"line_end":907,"column_start":5,"column_end":62}},{"value":"/ This can be checked by calling [`supports_queue_family`](trait.Surface.html#tymethod.supports_queue_family)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91218,"byte_end":91329,"line_start":908,"line_end":908,"column_start":5,"column_end":116}},{"value":"/ on this surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91334,"byte_end":91354,"line_start":909,"line_end":909,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91359,"byte_end":91362,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91367,"byte_end":91381,"line_start":911,"line_end":911,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91386,"byte_end":91389,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91394,"byte_end":91407,"line_start":913,"line_end":913,"column_start":5,"column_end":18}},{"value":"/ # extern crate gfx_backend_empty as empty;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91412,"byte_end":91458,"line_start":914,"line_end":914,"column_start":5,"column_end":51}},{"value":"/ # extern crate gfx_hal;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91463,"byte_end":91490,"line_start":915,"line_end":915,"column_start":5,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91495,"byte_end":91512,"line_start":916,"line_end":916,"column_start":5,"column_end":22}},{"value":"/ use gfx_hal::{prelude::*, format::Format, window::SwapchainConfig};","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91517,"byte_end":91588,"line_start":917,"line_end":917,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91593,"byte_end":91596,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ # let mut surface: empty::Surface = return;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91601,"byte_end":91648,"line_start":919,"line_end":919,"column_start":5,"column_end":52}},{"value":"/ # let device: empty::Device = return;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91653,"byte_end":91694,"line_start":920,"line_end":920,"column_start":5,"column_end":46}},{"value":"/ # unsafe {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91699,"byte_end":91713,"line_start":921,"line_end":921,"column_start":5,"column_end":19}},{"value":"/ let swapchain_config = SwapchainConfig::new(100, 100, Format::Rgba8Srgb, 2);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91718,"byte_end":91798,"line_start":922,"line_end":922,"column_start":5,"column_end":85}},{"value":"/ device.create_swapchain(&mut surface, swapchain_config, None);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91803,"byte_end":91869,"line_start":923,"line_end":923,"column_start":5,"column_end":71}},{"value":"/ # }}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91874,"byte_end":91882,"line_start":924,"line_end":924,"column_start":5,"column_end":13}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":91887,"byte_end":91894,"line_start":925,"line_end":925,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92148,"byte_end":92165,"line_start":934,"line_end":934,"column_start":15,"column_end":32},"name":"destroy_swapchain","qualname":"::device::Device::destroy_swapchain","value":"fn (&self, swapchain: B::Swapchain) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92130,"byte_end":92133,"line_start":933,"line_end":933,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92355,"byte_end":92364,"line_start":939,"line_end":939,"column_start":8,"column_end":17},"name":"wait_idle","qualname":"::device::Device::wait_idle","value":"fn (&self) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Wait for all queues associated with this device to idle.","sig":null,"attributes":[{"value":"/ Wait for all queues associated with this device to idle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92204,"byte_end":92264,"line_start":936,"line_end":936,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92269,"byte_end":92272,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Host access to all queues needs to be **externally** sycnhronized!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92277,"byte_end":92347,"line_start":938,"line_end":938,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92603,"byte_end":92617,"line_start":943,"line_end":943,"column_start":15,"column_end":29},"name":"set_image_name","qualname":"::device::Device::set_image_name","value":"fn (&self, image: &mut B::Image, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with an image, for easier debugging in external tools or with validation\n layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with an image, for easier debugging in external tools or with validation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92405,"byte_end":92498,"line_start":941,"line_end":941,"column_start":5,"column_end":98}},{"value":"/ layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92503,"byte_end":92588,"line_start":942,"line_end":942,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92862,"byte_end":92877,"line_start":946,"line_end":946,"column_start":15,"column_end":30},"name":"set_buffer_name","qualname":"::device::Device::set_buffer_name","value":"fn (&self, buffer: &mut B::Buffer, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a buffer, for easier debugging in external tools or with validation\n layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a buffer, for easier debugging in external tools or with validation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92664,"byte_end":92757,"line_start":944,"line_end":944,"column_start":5,"column_end":98}},{"value":"/ layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92762,"byte_end":92847,"line_start":945,"line_end":945,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93132,"byte_end":93155,"line_start":949,"line_end":949,"column_start":15,"column_end":38},"name":"set_command_buffer_name","qualname":"::device::Device::set_command_buffer_name","value":"fn (&self, command_buffer: &mut B::CommandBuffer, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a command buffer, for easier debugging in external tools or with\n validation layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a command buffer, for easier debugging in external tools or with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":92926,"byte_end":93016,"line_start":947,"line_end":947,"column_start":5,"column_end":95}},{"value":"/ validation layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93021,"byte_end":93117,"line_start":948,"line_end":948,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93420,"byte_end":93438,"line_start":952,"line_end":952,"column_start":15,"column_end":33},"name":"set_semaphore_name","qualname":"::device::Device::set_semaphore_name","value":"fn (&self, semaphore: &mut B::Semaphore, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a semaphore, for easier debugging in external tools or with validation\n layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a semaphore, for easier debugging in external tools or with validation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93219,"byte_end":93315,"line_start":950,"line_end":950,"column_start":5,"column_end":101}},{"value":"/ layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93320,"byte_end":93405,"line_start":951,"line_end":951,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93690,"byte_end":93704,"line_start":955,"line_end":955,"column_start":15,"column_end":29},"name":"set_fence_name","qualname":"::device::Device::set_fence_name","value":"fn (&self, fence: &mut B::Fence, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a fence, for easier debugging in external tools or with validation\n layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a fence, for easier debugging in external tools or with validation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93493,"byte_end":93585,"line_start":953,"line_end":953,"column_start":5,"column_end":97}},{"value":"/ layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93590,"byte_end":93675,"line_start":954,"line_end":954,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93954,"byte_end":93974,"line_start":958,"line_end":958,"column_start":15,"column_end":35},"name":"set_framebuffer_name","qualname":"::device::Device::set_framebuffer_name","value":"fn (&self, framebuffer: &mut B::Framebuffer, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a framebuffer, for easier debugging in external tools or with\n validation layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a framebuffer, for easier debugging in external tools or with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93751,"byte_end":93838,"line_start":956,"line_end":956,"column_start":5,"column_end":92}},{"value":"/ validation layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":93843,"byte_end":93939,"line_start":957,"line_end":957,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94236,"byte_end":94256,"line_start":961,"line_end":961,"column_start":15,"column_end":35},"name":"set_render_pass_name","qualname":"::device::Device::set_render_pass_name","value":"fn (&self, render_pass: &mut B::RenderPass, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a render pass, for easier debugging in external tools or with\n validation layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a render pass, for easier debugging in external tools or with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94033,"byte_end":94120,"line_start":959,"line_end":959,"column_start":5,"column_end":92}},{"value":"/ validation layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94125,"byte_end":94221,"line_start":960,"line_end":960,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94520,"byte_end":94543,"line_start":964,"line_end":964,"column_start":15,"column_end":38},"name":"set_descriptor_set_name","qualname":"::device::Device::set_descriptor_set_name","value":"fn (&self, descriptor_set: &mut B::DescriptorSet, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a descriptor set, for easier debugging in external tools or with\n validation layers that can print a friendly name when referring to objects in error messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a descriptor set, for easier debugging in external tools or with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94314,"byte_end":94404,"line_start":962,"line_end":962,"column_start":5,"column_end":95}},{"value":"/ validation layers that can print a friendly name when referring to objects in error messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94409,"byte_end":94505,"line_start":963,"line_end":963,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94828,"byte_end":94858,"line_start":968,"line_end":968,"column_start":15,"column_end":45},"name":"set_descriptor_set_layout_name","qualname":"::device::Device::set_descriptor_set_layout_name","value":"fn (&self, descriptor_set_layout: &mut B::DescriptorSetLayout, name: &str) -> ()","parent":{"krate":0,"index":258},"children":[],"decl_id":null,"docs":" Associate a name with a descriptor set layout, for easier debugging in external tools or\n with validation layers that can print a friendly name when referring to objects in error\n messages\n","sig":null,"attributes":[{"value":"/ Associate a name with a descriptor set layout, for easier debugging in external tools or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94607,"byte_end":94699,"line_start":965,"line_end":965,"column_start":5,"column_end":97}},{"value":"/ with validation layers that can print a friendly name when referring to objects in error","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94704,"byte_end":94796,"line_start":966,"line_end":966,"column_start":5,"column_end":97}},{"value":"/ messages","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":94801,"byte_end":94813,"line_start":967,"line_end":967,"column_start":5,"column_end":17}}]},{"kind":"Mod","id":{"krate":0,"index":370},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","parent":null,"children":[{"krate":0,"index":1715},{"krate":0,"index":1737},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1728},{"krate":0,"index":1722},{"krate":0,"index":1720},{"krate":0,"index":1717},{"krate":0,"index":1738},{"krate":0,"index":1745},{"krate":0,"index":1747},{"krate":0,"index":1749},{"krate":0,"index":1751},{"krate":0,"index":1753},{"krate":0,"index":1762},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1811},{"krate":0,"index":1849},{"krate":0,"index":1848},{"krate":0,"index":1846},{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1840},{"krate":0,"index":1838},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1816},{"krate":0,"index":371},{"krate":0,"index":1851},{"krate":0,"index":1889},{"krate":0,"index":1888},{"krate":0,"index":1886},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1880},{"krate":0,"index":1878},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1856},{"krate":0,"index":373},{"krate":0,"index":1891},{"krate":0,"index":1926},{"krate":0,"index":1925},{"krate":0,"index":1923},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1917},{"krate":0,"index":1915},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1910},{"krate":0,"index":1928},{"krate":0,"index":1967},{"krate":0,"index":1966},{"krate":0,"index":1964},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1958},{"krate":0,"index":1956},{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1934},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":1969},{"krate":0,"index":1988},{"krate":0,"index":1986},{"krate":0,"index":1985},{"krate":0,"index":1983},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1973},{"krate":0,"index":1990},{"krate":0,"index":2013},{"krate":0,"index":2012},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2003},{"krate":0,"index":1997},{"krate":0,"index":1995},{"krate":0,"index":1992},{"krate":0,"index":2015},{"krate":0,"index":2028},{"krate":0,"index":2030},{"krate":0,"index":2032},{"krate":0,"index":2034},{"krate":0,"index":2036},{"krate":0,"index":2051},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2059},{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":2069},{"krate":0,"index":2071},{"krate":0,"index":2074},{"krate":0,"index":2077},{"krate":0,"index":2118},{"krate":0,"index":2141},{"krate":0,"index":2140},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2131},{"krate":0,"index":2125},{"krate":0,"index":2123},{"krate":0,"index":2120},{"krate":0,"index":2143},{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2155},{"krate":0,"index":2157},{"krate":0,"index":2159},{"krate":0,"index":2169},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2179},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2187},{"krate":0,"index":2189},{"krate":0,"index":2192},{"krate":0,"index":2195},{"krate":0,"index":2221},{"krate":0,"index":2256},{"krate":0,"index":2255},{"krate":0,"index":2253},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2247},{"krate":0,"index":2245},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2240},{"krate":0,"index":378},{"krate":0,"index":2261},{"krate":0,"index":2408},{"krate":0,"index":2407},{"krate":0,"index":2405},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2399},{"krate":0,"index":2397},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2392},{"krate":0,"index":2258},{"krate":0,"index":2410},{"krate":0,"index":2439},{"krate":0,"index":2438},{"krate":0,"index":2436},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2430},{"krate":0,"index":2428},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2414},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":2812},{"krate":0,"index":3200},{"krate":0,"index":3199},{"krate":0,"index":3197},{"krate":0,"index":3194},{"krate":0,"index":3195},{"krate":0,"index":3191},{"krate":0,"index":3189},{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3184},{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":3202},{"krate":0,"index":3220},{"krate":0,"index":3219},{"krate":0,"index":3217},{"krate":0,"index":3214},{"krate":0,"index":3215},{"krate":0,"index":3211},{"krate":0,"index":3209},{"krate":0,"index":3206},{"krate":0,"index":3207},{"krate":0,"index":3204},{"krate":0,"index":2444},{"krate":0,"index":3222},{"krate":0,"index":3240},{"krate":0,"index":3239},{"krate":0,"index":3237},{"krate":0,"index":3234},{"krate":0,"index":3235},{"krate":0,"index":3231},{"krate":0,"index":3229},{"krate":0,"index":3226},{"krate":0,"index":3227},{"krate":0,"index":3224},{"krate":0,"index":2446},{"krate":0,"index":3242},{"krate":0,"index":3260},{"krate":0,"index":3259},{"krate":0,"index":3257},{"krate":0,"index":3254},{"krate":0,"index":3255},{"krate":0,"index":3251},{"krate":0,"index":3249},{"krate":0,"index":3246},{"krate":0,"index":3247},{"krate":0,"index":3244},{"krate":0,"index":2448},{"krate":0,"index":3262},{"krate":0,"index":3280},{"krate":0,"index":3279},{"krate":0,"index":3277},{"krate":0,"index":3274},{"krate":0,"index":3275},{"krate":0,"index":3271},{"krate":0,"index":3269},{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3264},{"krate":0,"index":2450},{"krate":0,"index":3282},{"krate":0,"index":3300},{"krate":0,"index":3299},{"krate":0,"index":3297},{"krate":0,"index":3294},{"krate":0,"index":3295},{"krate":0,"index":3291},{"krate":0,"index":3289},{"krate":0,"index":3286},{"krate":0,"index":3287},{"krate":0,"index":3284},{"krate":0,"index":2452},{"krate":0,"index":3302},{"krate":0,"index":3320},{"krate":0,"index":3319},{"krate":0,"index":3317},{"krate":0,"index":3314},{"krate":0,"index":3315},{"krate":0,"index":3311},{"krate":0,"index":3309},{"krate":0,"index":3306},{"krate":0,"index":3307},{"krate":0,"index":3304},{"krate":0,"index":2454},{"krate":0,"index":3322},{"krate":0,"index":3340},{"krate":0,"index":3339},{"krate":0,"index":3337},{"krate":0,"index":3334},{"krate":0,"index":3335},{"krate":0,"index":3331},{"krate":0,"index":3329},{"krate":0,"index":3326},{"krate":0,"index":3327},{"krate":0,"index":3324},{"krate":0,"index":2456},{"krate":0,"index":3342},{"krate":0,"index":3360},{"krate":0,"index":3359},{"krate":0,"index":3357},{"krate":0,"index":3354},{"krate":0,"index":3355},{"krate":0,"index":3351},{"krate":0,"index":3349},{"krate":0,"index":3346},{"krate":0,"index":3347},{"krate":0,"index":3344},{"krate":0,"index":2458},{"krate":0,"index":3362},{"krate":0,"index":3380},{"krate":0,"index":3379},{"krate":0,"index":3377},{"krate":0,"index":3374},{"krate":0,"index":3375},{"krate":0,"index":3371},{"krate":0,"index":3369},{"krate":0,"index":3366},{"krate":0,"index":3367},{"krate":0,"index":3364},{"krate":0,"index":2460},{"krate":0,"index":3382},{"krate":0,"index":3400},{"krate":0,"index":3399},{"krate":0,"index":3397},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3391},{"krate":0,"index":3389},{"krate":0,"index":3386},{"krate":0,"index":3387},{"krate":0,"index":3384},{"krate":0,"index":2462},{"krate":0,"index":3402},{"krate":0,"index":3420},{"krate":0,"index":3419},{"krate":0,"index":3417},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3411},{"krate":0,"index":3409},{"krate":0,"index":3406},{"krate":0,"index":3407},{"krate":0,"index":3404},{"krate":0,"index":2464},{"krate":0,"index":3422},{"krate":0,"index":3440},{"krate":0,"index":3439},{"krate":0,"index":3437},{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3431},{"krate":0,"index":3429},{"krate":0,"index":3426},{"krate":0,"index":3427},{"krate":0,"index":3424},{"krate":0,"index":2466},{"krate":0,"index":3442},{"krate":0,"index":3460},{"krate":0,"index":3459},{"krate":0,"index":3457},{"krate":0,"index":3454},{"krate":0,"index":3455},{"krate":0,"index":3451},{"krate":0,"index":3449},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3444},{"krate":0,"index":2468},{"krate":0,"index":3462},{"krate":0,"index":3480},{"krate":0,"index":3479},{"krate":0,"index":3477},{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3471},{"krate":0,"index":3469},{"krate":0,"index":3466},{"krate":0,"index":3467},{"krate":0,"index":3464},{"krate":0,"index":2470},{"krate":0,"index":3482},{"krate":0,"index":3500},{"krate":0,"index":3499},{"krate":0,"index":3497},{"krate":0,"index":3494},{"krate":0,"index":3495},{"krate":0,"index":3491},{"krate":0,"index":3489},{"krate":0,"index":3486},{"krate":0,"index":3487},{"krate":0,"index":3484},{"krate":0,"index":2472},{"krate":0,"index":3502},{"krate":0,"index":3520},{"krate":0,"index":3519},{"krate":0,"index":3517},{"krate":0,"index":3514},{"krate":0,"index":3515},{"krate":0,"index":3511},{"krate":0,"index":3509},{"krate":0,"index":3506},{"krate":0,"index":3507},{"krate":0,"index":3504},{"krate":0,"index":2474},{"krate":0,"index":3522},{"krate":0,"index":3540},{"krate":0,"index":3539},{"krate":0,"index":3537},{"krate":0,"index":3534},{"krate":0,"index":3535},{"krate":0,"index":3531},{"krate":0,"index":3529},{"krate":0,"index":3526},{"krate":0,"index":3527},{"krate":0,"index":3524},{"krate":0,"index":2476},{"krate":0,"index":3542},{"krate":0,"index":3560},{"krate":0,"index":3559},{"krate":0,"index":3557},{"krate":0,"index":3554},{"krate":0,"index":3555},{"krate":0,"index":3551},{"krate":0,"index":3549},{"krate":0,"index":3546},{"krate":0,"index":3547},{"krate":0,"index":3544},{"krate":0,"index":2478},{"krate":0,"index":3562},{"krate":0,"index":3580},{"krate":0,"index":3579},{"krate":0,"index":3577},{"krate":0,"index":3574},{"krate":0,"index":3575},{"krate":0,"index":3571},{"krate":0,"index":3569},{"krate":0,"index":3566},{"krate":0,"index":3567},{"krate":0,"index":3564},{"krate":0,"index":2480},{"krate":0,"index":3582},{"krate":0,"index":3600},{"krate":0,"index":3599},{"krate":0,"index":3597},{"krate":0,"index":3594},{"krate":0,"index":3595},{"krate":0,"index":3591},{"krate":0,"index":3589},{"krate":0,"index":3586},{"krate":0,"index":3587},{"krate":0,"index":3584},{"krate":0,"index":2482},{"krate":0,"index":3602},{"krate":0,"index":3620},{"krate":0,"index":3619},{"krate":0,"index":3617},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3611},{"krate":0,"index":3609},{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3604},{"krate":0,"index":2484},{"krate":0,"index":3622},{"krate":0,"index":3640},{"krate":0,"index":3639},{"krate":0,"index":3637},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3631},{"krate":0,"index":3629},{"krate":0,"index":3626},{"krate":0,"index":3627},{"krate":0,"index":3624},{"krate":0,"index":2486},{"krate":0,"index":3642},{"krate":0,"index":3660},{"krate":0,"index":3659},{"krate":0,"index":3657},{"krate":0,"index":3654},{"krate":0,"index":3655},{"krate":0,"index":3651},{"krate":0,"index":3649},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3644},{"krate":0,"index":2488},{"krate":0,"index":3662},{"krate":0,"index":3680},{"krate":0,"index":3679},{"krate":0,"index":3677},{"krate":0,"index":3674},{"krate":0,"index":3675},{"krate":0,"index":3671},{"krate":0,"index":3669},{"krate":0,"index":3666},{"krate":0,"index":3667},{"krate":0,"index":3664},{"krate":0,"index":2490},{"krate":0,"index":3682},{"krate":0,"index":3700},{"krate":0,"index":3699},{"krate":0,"index":3697},{"krate":0,"index":3694},{"krate":0,"index":3695},{"krate":0,"index":3691},{"krate":0,"index":3689},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3684},{"krate":0,"index":2492},{"krate":0,"index":3702},{"krate":0,"index":3720},{"krate":0,"index":3719},{"krate":0,"index":3717},{"krate":0,"index":3714},{"krate":0,"index":3715},{"krate":0,"index":3711},{"krate":0,"index":3709},{"krate":0,"index":3706},{"krate":0,"index":3707},{"krate":0,"index":3704},{"krate":0,"index":2494},{"krate":0,"index":3722},{"krate":0,"index":3740},{"krate":0,"index":3739},{"krate":0,"index":3737},{"krate":0,"index":3734},{"krate":0,"index":3735},{"krate":0,"index":3731},{"krate":0,"index":3729},{"krate":0,"index":3726},{"krate":0,"index":3727},{"krate":0,"index":3724},{"krate":0,"index":2496},{"krate":0,"index":3742},{"krate":0,"index":3760},{"krate":0,"index":3759},{"krate":0,"index":3757},{"krate":0,"index":3754},{"krate":0,"index":3755},{"krate":0,"index":3751},{"krate":0,"index":3749},{"krate":0,"index":3746},{"krate":0,"index":3747},{"krate":0,"index":3744},{"krate":0,"index":2498},{"krate":0,"index":3762},{"krate":0,"index":3780},{"krate":0,"index":3779},{"krate":0,"index":3777},{"krate":0,"index":3774},{"krate":0,"index":3775},{"krate":0,"index":3771},{"krate":0,"index":3769},{"krate":0,"index":3766},{"krate":0,"index":3767},{"krate":0,"index":3764},{"krate":0,"index":2500},{"krate":0,"index":3782},{"krate":0,"index":3800},{"krate":0,"index":3799},{"krate":0,"index":3797},{"krate":0,"index":3794},{"krate":0,"index":3795},{"krate":0,"index":3791},{"krate":0,"index":3789},{"krate":0,"index":3786},{"krate":0,"index":3787},{"krate":0,"index":3784},{"krate":0,"index":2502},{"krate":0,"index":3802},{"krate":0,"index":3820},{"krate":0,"index":3819},{"krate":0,"index":3817},{"krate":0,"index":3814},{"krate":0,"index":3815},{"krate":0,"index":3811},{"krate":0,"index":3809},{"krate":0,"index":3806},{"krate":0,"index":3807},{"krate":0,"index":3804},{"krate":0,"index":2504},{"krate":0,"index":3822},{"krate":0,"index":3840},{"krate":0,"index":3839},{"krate":0,"index":3837},{"krate":0,"index":3834},{"krate":0,"index":3835},{"krate":0,"index":3831},{"krate":0,"index":3829},{"krate":0,"index":3826},{"krate":0,"index":3827},{"krate":0,"index":3824},{"krate":0,"index":2506},{"krate":0,"index":3842},{"krate":0,"index":3860},{"krate":0,"index":3859},{"krate":0,"index":3857},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3851},{"krate":0,"index":3849},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3844},{"krate":0,"index":2508},{"krate":0,"index":3862},{"krate":0,"index":3880},{"krate":0,"index":3879},{"krate":0,"index":3877},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3871},{"krate":0,"index":3869},{"krate":0,"index":3866},{"krate":0,"index":3867},{"krate":0,"index":3864},{"krate":0,"index":2510},{"krate":0,"index":3882},{"krate":0,"index":3900},{"krate":0,"index":3899},{"krate":0,"index":3897},{"krate":0,"index":3894},{"krate":0,"index":3895},{"krate":0,"index":3891},{"krate":0,"index":3889},{"krate":0,"index":3886},{"krate":0,"index":3887},{"krate":0,"index":3884},{"krate":0,"index":2512},{"krate":0,"index":3902},{"krate":0,"index":3920},{"krate":0,"index":3919},{"krate":0,"index":3917},{"krate":0,"index":3914},{"krate":0,"index":3915},{"krate":0,"index":3911},{"krate":0,"index":3909},{"krate":0,"index":3906},{"krate":0,"index":3907},{"krate":0,"index":3904},{"krate":0,"index":2514},{"krate":0,"index":3922},{"krate":0,"index":3940},{"krate":0,"index":3939},{"krate":0,"index":3937},{"krate":0,"index":3934},{"krate":0,"index":3935},{"krate":0,"index":3931},{"krate":0,"index":3929},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3924},{"krate":0,"index":2516},{"krate":0,"index":3942},{"krate":0,"index":3960},{"krate":0,"index":3959},{"krate":0,"index":3957},{"krate":0,"index":3954},{"krate":0,"index":3955},{"krate":0,"index":3951},{"krate":0,"index":3949},{"krate":0,"index":3946},{"krate":0,"index":3947},{"krate":0,"index":3944},{"krate":0,"index":2518},{"krate":0,"index":3962},{"krate":0,"index":3980},{"krate":0,"index":3979},{"krate":0,"index":3977},{"krate":0,"index":3974},{"krate":0,"index":3975},{"krate":0,"index":3971},{"krate":0,"index":3969},{"krate":0,"index":3966},{"krate":0,"index":3967},{"krate":0,"index":3964},{"krate":0,"index":2520},{"krate":0,"index":3982},{"krate":0,"index":4000},{"krate":0,"index":3999},{"krate":0,"index":3997},{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3991},{"krate":0,"index":3989},{"krate":0,"index":3986},{"krate":0,"index":3987},{"krate":0,"index":3984},{"krate":0,"index":2522},{"krate":0,"index":4002},{"krate":0,"index":4020},{"krate":0,"index":4019},{"krate":0,"index":4017},{"krate":0,"index":4014},{"krate":0,"index":4015},{"krate":0,"index":4011},{"krate":0,"index":4009},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4004},{"krate":0,"index":2524},{"krate":0,"index":4022},{"krate":0,"index":4040},{"krate":0,"index":4039},{"krate":0,"index":4037},{"krate":0,"index":4034},{"krate":0,"index":4035},{"krate":0,"index":4031},{"krate":0,"index":4029},{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4024},{"krate":0,"index":2526},{"krate":0,"index":4042},{"krate":0,"index":4060},{"krate":0,"index":4059},{"krate":0,"index":4057},{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4051},{"krate":0,"index":4049},{"krate":0,"index":4046},{"krate":0,"index":4047},{"krate":0,"index":4044},{"krate":0,"index":2528},{"krate":0,"index":4062},{"krate":0,"index":4080},{"krate":0,"index":4079},{"krate":0,"index":4077},{"krate":0,"index":4074},{"krate":0,"index":4075},{"krate":0,"index":4071},{"krate":0,"index":4069},{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4064},{"krate":0,"index":2530},{"krate":0,"index":4082},{"krate":0,"index":4100},{"krate":0,"index":4099},{"krate":0,"index":4097},{"krate":0,"index":4094},{"krate":0,"index":4095},{"krate":0,"index":4091},{"krate":0,"index":4089},{"krate":0,"index":4086},{"krate":0,"index":4087},{"krate":0,"index":4084},{"krate":0,"index":2532},{"krate":0,"index":4102},{"krate":0,"index":4120},{"krate":0,"index":4119},{"krate":0,"index":4117},{"krate":0,"index":4114},{"krate":0,"index":4115},{"krate":0,"index":4111},{"krate":0,"index":4109},{"krate":0,"index":4106},{"krate":0,"index":4107},{"krate":0,"index":4104},{"krate":0,"index":2534},{"krate":0,"index":4122},{"krate":0,"index":4140},{"krate":0,"index":4139},{"krate":0,"index":4137},{"krate":0,"index":4134},{"krate":0,"index":4135},{"krate":0,"index":4131},{"krate":0,"index":4129},{"krate":0,"index":4126},{"krate":0,"index":4127},{"krate":0,"index":4124},{"krate":0,"index":2536},{"krate":0,"index":4142},{"krate":0,"index":4160},{"krate":0,"index":4159},{"krate":0,"index":4157},{"krate":0,"index":4154},{"krate":0,"index":4155},{"krate":0,"index":4151},{"krate":0,"index":4149},{"krate":0,"index":4146},{"krate":0,"index":4147},{"krate":0,"index":4144},{"krate":0,"index":2538},{"krate":0,"index":4162},{"krate":0,"index":4180},{"krate":0,"index":4179},{"krate":0,"index":4177},{"krate":0,"index":4174},{"krate":0,"index":4175},{"krate":0,"index":4171},{"krate":0,"index":4169},{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4164},{"krate":0,"index":2540},{"krate":0,"index":4182},{"krate":0,"index":4200},{"krate":0,"index":4199},{"krate":0,"index":4197},{"krate":0,"index":4194},{"krate":0,"index":4195},{"krate":0,"index":4191},{"krate":0,"index":4189},{"krate":0,"index":4186},{"krate":0,"index":4187},{"krate":0,"index":4184},{"krate":0,"index":2542},{"krate":0,"index":4202},{"krate":0,"index":4220},{"krate":0,"index":4219},{"krate":0,"index":4217},{"krate":0,"index":4214},{"krate":0,"index":4215},{"krate":0,"index":4211},{"krate":0,"index":4209},{"krate":0,"index":4206},{"krate":0,"index":4207},{"krate":0,"index":4204},{"krate":0,"index":2544},{"krate":0,"index":4222},{"krate":0,"index":4240},{"krate":0,"index":4239},{"krate":0,"index":4237},{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4231},{"krate":0,"index":4229},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4224},{"krate":0,"index":2546},{"krate":0,"index":4242},{"krate":0,"index":4260},{"krate":0,"index":4259},{"krate":0,"index":4257},{"krate":0,"index":4254},{"krate":0,"index":4255},{"krate":0,"index":4251},{"krate":0,"index":4249},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":4244},{"krate":0,"index":2548},{"krate":0,"index":4262},{"krate":0,"index":4280},{"krate":0,"index":4279},{"krate":0,"index":4277},{"krate":0,"index":4274},{"krate":0,"index":4275},{"krate":0,"index":4271},{"krate":0,"index":4269},{"krate":0,"index":4266},{"krate":0,"index":4267},{"krate":0,"index":4264},{"krate":0,"index":2550},{"krate":0,"index":4282},{"krate":0,"index":4300},{"krate":0,"index":4299},{"krate":0,"index":4297},{"krate":0,"index":4294},{"krate":0,"index":4295},{"krate":0,"index":4291},{"krate":0,"index":4289},{"krate":0,"index":4286},{"krate":0,"index":4287},{"krate":0,"index":4284},{"krate":0,"index":2552},{"krate":0,"index":4302},{"krate":0,"index":4320},{"krate":0,"index":4319},{"krate":0,"index":4317},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4311},{"krate":0,"index":4309},{"krate":0,"index":4306},{"krate":0,"index":4307},{"krate":0,"index":4304},{"krate":0,"index":2554},{"krate":0,"index":4322},{"krate":0,"index":4340},{"krate":0,"index":4339},{"krate":0,"index":4337},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4331},{"krate":0,"index":4329},{"krate":0,"index":4326},{"krate":0,"index":4327},{"krate":0,"index":4324},{"krate":0,"index":2556},{"krate":0,"index":4342},{"krate":0,"index":4360},{"krate":0,"index":4359},{"krate":0,"index":4357},{"krate":0,"index":4354},{"krate":0,"index":4355},{"krate":0,"index":4351},{"krate":0,"index":4349},{"krate":0,"index":4346},{"krate":0,"index":4347},{"krate":0,"index":4344},{"krate":0,"index":2558},{"krate":0,"index":4362},{"krate":0,"index":4380},{"krate":0,"index":4379},{"krate":0,"index":4377},{"krate":0,"index":4374},{"krate":0,"index":4375},{"krate":0,"index":4371},{"krate":0,"index":4369},{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4364},{"krate":0,"index":2560},{"krate":0,"index":4382},{"krate":0,"index":4400},{"krate":0,"index":4399},{"krate":0,"index":4397},{"krate":0,"index":4394},{"krate":0,"index":4395},{"krate":0,"index":4391},{"krate":0,"index":4389},{"krate":0,"index":4386},{"krate":0,"index":4387},{"krate":0,"index":4384},{"krate":0,"index":2562},{"krate":0,"index":4402},{"krate":0,"index":4420},{"krate":0,"index":4419},{"krate":0,"index":4417},{"krate":0,"index":4414},{"krate":0,"index":4415},{"krate":0,"index":4411},{"krate":0,"index":4409},{"krate":0,"index":4406},{"krate":0,"index":4407},{"krate":0,"index":4404},{"krate":0,"index":2564},{"krate":0,"index":4422},{"krate":0,"index":4440},{"krate":0,"index":4439},{"krate":0,"index":4437},{"krate":0,"index":4434},{"krate":0,"index":4435},{"krate":0,"index":4431},{"krate":0,"index":4429},{"krate":0,"index":4426},{"krate":0,"index":4427},{"krate":0,"index":4424},{"krate":0,"index":2566},{"krate":0,"index":4442},{"krate":0,"index":4460},{"krate":0,"index":4459},{"krate":0,"index":4457},{"krate":0,"index":4454},{"krate":0,"index":4455},{"krate":0,"index":4451},{"krate":0,"index":4449},{"krate":0,"index":4446},{"krate":0,"index":4447},{"krate":0,"index":4444},{"krate":0,"index":2568},{"krate":0,"index":4462},{"krate":0,"index":4480},{"krate":0,"index":4479},{"krate":0,"index":4477},{"krate":0,"index":4474},{"krate":0,"index":4475},{"krate":0,"index":4471},{"krate":0,"index":4469},{"krate":0,"index":4466},{"krate":0,"index":4467},{"krate":0,"index":4464},{"krate":0,"index":2570},{"krate":0,"index":4482},{"krate":0,"index":4500},{"krate":0,"index":4499},{"krate":0,"index":4497},{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4491},{"krate":0,"index":4489},{"krate":0,"index":4486},{"krate":0,"index":4487},{"krate":0,"index":4484},{"krate":0,"index":2572},{"krate":0,"index":4502},{"krate":0,"index":4520},{"krate":0,"index":4519},{"krate":0,"index":4517},{"krate":0,"index":4514},{"krate":0,"index":4515},{"krate":0,"index":4511},{"krate":0,"index":4509},{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":4504},{"krate":0,"index":2574},{"krate":0,"index":4522},{"krate":0,"index":4540},{"krate":0,"index":4539},{"krate":0,"index":4537},{"krate":0,"index":4534},{"krate":0,"index":4535},{"krate":0,"index":4531},{"krate":0,"index":4529},{"krate":0,"index":4526},{"krate":0,"index":4527},{"krate":0,"index":4524},{"krate":0,"index":2576},{"krate":0,"index":4542},{"krate":0,"index":4560},{"krate":0,"index":4559},{"krate":0,"index":4557},{"krate":0,"index":4554},{"krate":0,"index":4555},{"krate":0,"index":4551},{"krate":0,"index":4549},{"krate":0,"index":4546},{"krate":0,"index":4547},{"krate":0,"index":4544},{"krate":0,"index":2578},{"krate":0,"index":4562},{"krate":0,"index":4580},{"krate":0,"index":4579},{"krate":0,"index":4577},{"krate":0,"index":4574},{"krate":0,"index":4575},{"krate":0,"index":4571},{"krate":0,"index":4569},{"krate":0,"index":4566},{"krate":0,"index":4567},{"krate":0,"index":4564},{"krate":0,"index":2580},{"krate":0,"index":4582},{"krate":0,"index":4600},{"krate":0,"index":4599},{"krate":0,"index":4597},{"krate":0,"index":4594},{"krate":0,"index":4595},{"krate":0,"index":4591},{"krate":0,"index":4589},{"krate":0,"index":4586},{"krate":0,"index":4587},{"krate":0,"index":4584},{"krate":0,"index":2582},{"krate":0,"index":4602},{"krate":0,"index":4620},{"krate":0,"index":4619},{"krate":0,"index":4617},{"krate":0,"index":4614},{"krate":0,"index":4615},{"krate":0,"index":4611},{"krate":0,"index":4609},{"krate":0,"index":4606},{"krate":0,"index":4607},{"krate":0,"index":4604},{"krate":0,"index":2584},{"krate":0,"index":4622},{"krate":0,"index":4640},{"krate":0,"index":4639},{"krate":0,"index":4637},{"krate":0,"index":4634},{"krate":0,"index":4635},{"krate":0,"index":4631},{"krate":0,"index":4629},{"krate":0,"index":4626},{"krate":0,"index":4627},{"krate":0,"index":4624},{"krate":0,"index":2586},{"krate":0,"index":4642},{"krate":0,"index":4660},{"krate":0,"index":4659},{"krate":0,"index":4657},{"krate":0,"index":4654},{"krate":0,"index":4655},{"krate":0,"index":4651},{"krate":0,"index":4649},{"krate":0,"index":4646},{"krate":0,"index":4647},{"krate":0,"index":4644},{"krate":0,"index":2588},{"krate":0,"index":4662},{"krate":0,"index":4680},{"krate":0,"index":4679},{"krate":0,"index":4677},{"krate":0,"index":4674},{"krate":0,"index":4675},{"krate":0,"index":4671},{"krate":0,"index":4669},{"krate":0,"index":4666},{"krate":0,"index":4667},{"krate":0,"index":4664},{"krate":0,"index":2590},{"krate":0,"index":4682},{"krate":0,"index":4700},{"krate":0,"index":4699},{"krate":0,"index":4697},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4691},{"krate":0,"index":4689},{"krate":0,"index":4686},{"krate":0,"index":4687},{"krate":0,"index":4684},{"krate":0,"index":2592},{"krate":0,"index":4702},{"krate":0,"index":4720},{"krate":0,"index":4719},{"krate":0,"index":4717},{"krate":0,"index":4714},{"krate":0,"index":4715},{"krate":0,"index":4711},{"krate":0,"index":4709},{"krate":0,"index":4706},{"krate":0,"index":4707},{"krate":0,"index":4704},{"krate":0,"index":2594},{"krate":0,"index":4722},{"krate":0,"index":4740},{"krate":0,"index":4739},{"krate":0,"index":4737},{"krate":0,"index":4734},{"krate":0,"index":4735},{"krate":0,"index":4731},{"krate":0,"index":4729},{"krate":0,"index":4726},{"krate":0,"index":4727},{"krate":0,"index":4724},{"krate":0,"index":2596},{"krate":0,"index":4742},{"krate":0,"index":4760},{"krate":0,"index":4759},{"krate":0,"index":4757},{"krate":0,"index":4754},{"krate":0,"index":4755},{"krate":0,"index":4751},{"krate":0,"index":4749},{"krate":0,"index":4746},{"krate":0,"index":4747},{"krate":0,"index":4744},{"krate":0,"index":2598},{"krate":0,"index":4762},{"krate":0,"index":4780},{"krate":0,"index":4779},{"krate":0,"index":4777},{"krate":0,"index":4774},{"krate":0,"index":4775},{"krate":0,"index":4771},{"krate":0,"index":4769},{"krate":0,"index":4766},{"krate":0,"index":4767},{"krate":0,"index":4764},{"krate":0,"index":2600},{"krate":0,"index":4782},{"krate":0,"index":4800},{"krate":0,"index":4799},{"krate":0,"index":4797},{"krate":0,"index":4794},{"krate":0,"index":4795},{"krate":0,"index":4791},{"krate":0,"index":4789},{"krate":0,"index":4786},{"krate":0,"index":4787},{"krate":0,"index":4784},{"krate":0,"index":2602},{"krate":0,"index":4802},{"krate":0,"index":4820},{"krate":0,"index":4819},{"krate":0,"index":4817},{"krate":0,"index":4814},{"krate":0,"index":4815},{"krate":0,"index":4811},{"krate":0,"index":4809},{"krate":0,"index":4806},{"krate":0,"index":4807},{"krate":0,"index":4804},{"krate":0,"index":2604},{"krate":0,"index":4822},{"krate":0,"index":4840},{"krate":0,"index":4839},{"krate":0,"index":4837},{"krate":0,"index":4834},{"krate":0,"index":4835},{"krate":0,"index":4831},{"krate":0,"index":4829},{"krate":0,"index":4826},{"krate":0,"index":4827},{"krate":0,"index":4824},{"krate":0,"index":2606},{"krate":0,"index":4842},{"krate":0,"index":4860},{"krate":0,"index":4859},{"krate":0,"index":4857},{"krate":0,"index":4854},{"krate":0,"index":4855},{"krate":0,"index":4851},{"krate":0,"index":4849},{"krate":0,"index":4846},{"krate":0,"index":4847},{"krate":0,"index":4844},{"krate":0,"index":2608},{"krate":0,"index":4862},{"krate":0,"index":4880},{"krate":0,"index":4879},{"krate":0,"index":4877},{"krate":0,"index":4874},{"krate":0,"index":4875},{"krate":0,"index":4871},{"krate":0,"index":4869},{"krate":0,"index":4866},{"krate":0,"index":4867},{"krate":0,"index":4864},{"krate":0,"index":2610},{"krate":0,"index":4882},{"krate":0,"index":4900},{"krate":0,"index":4899},{"krate":0,"index":4897},{"krate":0,"index":4894},{"krate":0,"index":4895},{"krate":0,"index":4891},{"krate":0,"index":4889},{"krate":0,"index":4886},{"krate":0,"index":4887},{"krate":0,"index":4884},{"krate":0,"index":2612},{"krate":0,"index":4902},{"krate":0,"index":4920},{"krate":0,"index":4919},{"krate":0,"index":4917},{"krate":0,"index":4914},{"krate":0,"index":4915},{"krate":0,"index":4911},{"krate":0,"index":4909},{"krate":0,"index":4906},{"krate":0,"index":4907},{"krate":0,"index":4904},{"krate":0,"index":2614},{"krate":0,"index":4922},{"krate":0,"index":4940},{"krate":0,"index":4939},{"krate":0,"index":4937},{"krate":0,"index":4934},{"krate":0,"index":4935},{"krate":0,"index":4931},{"krate":0,"index":4929},{"krate":0,"index":4926},{"krate":0,"index":4927},{"krate":0,"index":4924},{"krate":0,"index":2616},{"krate":0,"index":4942},{"krate":0,"index":4960},{"krate":0,"index":4959},{"krate":0,"index":4957},{"krate":0,"index":4954},{"krate":0,"index":4955},{"krate":0,"index":4951},{"krate":0,"index":4949},{"krate":0,"index":4946},{"krate":0,"index":4947},{"krate":0,"index":4944},{"krate":0,"index":2618},{"krate":0,"index":4962},{"krate":0,"index":4980},{"krate":0,"index":4979},{"krate":0,"index":4977},{"krate":0,"index":4974},{"krate":0,"index":4975},{"krate":0,"index":4971},{"krate":0,"index":4969},{"krate":0,"index":4966},{"krate":0,"index":4967},{"krate":0,"index":4964},{"krate":0,"index":2620},{"krate":0,"index":4982},{"krate":0,"index":5000},{"krate":0,"index":4999},{"krate":0,"index":4997},{"krate":0,"index":4994},{"krate":0,"index":4995},{"krate":0,"index":4991},{"krate":0,"index":4989},{"krate":0,"index":4986},{"krate":0,"index":4987},{"krate":0,"index":4984},{"krate":0,"index":2622},{"krate":0,"index":5002},{"krate":0,"index":5020},{"krate":0,"index":5019},{"krate":0,"index":5017},{"krate":0,"index":5014},{"krate":0,"index":5015},{"krate":0,"index":5011},{"krate":0,"index":5009},{"krate":0,"index":5006},{"krate":0,"index":5007},{"krate":0,"index":5004},{"krate":0,"index":2624},{"krate":0,"index":5022},{"krate":0,"index":5040},{"krate":0,"index":5039},{"krate":0,"index":5037},{"krate":0,"index":5034},{"krate":0,"index":5035},{"krate":0,"index":5031},{"krate":0,"index":5029},{"krate":0,"index":5026},{"krate":0,"index":5027},{"krate":0,"index":5024},{"krate":0,"index":2626},{"krate":0,"index":5042},{"krate":0,"index":5060},{"krate":0,"index":5059},{"krate":0,"index":5057},{"krate":0,"index":5054},{"krate":0,"index":5055},{"krate":0,"index":5051},{"krate":0,"index":5049},{"krate":0,"index":5046},{"krate":0,"index":5047},{"krate":0,"index":5044},{"krate":0,"index":2628},{"krate":0,"index":5062},{"krate":0,"index":5080},{"krate":0,"index":5079},{"krate":0,"index":5077},{"krate":0,"index":5074},{"krate":0,"index":5075},{"krate":0,"index":5071},{"krate":0,"index":5069},{"krate":0,"index":5066},{"krate":0,"index":5067},{"krate":0,"index":5064},{"krate":0,"index":2630},{"krate":0,"index":5082},{"krate":0,"index":5100},{"krate":0,"index":5099},{"krate":0,"index":5097},{"krate":0,"index":5094},{"krate":0,"index":5095},{"krate":0,"index":5091},{"krate":0,"index":5089},{"krate":0,"index":5086},{"krate":0,"index":5087},{"krate":0,"index":5084},{"krate":0,"index":2632},{"krate":0,"index":5102},{"krate":0,"index":5120},{"krate":0,"index":5119},{"krate":0,"index":5117},{"krate":0,"index":5114},{"krate":0,"index":5115},{"krate":0,"index":5111},{"krate":0,"index":5109},{"krate":0,"index":5106},{"krate":0,"index":5107},{"krate":0,"index":5104},{"krate":0,"index":2634},{"krate":0,"index":5122},{"krate":0,"index":5140},{"krate":0,"index":5139},{"krate":0,"index":5137},{"krate":0,"index":5134},{"krate":0,"index":5135},{"krate":0,"index":5131},{"krate":0,"index":5129},{"krate":0,"index":5126},{"krate":0,"index":5127},{"krate":0,"index":5124},{"krate":0,"index":2636},{"krate":0,"index":5142},{"krate":0,"index":5160},{"krate":0,"index":5159},{"krate":0,"index":5157},{"krate":0,"index":5154},{"krate":0,"index":5155},{"krate":0,"index":5151},{"krate":0,"index":5149},{"krate":0,"index":5146},{"krate":0,"index":5147},{"krate":0,"index":5144},{"krate":0,"index":2638},{"krate":0,"index":5162},{"krate":0,"index":5180},{"krate":0,"index":5179},{"krate":0,"index":5177},{"krate":0,"index":5174},{"krate":0,"index":5175},{"krate":0,"index":5171},{"krate":0,"index":5169},{"krate":0,"index":5166},{"krate":0,"index":5167},{"krate":0,"index":5164},{"krate":0,"index":2640},{"krate":0,"index":5182},{"krate":0,"index":5200},{"krate":0,"index":5199},{"krate":0,"index":5197},{"krate":0,"index":5194},{"krate":0,"index":5195},{"krate":0,"index":5191},{"krate":0,"index":5189},{"krate":0,"index":5186},{"krate":0,"index":5187},{"krate":0,"index":5184},{"krate":0,"index":2642},{"krate":0,"index":5202},{"krate":0,"index":5220},{"krate":0,"index":5219},{"krate":0,"index":5217},{"krate":0,"index":5214},{"krate":0,"index":5215},{"krate":0,"index":5211},{"krate":0,"index":5209},{"krate":0,"index":5206},{"krate":0,"index":5207},{"krate":0,"index":5204},{"krate":0,"index":2644},{"krate":0,"index":5222},{"krate":0,"index":5240},{"krate":0,"index":5239},{"krate":0,"index":5237},{"krate":0,"index":5234},{"krate":0,"index":5235},{"krate":0,"index":5231},{"krate":0,"index":5229},{"krate":0,"index":5226},{"krate":0,"index":5227},{"krate":0,"index":5224},{"krate":0,"index":2646},{"krate":0,"index":5242},{"krate":0,"index":5260},{"krate":0,"index":5259},{"krate":0,"index":5257},{"krate":0,"index":5254},{"krate":0,"index":5255},{"krate":0,"index":5251},{"krate":0,"index":5249},{"krate":0,"index":5246},{"krate":0,"index":5247},{"krate":0,"index":5244},{"krate":0,"index":2648},{"krate":0,"index":5262},{"krate":0,"index":5280},{"krate":0,"index":5279},{"krate":0,"index":5277},{"krate":0,"index":5274},{"krate":0,"index":5275},{"krate":0,"index":5271},{"krate":0,"index":5269},{"krate":0,"index":5266},{"krate":0,"index":5267},{"krate":0,"index":5264},{"krate":0,"index":2650},{"krate":0,"index":5282},{"krate":0,"index":5300},{"krate":0,"index":5299},{"krate":0,"index":5297},{"krate":0,"index":5294},{"krate":0,"index":5295},{"krate":0,"index":5291},{"krate":0,"index":5289},{"krate":0,"index":5286},{"krate":0,"index":5287},{"krate":0,"index":5284},{"krate":0,"index":2652},{"krate":0,"index":5302},{"krate":0,"index":5320},{"krate":0,"index":5319},{"krate":0,"index":5317},{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5311},{"krate":0,"index":5309},{"krate":0,"index":5306},{"krate":0,"index":5307},{"krate":0,"index":5304},{"krate":0,"index":2654},{"krate":0,"index":5322},{"krate":0,"index":5340},{"krate":0,"index":5339},{"krate":0,"index":5337},{"krate":0,"index":5334},{"krate":0,"index":5335},{"krate":0,"index":5331},{"krate":0,"index":5329},{"krate":0,"index":5326},{"krate":0,"index":5327},{"krate":0,"index":5324},{"krate":0,"index":2656},{"krate":0,"index":5342},{"krate":0,"index":5360},{"krate":0,"index":5359},{"krate":0,"index":5357},{"krate":0,"index":5354},{"krate":0,"index":5355},{"krate":0,"index":5351},{"krate":0,"index":5349},{"krate":0,"index":5346},{"krate":0,"index":5347},{"krate":0,"index":5344},{"krate":0,"index":2658},{"krate":0,"index":5362},{"krate":0,"index":5380},{"krate":0,"index":5379},{"krate":0,"index":5377},{"krate":0,"index":5374},{"krate":0,"index":5375},{"krate":0,"index":5371},{"krate":0,"index":5369},{"krate":0,"index":5366},{"krate":0,"index":5367},{"krate":0,"index":5364},{"krate":0,"index":2660},{"krate":0,"index":5382},{"krate":0,"index":5400},{"krate":0,"index":5399},{"krate":0,"index":5397},{"krate":0,"index":5394},{"krate":0,"index":5395},{"krate":0,"index":5391},{"krate":0,"index":5389},{"krate":0,"index":5386},{"krate":0,"index":5387},{"krate":0,"index":5384},{"krate":0,"index":2662},{"krate":0,"index":5402},{"krate":0,"index":5420},{"krate":0,"index":5419},{"krate":0,"index":5417},{"krate":0,"index":5414},{"krate":0,"index":5415},{"krate":0,"index":5411},{"krate":0,"index":5409},{"krate":0,"index":5406},{"krate":0,"index":5407},{"krate":0,"index":5404},{"krate":0,"index":2664},{"krate":0,"index":5422},{"krate":0,"index":5440},{"krate":0,"index":5439},{"krate":0,"index":5437},{"krate":0,"index":5434},{"krate":0,"index":5435},{"krate":0,"index":5431},{"krate":0,"index":5429},{"krate":0,"index":5426},{"krate":0,"index":5427},{"krate":0,"index":5424},{"krate":0,"index":2666},{"krate":0,"index":5442},{"krate":0,"index":5460},{"krate":0,"index":5459},{"krate":0,"index":5457},{"krate":0,"index":5454},{"krate":0,"index":5455},{"krate":0,"index":5451},{"krate":0,"index":5449},{"krate":0,"index":5446},{"krate":0,"index":5447},{"krate":0,"index":5444},{"krate":0,"index":2668},{"krate":0,"index":5462},{"krate":0,"index":5480},{"krate":0,"index":5479},{"krate":0,"index":5477},{"krate":0,"index":5474},{"krate":0,"index":5475},{"krate":0,"index":5471},{"krate":0,"index":5469},{"krate":0,"index":5466},{"krate":0,"index":5467},{"krate":0,"index":5464},{"krate":0,"index":2670},{"krate":0,"index":5482},{"krate":0,"index":5500},{"krate":0,"index":5499},{"krate":0,"index":5497},{"krate":0,"index":5494},{"krate":0,"index":5495},{"krate":0,"index":5491},{"krate":0,"index":5489},{"krate":0,"index":5486},{"krate":0,"index":5487},{"krate":0,"index":5484},{"krate":0,"index":2672},{"krate":0,"index":5502},{"krate":0,"index":5520},{"krate":0,"index":5519},{"krate":0,"index":5517},{"krate":0,"index":5514},{"krate":0,"index":5515},{"krate":0,"index":5511},{"krate":0,"index":5509},{"krate":0,"index":5506},{"krate":0,"index":5507},{"krate":0,"index":5504},{"krate":0,"index":2674},{"krate":0,"index":5522},{"krate":0,"index":5540},{"krate":0,"index":5539},{"krate":0,"index":5537},{"krate":0,"index":5534},{"krate":0,"index":5535},{"krate":0,"index":5531},{"krate":0,"index":5529},{"krate":0,"index":5526},{"krate":0,"index":5527},{"krate":0,"index":5524},{"krate":0,"index":2676},{"krate":0,"index":5542},{"krate":0,"index":5560},{"krate":0,"index":5559},{"krate":0,"index":5557},{"krate":0,"index":5554},{"krate":0,"index":5555},{"krate":0,"index":5551},{"krate":0,"index":5549},{"krate":0,"index":5546},{"krate":0,"index":5547},{"krate":0,"index":5544},{"krate":0,"index":2678},{"krate":0,"index":5562},{"krate":0,"index":5580},{"krate":0,"index":5579},{"krate":0,"index":5577},{"krate":0,"index":5574},{"krate":0,"index":5575},{"krate":0,"index":5571},{"krate":0,"index":5569},{"krate":0,"index":5566},{"krate":0,"index":5567},{"krate":0,"index":5564},{"krate":0,"index":2680},{"krate":0,"index":5582},{"krate":0,"index":5600},{"krate":0,"index":5599},{"krate":0,"index":5597},{"krate":0,"index":5594},{"krate":0,"index":5595},{"krate":0,"index":5591},{"krate":0,"index":5589},{"krate":0,"index":5586},{"krate":0,"index":5587},{"krate":0,"index":5584},{"krate":0,"index":2682},{"krate":0,"index":5602},{"krate":0,"index":5620},{"krate":0,"index":5619},{"krate":0,"index":5617},{"krate":0,"index":5614},{"krate":0,"index":5615},{"krate":0,"index":5611},{"krate":0,"index":5609},{"krate":0,"index":5606},{"krate":0,"index":5607},{"krate":0,"index":5604},{"krate":0,"index":2684},{"krate":0,"index":5622},{"krate":0,"index":5640},{"krate":0,"index":5639},{"krate":0,"index":5637},{"krate":0,"index":5634},{"krate":0,"index":5635},{"krate":0,"index":5631},{"krate":0,"index":5629},{"krate":0,"index":5626},{"krate":0,"index":5627},{"krate":0,"index":5624},{"krate":0,"index":2686},{"krate":0,"index":5642},{"krate":0,"index":5660},{"krate":0,"index":5659},{"krate":0,"index":5657},{"krate":0,"index":5654},{"krate":0,"index":5655},{"krate":0,"index":5651},{"krate":0,"index":5649},{"krate":0,"index":5646},{"krate":0,"index":5647},{"krate":0,"index":5644},{"krate":0,"index":2688},{"krate":0,"index":5662},{"krate":0,"index":5680},{"krate":0,"index":5679},{"krate":0,"index":5677},{"krate":0,"index":5674},{"krate":0,"index":5675},{"krate":0,"index":5671},{"krate":0,"index":5669},{"krate":0,"index":5666},{"krate":0,"index":5667},{"krate":0,"index":5664},{"krate":0,"index":2690},{"krate":0,"index":5682},{"krate":0,"index":5700},{"krate":0,"index":5699},{"krate":0,"index":5697},{"krate":0,"index":5694},{"krate":0,"index":5695},{"krate":0,"index":5691},{"krate":0,"index":5689},{"krate":0,"index":5686},{"krate":0,"index":5687},{"krate":0,"index":5684},{"krate":0,"index":2692},{"krate":0,"index":5702},{"krate":0,"index":5720},{"krate":0,"index":5719},{"krate":0,"index":5717},{"krate":0,"index":5714},{"krate":0,"index":5715},{"krate":0,"index":5711},{"krate":0,"index":5709},{"krate":0,"index":5706},{"krate":0,"index":5707},{"krate":0,"index":5704},{"krate":0,"index":2694},{"krate":0,"index":5722},{"krate":0,"index":5740},{"krate":0,"index":5739},{"krate":0,"index":5737},{"krate":0,"index":5734},{"krate":0,"index":5735},{"krate":0,"index":5731},{"krate":0,"index":5729},{"krate":0,"index":5726},{"krate":0,"index":5727},{"krate":0,"index":5724},{"krate":0,"index":2696},{"krate":0,"index":5742},{"krate":0,"index":5760},{"krate":0,"index":5759},{"krate":0,"index":5757},{"krate":0,"index":5754},{"krate":0,"index":5755},{"krate":0,"index":5751},{"krate":0,"index":5749},{"krate":0,"index":5746},{"krate":0,"index":5747},{"krate":0,"index":5744},{"krate":0,"index":2698},{"krate":0,"index":5762},{"krate":0,"index":5780},{"krate":0,"index":5779},{"krate":0,"index":5777},{"krate":0,"index":5774},{"krate":0,"index":5775},{"krate":0,"index":5771},{"krate":0,"index":5769},{"krate":0,"index":5766},{"krate":0,"index":5767},{"krate":0,"index":5764},{"krate":0,"index":2700},{"krate":0,"index":5782},{"krate":0,"index":5800},{"krate":0,"index":5799},{"krate":0,"index":5797},{"krate":0,"index":5794},{"krate":0,"index":5795},{"krate":0,"index":5791},{"krate":0,"index":5789},{"krate":0,"index":5786},{"krate":0,"index":5787},{"krate":0,"index":5784},{"krate":0,"index":2702},{"krate":0,"index":5802},{"krate":0,"index":5820},{"krate":0,"index":5819},{"krate":0,"index":5817},{"krate":0,"index":5814},{"krate":0,"index":5815},{"krate":0,"index":5811},{"krate":0,"index":5809},{"krate":0,"index":5806},{"krate":0,"index":5807},{"krate":0,"index":5804},{"krate":0,"index":2704},{"krate":0,"index":5822},{"krate":0,"index":5840},{"krate":0,"index":5839},{"krate":0,"index":5837},{"krate":0,"index":5834},{"krate":0,"index":5835},{"krate":0,"index":5831},{"krate":0,"index":5829},{"krate":0,"index":5826},{"krate":0,"index":5827},{"krate":0,"index":5824},{"krate":0,"index":2706},{"krate":0,"index":5842},{"krate":0,"index":5860},{"krate":0,"index":5859},{"krate":0,"index":5857},{"krate":0,"index":5854},{"krate":0,"index":5855},{"krate":0,"index":5851},{"krate":0,"index":5849},{"krate":0,"index":5846},{"krate":0,"index":5847},{"krate":0,"index":5844},{"krate":0,"index":2708},{"krate":0,"index":5862},{"krate":0,"index":5880},{"krate":0,"index":5879},{"krate":0,"index":5877},{"krate":0,"index":5874},{"krate":0,"index":5875},{"krate":0,"index":5871},{"krate":0,"index":5869},{"krate":0,"index":5866},{"krate":0,"index":5867},{"krate":0,"index":5864},{"krate":0,"index":2710},{"krate":0,"index":5882},{"krate":0,"index":5900},{"krate":0,"index":5899},{"krate":0,"index":5897},{"krate":0,"index":5894},{"krate":0,"index":5895},{"krate":0,"index":5891},{"krate":0,"index":5889},{"krate":0,"index":5886},{"krate":0,"index":5887},{"krate":0,"index":5884},{"krate":0,"index":2712},{"krate":0,"index":5902},{"krate":0,"index":5920},{"krate":0,"index":5919},{"krate":0,"index":5917},{"krate":0,"index":5914},{"krate":0,"index":5915},{"krate":0,"index":5911},{"krate":0,"index":5909},{"krate":0,"index":5906},{"krate":0,"index":5907},{"krate":0,"index":5904},{"krate":0,"index":2714},{"krate":0,"index":5922},{"krate":0,"index":5940},{"krate":0,"index":5939},{"krate":0,"index":5937},{"krate":0,"index":5934},{"krate":0,"index":5935},{"krate":0,"index":5931},{"krate":0,"index":5929},{"krate":0,"index":5926},{"krate":0,"index":5927},{"krate":0,"index":5924},{"krate":0,"index":2716},{"krate":0,"index":5942},{"krate":0,"index":5960},{"krate":0,"index":5959},{"krate":0,"index":5957},{"krate":0,"index":5954},{"krate":0,"index":5955},{"krate":0,"index":5951},{"krate":0,"index":5949},{"krate":0,"index":5946},{"krate":0,"index":5947},{"krate":0,"index":5944},{"krate":0,"index":2718},{"krate":0,"index":5962},{"krate":0,"index":5980},{"krate":0,"index":5979},{"krate":0,"index":5977},{"krate":0,"index":5974},{"krate":0,"index":5975},{"krate":0,"index":5971},{"krate":0,"index":5969},{"krate":0,"index":5966},{"krate":0,"index":5967},{"krate":0,"index":5964},{"krate":0,"index":2720},{"krate":0,"index":5982},{"krate":0,"index":6000},{"krate":0,"index":5999},{"krate":0,"index":5997},{"krate":0,"index":5994},{"krate":0,"index":5995},{"krate":0,"index":5991},{"krate":0,"index":5989},{"krate":0,"index":5986},{"krate":0,"index":5987},{"krate":0,"index":5984},{"krate":0,"index":2722},{"krate":0,"index":6002},{"krate":0,"index":6020},{"krate":0,"index":6019},{"krate":0,"index":6017},{"krate":0,"index":6014},{"krate":0,"index":6015},{"krate":0,"index":6011},{"krate":0,"index":6009},{"krate":0,"index":6006},{"krate":0,"index":6007},{"krate":0,"index":6004},{"krate":0,"index":2724},{"krate":0,"index":6022},{"krate":0,"index":6040},{"krate":0,"index":6039},{"krate":0,"index":6037},{"krate":0,"index":6034},{"krate":0,"index":6035},{"krate":0,"index":6031},{"krate":0,"index":6029},{"krate":0,"index":6026},{"krate":0,"index":6027},{"krate":0,"index":6024},{"krate":0,"index":2726},{"krate":0,"index":6042},{"krate":0,"index":6060},{"krate":0,"index":6059},{"krate":0,"index":6057},{"krate":0,"index":6054},{"krate":0,"index":6055},{"krate":0,"index":6051},{"krate":0,"index":6049},{"krate":0,"index":6046},{"krate":0,"index":6047},{"krate":0,"index":6044},{"krate":0,"index":2728},{"krate":0,"index":6062},{"krate":0,"index":6080},{"krate":0,"index":6079},{"krate":0,"index":6077},{"krate":0,"index":6074},{"krate":0,"index":6075},{"krate":0,"index":6071},{"krate":0,"index":6069},{"krate":0,"index":6066},{"krate":0,"index":6067},{"krate":0,"index":6064},{"krate":0,"index":2730},{"krate":0,"index":6082},{"krate":0,"index":6100},{"krate":0,"index":6099},{"krate":0,"index":6097},{"krate":0,"index":6094},{"krate":0,"index":6095},{"krate":0,"index":6091},{"krate":0,"index":6089},{"krate":0,"index":6086},{"krate":0,"index":6087},{"krate":0,"index":6084},{"krate":0,"index":2732},{"krate":0,"index":6102},{"krate":0,"index":6120},{"krate":0,"index":6119},{"krate":0,"index":6117},{"krate":0,"index":6114},{"krate":0,"index":6115},{"krate":0,"index":6111},{"krate":0,"index":6109},{"krate":0,"index":6106},{"krate":0,"index":6107},{"krate":0,"index":6104},{"krate":0,"index":2734},{"krate":0,"index":6122},{"krate":0,"index":6140},{"krate":0,"index":6139},{"krate":0,"index":6137},{"krate":0,"index":6134},{"krate":0,"index":6135},{"krate":0,"index":6131},{"krate":0,"index":6129},{"krate":0,"index":6126},{"krate":0,"index":6127},{"krate":0,"index":6124},{"krate":0,"index":2736},{"krate":0,"index":6142},{"krate":0,"index":6160},{"krate":0,"index":6159},{"krate":0,"index":6157},{"krate":0,"index":6154},{"krate":0,"index":6155},{"krate":0,"index":6151},{"krate":0,"index":6149},{"krate":0,"index":6146},{"krate":0,"index":6147},{"krate":0,"index":6144},{"krate":0,"index":2738},{"krate":0,"index":6162},{"krate":0,"index":6180},{"krate":0,"index":6179},{"krate":0,"index":6177},{"krate":0,"index":6174},{"krate":0,"index":6175},{"krate":0,"index":6171},{"krate":0,"index":6169},{"krate":0,"index":6166},{"krate":0,"index":6167},{"krate":0,"index":6164},{"krate":0,"index":2740},{"krate":0,"index":6182},{"krate":0,"index":6200},{"krate":0,"index":6199},{"krate":0,"index":6197},{"krate":0,"index":6194},{"krate":0,"index":6195},{"krate":0,"index":6191},{"krate":0,"index":6189},{"krate":0,"index":6186},{"krate":0,"index":6187},{"krate":0,"index":6184},{"krate":0,"index":2742},{"krate":0,"index":6202},{"krate":0,"index":6220},{"krate":0,"index":6219},{"krate":0,"index":6217},{"krate":0,"index":6214},{"krate":0,"index":6215},{"krate":0,"index":6211},{"krate":0,"index":6209},{"krate":0,"index":6206},{"krate":0,"index":6207},{"krate":0,"index":6204},{"krate":0,"index":2744},{"krate":0,"index":6222},{"krate":0,"index":6240},{"krate":0,"index":6239},{"krate":0,"index":6237},{"krate":0,"index":6234},{"krate":0,"index":6235},{"krate":0,"index":6231},{"krate":0,"index":6229},{"krate":0,"index":6226},{"krate":0,"index":6227},{"krate":0,"index":6224},{"krate":0,"index":2746},{"krate":0,"index":6242},{"krate":0,"index":6260},{"krate":0,"index":6259},{"krate":0,"index":6257},{"krate":0,"index":6254},{"krate":0,"index":6255},{"krate":0,"index":6251},{"krate":0,"index":6249},{"krate":0,"index":6246},{"krate":0,"index":6247},{"krate":0,"index":6244},{"krate":0,"index":2748},{"krate":0,"index":6262},{"krate":0,"index":6280},{"krate":0,"index":6279},{"krate":0,"index":6277},{"krate":0,"index":6274},{"krate":0,"index":6275},{"krate":0,"index":6271},{"krate":0,"index":6269},{"krate":0,"index":6266},{"krate":0,"index":6267},{"krate":0,"index":6264},{"krate":0,"index":2750},{"krate":0,"index":6282},{"krate":0,"index":6300},{"krate":0,"index":6299},{"krate":0,"index":6297},{"krate":0,"index":6294},{"krate":0,"index":6295},{"krate":0,"index":6291},{"krate":0,"index":6289},{"krate":0,"index":6286},{"krate":0,"index":6287},{"krate":0,"index":6284},{"krate":0,"index":2752},{"krate":0,"index":6302},{"krate":0,"index":6320},{"krate":0,"index":6319},{"krate":0,"index":6317},{"krate":0,"index":6314},{"krate":0,"index":6315},{"krate":0,"index":6311},{"krate":0,"index":6309},{"krate":0,"index":6306},{"krate":0,"index":6307},{"krate":0,"index":6304},{"krate":0,"index":2754},{"krate":0,"index":6322},{"krate":0,"index":6340},{"krate":0,"index":6339},{"krate":0,"index":6337},{"krate":0,"index":6334},{"krate":0,"index":6335},{"krate":0,"index":6331},{"krate":0,"index":6329},{"krate":0,"index":6326},{"krate":0,"index":6327},{"krate":0,"index":6324},{"krate":0,"index":2756},{"krate":0,"index":6342},{"krate":0,"index":6360},{"krate":0,"index":6359},{"krate":0,"index":6357},{"krate":0,"index":6354},{"krate":0,"index":6355},{"krate":0,"index":6351},{"krate":0,"index":6349},{"krate":0,"index":6346},{"krate":0,"index":6347},{"krate":0,"index":6344},{"krate":0,"index":2758},{"krate":0,"index":6362},{"krate":0,"index":6380},{"krate":0,"index":6379},{"krate":0,"index":6377},{"krate":0,"index":6374},{"krate":0,"index":6375},{"krate":0,"index":6371},{"krate":0,"index":6369},{"krate":0,"index":6366},{"krate":0,"index":6367},{"krate":0,"index":6364},{"krate":0,"index":2760},{"krate":0,"index":6382},{"krate":0,"index":6400},{"krate":0,"index":6399},{"krate":0,"index":6397},{"krate":0,"index":6394},{"krate":0,"index":6395},{"krate":0,"index":6391},{"krate":0,"index":6389},{"krate":0,"index":6386},{"krate":0,"index":6387},{"krate":0,"index":6384},{"krate":0,"index":2762},{"krate":0,"index":6402},{"krate":0,"index":6420},{"krate":0,"index":6419},{"krate":0,"index":6417},{"krate":0,"index":6414},{"krate":0,"index":6415},{"krate":0,"index":6411},{"krate":0,"index":6409},{"krate":0,"index":6406},{"krate":0,"index":6407},{"krate":0,"index":6404},{"krate":0,"index":2764},{"krate":0,"index":6422},{"krate":0,"index":6440},{"krate":0,"index":6439},{"krate":0,"index":6437},{"krate":0,"index":6434},{"krate":0,"index":6435},{"krate":0,"index":6431},{"krate":0,"index":6429},{"krate":0,"index":6426},{"krate":0,"index":6427},{"krate":0,"index":6424},{"krate":0,"index":2766},{"krate":0,"index":6442},{"krate":0,"index":6460},{"krate":0,"index":6459},{"krate":0,"index":6457},{"krate":0,"index":6454},{"krate":0,"index":6455},{"krate":0,"index":6451},{"krate":0,"index":6449},{"krate":0,"index":6446},{"krate":0,"index":6447},{"krate":0,"index":6444},{"krate":0,"index":2768},{"krate":0,"index":6462},{"krate":0,"index":6480},{"krate":0,"index":6479},{"krate":0,"index":6477},{"krate":0,"index":6474},{"krate":0,"index":6475},{"krate":0,"index":6471},{"krate":0,"index":6469},{"krate":0,"index":6466},{"krate":0,"index":6467},{"krate":0,"index":6464},{"krate":0,"index":2770},{"krate":0,"index":6482},{"krate":0,"index":6500},{"krate":0,"index":6499},{"krate":0,"index":6497},{"krate":0,"index":6494},{"krate":0,"index":6495},{"krate":0,"index":6491},{"krate":0,"index":6489},{"krate":0,"index":6486},{"krate":0,"index":6487},{"krate":0,"index":6484},{"krate":0,"index":2772},{"krate":0,"index":6502},{"krate":0,"index":6520},{"krate":0,"index":6519},{"krate":0,"index":6517},{"krate":0,"index":6514},{"krate":0,"index":6515},{"krate":0,"index":6511},{"krate":0,"index":6509},{"krate":0,"index":6506},{"krate":0,"index":6507},{"krate":0,"index":6504},{"krate":0,"index":2774},{"krate":0,"index":6522},{"krate":0,"index":6540},{"krate":0,"index":6539},{"krate":0,"index":6537},{"krate":0,"index":6534},{"krate":0,"index":6535},{"krate":0,"index":6531},{"krate":0,"index":6529},{"krate":0,"index":6526},{"krate":0,"index":6527},{"krate":0,"index":6524},{"krate":0,"index":2776},{"krate":0,"index":6542},{"krate":0,"index":6560},{"krate":0,"index":6559},{"krate":0,"index":6557},{"krate":0,"index":6554},{"krate":0,"index":6555},{"krate":0,"index":6551},{"krate":0,"index":6549},{"krate":0,"index":6546},{"krate":0,"index":6547},{"krate":0,"index":6544},{"krate":0,"index":2778},{"krate":0,"index":6562},{"krate":0,"index":6580},{"krate":0,"index":6579},{"krate":0,"index":6577},{"krate":0,"index":6574},{"krate":0,"index":6575},{"krate":0,"index":6571},{"krate":0,"index":6569},{"krate":0,"index":6566},{"krate":0,"index":6567},{"krate":0,"index":6564},{"krate":0,"index":2780},{"krate":0,"index":6582},{"krate":0,"index":6600},{"krate":0,"index":6599},{"krate":0,"index":6597},{"krate":0,"index":6594},{"krate":0,"index":6595},{"krate":0,"index":6591},{"krate":0,"index":6589},{"krate":0,"index":6586},{"krate":0,"index":6587},{"krate":0,"index":6584},{"krate":0,"index":2782},{"krate":0,"index":6602},{"krate":0,"index":6620},{"krate":0,"index":6619},{"krate":0,"index":6617},{"krate":0,"index":6614},{"krate":0,"index":6615},{"krate":0,"index":6611},{"krate":0,"index":6609},{"krate":0,"index":6606},{"krate":0,"index":6607},{"krate":0,"index":6604},{"krate":0,"index":2784},{"krate":0,"index":6622},{"krate":0,"index":6640},{"krate":0,"index":6639},{"krate":0,"index":6637},{"krate":0,"index":6634},{"krate":0,"index":6635},{"krate":0,"index":6631},{"krate":0,"index":6629},{"krate":0,"index":6626},{"krate":0,"index":6627},{"krate":0,"index":6624},{"krate":0,"index":2786},{"krate":0,"index":6642},{"krate":0,"index":6660},{"krate":0,"index":6659},{"krate":0,"index":6657},{"krate":0,"index":6654},{"krate":0,"index":6655},{"krate":0,"index":6651},{"krate":0,"index":6649},{"krate":0,"index":6646},{"krate":0,"index":6647},{"krate":0,"index":6644},{"krate":0,"index":2788},{"krate":0,"index":6662},{"krate":0,"index":6680},{"krate":0,"index":6679},{"krate":0,"index":6677},{"krate":0,"index":6674},{"krate":0,"index":6675},{"krate":0,"index":6671},{"krate":0,"index":6669},{"krate":0,"index":6666},{"krate":0,"index":6667},{"krate":0,"index":6664},{"krate":0,"index":2790},{"krate":0,"index":6682},{"krate":0,"index":6700},{"krate":0,"index":6699},{"krate":0,"index":6697},{"krate":0,"index":6694},{"krate":0,"index":6695},{"krate":0,"index":6691},{"krate":0,"index":6689},{"krate":0,"index":6686},{"krate":0,"index":6687},{"krate":0,"index":6684},{"krate":0,"index":2792},{"krate":0,"index":6702},{"krate":0,"index":6720},{"krate":0,"index":6719},{"krate":0,"index":6717},{"krate":0,"index":6714},{"krate":0,"index":6715},{"krate":0,"index":6711},{"krate":0,"index":6709},{"krate":0,"index":6706},{"krate":0,"index":6707},{"krate":0,"index":6704},{"krate":0,"index":2794},{"krate":0,"index":6722},{"krate":0,"index":6740},{"krate":0,"index":6739},{"krate":0,"index":6737},{"krate":0,"index":6734},{"krate":0,"index":6735},{"krate":0,"index":6731},{"krate":0,"index":6729},{"krate":0,"index":6726},{"krate":0,"index":6727},{"krate":0,"index":6724},{"krate":0,"index":2796},{"krate":0,"index":6742},{"krate":0,"index":6760},{"krate":0,"index":6759},{"krate":0,"index":6757},{"krate":0,"index":6754},{"krate":0,"index":6755},{"krate":0,"index":6751},{"krate":0,"index":6749},{"krate":0,"index":6746},{"krate":0,"index":6747},{"krate":0,"index":6744},{"krate":0,"index":2798},{"krate":0,"index":6762},{"krate":0,"index":6780},{"krate":0,"index":6779},{"krate":0,"index":6777},{"krate":0,"index":6774},{"krate":0,"index":6775},{"krate":0,"index":6771},{"krate":0,"index":6769},{"krate":0,"index":6766},{"krate":0,"index":6767},{"krate":0,"index":6764},{"krate":0,"index":2800},{"krate":0,"index":6782},{"krate":0,"index":6800},{"krate":0,"index":6799},{"krate":0,"index":6797},{"krate":0,"index":6794},{"krate":0,"index":6795},{"krate":0,"index":6791},{"krate":0,"index":6789},{"krate":0,"index":6786},{"krate":0,"index":6787},{"krate":0,"index":6784},{"krate":0,"index":2802},{"krate":0,"index":6802},{"krate":0,"index":6820},{"krate":0,"index":6819},{"krate":0,"index":6817},{"krate":0,"index":6814},{"krate":0,"index":6815},{"krate":0,"index":6811},{"krate":0,"index":6809},{"krate":0,"index":6806},{"krate":0,"index":6807},{"krate":0,"index":6804},{"krate":0,"index":2804},{"krate":0,"index":6822},{"krate":0,"index":6840},{"krate":0,"index":6839},{"krate":0,"index":6837},{"krate":0,"index":6834},{"krate":0,"index":6835},{"krate":0,"index":6831},{"krate":0,"index":6829},{"krate":0,"index":6826},{"krate":0,"index":6827},{"krate":0,"index":6824},{"krate":0,"index":2806},{"krate":0,"index":6842},{"krate":0,"index":6860},{"krate":0,"index":6859},{"krate":0,"index":6857},{"krate":0,"index":6854},{"krate":0,"index":6855},{"krate":0,"index":6851},{"krate":0,"index":6849},{"krate":0,"index":6846},{"krate":0,"index":6847},{"krate":0,"index":6844},{"krate":0,"index":2808},{"krate":0,"index":6862},{"krate":0,"index":6880},{"krate":0,"index":6879},{"krate":0,"index":6877},{"krate":0,"index":6874},{"krate":0,"index":6875},{"krate":0,"index":6871},{"krate":0,"index":6869},{"krate":0,"index":6866},{"krate":0,"index":6867},{"krate":0,"index":6864},{"krate":0,"index":2810},{"krate":0,"index":382},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396}],"decl_id":null,"docs":" Universal format specification.\n Applicable to textures, views, and vertex buffers.","sig":null,"attributes":[{"value":"! Universal format specification.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":94965,"byte_end":95000,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"! Applicable to textures, views, and vertex buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95001,"byte_end":95055,"line_start":2,"line_end":2,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95056,"byte_end":95059,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! For a more detailed description of all the specific format specifiers,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95060,"byte_end":95134,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"! please see [the official Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.0/man/html/VkFormat.html)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95135,"byte_end":95259,"line_start":5,"line_end":5,"column_start":1,"column_end":125}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95260,"byte_end":95263,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! `gfx-rs` splits a `Format` into two sub-components, a `SurfaceType` and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95264,"byte_end":95339,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"! a `ChannelType`.  The `SurfaceType` specifies how the large the channels are,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95340,"byte_end":95421,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"! for instance `R32_G32_B32_A32`.  The `ChannelType` specifies how the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95422,"byte_end":95494,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! components are interpreted, for instance `Sfloat` or `Sint`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95495,"byte_end":95559,"line_start":10,"line_end":10,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1715},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95937,"byte_end":95944,"line_start":19,"line_end":19,"column_start":16,"column_end":23},"name":"Aspects","qualname":"::format::Aspects","value":"Aspects {  }","parent":null,"children":[{"krate":0,"index":1716}],"decl_id":null,"docs":" Bitflags which describe what properties of an image\n a format specifies or does not specify.  For example,\n the `Rgba8Unorm` format only specifies a `COLOR` aspect,\n while `D32SfloatS8Uint` specifies both a depth and stencil\n aspect but no color.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1754},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":95991,"byte_end":95996,"line_start":21,"line_end":21,"column_start":15,"column_end":20},"name":"COLOR","qualname":"::format::Aspects::COLOR","value":"Aspects","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Color aspect.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1755},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96044,"byte_end":96049,"line_start":23,"line_end":23,"column_start":15,"column_end":20},"name":"DEPTH","qualname":"::format::Aspects::DEPTH","value":"Aspects","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Depth aspect.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96099,"byte_end":96106,"line_start":25,"line_end":25,"column_start":15,"column_end":22},"name":"STENCIL","qualname":"::format::Aspects::STENCIL","value":"Aspects","parent":{"krate":0,"index":1753},"children":[],"decl_id":null,"docs":" Stencil aspect.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1811},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96232,"byte_end":96242,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"name":"FormatDesc","qualname":"::format::FormatDesc","value":"FormatDesc { bits, dim, packed, aspects }","parent":null,"children":[{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815}],"decl_id":null,"docs":" Description of a format.\n","sig":null,"attributes":[{"value":"/ Description of a format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96124,"byte_end":96152,"line_start":29,"line_end":29,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1812},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96800,"byte_end":96804,"line_start":40,"line_end":40,"column_start":9,"column_end":13},"name":"bits","qualname":"::format::FormatDesc::bits","value":"u16","parent":{"krate":0,"index":1811},"children":[],"decl_id":null,"docs":" Total number of bits.","sig":null,"attributes":[{"value":"/ Total number of bits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96249,"byte_end":96274,"line_start":32,"line_end":32,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96279,"byte_end":96282,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ * Depth/Stencil formats are opaque formats, where the total number of bits is unknown.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96287,"byte_end":96377,"line_start":34,"line_end":34,"column_start":5,"column_end":95}},{"value":"/   A dummy value is used for these formats instead (sum of depth and stencil bits).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96382,"byte_end":96468,"line_start":35,"line_end":35,"column_start":5,"column_end":91}},{"value":"/   For copy operations, the number of bits of the corresponding aspect should be used.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96473,"byte_end":96562,"line_start":36,"line_end":36,"column_start":5,"column_end":94}},{"value":"/ * The total number can be larger than the sum of individual format bits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96567,"byte_end":96642,"line_start":37,"line_end":37,"column_start":5,"column_end":80}},{"value":"/   (`color`, `alpha`, `depth` and `stencil`) for packed formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96647,"byte_end":96714,"line_start":38,"line_end":38,"column_start":5,"column_end":72}},{"value":"/ * For compressed formats, this denotes the number of bits per block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96719,"byte_end":96791,"line_start":39,"line_end":39,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96875,"byte_end":96878,"line_start":42,"line_end":42,"column_start":9,"column_end":12},"name":"dim","qualname":"::format::FormatDesc::dim","value":"(u8, u8)","parent":{"krate":0,"index":1811},"children":[],"decl_id":null,"docs":" Dimensions (width, height) of the texel blocks.\n","sig":null,"attributes":[{"value":"/ Dimensions (width, height) of the texel blocks.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96815,"byte_end":96866,"line_start":41,"line_end":41,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1814},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97106,"byte_end":97112,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"packed","qualname":"::format::FormatDesc::packed","value":"bool","parent":{"krate":0,"index":1811},"children":[],"decl_id":null,"docs":" The format representation depends on the endianness of the platform.","sig":null,"attributes":[{"value":"/ The format representation depends on the endianness of the platform.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96894,"byte_end":96966,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96971,"byte_end":96974,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ * On little-endian systems, the actual oreder of components is reverse of what","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":96979,"byte_end":97061,"line_start":45,"line_end":45,"column_start":5,"column_end":87}},{"value":"/   a surface type specifies.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97066,"byte_end":97097,"line_start":46,"line_end":46,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1815},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97151,"byte_end":97158,"line_start":49,"line_end":49,"column_start":9,"column_end":16},"name":"aspects","qualname":"::format::FormatDesc::aspects","value":"format::Aspects","parent":{"krate":0,"index":1811},"children":[],"decl_id":null,"docs":" Format aspects\n","sig":null,"attributes":[{"value":"/ Format aspects","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97124,"byte_end":97142,"line_start":48,"line_end":48,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97244,"byte_end":97257,"line_start":54,"line_end":54,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<FormatDesc>::is_compressed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the format is compressed.\n","sig":null,"attributes":[{"value":"/ Check if the format is compressed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97194,"byte_end":97232,"line_start":53,"line_end":53,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1851},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97444,"byte_end":97454,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"FormatBits","qualname":"::format::FormatBits","value":"FormatBits { color, alpha, depth, stencil }","parent":null,"children":[{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855}],"decl_id":null,"docs":" Description of the bits distribution of a format.\n","sig":null,"attributes":[{"value":"/ Description of the bits distribution of a format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97311,"byte_end":97364,"line_start":59,"line_end":59,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1852},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97571,"byte_end":97576,"line_start":65,"line_end":65,"column_start":9,"column_end":14},"name":"color","qualname":"::format::FormatBits::color","value":"u8","parent":{"krate":0,"index":1851},"children":[],"decl_id":null,"docs":" Number of color bits (summed for R/G/B).","sig":null,"attributes":[{"value":"/ Number of color bits (summed for R/G/B).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97461,"byte_end":97505,"line_start":62,"line_end":62,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97510,"byte_end":97513,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ For compressed formats, this value is 0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97518,"byte_end":97562,"line_start":64,"line_end":64,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1853},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97677,"byte_end":97682,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"alpha","qualname":"::format::FormatBits::alpha","value":"u8","parent":{"krate":0,"index":1851},"children":[],"decl_id":null,"docs":" Number of alpha bits.","sig":null,"attributes":[{"value":"/ Number of alpha bits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97586,"byte_end":97611,"line_start":66,"line_end":66,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97616,"byte_end":97619,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ For compressed formats, this value is 0.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97624,"byte_end":97668,"line_start":68,"line_end":68,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1854},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97725,"byte_end":97730,"line_start":71,"line_end":71,"column_start":9,"column_end":14},"name":"depth","qualname":"::format::FormatBits::depth","value":"u8","parent":{"krate":0,"index":1851},"children":[],"decl_id":null,"docs":" Number of depth bits\n","sig":null,"attributes":[{"value":"/ Number of depth bits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97692,"byte_end":97716,"line_start":70,"line_end":70,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1855},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97775,"byte_end":97782,"line_start":73,"line_end":73,"column_start":9,"column_end":16},"name":"stencil","qualname":"::format::FormatBits::stencil","value":"u8","parent":{"krate":0,"index":1851},"children":[],"decl_id":null,"docs":" Number of stencil bits\n","sig":null,"attributes":[{"value":"/ Number of stencil bits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97740,"byte_end":97766,"line_start":72,"line_end":72,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":373},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97854,"byte_end":97863,"line_start":77,"line_end":77,"column_start":11,"column_end":20},"name":"BITS_ZERO","qualname":"::format::BITS_ZERO","value":"FormatBits","parent":null,"children":[],"decl_id":null,"docs":" Format bits configuration with no bits assigned.\n","sig":null,"attributes":[{"value":"/ Format bits configuration with no bits assigned.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97791,"byte_end":97843,"line_start":76,"line_end":76,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1892},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98312,"byte_end":98316,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Component::Zero","value":"Component::Zero","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Hardcoded zero\n","sig":null,"attributes":[{"value":"/ Hardcoded zero","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98289,"byte_end":98307,"line_start":91,"line_end":91,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98348,"byte_end":98351,"line_start":94,"line_end":94,"column_start":5,"column_end":8},"name":"One","qualname":"::format::Component::One","value":"Component::One","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Hardcoded one\n","sig":null,"attributes":[{"value":"/ Hardcoded one","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98326,"byte_end":98343,"line_start":93,"line_end":93,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98381,"byte_end":98382,"line_start":96,"line_end":96,"column_start":5,"column_end":6},"name":"R","qualname":"::format::Component::R","value":"Component::R","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Red channel\n","sig":null,"attributes":[{"value":"/ Red channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98361,"byte_end":98376,"line_start":95,"line_end":95,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98414,"byte_end":98415,"line_start":98,"line_end":98,"column_start":5,"column_end":6},"name":"G","qualname":"::format::Component::G","value":"Component::G","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Green channel\n","sig":null,"attributes":[{"value":"/ Green channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98392,"byte_end":98409,"line_start":97,"line_end":97,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1904},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98446,"byte_end":98447,"line_start":100,"line_end":100,"column_start":5,"column_end":6},"name":"B","qualname":"::format::Component::B","value":"Component::B","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Blue channel\n","sig":null,"attributes":[{"value":"/ Blue channel","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98425,"byte_end":98441,"line_start":99,"line_end":99,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98480,"byte_end":98481,"line_start":102,"line_end":102,"column_start":5,"column_end":6},"name":"A","qualname":"::format::Component::A","value":"Component::A","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Alpha channel.\n","sig":null,"attributes":[{"value":"/ Alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98457,"byte_end":98475,"line_start":101,"line_end":101,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1891},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98241,"byte_end":98250,"line_start":89,"line_end":89,"column_start":10,"column_end":19},"name":"Component","qualname":"::format::Component","value":"Component::{Zero, One, R, G, B, A}","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1895},{"krate":0,"index":1898},{"krate":0,"index":1901},{"krate":0,"index":1904},{"krate":0,"index":1907}],"decl_id":null,"docs":" Source channel in a swizzle configuration. Some may redirect onto\n different physical channels, some may be hardcoded to 0 or 1.\n","sig":null,"attributes":[{"value":"/ Source channel in a swizzle configuration. Some may redirect onto","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97953,"byte_end":98022,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ different physical channels, some may be hardcoded to 0 or 1.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98023,"byte_end":98088,"line_start":85,"line_end":85,"column_start":1,"column_end":66}},{"value":"repr(u8)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98089,"byte_end":98100,"line_start":86,"line_end":86,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1928},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99055,"byte_end":99062,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"Swizzle","qualname":"::format::Swizzle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Channel swizzle configuration for the resource views.\n This specifies a \"swizzle\" operation which remaps the various\n channels of a format into a different order.  For example,\n `Swizzle(Component::B, Component::G, Component::R, Component::A)`\n will swap `RGBA` formats into `BGRA` formats and back.","sig":null,"attributes":[{"value":"/ Channel swizzle configuration for the resource views.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98490,"byte_end":98547,"line_start":105,"line_end":105,"column_start":1,"column_end":58}},{"value":"/ This specifies a \"swizzle\" operation which remaps the various","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98548,"byte_end":98613,"line_start":106,"line_end":106,"column_start":1,"column_end":66}},{"value":"/ channels of a format into a different order.  For example,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98614,"byte_end":98676,"line_start":107,"line_end":107,"column_start":1,"column_end":63}},{"value":"/ `Swizzle(Component::B, Component::G, Component::R, Component::A)`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98677,"byte_end":98746,"line_start":108,"line_end":108,"column_start":1,"column_end":70}},{"value":"/ will swap `RGBA` formats into `BGRA` formats and back.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98747,"byte_end":98805,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98806,"byte_end":98809,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ Note: It's not currently mirrored at compile-time,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98810,"byte_end":98864,"line_start":111,"line_end":111,"column_start":1,"column_end":55}},{"value":"/ thus providing less safety and convenience.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":98865,"byte_end":98912,"line_start":112,"line_end":112,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":375},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99224,"byte_end":99226,"line_start":119,"line_end":119,"column_start":15,"column_end":17},"name":"NO","qualname":"::format::Swizzle::NO","value":"Swizzle","parent":{"krate":0,"index":374},"children":[],"decl_id":null,"docs":" A trivially non-swizzling configuration; performs no changes.\n","sig":null,"attributes":[{"value":"/ A trivially non-swizzling configuration; performs no changes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99144,"byte_end":99209,"line_start":118,"line_end":118,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1969},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99566,"byte_end":99576,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"Properties","qualname":"::format::Properties","value":"Properties { linear_tiling, optimal_tiling, buffer_features }","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972}],"decl_id":null,"docs":" Format properties of the physical device.\n","sig":null,"attributes":[{"value":"/ Format properties of the physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99386,"byte_end":99431,"line_start":128,"line_end":128,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":1970},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99784,"byte_end":99797,"line_start":135,"line_end":135,"column_start":9,"column_end":22},"name":"linear_tiling","qualname":"::format::Properties::linear_tiling","value":"format::ImageFeature","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" A bitmask of the features supported when an image with linear tiling is requested.\n Linear tiling has a known layout in-memory so data can be copied to and from host\n memory.\n","sig":null,"attributes":[{"value":"/ A bitmask of the features supported when an image with linear tiling is requested.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99583,"byte_end":99669,"line_start":132,"line_end":132,"column_start":5,"column_end":91}},{"value":"/ Linear tiling has a known layout in-memory so data can be copied to and from host","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99674,"byte_end":99759,"line_start":133,"line_end":133,"column_start":5,"column_end":90}},{"value":"/ memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99764,"byte_end":99775,"line_start":134,"line_end":134,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":1971},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100002,"byte_end":100016,"line_start":138,"line_end":138,"column_start":9,"column_end":23},"name":"optimal_tiling","qualname":"::format::Properties::optimal_tiling","value":"format::ImageFeature","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" A bitmask of the features supported when an image with optimal tiling is requested.\n Optimal tiling is arranged however the GPU wants; its exact layout is undefined.\n","sig":null,"attributes":[{"value":"/ A bitmask of the features supported when an image with optimal tiling is requested.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99817,"byte_end":99904,"line_start":136,"line_end":136,"column_start":5,"column_end":92}},{"value":"/ Optimal tiling is arranged however the GPU wants; its exact layout is undefined.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99909,"byte_end":99993,"line_start":137,"line_end":137,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1972},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100083,"byte_end":100098,"line_start":140,"line_end":140,"column_start":9,"column_end":24},"name":"buffer_features","qualname":"::format::Properties::buffer_features","value":"format::BufferFeature","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" The features supported by buffers.\n","sig":null,"attributes":[{"value":"/ The features supported by buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100036,"byte_end":100074,"line_start":139,"line_end":139,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100263,"byte_end":100275,"line_start":147,"line_end":147,"column_start":16,"column_end":28},"name":"ImageFeature","qualname":"::format::ImageFeature","value":"ImageFeature {  }","parent":null,"children":[{"krate":0,"index":1991}],"decl_id":null,"docs":" Image feature flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100336,"byte_end":100343,"line_start":149,"line_end":149,"column_start":15,"column_end":22},"name":"SAMPLED","qualname":"::format::ImageFeature::SAMPLED","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image view can be sampled.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100418,"byte_end":100425,"line_start":151,"line_end":151,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::format::ImageFeature::STORAGE","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image view can be used as storage image.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100515,"byte_end":100529,"line_start":153,"line_end":153,"column_start":15,"column_end":29},"name":"STORAGE_ATOMIC","qualname":"::format::ImageFeature::STORAGE_ATOMIC","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image view can be used as storage image (with atomics).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100617,"byte_end":100633,"line_start":155,"line_end":155,"column_start":15,"column_end":31},"name":"COLOR_ATTACHMENT","qualname":"::format::ImageFeature::COLOR_ATTACHMENT","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image view can be used as color and input attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2041},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100738,"byte_end":100760,"line_start":157,"line_end":157,"column_start":15,"column_end":37},"name":"COLOR_ATTACHMENT_BLEND","qualname":"::format::ImageFeature::COLOR_ATTACHMENT_BLEND","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image view can be used as color (with blending) and input attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100858,"byte_end":100882,"line_start":159,"line_end":159,"column_start":15,"column_end":39},"name":"DEPTH_STENCIL_ATTACHMENT","qualname":"::format::ImageFeature::DEPTH_STENCIL_ATTACHMENT","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image view can be used as depth-stencil and input attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2043},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":100965,"byte_end":100973,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"name":"BLIT_SRC","qualname":"::format::ImageFeature::BLIT_SRC","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image can be used as source for blit commands.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2044},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101061,"byte_end":101069,"line_start":163,"line_end":163,"column_start":15,"column_end":23},"name":"BLIT_DST","qualname":"::format::ImageFeature::BLIT_DST","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image can be used as destination for blit commands.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2045},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101260,"byte_end":101274,"line_start":167,"line_end":167,"column_start":15,"column_end":29},"name":"SAMPLED_LINEAR","qualname":"::format::ImageFeature::SAMPLED_LINEAR","value":"ImageFeature","parent":{"krate":0,"index":2036},"children":[],"decl_id":null,"docs":" Image can be sampled with a (mipmap) linear sampler or as blit source\n with linear sampling.\n Requires `SAMPLED` or `BLIT_SRC` flag.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101441,"byte_end":101454,"line_start":175,"line_end":175,"column_start":16,"column_end":29},"name":"BufferFeature","qualname":"::format::BufferFeature","value":"BufferFeature {  }","parent":null,"children":[{"krate":0,"index":2119}],"decl_id":null,"docs":" Buffer feature flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101537,"byte_end":101550,"line_start":177,"line_end":177,"column_start":15,"column_end":28},"name":"UNIFORM_TEXEL","qualname":"::format::BufferFeature::UNIFORM_TEXEL","value":"BufferFeature","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Buffer view can be used as uniform texel buffer.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2161},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101633,"byte_end":101646,"line_start":179,"line_end":179,"column_start":15,"column_end":28},"name":"STORAGE_TEXEL","qualname":"::format::BufferFeature::STORAGE_TEXEL","value":"BufferFeature","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Buffer view can be used as storage texel buffer.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101745,"byte_end":101765,"line_start":181,"line_end":181,"column_start":15,"column_end":35},"name":"STORAGE_TEXEL_ATOMIC","qualname":"::format::BufferFeature::STORAGE_TEXEL_ATOMIC","value":"BufferFeature","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Buffer view can be used as storage texel buffer (with atomics).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2163},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101841,"byte_end":101847,"line_start":183,"line_end":183,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::format::BufferFeature::VERTEX","value":"BufferFeature","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Image view can be used as vertex buffer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102167,"byte_end":102172,"line_start":194,"line_end":194,"column_start":5,"column_end":10},"name":"Unorm","qualname":"::format::ChannelType::Unorm","value":"ChannelType::Unorm","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Unsigned normalized.\n","sig":null,"attributes":[{"value":"/ Unsigned normalized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102138,"byte_end":102162,"line_start":193,"line_end":193,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102205,"byte_end":102210,"line_start":196,"line_end":196,"column_start":5,"column_end":10},"name":"Snorm","qualname":"::format::ChannelType::Snorm","value":"ChannelType::Snorm","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Signed normalized.\n","sig":null,"attributes":[{"value":"/ Signed normalized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102178,"byte_end":102200,"line_start":195,"line_end":195,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2226},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102242,"byte_end":102246,"line_start":198,"line_end":198,"column_start":5,"column_end":9},"name":"Uint","qualname":"::format::ChannelType::Uint","value":"ChannelType::Uint","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Unsigned integer.\n","sig":null,"attributes":[{"value":"/ Unsigned integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102216,"byte_end":102237,"line_start":197,"line_end":197,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2228},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102276,"byte_end":102280,"line_start":200,"line_end":200,"column_start":5,"column_end":9},"name":"Sint","qualname":"::format::ChannelType::Sint","value":"ChannelType::Sint","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Signed integer.\n","sig":null,"attributes":[{"value":"/ Signed integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102252,"byte_end":102271,"line_start":199,"line_end":199,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102319,"byte_end":102325,"line_start":202,"line_end":202,"column_start":5,"column_end":11},"name":"Ufloat","qualname":"::format::ChannelType::Ufloat","value":"ChannelType::Ufloat","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Unsigned floating-point.\n","sig":null,"attributes":[{"value":"/ Unsigned floating-point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102286,"byte_end":102314,"line_start":201,"line_end":201,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102362,"byte_end":102368,"line_start":204,"line_end":204,"column_start":5,"column_end":11},"name":"Sfloat","qualname":"::format::ChannelType::Sfloat","value":"ChannelType::Sfloat","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Signed floating-point.\n","sig":null,"attributes":[{"value":"/ Signed floating-point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102331,"byte_end":102357,"line_start":203,"line_end":203,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102407,"byte_end":102414,"line_start":206,"line_end":206,"column_start":5,"column_end":12},"name":"Uscaled","qualname":"::format::ChannelType::Uscaled","value":"ChannelType::Uscaled","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Unsigned scaled integer.\n","sig":null,"attributes":[{"value":"/ Unsigned scaled integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102374,"byte_end":102402,"line_start":205,"line_end":205,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102451,"byte_end":102458,"line_start":208,"line_end":208,"column_start":5,"column_end":12},"name":"Sscaled","qualname":"::format::ChannelType::Sscaled","value":"ChannelType::Sscaled","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Signed scaled integer.\n","sig":null,"attributes":[{"value":"/ Signed scaled integer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102420,"byte_end":102446,"line_start":207,"line_end":207,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102518,"byte_end":102522,"line_start":210,"line_end":210,"column_start":5,"column_end":9},"name":"Srgb","qualname":"::format::ChannelType::Srgb","value":"ChannelType::Srgb","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":" Unsigned normalized, SRGB non-linear encoded.\n","sig":null,"attributes":[{"value":"/ Unsigned normalized, SRGB non-linear encoded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102464,"byte_end":102513,"line_start":209,"line_end":209,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":2221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":102120,"byte_end":102131,"line_start":192,"line_end":192,"column_start":10,"column_end":21},"name":"ChannelType","qualname":"::format::ChannelType","value":"ChannelType::{Unorm, Snorm, Uint, Sint, Ufloat, Sfloat, Uscaled, Sscaled, Srgb}","parent":null,"children":[{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2228},{"krate":0,"index":2230},{"krate":0,"index":2232},{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238}],"decl_id":null,"docs":" Type of a surface channel. This is how we interpret the\n storage allocated with `SurfaceType`.\n","sig":null,"attributes":[{"value":"/ Type of a surface channel. This is how we interpret the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101866,"byte_end":101925,"line_start":187,"line_end":187,"column_start":1,"column_end":60}},{"value":"/ storage allocated with `SurfaceType`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101926,"byte_end":101967,"line_start":188,"line_end":188,"column_start":1,"column_end":42}},{"value":"repr(u8)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":101968,"byte_end":101979,"line_start":189,"line_end":189,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":108158,"byte_end":108168,"line_start":326,"line_end":326,"column_start":12,"column_end":22},"name":"BaseFormat","qualname":"::format::BaseFormat","value":"","parent":null,"children":[],"decl_id":null,"docs":" Generic run-time base format.\n","sig":null,"attributes":[{"value":"/ Generic run-time base format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":107982,"byte_end":108015,"line_start":323,"line_end":323,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":379},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":108251,"byte_end":108259,"line_start":329,"line_end":329,"column_start":11,"column_end":19},"name":"AsFormat","qualname":"::format::AsFormat","value":"AsFormat","parent":null,"children":[{"krate":0,"index":380}],"decl_id":null,"docs":" Conversion trait into `Format`;\n","sig":null,"attributes":[{"value":"/ Conversion trait into `Format`;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":108205,"byte_end":108240,"line_start":328,"line_end":328,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":380},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":108299,"byte_end":108303,"line_start":331,"line_end":331,"column_start":11,"column_end":15},"name":"SELF","qualname":"::format::AsFormat::SELF","value":"Format","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" Associated format.\n","sig":null,"attributes":[{"value":"/ Associated format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":108266,"byte_end":108288,"line_start":330,"line_end":330,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":3202},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110812,"byte_end":110820,"line_start":396,"line_end":396,"column_start":5,"column_end":13},"name":"Rg4Unorm","qualname":"::format::Rg4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":109772,"byte_end":109846,"line_start":368,"line_end":368,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":109859,"byte_end":109913,"line_start":369,"line_end":369,"column_start":13,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":3222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110843,"byte_end":110853,"line_start":397,"line_end":397,"column_start":5,"column_end":15},"name":"Rgba4Unorm","qualname":"::format::Rgba4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110882,"byte_end":110892,"line_start":398,"line_end":398,"column_start":5,"column_end":15},"name":"Bgra4Unorm","qualname":"::format::Bgra4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110921,"byte_end":110932,"line_start":399,"line_end":399,"column_start":5,"column_end":16},"name":"R5g6b5Unorm","qualname":"::format::R5g6b5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110958,"byte_end":110969,"line_start":400,"line_end":400,"column_start":5,"column_end":16},"name":"B5g6r5Unorm","qualname":"::format::B5g6r5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110995,"byte_end":111008,"line_start":401,"line_end":401,"column_start":5,"column_end":18},"name":"R5g5b5a1Unorm","qualname":"::format::R5g5b5a1Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3322},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111037,"byte_end":111050,"line_start":402,"line_end":402,"column_start":5,"column_end":18},"name":"B5g5r5a1Unorm","qualname":"::format::B5g5r5a1Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111079,"byte_end":111092,"line_start":403,"line_end":403,"column_start":5,"column_end":18},"name":"A1r5g5b5Unorm","qualname":"::format::A1r5g5b5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111121,"byte_end":111128,"line_start":404,"line_end":404,"column_start":5,"column_end":12},"name":"R8Unorm","qualname":"::format::R8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111148,"byte_end":111155,"line_start":405,"line_end":405,"column_start":5,"column_end":12},"name":"R8Snorm","qualname":"::format::R8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111175,"byte_end":111184,"line_start":406,"line_end":406,"column_start":5,"column_end":14},"name":"R8Uscaled","qualname":"::format::R8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111206,"byte_end":111215,"line_start":407,"line_end":407,"column_start":5,"column_end":14},"name":"R8Sscaled","qualname":"::format::R8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111237,"byte_end":111243,"line_start":408,"line_end":408,"column_start":5,"column_end":11},"name":"R8Uint","qualname":"::format::R8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111262,"byte_end":111268,"line_start":409,"line_end":409,"column_start":5,"column_end":11},"name":"R8Sint","qualname":"::format::R8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111287,"byte_end":111293,"line_start":410,"line_end":410,"column_start":5,"column_end":11},"name":"R8Srgb","qualname":"::format::R8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111312,"byte_end":111320,"line_start":411,"line_end":411,"column_start":5,"column_end":13},"name":"Rg8Unorm","qualname":"::format::Rg8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111343,"byte_end":111351,"line_start":412,"line_end":412,"column_start":5,"column_end":13},"name":"Rg8Snorm","qualname":"::format::Rg8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111374,"byte_end":111384,"line_start":413,"line_end":413,"column_start":5,"column_end":15},"name":"Rg8Uscaled","qualname":"::format::Rg8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3562},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111409,"byte_end":111419,"line_start":414,"line_end":414,"column_start":5,"column_end":15},"name":"Rg8Sscaled","qualname":"::format::Rg8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111444,"byte_end":111451,"line_start":415,"line_end":415,"column_start":5,"column_end":12},"name":"Rg8Uint","qualname":"::format::Rg8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3602},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111473,"byte_end":111480,"line_start":416,"line_end":416,"column_start":5,"column_end":12},"name":"Rg8Sint","qualname":"::format::Rg8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111502,"byte_end":111509,"line_start":417,"line_end":417,"column_start":5,"column_end":12},"name":"Rg8Srgb","qualname":"::format::Rg8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111531,"byte_end":111540,"line_start":418,"line_end":418,"column_start":5,"column_end":14},"name":"Rgb8Unorm","qualname":"::format::Rgb8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111566,"byte_end":111575,"line_start":419,"line_end":419,"column_start":5,"column_end":14},"name":"Rgb8Snorm","qualname":"::format::Rgb8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111601,"byte_end":111612,"line_start":420,"line_end":420,"column_start":5,"column_end":16},"name":"Rgb8Uscaled","qualname":"::format::Rgb8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111640,"byte_end":111651,"line_start":421,"line_end":421,"column_start":5,"column_end":16},"name":"Rgb8Sscaled","qualname":"::format::Rgb8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111679,"byte_end":111687,"line_start":422,"line_end":422,"column_start":5,"column_end":13},"name":"Rgb8Uint","qualname":"::format::Rgb8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111712,"byte_end":111720,"line_start":423,"line_end":423,"column_start":5,"column_end":13},"name":"Rgb8Sint","qualname":"::format::Rgb8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111745,"byte_end":111753,"line_start":424,"line_end":424,"column_start":5,"column_end":13},"name":"Rgb8Srgb","qualname":"::format::Rgb8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111778,"byte_end":111787,"line_start":425,"line_end":425,"column_start":5,"column_end":14},"name":"Bgr8Unorm","qualname":"::format::Bgr8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111813,"byte_end":111822,"line_start":426,"line_end":426,"column_start":5,"column_end":14},"name":"Bgr8Snorm","qualname":"::format::Bgr8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111848,"byte_end":111859,"line_start":427,"line_end":427,"column_start":5,"column_end":16},"name":"Bgr8Uscaled","qualname":"::format::Bgr8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111887,"byte_end":111898,"line_start":428,"line_end":428,"column_start":5,"column_end":16},"name":"Bgr8Sscaled","qualname":"::format::Bgr8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3862},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111926,"byte_end":111934,"line_start":429,"line_end":429,"column_start":5,"column_end":13},"name":"Bgr8Uint","qualname":"::format::Bgr8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111959,"byte_end":111967,"line_start":430,"line_end":430,"column_start":5,"column_end":13},"name":"Bgr8Sint","qualname":"::format::Bgr8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3902},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":111992,"byte_end":112000,"line_start":431,"line_end":431,"column_start":5,"column_end":13},"name":"Bgr8Srgb","qualname":"::format::Bgr8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112025,"byte_end":112035,"line_start":432,"line_end":432,"column_start":5,"column_end":15},"name":"Rgba8Unorm","qualname":"::format::Rgba8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112064,"byte_end":112074,"line_start":433,"line_end":433,"column_start":5,"column_end":15},"name":"Rgba8Snorm","qualname":"::format::Rgba8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112103,"byte_end":112115,"line_start":434,"line_end":434,"column_start":5,"column_end":17},"name":"Rgba8Uscaled","qualname":"::format::Rgba8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":3982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112146,"byte_end":112158,"line_start":435,"line_end":435,"column_start":5,"column_end":17},"name":"Rgba8Sscaled","qualname":"::format::Rgba8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112189,"byte_end":112198,"line_start":436,"line_end":436,"column_start":5,"column_end":14},"name":"Rgba8Uint","qualname":"::format::Rgba8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112226,"byte_end":112235,"line_start":437,"line_end":437,"column_start":5,"column_end":14},"name":"Rgba8Sint","qualname":"::format::Rgba8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112263,"byte_end":112272,"line_start":438,"line_end":438,"column_start":5,"column_end":14},"name":"Rgba8Srgb","qualname":"::format::Rgba8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112300,"byte_end":112310,"line_start":439,"line_end":439,"column_start":5,"column_end":15},"name":"Bgra8Unorm","qualname":"::format::Bgra8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4082},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112339,"byte_end":112349,"line_start":440,"line_end":440,"column_start":5,"column_end":15},"name":"Bgra8Snorm","qualname":"::format::Bgra8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112378,"byte_end":112390,"line_start":441,"line_end":441,"column_start":5,"column_end":17},"name":"Bgra8Uscaled","qualname":"::format::Bgra8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112421,"byte_end":112433,"line_start":442,"line_end":442,"column_start":5,"column_end":17},"name":"Bgra8Sscaled","qualname":"::format::Bgra8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112464,"byte_end":112473,"line_start":443,"line_end":443,"column_start":5,"column_end":14},"name":"Bgra8Uint","qualname":"::format::Bgra8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112501,"byte_end":112510,"line_start":444,"line_end":444,"column_start":5,"column_end":14},"name":"Bgra8Sint","qualname":"::format::Bgra8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112538,"byte_end":112547,"line_start":445,"line_end":445,"column_start":5,"column_end":14},"name":"Bgra8Srgb","qualname":"::format::Bgra8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4202},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112575,"byte_end":112585,"line_start":446,"line_end":446,"column_start":5,"column_end":15},"name":"Abgr8Unorm","qualname":"::format::Abgr8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112614,"byte_end":112624,"line_start":447,"line_end":447,"column_start":5,"column_end":15},"name":"Abgr8Snorm","qualname":"::format::Abgr8Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112653,"byte_end":112665,"line_start":448,"line_end":448,"column_start":5,"column_end":17},"name":"Abgr8Uscaled","qualname":"::format::Abgr8Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112696,"byte_end":112708,"line_start":449,"line_end":449,"column_start":5,"column_end":17},"name":"Abgr8Sscaled","qualname":"::format::Abgr8Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112739,"byte_end":112748,"line_start":450,"line_end":450,"column_start":5,"column_end":14},"name":"Abgr8Uint","qualname":"::format::Abgr8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112776,"byte_end":112785,"line_start":451,"line_end":451,"column_start":5,"column_end":14},"name":"Abgr8Sint","qualname":"::format::Abgr8Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4322},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112813,"byte_end":112822,"line_start":452,"line_end":452,"column_start":5,"column_end":14},"name":"Abgr8Srgb","qualname":"::format::Abgr8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112850,"byte_end":112866,"line_start":453,"line_end":453,"column_start":5,"column_end":21},"name":"A2r10g10b10Unorm","qualname":"::format::A2r10g10b10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112898,"byte_end":112914,"line_start":454,"line_end":454,"column_start":5,"column_end":21},"name":"A2r10g10b10Snorm","qualname":"::format::A2r10g10b10Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112946,"byte_end":112964,"line_start":455,"line_end":455,"column_start":5,"column_end":23},"name":"A2r10g10b10Uscaled","qualname":"::format::A2r10g10b10Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":112998,"byte_end":113016,"line_start":456,"line_end":456,"column_start":5,"column_end":23},"name":"A2r10g10b10Sscaled","qualname":"::format::A2r10g10b10Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113050,"byte_end":113065,"line_start":457,"line_end":457,"column_start":5,"column_end":20},"name":"A2r10g10b10Uint","qualname":"::format::A2r10g10b10Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113096,"byte_end":113111,"line_start":458,"line_end":458,"column_start":5,"column_end":20},"name":"A2r10g10b10Sint","qualname":"::format::A2r10g10b10Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113142,"byte_end":113158,"line_start":459,"line_end":459,"column_start":5,"column_end":21},"name":"A2b10g10r10Unorm","qualname":"::format::A2b10g10r10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113190,"byte_end":113206,"line_start":460,"line_end":460,"column_start":5,"column_end":21},"name":"A2b10g10r10Snorm","qualname":"::format::A2b10g10r10Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113238,"byte_end":113256,"line_start":461,"line_end":461,"column_start":5,"column_end":23},"name":"A2b10g10r10Uscaled","qualname":"::format::A2b10g10r10Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113290,"byte_end":113308,"line_start":462,"line_end":462,"column_start":5,"column_end":23},"name":"A2b10g10r10Sscaled","qualname":"::format::A2b10g10r10Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113342,"byte_end":113357,"line_start":463,"line_end":463,"column_start":5,"column_end":20},"name":"A2b10g10r10Uint","qualname":"::format::A2b10g10r10Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4562},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113388,"byte_end":113403,"line_start":464,"line_end":464,"column_start":5,"column_end":20},"name":"A2b10g10r10Sint","qualname":"::format::A2b10g10r10Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113434,"byte_end":113442,"line_start":465,"line_end":465,"column_start":5,"column_end":13},"name":"R16Unorm","qualname":"::format::R16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4602},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113463,"byte_end":113471,"line_start":466,"line_end":466,"column_start":5,"column_end":13},"name":"R16Snorm","qualname":"::format::R16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113492,"byte_end":113502,"line_start":467,"line_end":467,"column_start":5,"column_end":15},"name":"R16Uscaled","qualname":"::format::R16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113525,"byte_end":113535,"line_start":468,"line_end":468,"column_start":5,"column_end":15},"name":"R16Sscaled","qualname":"::format::R16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113558,"byte_end":113565,"line_start":469,"line_end":469,"column_start":5,"column_end":12},"name":"R16Uint","qualname":"::format::R16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113585,"byte_end":113592,"line_start":470,"line_end":470,"column_start":5,"column_end":12},"name":"R16Sint","qualname":"::format::R16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113612,"byte_end":113621,"line_start":471,"line_end":471,"column_start":5,"column_end":14},"name":"R16Sfloat","qualname":"::format::R16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113643,"byte_end":113652,"line_start":472,"line_end":472,"column_start":5,"column_end":14},"name":"Rg16Unorm","qualname":"::format::Rg16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113677,"byte_end":113686,"line_start":473,"line_end":473,"column_start":5,"column_end":14},"name":"Rg16Snorm","qualname":"::format::Rg16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113711,"byte_end":113722,"line_start":474,"line_end":474,"column_start":5,"column_end":16},"name":"Rg16Uscaled","qualname":"::format::Rg16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113749,"byte_end":113760,"line_start":475,"line_end":475,"column_start":5,"column_end":16},"name":"Rg16Sscaled","qualname":"::format::Rg16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113787,"byte_end":113795,"line_start":476,"line_end":476,"column_start":5,"column_end":13},"name":"Rg16Uint","qualname":"::format::Rg16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113819,"byte_end":113827,"line_start":477,"line_end":477,"column_start":5,"column_end":13},"name":"Rg16Sint","qualname":"::format::Rg16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113851,"byte_end":113861,"line_start":478,"line_end":478,"column_start":5,"column_end":15},"name":"Rg16Sfloat","qualname":"::format::Rg16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4862},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113887,"byte_end":113897,"line_start":479,"line_end":479,"column_start":5,"column_end":15},"name":"Rgb16Unorm","qualname":"::format::Rgb16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113926,"byte_end":113936,"line_start":480,"line_end":480,"column_start":5,"column_end":15},"name":"Rgb16Snorm","qualname":"::format::Rgb16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4902},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":113965,"byte_end":113977,"line_start":481,"line_end":481,"column_start":5,"column_end":17},"name":"Rgb16Uscaled","qualname":"::format::Rgb16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114008,"byte_end":114020,"line_start":482,"line_end":482,"column_start":5,"column_end":17},"name":"Rgb16Sscaled","qualname":"::format::Rgb16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114051,"byte_end":114060,"line_start":483,"line_end":483,"column_start":5,"column_end":14},"name":"Rgb16Uint","qualname":"::format::Rgb16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114088,"byte_end":114097,"line_start":484,"line_end":484,"column_start":5,"column_end":14},"name":"Rgb16Sint","qualname":"::format::Rgb16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":4982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114125,"byte_end":114136,"line_start":485,"line_end":485,"column_start":5,"column_end":16},"name":"Rgb16Sfloat","qualname":"::format::Rgb16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114166,"byte_end":114177,"line_start":486,"line_end":486,"column_start":5,"column_end":16},"name":"Rgba16Unorm","qualname":"::format::Rgba16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114210,"byte_end":114221,"line_start":487,"line_end":487,"column_start":5,"column_end":16},"name":"Rgba16Snorm","qualname":"::format::Rgba16Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114254,"byte_end":114267,"line_start":488,"line_end":488,"column_start":5,"column_end":18},"name":"Rgba16Uscaled","qualname":"::format::Rgba16Uscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114302,"byte_end":114315,"line_start":489,"line_end":489,"column_start":5,"column_end":18},"name":"Rgba16Sscaled","qualname":"::format::Rgba16Sscaled","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5082},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114350,"byte_end":114360,"line_start":490,"line_end":490,"column_start":5,"column_end":15},"name":"Rgba16Uint","qualname":"::format::Rgba16Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114392,"byte_end":114402,"line_start":491,"line_end":491,"column_start":5,"column_end":15},"name":"Rgba16Sint","qualname":"::format::Rgba16Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114434,"byte_end":114446,"line_start":492,"line_end":492,"column_start":5,"column_end":17},"name":"Rgba16Sfloat","qualname":"::format::Rgba16Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114480,"byte_end":114487,"line_start":493,"line_end":493,"column_start":5,"column_end":12},"name":"R32Uint","qualname":"::format::R32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114507,"byte_end":114514,"line_start":494,"line_end":494,"column_start":5,"column_end":12},"name":"R32Sint","qualname":"::format::R32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114534,"byte_end":114543,"line_start":495,"line_end":495,"column_start":5,"column_end":14},"name":"R32Sfloat","qualname":"::format::R32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5202},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114565,"byte_end":114573,"line_start":496,"line_end":496,"column_start":5,"column_end":13},"name":"Rg32Uint","qualname":"::format::Rg32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114597,"byte_end":114605,"line_start":497,"line_end":497,"column_start":5,"column_end":13},"name":"Rg32Sint","qualname":"::format::Rg32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114629,"byte_end":114639,"line_start":498,"line_end":498,"column_start":5,"column_end":15},"name":"Rg32Sfloat","qualname":"::format::Rg32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114665,"byte_end":114674,"line_start":499,"line_end":499,"column_start":5,"column_end":14},"name":"Rgb32Uint","qualname":"::format::Rgb32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114702,"byte_end":114711,"line_start":500,"line_end":500,"column_start":5,"column_end":14},"name":"Rgb32Sint","qualname":"::format::Rgb32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114739,"byte_end":114750,"line_start":501,"line_end":501,"column_start":5,"column_end":16},"name":"Rgb32Sfloat","qualname":"::format::Rgb32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5322},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114780,"byte_end":114790,"line_start":502,"line_end":502,"column_start":5,"column_end":15},"name":"Rgba32Uint","qualname":"::format::Rgba32Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114822,"byte_end":114832,"line_start":503,"line_end":503,"column_start":5,"column_end":15},"name":"Rgba32Sint","qualname":"::format::Rgba32Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114864,"byte_end":114876,"line_start":504,"line_end":504,"column_start":5,"column_end":17},"name":"Rgba32Sfloat","qualname":"::format::Rgba32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114910,"byte_end":114917,"line_start":505,"line_end":505,"column_start":5,"column_end":12},"name":"R64Uint","qualname":"::format::R64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114937,"byte_end":114944,"line_start":506,"line_end":506,"column_start":5,"column_end":12},"name":"R64Sint","qualname":"::format::R64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114964,"byte_end":114973,"line_start":507,"line_end":507,"column_start":5,"column_end":14},"name":"R64Sfloat","qualname":"::format::R64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":114995,"byte_end":115003,"line_start":508,"line_end":508,"column_start":5,"column_end":13},"name":"Rg64Uint","qualname":"::format::Rg64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115027,"byte_end":115035,"line_start":509,"line_end":509,"column_start":5,"column_end":13},"name":"Rg64Sint","qualname":"::format::Rg64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115059,"byte_end":115069,"line_start":510,"line_end":510,"column_start":5,"column_end":15},"name":"Rg64Sfloat","qualname":"::format::Rg64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115095,"byte_end":115104,"line_start":511,"line_end":511,"column_start":5,"column_end":14},"name":"Rgb64Uint","qualname":"::format::Rgb64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115132,"byte_end":115141,"line_start":512,"line_end":512,"column_start":5,"column_end":14},"name":"Rgb64Sint","qualname":"::format::Rgb64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115169,"byte_end":115180,"line_start":513,"line_end":513,"column_start":5,"column_end":16},"name":"Rgb64Sfloat","qualname":"::format::Rgb64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5562},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115210,"byte_end":115220,"line_start":514,"line_end":514,"column_start":5,"column_end":15},"name":"Rgba64Uint","qualname":"::format::Rgba64Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115252,"byte_end":115262,"line_start":515,"line_end":515,"column_start":5,"column_end":15},"name":"Rgba64Sint","qualname":"::format::Rgba64Sint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5602},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115294,"byte_end":115306,"line_start":516,"line_end":516,"column_start":5,"column_end":17},"name":"Rgba64Sfloat","qualname":"::format::Rgba64Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115340,"byte_end":115355,"line_start":517,"line_end":517,"column_start":5,"column_end":20},"name":"B10g11r11Ufloat","qualname":"::format::B10g11r11Ufloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115385,"byte_end":115399,"line_start":518,"line_end":518,"column_start":5,"column_end":19},"name":"E5b9g9r9Ufloat","qualname":"::format::E5b9g9r9Ufloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115429,"byte_end":115437,"line_start":519,"line_end":519,"column_start":5,"column_end":13},"name":"D16Unorm","qualname":"::format::D16Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115458,"byte_end":115468,"line_start":520,"line_end":520,"column_start":5,"column_end":15},"name":"X8D24Unorm","qualname":"::format::X8D24Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115491,"byte_end":115500,"line_start":521,"line_end":521,"column_start":5,"column_end":14},"name":"D32Sfloat","qualname":"::format::D32Sfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115522,"byte_end":115528,"line_start":522,"line_end":522,"column_start":5,"column_end":11},"name":"S8Uint","qualname":"::format::S8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115547,"byte_end":115561,"line_start":523,"line_end":523,"column_start":5,"column_end":19},"name":"D16UnormS8Uint","qualname":"::format::D16UnormS8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115585,"byte_end":115599,"line_start":524,"line_end":524,"column_start":5,"column_end":19},"name":"D24UnormS8Uint","qualname":"::format::D24UnormS8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115623,"byte_end":115638,"line_start":525,"line_end":525,"column_start":5,"column_end":20},"name":"D32SfloatS8Uint","qualname":"::format::D32SfloatS8Uint","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115663,"byte_end":115674,"line_start":526,"line_end":526,"column_start":5,"column_end":16},"name":"Bc1RgbUnorm","qualname":"::format::Bc1RgbUnorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115699,"byte_end":115709,"line_start":527,"line_end":527,"column_start":5,"column_end":15},"name":"Bc1RgbSrgb","qualname":"::format::Bc1RgbSrgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115733,"byte_end":115745,"line_start":528,"line_end":528,"column_start":5,"column_end":17},"name":"Bc1RgbaUnorm","qualname":"::format::Bc1RgbaUnorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5862},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115771,"byte_end":115782,"line_start":529,"line_end":529,"column_start":5,"column_end":16},"name":"Bc1RgbaSrgb","qualname":"::format::Bc1RgbaSrgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115807,"byte_end":115815,"line_start":530,"line_end":530,"column_start":5,"column_end":13},"name":"Bc2Unorm","qualname":"::format::Bc2Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5902},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115836,"byte_end":115843,"line_start":531,"line_end":531,"column_start":5,"column_end":12},"name":"Bc2Srgb","qualname":"::format::Bc2Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115863,"byte_end":115871,"line_start":532,"line_end":532,"column_start":5,"column_end":13},"name":"Bc3Unorm","qualname":"::format::Bc3Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115892,"byte_end":115899,"line_start":533,"line_end":533,"column_start":5,"column_end":12},"name":"Bc3Srgb","qualname":"::format::Bc3Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115919,"byte_end":115927,"line_start":534,"line_end":534,"column_start":5,"column_end":13},"name":"Bc4Unorm","qualname":"::format::Bc4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":5982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115948,"byte_end":115956,"line_start":535,"line_end":535,"column_start":5,"column_end":13},"name":"Bc4Snorm","qualname":"::format::Bc4Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":115977,"byte_end":115985,"line_start":536,"line_end":536,"column_start":5,"column_end":13},"name":"Bc5Unorm","qualname":"::format::Bc5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116006,"byte_end":116014,"line_start":537,"line_end":537,"column_start":5,"column_end":13},"name":"Bc5Snorm","qualname":"::format::Bc5Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116035,"byte_end":116045,"line_start":538,"line_end":538,"column_start":5,"column_end":15},"name":"Bc6hUfloat","qualname":"::format::Bc6hUfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116067,"byte_end":116077,"line_start":539,"line_end":539,"column_start":5,"column_end":15},"name":"Bc6hSfloat","qualname":"::format::Bc6hSfloat","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6082},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116099,"byte_end":116107,"line_start":540,"line_end":540,"column_start":5,"column_end":13},"name":"Bc7Unorm","qualname":"::format::Bc7Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116128,"byte_end":116135,"line_start":541,"line_end":541,"column_start":5,"column_end":12},"name":"Bc7Srgb","qualname":"::format::Bc7Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116155,"byte_end":116170,"line_start":542,"line_end":542,"column_start":5,"column_end":20},"name":"Etc2R8g8b8Unorm","qualname":"::format::Etc2R8g8b8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116201,"byte_end":116215,"line_start":543,"line_end":543,"column_start":5,"column_end":19},"name":"Etc2R8g8b8Srgb","qualname":"::format::Etc2R8g8b8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6162},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116245,"byte_end":116262,"line_start":544,"line_end":544,"column_start":5,"column_end":22},"name":"Etc2R8g8b8a1Unorm","qualname":"::format::Etc2R8g8b8a1Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116296,"byte_end":116312,"line_start":545,"line_end":545,"column_start":5,"column_end":21},"name":"Etc2R8g8b8a1Srgb","qualname":"::format::Etc2R8g8b8a1Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6202},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116345,"byte_end":116362,"line_start":546,"line_end":546,"column_start":5,"column_end":22},"name":"Etc2R8g8b8a8Unorm","qualname":"::format::Etc2R8g8b8a8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116396,"byte_end":116412,"line_start":547,"line_end":547,"column_start":5,"column_end":21},"name":"Etc2R8g8b8a8Srgb","qualname":"::format::Etc2R8g8b8a8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116445,"byte_end":116456,"line_start":548,"line_end":548,"column_start":5,"column_end":16},"name":"EacR11Unorm","qualname":"::format::EacR11Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6262},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116481,"byte_end":116492,"line_start":549,"line_end":549,"column_start":5,"column_end":16},"name":"EacR11Snorm","qualname":"::format::EacR11Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6282},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116517,"byte_end":116531,"line_start":550,"line_end":550,"column_start":5,"column_end":19},"name":"EacR11g11Unorm","qualname":"::format::EacR11g11Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6302},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116560,"byte_end":116574,"line_start":551,"line_end":551,"column_start":5,"column_end":19},"name":"EacR11g11Snorm","qualname":"::format::EacR11g11Snorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6322},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116603,"byte_end":116615,"line_start":552,"line_end":552,"column_start":5,"column_end":17},"name":"Astc4x4Unorm","qualname":"::format::Astc4x4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6342},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116641,"byte_end":116652,"line_start":553,"line_end":553,"column_start":5,"column_end":16},"name":"Astc4x4Srgb","qualname":"::format::Astc4x4Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116677,"byte_end":116689,"line_start":554,"line_end":554,"column_start":5,"column_end":17},"name":"Astc5x4Unorm","qualname":"::format::Astc5x4Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6382},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116715,"byte_end":116726,"line_start":555,"line_end":555,"column_start":5,"column_end":16},"name":"Astc5x4Srgb","qualname":"::format::Astc5x4Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116751,"byte_end":116763,"line_start":556,"line_end":556,"column_start":5,"column_end":17},"name":"Astc5x5Unorm","qualname":"::format::Astc5x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116789,"byte_end":116800,"line_start":557,"line_end":557,"column_start":5,"column_end":16},"name":"Astc5x5Srgb","qualname":"::format::Astc5x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116825,"byte_end":116837,"line_start":558,"line_end":558,"column_start":5,"column_end":17},"name":"Astc6x5Unorm","qualname":"::format::Astc6x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116863,"byte_end":116874,"line_start":559,"line_end":559,"column_start":5,"column_end":16},"name":"Astc6x5Srgb","qualname":"::format::Astc6x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6482},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116899,"byte_end":116911,"line_start":560,"line_end":560,"column_start":5,"column_end":17},"name":"Astc6x6Unorm","qualname":"::format::Astc6x6Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116937,"byte_end":116948,"line_start":561,"line_end":561,"column_start":5,"column_end":16},"name":"Astc6x6Srgb","qualname":"::format::Astc6x6Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":116973,"byte_end":116985,"line_start":562,"line_end":562,"column_start":5,"column_end":17},"name":"Astc8x5Unorm","qualname":"::format::Astc8x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6542},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117011,"byte_end":117022,"line_start":563,"line_end":563,"column_start":5,"column_end":16},"name":"Astc8x5Srgb","qualname":"::format::Astc8x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6562},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117047,"byte_end":117059,"line_start":564,"line_end":564,"column_start":5,"column_end":17},"name":"Astc8x6Unorm","qualname":"::format::Astc8x6Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117085,"byte_end":117096,"line_start":565,"line_end":565,"column_start":5,"column_end":16},"name":"Astc8x6Srgb","qualname":"::format::Astc8x6Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6602},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117121,"byte_end":117133,"line_start":566,"line_end":566,"column_start":5,"column_end":17},"name":"Astc8x8Unorm","qualname":"::format::Astc8x8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117159,"byte_end":117170,"line_start":567,"line_end":567,"column_start":5,"column_end":16},"name":"Astc8x8Srgb","qualname":"::format::Astc8x8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117195,"byte_end":117208,"line_start":568,"line_end":568,"column_start":5,"column_end":18},"name":"Astc10x5Unorm","qualname":"::format::Astc10x5Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117235,"byte_end":117247,"line_start":569,"line_end":569,"column_start":5,"column_end":17},"name":"Astc10x5Srgb","qualname":"::format::Astc10x5Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6682},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117273,"byte_end":117286,"line_start":570,"line_end":570,"column_start":5,"column_end":18},"name":"Astc10x6Unorm","qualname":"::format::Astc10x6Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117313,"byte_end":117325,"line_start":571,"line_end":571,"column_start":5,"column_end":17},"name":"Astc10x6Srgb","qualname":"::format::Astc10x6Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117351,"byte_end":117364,"line_start":572,"line_end":572,"column_start":5,"column_end":18},"name":"Astc10x8Unorm","qualname":"::format::Astc10x8Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117391,"byte_end":117403,"line_start":573,"line_end":573,"column_start":5,"column_end":17},"name":"Astc10x8Srgb","qualname":"::format::Astc10x8Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117429,"byte_end":117443,"line_start":574,"line_end":574,"column_start":5,"column_end":19},"name":"Astc10x10Unorm","qualname":"::format::Astc10x10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117471,"byte_end":117484,"line_start":575,"line_end":575,"column_start":5,"column_end":18},"name":"Astc10x10Srgb","qualname":"::format::Astc10x10Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117511,"byte_end":117525,"line_start":576,"line_end":576,"column_start":5,"column_end":19},"name":"Astc12x10Unorm","qualname":"::format::Astc12x10Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117553,"byte_end":117566,"line_start":577,"line_end":577,"column_start":5,"column_end":18},"name":"Astc12x10Srgb","qualname":"::format::Astc12x10Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117593,"byte_end":117607,"line_start":578,"line_end":578,"column_start":5,"column_end":19},"name":"Astc12x12Unorm","qualname":"::format::Astc12x12Unorm","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":6862},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117635,"byte_end":117648,"line_start":579,"line_end":579,"column_start":5,"column_end":18},"name":"Astc12x12Srgb","qualname":"::format::Astc12x12Srgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct equivalent to the matching `Format` enum member, which allows\n an API to be strongly typed on particular formats.\n","sig":null,"attributes":[{"value":"/ A struct equivalent to the matching `Format` enum member, which allows","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110228,"byte_end":110302,"line_start":379,"line_end":379,"column_start":13,"column_end":87}},{"value":"/ an API to be strongly typed on particular formats.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110315,"byte_end":110369,"line_start":380,"line_end":380,"column_start":13,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":110382,"byte_end":110404,"line_start":381,"line_end":381,"column_start":13,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117781,"byte_end":117792,"line_start":586,"line_end":586,"column_start":12,"column_end":23},"name":"base_format","qualname":"<Format>::base_format","value":"fn (self) -> BaseFormat","parent":null,"children":[],"decl_id":null,"docs":" Get base format.","sig":null,"attributes":[{"value":"/ Get base format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117692,"byte_end":117712,"line_start":583,"line_end":583,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117717,"byte_end":117720,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if format is `Undefined`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117725,"byte_end":117769,"line_start":585,"line_end":585,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117998,"byte_end":118010,"line_start":592,"line_end":592,"column_start":12,"column_end":24},"name":"surface_desc","qualname":"<Format>::surface_desc","value":"fn (&self) -> FormatDesc","parent":null,"children":[],"decl_id":null,"docs":" A shortcut to obtain surface format description.\n","sig":null,"attributes":[{"value":"/ A shortcut to obtain surface format description.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117934,"byte_end":117986,"line_start":591,"line_end":591,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":118138,"byte_end":118146,"line_start":597,"line_end":597,"column_start":12,"column_end":20},"name":"is_color","qualname":"<Format>::is_color","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the format has a color aspect.\n","sig":null,"attributes":[{"value":"/ Returns if the format has a color aspect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":118081,"byte_end":118126,"line_start":596,"line_end":596,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":118292,"byte_end":118300,"line_start":602,"line_end":602,"column_start":12,"column_end":20},"name":"is_depth","qualname":"<Format>::is_depth","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the format has a depth aspect.\n","sig":null,"attributes":[{"value":"/ Returns if the format has a depth aspect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":118235,"byte_end":118280,"line_start":601,"line_end":601,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":118448,"byte_end":118458,"line_start":607,"line_end":607,"column_start":12,"column_end":22},"name":"is_stencil","qualname":"<Format>::is_stencil","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the format has a stencil aspect.\n","sig":null,"attributes":[{"value":"/ Returns if the format has a stencil aspect.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":118389,"byte_end":118436,"line_start":606,"line_end":606,"column_start":5,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":399},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"image","qualname":"::image","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":407},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":6882},{"krate":0,"index":6901},{"krate":0,"index":6900},{"krate":0,"index":6898},{"krate":0,"index":6896},{"krate":0,"index":6893},{"krate":0,"index":6889},{"krate":0,"index":6890},{"krate":0,"index":6886},{"krate":0,"index":6887},{"krate":0,"index":417},{"krate":0,"index":6903},{"krate":0,"index":6922},{"krate":0,"index":6921},{"krate":0,"index":6919},{"krate":0,"index":6917},{"krate":0,"index":6914},{"krate":0,"index":6910},{"krate":0,"index":6911},{"krate":0,"index":6907},{"krate":0,"index":6908},{"krate":0,"index":421},{"krate":0,"index":6924},{"krate":0,"index":6947},{"krate":0,"index":6946},{"krate":0,"index":6944},{"krate":0,"index":6941},{"krate":0,"index":6942},{"krate":0,"index":6938},{"krate":0,"index":6936},{"krate":0,"index":6933},{"krate":0,"index":6934},{"krate":0,"index":6931},{"krate":0,"index":6949},{"krate":0,"index":6976},{"krate":0,"index":6974},{"krate":0,"index":6970},{"krate":0,"index":6971},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":6978},{"krate":0,"index":7005},{"krate":0,"index":7003},{"krate":0,"index":6999},{"krate":0,"index":7000},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":7007},{"krate":0,"index":7020},{"krate":0,"index":7018},{"krate":0,"index":7014},{"krate":0,"index":7015},{"krate":0,"index":436},{"krate":0,"index":7022},{"krate":0,"index":7043},{"krate":0,"index":7042},{"krate":0,"index":7040},{"krate":0,"index":7037},{"krate":0,"index":7038},{"krate":0,"index":7034},{"krate":0,"index":7032},{"krate":0,"index":7029},{"krate":0,"index":7030},{"krate":0,"index":7027},{"krate":0,"index":7045},{"krate":0,"index":7074},{"krate":0,"index":7073},{"krate":0,"index":7071},{"krate":0,"index":7068},{"krate":0,"index":7069},{"krate":0,"index":7065},{"krate":0,"index":7063},{"krate":0,"index":7060},{"krate":0,"index":7061},{"krate":0,"index":7058},{"krate":0,"index":438},{"krate":0,"index":7076},{"krate":0,"index":7137},{"krate":0,"index":7136},{"krate":0,"index":7134},{"krate":0,"index":7131},{"krate":0,"index":7132},{"krate":0,"index":7128},{"krate":0,"index":7126},{"krate":0,"index":7122},{"krate":0,"index":7123},{"krate":0,"index":7092},{"krate":0,"index":440},{"krate":0,"index":7139},{"krate":0,"index":7170},{"krate":0,"index":7169},{"krate":0,"index":7167},{"krate":0,"index":7164},{"krate":0,"index":7165},{"krate":0,"index":7161},{"krate":0,"index":7159},{"krate":0,"index":7156},{"krate":0,"index":7157},{"krate":0,"index":7154},{"krate":0,"index":7172},{"krate":0,"index":7194},{"krate":0,"index":7190},{"krate":0,"index":7191},{"krate":0,"index":7187},{"krate":0,"index":7188},{"krate":0,"index":7185},{"krate":0,"index":7179},{"krate":0,"index":7177},{"krate":0,"index":7174},{"krate":0,"index":7195},{"krate":0,"index":7202},{"krate":0,"index":7204},{"krate":0,"index":7206},{"krate":0,"index":7208},{"krate":0,"index":7210},{"krate":0,"index":7219},{"krate":0,"index":7222},{"krate":0,"index":7224},{"krate":0,"index":7227},{"krate":0,"index":7229},{"krate":0,"index":7232},{"krate":0,"index":7234},{"krate":0,"index":7237},{"krate":0,"index":7239},{"krate":0,"index":7242},{"krate":0,"index":7245},{"krate":0,"index":7268},{"krate":0,"index":7290},{"krate":0,"index":7286},{"krate":0,"index":7287},{"krate":0,"index":7283},{"krate":0,"index":7284},{"krate":0,"index":7281},{"krate":0,"index":7275},{"krate":0,"index":7273},{"krate":0,"index":7270},{"krate":0,"index":7291},{"krate":0,"index":7303},{"krate":0,"index":7305},{"krate":0,"index":7307},{"krate":0,"index":7309},{"krate":0,"index":7311},{"krate":0,"index":7325},{"krate":0,"index":7328},{"krate":0,"index":7330},{"krate":0,"index":7333},{"krate":0,"index":7335},{"krate":0,"index":7338},{"krate":0,"index":7340},{"krate":0,"index":7343},{"krate":0,"index":7345},{"krate":0,"index":7348},{"krate":0,"index":7351},{"krate":0,"index":452},{"krate":0,"index":7389},{"krate":0,"index":7416},{"krate":0,"index":7415},{"krate":0,"index":7413},{"krate":0,"index":7410},{"krate":0,"index":7411},{"krate":0,"index":7407},{"krate":0,"index":7405},{"krate":0,"index":7402},{"krate":0,"index":7403},{"krate":0,"index":7400},{"krate":0,"index":7418},{"krate":0,"index":7434},{"krate":0,"index":7433},{"krate":0,"index":7431},{"krate":0,"index":7427},{"krate":0,"index":7428},{"krate":0,"index":7421},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":7436},{"krate":0,"index":7458},{"krate":0,"index":7457},{"krate":0,"index":7455},{"krate":0,"index":7452},{"krate":0,"index":7453},{"krate":0,"index":7449},{"krate":0,"index":7445},{"krate":0,"index":7446},{"krate":0,"index":7439},{"krate":0,"index":461},{"krate":0,"index":466},{"krate":0,"index":7460},{"krate":0,"index":7483},{"krate":0,"index":7481},{"krate":0,"index":7478},{"krate":0,"index":7479},{"krate":0,"index":7475},{"krate":0,"index":7471},{"krate":0,"index":7472},{"krate":0,"index":471},{"krate":0,"index":7485},{"krate":0,"index":7519},{"krate":0,"index":7517},{"krate":0,"index":7515},{"krate":0,"index":7512},{"krate":0,"index":7509},{"krate":0,"index":7510},{"krate":0,"index":7506},{"krate":0,"index":7507},{"krate":0,"index":7520},{"krate":0,"index":7542},{"krate":0,"index":7538},{"krate":0,"index":7539},{"krate":0,"index":7535},{"krate":0,"index":7536},{"krate":0,"index":7533},{"krate":0,"index":7527},{"krate":0,"index":7525},{"krate":0,"index":7522},{"krate":0,"index":7543},{"krate":0,"index":7560},{"krate":0,"index":7562},{"krate":0,"index":7564},{"krate":0,"index":7566},{"krate":0,"index":7568},{"krate":0,"index":7587},{"krate":0,"index":7590},{"krate":0,"index":7592},{"krate":0,"index":7595},{"krate":0,"index":7597},{"krate":0,"index":7600},{"krate":0,"index":7602},{"krate":0,"index":7605},{"krate":0,"index":7607},{"krate":0,"index":7610},{"krate":0,"index":7613},{"krate":0,"index":473},{"krate":0,"index":7666},{"krate":0,"index":7683},{"krate":0,"index":7682},{"krate":0,"index":7680},{"krate":0,"index":7677},{"krate":0,"index":7673},{"krate":0,"index":7674},{"krate":0,"index":7670},{"krate":0,"index":7671},{"krate":0,"index":7685},{"krate":0,"index":7701},{"krate":0,"index":7699},{"krate":0,"index":7696},{"krate":0,"index":7692},{"krate":0,"index":7693},{"krate":0,"index":7689},{"krate":0,"index":7690},{"krate":0,"index":7703},{"krate":0,"index":7719},{"krate":0,"index":7717},{"krate":0,"index":7714},{"krate":0,"index":7710},{"krate":0,"index":7711},{"krate":0,"index":7707},{"krate":0,"index":7708},{"krate":0,"index":7721},{"krate":0,"index":7740},{"krate":0,"index":7739},{"krate":0,"index":7737},{"krate":0,"index":7733},{"krate":0,"index":7734},{"krate":0,"index":7730},{"krate":0,"index":7731},{"krate":0,"index":7727},{"krate":0,"index":7742},{"krate":0,"index":7759},{"krate":0,"index":7757},{"krate":0,"index":7753},{"krate":0,"index":7754},{"krate":0,"index":7750},{"krate":0,"index":7751},{"krate":0,"index":7747}],"decl_id":null,"docs":" Image related structures.","sig":null,"attributes":[{"value":"! Image related structures.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":118884,"byte_end":118913,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":118914,"byte_end":118917,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! An image is a block of GPU memory representing a grid of texels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":118918,"byte_end":118986,"line_start":3,"line_end":3,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":411},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119154,"byte_end":119158,"line_start":14,"line_end":14,"column_start":10,"column_end":14},"name":"Size","qualname":"::image::Size","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Dimension size.\n","sig":null,"attributes":[{"value":"/ Dimension size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119125,"byte_end":119144,"line_start":13,"line_end":13,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119203,"byte_end":119213,"line_start":16,"line_end":16,"column_start":10,"column_end":20},"name":"NumSamples","qualname":"::image::NumSamples","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Number of MSAA samples.\n","sig":null,"attributes":[{"value":"/ Number of MSAA samples.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119166,"byte_end":119193,"line_start":15,"line_end":15,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119246,"byte_end":119251,"line_start":18,"line_end":18,"column_start":10,"column_end":15},"name":"Layer","qualname":"::image::Layer","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" Image layer.\n","sig":null,"attributes":[{"value":"/ Image layer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119220,"byte_end":119236,"line_start":17,"line_end":17,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119292,"byte_end":119297,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Level","qualname":"::image::Level","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Image mipmap level.\n","sig":null,"attributes":[{"value":"/ Image mipmap level.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119259,"byte_end":119282,"line_start":19,"line_end":19,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119363,"byte_end":119372,"line_start":22,"line_end":22,"column_start":11,"column_end":20},"name":"MAX_LEVEL","qualname":"::image::MAX_LEVEL","value":"Level","parent":null,"children":[],"decl_id":null,"docs":" Maximum accessible mipmap level of an image.\n","sig":null,"attributes":[{"value":"/ Maximum accessible mipmap level of an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119304,"byte_end":119352,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":416},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119431,"byte_end":119446,"line_start":24,"line_end":24,"column_start":10,"column_end":25},"name":"TexelCoordinate","qualname":"::image::TexelCoordinate","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" A texel coordinate in an image.\n","sig":null,"attributes":[{"value":"/ A texel coordinate in an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119386,"byte_end":119421,"line_start":23,"line_end":23,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":6882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119663,"byte_end":119669,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Extent","qualname":"::image::Extent","value":"Extent { width, height, depth }","parent":null,"children":[{"krate":0,"index":6883},{"krate":0,"index":6884},{"krate":0,"index":6885}],"decl_id":null,"docs":" Describes the size of an image, which may be up to three dimensional.\n","sig":null,"attributes":[{"value":"/ Describes the size of an image, which may be up to three dimensional.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119455,"byte_end":119528,"line_start":26,"line_end":26,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":6883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119700,"byte_end":119705,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"name":"width","qualname":"::image::Extent::width","value":"u32","parent":{"krate":0,"index":6882},"children":[],"decl_id":null,"docs":" Image width\n","sig":null,"attributes":[{"value":"/ Image width","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119676,"byte_end":119691,"line_start":30,"line_end":30,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":6884},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119742,"byte_end":119748,"line_start":33,"line_end":33,"column_start":9,"column_end":15},"name":"height","qualname":"::image::Extent::height","value":"u32","parent":{"krate":0,"index":6882},"children":[],"decl_id":null,"docs":" Image height\n","sig":null,"attributes":[{"value":"/ Image height","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119717,"byte_end":119733,"line_start":32,"line_end":32,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":6885},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119785,"byte_end":119790,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"depth","qualname":"::image::Extent::depth","value":"u32","parent":{"krate":0,"index":6882},"children":[],"decl_id":null,"docs":" Image depth.\n","sig":null,"attributes":[{"value":"/ Image depth.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119760,"byte_end":119776,"line_start":34,"line_end":34,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119880,"byte_end":119888,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Extent>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if one of the dimensions is zero.\n","sig":null,"attributes":[{"value":"/ Return true if one of the dimensions is zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119819,"byte_end":119868,"line_start":39,"line_end":39,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120039,"byte_end":120047,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"at_level","qualname":"<Extent>::at_level","value":"fn (&self, level: Level) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the extent at a particular mipmap level.\n","sig":null,"attributes":[{"value":"/ Get the extent at a particular mipmap level.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119979,"byte_end":120027,"line_start":43,"line_end":43,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120319,"byte_end":120323,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"rect","qualname":"<Extent>::rect","value":"fn (&self) -> Rect","parent":null,"children":[],"decl_id":null,"docs":" Get a rectangle for the full area of extent.\n","sig":null,"attributes":[{"value":"/ Get a rectangle for the full area of extent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120259,"byte_end":120307,"line_start":51,"line_end":51,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6903},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120899,"byte_end":120905,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"Offset","qualname":"::image::Offset","value":"Offset { x, y, z }","parent":null,"children":[{"krate":0,"index":6904},{"krate":0,"index":6905},{"krate":0,"index":6906}],"decl_id":null,"docs":" An offset into an `Image` used for image-to-image\n copy operations.  All offsets are in texels, and\n specifying offsets other than 0 for dimensions\n that do not exist is undefined behavior -- for\n example, specifying a `z` offset of `1` in a\n two-dimensional image.\n","sig":null,"attributes":[{"value":"/ An offset into an `Image` used for image-to-image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120480,"byte_end":120533,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/ copy operations.  All offsets are in texels, and","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120534,"byte_end":120586,"line_start":63,"line_end":63,"column_start":1,"column_end":53}},{"value":"/ specifying offsets other than 0 for dimensions","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120587,"byte_end":120637,"line_start":64,"line_end":64,"column_start":1,"column_end":51}},{"value":"/ that do not exist is undefined behavior -- for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120638,"byte_end":120688,"line_start":65,"line_end":65,"column_start":1,"column_end":51}},{"value":"/ example, specifying a `z` offset of `1` in a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120689,"byte_end":120737,"line_start":66,"line_end":66,"column_start":1,"column_end":49}},{"value":"/ two-dimensional image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120738,"byte_end":120764,"line_start":67,"line_end":67,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":6904},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120934,"byte_end":120935,"line_start":72,"line_end":72,"column_start":9,"column_end":10},"name":"x","qualname":"::image::Offset::x","value":"i32","parent":{"krate":0,"index":6903},"children":[],"decl_id":null,"docs":" X offset.\n","sig":null,"attributes":[{"value":"/ X offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120912,"byte_end":120925,"line_start":71,"line_end":71,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":6905},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120980,"byte_end":120981,"line_start":74,"line_end":74,"column_start":9,"column_end":10},"name":"y","qualname":"::image::Offset::y","value":"i32","parent":{"krate":0,"index":6903},"children":[],"decl_id":null,"docs":" Y offset.\n","sig":null,"attributes":[{"value":"/ Y offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":120958,"byte_end":120971,"line_start":73,"line_end":73,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":6906},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121026,"byte_end":121027,"line_start":76,"line_end":76,"column_start":9,"column_end":10},"name":"z","qualname":"::image::Offset::z","value":"i32","parent":{"krate":0,"index":6903},"children":[],"decl_id":null,"docs":" Z offset.\n","sig":null,"attributes":[{"value":"/ Z offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121004,"byte_end":121017,"line_start":75,"line_end":75,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121107,"byte_end":121111,"line_start":81,"line_end":81,"column_start":15,"column_end":19},"name":"ZERO","qualname":"::image::Offset::ZERO","value":"Self","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Zero offset shortcut.\n","sig":null,"attributes":[{"value":"/ Zero offset shortcut.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121067,"byte_end":121092,"line_start":80,"line_end":80,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121226,"byte_end":121237,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"into_bounds","qualname":"<Offset>::into_bounds","value":"fn (self, extent: &Extent) -> Range<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Convert the offset into 2-sided bounds given the extent.\n","sig":null,"attributes":[{"value":"/ Convert the offset into 2-sided bounds given the extent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121154,"byte_end":121214,"line_start":83,"line_end":83,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6925},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121745,"byte_end":121752,"line_start":100,"line_end":100,"column_start":5,"column_end":12},"name":"Optimal","qualname":"::image::Tiling::Optimal","value":"Tiling::Optimal","parent":{"krate":0,"index":6924},"children":[],"decl_id":null,"docs":" Optimal tiling for GPU memory access. Implementation-dependent.\n","sig":null,"attributes":[{"value":"/ Optimal tiling for GPU memory access. Implementation-dependent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121673,"byte_end":121740,"line_start":99,"line_end":99,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6928},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121886,"byte_end":121892,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"Linear","qualname":"::image::Tiling::Linear","value":"Tiling::Linear","parent":{"krate":0,"index":6924},"children":[],"decl_id":null,"docs":" Optimal for CPU read/write. Texels are laid out in row-major order,\n possibly with some padding on each row.\n","sig":null,"attributes":[{"value":"/ Optimal for CPU read/write. Texels are laid out in row-major order,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121762,"byte_end":121833,"line_start":101,"line_end":101,"column_start":5,"column_end":76}},{"value":"/ possibly with some padding on each row.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121838,"byte_end":121881,"line_start":102,"line_end":102,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":6924},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121660,"byte_end":121666,"line_start":98,"line_end":98,"column_start":10,"column_end":16},"name":"Tiling","qualname":"::image::Tiling","value":"Tiling::{Optimal, Linear}","parent":null,"children":[{"krate":0,"index":6925},{"krate":0,"index":6928}],"decl_id":null,"docs":" Image tiling modes.\n","sig":null,"attributes":[{"value":"/ Image tiling modes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121483,"byte_end":121506,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"repr(u32)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121507,"byte_end":121519,"line_start":95,"line_end":95,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6950},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122048,"byte_end":122059,"line_start":110,"line_end":110,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::image::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":6949},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122003,"byte_end":122043,"line_start":109,"line_end":109,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6953},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122137,"byte_end":122143,"line_start":112,"line_end":112,"column_start":5,"column_end":11},"name":"Format","qualname":"::image::CreationError::Format","value":"CreationError::Format(format::Format)","parent":{"krate":0,"index":6949},"children":[],"decl_id":null,"docs":" The format is not supported by the device.\n","sig":null,"attributes":[{"value":"/ The format is not supported by the device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122086,"byte_end":122132,"line_start":111,"line_end":111,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6956},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122222,"byte_end":122226,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Kind","qualname":"::image::CreationError::Kind","value":"CreationError::Kind","parent":{"krate":0,"index":6949},"children":[],"decl_id":null,"docs":" The kind doesn't support a particular operation.\n","sig":null,"attributes":[{"value":"/ The kind doesn't support a particular operation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122165,"byte_end":122217,"line_start":113,"line_end":113,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6958},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122295,"byte_end":122302,"line_start":116,"line_end":116,"column_start":5,"column_end":12},"name":"Samples","qualname":"::image::CreationError::Samples","value":"CreationError::Samples(NumSamples)","parent":{"krate":0,"index":6949},"children":[],"decl_id":null,"docs":" Failed to map a given multisampled kind to the device.\n","sig":null,"attributes":[{"value":"/ Failed to map a given multisampled kind to the device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122232,"byte_end":122290,"line_start":115,"line_end":115,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6961},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122371,"byte_end":122375,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"Size","qualname":"::image::CreationError::Size","value":"CreationError::Size(Size)","parent":{"krate":0,"index":6949},"children":[],"decl_id":null,"docs":" Unsupported size in one of the dimensions.\n","sig":null,"attributes":[{"value":"/ Unsupported size in one of the dimensions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122320,"byte_end":122366,"line_start":117,"line_end":117,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6964},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122460,"byte_end":122464,"line_start":120,"line_end":120,"column_start":5,"column_end":9},"name":"Data","qualname":"::image::CreationError::Data","value":"CreationError::Data(usize)","parent":{"krate":0,"index":6949},"children":[],"decl_id":null,"docs":" The given data has a different size than the target image slice.\n","sig":null,"attributes":[{"value":"/ The given data has a different size than the target image slice.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122387,"byte_end":122455,"line_start":119,"line_end":119,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6967},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122527,"byte_end":122532,"line_start":122,"line_end":122,"column_start":5,"column_end":10},"name":"Usage","qualname":"::image::CreationError::Usage","value":"CreationError::Usage(Usage)","parent":{"krate":0,"index":6949},"children":[],"decl_id":null,"docs":" The mentioned usage mode is not supported\n","sig":null,"attributes":[{"value":"/ The mentioned usage mode is not supported","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122477,"byte_end":122522,"line_start":121,"line_end":121,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":6949},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121983,"byte_end":121996,"line_start":108,"line_end":108,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::image::CreationError","value":"CreationError::{OutOfMemory, Format, Kind, Samples, Size, Data, Usage}","parent":null,"children":[{"krate":0,"index":6950},{"krate":0,"index":6953},{"krate":0,"index":6956},{"krate":0,"index":6958},{"krate":0,"index":6961},{"krate":0,"index":6964},{"krate":0,"index":6967}],"decl_id":null,"docs":" Pure image object creation error.\n","sig":null,"attributes":[{"value":"/ Pure image object creation error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121901,"byte_end":121938,"line_start":106,"line_end":106,"column_start":1,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6979},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124203,"byte_end":124208,"line_start":158,"line_end":158,"column_start":5,"column_end":10},"name":"Usage","qualname":"::image::ViewCreationError::Usage","value":"ViewCreationError::Usage(Usage)","parent":{"krate":0,"index":6978},"children":[],"decl_id":null,"docs":" The required usage flag is not present in the image.\n","sig":null,"attributes":[{"value":"/ The required usage flag is not present in the image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124142,"byte_end":124198,"line_start":157,"line_end":157,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124263,"byte_end":124268,"line_start":160,"line_end":160,"column_start":5,"column_end":10},"name":"Level","qualname":"::image::ViewCreationError::Level","value":"ViewCreationError::Level(Level)","parent":{"krate":0,"index":6978},"children":[],"decl_id":null,"docs":" Selected mip level doesn't exist.\n","sig":null,"attributes":[{"value":"/ Selected mip level doesn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124221,"byte_end":124258,"line_start":159,"line_end":159,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124325,"byte_end":124330,"line_start":162,"line_end":162,"column_start":5,"column_end":10},"name":"Layer","qualname":"::image::ViewCreationError::Layer","value":"ViewCreationError::Layer(LayerError)","parent":{"krate":0,"index":6978},"children":[],"decl_id":null,"docs":" Selected array layer doesn't exist.\n","sig":null,"attributes":[{"value":"/ Selected array layer doesn't exist.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124281,"byte_end":124320,"line_start":161,"line_end":161,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6988},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124407,"byte_end":124416,"line_start":164,"line_end":164,"column_start":5,"column_end":14},"name":"BadFormat","qualname":"::image::ViewCreationError::BadFormat","value":"ViewCreationError::BadFormat(format::Format)","parent":{"krate":0,"index":6978},"children":[],"decl_id":null,"docs":" An incompatible format was requested for the view.\n","sig":null,"attributes":[{"value":"/ An incompatible format was requested for the view.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124348,"byte_end":124402,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124500,"byte_end":124507,"line_start":166,"line_end":166,"column_start":5,"column_end":12},"name":"BadKind","qualname":"::image::ViewCreationError::BadKind","value":"ViewCreationError::BadKind(ViewKind)","parent":{"krate":0,"index":6978},"children":[],"decl_id":null,"docs":" An incompatible view kind was requested for the view.\n","sig":null,"attributes":[{"value":"/ An incompatible view kind was requested for the view.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124438,"byte_end":124495,"line_start":165,"line_end":165,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6994},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124567,"byte_end":124578,"line_start":168,"line_end":168,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::image::ViewCreationError::OutOfMemory","value":"ViewCreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":6978},"children":[],"decl_id":null,"docs":" Out of either Host or Device memory\n","sig":null,"attributes":[{"value":"/ Out of either Host or Device memory","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124523,"byte_end":124562,"line_start":167,"line_end":167,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6997},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124650,"byte_end":124661,"line_start":170,"line_end":170,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ViewCreationError::Unsupported","value":"ViewCreationError::Unsupported","parent":{"krate":0,"index":6978},"children":[],"decl_id":null,"docs":" The backend refused for some reason.\n","sig":null,"attributes":[{"value":"/ The backend refused for some reason.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124605,"byte_end":124645,"line_start":169,"line_end":169,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":6978},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124118,"byte_end":124135,"line_start":156,"line_end":156,"column_start":10,"column_end":27},"name":"ViewCreationError","qualname":"::image::ViewCreationError","value":"ViewCreationError::{Usage, Level, Layer, BadFormat, BadKind, OutOfMemory, Unsupported}","parent":null,"children":[{"krate":0,"index":6979},{"krate":0,"index":6982},{"krate":0,"index":6985},{"krate":0,"index":6988},{"krate":0,"index":6991},{"krate":0,"index":6994},{"krate":0,"index":6997}],"decl_id":null,"docs":" Error creating an `ImageView`.\n","sig":null,"attributes":[{"value":"/ Error creating an `ImageView`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124039,"byte_end":124073,"line_start":154,"line_end":154,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7008},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126284,"byte_end":126295,"line_start":206,"line_end":206,"column_start":5,"column_end":16},"name":"NotExpected","qualname":"::image::LayerError::NotExpected","value":"LayerError::NotExpected(Kind)","parent":{"krate":0,"index":7007},"children":[],"decl_id":null,"docs":" The source image kind doesn't support array slices.\n","sig":null,"attributes":[{"value":"/ The source image kind doesn't support array slices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126224,"byte_end":126279,"line_start":205,"line_end":205,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7011},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126366,"byte_end":126377,"line_start":208,"line_end":208,"column_start":5,"column_end":16},"name":"OutOfBounds","qualname":"::image::LayerError::OutOfBounds","value":"LayerError::OutOfBounds(Range<Layer>)","parent":{"krate":0,"index":7007},"children":[],"decl_id":null,"docs":" Selected layers are outside of the provided range.\n","sig":null,"attributes":[{"value":"/ Selected layers are outside of the provided range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126307,"byte_end":126361,"line_start":207,"line_end":207,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":7007},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126207,"byte_end":126217,"line_start":204,"line_end":204,"column_start":10,"column_end":20},"name":"LayerError","qualname":"::image::LayerError","value":"LayerError::{NotExpected, OutOfBounds}","parent":null,"children":[{"krate":0,"index":7008},{"krate":0,"index":7011}],"decl_id":null,"docs":" An error associated with selected image layer.\n","sig":null,"attributes":[{"value":"/ An error associated with selected image layer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126112,"byte_end":126162,"line_start":202,"line_end":202,"column_start":1,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127338,"byte_end":127345,"line_start":235,"line_end":235,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::image::Filter::Nearest","value":"Filter::Nearest","parent":{"krate":0,"index":7022},"children":[],"decl_id":null,"docs":" Selects a single texel from the current mip level and uses its value.","sig":null,"attributes":[{"value":"/ Selects a single texel from the current mip level and uses its value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127187,"byte_end":127260,"line_start":232,"line_end":232,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127265,"byte_end":127268,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Mip filtering selects the filtered value from one level.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127273,"byte_end":127333,"line_start":234,"line_end":234,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7025},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127567,"byte_end":127573,"line_start":240,"line_end":240,"column_start":5,"column_end":11},"name":"Linear","qualname":"::image::Filter::Linear","value":"Filter::Linear","parent":{"krate":0,"index":7022},"children":[],"decl_id":null,"docs":" Selects multiple texels and calculates the value via multivariate interpolation.\n     * 1D: Linear interpolation\n     * 2D/Cube: Bilinear interpolation\n     * 3D: Trilinear interpolation\n","sig":null,"attributes":[{"value":"/ Selects multiple texels and calculates the value via multivariate interpolation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127351,"byte_end":127435,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/     * 1D: Linear interpolation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127440,"byte_end":127474,"line_start":237,"line_end":237,"column_start":5,"column_end":39}},{"value":"/     * 2D/Cube: Bilinear interpolation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127479,"byte_end":127520,"line_start":238,"line_end":238,"column_start":5,"column_end":46}},{"value":"/     * 3D: Trilinear interpolation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127525,"byte_end":127562,"line_start":239,"line_end":239,"column_start":5,"column_end":42}}]},{"kind":"Enum","id":{"krate":0,"index":7022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127174,"byte_end":127180,"line_start":231,"line_end":231,"column_start":10,"column_end":16},"name":"Filter","qualname":"::image::Filter","value":"Filter::{Nearest, Linear}","parent":null,"children":[{"krate":0,"index":7023},{"krate":0,"index":7025}],"decl_id":null,"docs":" How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the\n image when sampling. They correspond to increasing levels of quality,\n but also cost.\n","sig":null,"attributes":[{"value":"/ How to [filter](https://en.wikipedia.org/wiki/Texture_filtering) the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126868,"byte_end":126940,"line_start":226,"line_end":226,"column_start":1,"column_end":73}},{"value":"/ image when sampling. They correspond to increasing levels of quality,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126941,"byte_end":127014,"line_start":227,"line_end":227,"column_start":1,"column_end":74}},{"value":"/ but also cost.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127015,"byte_end":127033,"line_start":228,"line_end":228,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7046},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127820,"byte_end":127824,"line_start":249,"line_end":249,"column_start":5,"column_end":9},"name":"PosX","qualname":"::image::CubeFace::PosX","value":"CubeFace::PosX","parent":{"krate":0,"index":7045},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7048},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127830,"byte_end":127834,"line_start":250,"line_end":250,"column_start":5,"column_end":9},"name":"NegX","qualname":"::image::CubeFace::NegX","value":"CubeFace::NegX","parent":{"krate":0,"index":7045},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7050},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127840,"byte_end":127844,"line_start":251,"line_end":251,"column_start":5,"column_end":9},"name":"PosY","qualname":"::image::CubeFace::PosY","value":"CubeFace::PosY","parent":{"krate":0,"index":7045},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127850,"byte_end":127854,"line_start":252,"line_end":252,"column_start":5,"column_end":9},"name":"NegY","qualname":"::image::CubeFace::NegY","value":"CubeFace::NegY","parent":{"krate":0,"index":7045},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127860,"byte_end":127864,"line_start":253,"line_end":253,"column_start":5,"column_end":9},"name":"PosZ","qualname":"::image::CubeFace::PosZ","value":"CubeFace::PosZ","parent":{"krate":0,"index":7045},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127870,"byte_end":127874,"line_start":254,"line_end":254,"column_start":5,"column_end":9},"name":"NegZ","qualname":"::image::CubeFace::NegZ","value":"CubeFace::NegZ","parent":{"krate":0,"index":7045},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7045},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127805,"byte_end":127813,"line_start":248,"line_end":248,"column_start":10,"column_end":18},"name":"CubeFace","qualname":"::image::CubeFace","value":"CubeFace::{PosX, NegX, PosY, NegY, PosZ, NegZ}","parent":null,"children":[{"krate":0,"index":7046},{"krate":0,"index":7048},{"krate":0,"index":7050},{"krate":0,"index":7052},{"krate":0,"index":7054},{"krate":0,"index":7056}],"decl_id":null,"docs":" The face of a cube image to do an operation on.\n","sig":null,"attributes":[{"value":"/ The face of a cube image to do an operation on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127578,"byte_end":127629,"line_start":243,"line_end":243,"column_start":1,"column_end":52}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127630,"byte_end":127652,"line_start":244,"line_end":244,"column_start":1,"column_end":23}},{"value":"repr(u8)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127784,"byte_end":127795,"line_start":247,"line_end":247,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":438},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127963,"byte_end":127973,"line_start":258,"line_end":258,"column_start":11,"column_end":21},"name":"CUBE_FACES","qualname":"::image::CUBE_FACES","value":"[CubeFace; 6]","parent":null,"children":[],"decl_id":null,"docs":" A constant array of cube faces in the order they map to the hardware.\n","sig":null,"attributes":[{"value":"/ A constant array of cube faces in the order they map to the hardware.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":127879,"byte_end":127952,"line_start":257,"line_end":257,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7077},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128457,"byte_end":128459,"line_start":274,"line_end":274,"column_start":5,"column_end":7},"name":"D1","qualname":"::image::Kind::D1","value":"Kind::D1(Size, Layer)","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" A single one-dimensional row of texels.\n","sig":null,"attributes":[{"value":"/ A single one-dimensional row of texels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128409,"byte_end":128452,"line_start":273,"line_end":273,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128509,"byte_end":128511,"line_start":276,"line_end":276,"column_start":5,"column_end":7},"name":"D2","qualname":"::image::Kind::D2","value":"Kind::D2(Size, Size, Layer, NumSamples)","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" Two-dimensional image.\n","sig":null,"attributes":[{"value":"/ Two-dimensional image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128478,"byte_end":128504,"line_start":275,"line_end":275,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7087},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128574,"byte_end":128576,"line_start":278,"line_end":278,"column_start":5,"column_end":7},"name":"D3","qualname":"::image::Kind::D3","value":"Kind::D3(Size, Size, Size)","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" Volumetric image.\n","sig":null,"attributes":[{"value":"/ Volumetric image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128548,"byte_end":128569,"line_start":277,"line_end":277,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":7076},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128398,"byte_end":128402,"line_start":272,"line_end":272,"column_start":10,"column_end":14},"name":"Kind","qualname":"::image::Kind","value":"Kind::{D1, D2, D3}","parent":null,"children":[{"krate":0,"index":7077},{"krate":0,"index":7081},{"krate":0,"index":7087}],"decl_id":null,"docs":" Specifies the dimensionality of an image to be allocated,\n along with the number of mipmap layers and MSAA samples\n if applicable.\n","sig":null,"attributes":[{"value":"/ Specifies the dimensionality of an image to be allocated,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128117,"byte_end":128178,"line_start":267,"line_end":267,"column_start":1,"column_end":62}},{"value":"/ along with the number of mipmap layers and MSAA samples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128179,"byte_end":128238,"line_start":268,"line_end":268,"column_start":1,"column_end":60}},{"value":"/ if applicable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128239,"byte_end":128257,"line_start":269,"line_end":269,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128652,"byte_end":128658,"line_start":283,"line_end":283,"column_start":12,"column_end":18},"name":"extent","qualname":"<Kind>::extent","value":"fn (&self) -> Extent","parent":null,"children":[],"decl_id":null,"docs":" Get the image extent.\n","sig":null,"attributes":[{"value":"/ Get the image extent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128615,"byte_end":128640,"line_start":282,"line_end":282,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":129197,"byte_end":129209,"line_start":304,"line_end":304,"column_start":12,"column_end":24},"name":"level_extent","qualname":"<Kind>::level_extent","value":"fn (&self, level: Level) -> Extent","parent":null,"children":[],"decl_id":null,"docs":" Get the extent of a particular mipmap level.\n","sig":null,"attributes":[{"value":"/ Get the extent of a particular mipmap level.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":129137,"byte_end":129185,"line_start":303,"line_end":303,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":129910,"byte_end":129920,"line_start":328,"line_end":328,"column_start":12,"column_end":22},"name":"num_levels","qualname":"<Kind>::num_levels","value":"fn (&self) -> Level","parent":null,"children":[],"decl_id":null,"docs":" Count the number of mipmap levels.\n","sig":null,"attributes":[{"value":"/ Count the number of mipmap levels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":129860,"byte_end":129898,"line_start":327,"line_end":327,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":130494,"byte_end":130504,"line_start":346,"line_end":346,"column_start":12,"column_end":22},"name":"num_layers","qualname":"<Kind>::num_layers","value":"fn (&self) -> Layer","parent":null,"children":[],"decl_id":null,"docs":" Return the number of layers in an array type.","sig":null,"attributes":[{"value":"/ Return the number of layers in an array type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":130376,"byte_end":130425,"line_start":343,"line_end":343,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":130430,"byte_end":130433,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Each cube face counts as separate layer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":130438,"byte_end":130482,"line_start":345,"line_end":345,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":130716,"byte_end":130727,"line_start":354,"line_end":354,"column_start":12,"column_end":23},"name":"num_samples","qualname":"<Kind>::num_samples","value":"fn (&self) -> NumSamples","parent":null,"children":[],"decl_id":null,"docs":" Return the number of MSAA samples for the kind.\n","sig":null,"attributes":[{"value":"/ Return the number of MSAA samples for the kind.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":130653,"byte_end":130704,"line_start":353,"line_end":353,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131152,"byte_end":131154,"line_start":368,"line_end":368,"column_start":5,"column_end":7},"name":"D1","qualname":"::image::ViewKind::D1","value":"ViewKind::D1","parent":{"krate":0,"index":7139},"children":[],"decl_id":null,"docs":" A single one-dimensional row of texels.\n","sig":null,"attributes":[{"value":"/ A single one-dimensional row of texels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131104,"byte_end":131147,"line_start":367,"line_end":367,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7142},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131355,"byte_end":131362,"line_start":372,"line_end":372,"column_start":5,"column_end":12},"name":"D1Array","qualname":"::image::ViewKind::D1Array","value":"ViewKind::D1Array","parent":{"krate":0,"index":7139},"children":[],"decl_id":null,"docs":" An array of rows of texels. Equivalent to `D2` except that texels\n in different rows are not sampled, so filtering will be constrained\n to a single row of texels at a time.\n","sig":null,"attributes":[{"value":"/ An array of rows of texels. Equivalent to `D2` except that texels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131160,"byte_end":131229,"line_start":369,"line_end":369,"column_start":5,"column_end":74}},{"value":"/ in different rows are not sampled, so filtering will be constrained","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131234,"byte_end":131305,"line_start":370,"line_end":370,"column_start":5,"column_end":76}},{"value":"/ to a single row of texels at a time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131310,"byte_end":131350,"line_start":371,"line_end":371,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7144},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131433,"byte_end":131435,"line_start":374,"line_end":374,"column_start":5,"column_end":7},"name":"D2","qualname":"::image::ViewKind::D2","value":"ViewKind::D2","parent":{"krate":0,"index":7139},"children":[],"decl_id":null,"docs":" A traditional 2D image, with rows arranged contiguously.\n","sig":null,"attributes":[{"value":"/ A traditional 2D image, with rows arranged contiguously.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131368,"byte_end":131428,"line_start":373,"line_end":373,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7146},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131562,"byte_end":131569,"line_start":377,"line_end":377,"column_start":5,"column_end":12},"name":"D2Array","qualname":"::image::ViewKind::D2Array","value":"ViewKind::D2Array","parent":{"krate":0,"index":7139},"children":[],"decl_id":null,"docs":" An array of 2D images. Equivalent to `D3` except that texels in\n a different depth level are not sampled.\n","sig":null,"attributes":[{"value":"/ An array of 2D images. Equivalent to `D3` except that texels in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131441,"byte_end":131508,"line_start":375,"line_end":375,"column_start":5,"column_end":72}},{"value":"/ a different depth level are not sampled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131513,"byte_end":131557,"line_start":376,"line_end":376,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7148},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131641,"byte_end":131643,"line_start":379,"line_end":379,"column_start":5,"column_end":7},"name":"D3","qualname":"::image::ViewKind::D3","value":"ViewKind::D3","parent":{"krate":0,"index":7139},"children":[],"decl_id":null,"docs":" A volume image, with each 2D layer arranged contiguously.\n","sig":null,"attributes":[{"value":"/ A volume image, with each 2D layer arranged contiguously.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131575,"byte_end":131636,"line_start":378,"line_end":378,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7150},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131708,"byte_end":131712,"line_start":381,"line_end":381,"column_start":5,"column_end":9},"name":"Cube","qualname":"::image::ViewKind::Cube","value":"ViewKind::Cube","parent":{"krate":0,"index":7139},"children":[],"decl_id":null,"docs":" A set of 6 2D images, one for each face of a cube.\n","sig":null,"attributes":[{"value":"/ A set of 6 2D images, one for each face of a cube.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131649,"byte_end":131703,"line_start":380,"line_end":380,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7152},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131751,"byte_end":131760,"line_start":383,"line_end":383,"column_start":5,"column_end":14},"name":"CubeArray","qualname":"::image::ViewKind::CubeArray","value":"ViewKind::CubeArray","parent":{"krate":0,"index":7139},"children":[],"decl_id":null,"docs":" An array of Cube images.\n","sig":null,"attributes":[{"value":"/ An array of Cube images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131718,"byte_end":131746,"line_start":382,"line_end":382,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":7139},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131089,"byte_end":131097,"line_start":366,"line_end":366,"column_start":10,"column_end":18},"name":"ViewKind","qualname":"::image::ViewKind","value":"ViewKind::{D1, D1Array, D2, D2Array, D3, Cube, CubeArray}","parent":null,"children":[{"krate":0,"index":7140},{"krate":0,"index":7142},{"krate":0,"index":7144},{"krate":0,"index":7146},{"krate":0,"index":7148},{"krate":0,"index":7150},{"krate":0,"index":7152}],"decl_id":null,"docs":" Specifies the kind/dimensionality of an image view.\n","sig":null,"attributes":[{"value":"/ Specifies the kind/dimensionality of an image view.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":130893,"byte_end":130948,"line_start":363,"line_end":363,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":7172},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":131910,"byte_end":131926,"line_start":389,"line_end":389,"column_start":16,"column_end":32},"name":"ViewCapabilities","qualname":"::image::ViewCapabilities","value":"ViewCapabilities {  }","parent":null,"children":[{"krate":0,"index":7173}],"decl_id":null,"docs":" Capabilities to create views into an image.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7211},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":132010,"byte_end":132024,"line_start":391,"line_end":391,"column_start":15,"column_end":29},"name":"MUTABLE_FORMAT","qualname":"::image::ViewCapabilities::MUTABLE_FORMAT","value":"ViewCapabilities","parent":{"krate":0,"index":7210},"children":[],"decl_id":null,"docs":" Support creation of views with different formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7212},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":132125,"byte_end":132134,"line_start":393,"line_end":393,"column_start":15,"column_end":24},"name":"KIND_CUBE","qualname":"::image::ViewCapabilities::KIND_CUBE","value":"ViewCapabilities","parent":{"krate":0,"index":7210},"children":[],"decl_id":null,"docs":" Support creation of `Cube` and `CubeArray` kinds of views.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7213},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":132225,"byte_end":132238,"line_start":395,"line_end":395,"column_start":15,"column_end":28},"name":"KIND_2D_ARRAY","qualname":"::image::ViewCapabilities::KIND_2D_ARRAY","value":"ViewCapabilities","parent":{"krate":0,"index":7210},"children":[],"decl_id":null,"docs":" Support creation of `D2Array` kind of view.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7268},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":132509,"byte_end":132514,"line_start":404,"line_end":404,"column_start":16,"column_end":21},"name":"Usage","qualname":"::image::Usage","value":"Usage {  }","parent":null,"children":[{"krate":0,"index":7269}],"decl_id":null,"docs":" TODO: Find out if TRANSIENT_ATTACHMENT + INPUT_ATTACHMENT\n are applicable on backends other than Vulkan. --AP\n Image usage flags\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7312},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":132588,"byte_end":132600,"line_start":406,"line_end":406,"column_start":15,"column_end":27},"name":"TRANSFER_SRC","qualname":"::image::Usage::TRANSFER_SRC","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":" The image is used as a transfer source.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":132679,"byte_end":132691,"line_start":408,"line_end":408,"column_start":15,"column_end":27},"name":"TRANSFER_DST","qualname":"::image::Usage::TRANSFER_DST","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":" The image is used as a transfer destination.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7314},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":132852,"byte_end":132859,"line_start":410,"line_end":410,"column_start":15,"column_end":22},"name":"SAMPLED","qualname":"::image::Usage::SAMPLED","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":" The image is a [sampled image](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-sampledimage)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7315},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133020,"byte_end":133027,"line_start":412,"line_end":412,"column_start":15,"column_end":22},"name":"STORAGE","qualname":"::image::Usage::STORAGE","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":" The image is a [storage image](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#descriptorsets-storageimage)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133146,"byte_end":133162,"line_start":414,"line_end":414,"column_start":15,"column_end":31},"name":"COLOR_ATTACHMENT","qualname":"::image::Usage::COLOR_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":" The image is used as a color attachment -- that is, color input to a rendering pass.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7317},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133238,"byte_end":133262,"line_start":416,"line_end":416,"column_start":15,"column_end":39},"name":"DEPTH_STENCIL_ATTACHMENT","qualname":"::image::Usage::DEPTH_STENCIL_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":" The image is used as a depth attachment.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133297,"byte_end":133317,"line_start":418,"line_end":418,"column_start":15,"column_end":35},"name":"TRANSIENT_ATTACHMENT","qualname":"::image::Usage::TRANSIENT_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133352,"byte_end":133368,"line_start":420,"line_end":420,"column_start":15,"column_end":31},"name":"INPUT_ATTACHMENT","qualname":"::image::Usage::INPUT_ATTACHMENT","value":"Usage","parent":{"krate":0,"index":7311},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133483,"byte_end":133495,"line_start":427,"line_end":427,"column_start":12,"column_end":24},"name":"can_transfer","qualname":"<Usage>::can_transfer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this image can be used in transfer operations.\n","sig":null,"attributes":[{"value":"/ Returns true if this image can be used in transfer operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133405,"byte_end":133471,"line_start":426,"line_end":426,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133658,"byte_end":133668,"line_start":432,"line_end":432,"column_start":12,"column_end":22},"name":"can_target","qualname":"<Usage>::can_target","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this image can be used as a target.\n","sig":null,"attributes":[{"value":"/ Returns true if this image can be used as a target.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133591,"byte_end":133646,"line_start":431,"line_end":431,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7390},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134171,"byte_end":134175,"line_start":444,"line_end":444,"column_start":5,"column_end":9},"name":"Tile","qualname":"::image::WrapMode::Tile","value":"WrapMode::Tile","parent":{"krate":0,"index":7389},"children":[],"decl_id":null,"docs":" Tile the image, that is, sample the coordinate modulo `1.0`, so\n addressing the image beyond an edge will \"wrap\" back from the\n other edge.\n","sig":null,"attributes":[{"value":"/ Tile the image, that is, sample the coordinate modulo `1.0`, so","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134009,"byte_end":134076,"line_start":441,"line_end":441,"column_start":5,"column_end":72}},{"value":"/ addressing the image beyond an edge will \"wrap\" back from the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134081,"byte_end":134146,"line_start":442,"line_end":442,"column_start":5,"column_end":70}},{"value":"/ other edge.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134151,"byte_end":134166,"line_start":443,"line_end":443,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7392},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134257,"byte_end":134263,"line_start":446,"line_end":446,"column_start":5,"column_end":11},"name":"Mirror","qualname":"::image::WrapMode::Mirror","value":"WrapMode::Mirror","parent":{"krate":0,"index":7389},"children":[],"decl_id":null,"docs":" Mirror the image. Like tile, but uses abs(coord) before the modulo.\n","sig":null,"attributes":[{"value":"/ Mirror the image. Like tile, but uses abs(coord) before the modulo.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134181,"byte_end":134252,"line_start":445,"line_end":445,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7394},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134338,"byte_end":134343,"line_start":448,"line_end":448,"column_start":5,"column_end":10},"name":"Clamp","qualname":"::image::WrapMode::Clamp","value":"WrapMode::Clamp","parent":{"krate":0,"index":7389},"children":[],"decl_id":null,"docs":" Clamp the image to the value at `0.0` or `1.0` respectively.\n","sig":null,"attributes":[{"value":"/ Clamp the image to the value at `0.0` or `1.0` respectively.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134269,"byte_end":134333,"line_start":447,"line_end":447,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7396},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134375,"byte_end":134381,"line_start":450,"line_end":450,"column_start":5,"column_end":11},"name":"Border","qualname":"::image::WrapMode::Border","value":"WrapMode::Border","parent":{"krate":0,"index":7389},"children":[],"decl_id":null,"docs":" Use border color.\n","sig":null,"attributes":[{"value":"/ Use border color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134349,"byte_end":134370,"line_start":449,"line_end":449,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7398},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134516,"byte_end":134527,"line_start":454,"line_end":454,"column_start":5,"column_end":16},"name":"MirrorClamp","qualname":"::image::WrapMode::MirrorClamp","value":"WrapMode::MirrorClamp","parent":{"krate":0,"index":7389},"children":[],"decl_id":null,"docs":" Mirror once and clamp to edge otherwise.","sig":null,"attributes":[{"value":"/ Mirror once and clamp to edge otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134387,"byte_end":134431,"line_start":451,"line_end":451,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134436,"byte_end":134439,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Only valid if `Features::SAMPLER_MIRROR_CLAMP_EDGE` is enabled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134444,"byte_end":134511,"line_start":453,"line_end":453,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":7389},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133994,"byte_end":134002,"line_start":440,"line_end":440,"column_start":10,"column_end":18},"name":"WrapMode","qualname":"::image::WrapMode","value":"WrapMode::{Tile, Mirror, Clamp, Border, MirrorClamp}","parent":null,"children":[{"krate":0,"index":7390},{"krate":0,"index":7392},{"krate":0,"index":7394},{"krate":0,"index":7396},{"krate":0,"index":7398}],"decl_id":null,"docs":" Specifies how image coordinates outside the range `[0, 1]` are handled.\n","sig":null,"attributes":[{"value":"/ Specifies how image coordinates outside the range `[0, 1]` are handled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133778,"byte_end":133853,"line_start":437,"line_end":437,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":7418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134760,"byte_end":134763,"line_start":461,"line_end":461,"column_start":12,"column_end":15},"name":"Lod","qualname":"::image::Lod","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for the LOD level of an image. Needed so that we can\n implement Eq and Hash for it.\n","sig":null,"attributes":[{"value":"/ A wrapper for the LOD level of an image. Needed so that we can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134532,"byte_end":134598,"line_start":457,"line_end":457,"column_start":1,"column_end":67}},{"value":"/ implement Eq and Hash for it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134599,"byte_end":134632,"line_start":458,"line_end":458,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":456},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134828,"byte_end":134833,"line_start":465,"line_end":465,"column_start":15,"column_end":20},"name":"RANGE","qualname":"::image::Lod::RANGE","value":"Range<Self>","parent":{"krate":0,"index":455},"children":[],"decl_id":null,"docs":" Possible LOD range.\n","sig":null,"attributes":[{"value":"/ Possible LOD range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134790,"byte_end":134813,"line_start":464,"line_end":464,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":7436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135238,"byte_end":135249,"line_start":478,"line_end":478,"column_start":12,"column_end":23},"name":"PackedColor","qualname":"::image::PackedColor","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for an RGBA color with 8 bits per texel, encoded as a u32.\n","sig":null,"attributes":[{"value":"/ A wrapper for an RGBA color with 8 bits per texel, encoded as a u32.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135028,"byte_end":135100,"line_start":475,"line_end":475,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":7460},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136184,"byte_end":136195,"line_start":508,"line_end":508,"column_start":12,"column_end":23},"name":"SamplerDesc","qualname":"::image::SamplerDesc","value":"SamplerDesc { min_filter, mag_filter, mip_filter, wrap_mode, lod_bias, lod_range, comparison, border, normalized, anisotropy_clamp }","parent":null,"children":[{"krate":0,"index":7461},{"krate":0,"index":7462},{"krate":0,"index":7463},{"krate":0,"index":7464},{"krate":0,"index":7465},{"krate":0,"index":7466},{"krate":0,"index":7467},{"krate":0,"index":7468},{"krate":0,"index":7469},{"krate":0,"index":7470}],"decl_id":null,"docs":" Specifies how to sample from an image.  These are all the parameters\n available that alter how the GPU goes from a coordinate in an image\n to producing an actual value from the texture, including filtering/\n scaling, wrap mode, etc.\n","sig":null,"attributes":[{"value":"/ Specifies how to sample from an image.  These are all the parameters","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135776,"byte_end":135848,"line_start":501,"line_end":501,"column_start":1,"column_end":73}},{"value":"/ available that alter how the GPU goes from a coordinate in an image","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135849,"byte_end":135920,"line_start":502,"line_end":502,"column_start":1,"column_end":72}},{"value":"/ to producing an actual value from the texture, including filtering/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135921,"byte_end":135992,"line_start":503,"line_end":503,"column_start":1,"column_end":72}},{"value":"/ scaling, wrap mode, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135993,"byte_end":136021,"line_start":504,"line_end":504,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":7461},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136249,"byte_end":136259,"line_start":510,"line_end":510,"column_start":9,"column_end":19},"name":"min_filter","qualname":"::image::SamplerDesc::min_filter","value":"image::Filter","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Minification filter method to use.\n","sig":null,"attributes":[{"value":"/ Minification filter method to use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136202,"byte_end":136240,"line_start":509,"line_end":509,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":7462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136321,"byte_end":136331,"line_start":512,"line_end":512,"column_start":9,"column_end":19},"name":"mag_filter","qualname":"::image::SamplerDesc::mag_filter","value":"image::Filter","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Magnification filter method to use.\n","sig":null,"attributes":[{"value":"/ Magnification filter method to use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136273,"byte_end":136312,"line_start":511,"line_end":511,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":7463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136383,"byte_end":136393,"line_start":514,"line_end":514,"column_start":9,"column_end":19},"name":"mip_filter","qualname":"::image::SamplerDesc::mip_filter","value":"image::Filter","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Mip filter method to use.\n","sig":null,"attributes":[{"value":"/ Mip filter method to use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136345,"byte_end":136374,"line_start":513,"line_end":513,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":7464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136505,"byte_end":136514,"line_start":517,"line_end":517,"column_start":9,"column_end":18},"name":"wrap_mode","qualname":"::image::SamplerDesc::wrap_mode","value":"(image::WrapMode, image::WrapMode, image::WrapMode)","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL\n speak).\n","sig":null,"attributes":[{"value":"/ Wrapping mode for each of the U, V, and W axis (S, T, and R in OpenGL","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136407,"byte_end":136480,"line_start":515,"line_end":515,"column_start":5,"column_end":78}},{"value":"/ speak).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136485,"byte_end":136496,"line_start":516,"line_end":516,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":7465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136740,"byte_end":136748,"line_start":521,"line_end":521,"column_start":9,"column_end":17},"name":"lod_bias","qualname":"::image::SamplerDesc::lod_bias","value":"image::Lod","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" This bias is added to every computed mipmap level (N + lod_bias). For\n example, if it would select mipmap level 2 and lod_bias is 1, it will\n use mipmap level 3.\n","sig":null,"attributes":[{"value":"/ This bias is added to every computed mipmap level (N + lod_bias). For","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136552,"byte_end":136625,"line_start":518,"line_end":518,"column_start":5,"column_end":78}},{"value":"/ example, if it would select mipmap level 2 and lod_bias is 1, it will","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136630,"byte_end":136703,"line_start":519,"line_end":519,"column_start":5,"column_end":78}},{"value":"/ use mipmap level 3.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136708,"byte_end":136731,"line_start":520,"line_end":520,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7466},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136828,"byte_end":136837,"line_start":523,"line_end":523,"column_start":9,"column_end":18},"name":"lod_range","qualname":"::image::SamplerDesc::lod_range","value":"std::ops::Range<image::Lod>","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" This range is used to clamp LOD level used for sampling.\n","sig":null,"attributes":[{"value":"/ This range is used to clamp LOD level used for sampling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136759,"byte_end":136819,"line_start":522,"line_end":522,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":7467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136915,"byte_end":136925,"line_start":525,"line_end":525,"column_start":9,"column_end":19},"name":"comparison","qualname":"::image::SamplerDesc::comparison","value":"std::option::Option<pso::output_merger::Comparison>","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Comparison mode, used primary for a shadow map.\n","sig":null,"attributes":[{"value":"/ Comparison mode, used primary for a shadow map.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136855,"byte_end":136906,"line_start":524,"line_end":524,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":7468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137029,"byte_end":137035,"line_start":527,"line_end":527,"column_start":9,"column_end":15},"name":"border","qualname":"::image::SamplerDesc::border","value":"image::PackedColor","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Border color is used when one of the wrap modes is set to border.\n","sig":null,"attributes":[{"value":"/ Border color is used when one of the wrap modes is set to border.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":136951,"byte_end":137020,"line_start":526,"line_end":526,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":7469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137124,"byte_end":137134,"line_start":529,"line_end":529,"column_start":9,"column_end":19},"name":"normalized","qualname":"::image::SamplerDesc::normalized","value":"bool","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Specifies whether the texture coordinates are normalized.\n","sig":null,"attributes":[{"value":"/ Specifies whether the texture coordinates are normalized.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137054,"byte_end":137115,"line_start":528,"line_end":528,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":7470},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137265,"byte_end":137281,"line_start":533,"line_end":533,"column_start":9,"column_end":25},"name":"anisotropy_clamp","qualname":"::image::SamplerDesc::anisotropy_clamp","value":"std::option::Option<u8>","parent":{"krate":0,"index":7460},"children":[],"decl_id":null,"docs":" Anisotropic filtering.","sig":null,"attributes":[{"value":"/ Anisotropic filtering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137146,"byte_end":137172,"line_start":530,"line_end":530,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137177,"byte_end":137180,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Can be `Some(_)` only if `Features::SAMPLER_ANISOTROPY` is enabled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137185,"byte_end":137256,"line_start":532,"line_end":532,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137482,"byte_end":137485,"line_start":539,"line_end":539,"column_start":12,"column_end":15},"name":"new","qualname":"<SamplerDesc>::new","value":"fn (filter: Filter, wrap: WrapMode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new sampler description with a given filter method for all filtering operations\n and a wrapping mode, using no LOD modifications.\n","sig":null,"attributes":[{"value":"/ Create a new sampler description with a given filter method for all filtering operations","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137321,"byte_end":137413,"line_start":537,"line_end":537,"column_start":5,"column_end":97}},{"value":"/ and a wrapping mode, using no LOD modifications.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137418,"byte_end":137470,"line_start":538,"line_end":538,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7486},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138609,"byte_end":138616,"line_start":567,"line_end":567,"column_start":5,"column_end":12},"name":"General","qualname":"::image::Layout::General","value":"Layout::General","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" General purpose, no restrictions on usage.\n","sig":null,"attributes":[{"value":"/ General purpose, no restrictions on usage.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138558,"byte_end":138604,"line_start":566,"line_end":566,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7488},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138688,"byte_end":138710,"line_start":569,"line_end":569,"column_start":5,"column_end":27},"name":"ColorAttachmentOptimal","qualname":"::image::Layout::ColorAttachmentOptimal","value":"Layout::ColorAttachmentOptimal","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" Must only be used as a color attachment in a framebuffer.\n","sig":null,"attributes":[{"value":"/ Must only be used as a color attachment in a framebuffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138622,"byte_end":138683,"line_start":568,"line_end":568,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138782,"byte_end":138811,"line_start":571,"line_end":571,"column_start":5,"column_end":34},"name":"DepthStencilAttachmentOptimal","qualname":"::image::Layout::DepthStencilAttachmentOptimal","value":"Layout::DepthStencilAttachmentOptimal","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" Must only be used as a depth attachment in a framebuffer.\n","sig":null,"attributes":[{"value":"/ Must only be used as a depth attachment in a framebuffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138716,"byte_end":138777,"line_start":570,"line_end":570,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7492},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138946,"byte_end":138973,"line_start":574,"line_end":574,"column_start":5,"column_end":32},"name":"DepthStencilReadOnlyOptimal","qualname":"::image::Layout::DepthStencilReadOnlyOptimal","value":"Layout::DepthStencilReadOnlyOptimal","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" Must only be used as a depth attachment in a framebuffer,\n or as a read-only depth or stencil buffer in a shader.\n","sig":null,"attributes":[{"value":"/ Must only be used as a depth attachment in a framebuffer,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138817,"byte_end":138878,"line_start":572,"line_end":572,"column_start":5,"column_end":66}},{"value":"/ or as a read-only depth or stencil buffer in a shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138883,"byte_end":138941,"line_start":573,"line_end":573,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7494},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139039,"byte_end":139060,"line_start":576,"line_end":576,"column_start":5,"column_end":26},"name":"ShaderReadOnlyOptimal","qualname":"::image::Layout::ShaderReadOnlyOptimal","value":"Layout::ShaderReadOnlyOptimal","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" Must only be used as a read-only image in a shader.\n","sig":null,"attributes":[{"value":"/ Must only be used as a read-only image in a shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138979,"byte_end":139034,"line_start":575,"line_end":575,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139130,"byte_end":139148,"line_start":578,"line_end":578,"column_start":5,"column_end":23},"name":"TransferSrcOptimal","qualname":"::image::Layout::TransferSrcOptimal","value":"Layout::TransferSrcOptimal","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" Must only be used as the source for a transfer command.\n","sig":null,"attributes":[{"value":"/ Must only be used as the source for a transfer command.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139066,"byte_end":139125,"line_start":577,"line_end":577,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7498},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139223,"byte_end":139241,"line_start":580,"line_end":580,"column_start":5,"column_end":23},"name":"TransferDstOptimal","qualname":"::image::Layout::TransferDstOptimal","value":"Layout::TransferDstOptimal","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" Must only be used as the destination for a transfer command.\n","sig":null,"attributes":[{"value":"/ Must only be used as the destination for a transfer command.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139154,"byte_end":139218,"line_start":579,"line_end":579,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139505,"byte_end":139514,"line_start":585,"line_end":585,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::image::Layout::Undefined","value":"Layout::Undefined","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" No layout, does not support device access.  Only valid as a\n source layout when transforming data to a specific destination\n layout or initializing data.  Does NOT guarentee that the contents\n of the source buffer are preserved.\n","sig":null,"attributes":[{"value":"/ No layout, does not support device access.  Only valid as a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139247,"byte_end":139310,"line_start":581,"line_end":581,"column_start":5,"column_end":68}},{"value":"/ source layout when transforming data to a specific destination","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139315,"byte_end":139381,"line_start":582,"line_end":582,"column_start":5,"column_end":71}},{"value":"/ layout or initializing data.  Does NOT guarentee that the contents","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139386,"byte_end":139456,"line_start":583,"line_end":583,"column_start":5,"column_end":75}},{"value":"/ of the source buffer are preserved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139461,"byte_end":139500,"line_start":584,"line_end":584,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139627,"byte_end":139641,"line_start":588,"line_end":588,"column_start":5,"column_end":19},"name":"Preinitialized","qualname":"::image::Layout::Preinitialized","value":"Layout::Preinitialized","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" Like `Undefined`, but does guarentee that the contents of the source\n buffer are preserved.\n","sig":null,"attributes":[{"value":"/ Like `Undefined`, but does guarentee that the contents of the source","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139520,"byte_end":139592,"line_start":586,"line_end":586,"column_start":5,"column_end":77}},{"value":"/ buffer are preserved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139597,"byte_end":139622,"line_start":587,"line_end":587,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7504},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139723,"byte_end":139730,"line_start":590,"line_end":590,"column_start":5,"column_end":12},"name":"Present","qualname":"::image::Layout::Present","value":"Layout::Present","parent":{"krate":0,"index":7485},"children":[],"decl_id":null,"docs":" The layout that an image must be in to be presented to the display.\n","sig":null,"attributes":[{"value":"/ The layout that an image must be in to be presented to the display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139647,"byte_end":139718,"line_start":589,"line_end":589,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":7485},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138545,"byte_end":138551,"line_start":565,"line_end":565,"column_start":10,"column_end":16},"name":"Layout","qualname":"::image::Layout","value":"Layout::{General, ColorAttachmentOptimal, DepthStencilAttachmentOptimal, DepthStencilReadOnlyOptimal, ShaderReadOnlyOptimal, TransferSrcOptimal, TransferDstOptimal, Undefined, Preinitialized, Present}","parent":null,"children":[{"krate":0,"index":7486},{"krate":0,"index":7488},{"krate":0,"index":7490},{"krate":0,"index":7492},{"krate":0,"index":7494},{"krate":0,"index":7496},{"krate":0,"index":7498},{"krate":0,"index":7500},{"krate":0,"index":7502},{"krate":0,"index":7504}],"decl_id":null,"docs":" Specifies options for how memory for an image is arranged.\n These are hints to the GPU driver and may or may not have actual\n performance effects, but describe constraints on how the data\n may be used that a program *must* obey. They do not specify\n how channel values or such are laid out in memory; the actual\n image data is considered opaque.","sig":null,"attributes":[{"value":"/ Specifies options for how memory for an image is arranged.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137915,"byte_end":137977,"line_start":555,"line_end":555,"column_start":1,"column_end":63}},{"value":"/ These are hints to the GPU driver and may or may not have actual","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137978,"byte_end":138046,"line_start":556,"line_end":556,"column_start":1,"column_end":69}},{"value":"/ performance effects, but describe constraints on how the data","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138047,"byte_end":138112,"line_start":557,"line_end":557,"column_start":1,"column_end":66}},{"value":"/ may be used that a program *must* obey. They do not specify","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138113,"byte_end":138176,"line_start":558,"line_end":558,"column_start":1,"column_end":64}},{"value":"/ how channel values or such are laid out in memory; the actual","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138177,"byte_end":138242,"line_start":559,"line_end":559,"column_start":1,"column_end":66}},{"value":"/ image data is considered opaque.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138243,"byte_end":138279,"line_start":560,"line_end":560,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138280,"byte_end":138283,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ Details may be found in [the Vulkan spec](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#resources-image-layouts)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":138284,"byte_end":138421,"line_start":562,"line_end":562,"column_start":1,"column_end":138}}]},{"kind":"Struct","id":{"krate":0,"index":7520},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":139907,"byte_end":139913,"line_start":596,"line_end":596,"column_start":16,"column_end":22},"name":"Access","qualname":"::image::Access","value":"Access {  }","parent":null,"children":[{"krate":0,"index":7521}],"decl_id":null,"docs":" Bitflags to describe how memory in an image or buffer can be accessed.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7569},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140013,"byte_end":140034,"line_start":598,"line_end":598,"column_start":15,"column_end":36},"name":"INPUT_ATTACHMENT_READ","qualname":"::image::Access::INPUT_ATTACHMENT_READ","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Read access to an input attachment from within a fragment shader.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7570},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140159,"byte_end":140170,"line_start":600,"line_end":600,"column_start":15,"column_end":26},"name":"SHADER_READ","qualname":"::image::Access::SHADER_READ","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Read-only state for SRV access, or combine with `SHADER_WRITE` to have r/w access to UAV.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140303,"byte_end":140315,"line_start":603,"line_end":603,"column_start":15,"column_end":27},"name":"SHADER_WRITE","qualname":"::image::Access::SHADER_WRITE","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Writeable state for UAV access.\n Combine with `SHADER_READ` to have r/w access to UAV.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7572},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140417,"byte_end":140438,"line_start":605,"line_end":605,"column_start":15,"column_end":36},"name":"COLOR_ATTACHMENT_READ","qualname":"::image::Access::COLOR_ATTACHMENT_READ","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Read state but can only be combined with `COLOR_ATTACHMENT_WRITE`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140540,"byte_end":140562,"line_start":607,"line_end":607,"column_start":15,"column_end":37},"name":"COLOR_ATTACHMENT_WRITE","qualname":"::image::Access::COLOR_ATTACHMENT_WRITE","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Write-only state but can be combined with `COLOR_ATTACHMENT_READ`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7574},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140673,"byte_end":140702,"line_start":609,"line_end":609,"column_start":15,"column_end":44},"name":"DEPTH_STENCIL_ATTACHMENT_READ","qualname":"::image::Access::DEPTH_STENCIL_ATTACHMENT_READ","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Read access to a depth/stencil attachment in a depth or stencil operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7575},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140814,"byte_end":140844,"line_start":611,"line_end":611,"column_start":15,"column_end":45},"name":"DEPTH_STENCIL_ATTACHMENT_WRITE","qualname":"::image::Access::DEPTH_STENCIL_ATTACHMENT_WRITE","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Write access to a depth/stencil attachment in a depth or stencil operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7576},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":140927,"byte_end":140940,"line_start":613,"line_end":613,"column_start":15,"column_end":28},"name":"TRANSFER_READ","qualname":"::image::Access::TRANSFER_READ","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Read access to the buffer in a copy operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7577},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141024,"byte_end":141038,"line_start":615,"line_end":615,"column_start":15,"column_end":29},"name":"TRANSFER_WRITE","qualname":"::image::Access::TRANSFER_WRITE","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Write access to the buffer in a copy operation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7578},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141147,"byte_end":141156,"line_start":617,"line_end":617,"column_start":15,"column_end":24},"name":"HOST_READ","qualname":"::image::Access::HOST_READ","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Read access for raw memory to be accessed by the host system (ie, CPU).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7579},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141256,"byte_end":141266,"line_start":619,"line_end":619,"column_start":15,"column_end":25},"name":"HOST_WRITE","qualname":"::image::Access::HOST_WRITE","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Write access for raw memory to be accessed by the host system.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141484,"byte_end":141495,"line_start":623,"line_end":623,"column_start":15,"column_end":26},"name":"MEMORY_READ","qualname":"::image::Access::MEMORY_READ","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Read access for memory to be accessed by a non-specific entity.  This may\n be the host system, or it may be something undefined or specified by an\n extension.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7581},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141597,"byte_end":141609,"line_start":625,"line_end":625,"column_start":15,"column_end":27},"name":"MEMORY_WRITE","qualname":"::image::Access::MEMORY_WRITE","value":"Access","parent":{"krate":0,"index":7568},"children":[],"decl_id":null,"docs":" Write access for memory to be accessed by a non-specific entity.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":473},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141706,"byte_end":141711,"line_start":630,"line_end":630,"column_start":10,"column_end":15},"name":"State","qualname":"::image::State","value":"(Access, Layout)","parent":null,"children":[],"decl_id":null,"docs":" Image state, combining access methods and the image's layout.\n","sig":null,"attributes":[{"value":"/ Image state, combining access methods and the image's layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141631,"byte_end":141696,"line_start":629,"line_end":629,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":7666},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141910,"byte_end":141921,"line_start":635,"line_end":635,"column_start":12,"column_end":23},"name":"Subresource","qualname":"::image::Subresource","value":"Subresource { aspects, level, layer }","parent":null,"children":[{"krate":0,"index":7667},{"krate":0,"index":7668},{"krate":0,"index":7669}],"decl_id":null,"docs":" Selector of a concrete subresource in an image.\n","sig":null,"attributes":[{"value":"/ Selector of a concrete subresource in an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141733,"byte_end":141784,"line_start":632,"line_end":632,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":7667},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141978,"byte_end":141985,"line_start":637,"line_end":637,"column_start":9,"column_end":16},"name":"aspects","qualname":"::image::Subresource::aspects","value":"format::Aspects","parent":{"krate":0,"index":7666},"children":[],"decl_id":null,"docs":" Included aspects: color/depth/stencil\n","sig":null,"attributes":[{"value":"/ Included aspects: color/depth/stencil","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":141928,"byte_end":141969,"line_start":636,"line_end":636,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142042,"byte_end":142047,"line_start":639,"line_end":639,"column_start":9,"column_end":14},"name":"level","qualname":"::image::Subresource::level","value":"u8","parent":{"krate":0,"index":7666},"children":[],"decl_id":null,"docs":" Selected mipmap level\n","sig":null,"attributes":[{"value":"/ Selected mipmap level","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142008,"byte_end":142033,"line_start":638,"line_end":638,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":7669},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142093,"byte_end":142098,"line_start":641,"line_end":641,"column_start":9,"column_end":14},"name":"layer","qualname":"::image::Subresource::layer","value":"u16","parent":{"krate":0,"index":7666},"children":[],"decl_id":null,"docs":" Selected array level\n","sig":null,"attributes":[{"value":"/ Selected array level","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142060,"byte_end":142084,"line_start":640,"line_end":640,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":7685},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142296,"byte_end":142313,"line_start":647,"line_end":647,"column_start":12,"column_end":29},"name":"SubresourceLayers","qualname":"::image::SubresourceLayers","value":"SubresourceLayers { aspects, level, layers }","parent":null,"children":[{"krate":0,"index":7686},{"krate":0,"index":7687},{"krate":0,"index":7688}],"decl_id":null,"docs":" A subset of resource layers contained within an image's level.\n","sig":null,"attributes":[{"value":"/ A subset of resource layers contained within an image's level.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142110,"byte_end":142176,"line_start":644,"line_end":644,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":7686},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142370,"byte_end":142377,"line_start":649,"line_end":649,"column_start":9,"column_end":16},"name":"aspects","qualname":"::image::SubresourceLayers::aspects","value":"format::Aspects","parent":{"krate":0,"index":7685},"children":[],"decl_id":null,"docs":" Included aspects: color/depth/stencil\n","sig":null,"attributes":[{"value":"/ Included aspects: color/depth/stencil","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142320,"byte_end":142361,"line_start":648,"line_end":648,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7687},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142434,"byte_end":142439,"line_start":651,"line_end":651,"column_start":9,"column_end":14},"name":"level","qualname":"::image::SubresourceLayers::level","value":"u8","parent":{"krate":0,"index":7685},"children":[],"decl_id":null,"docs":" Selected mipmap level\n","sig":null,"attributes":[{"value":"/ Selected mipmap level","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142400,"byte_end":142425,"line_start":650,"line_end":650,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":7688},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142486,"byte_end":142492,"line_start":653,"line_end":653,"column_start":9,"column_end":15},"name":"layers","qualname":"::image::SubresourceLayers::layers","value":"std::ops::Range<u16>","parent":{"krate":0,"index":7685},"children":[],"decl_id":null,"docs":" Included array levels\n","sig":null,"attributes":[{"value":"/ Included array levels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142452,"byte_end":142477,"line_start":652,"line_end":652,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":7703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142683,"byte_end":142699,"line_start":659,"line_end":659,"column_start":12,"column_end":28},"name":"SubresourceRange","qualname":"::image::SubresourceRange","value":"SubresourceRange { aspects, levels, layers }","parent":null,"children":[{"krate":0,"index":7704},{"krate":0,"index":7705},{"krate":0,"index":7706}],"decl_id":null,"docs":" A subset of resources contained within an image.\n","sig":null,"attributes":[{"value":"/ A subset of resources contained within an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142511,"byte_end":142563,"line_start":656,"line_end":656,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":7704},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142756,"byte_end":142763,"line_start":661,"line_end":661,"column_start":9,"column_end":16},"name":"aspects","qualname":"::image::SubresourceRange::aspects","value":"format::Aspects","parent":{"krate":0,"index":7703},"children":[],"decl_id":null,"docs":" Included aspects: color/depth/stencil\n","sig":null,"attributes":[{"value":"/ Included aspects: color/depth/stencil","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142706,"byte_end":142747,"line_start":660,"line_end":660,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7705},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142821,"byte_end":142827,"line_start":663,"line_end":663,"column_start":9,"column_end":15},"name":"levels","qualname":"::image::SubresourceRange::levels","value":"std::ops::Range<u8>","parent":{"krate":0,"index":7703},"children":[],"decl_id":null,"docs":" Included mipmap levels\n","sig":null,"attributes":[{"value":"/ Included mipmap levels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142786,"byte_end":142812,"line_start":662,"line_end":662,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":7706},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142881,"byte_end":142887,"line_start":665,"line_end":665,"column_start":9,"column_end":15},"name":"layers","qualname":"::image::SubresourceRange::layers","value":"std::ops::Range<u16>","parent":{"krate":0,"index":7703},"children":[],"decl_id":null,"docs":" Included array levels\n","sig":null,"attributes":[{"value":"/ Included array levels","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142847,"byte_end":142872,"line_start":664,"line_end":664,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":7721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143060,"byte_end":143076,"line_start":671,"line_end":671,"column_start":12,"column_end":28},"name":"FormatProperties","qualname":"::image::FormatProperties","value":"FormatProperties { max_extent, max_levels, max_layers, sample_count_mask, max_resource_size }","parent":null,"children":[{"krate":0,"index":7722},{"krate":0,"index":7723},{"krate":0,"index":7724},{"krate":0,"index":7725},{"krate":0,"index":7726}],"decl_id":null,"docs":" Image format properties.\n","sig":null,"attributes":[{"value":"/ Image format properties.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":142906,"byte_end":142934,"line_start":668,"line_end":668,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":7722},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143111,"byte_end":143121,"line_start":673,"line_end":673,"column_start":9,"column_end":19},"name":"max_extent","qualname":"::image::FormatProperties::max_extent","value":"image::Extent","parent":{"krate":0,"index":7721},"children":[],"decl_id":null,"docs":" Maximum extent.\n","sig":null,"attributes":[{"value":"/ Maximum extent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143083,"byte_end":143102,"line_start":672,"line_end":672,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":7723},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143176,"byte_end":143186,"line_start":675,"line_end":675,"column_start":9,"column_end":19},"name":"max_levels","qualname":"::image::FormatProperties::max_levels","value":"u8","parent":{"krate":0,"index":7721},"children":[],"decl_id":null,"docs":" Max number of mipmap levels.\n","sig":null,"attributes":[{"value":"/ Max number of mipmap levels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143135,"byte_end":143167,"line_start":674,"line_end":674,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":7724},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143239,"byte_end":143249,"line_start":677,"line_end":677,"column_start":9,"column_end":19},"name":"max_layers","qualname":"::image::FormatProperties::max_layers","value":"u16","parent":{"krate":0,"index":7721},"children":[],"decl_id":null,"docs":" Max number of array layers.\n","sig":null,"attributes":[{"value":"/ Max number of array layers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143199,"byte_end":143230,"line_start":676,"line_end":676,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":7725},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143311,"byte_end":143328,"line_start":679,"line_end":679,"column_start":9,"column_end":26},"name":"sample_count_mask","qualname":"::image::FormatProperties::sample_count_mask","value":"u8","parent":{"krate":0,"index":7721},"children":[],"decl_id":null,"docs":" Bit mask of supported sample counts.\n","sig":null,"attributes":[{"value":"/ Bit mask of supported sample counts.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143262,"byte_end":143302,"line_start":678,"line_end":678,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":7726},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143397,"byte_end":143414,"line_start":681,"line_end":681,"column_start":9,"column_end":26},"name":"max_resource_size","qualname":"::image::FormatProperties::max_resource_size","value":"usize","parent":{"krate":0,"index":7721},"children":[],"decl_id":null,"docs":" Maximum size of the resource in bytes.\n","sig":null,"attributes":[{"value":"/ Maximum size of the resource in bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143346,"byte_end":143388,"line_start":680,"line_end":680,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":7742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143587,"byte_end":143607,"line_start":687,"line_end":687,"column_start":12,"column_end":32},"name":"SubresourceFootprint","qualname":"::image::SubresourceFootprint","value":"SubresourceFootprint { slice, row_pitch, array_pitch, depth_pitch }","parent":null,"children":[{"krate":0,"index":7743},{"krate":0,"index":7744},{"krate":0,"index":7745},{"krate":0,"index":7746}],"decl_id":null,"docs":" Footprint of a subresource in memory.\n","sig":null,"attributes":[{"value":"/ Footprint of a subresource in memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143426,"byte_end":143467,"line_start":684,"line_end":684,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":7743},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143666,"byte_end":143671,"line_start":689,"line_end":689,"column_start":9,"column_end":14},"name":"slice","qualname":"::image::SubresourceFootprint::slice","value":"std::ops::Range<u64>","parent":{"krate":0,"index":7742},"children":[],"decl_id":null,"docs":" Byte slice occupied by the subresource.\n","sig":null,"attributes":[{"value":"/ Byte slice occupied by the subresource.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143614,"byte_end":143657,"line_start":688,"line_end":688,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":7744},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143735,"byte_end":143744,"line_start":691,"line_end":691,"column_start":9,"column_end":18},"name":"row_pitch","qualname":"::image::SubresourceFootprint::row_pitch","value":"u64","parent":{"krate":0,"index":7742},"children":[],"decl_id":null,"docs":" Byte distance between rows.\n","sig":null,"attributes":[{"value":"/ Byte distance between rows.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143695,"byte_end":143726,"line_start":690,"line_end":690,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":7745},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143809,"byte_end":143820,"line_start":693,"line_end":693,"column_start":9,"column_end":20},"name":"array_pitch","qualname":"::image::SubresourceFootprint::array_pitch","value":"u64","parent":{"krate":0,"index":7742},"children":[],"decl_id":null,"docs":" Byte distance between array layers.\n","sig":null,"attributes":[{"value":"/ Byte distance between array layers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143761,"byte_end":143800,"line_start":692,"line_end":692,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":7746},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143885,"byte_end":143896,"line_start":695,"line_end":695,"column_start":9,"column_end":20},"name":"depth_pitch","qualname":"::image::SubresourceFootprint::depth_pitch","value":"u64","parent":{"krate":0,"index":7742},"children":[],"decl_id":null,"docs":" Byte distance between depth slices.\n","sig":null,"attributes":[{"value":"/ Byte distance between depth slices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":143837,"byte_end":143876,"line_start":694,"line_end":694,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":474},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"memory","qualname":"::memory","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":480},{"krate":0,"index":7761},{"krate":0,"index":7783},{"krate":0,"index":7779},{"krate":0,"index":7780},{"krate":0,"index":7776},{"krate":0,"index":7777},{"krate":0,"index":7774},{"krate":0,"index":7768},{"krate":0,"index":7766},{"krate":0,"index":7763},{"krate":0,"index":7784},{"krate":0,"index":7793},{"krate":0,"index":7795},{"krate":0,"index":7797},{"krate":0,"index":7799},{"krate":0,"index":7801},{"krate":0,"index":7812},{"krate":0,"index":7815},{"krate":0,"index":7817},{"krate":0,"index":7820},{"krate":0,"index":7822},{"krate":0,"index":7825},{"krate":0,"index":7827},{"krate":0,"index":7830},{"krate":0,"index":7832},{"krate":0,"index":7835},{"krate":0,"index":7838},{"krate":0,"index":7867},{"krate":0,"index":7889},{"krate":0,"index":7885},{"krate":0,"index":7886},{"krate":0,"index":7882},{"krate":0,"index":7883},{"krate":0,"index":7880},{"krate":0,"index":7874},{"krate":0,"index":7872},{"krate":0,"index":7869},{"krate":0,"index":7890},{"krate":0,"index":7897},{"krate":0,"index":7899},{"krate":0,"index":7901},{"krate":0,"index":7903},{"krate":0,"index":7905},{"krate":0,"index":7914},{"krate":0,"index":7917},{"krate":0,"index":7919},{"krate":0,"index":7922},{"krate":0,"index":7924},{"krate":0,"index":7927},{"krate":0,"index":7929},{"krate":0,"index":7932},{"krate":0,"index":7934},{"krate":0,"index":7937},{"krate":0,"index":7940},{"krate":0,"index":7963},{"krate":0,"index":7986},{"krate":0,"index":7982},{"krate":0,"index":481},{"krate":0,"index":7990},{"krate":0,"index":7997},{"krate":0,"index":7996},{"krate":0,"index":7994},{"krate":0,"index":7999},{"krate":0,"index":8016},{"krate":0,"index":8014},{"krate":0,"index":8012},{"krate":0,"index":8009},{"krate":0,"index":8005},{"krate":0,"index":8006},{"krate":0,"index":8002},{"krate":0,"index":8003},{"krate":0,"index":485}],"decl_id":null,"docs":" Types to describe the properties of memory allocated for gfx resources.\n","sig":null,"attributes":[{"value":"! Types to describe the properties of memory allocated for gfx resources.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":143912,"byte_end":143987,"line_start":1,"line_end":1,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":7761},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":144179,"byte_end":144189,"line_start":9,"line_end":9,"column_start":16,"column_end":26},"name":"Properties","qualname":"::memory::Properties","value":"Properties {  }","parent":null,"children":[{"krate":0,"index":7762}],"decl_id":null,"docs":" Memory property flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":144255,"byte_end":144267,"line_start":11,"line_end":11,"column_start":15,"column_end":27},"name":"DEVICE_LOCAL","qualname":"::memory::Properties::DEVICE_LOCAL","value":"Properties","parent":{"krate":0,"index":7801},"children":[],"decl_id":null,"docs":" Device local memory on the GPU.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":144429,"byte_end":144440,"line_start":16,"line_end":16,"column_start":15,"column_end":26},"name":"CPU_VISIBLE","qualname":"::memory::Properties::CPU_VISIBLE","value":"Properties","parent":{"krate":0,"index":7801},"children":[],"decl_id":null,"docs":" Host visible memory can be accessed by the CPU.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7804},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":144565,"byte_end":144573,"line_start":21,"line_end":21,"column_start":15,"column_end":23},"name":"COHERENT","qualname":"::memory::Properties::COHERENT","value":"Properties","parent":{"krate":0,"index":7801},"children":[],"decl_id":null,"docs":" CPU-GPU coherent.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7805},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":144633,"byte_end":144643,"line_start":24,"line_end":24,"column_start":15,"column_end":25},"name":"CPU_CACHED","qualname":"::memory::Properties::CPU_CACHED","value":"Properties","parent":{"krate":0,"index":7801},"children":[],"decl_id":null,"docs":" Cached memory by the CPU\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7806},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":144785,"byte_end":144801,"line_start":28,"line_end":28,"column_start":15,"column_end":31},"name":"LAZILY_ALLOCATED","qualname":"::memory::Properties::LAZILY_ALLOCATED","value":"Properties","parent":{"krate":0,"index":7801},"children":[],"decl_id":null,"docs":" Memory that may be lazily allocated as needed on the GPU\n and *must not* be visible to the CPU.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7867},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":144947,"byte_end":144959,"line_start":35,"line_end":35,"column_start":16,"column_end":28},"name":"Dependencies","qualname":"::memory::Dependencies","value":"Dependencies {  }","parent":null,"children":[{"krate":0,"index":7868}],"decl_id":null,"docs":" Barrier dependency flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7906},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145050,"byte_end":145059,"line_start":37,"line_end":37,"column_start":15,"column_end":24},"name":"BY_REGION","qualname":"::memory::Dependencies::BY_REGION","value":"Dependencies","parent":{"krate":0,"index":7905},"children":[],"decl_id":null,"docs":" Specifies the memory dependency to be framebuffer-local.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145096,"byte_end":145106,"line_start":39,"line_end":39,"column_start":15,"column_end":25},"name":"VIEW_LOCAL","qualname":"::memory::Dependencies::VIEW_LOCAL","value":"Dependencies","parent":{"krate":0,"index":7905},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":7908},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145142,"byte_end":145154,"line_start":41,"line_end":41,"column_start":15,"column_end":27},"name":"DEVICE_GROUP","qualname":"::memory::Dependencies::DEVICE_GROUP","value":"Dependencies","parent":{"krate":0,"index":7905},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7966},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145612,"byte_end":145622,"line_start":53,"line_end":53,"column_start":5,"column_end":15},"name":"AllBuffers","qualname":"::memory::Barrier::AllBuffers","value":"Barrier::AllBuffers(Range<buffer::Access>)","parent":{"krate":0,"index":7963},"children":[],"decl_id":null,"docs":" Applies the given access flags to all buffers in the range.\n","sig":null,"attributes":[{"value":"/ Applies the given access flags to all buffers in the range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145544,"byte_end":145607,"line_start":52,"line_end":52,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7969},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145718,"byte_end":145727,"line_start":55,"line_end":55,"column_start":5,"column_end":14},"name":"AllImages","qualname":"::memory::Barrier::AllImages","value":"Barrier::AllImages(Range<image::Access>)","parent":{"krate":0,"index":7963},"children":[],"decl_id":null,"docs":" Applies the given access flags to all images in the range.\n","sig":null,"attributes":[{"value":"/ Applies the given access flags to all images in the range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145651,"byte_end":145713,"line_start":54,"line_end":54,"column_start":5,"column_end":67}}]},{"kind":"StructVariant","id":{"krate":0,"index":7972},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145813,"byte_end":145819,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::memory::Barrier::Buffer","value":"Barrier::Buffer { states, target, range, families }","parent":{"krate":0,"index":7963},"children":[],"decl_id":null,"docs":" A memory barrier that defines access to a buffer.\n","sig":null,"attributes":[{"value":"/ A memory barrier that defines access to a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145755,"byte_end":145808,"line_start":56,"line_end":56,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":7977},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":146477,"byte_end":146482,"line_start":69,"line_end":69,"column_start":5,"column_end":10},"name":"Image","qualname":"::memory::Barrier::Image","value":"Barrier::Image { states, target, range, families }","parent":{"krate":0,"index":7963},"children":[],"decl_id":null,"docs":" A memory barrier that defines access to (a subset of) an image.\n","sig":null,"attributes":[{"value":"/ A memory barrier that defines access to (a subset of) an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":146405,"byte_end":146472,"line_start":68,"line_end":68,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":7963},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145514,"byte_end":145521,"line_start":51,"line_end":51,"column_start":10,"column_end":17},"name":"Barrier","qualname":"::memory::Barrier","value":"Barrier::{AllBuffers, AllImages, Buffer, Image}","parent":null,"children":[{"krate":0,"index":7966},{"krate":0,"index":7969},{"krate":0,"index":7972},{"krate":0,"index":7977}],"decl_id":null,"docs":" A [memory barrier](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-memory-barriers)\n type for either buffers or images.\n","sig":null,"attributes":[{"value":"/ A [memory barrier](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#synchronization-memory-barriers)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145296,"byte_end":145418,"line_start":47,"line_end":47,"column_start":1,"column_end":123}},{"value":"/ type for either buffers or images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145419,"byte_end":145457,"line_start":48,"line_end":48,"column_start":1,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":145458,"byte_end":145480,"line_start":49,"line_end":49,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147228,"byte_end":147240,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"whole_buffer","qualname":"<Barrier>::whole_buffer","value":"fn (target: &'a B::Buffer, states: Range<buffer::State>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a barrier for the whole buffer between the given states.\n","sig":null,"attributes":[{"value":"/ Create a barrier for the whole buffer between the given states.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147149,"byte_end":147216,"line_start":83,"line_end":83,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":7990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147565,"byte_end":147577,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"Requirements","qualname":"::memory::Requirements","value":"Requirements { size, alignment, type_mask }","parent":null,"children":[{"krate":0,"index":7991},{"krate":0,"index":7992},{"krate":0,"index":7993}],"decl_id":null,"docs":" Memory requirements for a certain resource (buffer/image).\n","sig":null,"attributes":[{"value":"/ Memory requirements for a certain resource (buffer/image).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147461,"byte_end":147523,"line_start":94,"line_end":94,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":7991},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147616,"byte_end":147620,"line_start":98,"line_end":98,"column_start":9,"column_end":13},"name":"size","qualname":"::memory::Requirements::size","value":"u64","parent":{"krate":0,"index":7990},"children":[],"decl_id":null,"docs":" Size in the memory.\n","sig":null,"attributes":[{"value":"/ Size in the memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147584,"byte_end":147607,"line_start":97,"line_end":97,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":7992},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147661,"byte_end":147670,"line_start":100,"line_end":100,"column_start":9,"column_end":18},"name":"alignment","qualname":"::memory::Requirements::alignment","value":"u64","parent":{"krate":0,"index":7990},"children":[],"decl_id":null,"docs":" Memory alignment.\n","sig":null,"attributes":[{"value":"/ Memory alignment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147631,"byte_end":147652,"line_start":99,"line_end":99,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":7993},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147717,"byte_end":147726,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"type_mask","qualname":"::memory::Requirements::type_mask","value":"u64","parent":{"krate":0,"index":7990},"children":[],"decl_id":null,"docs":" Supported memory types.\n","sig":null,"attributes":[{"value":"/ Supported memory types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147681,"byte_end":147708,"line_start":101,"line_end":101,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":7999},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147908,"byte_end":147915,"line_start":108,"line_end":108,"column_start":12,"column_end":19},"name":"Segment","qualname":"::memory::Segment","value":"Segment { offset, size }","parent":null,"children":[{"krate":0,"index":8000},{"krate":0,"index":8001}],"decl_id":null,"docs":" A linear segment within a memory block.\n","sig":null,"attributes":[{"value":"/ A linear segment within a memory block.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147736,"byte_end":147779,"line_start":105,"line_end":105,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":8000},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147957,"byte_end":147963,"line_start":110,"line_end":110,"column_start":9,"column_end":15},"name":"offset","qualname":"::memory::Segment::offset","value":"u64","parent":{"krate":0,"index":7999},"children":[],"decl_id":null,"docs":" Offset to the segment.\n","sig":null,"attributes":[{"value":"/ Offset to the segment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147922,"byte_end":147948,"line_start":109,"line_end":109,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":8001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":148027,"byte_end":148031,"line_start":112,"line_end":112,"column_start":9,"column_end":13},"name":"size","qualname":"::memory::Segment::size","value":"std::option::Option<u64>","parent":{"krate":0,"index":7999},"children":[],"decl_id":null,"docs":" Size of the segment, or None if unbound.\n","sig":null,"attributes":[{"value":"/ Size of the segment, or None if unbound.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147974,"byte_end":148018,"line_start":111,"line_end":111,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":486},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":148112,"byte_end":148115,"line_start":117,"line_end":117,"column_start":15,"column_end":18},"name":"ALL","qualname":"::memory::Segment::ALL","value":"Self","parent":{"krate":0,"index":485},"children":[],"decl_id":null,"docs":" All the memory available.\n","sig":null,"attributes":[{"value":"/ All the memory available.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":148068,"byte_end":148097,"line_start":116,"line_end":116,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":487},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pass","qualname":"::pass","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":494},{"krate":0,"index":8018},{"krate":0,"index":8038},{"krate":0,"index":8036},{"krate":0,"index":8034},{"krate":0,"index":8031},{"krate":0,"index":8028},{"krate":0,"index":8029},{"krate":0,"index":8025},{"krate":0,"index":8026},{"krate":0,"index":8039},{"krate":0,"index":8057},{"krate":0,"index":8055},{"krate":0,"index":8053},{"krate":0,"index":8050},{"krate":0,"index":8047},{"krate":0,"index":8048},{"krate":0,"index":8044},{"krate":0,"index":8045},{"krate":0,"index":495},{"krate":0,"index":8058},{"krate":0,"index":8075},{"krate":0,"index":8073},{"krate":0,"index":8071},{"krate":0,"index":8068},{"krate":0,"index":8065},{"krate":0,"index":8066},{"krate":0,"index":8061},{"krate":0,"index":8062},{"krate":0,"index":496},{"krate":0,"index":8076},{"krate":0,"index":8091},{"krate":0,"index":8089},{"krate":0,"index":8086},{"krate":0,"index":8082},{"krate":0,"index":8083},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":8093},{"krate":0,"index":8103},{"krate":0,"index":8101},{"krate":0,"index":8098},{"krate":0,"index":8105},{"krate":0,"index":8115},{"krate":0,"index":8112},{"krate":0,"index":8118},{"krate":0,"index":8123},{"krate":0,"index":507},{"krate":0,"index":511},{"krate":0,"index":515},{"krate":0,"index":518}],"decl_id":null,"docs":" RenderPass handling.\n","sig":null,"attributes":[{"value":"! RenderPass handling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148183,"byte_end":148207,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8019},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148598,"byte_end":148602,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Load","qualname":"::pass::AttachmentLoadOp::Load","value":"AttachmentLoadOp::Load","parent":{"krate":0,"index":8018},"children":[],"decl_id":null,"docs":" Preserve existing content in the attachment.\n","sig":null,"attributes":[{"value":"/ Preserve existing content in the attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148545,"byte_end":148593,"line_start":10,"line_end":10,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8021},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148638,"byte_end":148643,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Clear","qualname":"::pass::AttachmentLoadOp::Clear","value":"AttachmentLoadOp::Clear","parent":{"krate":0,"index":8018},"children":[],"decl_id":null,"docs":" Clear the attachment.\n","sig":null,"attributes":[{"value":"/ Clear the attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148608,"byte_end":148633,"line_start":12,"line_end":12,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148695,"byte_end":148703,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"name":"DontCare","qualname":"::pass::AttachmentLoadOp::DontCare","value":"AttachmentLoadOp::DontCare","parent":{"krate":0,"index":8018},"children":[],"decl_id":null,"docs":" Attachment content will be undefined.\n","sig":null,"attributes":[{"value":"/ Attachment content will be undefined.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148649,"byte_end":148690,"line_start":14,"line_end":14,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":8018},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148522,"byte_end":148538,"line_start":9,"line_end":9,"column_start":10,"column_end":26},"name":"AttachmentLoadOp","qualname":"::pass::AttachmentLoadOp","value":"AttachmentLoadOp::{Load, Clear, DontCare}","parent":null,"children":[{"krate":0,"index":8019},{"krate":0,"index":8021},{"krate":0,"index":8023}],"decl_id":null,"docs":" Specifies the operation which will be applied at the beginning of a subpass.\n","sig":null,"attributes":[{"value":"/ Specifies the operation which will be applied at the beginning of a subpass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148318,"byte_end":148398,"line_start":6,"line_end":6,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148920,"byte_end":148925,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Store","qualname":"::pass::AttachmentStoreOp::Store","value":"AttachmentStoreOp::Store","parent":{"krate":0,"index":8039},"children":[],"decl_id":null,"docs":" Content written to the attachment will be preserved.\n","sig":null,"attributes":[{"value":"/ Content written to the attachment will be preserved.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148859,"byte_end":148915,"line_start":22,"line_end":22,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148977,"byte_end":148985,"line_start":25,"line_end":25,"column_start":5,"column_end":13},"name":"DontCare","qualname":"::pass::AttachmentStoreOp::DontCare","value":"AttachmentStoreOp::DontCare","parent":{"krate":0,"index":8039},"children":[],"decl_id":null,"docs":" Attachment content will be undefined.\n","sig":null,"attributes":[{"value":"/ Attachment content will be undefined.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148931,"byte_end":148972,"line_start":24,"line_end":24,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":8039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148835,"byte_end":148852,"line_start":21,"line_end":21,"column_start":10,"column_end":27},"name":"AttachmentStoreOp","qualname":"::pass::AttachmentStoreOp","value":"AttachmentStoreOp::{Store, DontCare}","parent":null,"children":[{"krate":0,"index":8040},{"krate":0,"index":8042}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148708,"byte_end":148711,"line_start":18,"line_end":18,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":495},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149034,"byte_end":149050,"line_start":29,"line_end":29,"column_start":10,"column_end":26},"name":"AttachmentLayout","qualname":"::pass::AttachmentLayout","value":"image::Layout","parent":null,"children":[],"decl_id":null,"docs":" Image layout of an attachment.\n","sig":null,"attributes":[{"value":"/ Image layout of an attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":148990,"byte_end":149024,"line_start":28,"line_end":28,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":8058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149221,"byte_end":149234,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"AttachmentOps","qualname":"::pass::AttachmentOps","value":"AttachmentOps { load, store }","parent":null,"children":[{"krate":0,"index":8059},{"krate":0,"index":8060}],"decl_id":null,"docs":" Attachment operations.\n","sig":null,"attributes":[{"value":"/ Attachment operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149069,"byte_end":149095,"line_start":31,"line_end":31,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":8059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149365,"byte_end":149369,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"load","qualname":"::pass::AttachmentOps::load","value":"pass::AttachmentLoadOp","parent":{"krate":0,"index":8058},"children":[],"decl_id":null,"docs":" Indicates how the data of the attachment will be loaded at first usage at\n the beginning of the subpass.\n","sig":null,"attributes":[{"value":"/ Indicates how the data of the attachment will be loaded at first usage at","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149241,"byte_end":149318,"line_start":35,"line_end":35,"column_start":5,"column_end":82}},{"value":"/ the beginning of the subpass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149323,"byte_end":149356,"line_start":36,"line_end":36,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":8060},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149487,"byte_end":149492,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"store","qualname":"::pass::AttachmentOps::store","value":"pass::AttachmentStoreOp","parent":{"krate":0,"index":8058},"children":[],"decl_id":null,"docs":" Whether or not data from the store operation will be preserved after the subpass.\n","sig":null,"attributes":[{"value":"/ Whether or not data from the store operation will be preserved after the subpass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149393,"byte_end":149478,"line_start":38,"line_end":38,"column_start":5,"column_end":90}}]},{"kind":"Const","id":{"krate":0,"index":497},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149608,"byte_end":149617,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"name":"DONT_CARE","qualname":"::pass::AttachmentOps::DONT_CARE","value":"Self","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":" Specifies `DontCare` for both load and store op.\n","sig":null,"attributes":[{"value":"/ Specifies `DontCare` for both load and store op.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149541,"byte_end":149593,"line_start":43,"line_end":43,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":498},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149814,"byte_end":149818,"line_start":50,"line_end":50,"column_start":15,"column_end":19},"name":"INIT","qualname":"::pass::AttachmentOps::INIT","value":"Self","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":" Specifies `Clear` for load op and `Store` for store op.\n","sig":null,"attributes":[{"value":"/ Specifies `Clear` for load op and `Store` for store op.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149740,"byte_end":149799,"line_start":49,"line_end":49,"column_start":5,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":499},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150008,"byte_end":150016,"line_start":56,"line_end":56,"column_start":15,"column_end":23},"name":"PRESERVE","qualname":"::pass::AttachmentOps::PRESERVE","value":"Self","parent":{"krate":0,"index":496},"children":[],"decl_id":null,"docs":" Specifies `Load` for load op and `Store` for store op.\n","sig":null,"attributes":[{"value":"/ Specifies `Load` for load op and `Store` for store op.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149935,"byte_end":149993,"line_start":55,"line_end":55,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150201,"byte_end":150204,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<AttachmentOps>::new","value":"fn (load: AttachmentLoadOp, store: AttachmentStoreOp) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to create a new `AttachmentOps`.\n","sig":null,"attributes":[{"value":"/ Convenience function to create a new `AttachmentOps`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150132,"byte_end":150189,"line_start":61,"line_end":61,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":8076},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150829,"byte_end":150839,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"Attachment","qualname":"::pass::Attachment","value":"Attachment { format, samples, ops, stencil_ops, layouts }","parent":null,"children":[{"krate":0,"index":8077},{"krate":0,"index":8078},{"krate":0,"index":8079},{"krate":0,"index":8080},{"krate":0,"index":8081}],"decl_id":null,"docs":" An `Attachment` is a description of a resource provided to a render subpass.\n It includes things such as render targets, images that were produced from\n previous subpasses, etc.\n","sig":null,"attributes":[{"value":"/ An `Attachment` is a description of a resource provided to a render subpass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150526,"byte_end":150606,"line_start":74,"line_end":74,"column_start":1,"column_end":81}},{"value":"/ It includes things such as render targets, images that were produced from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150607,"byte_end":150684,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ previous subpasses, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150685,"byte_end":150713,"line_start":76,"line_end":76,"column_start":1,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":8077},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151065,"byte_end":151071,"line_start":85,"line_end":85,"column_start":9,"column_end":15},"name":"format","qualname":"::pass::Attachment::format","value":"std::option::Option<format::Format>","parent":{"krate":0,"index":8076},"children":[],"decl_id":null,"docs":" Attachment format","sig":null,"attributes":[{"value":"/ Attachment format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150846,"byte_end":150867,"line_start":80,"line_end":80,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150872,"byte_end":150875,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ In the most cases `format` is not `None`. It should be only used for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150880,"byte_end":150952,"line_start":82,"line_end":82,"column_start":5,"column_end":77}},{"value":"/ creating dummy renderpasses, which are used as placeholder for compatible","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":150957,"byte_end":151034,"line_start":83,"line_end":83,"column_start":5,"column_end":82}},{"value":"/ renderpasses.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151039,"byte_end":151056,"line_start":84,"line_end":84,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":8078},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151124,"byte_end":151131,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"name":"samples","qualname":"::pass::Attachment::samples","value":"u8","parent":{"krate":0,"index":8076},"children":[],"decl_id":null,"docs":" Number of samples.\n","sig":null,"attributes":[{"value":"/ Number of samples.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151093,"byte_end":151115,"line_start":86,"line_end":86,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":8079},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151212,"byte_end":151215,"line_start":89,"line_end":89,"column_start":9,"column_end":12},"name":"ops","qualname":"::pass::Attachment::ops","value":"pass::AttachmentOps","parent":{"krate":0,"index":8076},"children":[],"decl_id":null,"docs":" Load and store operations of the attachment\n","sig":null,"attributes":[{"value":"/ Load and store operations of the attachment","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151156,"byte_end":151203,"line_start":88,"line_end":88,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":8080},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151383,"byte_end":151394,"line_start":92,"line_end":92,"column_start":9,"column_end":20},"name":"stencil_ops","qualname":"::pass::Attachment::stencil_ops","value":"pass::AttachmentOps","parent":{"krate":0,"index":8076},"children":[],"decl_id":null,"docs":" Load and store operations of the stencil aspect, if any\n","sig":null,"attributes":[{"value":"/ Load and store operations of the stencil aspect, if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151236,"byte_end":151295,"line_start":90,"line_end":90,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":8081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151478,"byte_end":151485,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"name":"layouts","qualname":"::pass::Attachment::layouts","value":"std::ops::Range<image::Layout>","parent":{"krate":0,"index":8076},"children":[],"decl_id":null,"docs":" Initial and final image layouts of the renderpass.\n","sig":null,"attributes":[{"value":"/ Initial and final image layouts of the renderpass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151415,"byte_end":151469,"line_start":93,"line_end":93,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151709,"byte_end":151719,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"has_clears","qualname":"<Attachment>::has_clears","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this attachment has some clear operations. This is useful\n when starting a render pass, since there has to be a clear value provided.\n","sig":null,"attributes":[{"value":"/ Returns true if this attachment has some clear operations. This is useful","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151537,"byte_end":151614,"line_start":98,"line_end":98,"column_start":5,"column_end":82}},{"value":"/ when starting a render pass, since there has to be a clear value provided.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151619,"byte_end":151697,"line_start":99,"line_end":99,"column_start":5,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":503},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151916,"byte_end":151928,"line_start":106,"line_end":106,"column_start":10,"column_end":22},"name":"AttachmentId","qualname":"::pass::AttachmentId","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Index of an attachment within a framebuffer/renderpass,\n","sig":null,"attributes":[{"value":"/ Index of an attachment within a framebuffer/renderpass,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151847,"byte_end":151906,"line_start":105,"line_end":105,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":504},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152014,"byte_end":152027,"line_start":108,"line_end":108,"column_start":10,"column_end":23},"name":"AttachmentRef","qualname":"::pass::AttachmentRef","value":"(AttachmentId, AttachmentLayout)","parent":null,"children":[],"decl_id":null,"docs":" Reference to an attachment by index and expected image layout.\n","sig":null,"attributes":[{"value":"/ Reference to an attachment by index and expected image layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151938,"byte_end":152004,"line_start":107,"line_end":107,"column_start":1,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":505},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152147,"byte_end":152164,"line_start":110,"line_end":110,"column_start":11,"column_end":28},"name":"ATTACHMENT_UNUSED","qualname":"::pass::ATTACHMENT_UNUSED","value":"AttachmentId","parent":null,"children":[],"decl_id":null,"docs":" An AttachmentId that can be used instead of providing an attachment.\n","sig":null,"attributes":[{"value":"/ An AttachmentId that can be used instead of providing an attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152064,"byte_end":152136,"line_start":109,"line_end":109,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":506},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152219,"byte_end":152228,"line_start":113,"line_end":113,"column_start":10,"column_end":19},"name":"SubpassId","qualname":"::pass::SubpassId","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Index of a subpass.\n","sig":null,"attributes":[{"value":"/ Index of a subpass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152186,"byte_end":152209,"line_start":112,"line_end":112,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":8093},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152569,"byte_end":152586,"line_start":121,"line_end":121,"column_start":12,"column_end":29},"name":"SubpassDependency","qualname":"::pass::SubpassDependency","value":"SubpassDependency { passes, stages, accesses, flags }","parent":null,"children":[{"krate":0,"index":8094},{"krate":0,"index":8095},{"krate":0,"index":8096},{"krate":0,"index":8097}],"decl_id":null,"docs":" Expresses a dependency between multiple subpasses. This is used\n both to describe a source or destination subpass; data either\n explicitly passes from this subpass to the next or from another\n subpass into this one.\n","sig":null,"attributes":[{"value":"/ Expresses a dependency between multiple subpasses. This is used","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152236,"byte_end":152303,"line_start":115,"line_end":115,"column_start":1,"column_end":68}},{"value":"/ both to describe a source or destination subpass; data either","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152304,"byte_end":152369,"line_start":116,"line_end":116,"column_start":1,"column_end":66}},{"value":"/ explicitly passes from this subpass to the next or from another","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152370,"byte_end":152437,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/ subpass into this one.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152438,"byte_end":152464,"line_start":118,"line_end":118,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":8094},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152781,"byte_end":152787,"line_start":126,"line_end":126,"column_start":9,"column_end":15},"name":"passes","qualname":"::pass::SubpassDependency::passes","value":"std::ops::Range<std::option::Option<u8>>","parent":{"krate":0,"index":8093},"children":[],"decl_id":null,"docs":" Other subpasses this one depends on.","sig":null,"attributes":[{"value":"/ Other subpasses this one depends on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152593,"byte_end":152633,"line_start":122,"line_end":122,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152638,"byte_end":152641,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ If one of the range sides is `None`, it refers to the external","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152646,"byte_end":152712,"line_start":124,"line_end":124,"column_start":5,"column_end":71}},{"value":"/ scope either before or after the whole render pass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152717,"byte_end":152772,"line_start":125,"line_end":125,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":8095},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152878,"byte_end":152884,"line_start":128,"line_end":128,"column_start":9,"column_end":15},"name":"stages","qualname":"::pass::SubpassDependency::stages","value":"std::ops::Range<pso::PipelineStage>","parent":{"krate":0,"index":8093},"children":[],"decl_id":null,"docs":" Other pipeline stages this subpass depends on.\n","sig":null,"attributes":[{"value":"/ Other pipeline stages this subpass depends on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152819,"byte_end":152869,"line_start":127,"line_end":127,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":8096},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152967,"byte_end":152975,"line_start":130,"line_end":130,"column_start":9,"column_end":17},"name":"accesses","qualname":"::pass::SubpassDependency::accesses","value":"std::ops::Range<image::Access>","parent":{"krate":0,"index":8093},"children":[],"decl_id":null,"docs":" Resource accesses this subpass depends on.\n","sig":null,"attributes":[{"value":"/ Resource accesses this subpass depends on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":152912,"byte_end":152958,"line_start":129,"line_end":129,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":8097},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153033,"byte_end":153038,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"name":"flags","qualname":"::pass::SubpassDependency::flags","value":"memory::Dependencies","parent":{"krate":0,"index":8093},"children":[],"decl_id":null,"docs":" Dependency flags.\n","sig":null,"attributes":[{"value":"/ Dependency flags.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153003,"byte_end":153024,"line_start":131,"line_end":131,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":8105},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153146,"byte_end":153157,"line_start":137,"line_end":137,"column_start":12,"column_end":23},"name":"SubpassDesc","qualname":"::pass::SubpassDesc","value":"SubpassDesc { colors, depth_stencil, inputs, resolves, preserves }","parent":null,"children":[{"krate":0,"index":8107},{"krate":0,"index":8108},{"krate":0,"index":8109},{"krate":0,"index":8110},{"krate":0,"index":8111}],"decl_id":null,"docs":" Description of a subpass for renderpass creation.\n","sig":null,"attributes":[{"value":"/ Description of a subpass for renderpass creation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153057,"byte_end":153110,"line_start":135,"line_end":135,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":8107},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153229,"byte_end":153235,"line_start":139,"line_end":139,"column_start":9,"column_end":15},"name":"colors","qualname":"::pass::SubpassDesc::colors","value":"&'a [(usize, image::Layout)]","parent":{"krate":0,"index":8105},"children":[],"decl_id":null,"docs":" Which attachments will be used as color buffers.\n","sig":null,"attributes":[{"value":"/ Which attachments will be used as color buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153168,"byte_end":153220,"line_start":138,"line_end":138,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":8108},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153331,"byte_end":153344,"line_start":141,"line_end":141,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::pass::SubpassDesc::depth_stencil","value":"std::option::Option<&'a (usize, image::Layout)>","parent":{"krate":0,"index":8105},"children":[],"decl_id":null,"docs":" Which attachments will be used as depth/stencil buffers.\n","sig":null,"attributes":[{"value":"/ Which attachments will be used as depth/stencil buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153262,"byte_end":153322,"line_start":140,"line_end":140,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":8109},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153442,"byte_end":153448,"line_start":143,"line_end":143,"column_start":9,"column_end":15},"name":"inputs","qualname":"::pass::SubpassDesc::inputs","value":"&'a [(usize, image::Layout)]","parent":{"krate":0,"index":8105},"children":[],"decl_id":null,"docs":" Which attachments will be used as input attachments.\n","sig":null,"attributes":[{"value":"/ Which attachments will be used as input attachments.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153377,"byte_end":153433,"line_start":142,"line_end":142,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":8110},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153818,"byte_end":153826,"line_start":149,"line_end":149,"column_start":9,"column_end":17},"name":"resolves","qualname":"::pass::SubpassDesc::resolves","value":"&'a [(usize, image::Layout)]","parent":{"krate":0,"index":8105},"children":[],"decl_id":null,"docs":" Which attachments will be used as resolve destinations.","sig":null,"attributes":[{"value":"/ Which attachments will be used as resolve destinations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153475,"byte_end":153534,"line_start":144,"line_end":144,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153539,"byte_end":153542,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ The number of resolve attachments may be zero or equal to the number of color attachments.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153547,"byte_end":153641,"line_start":146,"line_end":146,"column_start":5,"column_end":99}},{"value":"/ At the end of a subpass the color attachment will be resolved to the corresponding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153646,"byte_end":153732,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ resolve attachment. The resolve attachment must not be multisampled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153737,"byte_end":153809,"line_start":148,"line_end":148,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":8111},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153978,"byte_end":153987,"line_start":152,"line_end":152,"column_start":9,"column_end":18},"name":"preserves","qualname":"::pass::SubpassDesc::preserves","value":"&'a [usize]","parent":{"krate":0,"index":8105},"children":[],"decl_id":null,"docs":" Attachments that are not used by the subpass but must be preserved to be\n passed on to subsequent passes.\n","sig":null,"attributes":[{"value":"/ Attachments that are not used by the subpass but must be preserved to be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153853,"byte_end":153929,"line_start":150,"line_end":150,"column_start":5,"column_end":81}},{"value":"/ passed on to subsequent passes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":153934,"byte_end":153969,"line_start":151,"line_end":151,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":8118},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154073,"byte_end":154080,"line_start":157,"line_end":157,"column_start":12,"column_end":19},"name":"Subpass","qualname":"::pass::Subpass","value":"Subpass { index, main_pass }","parent":null,"children":[{"krate":0,"index":8121},{"krate":0,"index":8122}],"decl_id":null,"docs":" A sub-pass borrow of a pass.\n","sig":null,"attributes":[{"value":"/ A sub-pass borrow of a pass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154012,"byte_end":154044,"line_start":155,"line_end":155,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":8121},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154136,"byte_end":154141,"line_start":159,"line_end":159,"column_start":9,"column_end":14},"name":"index","qualname":"::pass::Subpass::index","value":"u8","parent":{"krate":0,"index":8118},"children":[],"decl_id":null,"docs":" Index of the subpass\n","sig":null,"attributes":[{"value":"/ Index of the subpass","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154103,"byte_end":154127,"line_start":158,"line_end":158,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":8122},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154188,"byte_end":154197,"line_start":161,"line_end":161,"column_start":9,"column_end":18},"name":"main_pass","qualname":"::pass::Subpass::main_pass","value":"&'a <B as Backend>::RenderPass","parent":{"krate":0,"index":8118},"children":[],"decl_id":null,"docs":" Main pass borrow.\n","sig":null,"attributes":[{"value":"/ Main pass borrow.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154158,"byte_end":154179,"line_start":160,"line_end":160,"column_start":5,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":521},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::pool","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":8127},{"krate":0,"index":8149},{"krate":0,"index":8145},{"krate":0,"index":8146},{"krate":0,"index":8142},{"krate":0,"index":8143},{"krate":0,"index":8140},{"krate":0,"index":8134},{"krate":0,"index":8132},{"krate":0,"index":8129},{"krate":0,"index":8150},{"krate":0,"index":8156},{"krate":0,"index":8158},{"krate":0,"index":8160},{"krate":0,"index":8162},{"krate":0,"index":8164},{"krate":0,"index":8172},{"krate":0,"index":8175},{"krate":0,"index":8177},{"krate":0,"index":8180},{"krate":0,"index":8182},{"krate":0,"index":8185},{"krate":0,"index":8187},{"krate":0,"index":8190},{"krate":0,"index":8192},{"krate":0,"index":8195},{"krate":0,"index":8198},{"krate":0,"index":528}],"decl_id":null,"docs":" Command pools\n","sig":null,"attributes":[{"value":"! Command pools","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":154698,"byte_end":154715,"line_start":1,"line_end":1,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":8127},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":154942,"byte_end":154964,"line_start":12,"line_end":12,"column_start":16,"column_end":38},"name":"CommandPoolCreateFlags","qualname":"::pool::CommandPoolCreateFlags","value":"CommandPoolCreateFlags {  }","parent":null,"children":[{"krate":0,"index":8128}],"decl_id":null,"docs":" Command pool creation flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8165},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155094,"byte_end":155103,"line_start":15,"line_end":15,"column_start":15,"column_end":24},"name":"TRANSIENT","qualname":"::pool::CommandPoolCreateFlags::TRANSIENT","value":"CommandPoolCreateFlags","parent":{"krate":0,"index":8164},"children":[],"decl_id":null,"docs":" Indicates short-lived command buffers.\n Memory optimization hint for implementations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8166},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155185,"byte_end":155201,"line_start":17,"line_end":17,"column_start":15,"column_end":31},"name":"RESET_INDIVIDUAL","qualname":"::pool::CommandPoolCreateFlags::RESET_INDIVIDUAL","value":"CommandPoolCreateFlags","parent":{"krate":0,"index":8164},"children":[],"decl_id":null,"docs":" Allow command buffers to be reset individually.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":528},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155311,"byte_end":155322,"line_start":22,"line_end":22,"column_start":11,"column_end":22},"name":"CommandPool","qualname":"::pool::CommandPool","value":"CommandPool<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":535}],"decl_id":null,"docs":" The allocated command buffers are associated with the creating command queue.\n","sig":null,"attributes":[{"value":"/ The allocated command buffers are associated with the creating command queue.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155219,"byte_end":155300,"line_start":21,"line_end":21,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155579,"byte_end":155584,"line_start":26,"line_end":26,"column_start":15,"column_end":20},"name":"reset","qualname":"::pool::CommandPool::reset","value":"fn (&mut self, release_resources: bool) -> ()","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Reset the command pool and the corresponding command buffers.","sig":null,"attributes":[{"value":"/ Reset the command pool and the corresponding command buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155373,"byte_end":155438,"line_start":23,"line_end":23,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155443,"byte_end":155446,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ # Synchronization: You may _not_ free the pool if a command buffer is still in use (pool memory still in use)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155451,"byte_end":155564,"line_start":25,"line_end":25,"column_start":5,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155694,"byte_end":155706,"line_start":29,"line_end":29,"column_start":15,"column_end":27},"name":"allocate_one","qualname":"::pool::CommandPool::allocate_one","value":"fn (&mut self, level: Level) -> B::CommandBuffer","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Allocate a single command buffers from the pool.\n","sig":null,"attributes":[{"value":"/ Allocate a single command buffers from the pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155627,"byte_end":155679,"line_start":28,"line_end":28,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155941,"byte_end":155949,"line_start":36,"line_end":36,"column_start":15,"column_end":23},"name":"allocate","qualname":"::pool::CommandPool::allocate","value":"fn <E> (&mut self, num: usize, level: Level, list: &mut E) -> ()","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Allocate new command buffers from the pool.\n","sig":null,"attributes":[{"value":"/ Allocate new command buffers from the pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155879,"byte_end":155926,"line_start":35,"line_end":35,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":156210,"byte_end":156214,"line_start":44,"line_end":44,"column_start":15,"column_end":19},"name":"free","qualname":"::pool::CommandPool::free","value":"fn <I> (&mut self, buffers: I) -> ()","parent":{"krate":0,"index":528},"children":[],"decl_id":null,"docs":" Free command buffers which are allocated from this pool.\n","sig":null,"attributes":[{"value":"/ Free command buffers which are allocated from this pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":156135,"byte_end":156195,"line_start":43,"line_end":43,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":537},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pso","qualname":"::pso","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":542},{"krate":0,"index":546},{"krate":0,"index":557},{"krate":0,"index":583},{"krate":0,"index":614},{"krate":0,"index":628},{"krate":0,"index":662},{"krate":0,"index":683},{"krate":0,"index":9656},{"krate":0,"index":9674},{"krate":0,"index":9672},{"krate":0,"index":9668},{"krate":0,"index":9669},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":9676},{"krate":0,"index":9698},{"krate":0,"index":9694},{"krate":0,"index":9695},{"krate":0,"index":9691},{"krate":0,"index":9692},{"krate":0,"index":9689},{"krate":0,"index":9683},{"krate":0,"index":9681},{"krate":0,"index":9678},{"krate":0,"index":9699},{"krate":0,"index":9718},{"krate":0,"index":9720},{"krate":0,"index":9722},{"krate":0,"index":9724},{"krate":0,"index":9726},{"krate":0,"index":9747},{"krate":0,"index":9750},{"krate":0,"index":9752},{"krate":0,"index":9755},{"krate":0,"index":9757},{"krate":0,"index":9760},{"krate":0,"index":9762},{"krate":0,"index":9765},{"krate":0,"index":9767},{"krate":0,"index":9770},{"krate":0,"index":9773},{"krate":0,"index":9832},{"krate":0,"index":9854},{"krate":0,"index":9850},{"krate":0,"index":9851},{"krate":0,"index":9847},{"krate":0,"index":9848},{"krate":0,"index":9845},{"krate":0,"index":9839},{"krate":0,"index":9837},{"krate":0,"index":9834},{"krate":0,"index":9855},{"krate":0,"index":9867},{"krate":0,"index":9869},{"krate":0,"index":9871},{"krate":0,"index":9873},{"krate":0,"index":9875},{"krate":0,"index":9889},{"krate":0,"index":9892},{"krate":0,"index":9894},{"krate":0,"index":9897},{"krate":0,"index":9899},{"krate":0,"index":9902},{"krate":0,"index":9904},{"krate":0,"index":9907},{"krate":0,"index":9909},{"krate":0,"index":9912},{"krate":0,"index":9915},{"krate":0,"index":9953},{"krate":0,"index":9978},{"krate":0,"index":9977},{"krate":0,"index":9975},{"krate":0,"index":9972},{"krate":0,"index":9973},{"krate":0,"index":9969},{"krate":0,"index":9966},{"krate":0,"index":9967},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":9980},{"krate":0,"index":9986},{"krate":0,"index":700},{"krate":0,"index":9990},{"krate":0,"index":10012},{"krate":0,"index":10008},{"krate":0,"index":10009},{"krate":0,"index":10005},{"krate":0,"index":10006},{"krate":0,"index":10003},{"krate":0,"index":9997},{"krate":0,"index":9995},{"krate":0,"index":9992},{"krate":0,"index":10013},{"krate":0,"index":10019},{"krate":0,"index":10021},{"krate":0,"index":10023},{"krate":0,"index":10025},{"krate":0,"index":10027},{"krate":0,"index":10035},{"krate":0,"index":10038},{"krate":0,"index":10040},{"krate":0,"index":10043},{"krate":0,"index":10045},{"krate":0,"index":10048},{"krate":0,"index":10050},{"krate":0,"index":10053},{"krate":0,"index":10055},{"krate":0,"index":10058},{"krate":0,"index":10061},{"krate":0,"index":10081},{"krate":0,"index":10092},{"krate":0,"index":10096},{"krate":0,"index":10133},{"krate":0,"index":10131},{"krate":0,"index":10128},{"krate":0,"index":10123},{"krate":0,"index":10125},{"krate":0,"index":10119},{"krate":0,"index":10116},{"krate":0,"index":10110},{"krate":0,"index":10112},{"krate":0,"index":10103},{"krate":0,"index":704},{"krate":0,"index":709}],"decl_id":null,"docs":" Raw Pipeline State Objects","sig":null,"attributes":[{"value":"! Raw Pipeline State Objects","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156304,"byte_end":156334,"line_start":1,"line_end":1,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156335,"byte_end":156338,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains items used to create and manage Pipelines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156339,"byte_end":156406,"line_start":3,"line_end":3,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":8218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166449,"byte_end":166468,"line_start":10,"line_end":10,"column_start":12,"column_end":31},"name":"ComputePipelineDesc","qualname":"::pso::compute::ComputePipelineDesc","value":"ComputePipelineDesc { shader, layout, flags, parent }","parent":null,"children":[{"krate":0,"index":8221},{"krate":0,"index":8222},{"krate":0,"index":8223},{"krate":0,"index":8224}],"decl_id":null,"docs":" A description of the data needed to construct a compute pipeline.\n","sig":null,"attributes":[{"value":"/ A description of the data needed to construct a compute pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166351,"byte_end":166420,"line_start":8,"line_end":8,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":8221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166557,"byte_end":166563,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"name":"shader","qualname":"::pso::compute::ComputePipelineDesc::shader","value":"pso::EntryPoint<'a, B>","parent":{"krate":0,"index":8218},"children":[],"decl_id":null,"docs":" The shader entry point that performs the computation.\n","sig":null,"attributes":[{"value":"/ The shader entry point that performs the computation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166491,"byte_end":166548,"line_start":11,"line_end":11,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":8222},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166617,"byte_end":166623,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"name":"layout","qualname":"::pso::compute::ComputePipelineDesc::layout","value":"&'a <B as Backend>::PipelineLayout","parent":{"krate":0,"index":8218},"children":[],"decl_id":null,"docs":" Pipeline layout.\n","sig":null,"attributes":[{"value":"/ Pipeline layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166588,"byte_end":166608,"line_start":13,"line_end":13,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":8223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166711,"byte_end":166716,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"flags","qualname":"::pso::compute::ComputePipelineDesc::flags","value":"pso::PipelineCreationFlags","parent":{"krate":0,"index":8218},"children":[],"decl_id":null,"docs":" Any flags necessary for the pipeline creation.\n","sig":null,"attributes":[{"value":"/ Any flags necessary for the pipeline creation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166652,"byte_end":166702,"line_start":15,"line_end":15,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":8224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166798,"byte_end":166804,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"name":"parent","qualname":"::pso::compute::ComputePipelineDesc::parent","value":"pso::BasePipeline<'a, <B as Backend>::ComputePipeline>","parent":{"krate":0,"index":8218},"children":[],"decl_id":null,"docs":" The parent pipeline to this one, if any.\n","sig":null,"attributes":[{"value":"/ The parent pipeline to this one, if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166745,"byte_end":166789,"line_start":17,"line_end":17,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166951,"byte_end":166954,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<ComputePipelineDesc>::new","value":"fn (shader: EntryPoint<'a, B>, layout: &'a B::PipelineLayout) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty PSO descriptor.\n","sig":null,"attributes":[{"value":"/ Create a new empty PSO descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166901,"byte_end":166939,"line_start":22,"line_end":22,"column_start":5,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":568},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168509,"byte_end":168527,"line_start":24,"line_end":24,"column_start":10,"column_end":28},"name":"DescriptorSetIndex","qualname":"::pso::descriptor::DescriptorSetIndex","value":"u16","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168496,"byte_end":168499,"line_start":23,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":569},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168548,"byte_end":168565,"line_start":26,"line_end":26,"column_start":10,"column_end":27},"name":"DescriptorBinding","qualname":"::pso::descriptor::DescriptorBinding","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168535,"byte_end":168538,"line_start":25,"line_end":25,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":570},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168586,"byte_end":168606,"line_start":28,"line_end":28,"column_start":10,"column_end":30},"name":"DescriptorArrayIndex","qualname":"::pso::descriptor::DescriptorArrayIndex","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168573,"byte_end":168576,"line_start":27,"line_end":27,"column_start":1,"column_end":4}}]},{"kind":"StructVariant","id":{"krate":0,"index":8230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168881,"byte_end":168888,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"name":"Storage","qualname":"::pso::descriptor::BufferDescriptorType::Storage","value":"BufferDescriptorType::Storage { read_only }","parent":{"krate":0,"index":8229},"children":[],"decl_id":null,"docs":" Storage buffers allow load, store, and atomic operations.\n","sig":null,"attributes":[{"value":"/ Storage buffers allow load, store, and atomic operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168815,"byte_end":168876,"line_start":34,"line_end":34,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169073,"byte_end":169080,"line_start":40,"line_end":40,"column_start":5,"column_end":12},"name":"Uniform","qualname":"::pso::descriptor::BufferDescriptorType::Uniform","value":"BufferDescriptorType::Uniform","parent":{"krate":0,"index":8229},"children":[],"decl_id":null,"docs":" Uniform buffers provide constant data to be accessed in a shader.\n","sig":null,"attributes":[{"value":"/ Uniform buffers provide constant data to be accessed in a shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168999,"byte_end":169068,"line_start":39,"line_end":39,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":8229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168788,"byte_end":168808,"line_start":33,"line_end":33,"column_start":10,"column_end":30},"name":"BufferDescriptorType","qualname":"::pso::descriptor::BufferDescriptorType","value":"BufferDescriptorType::{Storage, Uniform}","parent":null,"children":[{"krate":0,"index":8230},{"krate":0,"index":8232}],"decl_id":null,"docs":" Specific type of a buffer.\n","sig":null,"attributes":[{"value":"/ Specific type of a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":168617,"byte_end":168647,"line_start":30,"line_end":30,"column_start":1,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":8258},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169348,"byte_end":169358,"line_start":48,"line_end":48,"column_start":5,"column_end":15},"name":"Structured","qualname":"::pso::descriptor::BufferDescriptorFormat::Structured","value":"BufferDescriptorFormat::Structured { dynamic_offset }","parent":{"krate":0,"index":8257},"children":[],"decl_id":null,"docs":" The buffer is interpreted as a structure defined in a shader.\n","sig":null,"attributes":[{"value":"/ The buffer is interpreted as a structure defined in a shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169278,"byte_end":169343,"line_start":47,"line_end":47,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8260},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169688,"byte_end":169693,"line_start":55,"line_end":55,"column_start":5,"column_end":10},"name":"Texel","qualname":"::pso::descriptor::BufferDescriptorFormat::Texel","value":"BufferDescriptorFormat::Texel","parent":{"krate":0,"index":8257},"children":[],"decl_id":null,"docs":" The buffer is interpreted as a 1-D array of texels, which undergo format\n conversion when loaded in a shader.\n","sig":null,"attributes":[{"value":"/ The buffer is interpreted as a 1-D array of texels, which undergo format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169563,"byte_end":169639,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ conversion when loaded in a shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169644,"byte_end":169683,"line_start":54,"line_end":54,"column_start":5,"column_end":44}}]},{"kind":"Enum","id":{"krate":0,"index":8257},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169249,"byte_end":169271,"line_start":46,"line_end":46,"column_start":10,"column_end":32},"name":"BufferDescriptorFormat","qualname":"::pso::descriptor::BufferDescriptorFormat","value":"BufferDescriptorFormat::{Structured, Texel}","parent":null,"children":[{"krate":0,"index":8258},{"krate":0,"index":8260}],"decl_id":null,"docs":" Format of a buffer.\n","sig":null,"attributes":[{"value":"/ Format of a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169085,"byte_end":169108,"line_start":43,"line_end":43,"column_start":1,"column_end":24}}]},{"kind":"StructVariant","id":{"krate":0,"index":8286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169958,"byte_end":169965,"line_start":63,"line_end":63,"column_start":5,"column_end":12},"name":"Sampled","qualname":"::pso::descriptor::ImageDescriptorType::Sampled","value":"ImageDescriptorType::Sampled { with_sampler }","parent":{"krate":0,"index":8285},"children":[],"decl_id":null,"docs":" A sampled image allows sampling operations.\n","sig":null,"attributes":[{"value":"/ A sampled image allows sampling operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169906,"byte_end":169953,"line_start":62,"line_end":62,"column_start":5,"column_end":52}}]},{"kind":"StructVariant","id":{"krate":0,"index":8288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170200,"byte_end":170207,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Storage","qualname":"::pso::descriptor::ImageDescriptorType::Storage","value":"ImageDescriptorType::Storage { read_only }","parent":{"krate":0,"index":8285},"children":[],"decl_id":null,"docs":" A storage image allows load, store and atomic operations.\n","sig":null,"attributes":[{"value":"/ A storage image allows load, store and atomic operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170134,"byte_end":170195,"line_start":68,"line_end":68,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":8285},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169880,"byte_end":169899,"line_start":61,"line_end":61,"column_start":10,"column_end":29},"name":"ImageDescriptorType","qualname":"::pso::descriptor::ImageDescriptorType","value":"ImageDescriptorType::{Sampled, Storage}","parent":null,"children":[{"krate":0,"index":8286},{"krate":0,"index":8288}],"decl_id":null,"docs":" Specific type of an image descriptor.\n","sig":null,"attributes":[{"value":"/ Specific type of an image descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":169698,"byte_end":169739,"line_start":58,"line_end":58,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8314},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170553,"byte_end":170560,"line_start":80,"line_end":80,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::pso::descriptor::DescriptorType::Sampler","value":"DescriptorType::Sampler","parent":{"krate":0,"index":8313},"children":[],"decl_id":null,"docs":" A descriptor associated with sampler.\n","sig":null,"attributes":[{"value":"/ A descriptor associated with sampler.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170507,"byte_end":170548,"line_start":79,"line_end":79,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":8316},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170613,"byte_end":170618,"line_start":82,"line_end":82,"column_start":5,"column_end":10},"name":"Image","qualname":"::pso::descriptor::DescriptorType::Image","value":"DescriptorType::Image { ty }","parent":{"krate":0,"index":8313},"children":[],"decl_id":null,"docs":" A descriptor associated with an image.\n","sig":null,"attributes":[{"value":"/ A descriptor associated with an image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170566,"byte_end":170608,"line_start":81,"line_end":81,"column_start":5,"column_end":47}}]},{"kind":"StructVariant","id":{"krate":0,"index":8318},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170768,"byte_end":170774,"line_start":87,"line_end":87,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::pso::descriptor::DescriptorType::Buffer","value":"DescriptorType::Buffer { ty, format }","parent":{"krate":0,"index":8313},"children":[],"decl_id":null,"docs":" A descriptor associated with a buffer.\n","sig":null,"attributes":[{"value":"/ A descriptor associated with a buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170721,"byte_end":170763,"line_start":86,"line_end":86,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8321},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171018,"byte_end":171033,"line_start":94,"line_end":94,"column_start":5,"column_end":20},"name":"InputAttachment","qualname":"::pso::descriptor::DescriptorType::InputAttachment","value":"DescriptorType::InputAttachment","parent":{"krate":0,"index":8313},"children":[],"decl_id":null,"docs":" A descriptor associated with an input attachment.\n","sig":null,"attributes":[{"value":"/ A descriptor associated with an input attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170960,"byte_end":171013,"line_start":93,"line_end":93,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":8313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170486,"byte_end":170500,"line_start":78,"line_end":78,"column_start":10,"column_end":24},"name":"DescriptorType","qualname":"::pso::descriptor::DescriptorType","value":"DescriptorType::{Sampler, Image, Buffer, InputAttachment}","parent":null,"children":[{"krate":0,"index":8314},{"krate":0,"index":8316},{"krate":0,"index":8318},{"krate":0,"index":8321}],"decl_id":null,"docs":" The type of a descriptor.\n","sig":null,"attributes":[{"value":"/ The type of a descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":170316,"byte_end":170345,"line_start":75,"line_end":75,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":8350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171778,"byte_end":171804,"line_start":111,"line_end":111,"column_start":12,"column_end":38},"name":"DescriptorSetLayoutBinding","qualname":"::pso::descriptor::DescriptorSetLayoutBinding","value":"DescriptorSetLayoutBinding { binding, ty, count, stage_flags, immutable_samplers }","parent":null,"children":[{"krate":0,"index":8351},{"krate":0,"index":8352},{"krate":0,"index":8353},{"krate":0,"index":8354},{"krate":0,"index":8355}],"decl_id":null,"docs":" Information about the contents of and in which stages descriptors may be bound to a descriptor\n set at a certain binding point. Multiple `DescriptorSetLayoutBinding`s are assembled into\n a `DescriptorSetLayout`, which is then allocated into a `DescriptorSet` using a\n [`DescriptorPool`].","sig":null,"attributes":[{"value":"/ Information about the contents of and in which stages descriptors may be bound to a descriptor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171038,"byte_end":171136,"line_start":97,"line_end":97,"column_start":1,"column_end":99}},{"value":"/ set at a certain binding point. Multiple `DescriptorSetLayoutBinding`s are assembled into","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171137,"byte_end":171230,"line_start":98,"line_end":98,"column_start":1,"column_end":94}},{"value":"/ a `DescriptorSetLayout`, which is then allocated into a `DescriptorSet` using a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171231,"byte_end":171314,"line_start":99,"line_end":99,"column_start":1,"column_end":84}},{"value":"/ [`DescriptorPool`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171315,"byte_end":171338,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171339,"byte_end":171342,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ A descriptor set consists of multiple binding points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171343,"byte_end":171400,"line_start":102,"line_end":102,"column_start":1,"column_end":58}},{"value":"/ Each binding point contains one or multiple descriptors of a certain type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171401,"byte_end":171479,"line_start":103,"line_end":103,"column_start":1,"column_end":79}},{"value":"/ The binding point is only valid for the pipelines stages specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171480,"byte_end":171551,"line_start":104,"line_end":104,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171552,"byte_end":171555,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ The binding _must_ match with the corresponding shader interface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171556,"byte_end":171625,"line_start":106,"line_end":106,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171626,"byte_end":171629,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`DescriptorPool`]: trait.DescriptorPool.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171630,"byte_end":171679,"line_start":108,"line_end":108,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8351},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171850,"byte_end":171857,"line_start":113,"line_end":113,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::binding","value":"u32","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":" Descriptor bindings range.\n","sig":null,"attributes":[{"value":"/ Descriptor bindings range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171811,"byte_end":171841,"line_start":112,"line_end":112,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":8352},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171925,"byte_end":171927,"line_start":115,"line_end":115,"column_start":9,"column_end":11},"name":"ty","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::ty","value":"pso::descriptor::DescriptorType","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":" Type of the bound descriptors.\n","sig":null,"attributes":[{"value":"/ Type of the bound descriptors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171882,"byte_end":171916,"line_start":114,"line_end":114,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":8353},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172123,"byte_end":172128,"line_start":120,"line_end":120,"column_start":9,"column_end":14},"name":"count","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::count","value":"usize","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":" Number of descriptors in the array.","sig":null,"attributes":[{"value":"/ Number of descriptors in the array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171949,"byte_end":171988,"line_start":116,"line_end":116,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":171993,"byte_end":171996,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ *Note*: If count is zero, the binding point is reserved","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172001,"byte_end":172060,"line_start":118,"line_end":118,"column_start":5,"column_end":64}},{"value":"/ and can't be accessed from any shader stages.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172065,"byte_end":172114,"line_start":119,"line_end":119,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":8354},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172189,"byte_end":172200,"line_start":122,"line_end":122,"column_start":9,"column_end":20},"name":"stage_flags","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::stage_flags","value":"pso::ShaderStageFlags","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":" Valid shader stages.\n","sig":null,"attributes":[{"value":"/ Valid shader stages.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172156,"byte_end":172180,"line_start":121,"line_end":121,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":8355},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172283,"byte_end":172301,"line_start":124,"line_end":124,"column_start":9,"column_end":27},"name":"immutable_samplers","qualname":"::pso::descriptor::DescriptorSetLayoutBinding::immutable_samplers","value":"bool","parent":{"krate":0,"index":8350},"children":[],"decl_id":null,"docs":" Use the associated list of immutable samplers.\n","sig":null,"attributes":[{"value":"/ Use the associated list of immutable samplers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172224,"byte_end":172274,"line_start":123,"line_end":123,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":8360},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172459,"byte_end":172478,"line_start":130,"line_end":130,"column_start":12,"column_end":31},"name":"DescriptorRangeDesc","qualname":"::pso::descriptor::DescriptorRangeDesc","value":"DescriptorRangeDesc { ty, count }","parent":null,"children":[{"krate":0,"index":8361},{"krate":0,"index":8362}],"decl_id":null,"docs":" Set of descriptors of a specific type.\n","sig":null,"attributes":[{"value":"/ Set of descriptors of a specific type.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172312,"byte_end":172354,"line_start":127,"line_end":127,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":8361},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172529,"byte_end":172531,"line_start":132,"line_end":132,"column_start":9,"column_end":11},"name":"ty","qualname":"::pso::descriptor::DescriptorRangeDesc::ty","value":"pso::descriptor::DescriptorType","parent":{"krate":0,"index":8360},"children":[],"decl_id":null,"docs":" Type of the stored descriptors.\n","sig":null,"attributes":[{"value":"/ Type of the stored descriptors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172485,"byte_end":172520,"line_start":131,"line_end":131,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":8362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172582,"byte_end":172587,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"name":"count","qualname":"::pso::descriptor::DescriptorRangeDesc::count","value":"usize","parent":{"krate":0,"index":8360},"children":[],"decl_id":null,"docs":" Amount of space.\n","sig":null,"attributes":[{"value":"/ Amount of space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172553,"byte_end":172573,"line_start":133,"line_end":133,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172841,"byte_end":172845,"line_start":142,"line_end":142,"column_start":5,"column_end":9},"name":"Host","qualname":"::pso::descriptor::AllocationError::Host","value":"AllocationError::Host","parent":{"krate":0,"index":8368},"children":[],"decl_id":null,"docs":" Memory allocation on the host side failed.\n This could be caused by a lack of memory or pool fragmentation.\n","sig":null,"attributes":[{"value":"/ Memory allocation on the host side failed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172718,"byte_end":172764,"line_start":140,"line_end":140,"column_start":5,"column_end":51}},{"value":"/ This could be caused by a lack of memory or pool fragmentation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172769,"byte_end":172836,"line_start":141,"line_end":141,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172974,"byte_end":172980,"line_start":145,"line_end":145,"column_start":5,"column_end":11},"name":"Device","qualname":"::pso::descriptor::AllocationError::Device","value":"AllocationError::Device","parent":{"krate":0,"index":8368},"children":[],"decl_id":null,"docs":" Memory allocation on the host side failed.\n This could be caused by a lack of memory or pool fragmentation.\n","sig":null,"attributes":[{"value":"/ Memory allocation on the host side failed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172851,"byte_end":172897,"line_start":143,"line_end":143,"column_start":5,"column_end":51}},{"value":"/ This could be caused by a lack of memory or pool fragmentation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172902,"byte_end":172969,"line_start":144,"line_end":144,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8373},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173127,"byte_end":173142,"line_start":148,"line_end":148,"column_start":5,"column_end":20},"name":"OutOfPoolMemory","qualname":"::pso::descriptor::AllocationError::OutOfPoolMemory","value":"AllocationError::OutOfPoolMemory","parent":{"krate":0,"index":8368},"children":[],"decl_id":null,"docs":" Memory allocation failed as there is not enough in the pool.\n This could be caused by too many descriptor sets being created.\n","sig":null,"attributes":[{"value":"/ Memory allocation failed as there is not enough in the pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172986,"byte_end":173050,"line_start":146,"line_end":146,"column_start":5,"column_end":69}},{"value":"/ This could be caused by too many descriptor sets being created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173055,"byte_end":173122,"line_start":147,"line_end":147,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8375},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173208,"byte_end":173222,"line_start":150,"line_end":150,"column_start":5,"column_end":19},"name":"FragmentedPool","qualname":"::pso::descriptor::AllocationError::FragmentedPool","value":"AllocationError::FragmentedPool","parent":{"krate":0,"index":8368},"children":[],"decl_id":null,"docs":" Memory allocation failed due to pool fragmentation.\n","sig":null,"attributes":[{"value":"/ Memory allocation failed due to pool fragmentation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173148,"byte_end":173203,"line_start":149,"line_end":149,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8377},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173314,"byte_end":173332,"line_start":152,"line_end":152,"column_start":5,"column_end":23},"name":"IncompatibleLayout","qualname":"::pso::descriptor::AllocationError::IncompatibleLayout","value":"AllocationError::IncompatibleLayout","parent":{"krate":0,"index":8368},"children":[],"decl_id":null,"docs":" Descriptor set allocation failed as the layout is incompatible with the pool.\n","sig":null,"attributes":[{"value":"/ Descriptor set allocation failed as the layout is incompatible with the pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173228,"byte_end":173309,"line_start":151,"line_end":151,"column_start":5,"column_end":86}}]},{"kind":"Enum","id":{"krate":0,"index":8368},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172696,"byte_end":172711,"line_start":139,"line_end":139,"column_start":10,"column_end":25},"name":"AllocationError","qualname":"::pso::descriptor::AllocationError","value":"AllocationError::{Host, Device, OutOfPoolMemory, FragmentedPool, IncompatibleLayout}","parent":null,"children":[{"krate":0,"index":8369},{"krate":0,"index":8371},{"krate":0,"index":8373},{"krate":0,"index":8375},{"krate":0,"index":8377}],"decl_id":null,"docs":" An error allocating descriptor sets from a pool.\n","sig":null,"attributes":[{"value":"/ An error allocating descriptor sets from a pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":172599,"byte_end":172651,"line_start":137,"line_end":137,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":574},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174404,"byte_end":174418,"line_start":182,"line_end":182,"column_start":11,"column_end":25},"name":"DescriptorPool","qualname":"::pso::descriptor::DescriptorPool","value":"DescriptorPool<B: Backend>: Send + Sync + fmt::Debug","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":582}],"decl_id":null,"docs":" A descriptor pool is a collection of memory from which descriptor sets are allocated.\n","sig":null,"attributes":[{"value":"/ A descriptor pool is a collection of memory from which descriptor sets are allocated.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174304,"byte_end":174393,"line_start":181,"line_end":181,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175059,"byte_end":175071,"line_start":194,"line_end":194,"column_start":15,"column_end":27},"name":"allocate_set","qualname":"::pso::descriptor::DescriptorPool::allocate_set","value":"fn (&mut self, layout: &B::DescriptorSetLayout) -> Result<B::DescriptorSet, AllocationError>","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Allocate a descriptor set from the pool.","sig":null,"attributes":[{"value":"/ Allocate a descriptor set from the pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174463,"byte_end":174507,"line_start":183,"line_end":183,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174512,"byte_end":174515,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ The descriptor set will be allocated from the pool according to the corresponding set layout. However,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174520,"byte_end":174626,"line_start":185,"line_end":185,"column_start":5,"column_end":111}},{"value":"/ specific descriptors must still be written to the set before use using a [`DescriptorSetWrite`] or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174631,"byte_end":174733,"line_start":186,"line_end":186,"column_start":5,"column_end":107}},{"value":"/ [`DescriptorSetCopy`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174738,"byte_end":174764,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174769,"byte_end":174772,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Descriptors will become invalid once the pool is reset. Usage of invalidated descriptor sets results","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174777,"byte_end":174881,"line_start":189,"line_end":189,"column_start":5,"column_end":109}},{"value":"/ in undefined behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174886,"byte_end":174912,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174917,"byte_end":174920,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ [`DescriptorSetWrite`]: struct.DescriptorSetWrite.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174925,"byte_end":174983,"line_start":192,"line_end":192,"column_start":5,"column_end":63}},{"value":"/ [`DescriptorSetCopy`]: struct.DescriptorSetCopy.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174988,"byte_end":175044,"line_start":193,"line_end":193,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176033,"byte_end":176041,"line_start":215,"line_end":215,"column_start":15,"column_end":23},"name":"allocate","qualname":"::pso::descriptor::DescriptorPool::allocate","value":"fn <I, E> (&mut self, layouts: I, list: &mut E) -> Result<(), AllocationError>","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Allocate multiple descriptor sets from the pool.","sig":null,"attributes":[{"value":"/ Allocate multiple descriptor sets from the pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175326,"byte_end":175378,"line_start":203,"line_end":203,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175383,"byte_end":175386,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The descriptor set will be allocated from the pool according to the corresponding set layout. However,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175391,"byte_end":175497,"line_start":205,"line_end":205,"column_start":5,"column_end":111}},{"value":"/ specific descriptors must still be written to the set before use using a [`DescriptorSetWrite`] or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175502,"byte_end":175604,"line_start":206,"line_end":206,"column_start":5,"column_end":107}},{"value":"/ [`DescriptorSetCopy`].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175609,"byte_end":175635,"line_start":207,"line_end":207,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175640,"byte_end":175643,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Each descriptor set will be allocated from the pool according to the corresponding set layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175648,"byte_end":175746,"line_start":209,"line_end":209,"column_start":5,"column_end":103}},{"value":"/ Descriptors will become invalid once the pool is reset. Usage of invalidated descriptor sets results","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175751,"byte_end":175855,"line_start":210,"line_end":210,"column_start":5,"column_end":109}},{"value":"/ in undefined behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175860,"byte_end":175886,"line_start":211,"line_end":211,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175891,"byte_end":175894,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ [`DescriptorSetWrite`]: struct.DescriptorSetWrite.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175899,"byte_end":175957,"line_start":213,"line_end":213,"column_start":5,"column_end":63}},{"value":"/ [`DescriptorSetCopy`]: struct.DescriptorSetCopy.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":175962,"byte_end":176018,"line_start":214,"line_end":214,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176486,"byte_end":176495,"line_start":229,"line_end":229,"column_start":15,"column_end":24},"name":"free_sets","qualname":"::pso::descriptor::DescriptorPool::free_sets","value":"fn <I> (&mut self, descriptor_sets: I) -> ()","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Free the given descriptor sets provided as an iterator.\n","sig":null,"attributes":[{"value":"/ Free the given descriptor sets provided as an iterator.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176412,"byte_end":176471,"line_start":228,"line_end":228,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176895,"byte_end":176900,"line_start":237,"line_end":237,"column_start":15,"column_end":20},"name":"reset","qualname":"::pso::descriptor::DescriptorPool::reset","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":574},"children":[],"decl_id":null,"docs":" Resets a descriptor pool, releasing all resources from all the descriptor sets\n allocated from it and freeing the descriptor sets. Invalidates all descriptor\n sets allocated from the pool; trying to use one after the pool has been reset\n is undefined behavior.\n","sig":null,"attributes":[{"value":"/ Resets a descriptor pool, releasing all resources from all the descriptor sets","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176595,"byte_end":176677,"line_start":233,"line_end":233,"column_start":5,"column_end":87}},{"value":"/ allocated from it and freeing the descriptor sets. Invalidates all descriptor","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176682,"byte_end":176763,"line_start":234,"line_end":234,"column_start":5,"column_end":86}},{"value":"/ sets allocated from the pool; trying to use one after the pool has been reset","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176768,"byte_end":176849,"line_start":235,"line_end":235,"column_start":5,"column_end":86}},{"value":"/ is undefined behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176854,"byte_end":176880,"line_start":236,"line_end":236,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":8386},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177112,"byte_end":177130,"line_start":244,"line_end":244,"column_start":12,"column_end":30},"name":"DescriptorSetWrite","qualname":"::pso::descriptor::DescriptorSetWrite","value":"DescriptorSetWrite { set, binding, array_offset, descriptors }","parent":null,"children":[{"krate":0,"index":8390},{"krate":0,"index":8391},{"krate":0,"index":8392},{"krate":0,"index":8393}],"decl_id":null,"docs":" Writes the actual descriptors to be bound into a descriptor set. Should be provided\n to the `write_descriptor_sets` method of a `Device`.\n","sig":null,"attributes":[{"value":"/ Writes the actual descriptors to be bound into a descriptor set. Should be provided","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":176916,"byte_end":177003,"line_start":240,"line_end":240,"column_start":1,"column_end":88}},{"value":"/ to the `write_descriptor_sets` method of a `Device`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177004,"byte_end":177060,"line_start":241,"line_end":241,"column_start":1,"column_end":57}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177061,"byte_end":177083,"line_start":242,"line_end":242,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":8390},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177230,"byte_end":177233,"line_start":249,"line_end":249,"column_start":9,"column_end":12},"name":"set","qualname":"::pso::descriptor::DescriptorSetWrite::set","value":"&'a <B as Backend>::DescriptorSet","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8391},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177509,"byte_end":177516,"line_start":254,"line_end":254,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::descriptor::DescriptorSetWrite::binding","value":"u32","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":" *Note*: when there is more descriptors provided than\n array elements left in the specified binding starting\n at specified, offset, the updates are spilled onto\n the next binding (starting with offset 0), and so on.\n","sig":null,"attributes":[{"value":"/ *Note*: when there is more descriptors provided than","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177261,"byte_end":177317,"line_start":250,"line_end":250,"column_start":5,"column_end":61}},{"value":"/ array elements left in the specified binding starting","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177322,"byte_end":177379,"line_start":251,"line_end":251,"column_start":5,"column_end":62}},{"value":"/ at specified, offset, the updates are spilled onto","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177384,"byte_end":177438,"line_start":252,"line_end":252,"column_start":5,"column_end":59}},{"value":"/ the next binding (starting with offset 0), and so on.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177443,"byte_end":177500,"line_start":253,"line_end":253,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":8392},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177545,"byte_end":177557,"line_start":255,"line_end":255,"column_start":9,"column_end":21},"name":"array_offset","qualname":"::pso::descriptor::DescriptorSetWrite::array_offset","value":"usize","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8393},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177589,"byte_end":177600,"line_start":256,"line_end":256,"column_start":9,"column_end":20},"name":"descriptors","qualname":"::pso::descriptor::DescriptorSetWrite::descriptors","value":"WI","parent":{"krate":0,"index":8386},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8402},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177901,"byte_end":177908,"line_start":266,"line_end":266,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::pso::descriptor::Descriptor::Sampler","value":"Descriptor::Sampler(&'a B::Sampler)","parent":{"krate":0,"index":8399},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177930,"byte_end":177935,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Image","qualname":"::pso::descriptor::Descriptor::Image","value":"Descriptor::Image(&'a B::ImageView, Layout)","parent":{"krate":0,"index":8399},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177967,"byte_end":177987,"line_start":268,"line_end":268,"column_start":5,"column_end":25},"name":"CombinedImageSampler","qualname":"::pso::descriptor::Descriptor::CombinedImageSampler","value":"Descriptor::CombinedImageSampler(&'a B::ImageView, Layout, &'a B::Sampler)","parent":{"krate":0,"index":8399},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178035,"byte_end":178041,"line_start":269,"line_end":269,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::pso::descriptor::Descriptor::Buffer","value":"Descriptor::Buffer(&'a B::Buffer, SubRange)","parent":{"krate":0,"index":8399},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178072,"byte_end":178083,"line_start":270,"line_end":270,"column_start":5,"column_end":16},"name":"TexelBuffer","qualname":"::pso::descriptor::Descriptor::TexelBuffer","value":"Descriptor::TexelBuffer(&'a B::BufferView)","parent":{"krate":0,"index":8399},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8399},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177868,"byte_end":177878,"line_start":265,"line_end":265,"column_start":10,"column_end":20},"name":"Descriptor","qualname":"::pso::descriptor::Descriptor","value":"Descriptor::{Sampler, Image, CombinedImageSampler, Buffer, TexelBuffer}","parent":null,"children":[{"krate":0,"index":8402},{"krate":0,"index":8405},{"krate":0,"index":8409},{"krate":0,"index":8414},{"krate":0,"index":8418}],"decl_id":null,"docs":" A handle to a specific shader resource that can be bound for use in a `DescriptorSet`.\n Usually provided in a [`DescriptorSetWrite`]","sig":null,"attributes":[{"value":"/ A handle to a specific shader resource that can be bound for use in a `DescriptorSet`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177609,"byte_end":177699,"line_start":259,"line_end":259,"column_start":1,"column_end":91}},{"value":"/ Usually provided in a [`DescriptorSetWrite`]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177700,"byte_end":177748,"line_start":260,"line_end":260,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177749,"byte_end":177752,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ [`DescriptorSetWrite`]: struct.DescriptorSetWrite.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177753,"byte_end":177811,"line_start":262,"line_end":262,"column_start":1,"column_end":59}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":177812,"byte_end":177834,"line_start":263,"line_end":263,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8429},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178327,"byte_end":178344,"line_start":277,"line_end":277,"column_start":12,"column_end":29},"name":"DescriptorSetCopy","qualname":"::pso::descriptor::DescriptorSetCopy","value":"DescriptorSetCopy { src_set, src_binding, src_array_offset, dst_set, dst_binding, dst_array_offset, count }","parent":null,"children":[{"krate":0,"index":8432},{"krate":0,"index":8433},{"krate":0,"index":8434},{"krate":0,"index":8435},{"krate":0,"index":8436},{"krate":0,"index":8437},{"krate":0,"index":8438}],"decl_id":null,"docs":" Copies a range of descriptors to be bound from one descriptor set to another Should be\n provided to the `copy_descriptor_sets` method of a `Device`.\n","sig":null,"attributes":[{"value":"/ Copies a range of descriptors to be bound from one descriptor set to another Should be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178107,"byte_end":178197,"line_start":273,"line_end":273,"column_start":1,"column_end":91}},{"value":"/ provided to the `copy_descriptor_sets` method of a `Device`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178198,"byte_end":178262,"line_start":274,"line_end":274,"column_start":1,"column_end":65}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178263,"byte_end":178285,"line_start":275,"line_end":275,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":8432},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178371,"byte_end":178378,"line_start":278,"line_end":278,"column_start":9,"column_end":16},"name":"src_set","qualname":"::pso::descriptor::DescriptorSetCopy::src_set","value":"&'a <B as Backend>::DescriptorSet","parent":{"krate":0,"index":8429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178410,"byte_end":178421,"line_start":279,"line_end":279,"column_start":9,"column_end":20},"name":"src_binding","qualname":"::pso::descriptor::DescriptorSetCopy::src_binding","value":"u32","parent":{"krate":0,"index":8429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8434},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178450,"byte_end":178466,"line_start":280,"line_end":280,"column_start":9,"column_end":25},"name":"src_array_offset","qualname":"::pso::descriptor::DescriptorSetCopy::src_array_offset","value":"usize","parent":{"krate":0,"index":8429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8435},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178498,"byte_end":178505,"line_start":281,"line_end":281,"column_start":9,"column_end":16},"name":"dst_set","qualname":"::pso::descriptor::DescriptorSetCopy::dst_set","value":"&'a <B as Backend>::DescriptorSet","parent":{"krate":0,"index":8429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178537,"byte_end":178548,"line_start":282,"line_end":282,"column_start":9,"column_end":20},"name":"dst_binding","qualname":"::pso::descriptor::DescriptorSetCopy::dst_binding","value":"u32","parent":{"krate":0,"index":8429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8437},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178577,"byte_end":178593,"line_start":283,"line_end":283,"column_start":9,"column_end":25},"name":"dst_array_offset","qualname":"::pso::descriptor::DescriptorSetCopy::dst_array_offset","value":"usize","parent":{"krate":0,"index":8429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":8438},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178625,"byte_end":178630,"line_start":284,"line_end":284,"column_start":9,"column_end":14},"name":"count","qualname":"::pso::descriptor::DescriptorSetCopy::count","value":"usize","parent":{"krate":0,"index":8429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178709,"byte_end":178734,"line_start":289,"line_end":289,"column_start":16,"column_end":41},"name":"DescriptorPoolCreateFlags","qualname":"::pso::descriptor::DescriptorPoolCreateFlags","value":"DescriptorPoolCreateFlags {  }","parent":null,"children":[{"krate":0,"index":8451}],"decl_id":null,"docs":" Descriptor pool creation flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":8487},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":178863,"byte_end":178882,"line_start":292,"line_end":292,"column_start":15,"column_end":34},"name":"FREE_DESCRIPTOR_SET","qualname":"::pso::descriptor::DescriptorPoolCreateFlags::FREE_DESCRIPTOR_SET","value":"DescriptorPoolCreateFlags","parent":{"krate":0,"index":8486},"children":[],"decl_id":null,"docs":" Specifies that descriptor sets are allowed to be freed from the pool\n individually.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":8536},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179466,"byte_end":179470,"line_start":22,"line_end":22,"column_start":12,"column_end":16},"name":"Rect","qualname":"::pso::graphics::Rect","value":"Rect { x, y, w, h }","parent":null,"children":[{"krate":0,"index":8537},{"krate":0,"index":8538},{"krate":0,"index":8539},{"krate":0,"index":8540}],"decl_id":null,"docs":" A simple struct describing a rect with integer coordinates.\n","sig":null,"attributes":[{"value":"/ A simple struct describing a rect with integer coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179269,"byte_end":179332,"line_start":19,"line_end":19,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":8537},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179501,"byte_end":179502,"line_start":24,"line_end":24,"column_start":9,"column_end":10},"name":"x","qualname":"::pso::graphics::Rect::x","value":"i16","parent":{"krate":0,"index":8536},"children":[],"decl_id":null,"docs":" X position.\n","sig":null,"attributes":[{"value":"/ X position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179477,"byte_end":179492,"line_start":23,"line_end":23,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":8538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179537,"byte_end":179538,"line_start":26,"line_end":26,"column_start":9,"column_end":10},"name":"y","qualname":"::pso::graphics::Rect::y","value":"i16","parent":{"krate":0,"index":8536},"children":[],"decl_id":null,"docs":" Y position.\n","sig":null,"attributes":[{"value":"/ Y position.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179513,"byte_end":179528,"line_start":25,"line_end":25,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":8539},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179568,"byte_end":179569,"line_start":28,"line_end":28,"column_start":9,"column_end":10},"name":"w","qualname":"::pso::graphics::Rect::w","value":"i16","parent":{"krate":0,"index":8536},"children":[],"decl_id":null,"docs":" Width.\n","sig":null,"attributes":[{"value":"/ Width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179549,"byte_end":179559,"line_start":27,"line_end":27,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":8540},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179600,"byte_end":179601,"line_start":30,"line_end":30,"column_start":9,"column_end":10},"name":"h","qualname":"::pso::graphics::Rect::h","value":"i16","parent":{"krate":0,"index":8536},"children":[],"decl_id":null,"docs":" Height.\n","sig":null,"attributes":[{"value":"/ Height.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179580,"byte_end":179591,"line_start":29,"line_end":29,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":8571},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179784,"byte_end":179793,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"ClearRect","qualname":"::pso::graphics::ClearRect","value":"ClearRect { rect, layers }","parent":null,"children":[{"krate":0,"index":8572},{"krate":0,"index":8573}],"decl_id":null,"docs":" A simple struct describing a rect with integer coordinates.\n","sig":null,"attributes":[{"value":"/ A simple struct describing a rect with integer coordinates.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179611,"byte_end":179674,"line_start":33,"line_end":33,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":8572},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179823,"byte_end":179827,"line_start":38,"line_end":38,"column_start":9,"column_end":13},"name":"rect","qualname":"::pso::graphics::ClearRect::rect","value":"pso::graphics::Rect","parent":{"krate":0,"index":8571},"children":[],"decl_id":null,"docs":" 2D region.\n","sig":null,"attributes":[{"value":"/ 2D region.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179800,"byte_end":179814,"line_start":37,"line_end":37,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":8573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179864,"byte_end":179870,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"name":"layers","qualname":"::pso::graphics::ClearRect::layers","value":"std::ops::Range<u16>","parent":{"krate":0,"index":8571},"children":[],"decl_id":null,"docs":" Layer range.\n","sig":null,"attributes":[{"value":"/ Layer range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179839,"byte_end":179855,"line_start":39,"line_end":39,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":8582},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180066,"byte_end":180074,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Viewport","qualname":"::pso::graphics::Viewport","value":"Viewport { rect, depth }","parent":null,"children":[{"krate":0,"index":8583},{"krate":0,"index":8584}],"decl_id":null,"docs":" A viewport, generally equating to a window on a display.\n","sig":null,"attributes":[{"value":"/ A viewport, generally equating to a window on a display.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":179896,"byte_end":179956,"line_start":43,"line_end":43,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":8583},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180118,"byte_end":180122,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"name":"rect","qualname":"::pso::graphics::Viewport::rect","value":"pso::graphics::Rect","parent":{"krate":0,"index":8582},"children":[],"decl_id":null,"docs":" The viewport boundaries.\n","sig":null,"attributes":[{"value":"/ The viewport boundaries.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180081,"byte_end":180109,"line_start":47,"line_end":47,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":8584},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180173,"byte_end":180178,"line_start":50,"line_end":50,"column_start":9,"column_end":14},"name":"depth","qualname":"::pso::graphics::Viewport::depth","value":"std::ops::Range<f32>","parent":{"krate":0,"index":8582},"children":[],"decl_id":null,"docs":" The viewport depth limits.\n","sig":null,"attributes":[{"value":"/ The viewport depth limits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180134,"byte_end":180164,"line_start":49,"line_end":49,"column_start":5,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":603},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180235,"byte_end":180245,"line_start":54,"line_end":54,"column_start":10,"column_end":20},"name":"ColorValue","qualname":"::pso::graphics::ColorValue","value":"[f32; 4]","parent":null,"children":[],"decl_id":null,"docs":" A single RGBA float color.\n","sig":null,"attributes":[{"value":"/ A single RGBA float color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180195,"byte_end":180225,"line_start":53,"line_end":53,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":605},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180313,"byte_end":180323,"line_start":56,"line_end":56,"column_start":10,"column_end":20},"name":"DepthValue","qualname":"::pso::graphics::DepthValue","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" A single depth value from a depth buffer.\n","sig":null,"attributes":[{"value":"/ A single depth value from a depth buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180258,"byte_end":180303,"line_start":55,"line_end":55,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180382,"byte_end":180394,"line_start":58,"line_end":58,"column_start":10,"column_end":22},"name":"StencilValue","qualname":"::pso::graphics::StencilValue","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A single value from a stencil buffer.\n","sig":null,"attributes":[{"value":"/ A single value from a stencil buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180331,"byte_end":180372,"line_start":57,"line_end":57,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":8593},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180898,"byte_end":180915,"line_start":71,"line_end":71,"column_start":12,"column_end":29},"name":"GraphicsShaderSet","qualname":"::pso::graphics::GraphicsShaderSet","value":"GraphicsShaderSet { vertex, hull, domain, geometry, fragment }","parent":null,"children":[{"krate":0,"index":8596},{"krate":0,"index":8597},{"krate":0,"index":8598},{"krate":0,"index":8599},{"krate":0,"index":8600}],"decl_id":null,"docs":" A complete set of shaders to build a graphics pipeline.","sig":null,"attributes":[{"value":"/ A complete set of shaders to build a graphics pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180403,"byte_end":180462,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180463,"byte_end":180466,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ All except the vertex shader are optional; omitting them","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180467,"byte_end":180527,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/ passes through the inputs without change.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180528,"byte_end":180573,"line_start":63,"line_end":63,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180574,"byte_end":180577,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ If a fragment shader is omitted, the results of fragment","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180578,"byte_end":180638,"line_start":65,"line_end":65,"column_start":1,"column_end":61}},{"value":"/ processing are undefined. Specifically, any fragment color","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180639,"byte_end":180701,"line_start":66,"line_end":66,"column_start":1,"column_end":63}},{"value":"/ outputs are considered to have undefined values, and the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180702,"byte_end":180762,"line_start":67,"line_end":67,"column_start":1,"column_end":61}},{"value":"/ fragment depth is considered to be unmodified. This can","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180763,"byte_end":180822,"line_start":68,"line_end":68,"column_start":1,"column_end":60}},{"value":"/ be useful for depth-only rendering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180823,"byte_end":180862,"line_start":69,"line_end":69,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":8596},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180993,"byte_end":180999,"line_start":73,"line_end":73,"column_start":9,"column_end":15},"name":"vertex","qualname":"::pso::graphics::GraphicsShaderSet::vertex","value":"pso::EntryPoint<'a, B>","parent":{"krate":0,"index":8593},"children":[],"decl_id":null,"docs":" A shader that outputs a vertex in a model.\n","sig":null,"attributes":[{"value":"/ A shader that outputs a vertex in a model.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":180938,"byte_end":180984,"line_start":72,"line_end":72,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":8597},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181261,"byte_end":181265,"line_start":78,"line_end":78,"column_start":9,"column_end":13},"name":"hull","qualname":"::pso::graphics::GraphicsShaderSet::hull","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":8593},"children":[],"decl_id":null,"docs":" A hull shader takes in an input patch (values representing\n a small portion of a shape, which may be actual geometry or may\n be parameters for creating geometry) and produces one or more\n output patches.\n","sig":null,"attributes":[{"value":"/ A hull shader takes in an input patch (values representing","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181024,"byte_end":181086,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/ a small portion of a shape, which may be actual geometry or may","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181091,"byte_end":181158,"line_start":75,"line_end":75,"column_start":5,"column_end":72}},{"value":"/ be parameters for creating geometry) and produces one or more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181163,"byte_end":181228,"line_start":76,"line_end":76,"column_start":5,"column_end":70}},{"value":"/ output patches.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181233,"byte_end":181252,"line_start":77,"line_end":77,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":8598},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181432,"byte_end":181438,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"name":"domain","qualname":"::pso::graphics::GraphicsShaderSet::domain","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":8593},"children":[],"decl_id":null,"docs":" A shader that takes in domains produced from a hull shader's output\n patches and computes actual vertex positions.\n","sig":null,"attributes":[{"value":"/ A shader that takes in domains produced from a hull shader's output","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181298,"byte_end":181369,"line_start":79,"line_end":79,"column_start":5,"column_end":76}},{"value":"/ patches and computes actual vertex positions.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181374,"byte_end":181423,"line_start":80,"line_end":80,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":8599},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181574,"byte_end":181582,"line_start":84,"line_end":84,"column_start":9,"column_end":17},"name":"geometry","qualname":"::pso::graphics::GraphicsShaderSet::geometry","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":8593},"children":[],"decl_id":null,"docs":" A shader that takes given input vertexes and outputs zero\n or more output vertexes.\n","sig":null,"attributes":[{"value":"/ A shader that takes given input vertexes and outputs zero","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181471,"byte_end":181532,"line_start":82,"line_end":82,"column_start":5,"column_end":66}},{"value":"/ or more output vertexes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181537,"byte_end":181565,"line_start":83,"line_end":83,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":8600},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181766,"byte_end":181774,"line_start":88,"line_end":88,"column_start":9,"column_end":17},"name":"fragment","qualname":"::pso::graphics::GraphicsShaderSet::fragment","value":"std::option::Option<pso::EntryPoint<'a, B>>","parent":{"krate":0,"index":8593},"children":[],"decl_id":null,"docs":" A shader that outputs a value for a fragment.\n Usually this value is a color that is then displayed as a\n pixel on a screen.\n","sig":null,"attributes":[{"value":"/ A shader that outputs a value for a fragment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181615,"byte_end":181664,"line_start":85,"line_end":85,"column_start":5,"column_end":54}},{"value":"/ Usually this value is a color that is then displayed as a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181669,"byte_end":181730,"line_start":86,"line_end":86,"column_start":5,"column_end":66}},{"value":"/ pixel on a screen.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181735,"byte_end":181757,"line_start":87,"line_end":87,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":8609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181954,"byte_end":181965,"line_start":94,"line_end":94,"column_start":12,"column_end":23},"name":"BakedStates","qualname":"::pso::graphics::BakedStates","value":"BakedStates { viewport, scissor, blend_color, depth_bounds }","parent":null,"children":[{"krate":0,"index":8610},{"krate":0,"index":8611},{"krate":0,"index":8612},{"krate":0,"index":8613}],"decl_id":null,"docs":" Baked-in pipeline states.\n","sig":null,"attributes":[{"value":"/ Baked-in pipeline states.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181806,"byte_end":181835,"line_start":91,"line_end":91,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":8610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182026,"byte_end":182034,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"name":"viewport","qualname":"::pso::graphics::BakedStates::viewport","value":"std::option::Option<pso::graphics::Viewport>","parent":{"krate":0,"index":8609},"children":[],"decl_id":null,"docs":" Static viewport. TODO: multiple viewports\n","sig":null,"attributes":[{"value":"/ Static viewport. TODO: multiple viewports","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":181972,"byte_end":182017,"line_start":95,"line_end":95,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":8611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182110,"byte_end":182117,"line_start":98,"line_end":98,"column_start":9,"column_end":16},"name":"scissor","qualname":"::pso::graphics::BakedStates::scissor","value":"std::option::Option<pso::graphics::Rect>","parent":{"krate":0,"index":8609},"children":[],"decl_id":null,"docs":" Static scissor. TODO: multiple scissors\n","sig":null,"attributes":[{"value":"/ Static scissor. TODO: multiple scissors","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182058,"byte_end":182101,"line_start":97,"line_end":97,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":8612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182178,"byte_end":182189,"line_start":100,"line_end":100,"column_start":9,"column_end":20},"name":"blend_color","qualname":"::pso::graphics::BakedStates::blend_color","value":"std::option::Option<[f32; 4]>","parent":{"krate":0,"index":8609},"children":[],"decl_id":null,"docs":" Static blend constant color.\n","sig":null,"attributes":[{"value":"/ Static blend constant color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182137,"byte_end":182169,"line_start":99,"line_end":99,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":8613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182248,"byte_end":182260,"line_start":102,"line_end":102,"column_start":9,"column_end":21},"name":"depth_bounds","qualname":"::pso::graphics::BakedStates::depth_bounds","value":"std::option::Option<std::ops::Range<f32>>","parent":{"krate":0,"index":8609},"children":[],"decl_id":null,"docs":" Static depth bounds.\n","sig":null,"attributes":[{"value":"/ Static depth bounds.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182215,"byte_end":182239,"line_start":101,"line_end":101,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":8624},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182410,"byte_end":182430,"line_start":108,"line_end":108,"column_start":12,"column_end":32},"name":"GraphicsPipelineDesc","qualname":"::pso::graphics::GraphicsPipelineDesc","value":"GraphicsPipelineDesc { shaders, rasterizer, vertex_buffers, attributes, input_assembler, blender, depth_stencil, multisampling, baked_states, layout, subpass, flags, parent }","parent":null,"children":[{"krate":0,"index":8627},{"krate":0,"index":8628},{"krate":0,"index":8629},{"krate":0,"index":8630},{"krate":0,"index":8631},{"krate":0,"index":8632},{"krate":0,"index":8633},{"krate":0,"index":8634},{"krate":0,"index":8635},{"krate":0,"index":8636},{"krate":0,"index":8637},{"krate":0,"index":8638},{"krate":0,"index":8639}],"decl_id":null,"docs":" A description of all the settings that can be altered\n when creating a graphics pipeline.\n","sig":null,"attributes":[{"value":"/ A description of all the settings that can be altered","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182285,"byte_end":182342,"line_start":105,"line_end":105,"column_start":1,"column_end":58}},{"value":"/ when creating a graphics pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182343,"byte_end":182381,"line_start":106,"line_end":106,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":8627},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182516,"byte_end":182523,"line_start":110,"line_end":110,"column_start":9,"column_end":16},"name":"shaders","qualname":"::pso::graphics::GraphicsPipelineDesc::shaders","value":"pso::graphics::GraphicsShaderSet<'a, B>","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" A set of graphics shaders to use for the pipeline.\n","sig":null,"attributes":[{"value":"/ A set of graphics shaders to use for the pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182453,"byte_end":182507,"line_start":109,"line_end":109,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":8628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182584,"byte_end":182594,"line_start":112,"line_end":112,"column_start":9,"column_end":19},"name":"rasterizer","qualname":"::pso::graphics::GraphicsPipelineDesc::rasterizer","value":"pso::graphics::Rasterizer","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Rasterizer setup\n","sig":null,"attributes":[{"value":"/ Rasterizer setup","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182555,"byte_end":182575,"line_start":111,"line_end":111,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":8629},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182644,"byte_end":182658,"line_start":114,"line_end":114,"column_start":9,"column_end":23},"name":"vertex_buffers","qualname":"::pso::graphics::GraphicsPipelineDesc::vertex_buffers","value":"std::vec::Vec<pso::input_assembler::VertexBufferDesc>","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Vertex buffers (IA)\n","sig":null,"attributes":[{"value":"/ Vertex buffers (IA)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182612,"byte_end":182635,"line_start":113,"line_end":113,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":8630},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182722,"byte_end":182732,"line_start":116,"line_end":116,"column_start":9,"column_end":19},"name":"attributes","qualname":"::pso::graphics::GraphicsPipelineDesc::attributes","value":"std::vec::Vec<pso::input_assembler::AttributeDesc>","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Vertex attributes (IA)\n","sig":null,"attributes":[{"value":"/ Vertex attributes (IA)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182687,"byte_end":182713,"line_start":115,"line_end":115,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":8631},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182880,"byte_end":182895,"line_start":119,"line_end":119,"column_start":9,"column_end":24},"name":"input_assembler","qualname":"::pso::graphics::GraphicsPipelineDesc::input_assembler","value":"pso::input_assembler::InputAssemblerDesc","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Input assembler attributes, describes how\n vertices are assembled into primitives (such as triangles).\n","sig":null,"attributes":[{"value":"/ Input assembler attributes, describes how","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182758,"byte_end":182803,"line_start":117,"line_end":117,"column_start":5,"column_end":50}},{"value":"/ vertices are assembled into primitives (such as triangles).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182808,"byte_end":182871,"line_start":118,"line_end":118,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8632},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182990,"byte_end":182997,"line_start":121,"line_end":121,"column_start":9,"column_end":16},"name":"blender","qualname":"::pso::graphics::GraphicsPipelineDesc::blender","value":"pso::graphics::BlendDesc","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Description of how blend operations should be performed.\n","sig":null,"attributes":[{"value":"/ Description of how blend operations should be performed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":182921,"byte_end":182981,"line_start":120,"line_end":120,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":8633},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183046,"byte_end":183059,"line_start":123,"line_end":123,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::pso::graphics::GraphicsPipelineDesc::depth_stencil","value":"pso::output_merger::DepthStencilDesc","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Depth stencil (DSV)\n","sig":null,"attributes":[{"value":"/ Depth stencil (DSV)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183014,"byte_end":183037,"line_start":122,"line_end":122,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":8634},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183110,"byte_end":183123,"line_start":125,"line_end":125,"column_start":9,"column_end":22},"name":"multisampling","qualname":"::pso::graphics::GraphicsPipelineDesc::multisampling","value":"std::option::Option<pso::graphics::Multisampling>","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Multisampling.\n","sig":null,"attributes":[{"value":"/ Multisampling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183083,"byte_end":183101,"line_start":124,"line_end":124,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":8635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183188,"byte_end":183200,"line_start":127,"line_end":127,"column_start":9,"column_end":21},"name":"baked_states","qualname":"::pso::graphics::GraphicsPipelineDesc::baked_states","value":"pso::graphics::BakedStates","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Static pipeline states.\n","sig":null,"attributes":[{"value":"/ Static pipeline states.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183152,"byte_end":183179,"line_start":126,"line_end":126,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":8636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183248,"byte_end":183254,"line_start":129,"line_end":129,"column_start":9,"column_end":15},"name":"layout","qualname":"::pso::graphics::GraphicsPipelineDesc::layout","value":"&'a <B as Backend>::PipelineLayout","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Pipeline layout.\n","sig":null,"attributes":[{"value":"/ Pipeline layout.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183219,"byte_end":183239,"line_start":128,"line_end":128,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":8637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183342,"byte_end":183349,"line_start":131,"line_end":131,"column_start":9,"column_end":16},"name":"subpass","qualname":"::pso::graphics::GraphicsPipelineDesc::subpass","value":"pass::Subpass<'a, B>","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Subpass in which the pipeline can be executed.\n","sig":null,"attributes":[{"value":"/ Subpass in which the pipeline can be executed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183283,"byte_end":183333,"line_start":130,"line_end":130,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":8638},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183443,"byte_end":183448,"line_start":133,"line_end":133,"column_start":9,"column_end":14},"name":"flags","qualname":"::pso::graphics::GraphicsPipelineDesc::flags","value":"pso::PipelineCreationFlags","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" Options that may be set to alter pipeline properties.\n","sig":null,"attributes":[{"value":"/ Options that may be set to alter pipeline properties.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183377,"byte_end":183434,"line_start":132,"line_end":132,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":8639},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183553,"byte_end":183559,"line_start":136,"line_end":136,"column_start":9,"column_end":15},"name":"parent","qualname":"::pso::graphics::GraphicsPipelineDesc::parent","value":"pso::BasePipeline<'a, <B as Backend>::GraphicsPipeline>","parent":{"krate":0,"index":8624},"children":[],"decl_id":null,"docs":" The parent pipeline, which may be\n `BasePipeline::None`.\n","sig":null,"attributes":[{"value":"/ The parent pipeline, which may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183477,"byte_end":183514,"line_start":134,"line_end":134,"column_start":5,"column_end":42}},{"value":"/ `BasePipeline::None`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183519,"byte_end":183544,"line_start":135,"line_end":135,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183708,"byte_end":183711,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"new","qualname":"<GraphicsPipelineDesc>::new","value":"fn (shaders: GraphicsShaderSet<'a, B>, primitive: Primitive, rasterizer: Rasterizer, layout: &'a B::PipelineLayout, subpass: pass::Subpass<'a, B>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty PSO descriptor.\n","sig":null,"attributes":[{"value":"/ Create a new empty PSO descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183658,"byte_end":183696,"line_start":140,"line_end":140,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8645},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184719,"byte_end":184724,"line_start":172,"line_end":172,"column_start":5,"column_end":10},"name":"Point","qualname":"::pso::graphics::PolygonMode::Point","value":"PolygonMode::Point","parent":{"krate":0,"index":8644},"children":[],"decl_id":null,"docs":" Rasterize as a point.\n","sig":null,"attributes":[{"value":"/ Rasterize as a point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184689,"byte_end":184714,"line_start":171,"line_end":171,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184780,"byte_end":184784,"line_start":174,"line_end":174,"column_start":5,"column_end":9},"name":"Line","qualname":"::pso::graphics::PolygonMode::Line","value":"PolygonMode::Line","parent":{"krate":0,"index":8644},"children":[],"decl_id":null,"docs":" Rasterize as a line with the given width.\n","sig":null,"attributes":[{"value":"/ Rasterize as a line with the given width.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184730,"byte_end":184775,"line_start":173,"line_end":173,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184819,"byte_end":184823,"line_start":176,"line_end":176,"column_start":5,"column_end":9},"name":"Fill","qualname":"::pso::graphics::PolygonMode::Fill","value":"PolygonMode::Fill","parent":{"krate":0,"index":8644},"children":[],"decl_id":null,"docs":" Rasterize as a face.\n","sig":null,"attributes":[{"value":"/ Rasterize as a face.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184790,"byte_end":184814,"line_start":175,"line_end":175,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":8644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184671,"byte_end":184682,"line_start":170,"line_end":170,"column_start":10,"column_end":21},"name":"PolygonMode","qualname":"::pso::graphics::PolygonMode","value":"PolygonMode::{Point, Line, Fill}","parent":null,"children":[{"krate":0,"index":8645},{"krate":0,"index":8647},{"krate":0,"index":8649}],"decl_id":null,"docs":" Methods for rasterizing polygons, ie, turning the mesh\n into a raster image.\n","sig":null,"attributes":[{"value":"/ Methods for rasterizing polygons, ie, turning the mesh","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184462,"byte_end":184520,"line_start":166,"line_end":166,"column_start":1,"column_end":59}},{"value":"/ into a raster image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184521,"byte_end":184545,"line_start":167,"line_end":167,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185159,"byte_end":185168,"line_start":186,"line_end":186,"column_start":5,"column_end":14},"name":"Clockwise","qualname":"::pso::graphics::FrontFace::Clockwise","value":"FrontFace::Clockwise","parent":{"krate":0,"index":8661},"children":[],"decl_id":null,"docs":" Clockwise winding order.\n","sig":null,"attributes":[{"value":"/ Clockwise winding order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185126,"byte_end":185154,"line_start":185,"line_end":185,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8664},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185215,"byte_end":185231,"line_start":188,"line_end":188,"column_start":5,"column_end":21},"name":"CounterClockwise","qualname":"::pso::graphics::FrontFace::CounterClockwise","value":"FrontFace::CounterClockwise","parent":{"krate":0,"index":8661},"children":[],"decl_id":null,"docs":" Counter-clockwise winding order.\n","sig":null,"attributes":[{"value":"/ Counter-clockwise winding order.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185174,"byte_end":185210,"line_start":187,"line_end":187,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":8661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185110,"byte_end":185119,"line_start":184,"line_end":184,"column_start":10,"column_end":19},"name":"FrontFace","qualname":"::pso::graphics::FrontFace","value":"FrontFace::{Clockwise, CounterClockwise}","parent":null,"children":[{"krate":0,"index":8662},{"krate":0,"index":8664}],"decl_id":null,"docs":" The front face winding order of a set of vertices. This is\n the order of vertexes that define which side of a face is\n the \"front\".\n","sig":null,"attributes":[{"value":"/ The front face winding order of a set of vertices. This is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184828,"byte_end":184890,"line_start":179,"line_end":179,"column_start":1,"column_end":63}},{"value":"/ the order of vertexes that define which side of a face is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184891,"byte_end":184952,"line_start":180,"line_end":180,"column_start":1,"column_end":62}},{"value":"/ the \"front\".","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":184953,"byte_end":184969,"line_start":181,"line_end":181,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":8684},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185766,"byte_end":185775,"line_start":200,"line_end":200,"column_start":12,"column_end":21},"name":"DepthBias","qualname":"::pso::graphics::DepthBias","value":"DepthBias { const_factor, clamp, slope_factor }","parent":null,"children":[{"krate":0,"index":8685},{"krate":0,"index":8686},{"krate":0,"index":8687}],"decl_id":null,"docs":" A depth bias allows changing the produced depth values\n for fragments slightly but consistently. This permits\n drawing of multiple polygons in the same plane without\n Z-fighting, such as when trying to draw shadows on a wall.","sig":null,"attributes":[{"value":"/ A depth bias allows changing the produced depth values","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185236,"byte_end":185294,"line_start":191,"line_end":191,"column_start":1,"column_end":59}},{"value":"/ for fragments slightly but consistently. This permits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185295,"byte_end":185352,"line_start":192,"line_end":192,"column_start":1,"column_end":58}},{"value":"/ drawing of multiple polygons in the same plane without","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185353,"byte_end":185411,"line_start":193,"line_end":193,"column_start":1,"column_end":59}},{"value":"/ Z-fighting, such as when trying to draw shadows on a wall.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185412,"byte_end":185474,"line_start":194,"line_end":194,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185475,"byte_end":185478,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ For details of the algorithm and equations, see","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185479,"byte_end":185530,"line_start":196,"line_end":196,"column_start":1,"column_end":52}},{"value":"/ [the Vulkan spec](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#primsrast-depthbias).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185531,"byte_end":185641,"line_start":197,"line_end":197,"column_start":1,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":8685},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185841,"byte_end":185853,"line_start":202,"line_end":202,"column_start":9,"column_end":21},"name":"const_factor","qualname":"::pso::graphics::DepthBias::const_factor","value":"f32","parent":{"krate":0,"index":8684},"children":[],"decl_id":null,"docs":" A constant depth value added to each fragment.\n","sig":null,"attributes":[{"value":"/ A constant depth value added to each fragment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185782,"byte_end":185832,"line_start":201,"line_end":201,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":8686},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185925,"byte_end":185930,"line_start":204,"line_end":204,"column_start":9,"column_end":14},"name":"clamp","qualname":"::pso::graphics::DepthBias::clamp","value":"f32","parent":{"krate":0,"index":8684},"children":[],"decl_id":null,"docs":" The minimum or maximum depth bias of a fragment.\n","sig":null,"attributes":[{"value":"/ The minimum or maximum depth bias of a fragment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185864,"byte_end":185916,"line_start":203,"line_end":203,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":8687},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186002,"byte_end":186014,"line_start":206,"line_end":206,"column_start":9,"column_end":21},"name":"slope_factor","qualname":"::pso::graphics::DepthBias::slope_factor","value":"f32","parent":{"krate":0,"index":8684},"children":[],"decl_id":null,"docs":" A constant bias applied to the fragment's slope.\n","sig":null,"attributes":[{"value":"/ A constant bias applied to the fragment's slope.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":185941,"byte_end":185993,"line_start":205,"line_end":205,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":8699},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186164,"byte_end":186174,"line_start":212,"line_end":212,"column_start":12,"column_end":22},"name":"Rasterizer","qualname":"::pso::graphics::Rasterizer","value":"Rasterizer { polygon_mode, cull_face, front_face, depth_clamping, depth_bias, conservative, line_width }","parent":null,"children":[{"krate":0,"index":8700},{"krate":0,"index":8701},{"krate":0,"index":8702},{"krate":0,"index":8703},{"krate":0,"index":8704},{"krate":0,"index":8705},{"krate":0,"index":8706}],"decl_id":null,"docs":" Rasterization state.\n","sig":null,"attributes":[{"value":"/ Rasterization state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186024,"byte_end":186048,"line_start":209,"line_end":209,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":8700},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186226,"byte_end":186238,"line_start":214,"line_end":214,"column_start":9,"column_end":21},"name":"polygon_mode","qualname":"::pso::graphics::Rasterizer::polygon_mode","value":"pso::graphics::PolygonMode","parent":{"krate":0,"index":8699},"children":[],"decl_id":null,"docs":" How to rasterize this primitive.\n","sig":null,"attributes":[{"value":"/ How to rasterize this primitive.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186181,"byte_end":186217,"line_start":213,"line_end":213,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":8701},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186298,"byte_end":186307,"line_start":216,"line_end":216,"column_start":9,"column_end":18},"name":"cull_face","qualname":"::pso::graphics::Rasterizer::cull_face","value":"pso::output_merger::Face","parent":{"krate":0,"index":8699},"children":[],"decl_id":null,"docs":" Which face should be culled.\n","sig":null,"attributes":[{"value":"/ Which face should be culled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186257,"byte_end":186289,"line_start":215,"line_end":215,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":8702},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186400,"byte_end":186410,"line_start":218,"line_end":218,"column_start":9,"column_end":19},"name":"front_face","qualname":"::pso::graphics::Rasterizer::front_face","value":"pso::graphics::FrontFace","parent":{"krate":0,"index":8699},"children":[],"decl_id":null,"docs":" Which vertex winding is considered to be the front face for culling.\n","sig":null,"attributes":[{"value":"/ Which vertex winding is considered to be the front face for culling.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186319,"byte_end":186391,"line_start":217,"line_end":217,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":8703},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186642,"byte_end":186656,"line_start":222,"line_end":222,"column_start":9,"column_end":23},"name":"depth_clamping","qualname":"::pso::graphics::Rasterizer::depth_clamping","value":"bool","parent":{"krate":0,"index":8699},"children":[],"decl_id":null,"docs":" Whether or not to enable depth clamping; when enabled, instead of\n fragments being omitted when they are outside the bounds of the z-plane,\n they will be clamped to the min or max z value.\n","sig":null,"attributes":[{"value":"/ Whether or not to enable depth clamping; when enabled, instead of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186427,"byte_end":186496,"line_start":219,"line_end":219,"column_start":5,"column_end":74}},{"value":"/ fragments being omitted when they are outside the bounds of the z-plane,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186501,"byte_end":186577,"line_start":220,"line_end":220,"column_start":5,"column_end":81}},{"value":"/ they will be clamped to the min or max z value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186582,"byte_end":186633,"line_start":221,"line_end":221,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":8704},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186738,"byte_end":186748,"line_start":224,"line_end":224,"column_start":9,"column_end":19},"name":"depth_bias","qualname":"::pso::graphics::Rasterizer::depth_bias","value":"std::option::Option<pso::State<pso::graphics::DepthBias>>","parent":{"krate":0,"index":8699},"children":[],"decl_id":null,"docs":" What depth bias, if any, to use for the drawn primitives.\n","sig":null,"attributes":[{"value":"/ What depth bias, if any, to use for the drawn primitives.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186668,"byte_end":186729,"line_start":223,"line_end":223,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":8705},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186874,"byte_end":186886,"line_start":226,"line_end":226,"column_start":9,"column_end":21},"name":"conservative","qualname":"::pso::graphics::Rasterizer::conservative","value":"bool","parent":{"krate":0,"index":8699},"children":[],"decl_id":null,"docs":" Controls how triangles will be rasterized depending on their overlap with pixels.\n","sig":null,"attributes":[{"value":"/ Controls how triangles will be rasterized depending on their overlap with pixels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186780,"byte_end":186865,"line_start":225,"line_end":225,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":8706},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186954,"byte_end":186964,"line_start":228,"line_end":228,"column_start":9,"column_end":19},"name":"line_width","qualname":"::pso::graphics::Rasterizer::line_width","value":"pso::State<f32>","parent":{"krate":0,"index":8699},"children":[],"decl_id":null,"docs":" Controls width of rasterized line segments.\n","sig":null,"attributes":[{"value":"/ Controls width of rasterized line segments.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186898,"byte_end":186945,"line_start":227,"line_end":227,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187061,"byte_end":187065,"line_start":233,"line_end":233,"column_start":15,"column_end":19},"name":"FILL","qualname":"::pso::graphics::Rasterizer::FILL","value":"Self","parent":{"krate":0,"index":611},"children":[],"decl_id":null,"docs":" Simple polygon-filling rasterizer state\n","sig":null,"attributes":[{"value":"/ Simple polygon-filling rasterizer state","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187003,"byte_end":187046,"line_start":232,"line_end":232,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":8716},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187548,"byte_end":187557,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"BlendDesc","qualname":"::pso::graphics::BlendDesc","value":"BlendDesc { logic_op, targets }","parent":null,"children":[{"krate":0,"index":8717},{"krate":0,"index":8718}],"decl_id":null,"docs":" A description of an equation for how to blend transparent, overlapping fragments.\n","sig":null,"attributes":[{"value":"/ A description of an equation for how to blend transparent, overlapping fragments.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187344,"byte_end":187429,"line_start":244,"line_end":244,"column_start":1,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":8717},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187639,"byte_end":187647,"line_start":249,"line_end":249,"column_start":9,"column_end":17},"name":"logic_op","qualname":"::pso::graphics::BlendDesc::logic_op","value":"std::option::Option<pso::graphics::LogicOp>","parent":{"krate":0,"index":8716},"children":[],"decl_id":null,"docs":" The logic operation to apply to the blending equation, if any.\n","sig":null,"attributes":[{"value":"/ The logic operation to apply to the blending equation, if any.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187564,"byte_end":187630,"line_start":248,"line_end":248,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":8718},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187738,"byte_end":187745,"line_start":251,"line_end":251,"column_start":9,"column_end":16},"name":"targets","qualname":"::pso::graphics::BlendDesc::targets","value":"std::vec::Vec<pso::output_merger::ColorBlendDesc>","parent":{"krate":0,"index":8716},"children":[],"decl_id":null,"docs":" Which color targets to apply the blending operation to.\n","sig":null,"attributes":[{"value":"/ Which color targets to apply the blending operation to.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187670,"byte_end":187729,"line_start":250,"line_end":250,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8730},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187977,"byte_end":187982,"line_start":259,"line_end":259,"column_start":5,"column_end":10},"name":"Clear","qualname":"::pso::graphics::LogicOp::Clear","value":"LogicOp::Clear","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8733},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187992,"byte_end":187995,"line_start":260,"line_end":260,"column_start":5,"column_end":8},"name":"And","qualname":"::pso::graphics::LogicOp::And","value":"LogicOp::And","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8736},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188005,"byte_end":188015,"line_start":261,"line_end":261,"column_start":5,"column_end":15},"name":"AndReverse","qualname":"::pso::graphics::LogicOp::AndReverse","value":"LogicOp::AndReverse","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8739},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188025,"byte_end":188029,"line_start":262,"line_end":262,"column_start":5,"column_end":9},"name":"Copy","qualname":"::pso::graphics::LogicOp::Copy","value":"LogicOp::Copy","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8742},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188039,"byte_end":188050,"line_start":263,"line_end":263,"column_start":5,"column_end":16},"name":"AndInverted","qualname":"::pso::graphics::LogicOp::AndInverted","value":"LogicOp::AndInverted","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8745},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188060,"byte_end":188064,"line_start":264,"line_end":264,"column_start":5,"column_end":9},"name":"NoOp","qualname":"::pso::graphics::LogicOp::NoOp","value":"LogicOp::NoOp","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8748},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188074,"byte_end":188077,"line_start":265,"line_end":265,"column_start":5,"column_end":8},"name":"Xor","qualname":"::pso::graphics::LogicOp::Xor","value":"LogicOp::Xor","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8751},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188087,"byte_end":188089,"line_start":266,"line_end":266,"column_start":5,"column_end":7},"name":"Or","qualname":"::pso::graphics::LogicOp::Or","value":"LogicOp::Or","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8754},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188099,"byte_end":188102,"line_start":267,"line_end":267,"column_start":5,"column_end":8},"name":"Nor","qualname":"::pso::graphics::LogicOp::Nor","value":"LogicOp::Nor","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188112,"byte_end":188122,"line_start":268,"line_end":268,"column_start":5,"column_end":15},"name":"Equivalent","qualname":"::pso::graphics::LogicOp::Equivalent","value":"LogicOp::Equivalent","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8760},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188132,"byte_end":188138,"line_start":269,"line_end":269,"column_start":5,"column_end":11},"name":"Invert","qualname":"::pso::graphics::LogicOp::Invert","value":"LogicOp::Invert","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8763},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188149,"byte_end":188158,"line_start":270,"line_end":270,"column_start":5,"column_end":14},"name":"OrReverse","qualname":"::pso::graphics::LogicOp::OrReverse","value":"LogicOp::OrReverse","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8766},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188169,"byte_end":188181,"line_start":271,"line_end":271,"column_start":5,"column_end":17},"name":"CopyInverted","qualname":"::pso::graphics::LogicOp::CopyInverted","value":"LogicOp::CopyInverted","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8769},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188192,"byte_end":188202,"line_start":272,"line_end":272,"column_start":5,"column_end":15},"name":"OrInverted","qualname":"::pso::graphics::LogicOp::OrInverted","value":"LogicOp::OrInverted","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8772},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188213,"byte_end":188217,"line_start":273,"line_end":273,"column_start":5,"column_end":9},"name":"Nand","qualname":"::pso::graphics::LogicOp::Nand","value":"LogicOp::Nand","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":8775},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188228,"byte_end":188231,"line_start":274,"line_end":274,"column_start":5,"column_end":8},"name":"Set","qualname":"::pso::graphics::LogicOp::Set","value":"LogicOp::Set","parent":{"krate":0,"index":8729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":8729},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187963,"byte_end":187970,"line_start":258,"line_end":258,"column_start":10,"column_end":17},"name":"LogicOp","qualname":"::pso::graphics::LogicOp","value":"LogicOp::{Clear, And, AndReverse, Copy, AndInverted, NoOp, Xor, Or, Nor, Equivalent, Invert, OrReverse, CopyInverted, OrInverted, Nand, Set}","parent":null,"children":[{"krate":0,"index":8730},{"krate":0,"index":8733},{"krate":0,"index":8736},{"krate":0,"index":8739},{"krate":0,"index":8742},{"krate":0,"index":8745},{"krate":0,"index":8748},{"krate":0,"index":8751},{"krate":0,"index":8754},{"krate":0,"index":8757},{"krate":0,"index":8760},{"krate":0,"index":8763},{"krate":0,"index":8766},{"krate":0,"index":8769},{"krate":0,"index":8772},{"krate":0,"index":8775}],"decl_id":null,"docs":" Logic operations used for specifying blend equations.\n","sig":null,"attributes":[{"value":"/ Logic operations used for specifying blend equations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187771,"byte_end":187828,"line_start":254,"line_end":254,"column_start":1,"column_end":58}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":187931,"byte_end":187953,"line_start":257,"line_end":257,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188254,"byte_end":188264,"line_start":278,"line_end":278,"column_start":10,"column_end":20},"name":"SampleMask","qualname":"::pso::graphics::SampleMask","value":"u64","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188241,"byte_end":188244,"line_start":277,"line_end":277,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":8788},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188323,"byte_end":188336,"line_start":282,"line_end":282,"column_start":12,"column_end":25},"name":"Multisampling","qualname":"::pso::graphics::Multisampling","value":"Multisampling { rasterization_samples, sample_shading, sample_mask, alpha_coverage, alpha_to_one }","parent":null,"children":[{"krate":0,"index":8789},{"krate":0,"index":8790},{"krate":0,"index":8791},{"krate":0,"index":8792},{"krate":0,"index":8793}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188273,"byte_end":188276,"line_start":280,"line_end":280,"column_start":1,"column_end":4}}]},{"kind":"Field","id":{"krate":0,"index":8789},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188355,"byte_end":188376,"line_start":284,"line_end":284,"column_start":9,"column_end":30},"name":"rasterization_samples","qualname":"::pso::graphics::Multisampling::rasterization_samples","value":"u8","parent":{"krate":0,"index":8788},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188343,"byte_end":188346,"line_start":283,"line_end":283,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":8790},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188413,"byte_end":188427,"line_start":286,"line_end":286,"column_start":9,"column_end":23},"name":"sample_shading","qualname":"::pso::graphics::Multisampling::sample_shading","value":"std::option::Option<f32>","parent":{"krate":0,"index":8788},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188401,"byte_end":188404,"line_start":285,"line_end":285,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":8791},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188458,"byte_end":188469,"line_start":288,"line_end":288,"column_start":9,"column_end":20},"name":"sample_mask","qualname":"::pso::graphics::Multisampling::sample_mask","value":"u64","parent":{"krate":0,"index":8788},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188446,"byte_end":188449,"line_start":287,"line_end":287,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":8792},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188779,"byte_end":188793,"line_start":292,"line_end":292,"column_start":9,"column_end":23},"name":"alpha_coverage","qualname":"::pso::graphics::Multisampling::alpha_coverage","value":"bool","parent":{"krate":0,"index":8788},"children":[],"decl_id":null,"docs":" Toggles alpha-to-coverage multisampling, which can produce nicer edges\n when many partially-transparent polygons are overlapping.\n See [here]( https://msdn.microsoft.com/en-us/library/windows/desktop/bb205072(v=vs.85).aspx#Alpha_To_Coverage) for a full description.\n","sig":null,"attributes":[{"value":"/ Toggles alpha-to-coverage multisampling, which can produce nicer edges","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188487,"byte_end":188561,"line_start":289,"line_end":289,"column_start":5,"column_end":79}},{"value":"/ when many partially-transparent polygons are overlapping.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188566,"byte_end":188627,"line_start":290,"line_end":290,"column_start":5,"column_end":66}},{"value":"/ See [here]( https://msdn.microsoft.com/en-us/library/windows/desktop/bb205072(v=vs.85).aspx#Alpha_To_Coverage) for a full description.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188632,"byte_end":188770,"line_start":291,"line_end":291,"column_start":5,"column_end":143}}]},{"kind":"Field","id":{"krate":0,"index":8793},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188817,"byte_end":188829,"line_start":294,"line_end":294,"column_start":9,"column_end":21},"name":"alpha_to_one","qualname":"::pso::graphics::Multisampling::alpha_to_one","value":"bool","parent":{"krate":0,"index":8788},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":188805,"byte_end":188808,"line_start":293,"line_end":293,"column_start":5,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":618},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189016,"byte_end":189024,"line_start":7,"line_end":7,"column_start":10,"column_end":18},"name":"Location","qualname":"::pso::input_assembler::Location","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Shader binding location.\n","sig":null,"attributes":[{"value":"/ Shader binding location.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":188978,"byte_end":189006,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":619},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189071,"byte_end":189082,"line_start":9,"line_end":9,"column_start":10,"column_end":21},"name":"BufferIndex","qualname":"::pso::input_assembler::BufferIndex","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Index of a vertex buffer.\n","sig":null,"attributes":[{"value":"/ Index of a vertex buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189032,"byte_end":189061,"line_start":8,"line_end":8,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":620},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189165,"byte_end":189175,"line_start":11,"line_end":11,"column_start":10,"column_end":20},"name":"ElemOffset","qualname":"::pso::input_assembler::ElemOffset","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset of an attribute from the start of the buffer, in bytes\n","sig":null,"attributes":[{"value":"/ Offset of an attribute from the start of the buffer, in bytes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189090,"byte_end":189155,"line_start":10,"line_end":10,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":621},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189238,"byte_end":189248,"line_start":13,"line_end":13,"column_start":10,"column_end":20},"name":"ElemStride","qualname":"::pso::input_assembler::ElemStride","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Offset between attribute values, in bytes\n","sig":null,"attributes":[{"value":"/ Offset between attribute values, in bytes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189183,"byte_end":189228,"line_start":12,"line_end":12,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":622},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189336,"byte_end":189348,"line_start":15,"line_end":15,"column_start":10,"column_end":22},"name":"InstanceRate","qualname":"::pso::input_assembler::InstanceRate","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Number of instances between each advancement of the vertex buffer.\n","sig":null,"attributes":[{"value":"/ Number of instances between each advancement of the vertex buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189256,"byte_end":189326,"line_start":14,"line_end":14,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":623},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189398,"byte_end":189407,"line_start":17,"line_end":17,"column_start":10,"column_end":19},"name":"PatchSize","qualname":"::pso::input_assembler::PatchSize","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" Number of vertices in a patch\n","sig":null,"attributes":[{"value":"/ Number of vertices in a patch","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189355,"byte_end":189388,"line_start":16,"line_end":16,"column_start":1,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8803},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189699,"byte_end":189705,"line_start":24,"line_end":24,"column_start":5,"column_end":11},"name":"Vertex","qualname":"::pso::input_assembler::VertexInputRate::Vertex","value":"VertexInputRate::Vertex","parent":{"krate":0,"index":8802},"children":[],"decl_id":null,"docs":" Advance the buffer after every vertex\n","sig":null,"attributes":[{"value":"/ Advance the buffer after every vertex","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189653,"byte_end":189694,"line_start":23,"line_end":23,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8805},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189759,"byte_end":189767,"line_start":26,"line_end":26,"column_start":5,"column_end":13},"name":"Instance","qualname":"::pso::input_assembler::VertexInputRate::Instance","value":"VertexInputRate::Instance(InstanceRate)","parent":{"krate":0,"index":8802},"children":[],"decl_id":null,"docs":" Advance the buffer after every instance\n","sig":null,"attributes":[{"value":"/ Advance the buffer after every instance","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189711,"byte_end":189754,"line_start":25,"line_end":25,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":8802},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189631,"byte_end":189646,"line_start":22,"line_end":22,"column_start":10,"column_end":25},"name":"VertexInputRate","qualname":"::pso::input_assembler::VertexInputRate","value":"VertexInputRate::{Vertex, Instance}","parent":null,"children":[{"krate":0,"index":8803},{"krate":0,"index":8805}],"decl_id":null,"docs":" The rate at which to advance input data to shaders for the given buffer\n","sig":null,"attributes":[{"value":"/ The rate at which to advance input data to shaders for the given buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189415,"byte_end":189490,"line_start":19,"line_end":19,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189871,"byte_end":189878,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"as_uint","qualname":"<VertexInputRate>::as_uint","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the numeric representation of the rate\n","sig":null,"attributes":[{"value":"/ Get the numeric representation of the rate","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189813,"byte_end":189859,"line_start":30,"line_end":30,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":8831},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190211,"byte_end":190218,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"Element","qualname":"::pso::input_assembler::Element","value":"Element { format, offset }","parent":null,"children":[{"krate":0,"index":8833},{"krate":0,"index":8834}],"decl_id":null,"docs":" A struct element descriptor.\n","sig":null,"attributes":[{"value":"/ A struct element descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190036,"byte_end":190068,"line_start":39,"line_end":39,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":8833},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190255,"byte_end":190261,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"name":"format","qualname":"::pso::input_assembler::Element::format","value":"F","parent":{"krate":0,"index":8831},"children":[],"decl_id":null,"docs":" Element format\n","sig":null,"attributes":[{"value":"/ Element format","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190228,"byte_end":190246,"line_start":43,"line_end":43,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":8834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190335,"byte_end":190341,"line_start":46,"line_end":46,"column_start":9,"column_end":15},"name":"offset","qualname":"::pso::input_assembler::Element::offset","value":"u32","parent":{"krate":0,"index":8831},"children":[],"decl_id":null,"docs":" Offset from the beginning of the container, in bytes\n","sig":null,"attributes":[{"value":"/ Offset from the beginning of the container, in bytes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190270,"byte_end":190326,"line_start":45,"line_end":45,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":8872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190618,"byte_end":190634,"line_start":53,"line_end":53,"column_start":12,"column_end":28},"name":"VertexBufferDesc","qualname":"::pso::input_assembler::VertexBufferDesc","value":"VertexBufferDesc { binding, stride, rate }","parent":null,"children":[{"krate":0,"index":8873},{"krate":0,"index":8874},{"krate":0,"index":8875}],"decl_id":null,"docs":" Vertex buffer description. Notably, completely separate from resource `Descriptor`s\n used in `DescriptorSet`s.\n","sig":null,"attributes":[{"value":"/ Vertex buffer description. Notably, completely separate from resource `Descriptor`s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190358,"byte_end":190445,"line_start":49,"line_end":49,"column_start":1,"column_end":88}},{"value":"/ used in `DescriptorSet`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190446,"byte_end":190475,"line_start":50,"line_end":50,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":8873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190838,"byte_end":190845,"line_start":57,"line_end":57,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::input_assembler::VertexBufferDesc::binding","value":"u32","parent":{"krate":0,"index":8872},"children":[],"decl_id":null,"docs":" Binding number of this vertex buffer. This binding number is\n used only for vertex buffers, and is completely separate from\n `Descriptor` and `DescriptorSet` bind points.\n","sig":null,"attributes":[{"value":"/ Binding number of this vertex buffer. This binding number is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190641,"byte_end":190705,"line_start":54,"line_end":54,"column_start":5,"column_end":69}},{"value":"/ used only for vertex buffers, and is completely separate from","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190710,"byte_end":190775,"line_start":55,"line_end":55,"column_start":5,"column_end":70}},{"value":"/ `Descriptor` and `DescriptorSet` bind points.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190780,"byte_end":190829,"line_start":56,"line_end":56,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":8874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190978,"byte_end":190984,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"name":"stride","qualname":"::pso::input_assembler::VertexBufferDesc::stride","value":"u32","parent":{"krate":0,"index":8872},"children":[],"decl_id":null,"docs":" Total container size, in bytes.\n Specifies the byte distance between two consecutive elements.\n","sig":null,"attributes":[{"value":"/ Total container size, in bytes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190864,"byte_end":190899,"line_start":58,"line_end":58,"column_start":5,"column_end":40}},{"value":"/ Specifies the byte distance between two consecutive elements.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":190904,"byte_end":190969,"line_start":59,"line_end":59,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":8875},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191175,"byte_end":191179,"line_start":65,"line_end":65,"column_start":9,"column_end":13},"name":"rate","qualname":"::pso::input_assembler::VertexBufferDesc::rate","value":"pso::input_assembler::VertexInputRate","parent":{"krate":0,"index":8872},"children":[],"decl_id":null,"docs":" The rate at which to advance data for the given buffer","sig":null,"attributes":[{"value":"/ The rate at which to advance data for the given buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191002,"byte_end":191060,"line_start":61,"line_end":61,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191065,"byte_end":191068,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ i.e. the rate at which data passed to shaders will get advanced by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191073,"byte_end":191143,"line_start":63,"line_end":63,"column_start":5,"column_end":75}},{"value":"/ `stride` bytes","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191148,"byte_end":191166,"line_start":64,"line_end":64,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191464,"byte_end":191477,"line_start":72,"line_end":72,"column_start":12,"column_end":25},"name":"AttributeDesc","qualname":"::pso::input_assembler::AttributeDesc","value":"AttributeDesc { location, binding, element }","parent":null,"children":[{"krate":0,"index":8908},{"krate":0,"index":8909},{"krate":0,"index":8910}],"decl_id":null,"docs":" Vertex attribute description. Notably, completely separate from resource `Descriptor`s\n used in `DescriptorSet`s.\n","sig":null,"attributes":[{"value":"/ Vertex attribute description. Notably, completely separate from resource `Descriptor`s","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191201,"byte_end":191291,"line_start":68,"line_end":68,"column_start":1,"column_end":91}},{"value":"/ used in `DescriptorSet`s.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191292,"byte_end":191321,"line_start":69,"line_end":69,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":8908},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191786,"byte_end":191794,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"name":"location","qualname":"::pso::input_assembler::AttributeDesc::location","value":"u32","parent":{"krate":0,"index":8907},"children":[],"decl_id":null,"docs":" Attribute binding location in the shader. Attribute locations are\n shared between all vertex buffers in a pipeline, meaning that even if the\n data for this attribute comes from a different vertex buffer, it still cannot\n share the same location with another attribute.\n","sig":null,"attributes":[{"value":"/ Attribute binding location in the shader. Attribute locations are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191484,"byte_end":191553,"line_start":73,"line_end":73,"column_start":5,"column_end":74}},{"value":"/ shared between all vertex buffers in a pipeline, meaning that even if the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191558,"byte_end":191635,"line_start":74,"line_end":74,"column_start":5,"column_end":82}},{"value":"/ data for this attribute comes from a different vertex buffer, it still cannot","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191640,"byte_end":191721,"line_start":75,"line_end":75,"column_start":5,"column_end":86}},{"value":"/ share the same location with another attribute.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191726,"byte_end":191777,"line_start":76,"line_end":76,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":8909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191870,"byte_end":191877,"line_start":79,"line_end":79,"column_start":9,"column_end":16},"name":"binding","qualname":"::pso::input_assembler::AttributeDesc::binding","value":"u32","parent":{"krate":0,"index":8907},"children":[],"decl_id":null,"docs":" Binding number of the associated vertex buffer.\n","sig":null,"attributes":[{"value":"/ Binding number of the associated vertex buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191810,"byte_end":191861,"line_start":78,"line_end":78,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":8910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191939,"byte_end":191946,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"element","qualname":"::pso::input_assembler::AttributeDesc::element","value":"pso::input_assembler::Element<format::Format>","parent":{"krate":0,"index":8907},"children":[],"decl_id":null,"docs":" Attribute element description.\n","sig":null,"attributes":[{"value":"/ Attribute element description.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191896,"byte_end":191930,"line_start":80,"line_end":80,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8943},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192269,"byte_end":192278,"line_start":91,"line_end":91,"column_start":5,"column_end":14},"name":"PointList","qualname":"::pso::input_assembler::Primitive::PointList","value":"Primitive::PointList","parent":{"krate":0,"index":8942},"children":[],"decl_id":null,"docs":" Each vertex represents a single point.\n","sig":null,"attributes":[{"value":"/ Each vertex represents a single point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192222,"byte_end":192264,"line_start":90,"line_end":90,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8945},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192464,"byte_end":192472,"line_start":94,"line_end":94,"column_start":5,"column_end":13},"name":"LineList","qualname":"::pso::input_assembler::Primitive::LineList","value":"Primitive::LineList","parent":{"krate":0,"index":8942},"children":[],"decl_id":null,"docs":" Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,\n e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.\n","sig":null,"attributes":[{"value":"/ Each pair of vertices represent a single line segment. For example, with `[a, b, c, d,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192284,"byte_end":192374,"line_start":92,"line_end":92,"column_start":5,"column_end":95}},{"value":"/ e]`, `a` and `b` form a line, `c` and `d` form a line, and `e` is discarded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192379,"byte_end":192459,"line_start":93,"line_end":93,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8947},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192717,"byte_end":192726,"line_start":98,"line_end":98,"column_start":5,"column_end":14},"name":"LineStrip","qualname":"::pso::input_assembler::Primitive::LineStrip","value":"Primitive::LineStrip","parent":{"krate":0,"index":8942},"children":[],"decl_id":null,"docs":" Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of\n lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line\n line, and `b` and `c` form a line.\n","sig":null,"attributes":[{"value":"/ Every two consecutive vertices represent a single line segment. Visually forms a \"path\" of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192478,"byte_end":192572,"line_start":95,"line_end":95,"column_start":5,"column_end":99}},{"value":"/ lines, as they are all connected. For example, with `[a, b, c]`, `a` and `b` form a line","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192577,"byte_end":192669,"line_start":96,"line_end":96,"column_start":5,"column_end":97}},{"value":"/ line, and `b` and `c` form a line.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192674,"byte_end":192712,"line_start":97,"line_end":97,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8949},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192901,"byte_end":192913,"line_start":101,"line_end":101,"column_start":5,"column_end":17},"name":"TriangleList","qualname":"::pso::input_assembler::Primitive::TriangleList","value":"Primitive::TriangleList","parent":{"krate":0,"index":8942},"children":[],"decl_id":null,"docs":" Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,\n `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.\n","sig":null,"attributes":[{"value":"/ Each triplet of vertices represent a single triangle. For example, with `[a, b, c, d, e]`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192732,"byte_end":192826,"line_start":99,"line_end":99,"column_start":5,"column_end":99}},{"value":"/ `a`, `b`, and `c` form a triangle, `d` and `e` are discarded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192831,"byte_end":192896,"line_start":100,"line_end":100,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8951},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193105,"byte_end":193118,"line_start":104,"line_end":104,"column_start":5,"column_end":18},"name":"TriangleStrip","qualname":"::pso::input_assembler::Primitive::TriangleStrip","value":"Primitive::TriangleStrip","parent":{"krate":0,"index":8942},"children":[],"decl_id":null,"docs":" Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,\n d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.\n","sig":null,"attributes":[{"value":"/ Every three consecutive vertices represent a single triangle. For example, with `[a, b, c,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192919,"byte_end":193013,"line_start":102,"line_end":102,"column_start":5,"column_end":99}},{"value":"/ d]`, `a`, `b`, and `c` form a triangle, and `b`, `c`, and `d` form a triangle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193018,"byte_end":193100,"line_start":103,"line_end":103,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8953},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193230,"byte_end":193239,"line_start":107,"line_end":107,"column_start":5,"column_end":14},"name":"PatchList","qualname":"::pso::input_assembler::Primitive::PatchList","value":"Primitive::PatchList(PatchSize)","parent":{"krate":0,"index":8942},"children":[],"decl_id":null,"docs":" Patch list,\n used with shaders capable of producing primitives on their own (tessellation)\n","sig":null,"attributes":[{"value":"/ Patch list,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193124,"byte_end":193139,"line_start":105,"line_end":105,"column_start":5,"column_end":20}},{"value":"/ used with shaders capable of producing primitives on their own (tessellation)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193144,"byte_end":193225,"line_start":106,"line_end":106,"column_start":5,"column_end":86}}]},{"kind":"Enum","id":{"krate":0,"index":8942},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192206,"byte_end":192215,"line_start":89,"line_end":89,"column_start":10,"column_end":19},"name":"Primitive","qualname":"::pso::input_assembler::Primitive","value":"Primitive::{PointList, LineList, LineStrip, TriangleList, TriangleStrip, PatchList}","parent":null,"children":[{"krate":0,"index":8943},{"krate":0,"index":8945},{"krate":0,"index":8947},{"krate":0,"index":8949},{"krate":0,"index":8951},{"krate":0,"index":8953}],"decl_id":null,"docs":" Describes the type of geometric primitives,\n created from vertex data.\n","sig":null,"attributes":[{"value":"/ Describes the type of geometric primitives,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":191976,"byte_end":192023,"line_start":84,"line_end":84,"column_start":1,"column_end":48}},{"value":"/ created from vertex data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192024,"byte_end":192053,"line_start":85,"line_end":85,"column_start":1,"column_end":30}},{"value":"repr(u8)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":192185,"byte_end":192196,"line_start":88,"line_end":88,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8979},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193446,"byte_end":193464,"line_start":113,"line_end":113,"column_start":12,"column_end":30},"name":"InputAssemblerDesc","qualname":"::pso::input_assembler::InputAssemblerDesc","value":"InputAssemblerDesc { primitive, with_adjacency, restart_index }","parent":null,"children":[{"krate":0,"index":8980},{"krate":0,"index":8981},{"krate":0,"index":8982}],"decl_id":null,"docs":" All the information needed to create an input assembler.\n","sig":null,"attributes":[{"value":"/ All the information needed to create an input assembler.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193255,"byte_end":193315,"line_start":110,"line_end":110,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":8980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193505,"byte_end":193514,"line_start":115,"line_end":115,"column_start":9,"column_end":18},"name":"primitive","qualname":"::pso::input_assembler::InputAssemblerDesc::primitive","value":"pso::input_assembler::Primitive","parent":{"krate":0,"index":8979},"children":[],"decl_id":null,"docs":" Type of the primitive\n","sig":null,"attributes":[{"value":"/ Type of the primitive","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193471,"byte_end":193496,"line_start":114,"line_end":114,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":8981},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194111,"byte_end":194125,"line_start":125,"line_end":125,"column_start":9,"column_end":23},"name":"with_adjacency","qualname":"::pso::input_assembler::InputAssemblerDesc::with_adjacency","value":"bool","parent":{"krate":0,"index":8979},"children":[],"decl_id":null,"docs":" When adjacency information is enabled, every even-numbered vertex\n (every other starting from the first) represents an additional\n vertex for the primitive, while odd-numbered vertices (every other starting from the\n second) represent adjacent vertices.","sig":null,"attributes":[{"value":"/ When adjacency information is enabled, every even-numbered vertex","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193531,"byte_end":193600,"line_start":116,"line_end":116,"column_start":5,"column_end":74}},{"value":"/ (every other starting from the first) represents an additional","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193605,"byte_end":193671,"line_start":117,"line_end":117,"column_start":5,"column_end":71}},{"value":"/ vertex for the primitive, while odd-numbered vertices (every other starting from the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193676,"byte_end":193764,"line_start":118,"line_end":118,"column_start":5,"column_end":93}},{"value":"/ second) represent adjacent vertices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193769,"byte_end":193809,"line_start":119,"line_end":119,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193814,"byte_end":193817,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ For example, with `[a, b, c, d, e, f, g, h]`, `[a, c,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193822,"byte_end":193879,"line_start":121,"line_end":121,"column_start":5,"column_end":62}},{"value":"/ e, g]` form a triangle strip, and `[b, d, f, h]` are the adjacent vertices, where `b`, `d`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193884,"byte_end":193979,"line_start":122,"line_end":122,"column_start":5,"column_end":100}},{"value":"/ and `f` are adjacent to the first triangle in the strip, and `d`, `f`, and `h` are adjacent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":193984,"byte_end":194079,"line_start":123,"line_end":123,"column_start":5,"column_end":100}},{"value":"/ to the second.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194084,"byte_end":194102,"line_start":124,"line_end":124,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":8982},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194511,"byte_end":194524,"line_start":133,"line_end":133,"column_start":9,"column_end":22},"name":"restart_index","qualname":"::pso::input_assembler::InputAssemblerDesc::restart_index","value":"std::option::Option<IndexType>","parent":{"krate":0,"index":8979},"children":[],"decl_id":null,"docs":" Describes whether or not primitive restart is supported for\n an input assembler. Primitive restart is a feature that\n allows a mark to be placed in an index buffer where it is\n is \"broken\" into multiple pieces of geometry.","sig":null,"attributes":[{"value":"/ Describes whether or not primitive restart is supported for","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194137,"byte_end":194200,"line_start":126,"line_end":126,"column_start":5,"column_end":68}},{"value":"/ an input assembler. Primitive restart is a feature that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194205,"byte_end":194264,"line_start":127,"line_end":127,"column_start":5,"column_end":64}},{"value":"/ allows a mark to be placed in an index buffer where it is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194269,"byte_end":194330,"line_start":128,"line_end":128,"column_start":5,"column_end":66}},{"value":"/ is \"broken\" into multiple pieces of geometry.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194335,"byte_end":194384,"line_start":129,"line_end":129,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194389,"byte_end":194392,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ See <https://www.khronos.org/opengl/wiki/Vertex_Rendering#Primitive_Restart>","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194397,"byte_end":194477,"line_start":131,"line_end":131,"column_start":5,"column_end":85}},{"value":"/ for more detail.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194482,"byte_end":194502,"line_start":132,"line_end":132,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194660,"byte_end":194663,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<InputAssemblerDesc>::new","value":"fn (primitive: Primitive) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new IA descriptor without primitive restart or adjucency.\n","sig":null,"attributes":[{"value":"/ Create a new IA descriptor without primitive restart or adjucency.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194578,"byte_end":194648,"line_start":137,"line_end":137,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9011},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195266,"byte_end":195271,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Never","qualname":"::pso::output_merger::Comparison::Never","value":"Comparison::Never","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `false`\n","sig":null,"attributes":[{"value":"/ `false`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195250,"byte_end":195261,"line_start":11,"line_end":11,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9014},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195297,"byte_end":195301,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Less","qualname":"::pso::output_merger::Comparison::Less","value":"Comparison::Less","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `x < y`\n","sig":null,"attributes":[{"value":"/ `x < y`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195281,"byte_end":195292,"line_start":13,"line_end":13,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9017},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195328,"byte_end":195333,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Equal","qualname":"::pso::output_merger::Comparison::Equal","value":"Comparison::Equal","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `x == y`\n","sig":null,"attributes":[{"value":"/ `x == y`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195311,"byte_end":195323,"line_start":15,"line_end":15,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9020},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195360,"byte_end":195369,"line_start":18,"line_end":18,"column_start":5,"column_end":14},"name":"LessEqual","qualname":"::pso::output_merger::Comparison::LessEqual","value":"Comparison::LessEqual","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `x <= y`\n","sig":null,"attributes":[{"value":"/ `x <= y`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195343,"byte_end":195355,"line_start":17,"line_end":17,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195395,"byte_end":195402,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Greater","qualname":"::pso::output_merger::Comparison::Greater","value":"Comparison::Greater","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `x > y`\n","sig":null,"attributes":[{"value":"/ `x > y`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195379,"byte_end":195390,"line_start":19,"line_end":19,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9026},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195429,"byte_end":195437,"line_start":22,"line_end":22,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::pso::output_merger::Comparison::NotEqual","value":"Comparison::NotEqual","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `x != y`\n","sig":null,"attributes":[{"value":"/ `x != y`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195412,"byte_end":195424,"line_start":21,"line_end":21,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195464,"byte_end":195476,"line_start":24,"line_end":24,"column_start":5,"column_end":17},"name":"GreaterEqual","qualname":"::pso::output_merger::Comparison::GreaterEqual","value":"Comparison::GreaterEqual","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `x >= y`\n","sig":null,"attributes":[{"value":"/ `x >= y`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195447,"byte_end":195459,"line_start":23,"line_end":23,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9032},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195501,"byte_end":195507,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Always","qualname":"::pso::output_merger::Comparison::Always","value":"Comparison::Always","parent":{"krate":0,"index":9010},"children":[],"decl_id":null,"docs":" `true`\n","sig":null,"attributes":[{"value":"/ `true`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195486,"byte_end":195496,"line_start":25,"line_end":25,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":9010},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195233,"byte_end":195243,"line_start":10,"line_end":10,"column_start":10,"column_end":20},"name":"Comparison","qualname":"::pso::output_merger::Comparison","value":"Comparison::{Never, Less, Equal, LessEqual, Greater, NotEqual, GreaterEqual, Always}","parent":null,"children":[{"krate":0,"index":9011},{"krate":0,"index":9014},{"krate":0,"index":9017},{"krate":0,"index":9020},{"krate":0,"index":9023},{"krate":0,"index":9026},{"krate":0,"index":9029},{"krate":0,"index":9032}],"decl_id":null,"docs":" A pixel-wise comparison function.\n","sig":null,"attributes":[{"value":"/ A pixel-wise comparison function.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195055,"byte_end":195092,"line_start":7,"line_end":7,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":9053},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195643,"byte_end":195652,"line_start":32,"line_end":32,"column_start":16,"column_end":25},"name":"ColorMask","qualname":"::pso::output_merger::ColorMask","value":"ColorMask {  }","parent":null,"children":[{"krate":0,"index":9054}],"decl_id":null,"docs":" Target output color mask.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9096},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195694,"byte_end":195697,"line_start":34,"line_end":34,"column_start":15,"column_end":18},"name":"RED","qualname":"::pso::output_merger::ColorMask::RED","value":"ColorMask","parent":{"krate":0,"index":9095},"children":[],"decl_id":null,"docs":" Red mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9097},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195746,"byte_end":195751,"line_start":36,"line_end":36,"column_start":15,"column_end":20},"name":"GREEN","qualname":"::pso::output_merger::ColorMask::GREEN","value":"ColorMask","parent":{"krate":0,"index":9095},"children":[],"decl_id":null,"docs":" Green mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9098},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195797,"byte_end":195801,"line_start":38,"line_end":38,"column_start":15,"column_end":19},"name":"BLUE","qualname":"::pso::output_merger::ColorMask::BLUE","value":"ColorMask","parent":{"krate":0,"index":9095},"children":[],"decl_id":null,"docs":" Blue mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9099},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195857,"byte_end":195862,"line_start":40,"line_end":40,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::pso::output_merger::ColorMask::ALPHA","value":"ColorMask","parent":{"krate":0,"index":9095},"children":[],"decl_id":null,"docs":" Alpha channel mask\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9100},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195920,"byte_end":195925,"line_start":42,"line_end":42,"column_start":15,"column_end":20},"name":"COLOR","qualname":"::pso::output_merger::ColorMask::COLOR","value":"ColorMask","parent":{"krate":0,"index":9095},"children":[],"decl_id":null,"docs":" Mask for RGB channels\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":195979,"byte_end":195982,"line_start":44,"line_end":44,"column_start":15,"column_end":18},"name":"ALL","qualname":"::pso::output_merger::ColorMask::ALL","value":"ColorMask","parent":{"krate":0,"index":9095},"children":[],"decl_id":null,"docs":" Mask all channels\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9102},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196038,"byte_end":196042,"line_start":46,"line_end":46,"column_start":15,"column_end":19},"name":"NONE","qualname":"::pso::output_merger::ColorMask::NONE","value":"ColorMask","parent":{"krate":0,"index":9095},"children":[],"decl_id":null,"docs":" Mask no channels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9170},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196484,"byte_end":196488,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Zero","qualname":"::pso::output_merger::Factor::Zero","value":"Factor::Zero","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9173},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196498,"byte_end":196501,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"One","qualname":"::pso::output_merger::Factor::One","value":"Factor::One","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9176},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196511,"byte_end":196519,"line_start":65,"line_end":65,"column_start":5,"column_end":13},"name":"SrcColor","qualname":"::pso::output_merger::Factor::SrcColor","value":"Factor::SrcColor","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9179},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196529,"byte_end":196545,"line_start":66,"line_end":66,"column_start":5,"column_end":21},"name":"OneMinusSrcColor","qualname":"::pso::output_merger::Factor::OneMinusSrcColor","value":"Factor::OneMinusSrcColor","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9182},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196555,"byte_end":196563,"line_start":67,"line_end":67,"column_start":5,"column_end":13},"name":"DstColor","qualname":"::pso::output_merger::Factor::DstColor","value":"Factor::DstColor","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9185},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196573,"byte_end":196589,"line_start":68,"line_end":68,"column_start":5,"column_end":21},"name":"OneMinusDstColor","qualname":"::pso::output_merger::Factor::OneMinusDstColor","value":"Factor::OneMinusDstColor","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9188},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196599,"byte_end":196607,"line_start":69,"line_end":69,"column_start":5,"column_end":13},"name":"SrcAlpha","qualname":"::pso::output_merger::Factor::SrcAlpha","value":"Factor::SrcAlpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9191},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196617,"byte_end":196633,"line_start":70,"line_end":70,"column_start":5,"column_end":21},"name":"OneMinusSrcAlpha","qualname":"::pso::output_merger::Factor::OneMinusSrcAlpha","value":"Factor::OneMinusSrcAlpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9194},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196643,"byte_end":196651,"line_start":71,"line_end":71,"column_start":5,"column_end":13},"name":"DstAlpha","qualname":"::pso::output_merger::Factor::DstAlpha","value":"Factor::DstAlpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196661,"byte_end":196677,"line_start":72,"line_end":72,"column_start":5,"column_end":21},"name":"OneMinusDstAlpha","qualname":"::pso::output_merger::Factor::OneMinusDstAlpha","value":"Factor::OneMinusDstAlpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9200},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196687,"byte_end":196697,"line_start":73,"line_end":73,"column_start":5,"column_end":15},"name":"ConstColor","qualname":"::pso::output_merger::Factor::ConstColor","value":"Factor::ConstColor","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9203},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196708,"byte_end":196726,"line_start":74,"line_end":74,"column_start":5,"column_end":23},"name":"OneMinusConstColor","qualname":"::pso::output_merger::Factor::OneMinusConstColor","value":"Factor::OneMinusConstColor","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9206},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196737,"byte_end":196747,"line_start":75,"line_end":75,"column_start":5,"column_end":15},"name":"ConstAlpha","qualname":"::pso::output_merger::Factor::ConstAlpha","value":"Factor::ConstAlpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9209},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196758,"byte_end":196776,"line_start":76,"line_end":76,"column_start":5,"column_end":23},"name":"OneMinusConstAlpha","qualname":"::pso::output_merger::Factor::OneMinusConstAlpha","value":"Factor::OneMinusConstAlpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9212},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196787,"byte_end":196803,"line_start":77,"line_end":77,"column_start":5,"column_end":21},"name":"SrcAlphaSaturate","qualname":"::pso::output_merger::Factor::SrcAlphaSaturate","value":"Factor::SrcAlphaSaturate","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9215},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196814,"byte_end":196823,"line_start":78,"line_end":78,"column_start":5,"column_end":14},"name":"Src1Color","qualname":"::pso::output_merger::Factor::Src1Color","value":"Factor::Src1Color","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9218},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196834,"byte_end":196851,"line_start":79,"line_end":79,"column_start":5,"column_end":22},"name":"OneMinusSrc1Color","qualname":"::pso::output_merger::Factor::OneMinusSrc1Color","value":"Factor::OneMinusSrc1Color","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196862,"byte_end":196871,"line_start":80,"line_end":80,"column_start":5,"column_end":14},"name":"Src1Alpha","qualname":"::pso::output_merger::Factor::Src1Alpha","value":"Factor::Src1Alpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9224},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196882,"byte_end":196899,"line_start":81,"line_end":81,"column_start":5,"column_end":22},"name":"OneMinusSrc1Alpha","qualname":"::pso::output_merger::Factor::OneMinusSrc1Alpha","value":"Factor::OneMinusSrc1Alpha","parent":{"krate":0,"index":9169},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":9169},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196471,"byte_end":196477,"line_start":62,"line_end":62,"column_start":10,"column_end":16},"name":"Factor","qualname":"::pso::output_merger::Factor","value":"Factor::{Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstColor, OneMinusConstColor, ConstAlpha, OneMinusConstAlpha, SrcAlphaSaturate, Src1Color, OneMinusSrc1Color, Src1Alpha, OneMinusSrc1Alpha}","parent":null,"children":[{"krate":0,"index":9170},{"krate":0,"index":9173},{"krate":0,"index":9176},{"krate":0,"index":9179},{"krate":0,"index":9182},{"krate":0,"index":9185},{"krate":0,"index":9188},{"krate":0,"index":9191},{"krate":0,"index":9194},{"krate":0,"index":9197},{"krate":0,"index":9200},{"krate":0,"index":9203},{"krate":0,"index":9206},{"krate":0,"index":9209},{"krate":0,"index":9212},{"krate":0,"index":9215},{"krate":0,"index":9218},{"krate":0,"index":9221},{"krate":0,"index":9224}],"decl_id":null,"docs":" Defines the possible blending factors.\n During blending, the source or destination fragment may be\n multiplied by a factor to produce the final result.\n","sig":null,"attributes":[{"value":"/ Defines the possible blending factors.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196146,"byte_end":196188,"line_start":56,"line_end":56,"column_start":1,"column_end":43}},{"value":"/ During blending, the source or destination fragment may be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196189,"byte_end":196251,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"/ multiplied by a factor to produce the final result.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196252,"byte_end":196307,"line_start":58,"line_end":58,"column_start":1,"column_end":56}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196308,"byte_end":196330,"line_start":59,"line_end":59,"column_start":1,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":9246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197222,"byte_end":197225,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Add","qualname":"::pso::output_merger::BlendOp::Add","value":"BlendOp::Add { src, dst }","parent":{"krate":0,"index":9245},"children":[],"decl_id":null,"docs":" Adds source and destination.\n Source and destination are multiplied by factors before addition.\n","sig":null,"attributes":[{"value":"/ Adds source and destination.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197111,"byte_end":197143,"line_start":89,"line_end":89,"column_start":5,"column_end":37}},{"value":"/ Source and destination are multiplied by factors before addition.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197148,"byte_end":197217,"line_start":90,"line_end":90,"column_start":5,"column_end":74}}]},{"kind":"StructVariant","id":{"krate":0,"index":9249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197380,"byte_end":197383,"line_start":94,"line_end":94,"column_start":5,"column_end":8},"name":"Sub","qualname":"::pso::output_merger::BlendOp::Sub","value":"BlendOp::Sub { src, dst }","parent":{"krate":0,"index":9245},"children":[],"decl_id":null,"docs":" Subtracts destination from source.\n Source and destination are multiplied by factors before subtraction.\n","sig":null,"attributes":[{"value":"/ Subtracts destination from source.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197260,"byte_end":197298,"line_start":92,"line_end":92,"column_start":5,"column_end":43}},{"value":"/ Source and destination are multiplied by factors before subtraction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197303,"byte_end":197375,"line_start":93,"line_end":93,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":9252},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197538,"byte_end":197544,"line_start":97,"line_end":97,"column_start":5,"column_end":11},"name":"RevSub","qualname":"::pso::output_merger::BlendOp::RevSub","value":"BlendOp::RevSub { src, dst }","parent":{"krate":0,"index":9245},"children":[],"decl_id":null,"docs":" Subtracts source from destination.\n Source and destination are multiplied by factors before subtraction.\n","sig":null,"attributes":[{"value":"/ Subtracts source from destination.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197418,"byte_end":197456,"line_start":95,"line_end":95,"column_start":5,"column_end":43}},{"value":"/ Source and destination are multiplied by factors before subtraction.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197461,"byte_end":197533,"line_start":96,"line_end":96,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9255},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197643,"byte_end":197646,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"Min","qualname":"::pso::output_merger::BlendOp::Min","value":"BlendOp::Min","parent":{"krate":0,"index":9245},"children":[],"decl_id":null,"docs":" Component-wise minimum value of source and destination.\n","sig":null,"attributes":[{"value":"/ Component-wise minimum value of source and destination.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197579,"byte_end":197638,"line_start":98,"line_end":98,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9257},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197716,"byte_end":197719,"line_start":101,"line_end":101,"column_start":5,"column_end":8},"name":"Max","qualname":"::pso::output_merger::BlendOp::Max","value":"BlendOp::Max","parent":{"krate":0,"index":9245},"children":[],"decl_id":null,"docs":" Component-wise maximum value of source and destination.\n","sig":null,"attributes":[{"value":"/ Component-wise maximum value of source and destination.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197652,"byte_end":197711,"line_start":100,"line_end":100,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":9245},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197097,"byte_end":197104,"line_start":88,"line_end":88,"column_start":10,"column_end":17},"name":"BlendOp","qualname":"::pso::output_merger::BlendOp","value":"BlendOp::{Add, Sub, RevSub, Min, Max}","parent":null,"children":[{"krate":0,"index":9246},{"krate":0,"index":9249},{"krate":0,"index":9252},{"krate":0,"index":9255},{"krate":0,"index":9257}],"decl_id":null,"docs":" Blending operations.\n","sig":null,"attributes":[{"value":"/ Blending operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196909,"byte_end":196933,"line_start":84,"line_end":84,"column_start":1,"column_end":25}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196934,"byte_end":196956,"line_start":85,"line_end":85,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":635},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197808,"byte_end":197815,"line_start":106,"line_end":106,"column_start":15,"column_end":22},"name":"REPLACE","qualname":"::pso::output_merger::BlendOp::REPLACE","value":"Self","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Replace the destination value with the source.\n","sig":null,"attributes":[{"value":"/ Replace the destination value with the source.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197743,"byte_end":197793,"line_start":105,"line_end":105,"column_start":5,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197962,"byte_end":197965,"line_start":111,"line_end":111,"column_start":15,"column_end":18},"name":"ADD","qualname":"::pso::output_merger::BlendOp::ADD","value":"Self","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Add the source and destination together.\n","sig":null,"attributes":[{"value":"/ Add the source and destination together.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197903,"byte_end":197947,"line_start":110,"line_end":110,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":637},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198119,"byte_end":198124,"line_start":116,"line_end":116,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::pso::output_merger::BlendOp::ALPHA","value":"Self","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Alpha blend the source and destination together.\n","sig":null,"attributes":[{"value":"/ Alpha blend the source and destination together.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198052,"byte_end":198104,"line_start":115,"line_end":115,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":638},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198310,"byte_end":198329,"line_start":121,"line_end":121,"column_start":15,"column_end":34},"name":"PREMULTIPLIED_ALPHA","qualname":"::pso::output_merger::BlendOp::PREMULTIPLIED_ALPHA","value":"Self","parent":{"krate":0,"index":634},"children":[],"decl_id":null,"docs":" Alpha blend a premultiplied-alpha source with the destination.\n","sig":null,"attributes":[{"value":"/ Alpha blend a premultiplied-alpha source with the destination.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198229,"byte_end":198295,"line_start":120,"line_end":120,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":9294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198661,"byte_end":198671,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"BlendState","qualname":"::pso::output_merger::BlendState","value":"BlendState { color, alpha }","parent":null,"children":[{"krate":0,"index":9295},{"krate":0,"index":9296}],"decl_id":null,"docs":" Specifies whether to use blending, and if so,\n which operations to use for color and alpha channels.\n","sig":null,"attributes":[{"value":"/ Specifies whether to use blending, and if so,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198428,"byte_end":198477,"line_start":127,"line_end":127,"column_start":1,"column_end":50}},{"value":"/ which operations to use for color and alpha channels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198478,"byte_end":198535,"line_start":128,"line_end":128,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":9295},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198741,"byte_end":198746,"line_start":133,"line_end":133,"column_start":9,"column_end":14},"name":"color","qualname":"::pso::output_merger::BlendState::color","value":"pso::output_merger::BlendOp","parent":{"krate":0,"index":9294},"children":[],"decl_id":null,"docs":" The blend operation to use for the color channels.\n","sig":null,"attributes":[{"value":"/ The blend operation to use for the color channels.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198678,"byte_end":198732,"line_start":132,"line_end":132,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":9296},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198823,"byte_end":198828,"line_start":135,"line_end":135,"column_start":9,"column_end":14},"name":"alpha","qualname":"::pso::output_merger::BlendState::alpha","value":"pso::output_merger::BlendOp","parent":{"krate":0,"index":9294},"children":[],"decl_id":null,"docs":" The blend operation to use for the alpha channel.\n","sig":null,"attributes":[{"value":"/ The blend operation to use for the alpha channel.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198761,"byte_end":198814,"line_start":134,"line_end":134,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":640},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198901,"byte_end":198908,"line_start":140,"line_end":140,"column_start":15,"column_end":22},"name":"REPLACE","qualname":"::pso::output_merger::BlendState::REPLACE","value":"Self","parent":{"krate":0,"index":639},"children":[],"decl_id":null,"docs":" Replace the color.\n","sig":null,"attributes":[{"value":"/ Replace the color.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198864,"byte_end":198886,"line_start":139,"line_end":139,"column_start":5,"column_end":27}}]},{"kind":"Const","id":{"krate":0,"index":641},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199044,"byte_end":199047,"line_start":145,"line_end":145,"column_start":15,"column_end":18},"name":"ADD","qualname":"::pso::output_merger::BlendState::ADD","value":"Self","parent":{"krate":0,"index":639},"children":[],"decl_id":null,"docs":" Additive blending.\n","sig":null,"attributes":[{"value":"/ Additive blending.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199007,"byte_end":199029,"line_start":144,"line_end":144,"column_start":5,"column_end":27}}]},{"kind":"Const","id":{"krate":0,"index":642},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199181,"byte_end":199189,"line_start":150,"line_end":150,"column_start":15,"column_end":23},"name":"MULTIPLY","qualname":"::pso::output_merger::BlendState::MULTIPLY","value":"Self","parent":{"krate":0,"index":639},"children":[],"decl_id":null,"docs":" Multiplicative blending.\n","sig":null,"attributes":[{"value":"/ Multiplicative blending.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199138,"byte_end":199166,"line_start":149,"line_end":149,"column_start":5,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199470,"byte_end":199475,"line_start":161,"line_end":161,"column_start":15,"column_end":20},"name":"ALPHA","qualname":"::pso::output_merger::BlendState::ALPHA","value":"Self","parent":{"krate":0,"index":639},"children":[],"decl_id":null,"docs":" Alpha blending.\n","sig":null,"attributes":[{"value":"/ Alpha blending.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199436,"byte_end":199455,"line_start":160,"line_end":160,"column_start":5,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":644},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199633,"byte_end":199652,"line_start":166,"line_end":166,"column_start":15,"column_end":34},"name":"PREMULTIPLIED_ALPHA","qualname":"::pso::output_merger::BlendState::PREMULTIPLIED_ALPHA","value":"Self","parent":{"krate":0,"index":639},"children":[],"decl_id":null,"docs":" Pre-multiplied alpha blending.\n","sig":null,"attributes":[{"value":"/ Pre-multiplied alpha blending.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199584,"byte_end":199618,"line_start":165,"line_end":165,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":9312},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199941,"byte_end":199955,"line_start":175,"line_end":175,"column_start":12,"column_end":26},"name":"ColorBlendDesc","qualname":"::pso::output_merger::ColorBlendDesc","value":"ColorBlendDesc { mask, blend }","parent":null,"children":[{"krate":0,"index":9313},{"krate":0,"index":9314}],"decl_id":null,"docs":" PSO color target descriptor.\n","sig":null,"attributes":[{"value":"/ PSO color target descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199774,"byte_end":199806,"line_start":172,"line_end":172,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":9313},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199992,"byte_end":199996,"line_start":177,"line_end":177,"column_start":9,"column_end":13},"name":"mask","qualname":"::pso::output_merger::ColorBlendDesc::mask","value":"pso::output_merger::ColorMask","parent":{"krate":0,"index":9312},"children":[],"decl_id":null,"docs":" Color write mask.\n","sig":null,"attributes":[{"value":"/ Color write mask.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":199962,"byte_end":199983,"line_start":176,"line_end":176,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":9314},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200050,"byte_end":200055,"line_start":179,"line_end":179,"column_start":9,"column_end":14},"name":"blend","qualname":"::pso::output_merger::ColorBlendDesc::blend","value":"std::option::Option<pso::output_merger::BlendState>","parent":{"krate":0,"index":9312},"children":[],"decl_id":null,"docs":" Blend state, if enabled.\n","sig":null,"attributes":[{"value":"/ Blend state, if enabled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200013,"byte_end":200041,"line_start":178,"line_end":178,"column_start":5,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":646},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200270,"byte_end":200275,"line_start":185,"line_end":185,"column_start":15,"column_end":20},"name":"EMPTY","qualname":"::pso::output_merger::ColorBlendDesc::EMPTY","value":"Self","parent":{"krate":0,"index":645},"children":[],"decl_id":null,"docs":" Empty blend descriptor just writes out the color without blending.\n","sig":null,"attributes":[{"value":"/ Empty blend descriptor just writes out the color without blending.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200106,"byte_end":200176,"line_start":183,"line_end":183,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":9332},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200526,"byte_end":200535,"line_start":194,"line_end":194,"column_start":12,"column_end":21},"name":"DepthTest","qualname":"::pso::output_merger::DepthTest","value":"DepthTest { fun, write }","parent":null,"children":[{"krate":0,"index":9333},{"krate":0,"index":9334}],"decl_id":null,"docs":" Depth test state.\n","sig":null,"attributes":[{"value":"/ Depth test state.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200362,"byte_end":200383,"line_start":191,"line_end":191,"column_start":1,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":9333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200582,"byte_end":200585,"line_start":196,"line_end":196,"column_start":9,"column_end":12},"name":"fun","qualname":"::pso::output_merger::DepthTest::fun","value":"pso::output_merger::Comparison","parent":{"krate":0,"index":9332},"children":[],"decl_id":null,"docs":" Comparison function to use.\n","sig":null,"attributes":[{"value":"/ Comparison function to use.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200542,"byte_end":200573,"line_start":195,"line_end":195,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":9334},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200668,"byte_end":200673,"line_start":198,"line_end":198,"column_start":9,"column_end":14},"name":"write","qualname":"::pso::output_merger::DepthTest::write","value":"bool","parent":{"krate":0,"index":9332},"children":[],"decl_id":null,"docs":" Specify whether to write to the depth buffer or not.\n","sig":null,"attributes":[{"value":"/ Specify whether to write to the depth buffer or not.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200603,"byte_end":200659,"line_start":197,"line_end":197,"column_start":5,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":648},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200755,"byte_end":200759,"line_start":203,"line_end":203,"column_start":15,"column_end":19},"name":"FAIL","qualname":"::pso::output_merger::DepthTest::FAIL","value":"Self","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" A depth test that always fails.\n","sig":null,"attributes":[{"value":"/ A depth test that always fails.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200705,"byte_end":200740,"line_start":202,"line_end":202,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":649},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201004,"byte_end":201013,"line_start":210,"line_end":210,"column_start":15,"column_end":24},"name":"PASS_TEST","qualname":"::pso::output_merger::DepthTest::PASS_TEST","value":"Self","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" A depth test that always succeeds but doesn't\n write to the depth buffer\n","sig":null,"attributes":[{"value":"/ A depth test that always succeeds but doesn't","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200845,"byte_end":200894,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/ write to the depth buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200899,"byte_end":200928,"line_start":208,"line_end":208,"column_start":5,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201203,"byte_end":201213,"line_start":216,"line_end":216,"column_start":15,"column_end":25},"name":"PASS_WRITE","qualname":"::pso::output_merger::DepthTest::PASS_WRITE","value":"Self","parent":{"krate":0,"index":647},"children":[],"decl_id":null,"docs":" A depth test that always succeeds and writes its result\n to the depth buffer.\n","sig":null,"attributes":[{"value":"/ A depth test that always succeeds and writes its result","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201100,"byte_end":201159,"line_start":214,"line_end":214,"column_start":5,"column_end":64}},{"value":"/ to the depth buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201164,"byte_end":201188,"line_start":215,"line_end":215,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9363},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201578,"byte_end":201582,"line_start":228,"line_end":228,"column_start":5,"column_end":9},"name":"Keep","qualname":"::pso::output_merger::StencilOp::Keep","value":"StencilOp::Keep","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Keep the current value in the stencil buffer (no change).\n","sig":null,"attributes":[{"value":"/ Keep the current value in the stencil buffer (no change).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201512,"byte_end":201573,"line_start":227,"line_end":227,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9366},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201645,"byte_end":201649,"line_start":230,"line_end":230,"column_start":5,"column_end":9},"name":"Zero","qualname":"::pso::output_merger::StencilOp::Zero","value":"StencilOp::Zero","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Set the value in the stencil buffer to zero.\n","sig":null,"attributes":[{"value":"/ Set the value in the stencil buffer to zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201592,"byte_end":201640,"line_start":229,"line_end":229,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9369},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201731,"byte_end":201738,"line_start":232,"line_end":232,"column_start":5,"column_end":12},"name":"Replace","qualname":"::pso::output_merger::StencilOp::Replace","value":"StencilOp::Replace","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Set the stencil buffer value to `reference` from `StencilFace`.\n","sig":null,"attributes":[{"value":"/ Set the stencil buffer value to `reference` from `StencilFace`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201659,"byte_end":201726,"line_start":231,"line_end":231,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9372},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201823,"byte_end":201837,"line_start":234,"line_end":234,"column_start":5,"column_end":19},"name":"IncrementClamp","qualname":"::pso::output_merger::StencilOp::IncrementClamp","value":"StencilOp::IncrementClamp","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Increment the stencil buffer value, clamping to its maximum value.\n","sig":null,"attributes":[{"value":"/ Increment the stencil buffer value, clamping to its maximum value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201748,"byte_end":201818,"line_start":233,"line_end":233,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9375},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201922,"byte_end":201936,"line_start":236,"line_end":236,"column_start":5,"column_end":19},"name":"DecrementClamp","qualname":"::pso::output_merger::StencilOp::DecrementClamp","value":"StencilOp::DecrementClamp","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Decrement the stencil buffer value, clamping to its minimum value.\n","sig":null,"attributes":[{"value":"/ Decrement the stencil buffer value, clamping to its minimum value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201847,"byte_end":201917,"line_start":235,"line_end":235,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9378},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202010,"byte_end":202016,"line_start":238,"line_end":238,"column_start":5,"column_end":11},"name":"Invert","qualname":"::pso::output_merger::StencilOp::Invert","value":"StencilOp::Invert","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Bitwise invert the current value in the stencil buffer.\n","sig":null,"attributes":[{"value":"/ Bitwise invert the current value in the stencil buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201946,"byte_end":202005,"line_start":237,"line_end":237,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9381},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202104,"byte_end":202117,"line_start":240,"line_end":240,"column_start":5,"column_end":18},"name":"IncrementWrap","qualname":"::pso::output_merger::StencilOp::IncrementWrap","value":"StencilOp::IncrementWrap","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Increment the stencil buffer value, wrapping around to 0 on overflow.\n","sig":null,"attributes":[{"value":"/ Increment the stencil buffer value, wrapping around to 0 on overflow.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202026,"byte_end":202099,"line_start":239,"line_end":239,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9384},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202221,"byte_end":202234,"line_start":242,"line_end":242,"column_start":5,"column_end":18},"name":"DecrementWrap","qualname":"::pso::output_merger::StencilOp::DecrementWrap","value":"StencilOp::DecrementWrap","parent":{"krate":0,"index":9362},"children":[],"decl_id":null,"docs":" Decrement the stencil buffer value, wrapping around to the maximum value on overflow.\n","sig":null,"attributes":[{"value":"/ Decrement the stencil buffer value, wrapping around to the maximum value on overflow.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202127,"byte_end":202216,"line_start":241,"line_end":241,"column_start":5,"column_end":94}}]},{"kind":"Enum","id":{"krate":0,"index":9362},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201496,"byte_end":201505,"line_start":226,"line_end":226,"column_start":10,"column_end":19},"name":"StencilOp","qualname":"::pso::output_merger::StencilOp","value":"StencilOp::{Keep, Zero, Replace, IncrementClamp, DecrementClamp, Invert, IncrementWrap, DecrementWrap}","parent":null,"children":[{"krate":0,"index":9363},{"krate":0,"index":9366},{"krate":0,"index":9369},{"krate":0,"index":9372},{"krate":0,"index":9375},{"krate":0,"index":9378},{"krate":0,"index":9381},{"krate":0,"index":9384}],"decl_id":null,"docs":" The operation to use for stencil masking.\n","sig":null,"attributes":[{"value":"/ The operation to use for stencil masking.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201298,"byte_end":201343,"line_start":222,"line_end":222,"column_start":1,"column_end":46}},{"value":"repr(u8)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":201344,"byte_end":201355,"line_start":223,"line_end":223,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":9405},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202440,"byte_end":202451,"line_start":248,"line_end":248,"column_start":12,"column_end":23},"name":"StencilFace","qualname":"::pso::output_merger::StencilFace","value":"StencilFace { fun, op_fail, op_depth_fail, op_pass }","parent":null,"children":[{"krate":0,"index":9406},{"krate":0,"index":9407},{"krate":0,"index":9408},{"krate":0,"index":9409}],"decl_id":null,"docs":" Complete stencil state for a given side of a face.\n","sig":null,"attributes":[{"value":"/ Complete stencil state for a given side of a face.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202243,"byte_end":202297,"line_start":245,"line_end":245,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":9406},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202538,"byte_end":202541,"line_start":250,"line_end":250,"column_start":9,"column_end":12},"name":"fun","qualname":"::pso::output_merger::StencilFace::fun","value":"pso::output_merger::Comparison","parent":{"krate":0,"index":9405},"children":[],"decl_id":null,"docs":" Comparison function to use to determine if the stencil test passes.\n","sig":null,"attributes":[{"value":"/ Comparison function to use to determine if the stencil test passes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202458,"byte_end":202529,"line_start":249,"line_end":249,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":9407},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202619,"byte_end":202626,"line_start":252,"line_end":252,"column_start":9,"column_end":16},"name":"op_fail","qualname":"::pso::output_merger::StencilFace::op_fail","value":"pso::output_merger::StencilOp","parent":{"krate":0,"index":9405},"children":[],"decl_id":null,"docs":" What operation to do if the stencil test fails.\n","sig":null,"attributes":[{"value":"/ What operation to do if the stencil test fails.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202559,"byte_end":202610,"line_start":251,"line_end":251,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":9408},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202729,"byte_end":202742,"line_start":254,"line_end":254,"column_start":9,"column_end":22},"name":"op_depth_fail","qualname":"::pso::output_merger::StencilFace::op_depth_fail","value":"pso::output_merger::StencilOp","parent":{"krate":0,"index":9405},"children":[],"decl_id":null,"docs":" What operation to do if the stencil test passes but the depth test fails.\n","sig":null,"attributes":[{"value":"/ What operation to do if the stencil test passes but the depth test fails.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202643,"byte_end":202720,"line_start":253,"line_end":253,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":9409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202833,"byte_end":202840,"line_start":256,"line_end":256,"column_start":9,"column_end":16},"name":"op_pass","qualname":"::pso::output_merger::StencilFace::op_pass","value":"pso::output_merger::StencilOp","parent":{"krate":0,"index":9405},"children":[],"decl_id":null,"docs":" What operation to do if both the depth and stencil test pass.\n","sig":null,"attributes":[{"value":"/ What operation to do if both the depth and stencil test pass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202759,"byte_end":202824,"line_start":255,"line_end":255,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":9445},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203323,"byte_end":203328,"line_start":273,"line_end":273,"column_start":12,"column_end":17},"name":"Sided","qualname":"::pso::output_merger::Sided","value":"Sided { front, back }","parent":null,"children":[{"krate":0,"index":9447},{"krate":0,"index":9448}],"decl_id":null,"docs":" A generic struct holding the properties of two sides of a polygon.\n","sig":null,"attributes":[{"value":"/ A generic struct holding the properties of two sides of a polygon.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203118,"byte_end":203188,"line_start":270,"line_end":270,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":9447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203384,"byte_end":203389,"line_start":275,"line_end":275,"column_start":9,"column_end":14},"name":"front","qualname":"::pso::output_merger::Sided::front","value":"T","parent":{"krate":0,"index":9445},"children":[],"decl_id":null,"docs":" Information about the front face.\n","sig":null,"attributes":[{"value":"/ Information about the front face.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203338,"byte_end":203375,"line_start":274,"line_end":274,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":9448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203443,"byte_end":203447,"line_start":277,"line_end":277,"column_start":9,"column_end":13},"name":"back","qualname":"::pso::output_merger::Sided::back","value":"T","parent":{"krate":0,"index":9445},"children":[],"decl_id":null,"docs":" Information about the back face.\n","sig":null,"attributes":[{"value":"/ Information about the back face.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203398,"byte_end":203434,"line_start":276,"line_end":276,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203591,"byte_end":203594,"line_start":283,"line_end":283,"column_start":12,"column_end":15},"name":"new","qualname":"<Sided<T>>::new","value":"fn (value: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Sided` structure with both `front` and `back` holding\n the same value.\n","sig":null,"attributes":[{"value":"/ Create a new `Sided` structure with both `front` and `back` holding","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203484,"byte_end":203555,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/ the same value.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203560,"byte_end":203579,"line_start":282,"line_end":282,"column_start":5,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203818,"byte_end":203831,"line_start":293,"line_end":293,"column_start":10,"column_end":23},"name":"StencilValues","qualname":"::pso::output_merger::StencilValues","value":"State<Sided<StencilValue>>","parent":null,"children":[],"decl_id":null,"docs":" Pair of stencil values that could be either baked into a graphics pipeline\n or provided dynamically.\n","sig":null,"attributes":[{"value":"/ Pair of stencil values that could be either baked into a graphics pipeline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203701,"byte_end":203779,"line_start":291,"line_end":291,"column_start":1,"column_end":79}},{"value":"/ or provided dynamically.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203780,"byte_end":203808,"line_start":292,"line_end":292,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":9475},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204215,"byte_end":204226,"line_start":302,"line_end":302,"column_start":12,"column_end":23},"name":"StencilTest","qualname":"::pso::output_merger::StencilTest","value":"StencilTest { faces, read_masks, write_masks, reference_values }","parent":null,"children":[{"krate":0,"index":9476},{"krate":0,"index":9477},{"krate":0,"index":9478},{"krate":0,"index":9479}],"decl_id":null,"docs":" Defines a stencil test. Stencil testing is an operation\n performed to cull fragments;\n the new fragment is tested against the value held in the\n stencil buffer, and if the test fails the fragment is\n discarded.\n","sig":null,"attributes":[{"value":"/ Defines a stencil test. Stencil testing is an operation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203863,"byte_end":203922,"line_start":295,"line_end":295,"column_start":1,"column_end":60}},{"value":"/ performed to cull fragments;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203923,"byte_end":203955,"line_start":296,"line_end":296,"column_start":1,"column_end":33}},{"value":"/ the new fragment is tested against the value held in the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203956,"byte_end":204016,"line_start":297,"line_end":297,"column_start":1,"column_end":61}},{"value":"/ stencil buffer, and if the test fails the fragment is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204017,"byte_end":204074,"line_start":298,"line_end":298,"column_start":1,"column_end":58}},{"value":"/ discarded.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204075,"byte_end":204089,"line_start":299,"line_end":299,"column_start":1,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":9476},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204275,"byte_end":204280,"line_start":304,"line_end":304,"column_start":9,"column_end":14},"name":"faces","qualname":"::pso::output_merger::StencilTest::faces","value":"pso::output_merger::Sided<pso::output_merger::StencilFace>","parent":{"krate":0,"index":9475},"children":[],"decl_id":null,"docs":" Operations for stencil faces.\n","sig":null,"attributes":[{"value":"/ Operations for stencil faces.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204233,"byte_end":204266,"line_start":303,"line_end":303,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":9477},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204455,"byte_end":204465,"line_start":307,"line_end":307,"column_start":9,"column_end":19},"name":"read_masks","qualname":"::pso::output_merger::StencilTest::read_masks","value":"pso::State<pso::output_merger::Sided<u32>>","parent":{"krate":0,"index":9475},"children":[],"decl_id":null,"docs":" Masks that are ANDd with both the stencil buffer value and the reference value when they\n are read before doing the stencil test.\n","sig":null,"attributes":[{"value":"/ Masks that are ANDd with both the stencil buffer value and the reference value when they","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204306,"byte_end":204398,"line_start":305,"line_end":305,"column_start":5,"column_end":97}},{"value":"/ are read before doing the stencil test.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204403,"byte_end":204446,"line_start":306,"line_end":306,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":9478},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204578,"byte_end":204589,"line_start":309,"line_end":309,"column_start":9,"column_end":20},"name":"write_masks","qualname":"::pso::output_merger::StencilTest::write_masks","value":"pso::State<pso::output_merger::Sided<u32>>","parent":{"krate":0,"index":9475},"children":[],"decl_id":null,"docs":" Mask that are ANDd with the stencil value before writing to the stencil buffer.\n","sig":null,"attributes":[{"value":"/ Mask that are ANDd with the stencil value before writing to the stencil buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204486,"byte_end":204569,"line_start":308,"line_end":308,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":9479},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204667,"byte_end":204683,"line_start":311,"line_end":311,"column_start":9,"column_end":25},"name":"reference_values","qualname":"::pso::output_merger::StencilTest::reference_values","value":"pso::State<pso::output_merger::Sided<u32>>","parent":{"krate":0,"index":9475},"children":[],"decl_id":null,"docs":" The reference values used for stencil tests.\n","sig":null,"attributes":[{"value":"/ The reference values used for stencil tests.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204610,"byte_end":204658,"line_start":310,"line_end":310,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":9495},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205185,"byte_end":205201,"line_start":328,"line_end":328,"column_start":12,"column_end":28},"name":"DepthStencilDesc","qualname":"::pso::output_merger::DepthStencilDesc","value":"DepthStencilDesc { depth, depth_bounds, stencil }","parent":null,"children":[{"krate":0,"index":9496},{"krate":0,"index":9497},{"krate":0,"index":9498}],"decl_id":null,"docs":" PSO depth-stencil target descriptor.\n","sig":null,"attributes":[{"value":"/ PSO depth-stencil target descriptor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205010,"byte_end":205050,"line_start":325,"line_end":325,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":9496},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205252,"byte_end":205257,"line_start":330,"line_end":330,"column_start":9,"column_end":14},"name":"depth","qualname":"::pso::output_merger::DepthStencilDesc::depth","value":"std::option::Option<pso::output_merger::DepthTest>","parent":{"krate":0,"index":9495},"children":[],"decl_id":null,"docs":" Optional depth testing/writing.\n","sig":null,"attributes":[{"value":"/ Optional depth testing/writing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205208,"byte_end":205243,"line_start":329,"line_end":329,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":9497},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205323,"byte_end":205335,"line_start":332,"line_end":332,"column_start":9,"column_end":21},"name":"depth_bounds","qualname":"::pso::output_merger::DepthStencilDesc::depth_bounds","value":"bool","parent":{"krate":0,"index":9495},"children":[],"decl_id":null,"docs":" Enable depth bounds testing.\n","sig":null,"attributes":[{"value":"/ Enable depth bounds testing.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205282,"byte_end":205314,"line_start":331,"line_end":331,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":9498},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205379,"byte_end":205386,"line_start":334,"line_end":334,"column_start":9,"column_end":16},"name":"stencil","qualname":"::pso::output_merger::DepthStencilDesc::stencil","value":"std::option::Option<pso::output_merger::StencilTest>","parent":{"krate":0,"index":9495},"children":[],"decl_id":null,"docs":" Stencil test/write.\n","sig":null,"attributes":[{"value":"/ Stencil test/write.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205347,"byte_end":205370,"line_start":333,"line_end":333,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205516,"byte_end":205526,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"uses_depth","qualname":"<DepthStencilDesc>::uses_depth","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the descriptor assumes the depth attachment.\n","sig":null,"attributes":[{"value":"/ Returns true if the descriptor assumes the depth attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205440,"byte_end":205504,"line_start":338,"line_end":338,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205682,"byte_end":205694,"line_start":343,"line_end":343,"column_start":12,"column_end":24},"name":"uses_stencil","qualname":"<DepthStencilDesc>::uses_stencil","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the descriptor assumes the stencil attachment.\n","sig":null,"attributes":[{"value":"/ Returns true if the descriptor assumes the stencil attachment.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205604,"byte_end":205670,"line_start":342,"line_end":342,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":9516},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205859,"byte_end":205863,"line_start":351,"line_end":351,"column_start":16,"column_end":20},"name":"Face","qualname":"::pso::output_merger::Face","value":"Face {  }","parent":null,"children":[{"krate":0,"index":9517}],"decl_id":null,"docs":" Face.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9555},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205967,"byte_end":205971,"line_start":353,"line_end":353,"column_start":15,"column_end":19},"name":"NONE","qualname":"::pso::output_merger::Face::NONE","value":"Face","parent":{"krate":0,"index":9554},"children":[],"decl_id":null,"docs":" Empty face. TODO: remove when constexpr are stabilized to use empty()\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":206017,"byte_end":206022,"line_start":355,"line_end":355,"column_start":15,"column_end":20},"name":"FRONT","qualname":"::pso::output_merger::Face::FRONT","value":"Face","parent":{"krate":0,"index":9554},"children":[],"decl_id":null,"docs":" Front face.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9557},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":206067,"byte_end":206071,"line_start":357,"line_end":357,"column_start":15,"column_end":19},"name":"BACK","qualname":"::pso::output_merger::Face::BACK","value":"Face","parent":{"krate":0,"index":9554},"children":[],"decl_id":null,"docs":" Back face.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206768,"byte_end":206790,"line_start":16,"line_end":16,"column_start":12,"column_end":34},"name":"SpecializationConstant","qualname":"::pso::specialization::SpecializationConstant","value":"SpecializationConstant { id, range }","parent":null,"children":[{"krate":0,"index":9613},{"krate":0,"index":9614}],"decl_id":null,"docs":" Specialization constant for pipelines.","sig":null,"attributes":[{"value":"/ Specialization constant for pipelines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206169,"byte_end":206211,"line_start":5,"line_end":5,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206212,"byte_end":206215,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Specialization constants allow for easy configuration of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206216,"byte_end":206276,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"/ multiple similar pipelines. For example, there may be a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206277,"byte_end":206336,"line_start":8,"line_end":8,"column_start":1,"column_end":60}},{"value":"/ boolean exposed to the shader that switches the specularity on/off","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206337,"byte_end":206407,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ provided via a specialization constant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206408,"byte_end":206451,"line_start":10,"line_end":10,"column_start":1,"column_end":44}},{"value":"/ That would produce separate PSO's for the \"on\" and \"off\" states","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206452,"byte_end":206519,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ but they share most of the internal stuff and are fast to produce.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206520,"byte_end":206590,"line_start":12,"line_end":12,"column_start":1,"column_end":71}},{"value":"/ More importantly, they are fast to execute, since the driver","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206591,"byte_end":206655,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"/ can optimize out the branch on that other PSO creation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206656,"byte_end":206715,"line_start":14,"line_end":14,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":9613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206847,"byte_end":206849,"line_start":18,"line_end":18,"column_start":9,"column_end":11},"name":"id","qualname":"::pso::specialization::SpecializationConstant::id","value":"u32","parent":{"krate":0,"index":9612},"children":[],"decl_id":null,"docs":" Constant identifier in shader source.\n","sig":null,"attributes":[{"value":"/ Constant identifier in shader source.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206797,"byte_end":206838,"line_start":17,"line_end":17,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":9614},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206915,"byte_end":206920,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"range","qualname":"::pso::specialization::SpecializationConstant::range","value":"std::ops::Range<u16>","parent":{"krate":0,"index":9612},"children":[],"decl_id":null,"docs":" Value to override specialization constant.\n","sig":null,"attributes":[{"value":"/ Value to override specialization constant.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206860,"byte_end":206906,"line_start":19,"line_end":19,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":9626},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207014,"byte_end":207028,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"Specialization","qualname":"::pso::specialization::Specialization","value":"Specialization { constants, data }","parent":null,"children":[{"krate":0,"index":9628},{"krate":0,"index":9629}],"decl_id":null,"docs":" Specialization information structure.\n","sig":null,"attributes":[{"value":"/ Specialization information structure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":206937,"byte_end":206978,"line_start":23,"line_end":23,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":9628},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207067,"byte_end":207076,"line_start":27,"line_end":27,"column_start":9,"column_end":18},"name":"constants","qualname":"::pso::specialization::Specialization::constants","value":"std::borrow::Cow<'a, [pso::specialization::SpecializationConstant]>","parent":{"krate":0,"index":9626},"children":[],"decl_id":null,"docs":" Constant array.\n","sig":null,"attributes":[{"value":"/ Constant array.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207039,"byte_end":207058,"line_start":26,"line_end":26,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":9629},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207139,"byte_end":207143,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"name":"data","qualname":"::pso::specialization::Specialization::data","value":"std::borrow::Cow<'a, [u8]>","parent":{"krate":0,"index":9626},"children":[],"decl_id":null,"docs":" Raw data.\n","sig":null,"attributes":[{"value":"/ Raw data.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207117,"byte_end":207130,"line_start":28,"line_end":28,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":668},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207242,"byte_end":207247,"line_start":34,"line_end":34,"column_start":15,"column_end":20},"name":"EMPTY","qualname":"::pso::specialization::Specialization::<'_>::EMPTY","value":"Self","parent":{"krate":0,"index":667},"children":[],"decl_id":null,"docs":" Empty specialization instance.\n","sig":null,"attributes":[{"value":"/ Empty specialization instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207193,"byte_end":207227,"line_start":33,"line_end":33,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":9636},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207512,"byte_end":207533,"line_start":48,"line_end":48,"column_start":12,"column_end":33},"name":"SpecializationStorage","qualname":"::pso::specialization::SpecializationStorage","value":"SpecializationStorage {  }","parent":null,"children":[{"krate":0,"index":9637},{"krate":0,"index":9638}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":671},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207665,"byte_end":207678,"line_start":55,"line_end":55,"column_start":11,"column_end":24},"name":"SpecConstList","qualname":"::pso::specialization::SpecConstList","value":"SpecConstList: Sized","parent":null,"children":[{"krate":0,"index":672}],"decl_id":null,"docs":" List of specialization constants.\n","sig":null,"attributes":[{"value":"/ List of specialization constants.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207602,"byte_end":207639,"line_start":53,"line_end":53,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207695,"byte_end":207699,"line_start":56,"line_end":56,"column_start":8,"column_end":12},"name":"fold","qualname":"::pso::specialization::SpecConstList::fold","value":"fn (self, storage: &mut SpecializationStorage) -> ()","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9643},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208125,"byte_end":208141,"line_start":75,"line_end":75,"column_start":12,"column_end":28},"name":"SpecConstListNil","qualname":"::pso::specialization::SpecConstListNil","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9647},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208187,"byte_end":208204,"line_start":79,"line_end":79,"column_start":12,"column_end":29},"name":"SpecConstListCons","qualname":"::pso::specialization::SpecConstListCons","value":"SpecConstListCons { head, tail }","parent":null,"children":[{"krate":0,"index":9650},{"krate":0,"index":9651}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9650},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208221,"byte_end":208225,"line_start":80,"line_end":80,"column_start":9,"column_end":13},"name":"head","qualname":"::pso::specialization::SpecConstListCons::head","value":"(u32, H)","parent":{"krate":0,"index":9647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":9651},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208245,"byte_end":208249,"line_start":81,"line_end":81,"column_start":9,"column_end":13},"name":"tail","qualname":"::pso::specialization::SpecConstListCons::tail","value":"T","parent":{"krate":0,"index":9647},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9657},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156874,"byte_end":156879,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Other","qualname":"::pso::CreationError::Other","value":"CreationError::Other","parent":{"krate":0,"index":9656},"children":[],"decl_id":null,"docs":" Unknown other error.\n","sig":null,"attributes":[{"value":"/ Unknown other error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156845,"byte_end":156869,"line_start":27,"line_end":27,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156935,"byte_end":156949,"line_start":30,"line_end":30,"column_start":5,"column_end":19},"name":"InvalidSubpass","qualname":"::pso::CreationError::InvalidSubpass","value":"CreationError::InvalidSubpass(pass::SubpassId)","parent":{"krate":0,"index":9656},"children":[],"decl_id":null,"docs":" Invalid subpass (not part of renderpass).\n","sig":null,"attributes":[{"value":"/ Invalid subpass (not part of renderpass).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156885,"byte_end":156930,"line_start":29,"line_end":29,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9662},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157006,"byte_end":157012,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Shader","qualname":"::pso::CreationError::Shader","value":"CreationError::Shader(device::ShaderError)","parent":{"krate":0,"index":9656},"children":[],"decl_id":null,"docs":" Shader compilation error.\n","sig":null,"attributes":[{"value":"/ Shader compilation error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156972,"byte_end":157001,"line_start":31,"line_end":31,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9665},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157084,"byte_end":157095,"line_start":34,"line_end":34,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::pso::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":9656},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157039,"byte_end":157079,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":9656},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156825,"byte_end":156838,"line_start":26,"line_end":26,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::pso::CreationError","value":"CreationError::{Other, InvalidSubpass, Shader, OutOfMemory}","parent":null,"children":[{"krate":0,"index":9657},{"krate":0,"index":9659},{"krate":0,"index":9662},{"krate":0,"index":9665}],"decl_id":null,"docs":" Error types happening upon PSO creation on the device side.\n","sig":null,"attributes":[{"value":"/ Error types happening upon PSO creation on the device side.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":156717,"byte_end":156780,"line_start":24,"line_end":24,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":9676},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":158492,"byte_end":158505,"line_start":71,"line_end":71,"column_start":16,"column_end":29},"name":"PipelineStage","qualname":"::pso::PipelineStage","value":"PipelineStage {  }","parent":null,"children":[{"krate":0,"index":9677}],"decl_id":null,"docs":" Stages of the logical pipeline.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9727},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":158571,"byte_end":158582,"line_start":73,"line_end":73,"column_start":15,"column_end":26},"name":"TOP_OF_PIPE","qualname":"::pso::PipelineStage::TOP_OF_PIPE","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Beginning of the command queue.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9728},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":158643,"byte_end":158656,"line_start":75,"line_end":75,"column_start":15,"column_end":28},"name":"DRAW_INDIRECT","qualname":"::pso::PipelineStage::DRAW_INDIRECT","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Indirect data consumption.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9729},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":158715,"byte_end":158727,"line_start":77,"line_end":77,"column_start":15,"column_end":27},"name":"VERTEX_INPUT","qualname":"::pso::PipelineStage::VERTEX_INPUT","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Vertex data consumption.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9730},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":158786,"byte_end":158799,"line_start":79,"line_end":79,"column_start":15,"column_end":28},"name":"VERTEX_SHADER","qualname":"::pso::PipelineStage::VERTEX_SHADER","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Vertex shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9731},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":158856,"byte_end":158867,"line_start":81,"line_end":81,"column_start":15,"column_end":26},"name":"HULL_SHADER","qualname":"::pso::PipelineStage::HULL_SHADER","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Hull shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":158927,"byte_end":158940,"line_start":83,"line_end":83,"column_start":15,"column_end":28},"name":"DOMAIN_SHADER","qualname":"::pso::PipelineStage::DOMAIN_SHADER","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Domain shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9733},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159002,"byte_end":159017,"line_start":85,"line_end":85,"column_start":15,"column_end":30},"name":"GEOMETRY_SHADER","qualname":"::pso::PipelineStage::GEOMETRY_SHADER","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Geometry shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9734},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159079,"byte_end":159094,"line_start":87,"line_end":87,"column_start":15,"column_end":30},"name":"FRAGMENT_SHADER","qualname":"::pso::PipelineStage::FRAGMENT_SHADER","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Fragment shader execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9735},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159168,"byte_end":159188,"line_start":89,"line_end":89,"column_start":15,"column_end":35},"name":"EARLY_FRAGMENT_TESTS","qualname":"::pso::PipelineStage::EARLY_FRAGMENT_TESTS","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Stage of early depth and stencil test.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9736},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159262,"byte_end":159281,"line_start":91,"line_end":91,"column_start":15,"column_end":34},"name":"LATE_FRAGMENT_TESTS","qualname":"::pso::PipelineStage::LATE_FRAGMENT_TESTS","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Stage of late depth and stencil test.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9737},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159357,"byte_end":159380,"line_start":93,"line_end":93,"column_start":15,"column_end":38},"name":"COLOR_ATTACHMENT_OUTPUT","qualname":"::pso::PipelineStage::COLOR_ATTACHMENT_OUTPUT","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Stage of final color value calculation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9738},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159442,"byte_end":159456,"line_start":95,"line_end":95,"column_start":15,"column_end":29},"name":"COMPUTE_SHADER","qualname":"::pso::PipelineStage::COMPUTE_SHADER","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Compute shader execution,\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9739},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159525,"byte_end":159533,"line_start":97,"line_end":97,"column_start":15,"column_end":23},"name":"TRANSFER","qualname":"::pso::PipelineStage::TRANSFER","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Copy/Transfer command execution.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9740},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159596,"byte_end":159610,"line_start":99,"line_end":99,"column_start":15,"column_end":29},"name":"BOTTOM_OF_PIPE","qualname":"::pso::PipelineStage::BOTTOM_OF_PIPE","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" End of the command queue.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9741},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159716,"byte_end":159720,"line_start":102,"line_end":102,"column_start":15,"column_end":19},"name":"HOST","qualname":"::pso::PipelineStage::HOST","value":"PipelineStage","parent":{"krate":0,"index":9726},"children":[],"decl_id":null,"docs":" Read/Write access from host.\n (Not a real pipeline stage)\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9832},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159891,"byte_end":159907,"line_start":109,"line_end":109,"column_start":16,"column_end":32},"name":"ShaderStageFlags","qualname":"::pso::ShaderStageFlags","value":"ShaderStageFlags {  }","parent":null,"children":[{"krate":0,"index":9833}],"decl_id":null,"docs":" Combination of different shader pipeline stages.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9876},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":159962,"byte_end":159968,"line_start":111,"line_end":111,"column_start":15,"column_end":21},"name":"VERTEX","qualname":"::pso::ShaderStageFlags::VERTEX","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" Vertex shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160038,"byte_end":160042,"line_start":113,"line_end":113,"column_start":15,"column_end":19},"name":"HULL","qualname":"::pso::ShaderStageFlags::HULL","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" Hull (tessellation) shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9878},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160116,"byte_end":160122,"line_start":115,"line_end":115,"column_start":15,"column_end":21},"name":"DOMAIN","qualname":"::pso::ShaderStageFlags::DOMAIN","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" Domain (tessellation) shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160181,"byte_end":160189,"line_start":117,"line_end":117,"column_start":15,"column_end":23},"name":"GEOMETRY","qualname":"::pso::ShaderStageFlags::GEOMETRY","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" Geometry shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160246,"byte_end":160254,"line_start":119,"line_end":119,"column_start":15,"column_end":23},"name":"FRAGMENT","qualname":"::pso::ShaderStageFlags::FRAGMENT","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" Fragment shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9881},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160311,"byte_end":160318,"line_start":121,"line_end":121,"column_start":15,"column_end":22},"name":"COMPUTE","qualname":"::pso::ShaderStageFlags::COMPUTE","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" Compute shader stage.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9882},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160391,"byte_end":160399,"line_start":123,"line_end":123,"column_start":15,"column_end":23},"name":"GRAPHICS","qualname":"::pso::ShaderStageFlags::GRAPHICS","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" All graphics pipeline shader stages.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":9883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160577,"byte_end":160580,"line_start":126,"line_end":126,"column_start":15,"column_end":18},"name":"ALL","qualname":"::pso::ShaderStageFlags::ALL","value":"ShaderStageFlags","parent":{"krate":0,"index":9875},"children":[],"decl_id":null,"docs":" All shader stages (matches Vulkan).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9954},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160910,"byte_end":160916,"line_start":137,"line_end":137,"column_start":5,"column_end":11},"name":"Vertex","qualname":"::pso::Stage::Vertex","value":"Stage::Vertex","parent":{"krate":0,"index":9953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9956},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160922,"byte_end":160926,"line_start":138,"line_end":138,"column_start":5,"column_end":9},"name":"Hull","qualname":"::pso::Stage::Hull","value":"Stage::Hull","parent":{"krate":0,"index":9953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9958},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160932,"byte_end":160938,"line_start":139,"line_end":139,"column_start":5,"column_end":11},"name":"Domain","qualname":"::pso::Stage::Domain","value":"Stage::Domain","parent":{"krate":0,"index":9953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9960},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160944,"byte_end":160952,"line_start":140,"line_end":140,"column_start":5,"column_end":13},"name":"Geometry","qualname":"::pso::Stage::Geometry","value":"Stage::Geometry","parent":{"krate":0,"index":9953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9962},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160958,"byte_end":160966,"line_start":141,"line_end":141,"column_start":5,"column_end":13},"name":"Fragment","qualname":"::pso::Stage::Fragment","value":"Stage::Fragment","parent":{"krate":0,"index":9953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9964},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160972,"byte_end":160979,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Compute","qualname":"::pso::Stage::Compute","value":"Stage::Compute","parent":{"krate":0,"index":9953},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":9953},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160898,"byte_end":160903,"line_start":136,"line_end":136,"column_start":10,"column_end":15},"name":"Stage","qualname":"::pso::Stage","value":"Stage::{Vertex, Hull, Domain, Geometry, Fragment, Compute}","parent":null,"children":[{"krate":0,"index":9954},{"krate":0,"index":9956},{"krate":0,"index":9958},{"krate":0,"index":9960},{"krate":0,"index":9962},{"krate":0,"index":9964}],"decl_id":null,"docs":" Which program stage this shader represents.\n","sig":null,"attributes":[{"value":"/ Which program stage this shader represents.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160692,"byte_end":160739,"line_start":131,"line_end":131,"column_start":1,"column_end":48}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160740,"byte_end":160762,"line_start":132,"line_end":132,"column_start":1,"column_end":23}},{"value":"repr(u8)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":160877,"byte_end":160888,"line_start":135,"line_end":135,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":9980},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161871,"byte_end":161881,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"EntryPoint","qualname":"::pso::EntryPoint","value":"EntryPoint { entry, module, specialization }","parent":null,"children":[{"krate":0,"index":9983},{"krate":0,"index":9984},{"krate":0,"index":9985}],"decl_id":null,"docs":" Shader entry point.\n","sig":null,"attributes":[{"value":"/ Shader entry point.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161819,"byte_end":161842,"line_start":171,"line_end":171,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":9983},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161934,"byte_end":161939,"line_start":175,"line_end":175,"column_start":9,"column_end":14},"name":"entry","qualname":"::pso::EntryPoint::entry","value":"&'a str","parent":{"krate":0,"index":9980},"children":[],"decl_id":null,"docs":" Entry point name.\n","sig":null,"attributes":[{"value":"/ Entry point name.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161904,"byte_end":161925,"line_start":174,"line_end":174,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":9984},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161991,"byte_end":161997,"line_start":177,"line_end":177,"column_start":9,"column_end":15},"name":"module","qualname":"::pso::EntryPoint::module","value":"&'a <B as Backend>::ShaderModule","parent":{"krate":0,"index":9980},"children":[],"decl_id":null,"docs":" Shader module reference.\n","sig":null,"attributes":[{"value":"/ Shader module reference.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161954,"byte_end":161982,"line_start":176,"line_end":176,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":9985},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162052,"byte_end":162066,"line_start":179,"line_end":179,"column_start":9,"column_end":23},"name":"specialization","qualname":"::pso::EntryPoint::specialization","value":"pso::specialization::Specialization<'a>","parent":{"krate":0,"index":9980},"children":[],"decl_id":null,"docs":" Specialization.\n","sig":null,"attributes":[{"value":"/ Specialization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162024,"byte_end":162043,"line_start":178,"line_end":178,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":9990},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162459,"byte_end":162480,"line_start":195,"line_end":195,"column_start":16,"column_end":37},"name":"PipelineCreationFlags","qualname":"::pso::PipelineCreationFlags","value":"PipelineCreationFlags {  }","parent":null,"children":[{"krate":0,"index":9991}],"decl_id":null,"docs":" Pipeline creation flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162601,"byte_end":162621,"line_start":199,"line_end":199,"column_start":15,"column_end":35},"name":"DISABLE_OPTIMIZATION","qualname":"::pso::PipelineCreationFlags::DISABLE_OPTIMIZATION","value":"PipelineCreationFlags","parent":{"krate":0,"index":10027},"children":[],"decl_id":null,"docs":" Disable pipeline optimizations.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162778,"byte_end":162795,"line_start":203,"line_end":203,"column_start":15,"column_end":32},"name":"ALLOW_DERIVATIVES","qualname":"::pso::PipelineCreationFlags::ALLOW_DERIVATIVES","value":"PipelineCreationFlags","parent":{"krate":0,"index":10027},"children":[],"decl_id":null,"docs":" Allow derivatives (children) of the pipeline.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":10084},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163157,"byte_end":163165,"line_start":214,"line_end":214,"column_start":5,"column_end":13},"name":"Pipeline","qualname":"::pso::BasePipeline::Pipeline","value":"BasePipeline::Pipeline(&'a P)","parent":{"krate":0,"index":10081},"children":[],"decl_id":null,"docs":" Referencing an existing pipeline as parent.\n","sig":null,"attributes":[{"value":"/ Referencing an existing pipeline as parent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163105,"byte_end":163152,"line_start":213,"line_end":213,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10087},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163315,"byte_end":163320,"line_start":218,"line_end":218,"column_start":5,"column_end":10},"name":"Index","qualname":"::pso::BasePipeline::Index","value":"BasePipeline::Index(usize)","parent":{"krate":0,"index":10081},"children":[],"decl_id":null,"docs":" A pipeline in the same create pipelines call.","sig":null,"attributes":[{"value":"/ A pipeline in the same create pipelines call.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163178,"byte_end":163227,"line_start":215,"line_end":215,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163232,"byte_end":163235,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ The index of the parent must be lower than the index of the child.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163240,"byte_end":163310,"line_start":217,"line_end":217,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10090},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163368,"byte_end":163372,"line_start":220,"line_end":220,"column_start":5,"column_end":9},"name":"None","qualname":"::pso::BasePipeline::None","value":"BasePipeline::None","parent":{"krate":0,"index":10081},"children":[],"decl_id":null,"docs":" No parent pipeline exists.\n","sig":null,"attributes":[{"value":"/ No parent pipeline exists.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163333,"byte_end":163363,"line_start":219,"line_end":219,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":10081},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163075,"byte_end":163087,"line_start":212,"line_end":212,"column_start":10,"column_end":22},"name":"BasePipeline","qualname":"::pso::BasePipeline","value":"BasePipeline::{Pipeline, Index, None}","parent":null,"children":[{"krate":0,"index":10084},{"krate":0,"index":10087},{"krate":0,"index":10090}],"decl_id":null,"docs":" A reference to a parent pipeline.  The assumption is that\n a parent and derivative/child pipeline have most settings\n in common, and one may be switched for another more quickly\n than entirely unrelated pipelines would be.\n","sig":null,"attributes":[{"value":"/ A reference to a parent pipeline.  The assumption is that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162813,"byte_end":162874,"line_start":207,"line_end":207,"column_start":1,"column_end":62}},{"value":"/ a parent and derivative/child pipeline have most settings","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162875,"byte_end":162936,"line_start":208,"line_end":208,"column_start":1,"column_end":62}},{"value":"/ in common, and one may be switched for another more quickly","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162937,"byte_end":163000,"line_start":209,"line_end":209,"column_start":1,"column_end":64}},{"value":"/ than entirely unrelated pipelines would be.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163001,"byte_end":163048,"line_start":210,"line_end":210,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10098},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163628,"byte_end":163634,"line_start":228,"line_end":228,"column_start":5,"column_end":11},"name":"Static","qualname":"::pso::State::Static","value":"State::Static(T)","parent":{"krate":0,"index":10096},"children":[],"decl_id":null,"docs":" Static state that cannot be altered.\n","sig":null,"attributes":[{"value":"/ Static state that cannot be altered.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163583,"byte_end":163623,"line_start":227,"line_end":227,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10101},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163695,"byte_end":163702,"line_start":230,"line_end":230,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::pso::State::Dynamic","value":"State::Dynamic","parent":{"krate":0,"index":10096},"children":[],"decl_id":null,"docs":" Dynamic state set through a command buffer.\n","sig":null,"attributes":[{"value":"/ Dynamic state set through a command buffer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163643,"byte_end":163690,"line_start":229,"line_end":229,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":10096},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163568,"byte_end":163573,"line_start":226,"line_end":226,"column_start":10,"column_end":15},"name":"State","qualname":"::pso::State","value":"State::{Static, Dynamic}","parent":null,"children":[{"krate":0,"index":10098},{"krate":0,"index":10101}],"decl_id":null,"docs":" Pipeline state which may be static or dynamic.\n","sig":null,"attributes":[{"value":"/ Pipeline state which may be static or dynamic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163377,"byte_end":163427,"line_start":223,"line_end":223,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163784,"byte_end":163793,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"static_or","qualname":"<State<T>>::static_or","value":"fn (self, default: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the static value or a default.\n","sig":null,"attributes":[{"value":"/ Returns the static value or a default.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163730,"byte_end":163772,"line_start":234,"line_end":234,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163979,"byte_end":163988,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"name":"is_static","qualname":"<State<T>>::is_static","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the state is static.\n","sig":null,"attributes":[{"value":"/ Whether the state is static.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163935,"byte_end":163967,"line_start":242,"line_end":242,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164167,"byte_end":164177,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"name":"is_dynamic","qualname":"<State<T>>::is_dynamic","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the state is dynamic.\n","sig":null,"attributes":[{"value":"/ Whether the state is dynamic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164122,"byte_end":164155,"line_start":250,"line_end":250,"column_start":5,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164960,"byte_end":164970,"line_start":275,"line_end":275,"column_start":8,"column_end":18},"name":"read_spirv","qualname":"::pso::read_spirv","value":"fn <R> (mut x: R) -> io::Result<Vec<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Safely read SPIR-V","sig":null,"attributes":[{"value":"/ Safely read SPIR-V","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164229,"byte_end":164251,"line_start":256,"line_end":256,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164252,"byte_end":164255,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ Converts to native endianness and returns correctly aligned storage without unnecessary","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164256,"byte_end":164347,"line_start":258,"line_end":258,"column_start":1,"column_end":92}},{"value":"/ copying. Returns an `InvalidData` error if the input is trivially not SPIR-V.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164348,"byte_end":164429,"line_start":259,"line_end":259,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164430,"byte_end":164433,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ This function can also be used to convert an already in-memory `&[u8]` to a valid `Vec<u32>`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164434,"byte_end":164531,"line_start":261,"line_end":261,"column_start":1,"column_end":98}},{"value":"/ but prefer working with `&[u32]` from the start whenever possible.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164532,"byte_end":164602,"line_start":262,"line_end":262,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164603,"byte_end":164606,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164607,"byte_end":164621,"line_start":264,"line_end":264,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164622,"byte_end":164635,"line_start":265,"line_end":265,"column_start":1,"column_end":14}},{"value":"/ let mut file = std::fs::File::open(\"/path/to/shader.spv\").unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164636,"byte_end":164707,"line_start":266,"line_end":266,"column_start":1,"column_end":72}},{"value":"/ let words = gfx_hal::pso::read_spirv(&mut file).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164708,"byte_end":164769,"line_start":267,"line_end":267,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164770,"byte_end":164777,"line_start":268,"line_end":268,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164778,"byte_end":164785,"line_start":269,"line_end":269,"column_start":1,"column_end":8}},{"value":"/ const SPIRV: &[u8] = &[","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164786,"byte_end":164813,"line_start":270,"line_end":270,"column_start":1,"column_end":28}},{"value":"/     0x03, 0x02, 0x23, 0x07, // ...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164814,"byte_end":164852,"line_start":271,"line_end":271,"column_start":1,"column_end":39}},{"value":"/ ];","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164853,"byte_end":164859,"line_start":272,"line_end":272,"column_start":1,"column_end":7}},{"value":"/ let words = gfx_hal::pso::read_spirv(std::io::Cursor::new(&SPIRV[..])).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164860,"byte_end":164944,"line_start":273,"line_end":273,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":164945,"byte_end":164952,"line_start":274,"line_end":274,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":712},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"query","qualname":"::query","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":10136},{"krate":0,"index":10149},{"krate":0,"index":10147},{"krate":0,"index":10143},{"krate":0,"index":10144},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":10151},{"krate":0,"index":10156},{"krate":0,"index":10160},{"krate":0,"index":10182},{"krate":0,"index":10178},{"krate":0,"index":10179},{"krate":0,"index":10175},{"krate":0,"index":10176},{"krate":0,"index":10173},{"krate":0,"index":10167},{"krate":0,"index":10165},{"krate":0,"index":10162},{"krate":0,"index":10183},{"krate":0,"index":10188},{"krate":0,"index":10190},{"krate":0,"index":10192},{"krate":0,"index":10194},{"krate":0,"index":10196},{"krate":0,"index":10203},{"krate":0,"index":10206},{"krate":0,"index":10208},{"krate":0,"index":10211},{"krate":0,"index":10213},{"krate":0,"index":10216},{"krate":0,"index":10218},{"krate":0,"index":10221},{"krate":0,"index":10223},{"krate":0,"index":10226},{"krate":0,"index":10229},{"krate":0,"index":10246},{"krate":0,"index":10268},{"krate":0,"index":10264},{"krate":0,"index":10265},{"krate":0,"index":10261},{"krate":0,"index":10262},{"krate":0,"index":10259},{"krate":0,"index":10253},{"krate":0,"index":10251},{"krate":0,"index":10248},{"krate":0,"index":10269},{"krate":0,"index":10277},{"krate":0,"index":10279},{"krate":0,"index":10281},{"krate":0,"index":10283},{"krate":0,"index":10285},{"krate":0,"index":10295},{"krate":0,"index":10298},{"krate":0,"index":10300},{"krate":0,"index":10303},{"krate":0,"index":10305},{"krate":0,"index":10308},{"krate":0,"index":10310},{"krate":0,"index":10313},{"krate":0,"index":10315},{"krate":0,"index":10318},{"krate":0,"index":10321},{"krate":0,"index":10347},{"krate":0,"index":10369},{"krate":0,"index":10367},{"krate":0,"index":10365},{"krate":0,"index":10362},{"krate":0,"index":10359},{"krate":0,"index":10360},{"krate":0,"index":10355},{"krate":0,"index":10356},{"krate":0,"index":10370},{"krate":0,"index":10392},{"krate":0,"index":10388},{"krate":0,"index":10389},{"krate":0,"index":10385},{"krate":0,"index":10386},{"krate":0,"index":10383},{"krate":0,"index":10377},{"krate":0,"index":10375},{"krate":0,"index":10372},{"krate":0,"index":10393},{"krate":0,"index":10408},{"krate":0,"index":10410},{"krate":0,"index":10412},{"krate":0,"index":10414},{"krate":0,"index":10416},{"krate":0,"index":10433},{"krate":0,"index":10436},{"krate":0,"index":10438},{"krate":0,"index":10441},{"krate":0,"index":10443},{"krate":0,"index":10446},{"krate":0,"index":10448},{"krate":0,"index":10451},{"krate":0,"index":10453},{"krate":0,"index":10456},{"krate":0,"index":10459}],"decl_id":null,"docs":" Queries are commands that can be submitted to a command buffer to record statistics or\n other useful values as the command buffer is running. They are often intended for profiling\n or other introspection, providing a mechanism for the command buffer to record data about its\n operation as it is running.\n","sig":null,"attributes":[{"value":"! Queries are commands that can be submitted to a command buffer to record statistics or","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":209830,"byte_end":209920,"line_start":1,"line_end":1,"column_start":1,"column_end":91}},{"value":"! other useful values as the command buffer is running. They are often intended for profiling","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":209921,"byte_end":210016,"line_start":2,"line_end":2,"column_start":1,"column_end":96}},{"value":"! or other introspection, providing a mechanism for the command buffer to record data about its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210017,"byte_end":210114,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"! operation as it is running.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210115,"byte_end":210146,"line_start":4,"line_end":4,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":715},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210234,"byte_end":210236,"line_start":10,"line_end":10,"column_start":10,"column_end":12},"name":"Id","qualname":"::query::Id","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" A query identifier.\n","sig":null,"attributes":[{"value":"/ A query identifier.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210201,"byte_end":210224,"line_start":9,"line_end":9,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10137},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210380,"byte_end":210391,"line_start":16,"line_end":16,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::query::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(OutOfMemory)","parent":{"krate":0,"index":10136},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210335,"byte_end":210375,"line_start":15,"line_end":15,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10140},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210443,"byte_end":210454,"line_start":19,"line_end":19,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::query::CreationError::Unsupported","value":"CreationError::Unsupported(Type)","parent":{"krate":0,"index":10136},"children":[],"decl_id":null,"docs":" Query type unsupported.\n","sig":null,"attributes":[{"value":"/ Query type unsupported.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210411,"byte_end":210438,"line_start":18,"line_end":18,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":10136},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210315,"byte_end":210328,"line_start":14,"line_end":14,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::query::CreationError","value":"CreationError::{OutOfMemory, Unsupported}","parent":null,"children":[{"krate":0,"index":10137},{"krate":0,"index":10140}],"decl_id":null,"docs":" Query creation error.\n","sig":null,"attributes":[{"value":"/ Query creation error.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210245,"byte_end":210270,"line_start":12,"line_end":12,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":10151},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211192,"byte_end":211197,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"Query","qualname":"::query::Query","value":"Query { pool, id }","parent":null,"children":[{"krate":0,"index":10154},{"krate":0,"index":10155}],"decl_id":null,"docs":" A `Query` object has a particular identifier and saves its results to a given `QueryPool`.\n It is passed as a parameter to the command buffer's query methods.\n","sig":null,"attributes":[{"value":"/ A `Query` object has a particular identifier and saves its results to a given `QueryPool`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210998,"byte_end":211092,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ It is passed as a parameter to the command buffer's query methods.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211093,"byte_end":211163,"line_start":40,"line_end":40,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":10154},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211232,"byte_end":211236,"line_start":44,"line_end":44,"column_start":9,"column_end":13},"name":"pool","qualname":"::query::Query::pool","value":"&'a <B as Backend>::QueryPool","parent":{"krate":0,"index":10151},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211220,"byte_end":211223,"line_start":43,"line_end":43,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":10155},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211272,"byte_end":211274,"line_start":46,"line_end":46,"column_start":9,"column_end":11},"name":"id","qualname":"::query::Query::id","value":"u32","parent":{"krate":0,"index":10151},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211260,"byte_end":211263,"line_start":45,"line_end":45,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":10160},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211405,"byte_end":211417,"line_start":52,"line_end":52,"column_start":16,"column_end":28},"name":"ControlFlags","qualname":"::query::ControlFlags","value":"ControlFlags {  }","parent":null,"children":[{"krate":0,"index":10161}],"decl_id":null,"docs":" Query control flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10197},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211586,"byte_end":211593,"line_start":56,"line_end":56,"column_start":15,"column_end":22},"name":"PRECISE","qualname":"::query::ControlFlags::PRECISE","value":"ControlFlags","parent":{"krate":0,"index":10196},"children":[],"decl_id":null,"docs":" Occlusion queries **must** return the exact sampler number.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":10246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211732,"byte_end":211743,"line_start":63,"line_end":63,"column_start":16,"column_end":27},"name":"ResultFlags","qualname":"::query::ResultFlags","value":"ResultFlags {  }","parent":null,"children":[{"krate":0,"index":10247}],"decl_id":null,"docs":" Query result flags.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10286},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211848,"byte_end":211855,"line_start":65,"line_end":65,"column_start":15,"column_end":22},"name":"BITS_64","qualname":"::query::ResultFlags::BITS_64","value":"ResultFlags","parent":{"krate":0,"index":10285},"children":[],"decl_id":null,"docs":" Results will be written as an array of 64-bit unsigned integer values.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10287},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":211971,"byte_end":211975,"line_start":67,"line_end":67,"column_start":15,"column_end":19},"name":"WAIT","qualname":"::query::ResultFlags::WAIT","value":"ResultFlags","parent":{"krate":0,"index":10285},"children":[],"decl_id":null,"docs":" Wait for each query’s status to become available before retrieving its results.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212054,"byte_end":212071,"line_start":69,"line_end":69,"column_start":15,"column_end":32},"name":"WITH_AVAILABILITY","qualname":"::query::ResultFlags::WITH_AVAILABILITY","value":"ResultFlags","parent":{"krate":0,"index":10285},"children":[],"decl_id":null,"docs":" Availability status accompanies the results.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10289},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212146,"byte_end":212153,"line_start":71,"line_end":71,"column_start":15,"column_end":22},"name":"PARTIAL","qualname":"::query::ResultFlags::PARTIAL","value":"ResultFlags","parent":{"krate":0,"index":10285},"children":[],"decl_id":null,"docs":" Returning partial results is acceptable.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":10348},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212394,"byte_end":212403,"line_start":80,"line_end":80,"column_start":5,"column_end":14},"name":"Occlusion","qualname":"::query::Type::Occlusion","value":"Type::Occlusion","parent":{"krate":0,"index":10347},"children":[],"decl_id":null,"docs":" Occlusion query. Count the number of drawn samples between\n the start and end of the query command.\n","sig":null,"attributes":[{"value":"/ Occlusion query. Count the number of drawn samples between","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212279,"byte_end":212341,"line_start":78,"line_end":78,"column_start":5,"column_end":67}},{"value":"/ the start and end of the query command.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212346,"byte_end":212389,"line_start":79,"line_end":79,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10350},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212574,"byte_end":212592,"line_start":84,"line_end":84,"column_start":5,"column_end":23},"name":"PipelineStatistics","qualname":"::query::Type::PipelineStatistics","value":"Type::PipelineStatistics(PipelineStatistic)","parent":{"krate":0,"index":10347},"children":[],"decl_id":null,"docs":" Pipeline statistic query. Counts the number of pipeline stage\n invocations of the given types between the start and end of\n the query command.\n","sig":null,"attributes":[{"value":"/ Pipeline statistic query. Counts the number of pipeline stage","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212409,"byte_end":212474,"line_start":81,"line_end":81,"column_start":5,"column_end":70}},{"value":"/ invocations of the given types between the start and end of","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212479,"byte_end":212542,"line_start":82,"line_end":82,"column_start":5,"column_end":68}},{"value":"/ the query command.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212547,"byte_end":212569,"line_start":83,"line_end":83,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10353},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212727,"byte_end":212736,"line_start":87,"line_end":87,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::query::Type::Timestamp","value":"Type::Timestamp","parent":{"krate":0,"index":10347},"children":[],"decl_id":null,"docs":" Timestamp query. Timestamps can be recorded to the\n query pool by calling `write_timestamp()`.\n","sig":null,"attributes":[{"value":"/ Timestamp query. Timestamps can be recorded to the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212617,"byte_end":212671,"line_start":85,"line_end":85,"column_start":5,"column_end":59}},{"value":"/ query pool by calling `write_timestamp()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212676,"byte_end":212722,"line_start":86,"line_end":86,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":10347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212268,"byte_end":212272,"line_start":77,"line_end":77,"column_start":10,"column_end":14},"name":"Type","qualname":"::query::Type","value":"Type::{Occlusion, PipelineStatistics, Timestamp}","parent":null,"children":[{"krate":0,"index":10348},{"krate":0,"index":10350},{"krate":0,"index":10353}],"decl_id":null,"docs":" Type of queries in a query pool.\n","sig":null,"attributes":[{"value":"/ Type of queries in a query pool.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212171,"byte_end":212207,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":10370},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212867,"byte_end":212884,"line_start":93,"line_end":93,"column_start":16,"column_end":33},"name":"PipelineStatistic","qualname":"::query::PipelineStatistic","value":"PipelineStatistic {  }","parent":null,"children":[{"krate":0,"index":10371}],"decl_id":null,"docs":" Pipeline statistic flags\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10417},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212918,"byte_end":212941,"line_start":95,"line_end":95,"column_start":15,"column_end":38},"name":"INPUT_ASSEMBLY_VERTICES","qualname":"::query::PipelineStatistic::INPUT_ASSEMBLY_VERTICES","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":212975,"byte_end":213000,"line_start":97,"line_end":97,"column_start":15,"column_end":40},"name":"INPUT_ASSEMBLY_PRIMITIVES","qualname":"::query::PipelineStatistic::INPUT_ASSEMBLY_PRIMITIVES","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213034,"byte_end":213059,"line_start":99,"line_end":99,"column_start":15,"column_end":40},"name":"VERTEX_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::VERTEX_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10420},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213093,"byte_end":213120,"line_start":101,"line_end":101,"column_start":15,"column_end":42},"name":"GEOMETRY_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::GEOMETRY_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10421},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213154,"byte_end":213180,"line_start":103,"line_end":103,"column_start":15,"column_end":41},"name":"GEOMETRY_SHADER_PRIMITIVES","qualname":"::query::PipelineStatistic::GEOMETRY_SHADER_PRIMITIVES","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213215,"byte_end":213235,"line_start":105,"line_end":105,"column_start":15,"column_end":35},"name":"CLIPPING_INVOCATIONS","qualname":"::query::PipelineStatistic::CLIPPING_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10423},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213270,"byte_end":213289,"line_start":107,"line_end":107,"column_start":15,"column_end":34},"name":"CLIPPING_PRIMITIVES","qualname":"::query::PipelineStatistic::CLIPPING_PRIMITIVES","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10424},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213324,"byte_end":213351,"line_start":109,"line_end":109,"column_start":15,"column_end":42},"name":"FRAGMENT_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::FRAGMENT_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10425},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213386,"byte_end":213405,"line_start":111,"line_end":111,"column_start":15,"column_end":34},"name":"HULL_SHADER_PATCHES","qualname":"::query::PipelineStatistic::HULL_SHADER_PATCHES","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10426},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213441,"byte_end":213466,"line_start":113,"line_end":113,"column_start":15,"column_end":40},"name":"DOMAIN_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::DOMAIN_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":213502,"byte_end":213528,"line_start":115,"line_end":115,"column_start":15,"column_end":41},"name":"COMPUTE_SHADER_INVOCATIONS","qualname":"::query::PipelineStatistic::COMPUTE_SHADER_INVOCATIONS","value":"PipelineStatistic","parent":{"krate":0,"index":10416},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":720},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"queue","qualname":"::queue","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":734},{"krate":0,"index":743},{"krate":0,"index":748},{"krate":0,"index":10531},{"krate":0,"index":10549},{"krate":0,"index":10548},{"krate":0,"index":10546},{"krate":0,"index":10543},{"krate":0,"index":10544},{"krate":0,"index":10540},{"krate":0,"index":10541},{"krate":0,"index":752},{"krate":0,"index":756},{"krate":0,"index":10551},{"krate":0,"index":10558},{"krate":0,"index":757}],"decl_id":null,"docs":" Command queues.","sig":null,"attributes":[{"value":"! Command queues.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213548,"byte_end":213567,"line_start":1,"line_end":1,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213568,"byte_end":213571,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Queues are the execution paths of the graphical processing units. These process","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213572,"byte_end":213655,"line_start":3,"line_end":3,"column_start":1,"column_end":84}},{"value":"! submitted commands buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213656,"byte_end":213687,"line_start":4,"line_end":4,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213688,"byte_end":213691,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! There are different types of queues, which can only handle associated command buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213692,"byte_end":213782,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"! `CommandQueue<B, C>` has the capability defined by `C`: graphics, compute and transfer.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213783,"byte_end":213874,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":721},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"family","qualname":"::queue::family","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":10506},{"krate":0,"index":10522},{"krate":0,"index":10521},{"krate":0,"index":10519},{"krate":0,"index":10515},{"krate":0,"index":10516},{"krate":0,"index":10512},{"krate":0,"index":10513},{"krate":0,"index":10509},{"krate":0,"index":10524},{"krate":0,"index":10528},{"krate":0,"index":730}],"decl_id":null,"docs":" Queue family and groups.\n","sig":null,"attributes":[{"value":"! Queue family and groups.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":218907,"byte_end":218935,"line_start":1,"line_end":1,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":726},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219207,"byte_end":219218,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"QueueFamily","qualname":"::queue::family::QueueFamily","value":"QueueFamily: Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729}],"decl_id":null,"docs":" General information about a queue family, available upon adapter discovery.","sig":null,"attributes":[{"value":"/ General information about a queue family, available upon adapter discovery.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219028,"byte_end":219107,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219108,"byte_end":219111,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Note that a backend can expose multiple queue families with the same properties.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219112,"byte_end":219196,"line_start":11,"line_end":11,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219291,"byte_end":219301,"line_start":14,"line_end":14,"column_start":8,"column_end":18},"name":"queue_type","qualname":"::queue::family::QueueFamily::queue_type","value":"fn (&self) -> QueueType","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Returns the type of queues.\n","sig":null,"attributes":[{"value":"/ Returns the type of queues.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219252,"byte_end":219283,"line_start":13,"line_end":13,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219397,"byte_end":219407,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"max_queues","qualname":"::queue::family::QueueFamily::max_queues","value":"fn (&self) -> usize","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Returns maximum number of queues created from this family.\n","sig":null,"attributes":[{"value":"/ Returns maximum number of queues created from this family.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219327,"byte_end":219389,"line_start":15,"line_end":15,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219469,"byte_end":219471,"line_start":18,"line_end":18,"column_start":8,"column_end":10},"name":"id","qualname":"::queue::family::QueueFamily::id","value":"fn (&self) -> QueueFamilyId","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" Returns the queue family ID.\n","sig":null,"attributes":[{"value":"/ Returns the queue family ID.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219429,"byte_end":219461,"line_start":17,"line_end":17,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":10506},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219681,"byte_end":219694,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"QueueFamilyId","qualname":"::queue::family::QueueFamilyId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Identifier for a queue family of a physical device.\n","sig":null,"attributes":[{"value":"/ Identifier for a queue family of a physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219500,"byte_end":219555,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":10524},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219822,"byte_end":219832,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"QueueGroup","qualname":"::queue::family::QueueGroup","value":"QueueGroup { family, queues }","parent":null,"children":[{"krate":0,"index":10526},{"krate":0,"index":10527}],"decl_id":null,"docs":" Bare-metal queue group.","sig":null,"attributes":[{"value":"/ Bare-metal queue group.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219708,"byte_end":219735,"line_start":26,"line_end":26,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219736,"byte_end":219739,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Denotes all queues created from one queue family.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219740,"byte_end":219793,"line_start":28,"line_end":28,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":10526},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219906,"byte_end":219912,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"family","qualname":"::queue::family::QueueGroup::family","value":"queue::family::QueueFamilyId","parent":{"krate":0,"index":10524},"children":[],"decl_id":null,"docs":" Family index for the queues in this group.\n","sig":null,"attributes":[{"value":"/ Family index for the queues in this group.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219851,"byte_end":219897,"line_start":31,"line_end":31,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":10527},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219961,"byte_end":219967,"line_start":34,"line_end":34,"column_start":9,"column_end":15},"name":"queues","qualname":"::queue::family::QueueGroup::queues","value":"std::vec::Vec<<B as Backend>::CommandQueue>","parent":{"krate":0,"index":10524},"children":[],"decl_id":null,"docs":" List of queues.\n","sig":null,"attributes":[{"value":"/ List of queues.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219933,"byte_end":219952,"line_start":33,"line_end":33,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220098,"byte_end":220101,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<QueueGroup<B>>::new","value":"fn (family: QueueFamilyId) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty queue group for a queue family.\n","sig":null,"attributes":[{"value":"/ Create a new, empty queue group for a queue family.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220031,"byte_end":220086,"line_start":38,"line_end":38,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220348,"byte_end":220357,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"add_queue","qualname":"<QueueGroup<B>>::add_queue","value":"fn (&mut self, queue: B::CommandQueue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a command queue to the group.","sig":null,"attributes":[{"value":"/ Add a command queue to the group.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220229,"byte_end":220266,"line_start":46,"line_end":46,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220271,"byte_end":220274,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The queue needs to be created from this queue family.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220279,"byte_end":220336,"line_start":48,"line_end":48,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10532},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214381,"byte_end":214388,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"General","qualname":"::queue::QueueType::General","value":"QueueType::General","parent":{"krate":0,"index":10531},"children":[],"decl_id":null,"docs":" Supports all operations.\n","sig":null,"attributes":[{"value":"/ Supports all operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214348,"byte_end":214376,"line_start":25,"line_end":25,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10534},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214450,"byte_end":214458,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Graphics","qualname":"::queue::QueueType::Graphics","value":"QueueType::Graphics","parent":{"krate":0,"index":10531},"children":[],"decl_id":null,"docs":" Only supports graphics and transfer operations.\n","sig":null,"attributes":[{"value":"/ Only supports graphics and transfer operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214394,"byte_end":214445,"line_start":27,"line_end":27,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10536},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214519,"byte_end":214526,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"Compute","qualname":"::queue::QueueType::Compute","value":"QueueType::Compute","parent":{"krate":0,"index":10531},"children":[],"decl_id":null,"docs":" Only supports compute and transfer operations.\n","sig":null,"attributes":[{"value":"/ Only supports compute and transfer operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214464,"byte_end":214514,"line_start":29,"line_end":29,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10538},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214575,"byte_end":214583,"line_start":32,"line_end":32,"column_start":5,"column_end":13},"name":"Transfer","qualname":"::queue::QueueType::Transfer","value":"QueueType::Transfer","parent":{"krate":0,"index":10531},"children":[],"decl_id":null,"docs":" Only supports transfer operations.\n","sig":null,"attributes":[{"value":"/ Only supports transfer operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214532,"byte_end":214570,"line_start":31,"line_end":31,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":10531},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214332,"byte_end":214341,"line_start":24,"line_end":24,"column_start":10,"column_end":19},"name":"QueueType","qualname":"::queue::QueueType","value":"QueueType::{General, Graphics, Compute, Transfer}","parent":null,"children":[{"krate":0,"index":10532},{"krate":0,"index":10534},{"krate":0,"index":10536},{"krate":0,"index":10538}],"decl_id":null,"docs":" The type of the queue, an enum encompassing `queue::Capability`\n","sig":null,"attributes":[{"value":"/ The type of the queue, an enum encompassing `queue::Capability`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214147,"byte_end":214214,"line_start":21,"line_end":21,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214680,"byte_end":214697,"line_start":37,"line_end":37,"column_start":12,"column_end":29},"name":"supports_graphics","qualname":"<QueueType>::supports_graphics","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the queue supports graphics operations.\n","sig":null,"attributes":[{"value":"/ Returns true if the queue supports graphics operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214609,"byte_end":214668,"line_start":36,"line_end":36,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214952,"byte_end":214968,"line_start":44,"line_end":44,"column_start":12,"column_end":28},"name":"supports_compute","qualname":"<QueueType>::supports_compute","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the queue supports compute operations.\n","sig":null,"attributes":[{"value":"/ Returns true if the queue supports compute operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214882,"byte_end":214940,"line_start":43,"line_end":43,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215224,"byte_end":215241,"line_start":51,"line_end":51,"column_start":12,"column_end":29},"name":"supports_transfer","qualname":"<QueueType>::supports_transfer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the queue supports transfer operations.\n","sig":null,"attributes":[{"value":"/ Returns true if the queue supports transfer operations.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215153,"byte_end":215212,"line_start":50,"line_end":50,"column_start":5,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":756},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215405,"byte_end":215418,"line_start":58,"line_end":58,"column_start":10,"column_end":23},"name":"QueuePriority","qualname":"::queue::QueuePriority","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Scheduling hint for devices about the priority of a queue.  Values range from `0.0` (low) to\n `1.0` (high).\n","sig":null,"attributes":[{"value":"/ Scheduling hint for devices about the priority of a queue.  Values range from `0.0` (low) to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215281,"byte_end":215377,"line_start":56,"line_end":56,"column_start":1,"column_end":97}},{"value":"/ `1.0` (high).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215378,"byte_end":215395,"line_start":57,"line_end":57,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":10551},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215503,"byte_end":215513,"line_start":62,"line_end":62,"column_start":12,"column_end":22},"name":"Submission","qualname":"::queue::Submission","value":"Submission { command_buffers, wait_semaphores, signal_semaphores }","parent":null,"children":[{"krate":0,"index":10555},{"krate":0,"index":10556},{"krate":0,"index":10557}],"decl_id":null,"docs":" Submission information for a command queue.\n","sig":null,"attributes":[{"value":"/ Submission information for a command queue.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215427,"byte_end":215474,"line_start":60,"line_end":60,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":10555},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215571,"byte_end":215586,"line_start":64,"line_end":64,"column_start":9,"column_end":24},"name":"command_buffers","qualname":"::queue::Submission::command_buffers","value":"Ic","parent":{"krate":0,"index":10551},"children":[],"decl_id":null,"docs":" Command buffers to submit.\n","sig":null,"attributes":[{"value":"/ Command buffers to submit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215532,"byte_end":215562,"line_start":63,"line_end":63,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":10556},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215662,"byte_end":215677,"line_start":66,"line_end":66,"column_start":9,"column_end":24},"name":"wait_semaphores","qualname":"::queue::Submission::wait_semaphores","value":"Iw","parent":{"krate":0,"index":10551},"children":[],"decl_id":null,"docs":" Semaphores to wait being signalled before submission.\n","sig":null,"attributes":[{"value":"/ Semaphores to wait being signalled before submission.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215596,"byte_end":215653,"line_start":65,"line_end":65,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":10557},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215789,"byte_end":215806,"line_start":68,"line_end":68,"column_start":9,"column_end":26},"name":"signal_semaphores","qualname":"::queue::Submission::signal_semaphores","value":"Is","parent":{"krate":0,"index":10551},"children":[],"decl_id":null,"docs":" Semaphores to signal after all command buffers in the submission have finished execution.\n","sig":null,"attributes":[{"value":"/ Semaphores to signal after all command buffers in the submission have finished execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215687,"byte_end":215780,"line_start":67,"line_end":67,"column_start":5,"column_end":98}}]},{"kind":"Trait","id":{"krate":0,"index":757},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215988,"byte_end":216000,"line_start":73,"line_end":73,"column_start":11,"column_end":23},"name":"CommandQueue","qualname":"::queue::CommandQueue","value":"CommandQueue<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":766},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":780},{"krate":0,"index":781}],"decl_id":null,"docs":" `RawCommandQueue` are abstractions to the internal GPU execution engines.\n Commands are executed on the the device by submitting command buffers to queues.\n","sig":null,"attributes":[{"value":"/ `RawCommandQueue` are abstractions to the internal GPU execution engines.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215815,"byte_end":215892,"line_start":71,"line_end":71,"column_start":1,"column_end":78}},{"value":"/ Commands are executed on the the device by submitting command buffers to queues.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":215893,"byte_end":215977,"line_start":72,"line_end":72,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216555,"byte_end":216561,"line_start":81,"line_end":81,"column_start":15,"column_end":21},"name":"submit","qualname":"::queue::CommandQueue::submit","value":"fn <'a, T, Ic, S, Iw, Is> (&mut self, submission: Submission<Ic, Iw, Is>, fence: Option<&B::Fence>) -> ()","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Submit command buffers to queue for execution.\n `fence` must be in unsignalled state, and will be signalled after all command buffers in the submission have\n finished execution.","sig":null,"attributes":[{"value":"/ Submit command buffers to queue for execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216051,"byte_end":216101,"line_start":74,"line_end":74,"column_start":5,"column_end":55}},{"value":"/ `fence` must be in unsignalled state, and will be signalled after all command buffers in the submission have","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216106,"byte_end":216218,"line_start":75,"line_end":75,"column_start":5,"column_end":117}},{"value":"/ finished execution.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216223,"byte_end":216246,"line_start":76,"line_end":76,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216251,"byte_end":216254,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Unsafe because it's not checked that the queue can process the submitted command buffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216259,"byte_end":216352,"line_start":78,"line_end":78,"column_start":5,"column_end":98}},{"value":"/ Trying to submit compute commands to a graphics queue will result in undefined behavior.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216357,"byte_end":216449,"line_start":79,"line_end":79,"column_start":5,"column_end":97}},{"value":"/ Each queue implements safer wrappers according to their supported functionalities!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216454,"byte_end":216540,"line_start":80,"line_end":80,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":217006,"byte_end":217031,"line_start":93,"line_end":93,"column_start":15,"column_end":40},"name":"submit_without_semaphores","qualname":"::queue::CommandQueue::submit_without_semaphores","value":"fn <'a, T, Ic> (&mut self, command_buffers: Ic, fence: Option<&B::Fence>) -> ()","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Simplified version of `submit` that doesn't expect any semaphores.\n","sig":null,"attributes":[{"value":"/ Simplified version of `submit` that doesn't expect any semaphores.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216921,"byte_end":216991,"line_start":92,"line_end":92,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":217750,"byte_end":217757,"line_start":114,"line_end":114,"column_start":15,"column_end":22},"name":"present","qualname":"::queue::CommandQueue::present","value":"fn <'a, W, Is, S, Iw> (&mut self, swapchains: Is, wait_semaphores: Iw) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Presents the result of the queue to the given swapchains, after waiting on all the\n semaphores given in `wait_semaphores`. A given swapchain must not appear in this\n list more than once.","sig":null,"attributes":[{"value":"/ Presents the result of the queue to the given swapchains, after waiting on all the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":217472,"byte_end":217558,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/ semaphores given in `wait_semaphores`. A given swapchain must not appear in this","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":217563,"byte_end":217647,"line_start":110,"line_end":110,"column_start":5,"column_end":89}},{"value":"/ list more than once.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":217652,"byte_end":217676,"line_start":111,"line_end":111,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":217681,"byte_end":217684,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Unsafe for the same reasons as `submit()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":217689,"byte_end":217735,"line_start":113,"line_end":113,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":218195,"byte_end":218221,"line_start":127,"line_end":127,"column_start":15,"column_end":41},"name":"present_without_semaphores","qualname":"::queue::CommandQueue::present_without_semaphores","value":"fn <'a, W, Is> (&mut self, swapchains: Is) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Simplified version of `present` that doesn't expect any semaphores.\n","sig":null,"attributes":[{"value":"/ Simplified version of `present` that doesn't expect any semaphores.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":218109,"byte_end":218180,"line_start":126,"line_end":126,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":218576,"byte_end":218591,"line_start":140,"line_end":140,"column_start":15,"column_end":30},"name":"present_surface","qualname":"::queue::CommandQueue::present_surface","value":"fn (&mut self, surface: &mut B::Surface, image: <B::Surface as PresentationSurface<B>>::SwapchainImage, wait_semaphore: Option<&B::Semaphore>) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Present the a\n","sig":null,"attributes":[{"value":"/ Present the a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":218544,"byte_end":218561,"line_start":139,"line_end":139,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":218859,"byte_end":218868,"line_start":148,"line_end":148,"column_start":8,"column_end":17},"name":"wait_idle","qualname":"::queue::CommandQueue::wait_idle","value":"fn (&self) -> Result<(), OutOfMemory>","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Wait for the queue to idle.\n","sig":null,"attributes":[{"value":"/ Wait for the queue to idle.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":218820,"byte_end":218851,"line_start":147,"line_end":147,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":782},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"window","qualname":"::window","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":10563},{"krate":0,"index":10582},{"krate":0,"index":10580},{"krate":0,"index":10576},{"krate":0,"index":10577},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":10584},{"krate":0,"index":10604},{"krate":0,"index":10603},{"krate":0,"index":10601},{"krate":0,"index":10597},{"krate":0,"index":10598},{"krate":0,"index":10587},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":10606},{"krate":0,"index":10616},{"krate":0,"index":10614},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":821},{"krate":0,"index":827},{"krate":0,"index":10618},{"krate":0,"index":10640},{"krate":0,"index":10636},{"krate":0,"index":10637},{"krate":0,"index":10633},{"krate":0,"index":10634},{"krate":0,"index":10631},{"krate":0,"index":10625},{"krate":0,"index":10623},{"krate":0,"index":10620},{"krate":0,"index":10641},{"krate":0,"index":10649},{"krate":0,"index":10651},{"krate":0,"index":10653},{"krate":0,"index":10655},{"krate":0,"index":10657},{"krate":0,"index":10667},{"krate":0,"index":10670},{"krate":0,"index":10672},{"krate":0,"index":10675},{"krate":0,"index":10677},{"krate":0,"index":10680},{"krate":0,"index":10682},{"krate":0,"index":10685},{"krate":0,"index":10687},{"krate":0,"index":10690},{"krate":0,"index":10693},{"krate":0,"index":10719},{"krate":0,"index":10741},{"krate":0,"index":10737},{"krate":0,"index":10738},{"krate":0,"index":10734},{"krate":0,"index":10735},{"krate":0,"index":10732},{"krate":0,"index":10726},{"krate":0,"index":10724},{"krate":0,"index":10721},{"krate":0,"index":10742},{"krate":0,"index":10750},{"krate":0,"index":10752},{"krate":0,"index":10754},{"krate":0,"index":10756},{"krate":0,"index":10758},{"krate":0,"index":10768},{"krate":0,"index":10771},{"krate":0,"index":10773},{"krate":0,"index":10776},{"krate":0,"index":10778},{"krate":0,"index":10781},{"krate":0,"index":10783},{"krate":0,"index":10786},{"krate":0,"index":10788},{"krate":0,"index":10791},{"krate":0,"index":10794},{"krate":0,"index":10820},{"krate":0,"index":10830},{"krate":0,"index":10828},{"krate":0,"index":828},{"krate":0,"index":10832},{"krate":0,"index":10834},{"krate":0,"index":10836},{"krate":0,"index":10858},{"krate":0,"index":10856},{"krate":0,"index":10852},{"krate":0,"index":10853},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":10860},{"krate":0,"index":10878},{"krate":0,"index":10876},{"krate":0,"index":10872},{"krate":0,"index":10873},{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":10880},{"krate":0,"index":10892},{"krate":0,"index":10891},{"krate":0,"index":10889},{"krate":0,"index":10886},{"krate":0,"index":10887},{"krate":0,"index":10883},{"krate":0,"index":10884},{"krate":0,"index":852},{"krate":0,"index":854}],"decl_id":null,"docs":" Windowing system interoperability","sig":null,"attributes":[{"value":"! Windowing system interoperability","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220437,"byte_end":220474,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220475,"byte_end":220478,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Screen presentation (fullscreen or window) of images requires two objects:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220479,"byte_end":220557,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220558,"byte_end":220561,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! * [Surface](window::Surface) is the host abstraction of the native screen","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220562,"byte_end":220639,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"! * [Swapchain](window::Swapchain) is the device abstraction for a surface, containing multiple presentable images","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220640,"byte_end":220756,"line_start":6,"line_end":6,"column_start":1,"column_end":117}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220757,"byte_end":220760,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! ## Window","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220761,"byte_end":220774,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220775,"byte_end":220778,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! // DOC TODO","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220779,"byte_end":220794,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220795,"byte_end":220798,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! ## Surface","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220799,"byte_end":220813,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220814,"byte_end":220817,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! // DOC TODO","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220818,"byte_end":220833,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220834,"byte_end":220837,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! ## Swapchain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220838,"byte_end":220854,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220855,"byte_end":220858,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! The most interesting part of a swapchain are the contained presentable images/backbuffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220859,"byte_end":220953,"line_start":18,"line_end":18,"column_start":1,"column_end":95}},{"value":"! Presentable images are specialized images, which can be presented on the screen. They are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":220954,"byte_end":221047,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"! 2D color images with optionally associated depth-stencil images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221048,"byte_end":221116,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221117,"byte_end":221120,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! The common steps for presentation of a frame are acquisition and presentation:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221121,"byte_end":221203,"line_start":22,"line_end":22,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221204,"byte_end":221207,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221208,"byte_end":221221,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"! # extern crate gfx_backend_empty as empty;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221222,"byte_end":221268,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"! # extern crate gfx_hal;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221269,"byte_end":221296,"line_start":26,"line_end":26,"column_start":1,"column_end":28}},{"value":"! # fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221297,"byte_end":221314,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"! # use gfx_hal::prelude::*;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221315,"byte_end":221345,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221346,"byte_end":221349,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! # let mut swapchain: empty::Swapchain = return;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221350,"byte_end":221401,"line_start":30,"line_end":30,"column_start":1,"column_end":52}},{"value":"! # let device: empty::Device = return;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221402,"byte_end":221443,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"! # let mut present_queue: empty::CommandQueue = return;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221444,"byte_end":221502,"line_start":32,"line_end":32,"column_start":1,"column_end":59}},{"value":"! # unsafe {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221503,"byte_end":221517,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"! let acquisition_semaphore = device.create_semaphore().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221518,"byte_end":221585,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"! let render_semaphore = device.create_semaphore().unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221586,"byte_end":221648,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221649,"byte_end":221652,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! let (frame, suboptimal) = swapchain.acquire_image(!0, Some(&acquisition_semaphore), None).unwrap();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221653,"byte_end":221756,"line_start":37,"line_end":37,"column_start":1,"column_end":104}},{"value":"! // render the scene..","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221757,"byte_end":221782,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"! // `render_semaphore` will be signalled once rendering has been finished","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221783,"byte_end":221859,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"! swapchain.present(&mut present_queue, 0, &[render_semaphore]);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221860,"byte_end":221926,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"! # }}","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221927,"byte_end":221935,"line_start":41,"line_end":41,"column_start":1,"column_end":9}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221936,"byte_end":221943,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221944,"byte_end":221947,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! Queues need to synchronize with the presentation engine, usually done via signalling a semaphore","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":221948,"byte_end":222048,"line_start":44,"line_end":44,"column_start":1,"column_end":101}},{"value":"! once a frame is available for rendering and waiting on a separate semaphore until scene rendering","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222049,"byte_end":222150,"line_start":45,"line_end":45,"column_start":1,"column_end":102}},{"value":"! has finished.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222151,"byte_end":222168,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222169,"byte_end":222172,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ### Recreation","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222173,"byte_end":222191,"line_start":48,"line_end":48,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222192,"byte_end":222195,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! DOC TODO","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222196,"byte_end":222208,"line_start":50,"line_end":50,"column_start":1,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":796},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222511,"byte_end":222524,"line_start":67,"line_end":67,"column_start":11,"column_end":24},"name":"DEFAULT_USAGE","qualname":"::window::DEFAULT_USAGE","value":"image::Usage","parent":null,"children":[],"decl_id":null,"docs":" Default image usage for the swapchain.\n","sig":null,"attributes":[{"value":"/ Default image usage for the swapchain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222458,"byte_end":222500,"line_start":66,"line_end":66,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":797},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222626,"byte_end":222645,"line_start":69,"line_end":69,"column_start":11,"column_end":30},"name":"DEFAULT_IMAGE_COUNT","qualname":"::window::DEFAULT_IMAGE_COUNT","value":"SwapImageIndex","parent":null,"children":[],"decl_id":null,"docs":" Default image count for the swapchain.\n","sig":null,"attributes":[{"value":"/ Default image count for the swapchain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222573,"byte_end":222615,"line_start":68,"line_end":68,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10564},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222823,"byte_end":222834,"line_start":75,"line_end":75,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::window::CreationError::OutOfMemory","value":"CreationError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":10563},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222778,"byte_end":222818,"line_start":74,"line_end":74,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10567},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222884,"byte_end":222894,"line_start":77,"line_end":77,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::window::CreationError::DeviceLost","value":"CreationError::DeviceLost(device::DeviceLost)","parent":{"krate":0,"index":10563},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"/ Device is lost","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222861,"byte_end":222879,"line_start":76,"line_end":76,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10570},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222944,"byte_end":222955,"line_start":79,"line_end":79,"column_start":5,"column_end":16},"name":"SurfaceLost","qualname":"::window::CreationError::SurfaceLost","value":"CreationError::SurfaceLost(device::SurfaceLost)","parent":{"krate":0,"index":10563},"children":[],"decl_id":null,"docs":" Surface is lost\n","sig":null,"attributes":[{"value":"/ Surface is lost","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222920,"byte_end":222939,"line_start":78,"line_end":78,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10573},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223004,"byte_end":223015,"line_start":81,"line_end":81,"column_start":5,"column_end":16},"name":"WindowInUse","qualname":"::window::CreationError::WindowInUse","value":"CreationError::WindowInUse(device::WindowInUse)","parent":{"krate":0,"index":10563},"children":[],"decl_id":null,"docs":" Window in use\n","sig":null,"attributes":[{"value":"/ Window in use","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222982,"byte_end":222999,"line_start":80,"line_end":80,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":10563},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222758,"byte_end":222771,"line_start":73,"line_end":73,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::window::CreationError","value":"CreationError::{OutOfMemory, DeviceLost, SurfaceLost, WindowInUse}","parent":null,"children":[{"krate":0,"index":10564},{"krate":0,"index":10567},{"krate":0,"index":10570},{"krate":0,"index":10573}],"decl_id":null,"docs":" Error occurred during swapchain creation.\n","sig":null,"attributes":[{"value":"/ Error occurred during swapchain creation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":222668,"byte_end":222713,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":10584},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225050,"byte_end":225058,"line_start":143,"line_end":143,"column_start":12,"column_end":20},"name":"Extent2D","qualname":"::window::Extent2D","value":"Extent2D { width, height }","parent":null,"children":[{"krate":0,"index":10585},{"krate":0,"index":10586}],"decl_id":null,"docs":" An extent describes the size of a rectangle, such as\n a window or texture. It is not used for referring to a\n sub-rectangle; for that see `command::Rect`.\n","sig":null,"attributes":[{"value":"/ An extent describes the size of a rectangle, such as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":224758,"byte_end":224814,"line_start":138,"line_end":138,"column_start":1,"column_end":57}},{"value":"/ a window or texture. It is not used for referring to a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":224815,"byte_end":224873,"line_start":139,"line_end":139,"column_start":1,"column_end":59}},{"value":"/ sub-rectangle; for that see `command::Rect`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":224874,"byte_end":224922,"line_start":140,"line_end":140,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":10585},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225083,"byte_end":225088,"line_start":145,"line_end":145,"column_start":9,"column_end":14},"name":"width","qualname":"::window::Extent2D::width","value":"u32","parent":{"krate":0,"index":10584},"children":[],"decl_id":null,"docs":" Width\n","sig":null,"attributes":[{"value":"/ Width","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225065,"byte_end":225074,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":10586},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225126,"byte_end":225132,"line_start":147,"line_end":147,"column_start":9,"column_end":15},"name":"height","qualname":"::window::Extent2D::height","value":"u32","parent":{"krate":0,"index":10584},"children":[],"decl_id":null,"docs":" Height\n","sig":null,"attributes":[{"value":"/ Height","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225107,"byte_end":225117,"line_start":146,"line_end":146,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225401,"byte_end":225410,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"to_extent","qualname":"<Extent2D>::to_extent","value":"fn (&self) -> image::Extent","parent":null,"children":[],"decl_id":null,"docs":" Convert into a regular image extent.\n","sig":null,"attributes":[{"value":"/ Convert into a regular image extent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225349,"byte_end":225389,"line_start":160,"line_end":160,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":10606},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225776,"byte_end":225795,"line_start":174,"line_end":174,"column_start":12,"column_end":31},"name":"SurfaceCapabilities","qualname":"::window::SurfaceCapabilities","value":"SurfaceCapabilities { image_count, current_extent, extents, max_image_layers, usage, present_modes, composite_alpha_modes }","parent":null,"children":[{"krate":0,"index":10607},{"krate":0,"index":10608},{"krate":0,"index":10609},{"krate":0,"index":10610},{"krate":0,"index":10611},{"krate":0,"index":10612},{"krate":0,"index":10613}],"decl_id":null,"docs":" Describes information about what a `Surface`'s properties are.\n Fetch this with [Surface::capabilities].\n","sig":null,"attributes":[{"value":"/ Describes information about what a `Surface`'s properties are.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225566,"byte_end":225632,"line_start":170,"line_end":170,"column_start":1,"column_end":67}},{"value":"/ Fetch this with [Surface::capabilities].","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225633,"byte_end":225677,"line_start":171,"line_end":171,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":10607},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226053,"byte_end":226064,"line_start":180,"line_end":180,"column_start":9,"column_end":20},"name":"image_count","qualname":"::window::SurfaceCapabilities::image_count","value":"std::ops::RangeInclusive<u32>","parent":{"krate":0,"index":10606},"children":[],"decl_id":null,"docs":" Number of presentable images supported by the adapter for a swapchain\n created from this surface.","sig":null,"attributes":[{"value":"/ Number of presentable images supported by the adapter for a swapchain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225802,"byte_end":225875,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ created from this surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225880,"byte_end":225910,"line_start":176,"line_end":176,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225915,"byte_end":225918,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ - `image_count.start` must be at least 1.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225923,"byte_end":225968,"line_start":178,"line_end":178,"column_start":5,"column_end":50}},{"value":"/ - `image_count.end` must be larger or equal to `image_count.start`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225973,"byte_end":226044,"line_start":179,"line_end":179,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":10608},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226241,"byte_end":226255,"line_start":185,"line_end":185,"column_start":9,"column_end":23},"name":"current_extent","qualname":"::window::SurfaceCapabilities::current_extent","value":"std::option::Option<window::Extent2D>","parent":{"krate":0,"index":10606},"children":[],"decl_id":null,"docs":" Current extent of the surface.","sig":null,"attributes":[{"value":"/ Current extent of the surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226103,"byte_end":226137,"line_start":182,"line_end":182,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226142,"byte_end":226145,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ `None` if the surface has no explicit size, depending on the swapchain extent.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226150,"byte_end":226232,"line_start":184,"line_end":184,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":10609},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226380,"byte_end":226387,"line_start":190,"line_end":190,"column_start":9,"column_end":16},"name":"extents","qualname":"::window::SurfaceCapabilities::extents","value":"std::ops::RangeInclusive<window::Extent2D>","parent":{"krate":0,"index":10606},"children":[],"decl_id":null,"docs":" Range of supported extents.","sig":null,"attributes":[{"value":"/ Range of supported extents.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226280,"byte_end":226311,"line_start":187,"line_end":187,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226316,"byte_end":226319,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ `current_extent` must be inside this range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226324,"byte_end":226371,"line_start":189,"line_end":189,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":10610},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226527,"byte_end":226543,"line_start":195,"line_end":195,"column_start":9,"column_end":25},"name":"max_image_layers","qualname":"::window::SurfaceCapabilities::max_image_layers","value":"u16","parent":{"krate":0,"index":10606},"children":[],"decl_id":null,"docs":" Maximum number of layers supported for presentable images.","sig":null,"attributes":[{"value":"/ Maximum number of layers supported for presentable images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226420,"byte_end":226482,"line_start":192,"line_end":192,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226487,"byte_end":226490,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Must be at least 1.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226495,"byte_end":226518,"line_start":194,"line_end":194,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":10611},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226605,"byte_end":226610,"line_start":198,"line_end":198,"column_start":9,"column_end":14},"name":"usage","qualname":"::window::SurfaceCapabilities::usage","value":"image::Usage","parent":{"krate":0,"index":10606},"children":[],"decl_id":null,"docs":" Supported image usage flags.\n","sig":null,"attributes":[{"value":"/ Supported image usage flags.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226564,"byte_end":226596,"line_start":197,"line_end":197,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":10612},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226686,"byte_end":226699,"line_start":201,"line_end":201,"column_start":9,"column_end":22},"name":"present_modes","qualname":"::window::SurfaceCapabilities::present_modes","value":"window::PresentMode","parent":{"krate":0,"index":10606},"children":[],"decl_id":null,"docs":" A bitmask of supported presentation modes.\n","sig":null,"attributes":[{"value":"/ A bitmask of supported presentation modes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226631,"byte_end":226677,"line_start":200,"line_end":200,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":10613},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226779,"byte_end":226800,"line_start":204,"line_end":204,"column_start":9,"column_end":30},"name":"composite_alpha_modes","qualname":"::window::SurfaceCapabilities::composite_alpha_modes","value":"window::CompositeAlphaMode","parent":{"krate":0,"index":10606},"children":[],"decl_id":null,"docs":" A bitmask of supported alpha composition modes.\n","sig":null,"attributes":[{"value":"/ A bitmask of supported alpha composition modes.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226719,"byte_end":226770,"line_start":203,"line_end":203,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":816},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227637,"byte_end":227644,"line_start":227,"line_end":227,"column_start":11,"column_end":18},"name":"Surface","qualname":"::window::Surface","value":"Surface<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820}],"decl_id":null,"docs":" A `Surface` abstracts the surface of a native window.\n","sig":null,"attributes":[{"value":"/ A `Surface` abstracts the surface of a native window.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227569,"byte_end":227626,"line_start":226,"line_end":226,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227844,"byte_end":227865,"line_start":235,"line_end":235,"column_start":8,"column_end":29},"name":"supports_queue_family","qualname":"::window::Surface::supports_queue_family","value":"fn (&self, family: &B::QueueFamily) -> bool","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":" Check if the queue family supports presentation to this surface.","sig":null,"attributes":[{"value":"/ Check if the queue family supports presentation to this surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227695,"byte_end":227763,"line_start":228,"line_end":228,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227768,"byte_end":227771,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227776,"byte_end":227790,"line_start":230,"line_end":230,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227795,"byte_end":227798,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227803,"byte_end":227816,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227821,"byte_end":227824,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227829,"byte_end":227836,"line_start":234,"line_end":234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228046,"byte_end":228058,"line_start":240,"line_end":240,"column_start":8,"column_end":20},"name":"capabilities","qualname":"::window::Surface::capabilities","value":"fn (&self, physical_device: &B::PhysicalDevice) -> SurfaceCapabilities","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":" Query surface capabilities for this physical device.","sig":null,"attributes":[{"value":"/ Query surface capabilities for this physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227912,"byte_end":227968,"line_start":237,"line_end":237,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227973,"byte_end":227976,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Use this function for configuring swapchain creation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227981,"byte_end":228038,"line_start":239,"line_end":239,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228631,"byte_end":228648,"line_start":252,"line_end":252,"column_start":8,"column_end":25},"name":"supported_formats","qualname":"::window::Surface::supported_formats","value":"fn (&self, physical_device: &B::PhysicalDevice) -> Option<Vec<Format>>","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":" Query surface formats for this physical device.","sig":null,"attributes":[{"value":"/ Query surface formats for this physical device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228132,"byte_end":228183,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228188,"byte_end":228191,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This function may be slow. It's typically used during the initialization only.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228196,"byte_end":228278,"line_start":244,"line_end":244,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228283,"byte_end":228286,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Note: technically the surface support formats may change at the point","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228291,"byte_end":228364,"line_start":246,"line_end":246,"column_start":5,"column_end":78}},{"value":"/ where an application needs to recreate the swapchain, e.g. when the window","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228369,"byte_end":228447,"line_start":247,"line_end":247,"column_start":5,"column_end":83}},{"value":"/ is moved to a different monitor.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228452,"byte_end":228488,"line_start":248,"line_end":248,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228493,"byte_end":228496,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ If `None` is returned then the surface has no preferred format and the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228501,"byte_end":228575,"line_start":250,"line_end":250,"column_start":5,"column_end":79}},{"value":"/ application may use any desired format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228580,"byte_end":228623,"line_start":251,"line_end":251,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228828,"byte_end":228847,"line_start":257,"line_end":257,"column_start":11,"column_end":30},"name":"PresentationSurface","qualname":"::window::PresentationSurface","value":"PresentationSurface<B: Backend>: Surface<B>","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826}],"decl_id":null,"docs":" A surface trait that exposes the ability to present images on the\n associtated swap chain.\n","sig":null,"attributes":[{"value":"/ A surface trait that exposes the ability to present images on the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228720,"byte_end":228789,"line_start":255,"line_end":255,"column_start":1,"column_end":70}},{"value":"/ associtated swap chain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228790,"byte_end":228817,"line_start":256,"line_end":256,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":823},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228936,"byte_end":228950,"line_start":259,"line_end":259,"column_start":10,"column_end":24},"name":"SwapchainImage","qualname":"::window::PresentationSurface::SwapchainImage","value":"type SwapchainImage: Borrow<B::ImageView> + fmt::Debug + Send + Sync;","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":" An opaque type wrapping the swapchain image.\n","sig":null,"attributes":[{"value":"/ An opaque type wrapping the swapchain image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228878,"byte_end":228926,"line_start":258,"line_end":258,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229099,"byte_end":229118,"line_start":262,"line_end":262,"column_start":15,"column_end":34},"name":"configure_swapchain","qualname":"::window::PresentationSurface::configure_swapchain","value":"fn (&mut self, device: &B::Device, config: SwapchainConfig) -> Result<(), CreationError>","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":" Set up the swapchain associated with the surface to have the given format.\n","sig":null,"attributes":[{"value":"/ Set up the swapchain associated with the surface to have the given format.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229006,"byte_end":229084,"line_start":261,"line_end":261,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229377,"byte_end":229398,"line_start":271,"line_end":271,"column_start":15,"column_end":36},"name":"unconfigure_swapchain","qualname":"::window::PresentationSurface::unconfigure_swapchain","value":"fn (&mut self, device: &B::Device) -> ()","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":" Remove the associated swapchain from this surface.","sig":null,"attributes":[{"value":"/ Remove the associated swapchain from this surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229241,"byte_end":229295,"line_start":268,"line_end":268,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229300,"byte_end":229303,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ This has to be done before the surface is dropped.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229308,"byte_end":229362,"line_start":270,"line_end":270,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229788,"byte_end":229801,"line_start":286,"line_end":286,"column_start":15,"column_end":28},"name":"acquire_image","qualname":"::window::PresentationSurface::acquire_image","value":"fn (&mut self, timeout_ns: u64) -> Result<(Self::SwapchainImage, Option<Suboptimal>), AcquireError>","parent":{"krate":0,"index":821},"children":[],"decl_id":null,"docs":" Acquire a new swapchain image for rendering.","sig":null,"attributes":[{"value":"/ Acquire a new swapchain image for rendering.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229436,"byte_end":229484,"line_start":273,"line_end":273,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229489,"byte_end":229492,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ May fail according to one of the reasons indicated in `AcquireError` enum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229497,"byte_end":229575,"line_start":275,"line_end":275,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229580,"byte_end":229583,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Synchronization","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229588,"byte_end":229609,"line_start":277,"line_end":277,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229614,"byte_end":229617,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ The acquired image is available to render. No synchronization is required.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229622,"byte_end":229700,"line_start":279,"line_end":279,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229705,"byte_end":229708,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229713,"byte_end":229727,"line_start":281,"line_end":281,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229732,"byte_end":229735,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229740,"byte_end":229753,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229758,"byte_end":229761,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229766,"byte_end":229773,"line_start":285,"line_end":285,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":827},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230205,"byte_end":230219,"line_start":298,"line_end":298,"column_start":10,"column_end":24},"name":"SwapImageIndex","qualname":"::window::SwapImageIndex","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Index of an image in the swapchain.","sig":null,"attributes":[{"value":"/ Index of an image in the swapchain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229925,"byte_end":229964,"line_start":292,"line_end":292,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229965,"byte_end":229968,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ The swapchain is a series of one or more images, usually","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":229969,"byte_end":230029,"line_start":294,"line_end":294,"column_start":1,"column_end":61}},{"value":"/ with one being drawn on while the other is displayed by","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230030,"byte_end":230089,"line_start":295,"line_end":295,"column_start":1,"column_end":60}},{"value":"/ the GPU (aka double-buffering). A `SwapImageIndex` refers","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230090,"byte_end":230151,"line_start":296,"line_end":296,"column_start":1,"column_end":62}},{"value":"/ to a particular image in the swapchain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230152,"byte_end":230195,"line_start":297,"line_end":297,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":10618},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230392,"byte_end":230403,"line_start":303,"line_end":303,"column_start":16,"column_end":27},"name":"PresentMode","qualname":"::window::PresentMode","value":"PresentMode {  }","parent":null,"children":[{"krate":0,"index":10619}],"decl_id":null,"docs":" Specifies the mode regulating how a swapchain presents frames.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10658},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230465,"byte_end":230474,"line_start":305,"line_end":305,"column_start":15,"column_end":24},"name":"IMMEDIATE","qualname":"::window::PresentMode::IMMEDIATE","value":"PresentMode","parent":{"krate":0,"index":10657},"children":[],"decl_id":null,"docs":" Don't ever wait for v-sync.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10659},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230560,"byte_end":230567,"line_start":307,"line_end":307,"column_start":15,"column_end":22},"name":"MAILBOX","qualname":"::window::PresentMode::MAILBOX","value":"PresentMode","parent":{"krate":0,"index":10657},"children":[],"decl_id":null,"docs":" Wait for v-sync, overwrite the last rendered frame.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10660},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230653,"byte_end":230657,"line_start":309,"line_end":309,"column_start":15,"column_end":19},"name":"FIFO","qualname":"::window::PresentMode::FIFO","value":"PresentMode","parent":{"krate":0,"index":10657},"children":[],"decl_id":null,"docs":" Present frames in the same order they are rendered.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10661},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230744,"byte_end":230751,"line_start":311,"line_end":311,"column_start":15,"column_end":22},"name":"RELAXED","qualname":"::window::PresentMode::RELAXED","value":"PresentMode","parent":{"krate":0,"index":10657},"children":[],"decl_id":null,"docs":" Don't wait for the next v-sync if we just missed it.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":10719},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":230962,"byte_end":230980,"line_start":319,"line_end":319,"column_start":16,"column_end":34},"name":"CompositeAlphaMode","qualname":"::window::CompositeAlphaMode","value":"CompositeAlphaMode {  }","parent":null,"children":[{"krate":0,"index":10720}],"decl_id":null,"docs":" Specifies how the alpha channel of the images should be handled during\n compositing.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10759},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":231192,"byte_end":231198,"line_start":323,"line_end":323,"column_start":15,"column_end":21},"name":"OPAQUE","qualname":"::window::CompositeAlphaMode::OPAQUE","value":"CompositeAlphaMode","parent":{"krate":0,"index":10758},"children":[],"decl_id":null,"docs":" The alpha channel, if it exists, of the images is ignored in the\n compositing process. Instead, the image is treated as if it has a\n constant alpha of 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10760},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":231471,"byte_end":231484,"line_start":328,"line_end":328,"column_start":15,"column_end":28},"name":"PREMULTIPLIED","qualname":"::window::CompositeAlphaMode::PREMULTIPLIED","value":"CompositeAlphaMode","parent":{"krate":0,"index":10758},"children":[],"decl_id":null,"docs":" The alpha channel, if it exists, of the images is respected in the\n compositing process. The non-alpha channels of the image are\n expected to already be multiplied by the alpha channel by the\n application.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10761},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":231888,"byte_end":231902,"line_start":334,"line_end":334,"column_start":15,"column_end":29},"name":"POSTMULTIPLIED","qualname":"::window::CompositeAlphaMode::POSTMULTIPLIED","value":"CompositeAlphaMode","parent":{"krate":0,"index":10758},"children":[],"decl_id":null,"docs":" The alpha channel, if it exists, of the images is respected in the\n compositing process. The non-alpha channels of the image are not\n expected to already be multiplied by the alpha channel by the\n application; instead, the compositor will multiply the non-alpha\n channels of the image by the alpha channel during compositing.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10762},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232356,"byte_end":232363,"line_start":341,"line_end":341,"column_start":15,"column_end":22},"name":"INHERIT","qualname":"::window::CompositeAlphaMode::INHERIT","value":"CompositeAlphaMode","parent":{"krate":0,"index":10758},"children":[],"decl_id":null,"docs":" The way in which the presentation engine treats the alpha channel in\n the images is unknown to gfx-hal. Instead, the application is\n responsible for setting the composite alpha blending mode using\n native window system commands. If the application does not set the\n blending mode using native window system commands, then a\n platform-specific default will be used.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":10820},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232861,"byte_end":232876,"line_start":362,"line_end":362,"column_start":12,"column_end":27},"name":"SwapchainConfig","qualname":"::window::SwapchainConfig","value":"SwapchainConfig { present_mode, composite_alpha_mode, format, extent, image_count, image_layers, image_usage }","parent":null,"children":[{"krate":0,"index":10821},{"krate":0,"index":10822},{"krate":0,"index":10823},{"krate":0,"index":10824},{"krate":0,"index":10825},{"krate":0,"index":10826},{"krate":0,"index":10827}],"decl_id":null,"docs":" Contains all the data necessary to create a new `Swapchain`:\n color, depth, and number of images.","sig":null,"attributes":[{"value":"/ Contains all the data necessary to create a new `Swapchain`:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232381,"byte_end":232445,"line_start":345,"line_end":345,"column_start":1,"column_end":65}},{"value":"/ color, depth, and number of images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232446,"byte_end":232485,"line_start":346,"line_end":346,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232486,"byte_end":232489,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232490,"byte_end":232504,"line_start":348,"line_end":348,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232505,"byte_end":232508,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ This type implements the builder pattern, method calls can be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232509,"byte_end":232574,"line_start":350,"line_end":350,"column_start":1,"column_end":66}},{"value":"/ easily chained.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232575,"byte_end":232594,"line_start":351,"line_end":351,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232595,"byte_end":232598,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232599,"byte_end":232612,"line_start":353,"line_end":353,"column_start":1,"column_end":14}},{"value":"/ # extern crate gfx_hal;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232613,"byte_end":232640,"line_start":354,"line_end":354,"column_start":1,"column_end":28}},{"value":"/ # fn main() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232641,"byte_end":232658,"line_start":355,"line_end":355,"column_start":1,"column_end":18}},{"value":"/ # use gfx_hal::window::SwapchainConfig;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232659,"byte_end":232702,"line_start":356,"line_end":356,"column_start":1,"column_end":44}},{"value":"/ # use gfx_hal::format::Format;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232703,"byte_end":232737,"line_start":357,"line_end":357,"column_start":1,"column_end":35}},{"value":"/ let config = SwapchainConfig::new(100, 100, Format::Bgra8Unorm, 2);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232738,"byte_end":232809,"line_start":358,"line_end":358,"column_start":1,"column_end":72}},{"value":"/ # }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232810,"byte_end":232817,"line_start":359,"line_end":359,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232818,"byte_end":232825,"line_start":360,"line_end":360,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":10821},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232914,"byte_end":232926,"line_start":364,"line_end":364,"column_start":9,"column_end":21},"name":"present_mode","qualname":"::window::SwapchainConfig::present_mode","value":"window::PresentMode","parent":{"krate":0,"index":10820},"children":[],"decl_id":null,"docs":" Presentation mode.\n","sig":null,"attributes":[{"value":"/ Presentation mode.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232883,"byte_end":232905,"line_start":363,"line_end":363,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":10822},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232981,"byte_end":233001,"line_start":366,"line_end":366,"column_start":9,"column_end":29},"name":"composite_alpha_mode","qualname":"::window::SwapchainConfig::composite_alpha_mode","value":"window::CompositeAlphaMode","parent":{"krate":0,"index":10820},"children":[],"decl_id":null,"docs":" Alpha composition mode.\n","sig":null,"attributes":[{"value":"/ Alpha composition mode.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":232945,"byte_end":232972,"line_start":365,"line_end":365,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":10823},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233072,"byte_end":233078,"line_start":368,"line_end":368,"column_start":9,"column_end":15},"name":"format","qualname":"::window::SwapchainConfig::format","value":"format::Format","parent":{"krate":0,"index":10820},"children":[],"decl_id":null,"docs":" Format of the backbuffer images.\n","sig":null,"attributes":[{"value":"/ Format of the backbuffer images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233027,"byte_end":233063,"line_start":367,"line_end":367,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":10824},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233185,"byte_end":233191,"line_start":371,"line_end":371,"column_start":9,"column_end":15},"name":"extent","qualname":"::window::SwapchainConfig::extent","value":"window::Extent2D","parent":{"krate":0,"index":10820},"children":[],"decl_id":null,"docs":" Requested image extent. Must be in\n `SurfaceCapabilities::extents` range.\n","sig":null,"attributes":[{"value":"/ Requested image extent. Must be in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233092,"byte_end":233130,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/ `SurfaceCapabilities::extents` range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233135,"byte_end":233176,"line_start":370,"line_end":370,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":10825},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233315,"byte_end":233326,"line_start":374,"line_end":374,"column_start":9,"column_end":20},"name":"image_count","qualname":"::window::SwapchainConfig::image_count","value":"u32","parent":{"krate":0,"index":10820},"children":[],"decl_id":null,"docs":" Number of images in the swapchain. Must be in\n `SurfaceCapabilities::image_count` range.\n","sig":null,"attributes":[{"value":"/ Number of images in the swapchain. Must be in","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233207,"byte_end":233256,"line_start":372,"line_end":372,"column_start":5,"column_end":54}},{"value":"/ `SurfaceCapabilities::image_count` range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233261,"byte_end":233306,"line_start":373,"line_end":373,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":10826},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233459,"byte_end":233471,"line_start":377,"line_end":377,"column_start":9,"column_end":21},"name":"image_layers","qualname":"::window::SwapchainConfig::image_layers","value":"u16","parent":{"krate":0,"index":10820},"children":[],"decl_id":null,"docs":" Number of image layers. Must be lower or equal to\n `SurfaceCapabilities::max_image_layers`.\n","sig":null,"attributes":[{"value":"/ Number of image layers. Must be lower or equal to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233348,"byte_end":233401,"line_start":375,"line_end":375,"column_start":5,"column_end":58}},{"value":"/ `SurfaceCapabilities::max_image_layers`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233406,"byte_end":233450,"line_start":376,"line_end":376,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":10827},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233541,"byte_end":233552,"line_start":379,"line_end":379,"column_start":9,"column_end":20},"name":"image_usage","qualname":"::window::SwapchainConfig::image_usage","value":"image::Usage","parent":{"krate":0,"index":10820},"children":[],"decl_id":null,"docs":" Image usage of the backbuffer images.\n","sig":null,"attributes":[{"value":"/ Image usage of the backbuffer images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233491,"byte_end":233532,"line_start":378,"line_end":378,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233742,"byte_end":233745,"line_start":390,"line_end":390,"column_start":12,"column_end":15},"name":"new","qualname":"<SwapchainConfig>::new","value":"fn (width: u32, height: u32, format: Format, image_count: SwapImageIndex) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new default configuration (color images only).","sig":null,"attributes":[{"value":"/ Create a new default configuration (color images only).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233598,"byte_end":233657,"line_start":383,"line_end":383,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233662,"byte_end":233665,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233670,"byte_end":233684,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233689,"byte_end":233692,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233697,"byte_end":233710,"line_start":387,"line_end":387,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233715,"byte_end":233718,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233723,"byte_end":233730,"line_start":389,"line_end":389,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":234456,"byte_end":234465,"line_start":407,"line_end":407,"column_start":12,"column_end":21},"name":"from_caps","qualname":"<SwapchainConfig>::from_caps","value":"fn (caps: &SurfaceCapabilities, format: Format, default_extent: Extent2D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a swapchain configuration based on the capabilities\n returned from a physical device query. If the surface does not\n specify a current size, default_extent is clamped and used instead.","sig":null,"attributes":[{"value":"/ Create a swapchain configuration based on the capabilities","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":234142,"byte_end":234204,"line_start":402,"line_end":402,"column_start":5,"column_end":67}},{"value":"/ returned from a physical device query. If the surface does not","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":234209,"byte_end":234275,"line_start":403,"line_end":403,"column_start":5,"column_end":71}},{"value":"/ specify a current size, default_extent is clamped and used instead.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":234280,"byte_end":234351,"line_start":404,"line_end":404,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":234356,"byte_end":234359,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ The default values are taken from `DEFAULT_USAGE` and `DEFAULT_IMAGE_COUNT`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":234364,"byte_end":234444,"line_start":406,"line_end":406,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":235730,"byte_end":235747,"line_start":443,"line_end":443,"column_start":12,"column_end":29},"name":"with_present_mode","qualname":"<SwapchainConfig>::with_present_mode","value":"fn (mut self, mode: PresentMode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the presentation mode.\n","sig":null,"attributes":[{"value":"/ Specify the presentation mode.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":235684,"byte_end":235718,"line_start":442,"line_end":442,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":235891,"byte_end":235916,"line_start":449,"line_end":449,"column_start":12,"column_end":37},"name":"with_composite_alpha_mode","qualname":"<SwapchainConfig>::with_composite_alpha_mode","value":"fn (mut self, mode: CompositeAlphaMode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the presentation mode.\n","sig":null,"attributes":[{"value":"/ Specify the presentation mode.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":235845,"byte_end":235879,"line_start":448,"line_end":448,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236084,"byte_end":236100,"line_start":455,"line_end":455,"column_start":12,"column_end":28},"name":"with_image_usage","qualname":"<SwapchainConfig>::with_image_usage","value":"fn (mut self, usage: image::Usage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the usage of backbuffer images.\n","sig":null,"attributes":[{"value":"/ Specify the usage of backbuffer images.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236029,"byte_end":236072,"line_start":454,"line_end":454,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236254,"byte_end":236270,"line_start":461,"line_end":461,"column_start":12,"column_end":28},"name":"with_image_count","qualname":"<SwapchainConfig>::with_image_count","value":"fn (mut self, count: SwapImageIndex) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the count of backbuffer image.\n","sig":null,"attributes":[{"value":"/ Specify the count of backbuffer image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236200,"byte_end":236242,"line_start":460,"line_end":460,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":10832},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236633,"byte_end":236643,"line_start":472,"line_end":472,"column_start":12,"column_end":22},"name":"Suboptimal","qualname":"::window::Suboptimal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker value returned if the swapchain no longer matches the surface properties exactly,\n but can still be used to present to the surface successfully.\n","sig":null,"attributes":[{"value":"/ Marker value returned if the swapchain no longer matches the surface properties exactly,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236446,"byte_end":236538,"line_start":469,"line_end":469,"column_start":1,"column_end":93}},{"value":"/ but can still be used to present to the surface successfully.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236539,"byte_end":236604,"line_start":470,"line_end":470,"column_start":1,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10837},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236810,"byte_end":236821,"line_start":478,"line_end":478,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::window::AcquireError::OutOfMemory","value":"AcquireError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":10836},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236765,"byte_end":236805,"line_start":477,"line_end":477,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10840},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236905,"byte_end":236913,"line_start":480,"line_end":480,"column_start":5,"column_end":13},"name":"NotReady","qualname":"::window::AcquireError::NotReady","value":"AcquireError::NotReady","parent":{"krate":0,"index":10836},"children":[],"decl_id":null,"docs":" No image was ready and no timeout was specified.\n","sig":null,"attributes":[{"value":"/ No image was ready and no timeout was specified.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236848,"byte_end":236900,"line_start":479,"line_end":479,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10842},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236983,"byte_end":236990,"line_start":482,"line_end":482,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::window::AcquireError::Timeout","value":"AcquireError::Timeout","parent":{"krate":0,"index":10836},"children":[],"decl_id":null,"docs":" No image was ready after the specified timeout expired.\n","sig":null,"attributes":[{"value":"/ No image was ready after the specified timeout expired.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236919,"byte_end":236978,"line_start":481,"line_end":481,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10844},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":237081,"byte_end":237090,"line_start":484,"line_end":484,"column_start":5,"column_end":14},"name":"OutOfDate","qualname":"::window::AcquireError::OutOfDate","value":"AcquireError::OutOfDate","parent":{"krate":0,"index":10836},"children":[],"decl_id":null,"docs":" The swapchain is no longer in sync with the surface, needs to be re-created.\n","sig":null,"attributes":[{"value":"/ The swapchain is no longer in sync with the surface, needs to be re-created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236996,"byte_end":237076,"line_start":483,"line_end":483,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10846},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":237165,"byte_end":237176,"line_start":486,"line_end":486,"column_start":5,"column_end":16},"name":"SurfaceLost","qualname":"::window::AcquireError::SurfaceLost","value":"AcquireError::SurfaceLost(device::SurfaceLost)","parent":{"krate":0,"index":10836},"children":[],"decl_id":null,"docs":" The surface was lost, and the swapchain is no longer usable.\n","sig":null,"attributes":[{"value":"/ The surface was lost, and the swapchain is no longer usable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":237096,"byte_end":237160,"line_start":485,"line_end":485,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10849},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":237226,"byte_end":237236,"line_start":488,"line_end":488,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::window::AcquireError::DeviceLost","value":"AcquireError::DeviceLost(device::DeviceLost)","parent":{"krate":0,"index":10836},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"/ Device is lost","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":237203,"byte_end":237221,"line_start":487,"line_end":487,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":10836},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236746,"byte_end":236758,"line_start":476,"line_end":476,"column_start":10,"column_end":22},"name":"AcquireError","qualname":"::window::AcquireError","value":"AcquireError::{OutOfMemory, NotReady, Timeout, OutOfDate, SurfaceLost, DeviceLost}","parent":null,"children":[{"krate":0,"index":10837},{"krate":0,"index":10840},{"krate":0,"index":10842},{"krate":0,"index":10844},{"krate":0,"index":10846},{"krate":0,"index":10849}],"decl_id":null,"docs":" Error on acquiring the next image from a swapchain.\n","sig":null,"attributes":[{"value":"/ Error on acquiring the next image from a swapchain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":236646,"byte_end":236701,"line_start":474,"line_end":474,"column_start":1,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10861},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238683,"byte_end":238694,"line_start":527,"line_end":527,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::window::PresentError::OutOfMemory","value":"PresentError::OutOfMemory(device::OutOfMemory)","parent":{"krate":0,"index":10860},"children":[],"decl_id":null,"docs":" Out of either host or device memory.\n","sig":null,"attributes":[{"value":"/ Out of either host or device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238638,"byte_end":238678,"line_start":526,"line_end":526,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10864},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238806,"byte_end":238815,"line_start":529,"line_end":529,"column_start":5,"column_end":14},"name":"OutOfDate","qualname":"::window::PresentError::OutOfDate","value":"PresentError::OutOfDate","parent":{"krate":0,"index":10860},"children":[],"decl_id":null,"docs":" The swapchain is no longer in sync with the surface, needs to be re-created.\n","sig":null,"attributes":[{"value":"/ The swapchain is no longer in sync with the surface, needs to be re-created.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238721,"byte_end":238801,"line_start":528,"line_end":528,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10866},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238890,"byte_end":238901,"line_start":531,"line_end":531,"column_start":5,"column_end":16},"name":"SurfaceLost","qualname":"::window::PresentError::SurfaceLost","value":"PresentError::SurfaceLost(device::SurfaceLost)","parent":{"krate":0,"index":10860},"children":[],"decl_id":null,"docs":" The surface was lost, and the swapchain is no longer usable.\n","sig":null,"attributes":[{"value":"/ The surface was lost, and the swapchain is no longer usable.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238821,"byte_end":238885,"line_start":530,"line_end":530,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10869},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238951,"byte_end":238961,"line_start":533,"line_end":533,"column_start":5,"column_end":15},"name":"DeviceLost","qualname":"::window::PresentError::DeviceLost","value":"PresentError::DeviceLost(device::DeviceLost)","parent":{"krate":0,"index":10860},"children":[],"decl_id":null,"docs":" Device is lost\n","sig":null,"attributes":[{"value":"/ Device is lost","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238928,"byte_end":238946,"line_start":532,"line_end":532,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":10860},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238619,"byte_end":238631,"line_start":525,"line_end":525,"column_start":10,"column_end":22},"name":"PresentError","qualname":"::window::PresentError","value":"PresentError::{OutOfMemory, OutOfDate, SurfaceLost, DeviceLost}","parent":null,"children":[{"krate":0,"index":10861},{"krate":0,"index":10864},{"krate":0,"index":10866},{"krate":0,"index":10869}],"decl_id":null,"docs":" Error on acquiring the next image from a swapchain.\n","sig":null,"attributes":[{"value":"/ Error on acquiring the next image from a swapchain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238519,"byte_end":238574,"line_start":523,"line_end":523,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":843},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240102,"byte_end":240111,"line_start":563,"line_end":563,"column_start":11,"column_end":20},"name":"Swapchain","qualname":"::window::Swapchain","value":"Swapchain<B: Backend>: fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":850}],"decl_id":null,"docs":" The `Swapchain` is the backend representation of the surface.\n It consists of multiple buffers, which will be presented on the surface.\n","sig":null,"attributes":[{"value":"/ The `Swapchain` is the backend representation of the surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":239949,"byte_end":240014,"line_start":561,"line_end":561,"column_start":1,"column_end":66}},{"value":"/ It consists of multiple buffers, which will be presented on the surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240015,"byte_end":240091,"line_start":562,"line_end":562,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240748,"byte_end":240761,"line_start":579,"line_end":579,"column_start":15,"column_end":28},"name":"acquire_image","qualname":"::window::Swapchain::acquire_image","value":"fn (&mut self, timeout_ns: u64, semaphore: Option<&B::Semaphore>, fence: Option<&B::Fence>) -> Result<(SwapImageIndex, Option<Suboptimal>), AcquireError>","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" Acquire a new swapchain image for rendering. This needs to be called before presenting.","sig":null,"attributes":[{"value":"/ Acquire a new swapchain image for rendering. This needs to be called before presenting.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240162,"byte_end":240253,"line_start":564,"line_end":564,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240258,"byte_end":240261,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ May fail according to one of the reasons indicated in `AcquireError` enum.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240266,"byte_end":240344,"line_start":566,"line_end":566,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240349,"byte_end":240352,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ # Synchronization","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240357,"byte_end":240378,"line_start":568,"line_end":568,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240383,"byte_end":240386,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ The acquired image will not be immediately available when the function returns.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240391,"byte_end":240474,"line_start":570,"line_end":570,"column_start":5,"column_end":88}},{"value":"/ Once available the provided [`Semaphore`](../trait.Resources.html#associatedtype.Semaphore)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240479,"byte_end":240574,"line_start":571,"line_end":571,"column_start":5,"column_end":100}},{"value":"/ and [`Fence`](../trait.Resources.html#associatedtype.Fence) will be signaled.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240579,"byte_end":240660,"line_start":572,"line_end":572,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240665,"byte_end":240668,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240673,"byte_end":240687,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240692,"byte_end":240695,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240700,"byte_end":240713,"line_start":576,"line_end":576,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240718,"byte_end":240721,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240726,"byte_end":240733,"line_start":578,"line_end":578,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241229,"byte_end":241236,"line_start":598,"line_end":598,"column_start":15,"column_end":22},"name":"present","qualname":"::window::Swapchain::present","value":"fn <'a, S, Iw> (&'a self, present_queue: &mut B::CommandQueue, image_index: SwapImageIndex, wait_semaphores: Iw) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" Present one acquired image.","sig":null,"attributes":[{"value":"/ Present one acquired image.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240957,"byte_end":240988,"line_start":586,"line_end":586,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240993,"byte_end":240996,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241001,"byte_end":241013,"line_start":588,"line_end":588,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241018,"byte_end":241021,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ The passed queue _must_ support presentation on the surface, which is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241026,"byte_end":241099,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/ used for creating this swapchain.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241104,"byte_end":241141,"line_start":591,"line_end":591,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241146,"byte_end":241149,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241154,"byte_end":241168,"line_start":593,"line_end":593,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241173,"byte_end":241176,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241181,"byte_end":241194,"line_start":595,"line_end":595,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241199,"byte_end":241202,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241207,"byte_end":241214,"line_start":597,"line_end":597,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241746,"byte_end":241772,"line_start":613,"line_end":613,"column_start":15,"column_end":41},"name":"present_without_semaphores","qualname":"::window::Swapchain::present_without_semaphores","value":"fn <'a> (&'a self, present_queue: &mut B::CommandQueue, image_index: SwapImageIndex) -> Result<Option<Suboptimal>, PresentError>","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":" Present one acquired image without any semaphore synchronization.\n","sig":null,"attributes":[{"value":"/ Present one acquired image without any semaphore synchronization.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":241662,"byte_end":241731,"line_start":612,"line_end":612,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":10881},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242254,"byte_end":242277,"line_start":629,"line_end":629,"column_start":5,"column_end":28},"name":"UnsupportedWindowHandle","qualname":"::window::InitError::UnsupportedWindowHandle","value":"InitError::UnsupportedWindowHandle","parent":{"krate":0,"index":10880},"children":[],"decl_id":null,"docs":" Window handle is not supported by the backend.\n","sig":null,"attributes":[{"value":"/ Window handle is not supported by the backend.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242199,"byte_end":242249,"line_start":628,"line_end":628,"column_start":5,"column_end":55}}]},{"kind":"Enum","id":{"krate":0,"index":10880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242183,"byte_end":242192,"line_start":627,"line_end":627,"column_start":10,"column_end":19},"name":"InitError","qualname":"::window::InitError","value":"InitError::{UnsupportedWindowHandle}","parent":null,"children":[{"krate":0,"index":10881}],"decl_id":null,"docs":" Error occurred during surface creation.\n","sig":null,"attributes":[{"value":"/ Error occurred during surface creation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242085,"byte_end":242128,"line_start":625,"line_end":625,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":855},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":647,"byte_end":654,"line_start":32,"line_end":32,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":856}],"decl_id":null,"docs":" Prelude module re-exports all the traits necessary to use gfx-hal.\n","sig":null,"attributes":[{"value":"/ Prelude module re-exports all the traits necessary to use gfx-hal.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":568,"byte_end":638,"line_start":31,"line_end":31,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":870},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1041,"byte_end":1052,"line_start":46,"line_end":46,"column_start":10,"column_end":21},"name":"VertexCount","qualname":"::VertexCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw vertex count.\n","sig":null,"attributes":[{"value":"/ Draw vertex count.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1009,"byte_end":1031,"line_start":45,"line_end":45,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":871},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1098,"byte_end":1110,"line_start":48,"line_end":48,"column_start":10,"column_end":22},"name":"VertexOffset","qualname":"::VertexOffset","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Draw vertex base offset.\n","sig":null,"attributes":[{"value":"/ Draw vertex base offset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1060,"byte_end":1088,"line_start":47,"line_end":47,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":872},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1155,"byte_end":1165,"line_start":50,"line_end":50,"column_start":10,"column_end":20},"name":"IndexCount","qualname":"::IndexCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw number of indices.\n","sig":null,"attributes":[{"value":"/ Draw number of indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1118,"byte_end":1145,"line_start":49,"line_end":49,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":873},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1212,"byte_end":1225,"line_start":52,"line_end":52,"column_start":10,"column_end":23},"name":"InstanceCount","qualname":"::InstanceCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Draw number of instances.\n","sig":null,"attributes":[{"value":"/ Draw number of instances.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1173,"byte_end":1202,"line_start":51,"line_end":51,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":874},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1273,"byte_end":1282,"line_start":54,"line_end":54,"column_start":10,"column_end":19},"name":"DrawCount","qualname":"::DrawCount","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Indirect draw calls count.\n","sig":null,"attributes":[{"value":"/ Indirect draw calls count.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1233,"byte_end":1263,"line_start":53,"line_end":53,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":875},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1326,"byte_end":1340,"line_start":56,"line_end":56,"column_start":10,"column_end":24},"name":"WorkGroupCount","qualname":"::WorkGroupCount","value":"[u32; 3]","parent":null,"children":[],"decl_id":null,"docs":" Number of work groups.\n","sig":null,"attributes":[{"value":"/ Number of work groups.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1290,"byte_end":1316,"line_start":55,"line_end":55,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":10894},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1685,"byte_end":1693,"line_start":64,"line_end":64,"column_start":16,"column_end":24},"name":"Features","qualname":"::Features","value":"Features {  }","parent":null,"children":[{"krate":0,"index":10895}],"decl_id":null,"docs":" Features that the device supports.\n These only include features of the core interface and not API extensions.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":10999},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1772,"byte_end":1781,"line_start":66,"line_end":66,"column_start":15,"column_end":24},"name":"CORE_MASK","qualname":"::Features::CORE_MASK","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Bit mask of Vulkan Core/Extension features.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11000},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1874,"byte_end":1890,"line_start":68,"line_end":68,"column_start":15,"column_end":31},"name":"PORTABILITY_MASK","qualname":"::Features::PORTABILITY_MASK","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Bit mask of Vulkan Portability features.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11001},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":1989,"byte_end":2000,"line_start":70,"line_end":70,"column_start":15,"column_end":26},"name":"WEBGPU_MASK","qualname":"::Features::WEBGPU_MASK","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Bit mask for extra WebGPU features.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11002},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":2189,"byte_end":2209,"line_start":74,"line_end":74,"column_start":15,"column_end":35},"name":"ROBUST_BUFFER_ACCESS","qualname":"::Features::ROBUST_BUFFER_ACCESS","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support for robust buffer access.\n Buffer access by SPIR-V shaders is checked against the buffer/image boundaries.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11003},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":2421,"byte_end":2440,"line_start":77,"line_end":77,"column_start":15,"column_end":34},"name":"FULL_DRAW_INDEX_U32","qualname":"::Features::FULL_DRAW_INDEX_U32","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support the full 32-bit range of indexed for draw calls.\n If not supported, the maximum index value is determined by `Limits::max_draw_index_value`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11004},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":2524,"byte_end":2540,"line_start":79,"line_end":79,"column_start":15,"column_end":31},"name":"IMAGE_CUBE_ARRAY","qualname":"::Features::IMAGE_CUBE_ARRAY","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support cube array image views.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11005},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":2681,"byte_end":2701,"line_start":81,"line_end":81,"column_start":15,"column_end":35},"name":"INDEPENDENT_BLENDING","qualname":"::Features::INDEPENDENT_BLENDING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support different color blending settings per attachments on graphics pipeline creation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11006},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":2778,"byte_end":2793,"line_start":83,"line_end":83,"column_start":15,"column_end":30},"name":"GEOMETRY_SHADER","qualname":"::Features::GEOMETRY_SHADER","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support geometry shader.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11007},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":2875,"byte_end":2894,"line_start":85,"line_end":85,"column_start":15,"column_end":34},"name":"TESSELLATION_SHADER","qualname":"::Features::TESSELLATION_SHADER","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support tessellation shaders.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11008},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3004,"byte_end":3023,"line_start":87,"line_end":87,"column_start":15,"column_end":34},"name":"SAMPLE_RATE_SHADING","qualname":"::Features::SAMPLE_RATE_SHADING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support per-sample shading and multisample interpolation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11009},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3105,"byte_end":3122,"line_start":89,"line_end":89,"column_start":15,"column_end":32},"name":"DUAL_SRC_BLENDING","qualname":"::Features::DUAL_SRC_BLENDING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support dual source blending.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11010},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3200,"byte_end":3208,"line_start":91,"line_end":91,"column_start":15,"column_end":23},"name":"LOGIC_OP","qualname":"::Features::LOGIC_OP","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support logic operations.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11011},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3302,"byte_end":3321,"line_start":93,"line_end":93,"column_start":15,"column_end":34},"name":"MULTI_DRAW_INDIRECT","qualname":"::Features::MULTI_DRAW_INDIRECT","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support multiple draws per indirect call.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11012},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3494,"byte_end":3522,"line_start":96,"line_end":96,"column_start":15,"column_end":43},"name":"DRAW_INDIRECT_FIRST_INSTANCE","qualname":"::Features::DRAW_INDIRECT_FIRST_INSTANCE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support indirect drawing with first instance value.\n If not supported the first instance value **must** be 0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11013},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3598,"byte_end":3609,"line_start":98,"line_end":98,"column_start":15,"column_end":26},"name":"DEPTH_CLAMP","qualname":"::Features::DEPTH_CLAMP","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support depth clamping.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11014},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3690,"byte_end":3706,"line_start":100,"line_end":100,"column_start":15,"column_end":31},"name":"DEPTH_BIAS_CLAMP","qualname":"::Features::DEPTH_BIAS_CLAMP","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support depth bias clamping.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11015},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3790,"byte_end":3811,"line_start":102,"line_end":102,"column_start":15,"column_end":36},"name":"NON_FILL_POLYGON_MODE","qualname":"::Features::NON_FILL_POLYGON_MODE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support non-fill polygon modes.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11016},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3890,"byte_end":3902,"line_start":104,"line_end":104,"column_start":15,"column_end":27},"name":"DEPTH_BOUNDS","qualname":"::Features::DEPTH_BOUNDS","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support depth bounds test.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11017},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":3995,"byte_end":4005,"line_start":106,"line_end":106,"column_start":15,"column_end":25},"name":"LINE_WIDTH","qualname":"::Features::LINE_WIDTH","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support lines with width other than 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11018},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4100,"byte_end":4110,"line_start":108,"line_end":108,"column_start":15,"column_end":25},"name":"POINT_SIZE","qualname":"::Features::POINT_SIZE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support points with size greater than 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11019},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4203,"byte_end":4215,"line_start":110,"line_end":110,"column_start":15,"column_end":27},"name":"ALPHA_TO_ONE","qualname":"::Features::ALPHA_TO_ONE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support replacing alpha values with 1.0.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11020},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4308,"byte_end":4323,"line_start":112,"line_end":112,"column_start":15,"column_end":30},"name":"MULTI_VIEWPORTS","qualname":"::Features::MULTI_VIEWPORTS","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support multiple viewports and scissors.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11021},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4406,"byte_end":4424,"line_start":114,"line_end":114,"column_start":15,"column_end":33},"name":"SAMPLER_ANISOTROPY","qualname":"::Features::SAMPLER_ANISOTROPY","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support anisotropic filtering.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11022},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4518,"byte_end":4529,"line_start":116,"line_end":116,"column_start":15,"column_end":26},"name":"FORMAT_ETC2","qualname":"::Features::FORMAT_ETC2","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support ETC2 texture compression formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11023},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4629,"byte_end":4644,"line_start":118,"line_end":118,"column_start":15,"column_end":30},"name":"FORMAT_ASTC_LDR","qualname":"::Features::FORMAT_ASTC_LDR","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support ASTC (LDR) texture compression formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11024},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4736,"byte_end":4745,"line_start":120,"line_end":120,"column_start":15,"column_end":24},"name":"FORMAT_BC","qualname":"::Features::FORMAT_BC","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support BC texture compression formats.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11025},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":4971,"byte_end":4994,"line_start":123,"line_end":123,"column_start":15,"column_end":38},"name":"PRECISE_OCCLUSION_QUERY","qualname":"::Features::PRECISE_OCCLUSION_QUERY","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support precise occlusion queries, returning the actual number of samples.\n If not supported, queries return a non-zero value when at least **one** sample passes.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11026},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":5084,"byte_end":5109,"line_start":125,"line_end":125,"column_start":15,"column_end":40},"name":"PIPELINE_STATISTICS_QUERY","qualname":"::Features::PIPELINE_STATISTICS_QUERY","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support query of pipeline statistics.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11027},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":5362,"byte_end":5387,"line_start":129,"line_end":129,"column_start":15,"column_end":40},"name":"VERTEX_STORES_AND_ATOMICS","qualname":"::Features::VERTEX_STORES_AND_ATOMICS","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support unordered access stores and atomic ops in the vertex, geometry\n and tessellation shader stage.\n If not supported, the shader resources **must** be annotated as read-only.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11028},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":5602,"byte_end":5629,"line_start":132,"line_end":132,"column_start":15,"column_end":42},"name":"FRAGMENT_STORES_AND_ATOMICS","qualname":"::Features::FRAGMENT_STORES_AND_ATOMICS","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support unordered access stores and atomic ops in the fragment shader stage\n If not supported, the shader resources **must** be annotated as read-only.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11029},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":5681,"byte_end":5724,"line_start":134,"line_end":134,"column_start":15,"column_end":58},"name":"SHADER_TESSELLATION_AND_GEOMETRY_POINT_SIZE","qualname":"::Features::SHADER_TESSELLATION_AND_GEOMETRY_POINT_SIZE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11030},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":5776,"byte_end":5804,"line_start":136,"line_end":136,"column_start":15,"column_end":43},"name":"SHADER_IMAGE_GATHER_EXTENDED","qualname":"::Features::SHADER_IMAGE_GATHER_EXTENDED","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11031},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":5856,"byte_end":5893,"line_start":138,"line_end":138,"column_start":15,"column_end":52},"name":"SHADER_STORAGE_IMAGE_EXTENDED_FORMATS","qualname":"::Features::SHADER_STORAGE_IMAGE_EXTENDED_FORMATS","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11032},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":5945,"byte_end":5977,"line_start":140,"line_end":140,"column_start":15,"column_end":47},"name":"SHADER_STORAGE_IMAGE_MULTISAMPLE","qualname":"::Features::SHADER_STORAGE_IMAGE_MULTISAMPLE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11033},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6029,"byte_end":6069,"line_start":142,"line_end":142,"column_start":15,"column_end":55},"name":"SHADER_STORAGE_IMAGE_READ_WITHOUT_FORMAT","qualname":"::Features::SHADER_STORAGE_IMAGE_READ_WITHOUT_FORMAT","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11034},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6121,"byte_end":6162,"line_start":144,"line_end":144,"column_start":15,"column_end":56},"name":"SHADER_STORAGE_IMAGE_WRITE_WITHOUT_FORMAT","qualname":"::Features::SHADER_STORAGE_IMAGE_WRITE_WITHOUT_FORMAT","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11035},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6214,"byte_end":6258,"line_start":146,"line_end":146,"column_start":15,"column_end":59},"name":"SHADER_UNIFORM_BUFFER_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_UNIFORM_BUFFER_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11036},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6310,"byte_end":6353,"line_start":148,"line_end":148,"column_start":15,"column_end":58},"name":"SHADER_SAMPLED_IMAGE_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_SAMPLED_IMAGE_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11037},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6405,"byte_end":6449,"line_start":150,"line_end":150,"column_start":15,"column_end":59},"name":"SHADER_STORAGE_BUFFER_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_STORAGE_BUFFER_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11038},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6501,"byte_end":6544,"line_start":152,"line_end":152,"column_start":15,"column_end":58},"name":"SHADER_STORAGE_IMAGE_ARRAY_DYNAMIC_INDEXING","qualname":"::Features::SHADER_STORAGE_IMAGE_ARRAY_DYNAMIC_INDEXING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11039},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6596,"byte_end":6616,"line_start":154,"line_end":154,"column_start":15,"column_end":35},"name":"SHADER_CLIP_DISTANCE","qualname":"::Features::SHADER_CLIP_DISTANCE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11040},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6668,"byte_end":6688,"line_start":156,"line_end":156,"column_start":15,"column_end":35},"name":"SHADER_CULL_DISTANCE","qualname":"::Features::SHADER_CULL_DISTANCE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11041},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6740,"byte_end":6754,"line_start":158,"line_end":158,"column_start":15,"column_end":29},"name":"SHADER_FLOAT64","qualname":"::Features::SHADER_FLOAT64","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11042},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6806,"byte_end":6818,"line_start":160,"line_end":160,"column_start":15,"column_end":27},"name":"SHADER_INT64","qualname":"::Features::SHADER_INT64","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11043},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6870,"byte_end":6882,"line_start":162,"line_end":162,"column_start":15,"column_end":27},"name":"SHADER_INT16","qualname":"::Features::SHADER_INT16","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11044},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":6934,"byte_end":6959,"line_start":164,"line_end":164,"column_start":15,"column_end":40},"name":"SHADER_RESOURCE_RESIDENCY","qualname":"::Features::SHADER_RESOURCE_RESIDENCY","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11045},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7011,"byte_end":7034,"line_start":166,"line_end":166,"column_start":15,"column_end":38},"name":"SHADER_RESOURCE_MIN_LOD","qualname":"::Features::SHADER_RESOURCE_MIN_LOD","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11046},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7086,"byte_end":7100,"line_start":168,"line_end":168,"column_start":15,"column_end":29},"name":"SPARSE_BINDING","qualname":"::Features::SPARSE_BINDING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11047},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7152,"byte_end":7175,"line_start":170,"line_end":170,"column_start":15,"column_end":38},"name":"SPARSE_RESIDENCY_BUFFER","qualname":"::Features::SPARSE_RESIDENCY_BUFFER","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11048},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7227,"byte_end":7252,"line_start":172,"line_end":172,"column_start":15,"column_end":40},"name":"SPARSE_RESIDENCY_IMAGE_2D","qualname":"::Features::SPARSE_RESIDENCY_IMAGE_2D","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11049},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7304,"byte_end":7329,"line_start":174,"line_end":174,"column_start":15,"column_end":40},"name":"SPARSE_RESIDENCY_IMAGE_3D","qualname":"::Features::SPARSE_RESIDENCY_IMAGE_3D","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11050},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7381,"byte_end":7407,"line_start":176,"line_end":176,"column_start":15,"column_end":41},"name":"SPARSE_RESIDENCY_2_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_2_SAMPLES","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11051},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7459,"byte_end":7485,"line_start":178,"line_end":178,"column_start":15,"column_end":41},"name":"SPARSE_RESIDENCY_4_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_4_SAMPLES","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11052},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7537,"byte_end":7563,"line_start":180,"line_end":180,"column_start":15,"column_end":41},"name":"SPARSE_RESIDENCY_8_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_8_SAMPLES","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11053},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7615,"byte_end":7642,"line_start":182,"line_end":182,"column_start":15,"column_end":42},"name":"SPARSE_RESIDENCY_16_SAMPLES","qualname":"::Features::SPARSE_RESIDENCY_16_SAMPLES","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11054},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7694,"byte_end":7718,"line_start":184,"line_end":184,"column_start":15,"column_end":39},"name":"SPARSE_RESIDENCY_ALIASED","qualname":"::Features::SPARSE_RESIDENCY_ALIASED","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11055},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7770,"byte_end":7795,"line_start":186,"line_end":186,"column_start":15,"column_end":40},"name":"VARIABLE_MULTISAMPLE_RATE","qualname":"::Features::VARIABLE_MULTISAMPLE_RATE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11056},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7847,"byte_end":7864,"line_start":188,"line_end":188,"column_start":15,"column_end":32},"name":"INHERITED_QUERIES","qualname":"::Features::INHERITED_QUERIES","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11057},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":7958,"byte_end":7982,"line_start":190,"line_end":190,"column_start":15,"column_end":39},"name":"TEXTURE_DESCRIPTOR_ARRAY","qualname":"::Features::TEXTURE_DESCRIPTOR_ARRAY","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support for arrays of texture descriptors\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11058},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":8046,"byte_end":8071,"line_start":192,"line_end":192,"column_start":15,"column_end":40},"name":"SAMPLER_MIRROR_CLAMP_EDGE","qualname":"::Features::SAMPLER_MIRROR_CLAMP_EDGE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support for\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11059},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":8206,"byte_end":8241,"line_start":194,"line_end":194,"column_start":15,"column_end":50},"name":"SAMPLED_TEXTURE_DESCRIPTOR_INDEXING","qualname":"::Features::SAMPLED_TEXTURE_DESCRIPTOR_INDEXING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Allow indexing sampled texture descriptor arrays with dynamically non-uniform data\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11060},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":8376,"byte_end":8411,"line_start":196,"line_end":196,"column_start":15,"column_end":50},"name":"STORAGE_TEXTURE_DESCRIPTOR_INDEXING","qualname":"::Features::STORAGE_TEXTURE_DESCRIPTOR_INDEXING","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Allow indexing storage texture descriptor arrays with dynamically non-uniform data\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11061},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":8512,"byte_end":8536,"line_start":198,"line_end":198,"column_start":15,"column_end":39},"name":"UNSIZED_DESCRIPTOR_ARRAY","qualname":"::Features::UNSIZED_DESCRIPTOR_ARRAY","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Allow descriptor arrays to be unsized in shaders\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11062},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":8647,"byte_end":8666,"line_start":200,"line_end":200,"column_start":15,"column_end":34},"name":"DRAW_INDIRECT_COUNT","qualname":"::Features::DRAW_INDIRECT_COUNT","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Enable draw_indirect_count and draw_indexed_indirect_count\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11063},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":8760,"byte_end":8772,"line_start":203,"line_end":203,"column_start":15,"column_end":27},"name":"TRIANGLE_FAN","qualname":"::Features::TRIANGLE_FAN","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support triangle fan primitive topology.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11064},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":8883,"byte_end":8910,"line_start":205,"line_end":205,"column_start":15,"column_end":42},"name":"SEPARATE_STENCIL_REF_VALUES","qualname":"::Features::SEPARATE_STENCIL_REF_VALUES","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support separate stencil reference values for front and back sides.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11065},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9015,"byte_end":9028,"line_start":207,"line_end":207,"column_start":15,"column_end":28},"name":"INSTANCE_RATE","qualname":"::Features::INSTANCE_RATE","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support manually specified vertex attribute rates (divisors).\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11066},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9113,"byte_end":9133,"line_start":209,"line_end":209,"column_start":15,"column_end":35},"name":"SAMPLER_MIP_LOD_BIAS","qualname":"::Features::SAMPLER_MIP_LOD_BIAS","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Support non-zero mipmap bias on samplers.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11067},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9247,"byte_end":9255,"line_start":212,"line_end":212,"column_start":15,"column_end":23},"name":"NDC_Y_UP","qualname":"::Features::NDC_Y_UP","value":"Features","parent":{"krate":0,"index":10998},"children":[],"decl_id":null,"docs":" Make the NDC coordinate system pointing Y up, to match D3D and Metal.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11320},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9451,"byte_end":9456,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"name":"Hints","qualname":"::Hints","value":"Hints {  }","parent":null,"children":[{"krate":0,"index":11321}],"decl_id":null,"docs":" Features that the device supports natively, but is able to emulate.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":11357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9556,"byte_end":9584,"line_start":221,"line_end":221,"column_start":15,"column_end":43},"name":"BASE_VERTEX_INSTANCE_DRAWING","qualname":"::Hints::BASE_VERTEX_INSTANCE_DRAWING","value":"Hints","parent":{"krate":0,"index":11356},"children":[],"decl_id":null,"docs":" Support indexed, instanced drawing with base vertex and instance.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":11406},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9781,"byte_end":9787,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"Limits","qualname":"::Limits","value":"Limits { max_image_1d_size, max_image_2d_size, max_image_3d_size, max_image_cube_size, max_image_array_layers, max_texel_elements, max_uniform_buffer_range, max_storage_buffer_range, max_push_constants_size, max_memory_allocation_count, max_sampler_allocation_count, max_bound_descriptor_sets, max_framebuffer_layers, max_per_stage_descriptor_samplers, max_per_stage_descriptor_uniform_buffers, max_per_stage_descriptor_storage_buffers, max_per_stage_descriptor_sampled_images, max_per_stage_descriptor_storage_images, max_per_stage_descriptor_input_attachments, max_per_stage_resources, max_descriptor_set_samplers, max_descriptor_set_uniform_buffers, max_descriptor_set_uniform_buffers_dynamic, max_descriptor_set_storage_buffers, max_descriptor_set_storage_buffers_dynamic, max_descriptor_set_sampled_images, max_descriptor_set_storage_images, max_descriptor_set_input_attachments, max_vertex_input_attributes, max_vertex_input_bindings, max_vertex_input_attribute_offset, max_vertex_input_binding_stride, max_vertex_output_components, max_patch_size, max_geometry_shader_invocations, max_geometry_input_components, max_geometry_output_components, max_geometry_output_vertices, max_geometry_total_output_components, max_fragment_input_components, max_fragment_output_attachments, max_fragment_dual_source_attachments, max_fragment_combined_output_resources, max_compute_shared_memory_size, max_compute_work_group_count, max_compute_work_group_invocations, max_compute_work_group_size, max_draw_indexed_index_value, max_draw_indirect_count, max_sampler_lod_bias, max_sampler_anisotropy, max_viewports, max_viewport_dimensions, max_framebuffer_extent, min_memory_map_alignment, buffer_image_granularity, min_texel_buffer_offset_alignment, min_uniform_buffer_offset_alignment, min_storage_buffer_offset_alignment, framebuffer_color_sample_counts, framebuffer_depth_sample_counts, framebuffer_stencil_sample_counts, max_color_attachments, standard_sample_locations, optimal_buffer_copy_offset_alignment, optimal_buffer_copy_pitch_alignment, non_coherent_atom_size, min_vertex_input_binding_stride_alignment }","parent":null,"children":[{"krate":0,"index":11407},{"krate":0,"index":11408},{"krate":0,"index":11409},{"krate":0,"index":11410},{"krate":0,"index":11411},{"krate":0,"index":11412},{"krate":0,"index":11413},{"krate":0,"index":11414},{"krate":0,"index":11415},{"krate":0,"index":11416},{"krate":0,"index":11417},{"krate":0,"index":11418},{"krate":0,"index":11419},{"krate":0,"index":11420},{"krate":0,"index":11421},{"krate":0,"index":11422},{"krate":0,"index":11423},{"krate":0,"index":11424},{"krate":0,"index":11425},{"krate":0,"index":11426},{"krate":0,"index":11427},{"krate":0,"index":11428},{"krate":0,"index":11429},{"krate":0,"index":11430},{"krate":0,"index":11431},{"krate":0,"index":11432},{"krate":0,"index":11433},{"krate":0,"index":11434},{"krate":0,"index":11435},{"krate":0,"index":11436},{"krate":0,"index":11437},{"krate":0,"index":11438},{"krate":0,"index":11439},{"krate":0,"index":11440},{"krate":0,"index":11441},{"krate":0,"index":11442},{"krate":0,"index":11443},{"krate":0,"index":11444},{"krate":0,"index":11445},{"krate":0,"index":11446},{"krate":0,"index":11447},{"krate":0,"index":11448},{"krate":0,"index":11449},{"krate":0,"index":11450},{"krate":0,"index":11451},{"krate":0,"index":11452},{"krate":0,"index":11453},{"krate":0,"index":11455},{"krate":0,"index":11456},{"krate":0,"index":11457},{"krate":0,"index":11458},{"krate":0,"index":11459},{"krate":0,"index":11460},{"krate":0,"index":11462},{"krate":0,"index":11463},{"krate":0,"index":11464},{"krate":0,"index":11465},{"krate":0,"index":11466},{"krate":0,"index":11467},{"krate":0,"index":11468},{"krate":0,"index":11469},{"krate":0,"index":11470},{"krate":0,"index":11471},{"krate":0,"index":11472},{"krate":0,"index":11473},{"krate":0,"index":11474},{"krate":0,"index":11475},{"krate":0,"index":11476}],"decl_id":null,"docs":" Resource limits of a particular graphics device.\n","sig":null,"attributes":[{"value":"/ Resource limits of a particular graphics device.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9604,"byte_end":9656,"line_start":225,"line_end":225,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":11407},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9839,"byte_end":9856,"line_start":230,"line_end":230,"column_start":9,"column_end":26},"name":"max_image_1d_size","qualname":"::Limits::max_image_1d_size","value":"u32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum supported image 1D size.\n","sig":null,"attributes":[{"value":"/ Maximum supported image 1D size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9794,"byte_end":9830,"line_start":229,"line_end":229,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":11408},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9920,"byte_end":9937,"line_start":232,"line_end":232,"column_start":9,"column_end":26},"name":"max_image_2d_size","qualname":"::Limits::max_image_2d_size","value":"u32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum supported image 2D size.\n","sig":null,"attributes":[{"value":"/ Maximum supported image 2D size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9875,"byte_end":9911,"line_start":231,"line_end":231,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":11409},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10001,"byte_end":10018,"line_start":234,"line_end":234,"column_start":9,"column_end":26},"name":"max_image_3d_size","qualname":"::Limits::max_image_3d_size","value":"u32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum supported image 3D size.\n","sig":null,"attributes":[{"value":"/ Maximum supported image 3D size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":9956,"byte_end":9992,"line_start":233,"line_end":233,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":11410},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10084,"byte_end":10103,"line_start":236,"line_end":236,"column_start":9,"column_end":28},"name":"max_image_cube_size","qualname":"::Limits::max_image_cube_size","value":"u32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum supported image cube size.\n","sig":null,"attributes":[{"value":"/ Maximum supported image cube size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10037,"byte_end":10075,"line_start":235,"line_end":235,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":11411},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10170,"byte_end":10192,"line_start":238,"line_end":238,"column_start":9,"column_end":31},"name":"max_image_array_layers","qualname":"::Limits::max_image_array_layers","value":"u16","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum supporter image array size.\n","sig":null,"attributes":[{"value":"/ Maximum supporter image array size.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10122,"byte_end":10161,"line_start":237,"line_end":237,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":11412},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10278,"byte_end":10296,"line_start":240,"line_end":240,"column_start":9,"column_end":27},"name":"max_texel_elements","qualname":"::Limits::max_texel_elements","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum number of elements for the BufferView to see.\n","sig":null,"attributes":[{"value":"/ Maximum number of elements for the BufferView to see.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10212,"byte_end":10269,"line_start":239,"line_end":239,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":11413},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10321,"byte_end":10345,"line_start":242,"line_end":242,"column_start":9,"column_end":33},"name":"max_uniform_buffer_range","qualname":"::Limits::max_uniform_buffer_range","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10309,"byte_end":10312,"line_start":241,"line_end":241,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11414},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10379,"byte_end":10403,"line_start":244,"line_end":244,"column_start":9,"column_end":33},"name":"max_storage_buffer_range","qualname":"::Limits::max_storage_buffer_range","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10367,"byte_end":10370,"line_start":243,"line_end":243,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11415},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10437,"byte_end":10460,"line_start":246,"line_end":246,"column_start":9,"column_end":32},"name":"max_push_constants_size","qualname":"::Limits::max_push_constants_size","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10425,"byte_end":10428,"line_start":245,"line_end":245,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11416},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10485,"byte_end":10512,"line_start":248,"line_end":248,"column_start":9,"column_end":36},"name":"max_memory_allocation_count","qualname":"::Limits::max_memory_allocation_count","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10473,"byte_end":10476,"line_start":247,"line_end":247,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11417},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10537,"byte_end":10565,"line_start":250,"line_end":250,"column_start":9,"column_end":37},"name":"max_sampler_allocation_count","qualname":"::Limits::max_sampler_allocation_count","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10525,"byte_end":10528,"line_start":249,"line_end":249,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11418},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10590,"byte_end":10615,"line_start":252,"line_end":252,"column_start":9,"column_end":34},"name":"max_bound_descriptor_sets","qualname":"::Limits::max_bound_descriptor_sets","value":"u16","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10578,"byte_end":10581,"line_start":251,"line_end":251,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11419},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10658,"byte_end":10680,"line_start":254,"line_end":254,"column_start":9,"column_end":31},"name":"max_framebuffer_layers","qualname":"::Limits::max_framebuffer_layers","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10646,"byte_end":10649,"line_start":253,"line_end":253,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11420},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10705,"byte_end":10738,"line_start":256,"line_end":256,"column_start":9,"column_end":42},"name":"max_per_stage_descriptor_samplers","qualname":"::Limits::max_per_stage_descriptor_samplers","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10693,"byte_end":10696,"line_start":255,"line_end":255,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11421},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10763,"byte_end":10803,"line_start":258,"line_end":258,"column_start":9,"column_end":49},"name":"max_per_stage_descriptor_uniform_buffers","qualname":"::Limits::max_per_stage_descriptor_uniform_buffers","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10751,"byte_end":10754,"line_start":257,"line_end":257,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11422},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10828,"byte_end":10868,"line_start":260,"line_end":260,"column_start":9,"column_end":49},"name":"max_per_stage_descriptor_storage_buffers","qualname":"::Limits::max_per_stage_descriptor_storage_buffers","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10816,"byte_end":10819,"line_start":259,"line_end":259,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11423},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10893,"byte_end":10932,"line_start":262,"line_end":262,"column_start":9,"column_end":48},"name":"max_per_stage_descriptor_sampled_images","qualname":"::Limits::max_per_stage_descriptor_sampled_images","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10881,"byte_end":10884,"line_start":261,"line_end":261,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11424},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10957,"byte_end":10996,"line_start":264,"line_end":264,"column_start":9,"column_end":48},"name":"max_per_stage_descriptor_storage_images","qualname":"::Limits::max_per_stage_descriptor_storage_images","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":10945,"byte_end":10948,"line_start":263,"line_end":263,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11425},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11021,"byte_end":11063,"line_start":266,"line_end":266,"column_start":9,"column_end":51},"name":"max_per_stage_descriptor_input_attachments","qualname":"::Limits::max_per_stage_descriptor_input_attachments","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11009,"byte_end":11012,"line_start":265,"line_end":265,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11426},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11088,"byte_end":11111,"line_start":268,"line_end":268,"column_start":9,"column_end":32},"name":"max_per_stage_resources","qualname":"::Limits::max_per_stage_resources","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11076,"byte_end":11079,"line_start":267,"line_end":267,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11427},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11137,"byte_end":11164,"line_start":271,"line_end":271,"column_start":9,"column_end":36},"name":"max_descriptor_set_samplers","qualname":"::Limits::max_descriptor_set_samplers","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11125,"byte_end":11128,"line_start":270,"line_end":270,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11428},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11189,"byte_end":11223,"line_start":273,"line_end":273,"column_start":9,"column_end":43},"name":"max_descriptor_set_uniform_buffers","qualname":"::Limits::max_descriptor_set_uniform_buffers","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11177,"byte_end":11180,"line_start":272,"line_end":272,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11429},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11248,"byte_end":11290,"line_start":275,"line_end":275,"column_start":9,"column_end":51},"name":"max_descriptor_set_uniform_buffers_dynamic","qualname":"::Limits::max_descriptor_set_uniform_buffers_dynamic","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11236,"byte_end":11239,"line_start":274,"line_end":274,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11430},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11315,"byte_end":11349,"line_start":277,"line_end":277,"column_start":9,"column_end":43},"name":"max_descriptor_set_storage_buffers","qualname":"::Limits::max_descriptor_set_storage_buffers","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11303,"byte_end":11306,"line_start":276,"line_end":276,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11431},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11374,"byte_end":11416,"line_start":279,"line_end":279,"column_start":9,"column_end":51},"name":"max_descriptor_set_storage_buffers_dynamic","qualname":"::Limits::max_descriptor_set_storage_buffers_dynamic","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11362,"byte_end":11365,"line_start":278,"line_end":278,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11432},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11441,"byte_end":11474,"line_start":281,"line_end":281,"column_start":9,"column_end":42},"name":"max_descriptor_set_sampled_images","qualname":"::Limits::max_descriptor_set_sampled_images","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11429,"byte_end":11432,"line_start":280,"line_end":280,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11433},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11499,"byte_end":11532,"line_start":283,"line_end":283,"column_start":9,"column_end":42},"name":"max_descriptor_set_storage_images","qualname":"::Limits::max_descriptor_set_storage_images","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11487,"byte_end":11490,"line_start":282,"line_end":282,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11434},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11557,"byte_end":11593,"line_start":285,"line_end":285,"column_start":9,"column_end":45},"name":"max_descriptor_set_input_attachments","qualname":"::Limits::max_descriptor_set_input_attachments","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11545,"byte_end":11548,"line_start":284,"line_end":284,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11435},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11708,"byte_end":11735,"line_start":288,"line_end":288,"column_start":9,"column_end":36},"name":"max_vertex_input_attributes","qualname":"::Limits::max_vertex_input_attributes","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum number of vertex input attributes that can be specified for a graphics pipeline.\n","sig":null,"attributes":[{"value":"/ Maximum number of vertex input attributes that can be specified for a graphics pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11607,"byte_end":11699,"line_start":287,"line_end":287,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":11436},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11871,"byte_end":11896,"line_start":290,"line_end":290,"column_start":9,"column_end":34},"name":"max_vertex_input_bindings","qualname":"::Limits::max_vertex_input_bindings","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum number of vertex buffers that can be specified for providing vertex attributes to a graphics pipeline.\n","sig":null,"attributes":[{"value":"/ Maximum number of vertex buffers that can be specified for providing vertex attributes to a graphics pipeline.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11748,"byte_end":11862,"line_start":289,"line_end":289,"column_start":5,"column_end":119}}]},{"kind":"Field","id":{"krate":0,"index":11437},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12013,"byte_end":12046,"line_start":292,"line_end":292,"column_start":9,"column_end":42},"name":"max_vertex_input_attribute_offset","qualname":"::Limits::max_vertex_input_attribute_offset","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum vertex input attribute offset that can be added to the vertex input binding stride.\n","sig":null,"attributes":[{"value":"/ Maximum vertex input attribute offset that can be added to the vertex input binding stride.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":11909,"byte_end":12004,"line_start":291,"line_end":291,"column_start":5,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":11438},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12156,"byte_end":12187,"line_start":294,"line_end":294,"column_start":9,"column_end":40},"name":"max_vertex_input_binding_stride","qualname":"::Limits::max_vertex_input_binding_stride","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum vertex input binding stride that can be specified in a vertex input binding.\n","sig":null,"attributes":[{"value":"/ Maximum vertex input binding stride that can be specified in a vertex input binding.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12059,"byte_end":12147,"line_start":293,"line_end":293,"column_start":5,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":11439},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12301,"byte_end":12329,"line_start":296,"line_end":296,"column_start":9,"column_end":37},"name":"max_vertex_output_components","qualname":"::Limits::max_vertex_output_components","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum number of components of output variables which can be output by a vertex shader.\n","sig":null,"attributes":[{"value":"/ Maximum number of components of output variables which can be output by a vertex shader.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12200,"byte_end":12292,"line_start":295,"line_end":295,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":11440},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12398,"byte_end":12412,"line_start":299,"line_end":299,"column_start":9,"column_end":23},"name":"max_patch_size","qualname":"::Limits::max_patch_size","value":"u8","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum number of vertices for each patch.\n","sig":null,"attributes":[{"value":"/ Maximum number of vertices for each patch.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12343,"byte_end":12389,"line_start":298,"line_end":298,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":11441},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12446,"byte_end":12477,"line_start":301,"line_end":301,"column_start":9,"column_end":40},"name":"max_geometry_shader_invocations","qualname":"::Limits::max_geometry_shader_invocations","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12434,"byte_end":12437,"line_start":300,"line_end":300,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11442},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12502,"byte_end":12531,"line_start":303,"line_end":303,"column_start":9,"column_end":38},"name":"max_geometry_input_components","qualname":"::Limits::max_geometry_input_components","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12490,"byte_end":12493,"line_start":302,"line_end":302,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11443},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12556,"byte_end":12586,"line_start":305,"line_end":305,"column_start":9,"column_end":39},"name":"max_geometry_output_components","qualname":"::Limits::max_geometry_output_components","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12544,"byte_end":12547,"line_start":304,"line_end":304,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11444},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12611,"byte_end":12639,"line_start":307,"line_end":307,"column_start":9,"column_end":37},"name":"max_geometry_output_vertices","qualname":"::Limits::max_geometry_output_vertices","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12599,"byte_end":12602,"line_start":306,"line_end":306,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11445},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12664,"byte_end":12700,"line_start":309,"line_end":309,"column_start":9,"column_end":45},"name":"max_geometry_total_output_components","qualname":"::Limits::max_geometry_total_output_components","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12652,"byte_end":12655,"line_start":308,"line_end":308,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11446},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12725,"byte_end":12754,"line_start":311,"line_end":311,"column_start":9,"column_end":38},"name":"max_fragment_input_components","qualname":"::Limits::max_fragment_input_components","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12713,"byte_end":12716,"line_start":310,"line_end":310,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11447},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12779,"byte_end":12810,"line_start":313,"line_end":313,"column_start":9,"column_end":40},"name":"max_fragment_output_attachments","qualname":"::Limits::max_fragment_output_attachments","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12767,"byte_end":12770,"line_start":312,"line_end":312,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11448},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12835,"byte_end":12871,"line_start":315,"line_end":315,"column_start":9,"column_end":45},"name":"max_fragment_dual_source_attachments","qualname":"::Limits::max_fragment_dual_source_attachments","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12823,"byte_end":12826,"line_start":314,"line_end":314,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11449},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12896,"byte_end":12934,"line_start":317,"line_end":317,"column_start":9,"column_end":47},"name":"max_fragment_combined_output_resources","qualname":"::Limits::max_fragment_combined_output_resources","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12884,"byte_end":12887,"line_start":316,"line_end":316,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11450},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12960,"byte_end":12990,"line_start":320,"line_end":320,"column_start":9,"column_end":39},"name":"max_compute_shared_memory_size","qualname":"::Limits::max_compute_shared_memory_size","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":12948,"byte_end":12951,"line_start":319,"line_end":319,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11451},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13015,"byte_end":13043,"line_start":322,"line_end":322,"column_start":9,"column_end":37},"name":"max_compute_work_group_count","qualname":"::Limits::max_compute_work_group_count","value":"[u32; 3]","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13003,"byte_end":13006,"line_start":321,"line_end":321,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11452},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13077,"byte_end":13111,"line_start":324,"line_end":324,"column_start":9,"column_end":43},"name":"max_compute_work_group_invocations","qualname":"::Limits::max_compute_work_group_invocations","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13065,"byte_end":13068,"line_start":323,"line_end":323,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11453},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13136,"byte_end":13163,"line_start":326,"line_end":326,"column_start":9,"column_end":36},"name":"max_compute_work_group_size","qualname":"::Limits::max_compute_work_group_size","value":"[u32; 3]","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13124,"byte_end":13127,"line_start":325,"line_end":325,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11455},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13192,"byte_end":13220,"line_start":329,"line_end":329,"column_start":9,"column_end":37},"name":"max_draw_indexed_index_value","qualname":"::Limits::max_draw_indexed_index_value","value":"u32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13180,"byte_end":13183,"line_start":328,"line_end":328,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11456},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13250,"byte_end":13273,"line_start":331,"line_end":331,"column_start":9,"column_end":32},"name":"max_draw_indirect_count","qualname":"::Limits::max_draw_indirect_count","value":"u32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13238,"byte_end":13241,"line_start":330,"line_end":330,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11457},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13307,"byte_end":13327,"line_start":334,"line_end":334,"column_start":9,"column_end":29},"name":"max_sampler_lod_bias","qualname":"::Limits::max_sampler_lod_bias","value":"f32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13295,"byte_end":13298,"line_start":333,"line_end":333,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11458},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13388,"byte_end":13410,"line_start":336,"line_end":336,"column_start":9,"column_end":31},"name":"max_sampler_anisotropy","qualname":"::Limits::max_sampler_anisotropy","value":"f32","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum degree of sampler anisotropy.\n","sig":null,"attributes":[{"value":"/ Maximum degree of sampler anisotropy.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13338,"byte_end":13379,"line_start":335,"line_end":335,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":11459},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13463,"byte_end":13476,"line_start":339,"line_end":339,"column_start":9,"column_end":22},"name":"max_viewports","qualname":"::Limits::max_viewports","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum number of viewports.\n","sig":null,"attributes":[{"value":"/ Maximum number of viewports.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13422,"byte_end":13454,"line_start":338,"line_end":338,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":11460},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13501,"byte_end":13524,"line_start":341,"line_end":341,"column_start":9,"column_end":32},"name":"max_viewport_dimensions","qualname":"::Limits::max_viewport_dimensions","value":"[u32; 2]","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13489,"byte_end":13492,"line_start":340,"line_end":340,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11462},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13560,"byte_end":13582,"line_start":343,"line_end":343,"column_start":9,"column_end":31},"name":"max_framebuffer_extent","qualname":"::Limits::max_framebuffer_extent","value":"image::Extent","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13548,"byte_end":13551,"line_start":342,"line_end":342,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11463},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13616,"byte_end":13640,"line_start":346,"line_end":346,"column_start":9,"column_end":33},"name":"min_memory_map_alignment","qualname":"::Limits::min_memory_map_alignment","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13604,"byte_end":13607,"line_start":345,"line_end":345,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11464},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13665,"byte_end":13689,"line_start":348,"line_end":348,"column_start":9,"column_end":33},"name":"buffer_image_granularity","qualname":"::Limits::buffer_image_granularity","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13653,"byte_end":13656,"line_start":347,"line_end":347,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11465},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13804,"byte_end":13837,"line_start":350,"line_end":350,"column_start":9,"column_end":42},"name":"min_texel_buffer_offset_alignment","qualname":"::Limits::min_texel_buffer_offset_alignment","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" The alignment of the start of buffer used as a texel buffer, in bytes, non-zero.\n","sig":null,"attributes":[{"value":"/ The alignment of the start of buffer used as a texel buffer, in bytes, non-zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13711,"byte_end":13795,"line_start":349,"line_end":349,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":11466},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13961,"byte_end":13996,"line_start":352,"line_end":352,"column_start":9,"column_end":44},"name":"min_uniform_buffer_offset_alignment","qualname":"::Limits::min_uniform_buffer_offset_alignment","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" The alignment of the start of buffer used for uniform buffer updates, in bytes, non-zero.\n","sig":null,"attributes":[{"value":"/ The alignment of the start of buffer used for uniform buffer updates, in bytes, non-zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":13859,"byte_end":13952,"line_start":351,"line_end":351,"column_start":5,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":11467},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14113,"byte_end":14148,"line_start":354,"line_end":354,"column_start":9,"column_end":44},"name":"min_storage_buffer_offset_alignment","qualname":"::Limits::min_storage_buffer_offset_alignment","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" The alignment of the start of buffer used as a storage buffer, in bytes, non-zero.\n","sig":null,"attributes":[{"value":"/ The alignment of the start of buffer used as a storage buffer, in bytes, non-zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14018,"byte_end":14104,"line_start":353,"line_end":353,"column_start":5,"column_end":91}}]},{"kind":"Field","id":{"krate":0,"index":11468},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14272,"byte_end":14303,"line_start":356,"line_end":356,"column_start":9,"column_end":40},"name":"framebuffer_color_sample_counts","qualname":"::Limits::framebuffer_color_sample_counts","value":"u8","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Number of samples supported for color attachments of framebuffers (floating/fixed point).\n","sig":null,"attributes":[{"value":"/ Number of samples supported for color attachments of framebuffers (floating/fixed point).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14170,"byte_end":14263,"line_start":355,"line_end":355,"column_start":5,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":11469},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14407,"byte_end":14438,"line_start":358,"line_end":358,"column_start":9,"column_end":40},"name":"framebuffer_depth_sample_counts","qualname":"::Limits::framebuffer_depth_sample_counts","value":"u8","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Number of samples supported for depth attachments of framebuffers.\n","sig":null,"attributes":[{"value":"/ Number of samples supported for depth attachments of framebuffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14328,"byte_end":14398,"line_start":357,"line_end":357,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":11470},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14544,"byte_end":14577,"line_start":360,"line_end":360,"column_start":9,"column_end":42},"name":"framebuffer_stencil_sample_counts","qualname":"::Limits::framebuffer_stencil_sample_counts","value":"u8","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Number of samples supported for stencil attachments of framebuffers.\n","sig":null,"attributes":[{"value":"/ Number of samples supported for stencil attachments of framebuffers.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14463,"byte_end":14535,"line_start":359,"line_end":359,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":11471},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14698,"byte_end":14719,"line_start":362,"line_end":362,"column_start":9,"column_end":30},"name":"max_color_attachments","qualname":"::Limits::max_color_attachments","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Maximum number of color attachments that can be used by a subpass in a render pass.\n","sig":null,"attributes":[{"value":"/ Maximum number of color attachments that can be used by a subpass in a render pass.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14602,"byte_end":14689,"line_start":361,"line_end":361,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":11472},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14744,"byte_end":14769,"line_start":364,"line_end":364,"column_start":9,"column_end":34},"name":"standard_sample_locations","qualname":"::Limits::standard_sample_locations","value":"bool","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14732,"byte_end":14735,"line_start":363,"line_end":363,"column_start":5,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":11473},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14881,"byte_end":14917,"line_start":366,"line_end":366,"column_start":9,"column_end":45},"name":"optimal_buffer_copy_offset_alignment","qualname":"::Limits::optimal_buffer_copy_offset_alignment","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" The alignment of the start of the buffer used as a GPU copy source, in bytes, non-zero.\n","sig":null,"attributes":[{"value":"/ The alignment of the start of the buffer used as a GPU copy source, in bytes, non-zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14781,"byte_end":14872,"line_start":365,"line_end":365,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":11474},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15087,"byte_end":15122,"line_start":369,"line_end":369,"column_start":9,"column_end":44},"name":"optimal_buffer_copy_pitch_alignment","qualname":"::Limits::optimal_buffer_copy_pitch_alignment","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" The alignment of the row pitch of the texture data stored in a buffer that is\n used in a GPU copy operation, in bytes, non-zero.\n","sig":null,"attributes":[{"value":"/ The alignment of the row pitch of the texture data stored in a buffer that is","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":14939,"byte_end":15020,"line_start":367,"line_end":367,"column_start":5,"column_end":86}},{"value":"/ used in a GPU copy operation, in bytes, non-zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15025,"byte_end":15078,"line_start":368,"line_end":368,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":11475},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15244,"byte_end":15266,"line_start":371,"line_end":371,"column_start":9,"column_end":31},"name":"non_coherent_atom_size","qualname":"::Limits::non_coherent_atom_size","value":"usize","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" Size and alignment in bytes that bounds concurrent access to host-mapped device memory.\n","sig":null,"attributes":[{"value":"/ Size and alignment in bytes that bounds concurrent access to host-mapped device memory.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15144,"byte_end":15235,"line_start":370,"line_end":370,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":11476},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15335,"byte_end":15376,"line_start":374,"line_end":374,"column_start":9,"column_end":50},"name":"min_vertex_input_binding_stride_alignment","qualname":"::Limits::min_vertex_input_binding_stride_alignment","value":"u64","parent":{"krate":0,"index":11406},"children":[],"decl_id":null,"docs":" The alignment of the vertex buffer stride.\n","sig":null,"attributes":[{"value":"/ The alignment of the vertex buffer stride.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15280,"byte_end":15326,"line_start":373,"line_end":373,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":11491},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15664,"byte_end":15667,"line_start":383,"line_end":383,"column_start":5,"column_end":8},"name":"U16","qualname":"::IndexType::U16","value":"IndexType::U16","parent":{"krate":0,"index":11490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":11493},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15673,"byte_end":15676,"line_start":384,"line_end":384,"column_start":5,"column_end":8},"name":"U32","qualname":"::IndexType::U32","value":"IndexType::U32","parent":{"krate":0,"index":11490},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":11490},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15648,"byte_end":15657,"line_start":382,"line_end":382,"column_start":10,"column_end":19},"name":"IndexType","qualname":"::IndexType","value":"IndexType::{U16, U32}","parent":null,"children":[{"krate":0,"index":11491},{"krate":0,"index":11493}],"decl_id":null,"docs":" An enum describing the type of an index value in a slice's index buffer\n","sig":null,"attributes":[{"value":"/ An enum describing the type of an index value in a slice's index buffer","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15397,"byte_end":15472,"line_start":377,"line_end":377,"column_start":1,"column_end":76}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15473,"byte_end":15495,"line_start":378,"line_end":378,"column_start":1,"column_end":23}},{"value":"repr(u8)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15627,"byte_end":15638,"line_start":381,"line_end":381,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":11513},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15826,"byte_end":15844,"line_start":390,"line_end":390,"column_start":12,"column_end":30},"name":"UnsupportedBackend","qualname":"::UnsupportedBackend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error creating an instance of a backend on the platform that\n doesn't support this backend.\n","sig":null,"attributes":[{"value":"/ Error creating an instance of a backend on the platform that","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15681,"byte_end":15745,"line_start":387,"line_end":387,"column_start":1,"column_end":65}},{"value":"/ doesn't support this backend.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15746,"byte_end":15779,"line_start":388,"line_end":388,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":877},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16717,"byte_end":16725,"line_start":415,"line_end":415,"column_start":11,"column_end":19},"name":"Instance","qualname":"::Instance","value":"Instance<B: Backend>: Any + Send + Sync + Sized","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":883}],"decl_id":null,"docs":" An instantiated backend.","sig":null,"attributes":[{"value":"/ An instantiated backend.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15847,"byte_end":15875,"line_start":392,"line_end":392,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15876,"byte_end":15879,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ Any startup the backend needs to perform will be done when creating the type that implements","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15880,"byte_end":15976,"line_start":394,"line_end":394,"column_start":1,"column_end":97}},{"value":"/ `Instance`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15977,"byte_end":15992,"line_start":395,"line_end":395,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15993,"byte_end":15996,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":15997,"byte_end":16011,"line_start":397,"line_end":397,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16012,"byte_end":16015,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16016,"byte_end":16027,"line_start":399,"line_end":399,"column_start":1,"column_end":12}},{"value":"/ # extern crate gfx_backend_empty;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16028,"byte_end":16065,"line_start":400,"line_end":400,"column_start":1,"column_end":38}},{"value":"/ # extern crate gfx_hal;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16066,"byte_end":16093,"line_start":401,"line_end":401,"column_start":1,"column_end":28}},{"value":"/ use gfx_backend_empty as backend;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16094,"byte_end":16131,"line_start":402,"line_end":402,"column_start":1,"column_end":38}},{"value":"/ use gfx_hal as hal;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16132,"byte_end":16155,"line_start":403,"line_end":403,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16156,"byte_end":16159,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/ // Create a concrete instance of our backend (this is backend-dependent and may be more","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16160,"byte_end":16251,"line_start":405,"line_end":405,"column_start":1,"column_end":92}},{"value":"/ // complicated for some backends).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16252,"byte_end":16290,"line_start":406,"line_end":406,"column_start":1,"column_end":39}},{"value":"/ let instance = backend::Instance;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16291,"byte_end":16328,"line_start":407,"line_end":407,"column_start":1,"column_end":38}},{"value":"/ // We can get a list of the available adapters, which are either physical graphics","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16329,"byte_end":16415,"line_start":408,"line_end":408,"column_start":1,"column_end":87}},{"value":"/ // devices, or virtual adapters. Because we are using the dummy `empty` backend,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16416,"byte_end":16500,"line_start":409,"line_end":409,"column_start":1,"column_end":85}},{"value":"/ // there will be nothing in this list.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16501,"byte_end":16543,"line_start":410,"line_end":410,"column_start":1,"column_end":43}},{"value":"/ for (idx, adapter) in hal::Instance::enumerate_adapters(&instance).iter().enumerate() {","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16544,"byte_end":16635,"line_start":411,"line_end":411,"column_start":1,"column_end":92}},{"value":"/     println!(\"Adapter {}: {:?}\", idx, adapter.info);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16636,"byte_end":16692,"line_start":412,"line_end":412,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16693,"byte_end":16698,"line_start":413,"line_end":413,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16699,"byte_end":16706,"line_start":414,"line_end":414,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16805,"byte_end":16811,"line_start":417,"line_end":417,"column_start":8,"column_end":14},"name":"create","qualname":"::Instance::create","value":"fn (name: &str, version: u32) -> Result<Self, UnsupportedBackend>","parent":{"krate":0,"index":877},"children":[],"decl_id":null,"docs":" Create a new instance.\n","sig":null,"attributes":[{"value":"/ Create a new instance.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16771,"byte_end":16797,"line_start":416,"line_end":416,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16921,"byte_end":16939,"line_start":419,"line_end":419,"column_start":8,"column_end":26},"name":"enumerate_adapters","qualname":"::Instance::enumerate_adapters","value":"fn (&self) -> Vec<adapter::Adapter<B>>","parent":{"krate":0,"index":877},"children":[],"decl_id":null,"docs":" Return all available adapters.\n","sig":null,"attributes":[{"value":"/ Return all available adapters.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16879,"byte_end":16913,"line_start":418,"line_end":418,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17020,"byte_end":17034,"line_start":421,"line_end":421,"column_start":15,"column_end":29},"name":"create_surface","qualname":"::Instance::create_surface","value":"fn (&self, _: &impl raw_window_handle::HasRawWindowHandle) -> Result<B::Surface, window::InitError>","parent":{"krate":0,"index":877},"children":[],"decl_id":null,"docs":" Create a new surface.\n","sig":null,"attributes":[{"value":"/ Create a new surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16980,"byte_end":17005,"line_start":420,"line_end":420,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17299,"byte_end":17314,"line_start":429,"line_end":429,"column_start":15,"column_end":30},"name":"destroy_surface","qualname":"::Instance::destroy_surface","value":"fn (&self, surface: B::Surface) -> ()","parent":{"krate":0,"index":877},"children":[],"decl_id":null,"docs":" Destroy a surface.","sig":null,"attributes":[{"value":"/ Destroy a surface.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17159,"byte_end":17181,"line_start":425,"line_end":425,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17186,"byte_end":17189,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ The surface shouldn't be destroyed before the attached","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17194,"byte_end":17252,"line_start":427,"line_end":427,"column_start":5,"column_end":63}},{"value":"/ swapchain is destroyed.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17257,"byte_end":17284,"line_start":428,"line_end":428,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":11522},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17546,"byte_end":17558,"line_start":435,"line_end":435,"column_start":12,"column_end":24},"name":"MemoryTypeId","qualname":"::MemoryTypeId","value":"","parent":null,"children":[],"decl_id":null,"docs":" A strongly-typed index to a particular `MemoryType`.\n","sig":null,"attributes":[{"value":"/ A strongly-typed index to a particular `MemoryType`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17347,"byte_end":17403,"line_start":432,"line_end":432,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":894},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18165,"byte_end":18172,"line_start":457,"line_end":457,"column_start":11,"column_end":18},"name":"Backend","qualname":"::Backend","value":"Backend: 'static + Sized + Eq + Clone + Hash + fmt::Debug + Any + Send + Sync","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923}],"decl_id":null,"docs":" The `Backend` trait wraps together all the types needed\n for a graphics backend. Each backend module, such as OpenGL\n or Metal, will implement this trait with its own concrete types.\n","sig":null,"attributes":[{"value":"/ The `Backend` trait wraps together all the types needed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17939,"byte_end":17998,"line_start":453,"line_end":453,"column_start":1,"column_end":60}},{"value":"/ for a graphics backend. Each backend module, such as OpenGL","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17999,"byte_end":18062,"line_start":454,"line_end":454,"column_start":1,"column_end":64}},{"value":"/ or Metal, will implement this trait with its own concrete types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18063,"byte_end":18131,"line_start":455,"line_end":455,"column_start":1,"column_end":69}},{"value":"allow(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18132,"byte_end":18154,"line_start":456,"line_end":456,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":895},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18254,"byte_end":18262,"line_start":458,"line_end":458,"column_start":10,"column_end":18},"name":"Instance","qualname":"::Backend::Instance","value":"type Instance: Instance<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":896},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18289,"byte_end":18303,"line_start":459,"line_end":459,"column_start":10,"column_end":24},"name":"PhysicalDevice","qualname":"::Backend::PhysicalDevice","value":"type PhysicalDevice: adapter::PhysicalDevice<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":897},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18345,"byte_end":18351,"line_start":460,"line_end":460,"column_start":10,"column_end":16},"name":"Device","qualname":"::Backend::Device","value":"type Device: device::Device<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":898},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18385,"byte_end":18392,"line_start":462,"line_end":462,"column_start":10,"column_end":17},"name":"Surface","qualname":"::Backend::Surface","value":"type Surface: window::PresentationSurface<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":899},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18438,"byte_end":18447,"line_start":463,"line_end":463,"column_start":10,"column_end":19},"name":"Swapchain","qualname":"::Backend::Swapchain","value":"type Swapchain: window::Swapchain<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":900},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18484,"byte_end":18495,"line_start":465,"line_end":465,"column_start":10,"column_end":21},"name":"QueueFamily","qualname":"::Backend::QueueFamily","value":"type QueueFamily: queue::QueueFamily;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":901},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18526,"byte_end":18538,"line_start":466,"line_end":466,"column_start":10,"column_end":22},"name":"CommandQueue","qualname":"::Backend::CommandQueue","value":"type CommandQueue: queue::CommandQueue<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":902},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18576,"byte_end":18589,"line_start":467,"line_end":467,"column_start":10,"column_end":23},"name":"CommandBuffer","qualname":"::Backend::CommandBuffer","value":"type CommandBuffer: command::CommandBuffer<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":903},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18631,"byte_end":18643,"line_start":469,"line_end":469,"column_start":10,"column_end":22},"name":"ShaderModule","qualname":"::Backend::ShaderModule","value":"type ShaderModule: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":904},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18686,"byte_end":18696,"line_start":470,"line_end":470,"column_start":10,"column_end":20},"name":"RenderPass","qualname":"::Backend::RenderPass","value":"type RenderPass: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":905},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18739,"byte_end":18750,"line_start":471,"line_end":471,"column_start":10,"column_end":21},"name":"Framebuffer","qualname":"::Backend::Framebuffer","value":"type Framebuffer: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":906},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18794,"byte_end":18800,"line_start":473,"line_end":473,"column_start":10,"column_end":16},"name":"Memory","qualname":"::Backend::Memory","value":"type Memory: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":907},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18843,"byte_end":18854,"line_start":474,"line_end":474,"column_start":10,"column_end":21},"name":"CommandPool","qualname":"::Backend::CommandPool","value":"type CommandPool: pool::CommandPool<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":908},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18891,"byte_end":18897,"line_start":476,"line_end":476,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::Backend::Buffer","value":"type Buffer: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":909},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18940,"byte_end":18950,"line_start":477,"line_end":477,"column_start":10,"column_end":20},"name":"BufferView","qualname":"::Backend::BufferView","value":"type BufferView: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":910},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18993,"byte_end":18998,"line_start":478,"line_end":478,"column_start":10,"column_end":15},"name":"Image","qualname":"::Backend::Image","value":"type Image: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":911},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19041,"byte_end":19050,"line_start":479,"line_end":479,"column_start":10,"column_end":19},"name":"ImageView","qualname":"::Backend::ImageView","value":"type ImageView: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":912},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19093,"byte_end":19100,"line_start":480,"line_end":480,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::Backend::Sampler","value":"type Sampler: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":913},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19144,"byte_end":19159,"line_start":482,"line_end":482,"column_start":10,"column_end":25},"name":"ComputePipeline","qualname":"::Backend::ComputePipeline","value":"type ComputePipeline: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":914},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19202,"byte_end":19218,"line_start":483,"line_end":483,"column_start":10,"column_end":26},"name":"GraphicsPipeline","qualname":"::Backend::GraphicsPipeline","value":"type GraphicsPipeline: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":915},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19261,"byte_end":19274,"line_start":484,"line_end":484,"column_start":10,"column_end":23},"name":"PipelineCache","qualname":"::Backend::PipelineCache","value":"type PipelineCache: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":916},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19317,"byte_end":19331,"line_start":485,"line_end":485,"column_start":10,"column_end":24},"name":"PipelineLayout","qualname":"::Backend::PipelineLayout","value":"type PipelineLayout: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":917},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19374,"byte_end":19388,"line_start":486,"line_end":486,"column_start":10,"column_end":24},"name":"DescriptorPool","qualname":"::Backend::DescriptorPool","value":"type DescriptorPool: pso::DescriptorPool<Self>;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":918},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19426,"byte_end":19439,"line_start":487,"line_end":487,"column_start":10,"column_end":23},"name":"DescriptorSet","qualname":"::Backend::DescriptorSet","value":"type DescriptorSet: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":919},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19482,"byte_end":19501,"line_start":488,"line_end":488,"column_start":10,"column_end":29},"name":"DescriptorSetLayout","qualname":"::Backend::DescriptorSetLayout","value":"type DescriptorSetLayout: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":920},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19545,"byte_end":19550,"line_start":490,"line_end":490,"column_start":10,"column_end":15},"name":"Fence","qualname":"::Backend::Fence","value":"type Fence: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":921},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19593,"byte_end":19602,"line_start":491,"line_end":491,"column_start":10,"column_end":19},"name":"Semaphore","qualname":"::Backend::Semaphore","value":"type Semaphore: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":922},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19645,"byte_end":19650,"line_start":492,"line_end":492,"column_start":10,"column_end":15},"name":"Event","qualname":"::Backend::Event","value":"type Event: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":923},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":19693,"byte_end":19702,"line_start":493,"line_end":493,"column_start":10,"column_end":19},"name":"QueryPool","qualname":"::Backend::QueryPool","value":"type QueryPool: fmt::Debug + Any + Send + Sync;","parent":{"krate":0,"index":894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26009,"byte_end":26017,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26831,"byte_end":26844,"line_start":55,"line_end":55,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26975,"byte_end":26988,"line_start":61,"line_end":61,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27420,"byte_end":27433,"line_start":74,"line_end":74,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27938,"byte_end":27955,"line_start":93,"line_end":93,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":28090,"byte_end":28107,"line_start":99,"line_end":99,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":28748,"byte_end":28765,"line_start":117,"line_end":117,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29507,"byte_end":29512,"line_start":151,"line_end":151,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55729,"byte_end":55739,"line_start":16,"line_end":16,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56393,"byte_end":56403,"line_start":44,"line_end":44,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34794,"byte_end":34822,"line_start":97,"line_end":97,"column_start":34,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61156,"byte_end":61166,"line_start":39,"line_end":39,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61317,"byte_end":61327,"line_start":45,"line_end":45,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61465,"byte_end":61476,"line_start":51,"line_end":51,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61628,"byte_end":61639,"line_start":57,"line_end":57,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61784,"byte_end":61795,"line_start":63,"line_end":63,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61951,"byte_end":61962,"line_start":69,"line_end":69,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62170,"byte_end":62181,"line_start":80,"line_end":80,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62466,"byte_end":62477,"line_start":89,"line_end":89,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62772,"byte_end":62787,"line_start":101,"line_end":101,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62911,"byte_end":62926,"line_start":107,"line_end":107,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63049,"byte_end":63064,"line_start":113,"line_end":113,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63402,"byte_end":63417,"line_start":122,"line_end":122,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63918,"byte_end":63933,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64058,"byte_end":64073,"line_start":147,"line_end":147,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64456,"byte_end":64471,"line_start":158,"line_end":158,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65807,"byte_end":65820,"line_start":196,"line_end":196,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":66863,"byte_end":66876,"line_start":222,"line_end":222,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67443,"byte_end":67451,"line_start":242,"line_end":242,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67569,"byte_end":67577,"line_start":248,"line_end":248,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68077,"byte_end":68085,"line_start":258,"line_end":258,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68649,"byte_end":68658,"line_start":278,"line_end":278,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68777,"byte_end":68786,"line_start":284,"line_end":284,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69384,"byte_end":69393,"line_start":301,"line_end":301,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70360,"byte_end":70371,"line_start":335,"line_end":335,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70492,"byte_end":70503,"line_start":341,"line_end":341,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71314,"byte_end":71325,"line_start":361,"line_end":361,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97177,"byte_end":97187,"line_start":52,"line_end":52,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99130,"byte_end":99137,"line_start":117,"line_end":117,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99323,"byte_end":99330,"line_start":122,"line_end":122,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117679,"byte_end":117685,"line_start":582,"line_end":582,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119806,"byte_end":119812,"line_start":38,"line_end":38,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121054,"byte_end":121060,"line_start":79,"line_end":79,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122579,"byte_end":122592,"line_start":125,"line_end":125,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122723,"byte_end":122736,"line_start":131,"line_end":131,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":123833,"byte_end":123846,"line_start":145,"line_end":145,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124701,"byte_end":124718,"line_start":173,"line_end":173,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124853,"byte_end":124870,"line_start":179,"line_end":179,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":125898,"byte_end":125915,"line_start":193,"line_end":193,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126423,"byte_end":126433,"line_start":211,"line_end":211,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128604,"byte_end":128608,"line_start":281,"line_end":281,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133393,"byte_end":133398,"line_start":425,"line_end":425,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134780,"byte_end":134783,"line_start":463,"line_end":463,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134896,"byte_end":134899,"line_start":468,"line_end":468,"column_start":13,"column_end":16},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134923,"byte_end":134926,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135285,"byte_end":135296,"line_start":480,"line_end":480,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135514,"byte_end":135525,"line_start":490,"line_end":490,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137303,"byte_end":137314,"line_start":536,"line_end":536,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147128,"byte_end":147135,"line_start":82,"line_end":82,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":148054,"byte_end":148061,"line_start":115,"line_end":115,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149521,"byte_end":149534,"line_start":42,"line_end":42,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151520,"byte_end":151530,"line_start":97,"line_end":97,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154252,"byte_end":154259,"line_start":164,"line_end":164,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154441,"byte_end":154448,"line_start":173,"line_end":173,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154633,"byte_end":154640,"line_start":179,"line_end":179,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154679,"byte_end":154686,"line_start":180,"line_end":180,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166868,"byte_end":166887,"line_start":21,"line_end":21,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173364,"byte_end":173379,"line_start":155,"line_end":155,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174284,"byte_end":174299,"line_start":179,"line_end":179,"column_start":28,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183624,"byte_end":183644,"line_start":139,"line_end":139,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186986,"byte_end":186996,"line_start":231,"line_end":231,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189791,"byte_end":189806,"line_start":29,"line_end":29,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194553,"byte_end":194571,"line_start":136,"line_end":136,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196080,"byte_end":196089,"line_start":50,"line_end":50,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197729,"byte_end":197736,"line_start":104,"line_end":104,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198847,"byte_end":198857,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200085,"byte_end":200099,"line_start":182,"line_end":182,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200689,"byte_end":200698,"line_start":201,"line_end":201,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202873,"byte_end":202884,"line_start":259,"line_end":259,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203469,"byte_end":203474,"line_start":280,"line_end":280,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204720,"byte_end":204731,"line_start":314,"line_end":314,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205417,"byte_end":205433,"line_start":337,"line_end":337,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207168,"byte_end":207182,"line_start":32,"line_end":32,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207373,"byte_end":207387,"line_start":40,"line_end":40,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207767,"byte_end":207781,"line_start":59,"line_end":59,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208280,"byte_end":208296,"line_start":84,"line_end":84,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208390,"byte_end":208407,"line_start":88,"line_end":88,"column_start":30,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157156,"byte_end":157169,"line_start":37,"line_end":37,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157296,"byte_end":157309,"line_start":43,"line_end":43,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157908,"byte_end":157921,"line_start":54,"line_end":54,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161005,"byte_end":161021,"line_start":145,"line_end":145,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161459,"byte_end":161464,"line_start":158,"line_end":158,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162122,"byte_end":162132,"line_start":182,"line_end":182,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163715,"byte_end":163720,"line_start":233,"line_end":233,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210492,"byte_end":210505,"line_start":22,"line_end":22,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210628,"byte_end":210641,"line_start":28,"line_end":28,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220011,"byte_end":220021,"line_start":37,"line_end":37,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214593,"byte_end":214602,"line_start":35,"line_end":35,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223076,"byte_end":223089,"line_start":84,"line_end":84,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223227,"byte_end":223240,"line_start":90,"line_end":90,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223377,"byte_end":223390,"line_start":96,"line_end":96,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223529,"byte_end":223542,"line_start":102,"line_end":102,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223673,"byte_end":223686,"line_start":108,"line_end":108,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":224402,"byte_end":224415,"line_start":127,"line_end":127,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225179,"byte_end":225187,"line_start":150,"line_end":150,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225334,"byte_end":225342,"line_start":159,"line_end":159,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226830,"byte_end":226849,"line_start":207,"line_end":207,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233576,"byte_end":233591,"line_start":382,"line_end":382,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":237288,"byte_end":237300,"line_start":491,"line_end":491,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238202,"byte_end":238214,"line_start":512,"line_end":512,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":239013,"byte_end":239025,"line_start":536,"line_end":536,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":239632,"byte_end":239644,"line_start":550,"line_end":550,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242309,"byte_end":242318,"line_start":632,"line_end":632,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242640,"byte_end":242649,"line_start":643,"line_end":643,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17593,"byte_end":17605,"line_start":437,"line_end":437,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17741,"byte_end":17750,"line_start":445,"line_end":445,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":375,"byte_end":382,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":392,"byte_end":398,"line_start":18,"line_end":18,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":33}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":408,"byte_end":415,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":58}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":425,"byte_end":431,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":185}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":441,"byte_end":447,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":370}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":457,"byte_end":462,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":399}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":472,"byte_end":478,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":474}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":488,"byte_end":492,"line_start":24,"line_end":24,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":487}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":502,"byte_end":506,"line_start":25,"line_end":25,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":521}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":516,"byte_end":519,"line_start":26,"line_end":26,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":537}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":529,"byte_end":534,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":712}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":544,"byte_end":549,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":720}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":213884,"byte_end":213890,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":721}},{"kind":"Mod","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":559,"byte_end":565,"line_start":29,"line_end":29,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":782}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21748,"byte_end":21753,"line_start":58,"line_end":58,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21756,"byte_end":21759,"line_start":58,"line_end":58,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21762,"byte_end":21766,"line_start":58,"line_end":58,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/adapter.rs","byte_start":21769,"byte_end":21773,"line_start":58,"line_end":58,"column_start":65,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26009,"byte_end":26017,"line_start":24,"line_end":24,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1010},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26831,"byte_end":26844,"line_start":55,"line_end":55,"column_start":36,"column_end":49},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1029},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":26975,"byte_end":26988,"line_start":61,"line_end":61,"column_start":28,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1029},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27420,"byte_end":27433,"line_start":74,"line_end":74,"column_start":28,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1029},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":27938,"byte_end":27955,"line_start":93,"line_end":93,"column_start":36,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1043},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":28090,"byte_end":28107,"line_start":99,"line_end":99,"column_start":28,"column_end":45},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1043},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":28748,"byte_end":28765,"line_start":117,"line_end":117,"column_start":28,"column_end":45},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1043},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/buffer.rs","byte_start":29507,"byte_end":29512,"line_start":151,"line_end":151,"column_start":6,"column_end":11},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":55729,"byte_end":55739,"line_start":16,"line_end":16,"column_start":21,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1335},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/clear.rs","byte_start":56393,"byte_end":56403,"line_start":44,"line_end":44,"column_start":21,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":34794,"byte_end":34822,"line_start":97,"line_end":97,"column_start":34,"column_end":62},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35298,"byte_end":35303,"line_start":111,"line_end":111,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35306,"byte_end":35309,"line_start":111,"line_end":111,"column_start":51,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35312,"byte_end":35316,"line_start":111,"line_end":111,"column_start":57,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/command/mod.rs","byte_start":35319,"byte_end":35323,"line_start":111,"line_end":111,"column_start":64,"column_end":68},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":102}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61156,"byte_end":61166,"line_start":39,"line_end":39,"column_start":28,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1557},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61317,"byte_end":61327,"line_start":45,"line_end":45,"column_start":28,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1557},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61465,"byte_end":61476,"line_start":51,"line_end":51,"column_start":28,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1566},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61628,"byte_end":61639,"line_start":57,"line_end":57,"column_start":28,"column_end":39},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1566},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61784,"byte_end":61795,"line_start":63,"line_end":63,"column_start":28,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1575},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":61951,"byte_end":61962,"line_start":69,"line_end":69,"column_start":28,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62170,"byte_end":62181,"line_start":80,"line_end":80,"column_start":28,"column_end":39},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1584},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62466,"byte_end":62477,"line_start":89,"line_end":89,"column_start":28,"column_end":39},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1584},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62772,"byte_end":62787,"line_start":101,"line_end":101,"column_start":28,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1596},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":62911,"byte_end":62926,"line_start":107,"line_end":107,"column_start":27,"column_end":42},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1596},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63049,"byte_end":63064,"line_start":113,"line_end":113,"column_start":28,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1596},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63402,"byte_end":63417,"line_start":122,"line_end":122,"column_start":28,"column_end":43},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1596},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":63918,"byte_end":63933,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64058,"byte_end":64073,"line_start":147,"line_end":147,"column_start":28,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":64456,"byte_end":64471,"line_start":158,"line_end":158,"column_start":28,"column_end":43},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1611},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":65807,"byte_end":65820,"line_start":196,"line_end":196,"column_start":28,"column_end":41},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1625},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":66863,"byte_end":66876,"line_start":222,"line_end":222,"column_start":28,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1625},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67443,"byte_end":67451,"line_start":242,"line_end":242,"column_start":28,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1647},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":67569,"byte_end":67577,"line_start":248,"line_end":248,"column_start":28,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1647},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68077,"byte_end":68085,"line_start":258,"line_end":258,"column_start":28,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1647},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68649,"byte_end":68658,"line_start":278,"line_end":278,"column_start":28,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1663},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":68777,"byte_end":68786,"line_start":284,"line_end":284,"column_start":28,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1663},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":69384,"byte_end":69393,"line_start":301,"line_end":301,"column_start":28,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1663},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70360,"byte_end":70371,"line_start":335,"line_end":335,"column_start":28,"column_end":39},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1691},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":70492,"byte_end":70503,"line_start":341,"line_end":341,"column_start":28,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1691},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":71314,"byte_end":71325,"line_start":361,"line_end":361,"column_start":28,"column_end":39},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1691},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72343,"byte_end":72348,"line_start":390,"line_end":390,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":258}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72351,"byte_end":72354,"line_start":390,"line_end":390,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":258}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72357,"byte_end":72361,"line_start":390,"line_end":390,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":258}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/device.rs","byte_start":72364,"byte_end":72368,"line_start":390,"line_end":390,"column_start":57,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":258}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":97177,"byte_end":97187,"line_start":52,"line_end":52,"column_start":6,"column_end":16},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99130,"byte_end":99137,"line_start":117,"line_end":117,"column_start":6,"column_end":13},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":99323,"byte_end":99330,"line_start":122,"line_end":122,"column_start":18,"column_end":25},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1928},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/format.rs","byte_start":117679,"byte_end":117685,"line_start":582,"line_end":582,"column_start":6,"column_end":12},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":119806,"byte_end":119812,"line_start":38,"line_end":38,"column_start":6,"column_end":12},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":6882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":121054,"byte_end":121060,"line_start":79,"line_end":79,"column_start":6,"column_end":12},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":6903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122579,"byte_end":122592,"line_start":125,"line_end":125,"column_start":36,"column_end":49},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":6949},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":122723,"byte_end":122736,"line_start":131,"line_end":131,"column_start":28,"column_end":41},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":6949},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":123833,"byte_end":123846,"line_start":145,"line_end":145,"column_start":28,"column_end":41},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":6949},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124701,"byte_end":124718,"line_start":173,"line_end":173,"column_start":36,"column_end":53},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":6978},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":124853,"byte_end":124870,"line_start":179,"line_end":179,"column_start":28,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":6978},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":125898,"byte_end":125915,"line_start":193,"line_end":193,"column_start":28,"column_end":45},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":6978},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":126423,"byte_end":126433,"line_start":211,"line_end":211,"column_start":28,"column_end":38},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":7007},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":128604,"byte_end":128608,"line_start":281,"line_end":281,"column_start":6,"column_end":10},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":7076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":133393,"byte_end":133398,"line_start":425,"line_end":425,"column_start":6,"column_end":11},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":7268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134780,"byte_end":134783,"line_start":463,"line_end":463,"column_start":6,"column_end":9},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":7418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134896,"byte_end":134899,"line_start":468,"line_end":468,"column_start":13,"column_end":16},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":7418},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":134923,"byte_end":134926,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":7418},"to":{"krate":2,"index":6169}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135285,"byte_end":135296,"line_start":480,"line_end":480,"column_start":25,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":7436},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":135514,"byte_end":135525,"line_start":490,"line_end":490,"column_start":25,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":7436},"to":{"krate":2,"index":1804}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/image.rs","byte_start":137303,"byte_end":137314,"line_start":536,"line_end":536,"column_start":6,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":7460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":147128,"byte_end":147135,"line_start":82,"line_end":82,"column_start":22,"column_end":29},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":7963},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/memory.rs","byte_start":148054,"byte_end":148061,"line_start":115,"line_end":115,"column_start":6,"column_end":13},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":7999},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":149521,"byte_end":149534,"line_start":42,"line_end":42,"column_start":6,"column_end":19},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":8058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":151520,"byte_end":151530,"line_start":97,"line_end":97,"column_start":6,"column_end":16},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":8076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154252,"byte_end":154259,"line_start":164,"line_end":164,"column_start":32,"column_end":39},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":8118},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154441,"byte_end":154448,"line_start":173,"line_end":173,"column_start":36,"column_end":43},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":8118},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154633,"byte_end":154640,"line_start":179,"line_end":179,"column_start":31,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":8118},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pass.rs","byte_start":154679,"byte_end":154686,"line_start":180,"line_end":180,"column_start":29,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":8118},"to":{"krate":2,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155341,"byte_end":155346,"line_start":22,"line_end":22,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155349,"byte_end":155352,"line_start":22,"line_end":22,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155355,"byte_end":155359,"line_start":22,"line_end":22,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pool.rs","byte_start":155362,"byte_end":155366,"line_start":22,"line_end":22,"column_start":62,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":528}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/compute.rs","byte_start":166868,"byte_end":166887,"line_start":21,"line_end":21,"column_start":22,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":8218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":173364,"byte_end":173379,"line_start":155,"line_end":155,"column_start":28,"column_end":43},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":8368},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174284,"byte_end":174299,"line_start":179,"line_end":179,"column_start":28,"column_end":43},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":8368},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174432,"byte_end":174436,"line_start":182,"line_end":182,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":574}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174439,"byte_end":174443,"line_start":182,"line_end":182,"column_start":46,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":574}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/descriptor.rs","byte_start":174451,"byte_end":174456,"line_start":182,"line_end":182,"column_start":58,"column_end":63},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":574}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":183624,"byte_end":183644,"line_start":139,"line_end":139,"column_start":22,"column_end":42},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":8624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/graphics.rs","byte_start":186986,"byte_end":186996,"line_start":231,"line_end":231,"column_start":6,"column_end":16},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":8699},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":189791,"byte_end":189806,"line_start":29,"line_end":29,"column_start":6,"column_end":21},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":8802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/input_assembler.rs","byte_start":194553,"byte_end":194571,"line_start":136,"line_end":136,"column_start":6,"column_end":24},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":8979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":196080,"byte_end":196089,"line_start":50,"line_end":50,"column_start":18,"column_end":27},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":9053},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":197729,"byte_end":197736,"line_start":104,"line_end":104,"column_start":6,"column_end":13},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":9245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":198847,"byte_end":198857,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":9294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200085,"byte_end":200099,"line_start":182,"line_end":182,"column_start":6,"column_end":20},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":9312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":200689,"byte_end":200698,"line_start":201,"line_end":201,"column_start":6,"column_end":15},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":9332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":202873,"byte_end":202884,"line_start":259,"line_end":259,"column_start":18,"column_end":29},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":9405},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":203469,"byte_end":203474,"line_start":280,"line_end":280,"column_start":15,"column_end":20},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":9445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":204720,"byte_end":204731,"line_start":314,"line_end":314,"column_start":18,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":9475},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/output_merger.rs","byte_start":205417,"byte_end":205433,"line_start":337,"line_end":337,"column_start":6,"column_end":22},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":9495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207168,"byte_end":207182,"line_start":32,"line_end":32,"column_start":6,"column_end":20},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":9626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207373,"byte_end":207387,"line_start":40,"line_end":40,"column_start":18,"column_end":32},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":9626},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207680,"byte_end":207685,"line_start":55,"line_end":55,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":207767,"byte_end":207781,"line_start":59,"line_end":59,"column_start":21,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":9626},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208280,"byte_end":208296,"line_start":84,"line_end":84,"column_start":24,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":9643},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/specialization.rs","byte_start":208390,"byte_end":208407,"line_start":88,"line_end":88,"column_start":30,"column_end":47},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":9647},"to":{"krate":0,"index":671}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157156,"byte_end":157169,"line_start":37,"line_end":37,"column_start":36,"column_end":49},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":9656},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157296,"byte_end":157309,"line_start":43,"line_end":43,"column_start":28,"column_end":41},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":9656},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":157908,"byte_end":157921,"line_start":54,"line_end":54,"column_start":28,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":9656},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161005,"byte_end":161021,"line_start":145,"line_end":145,"column_start":22,"column_end":38},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":9832},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":161459,"byte_end":161464,"line_start":158,"line_end":158,"column_start":23,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":9953},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":162122,"byte_end":162132,"line_start":182,"line_end":182,"column_start":32,"column_end":42},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":9980},"to":{"krate":2,"index":1593}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/pso/mod.rs","byte_start":163715,"byte_end":163720,"line_start":233,"line_end":233,"column_start":9,"column_end":14},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":10096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210492,"byte_end":210505,"line_start":22,"line_end":22,"column_start":28,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":10136},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/query.rs","byte_start":210628,"byte_end":210641,"line_start":28,"line_end":28,"column_start":28,"column_end":41},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":10136},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219220,"byte_end":219225,"line_start":12,"line_end":12,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219228,"byte_end":219231,"line_start":12,"line_end":12,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219234,"byte_end":219238,"line_start":12,"line_end":12,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":219241,"byte_end":219245,"line_start":12,"line_end":12,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":726}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/family.rs","byte_start":220011,"byte_end":220021,"line_start":37,"line_end":37,"column_start":18,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":10524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":214593,"byte_end":214602,"line_start":35,"line_end":35,"column_start":6,"column_end":15},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":10531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216019,"byte_end":216024,"line_start":73,"line_end":73,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":757}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216027,"byte_end":216030,"line_start":73,"line_end":73,"column_start":50,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":757}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216033,"byte_end":216037,"line_start":73,"line_end":73,"column_start":56,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":757}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/queue/mod.rs","byte_start":216040,"byte_end":216044,"line_start":73,"line_end":73,"column_start":63,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":757}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223076,"byte_end":223089,"line_start":84,"line_end":84,"column_start":36,"column_end":49},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":10563},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223227,"byte_end":223240,"line_start":90,"line_end":90,"column_start":35,"column_end":48},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":10563},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223377,"byte_end":223390,"line_start":96,"line_end":96,"column_start":36,"column_end":49},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":10563},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223529,"byte_end":223542,"line_start":102,"line_end":102,"column_start":36,"column_end":49},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":10563},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":223673,"byte_end":223686,"line_start":108,"line_end":108,"column_start":28,"column_end":41},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":10563},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":224402,"byte_end":224415,"line_start":127,"line_end":127,"column_start":28,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":10563},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225179,"byte_end":225187,"line_start":150,"line_end":150,"column_start":30,"column_end":38},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":10584},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":225334,"byte_end":225342,"line_start":159,"line_end":159,"column_start":6,"column_end":14},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":10584},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":226830,"byte_end":226849,"line_start":207,"line_end":207,"column_start":6,"column_end":25},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":10606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227663,"byte_end":227668,"line_start":227,"line_end":227,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":816}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227671,"byte_end":227674,"line_start":227,"line_end":227,"column_start":45,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":816}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227677,"byte_end":227681,"line_start":227,"line_end":227,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":816}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":227684,"byte_end":227688,"line_start":227,"line_end":227,"column_start":58,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":816}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":228861,"byte_end":228868,"line_start":257,"line_end":257,"column_start":44,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":816},"to":{"krate":0,"index":821}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":233576,"byte_end":233591,"line_start":382,"line_end":382,"column_start":6,"column_end":21},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":10820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":237288,"byte_end":237300,"line_start":491,"line_end":491,"column_start":28,"column_end":40},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":10836},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":238202,"byte_end":238214,"line_start":512,"line_end":512,"column_start":28,"column_end":40},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":10836},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":239013,"byte_end":239025,"line_start":536,"line_end":536,"column_start":28,"column_end":40},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":10860},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":239632,"byte_end":239644,"line_start":550,"line_end":550,"column_start":28,"column_end":40},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":10860},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240130,"byte_end":240135,"line_start":563,"line_end":563,"column_start":39,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":843}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240138,"byte_end":240141,"line_start":563,"line_end":563,"column_start":47,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":843}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240144,"byte_end":240148,"line_start":563,"line_end":563,"column_start":53,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":843}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":240151,"byte_end":240155,"line_start":563,"line_end":563,"column_start":60,"column_end":64},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":843}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242309,"byte_end":242318,"line_start":632,"line_end":632,"column_start":28,"column_end":37},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":10880},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/window.rs","byte_start":242640,"byte_end":242649,"line_start":643,"line_end":643,"column_start":28,"column_end":37},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":10880},"to":{"krate":1,"index":1624}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16739,"byte_end":16742,"line_start":415,"line_end":415,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16745,"byte_end":16749,"line_start":415,"line_end":415,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16752,"byte_end":16756,"line_start":415,"line_end":415,"column_start":46,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":16759,"byte_end":16764,"line_start":415,"line_end":415,"column_start":53,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":877}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17593,"byte_end":17605,"line_start":437,"line_end":437,"column_start":22,"column_end":34},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":11522},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":17741,"byte_end":17750,"line_start":445,"line_end":445,"column_start":34,"column_end":43},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":886},"to":{"krate":2,"index":4689}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18184,"byte_end":18189,"line_start":457,"line_end":457,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":894}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18192,"byte_end":18194,"line_start":457,"line_end":457,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1624},"to":{"krate":0,"index":894}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18197,"byte_end":18202,"line_start":457,"line_end":457,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":894}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18205,"byte_end":18209,"line_start":457,"line_end":457,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":6169},"to":{"krate":0,"index":894}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18217,"byte_end":18222,"line_start":457,"line_end":457,"column_start":63,"column_end":68},"kind":"SuperTrait","from":{"krate":2,"index":5978},"to":{"krate":0,"index":894}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18225,"byte_end":18228,"line_start":457,"line_end":457,"column_start":71,"column_end":74},"kind":"SuperTrait","from":{"krate":2,"index":2384},"to":{"krate":0,"index":894}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18231,"byte_end":18235,"line_start":457,"line_end":457,"column_start":77,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":1883},"to":{"krate":0,"index":894}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-hal-0.5.3/src/lib.rs","byte_start":18238,"byte_end":18242,"line_start":457,"line_end":457,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":1895},"to":{"krate":0,"index":894}}]}