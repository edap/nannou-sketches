{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3","program":"/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hibitset","/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=b0d0cdfb8113c557","-C","extra-filename=-b0d0cdfb8113c557","--out-dir","/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","-L","dependency=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps","--extern","atom=/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libatom-df90df47a6147e13.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dapx/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dapx/Sources/rust/nannou-sketches/rayquad5/target/rls/debug/deps/libhibitset-b0d0cdfb8113c557.rmeta"},"prelude":{"crate_id":{"name":"hibitset","disambiguator":[12551236931944093258,15446363680029529775]},"crate_root":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src","external_crates":[{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","num":15,"id":{"name":"atom","disambiguator":[7388032441240403036,7755558300585397009]}}],"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":0,"byte_end":25253,"line_start":1,"line_end":870,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2000,"byte_end":2012,"line_start":59,"line_end":59,"column_start":17,"column_end":29},"alias_span":null,"name":"AtomicBitSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2029,"byte_end":2036,"line_start":60,"line_end":60,"column_start":16,"column_end":23},"alias_span":null,"name":"BitIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":65},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2038,"byte_end":2050,"line_start":60,"line_end":60,"column_start":25,"column_end":37},"alias_span":null,"name":"DrainBitIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2137,"byte_end":2146,"line_start":63,"line_end":63,"column_start":15,"column_end":24},"alias_span":null,"name":"BitSetAll","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2148,"byte_end":2157,"line_start":63,"line_end":63,"column_start":26,"column_end":35},"alias_span":null,"name":"BitSetAnd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2159,"byte_end":2168,"line_start":63,"line_end":63,"column_start":37,"column_end":46},"alias_span":null,"name":"BitSetNot","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2170,"byte_end":2178,"line_start":63,"line_end":63,"column_start":48,"column_end":56},"alias_span":null,"name":"BitSetOr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2180,"byte_end":2189,"line_start":63,"line_end":63,"column_start":58,"column_end":67},"alias_span":null,"name":"BitSetXor","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":0,"byte_end":25253,"line_start":1,"line_end":870,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":55},{"krate":0,"index":102},{"krate":0,"index":191},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":219},{"krate":0,"index":776},{"krate":0,"index":785},{"krate":0,"index":783},{"krate":0,"index":781},{"krate":0,"index":220},{"krate":0,"index":239},{"krate":0,"index":249},{"krate":0,"index":254},{"krate":0,"index":262},{"krate":0,"index":270},{"krate":0,"index":274},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":287}],"decl_id":null,"docs":" # hibitset","sig":null,"attributes":[{"value":"! # hibitset","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Provides hierarchical bit sets,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":19,"byte_end":54,"line_start":3,"line_end":3,"column_start":1,"column_end":36}},{"value":"! which allow very fast iteration","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":55,"byte_end":90,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"! on sparse data structures.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":91,"byte_end":121,"line_start":5,"line_end":5,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":122,"byte_end":125,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! ## What it does","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":126,"byte_end":145,"line_start":7,"line_end":7,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":146,"byte_end":149,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! A `BitSet` may be considered analogous to a `HashSet<u32>`. It","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":150,"byte_end":216,"line_start":9,"line_end":9,"column_start":1,"column_end":67}},{"value":"! tracks whether or not certain indices exist within it. Its","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":217,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"! implementation is very different, however.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":280,"byte_end":326,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":327,"byte_end":330,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! At its root, a `BitSet` relies on an array of bits, which express","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":331,"byte_end":400,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"! whether or not indices exist. This provides the functionality to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":401,"byte_end":469,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"! `add( )` and `remove( )` indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":470,"byte_end":507,"line_start":15,"line_end":15,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":508,"byte_end":511,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! This array is referred to as Layer 0. Above it, there is another","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":512,"byte_end":580,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"! layer: Layer 1. Layer 1 acts as a 'summary' of Layer 0. It contains","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":581,"byte_end":652,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"! one bit for each `usize` bits of Layer 0. If any bit in that `usize`","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":653,"byte_end":725,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"! of Layer 0 is set, the bit in Layer 1 will be set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":726,"byte_end":780,"line_start":20,"line_end":20,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":781,"byte_end":784,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! There are, in total, four layers. Layers 1 through 3 are each a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":785,"byte_end":852,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"! a summary of the layer immediately below them.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":853,"byte_end":903,"line_start":23,"line_end":23,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":904,"byte_end":907,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ```no_compile","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":908,"byte_end":925,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"! Example, with an imaginary 4-bit usize:","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":926,"byte_end":969,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":970,"byte_end":973,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! Layer 3: 1------------------------------------------------ ...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":974,"byte_end":1040,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"! Layer 2: 1------------------ 1------------------ 0-------- ...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1041,"byte_end":1107,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"! Layer 1: 1--- 0--- 0--- 0--- 1--- 0--- 1--- 0--- 0--- 0--- ...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1108,"byte_end":1174,"line_start":30,"line_end":30,"column_start":1,"column_end":67}},{"value":"! Layer 0: 0010 0000 0000 0000 0011 0000 1111 0000 0000 0000 ...","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1175,"byte_end":1241,"line_start":31,"line_end":31,"column_start":1,"column_end":67}},{"value":"! ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1242,"byte_end":1249,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1250,"byte_end":1253,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! This method makes operations that operate over the whole `BitSet`,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1254,"byte_end":1324,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"! such as unions, intersections, and iteration, very fast (because if","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1325,"byte_end":1396,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"! any bit in any summary layer is zero, an entire range of bits","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1397,"byte_end":1462,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"! below it can be skipped.)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1463,"byte_end":1492,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1493,"byte_end":1496,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! However, there is a maximum on index size. The top layer (Layer 3)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1497,"byte_end":1567,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"! of the BitSet is a single `usize` long. This makes the maximum index","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1568,"byte_end":1640,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"! `usize**4` (`1,048,576` for a 32-bit `usize`, `16,777,216` for a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1641,"byte_end":1709,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"! 64-bit `usize`). Attempting to add indices larger than that will cause","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1710,"byte_end":1784,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"! the `BitSet` to panic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1785,"byte_end":1811,"line_start":43,"line_end":43,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1812,"byte_end":1815,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"deny(missing_docs)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":1817,"byte_end":1839,"line_start":46,"line_end":46,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":288},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26324,"byte_end":26336,"line_start":30,"line_end":30,"column_start":12,"column_end":24},"name":"AtomicBitSet","qualname":"::atomic::AtomicBitSet","value":"AtomicBitSet {  }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"decl_id":null,"docs":" This is similar to a [`BitSet`] but allows setting of value\n without unique ownership of the structure","sig":null,"attributes":[{"value":"/ This is similar to a [`BitSet`] but allows setting of value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25483,"byte_end":25546,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/ without unique ownership of the structure","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25547,"byte_end":25592,"line_start":12,"line_end":12,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25593,"byte_end":25596,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ An `AtomicBitSet` has the ability to add an item to the set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25597,"byte_end":25660,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ without unique ownership (given that the set is big enough).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25661,"byte_end":25725,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/ Removing elements does require unique ownership as an effect","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25726,"byte_end":25790,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/ of the hierarchy it holds. Worst case multiple writers set the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25791,"byte_end":25857,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/ same bit twice (but only is told they set it).","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25858,"byte_end":25908,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25909,"byte_end":25912,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ It is possible to atomically remove from the set, but not at the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25913,"byte_end":25981,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ same time as atomically adding. This is because there is no way","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":25982,"byte_end":26049,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/ to know if layer 1-3 would be left in a consistent state if they are","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26050,"byte_end":26122,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ being cleared and set at the same time.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26123,"byte_end":26166,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26167,"byte_end":26170,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ `AtromicBitSet` resolves this race by disallowing atomic","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26171,"byte_end":26231,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/ clearing of bits.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26232,"byte_end":26253,"line_start":26,"line_end":26,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26254,"byte_end":26257,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`BitSet`]: ../struct.BitSet.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26258,"byte_end":26295,"line_start":28,"line_end":28,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26499,"byte_end":26502,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicBitSet>::new","value":"fn () -> AtomicBitSet","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `AtomicBitSet`.\n","sig":null,"attributes":[{"value":"/ Creates an empty `AtomicBitSet`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26451,"byte_end":26487,"line_start":37,"line_end":37,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26826,"byte_end":26836,"line_start":48,"line_end":48,"column_start":12,"column_end":22},"name":"add_atomic","qualname":"<AtomicBitSet>::add_atomic","value":"fn (&self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds `id` to the `AtomicBitSet`. Returns `true` if the value was\n already in the set.","sig":null,"attributes":[{"value":"/ Adds `id` to the `AtomicBitSet`. Returns `true` if the value was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26561,"byte_end":26629,"line_start":42,"line_end":42,"column_start":5,"column_end":73}},{"value":"/ already in the set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26634,"byte_end":26657,"line_start":43,"line_end":43,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26662,"byte_end":26665,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ Because we cannot safely extend an AtomicBitSet without unique ownership","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26670,"byte_end":26746,"line_start":45,"line_end":45,"column_start":5,"column_end":81}},{"value":"/ this will panic if the Index is out of range.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26751,"byte_end":26800,"line_start":46,"line_end":46,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26805,"byte_end":26814,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":27595,"byte_end":27598,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"add","qualname":"<AtomicBitSet>::add","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds `id` to the `BitSet`. Returns `true` if the value was\n already in the set.\n","sig":null,"attributes":[{"value":"/ Adds `id` to the `BitSet`. Returns `true` if the value was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":27479,"byte_end":27541,"line_start":62,"line_end":62,"column_start":5,"column_end":67}},{"value":"/ already in the set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":27546,"byte_end":27569,"line_start":63,"line_end":63,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":27574,"byte_end":27583,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":28167,"byte_end":28173,"line_start":83,"line_end":83,"column_start":12,"column_end":18},"name":"remove","qualname":"<AtomicBitSet>::remove","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes `id` from the set, returns `true` if the value\n was removed, and `false` if the value was not set\n to begin with.\n","sig":null,"attributes":[{"value":"/ Removes `id` from the set, returns `true` if the value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":28002,"byte_end":28060,"line_start":79,"line_end":79,"column_start":5,"column_end":63}},{"value":"/ was removed, and `false` if the value was not set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":28065,"byte_end":28118,"line_start":80,"line_end":80,"column_start":5,"column_end":58}},{"value":"/ to begin with.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":28123,"byte_end":28141,"line_start":81,"line_end":81,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":28146,"byte_end":28155,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":29184,"byte_end":29192,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"contains","qualname":"<AtomicBitSet>::contains","value":"fn (&self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `id` is in the set.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `id` is in the set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":29117,"byte_end":29158,"line_start":112,"line_end":112,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":29163,"byte_end":29172,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":29344,"byte_end":29349,"line_start":120,"line_end":120,"column_start":12,"column_end":17},"name":"clear","qualname":"<AtomicBitSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear all bits in the set\n","sig":null,"attributes":[{"value":"/ Clear all bits in the set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":29303,"byte_end":29332,"line_start":119,"line_end":119,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":65},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41191,"byte_end":41203,"line_start":8,"line_end":8,"column_start":12,"column_end":24},"name":"DrainBitIter","qualname":"::iter::drain::DrainBitIter","value":"DrainBitIter {  }","parent":null,"children":[{"krate":0,"index":68}],"decl_id":null,"docs":" A draining `Iterator` over a [`DrainableBitSet`] structure.","sig":null,"attributes":[{"value":"/ A draining `Iterator` over a [`DrainableBitSet`] structure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41057,"byte_end":41120,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41121,"byte_end":41124,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [`DrainableBitSet`]: ../trait.DrainableBitSet.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41125,"byte_end":41179,"line_start":7,"line_end":7,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41504,"byte_end":41507,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<DrainBitIter>::new","value":"fn (set: &'a mut T, masks: [usize; LAYERS], prefix: [u32; LAYERS - 1]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `DrainBitIter`. You usually don't call this function\n but just [`.drain()`] on a bit set.","sig":null,"attributes":[{"value":"/ Creates a new `DrainBitIter`. You usually don't call this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41305,"byte_end":41375,"line_start":13,"line_end":13,"column_start":5,"column_end":75}},{"value":"/ but just [`.drain()`] on a bit set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41380,"byte_end":41419,"line_start":14,"line_end":14,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41424,"byte_end":41427,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ [`.drain()`]: ../trait.DrainableBitSet.html#method.drain","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41432,"byte_end":41492,"line_start":16,"line_end":16,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":294},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37327,"byte_end":37334,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"BitIter","qualname":"::iter::BitIter","value":"BitIter {  }","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":299}],"decl_id":null,"docs":" An `Iterator` over a [`BitSetLike`] structure.","sig":null,"attributes":[{"value":"/ An `Iterator` over a [`BitSetLike`] structure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37192,"byte_end":37242,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37243,"byte_end":37246,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`BitSetLike`]: ../trait.BitSetLike.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37247,"byte_end":37291,"line_start":15,"line_end":15,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37658,"byte_end":37661,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<BitIter<T>>::new","value":"fn (set: T, masks: [usize; LAYERS], prefix: [u32; LAYERS - 1]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BitIter`. You usually don't call this function\n but just [`.iter()`] on a bit set.","sig":null,"attributes":[{"value":"/ Creates a new `BitIter`. You usually don't call this function","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37472,"byte_end":37537,"line_start":24,"line_end":24,"column_start":5,"column_end":70}},{"value":"/ but just [`.iter()`] on a bit set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37542,"byte_end":37580,"line_start":25,"line_end":25,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37585,"byte_end":37588,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ [`.iter()`]: ../trait.BitSetLike.html#method.iter","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37593,"byte_end":37646,"line_start":27,"line_end":27,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37959,"byte_end":37967,"line_start":39,"line_end":39,"column_start":12,"column_end":20},"name":"contains","qualname":"<BitIter<T>>::contains","value":"fn (&self, i: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Allows checking if set bit is contained in underlying bit set.\n","sig":null,"attributes":[{"value":"/ Allows checking if set bit is contained in underlying bit set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37881,"byte_end":37947,"line_start":38,"line_end":38,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":319},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45400,"byte_end":45409,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"BitSetAnd","qualname":"::ops::BitSetAnd","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetAnd` takes two [`BitSetLike`] items, and merges the masks\n returning a new virtual set, which represents an intersection of the\n two original sets.","sig":null,"attributes":[{"value":"/ `BitSetAnd` takes two [`BitSetLike`] items, and merges the masks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45151,"byte_end":45219,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/ returning a new virtual set, which represents an intersection of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45220,"byte_end":45292,"line_start":92,"line_end":92,"column_start":1,"column_end":73}},{"value":"/ two original sets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45293,"byte_end":45315,"line_start":93,"line_end":93,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45316,"byte_end":45319,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ [`BitSetLike`]: ../trait.BitSetLike.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45320,"byte_end":45364,"line_start":95,"line_end":95,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":333},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46596,"byte_end":46604,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"BitSetOr","qualname":"::ops::BitSetOr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetOr` takes two [`BitSetLike`] items, and merges the masks\n returning a new virtual set, which represents an merged of the\n two original sets.","sig":null,"attributes":[{"value":"/ `BitSetOr` takes two [`BitSetLike`] items, and merges the masks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46354,"byte_end":46421,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/ returning a new virtual set, which represents an merged of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46422,"byte_end":46488,"line_start":136,"line_end":136,"column_start":1,"column_end":67}},{"value":"/ two original sets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46489,"byte_end":46511,"line_start":137,"line_end":137,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46512,"byte_end":46515,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`BitSetLike`]: ../trait.BitSetLike.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46516,"byte_end":46560,"line_start":139,"line_end":139,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":347},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47793,"byte_end":47802,"line_start":184,"line_end":184,"column_start":12,"column_end":21},"name":"BitSetNot","qualname":"::ops::BitSetNot","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetNot` takes a [`BitSetLike`] item, and produced an inverted virtual set.\n Note: the implementation is sub-optimal because layers 1-3 are not active.","sig":null,"attributes":[{"value":"/ `BitSetNot` takes a [`BitSetLike`] item, and produced an inverted virtual set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47547,"byte_end":47629,"line_start":179,"line_end":179,"column_start":1,"column_end":83}},{"value":"/ Note: the implementation is sub-optimal because layers 1-3 are not active.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47630,"byte_end":47708,"line_start":180,"line_end":180,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47709,"byte_end":47712,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ [`BitSetLike`]: ../trait.BitSetLike.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47713,"byte_end":47757,"line_start":182,"line_end":182,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":357},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48511,"byte_end":48520,"line_start":215,"line_end":215,"column_start":12,"column_end":21},"name":"BitSetXor","qualname":"::ops::BitSetXor","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetXor` takes two [`BitSetLike`] items, and merges the masks\n returning a new virtual set, which represents an merged of the\n two original sets.","sig":null,"attributes":[{"value":"/ `BitSetXor` takes two [`BitSetLike`] items, and merges the masks","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48268,"byte_end":48336,"line_start":209,"line_end":209,"column_start":1,"column_end":69}},{"value":"/ returning a new virtual set, which represents an merged of the","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48337,"byte_end":48403,"line_start":210,"line_end":210,"column_start":1,"column_end":67}},{"value":"/ two original sets.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48404,"byte_end":48426,"line_start":211,"line_end":211,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48427,"byte_end":48430,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ [`BitSetLike`]: ../trait.BitSetLike.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48431,"byte_end":48475,"line_start":213,"line_end":213,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":49867,"byte_end":49876,"line_start":263,"line_end":263,"column_start":12,"column_end":21},"name":"BitSetAll","qualname":"::ops::BitSetAll","value":"","parent":null,"children":[],"decl_id":null,"docs":" `BitSetAll` is a bitset with all bits set. Essentially the same as\n `BitSetNot(BitSet::new())` but without any allocation.\n","sig":null,"attributes":[{"value":"/ `BitSetAll` is a bitset with all bits set. Essentially the same as","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":49702,"byte_end":49772,"line_start":260,"line_end":260,"column_start":1,"column_end":71}},{"value":"/ `BitSetNot(BitSet::new())` but without any allocation.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":49773,"byte_end":49831,"line_start":261,"line_end":261,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":776},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2475,"byte_end":2481,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"BitSet","qualname":"::BitSet","value":"BitSet {  }","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780}],"decl_id":null,"docs":" A `BitSet` is a simple set designed to track which indices are placed\n into it.","sig":null,"attributes":[{"value":"/ A `BitSet` is a simple set designed to track which indices are placed","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2207,"byte_end":2280,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ into it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2281,"byte_end":2293,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2294,"byte_end":2297,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Note, a `BitSet` is limited by design to only `usize**4` indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2298,"byte_end":2367,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/ Adding beyond this limit will cause the `BitSet` to panic.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2368,"byte_end":2430,"line_start":71,"line_end":71,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2638,"byte_end":2641,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<BitSet>::new","value":"fn () -> BitSet","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BitSet`.\n","sig":null,"attributes":[{"value":"/ Creates an empty `BitSet`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2596,"byte_end":2626,"line_start":81,"line_end":81,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2955,"byte_end":2968,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BitSet>::with_capacity","value":"fn (max: Index) -> BitSet","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BitSet`, preallocated for up to `max` indices.\n","sig":null,"attributes":[{"value":"/ Creates an empty `BitSet`, preallocated for up to `max` indices.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2875,"byte_end":2943,"line_start":93,"line_end":93,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":4000,"byte_end":4003,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"add","qualname":"<BitSet>::add","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds `id` to the `BitSet`. Returns `true` if the value was\n already in the set.\n","sig":null,"attributes":[{"value":"/ Adds `id` to the `BitSet`. Returns `true` if the value was","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":3884,"byte_end":3946,"line_start":127,"line_end":127,"column_start":5,"column_end":67}},{"value":"/ already in the set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":3951,"byte_end":3974,"line_start":128,"line_end":128,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":3979,"byte_end":3988,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":5253,"byte_end":5259,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"remove","qualname":"<BitSet>::remove","value":"fn (&mut self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes `id` from the set, returns `true` if the value\n was removed, and `false` if the value was not set\n to begin with.\n","sig":null,"attributes":[{"value":"/ Removes `id` from the set, returns `true` if the value","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":5088,"byte_end":5146,"line_start":170,"line_end":170,"column_start":5,"column_end":63}},{"value":"/ was removed, and `false` if the value was not set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":5151,"byte_end":5204,"line_start":171,"line_end":171,"column_start":5,"column_end":58}},{"value":"/ to begin with.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":5209,"byte_end":5227,"line_start":172,"line_end":172,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":5232,"byte_end":5241,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6179,"byte_end":6187,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"contains","qualname":"<BitSet>::contains","value":"fn (&self, id: Index) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `id` is in the set.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `id` is in the set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6112,"byte_end":6153,"line_start":208,"line_end":208,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6158,"byte_end":6167,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6430,"byte_end":6442,"line_start":217,"line_end":217,"column_start":12,"column_end":24},"name":"contains_set","qualname":"<BitSet>::contains_set","value":"fn (&self, other: &BitSet) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all ids in `other` are contained in this set\n","sig":null,"attributes":[{"value":"/ Returns `true` if all ids in `other` are contained in this set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6338,"byte_end":6404,"line_start":215,"line_end":215,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6409,"byte_end":6418,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6672,"byte_end":6677,"line_start":227,"line_end":227,"column_start":12,"column_end":17},"name":"clear","qualname":"<BitSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Completely wipes out the bit set.\n","sig":null,"attributes":[{"value":"/ Completely wipes out the bit set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":6623,"byte_end":6660,"line_start":226,"line_end":226,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":233},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7561,"byte_end":7575,"line_start":258,"line_end":258,"column_start":15,"column_end":29},"name":"BITS_PER_USIZE","qualname":"::BitSet::BITS_PER_USIZE","value":"usize","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" How many bits are in a `usize`.","sig":null,"attributes":[{"value":"/ How many bits are in a `usize`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7204,"byte_end":7239,"line_start":247,"line_end":247,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7244,"byte_end":7247,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This value can be trivially determined. It is provided here as a constant for clarity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7252,"byte_end":7342,"line_start":249,"line_end":249,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7347,"byte_end":7350,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7355,"byte_end":7368,"line_start":251,"line_end":251,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7373,"byte_end":7376,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7381,"byte_end":7388,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use hibitset::BitSet;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7393,"byte_end":7418,"line_start":254,"line_end":254,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(BitSet::BITS_PER_USIZE, std::mem::size_of::<usize>()*8);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7423,"byte_end":7494,"line_start":255,"line_end":255,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7499,"byte_end":7506,"line_start":256,"line_end":256,"column_start":5,"column_end":12}},{"value":"cfg(target_pointer_width = \"64\")","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7511,"byte_end":7546,"line_start":257,"line_end":257,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8577,"byte_end":8592,"line_start":286,"line_end":286,"column_start":12,"column_end":27},"name":"layer0_as_slice","qualname":"<BitSet>::layer0_as_slice","value":"fn (&self) -> &[usize]","parent":null,"children":[],"decl_id":null,"docs":" Returns the bottom layer of the bitset as a slice. Each bit in this slice refers to a single\n `Index`.","sig":null,"attributes":[{"value":"/ Returns the bottom layer of the bitset as a slice. Each bit in this slice refers to a single","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7594,"byte_end":7690,"line_start":260,"line_end":260,"column_start":5,"column_end":101}},{"value":"/ `Index`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7695,"byte_end":7707,"line_start":261,"line_end":261,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7712,"byte_end":7715,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ The slice's length will be at least the length needed to reflect all the `1`s in the bitset,","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7720,"byte_end":7816,"line_start":263,"line_end":263,"column_start":5,"column_end":101}},{"value":"/ but is not otherwise guaranteed. Consider it to be an implementation detail.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7821,"byte_end":7901,"line_start":264,"line_end":264,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7906,"byte_end":7909,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7914,"byte_end":7927,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7932,"byte_end":7935,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7940,"byte_end":7947,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"/ use hibitset::BitSet;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7952,"byte_end":7977,"line_start":269,"line_end":269,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7982,"byte_end":7985,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let index: u32 = 12345;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":7990,"byte_end":8017,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8022,"byte_end":8025,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let mut bitset = BitSet::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8030,"byte_end":8065,"line_start":273,"line_end":273,"column_start":5,"column_end":40}},{"value":"/ bitset.add(index);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8070,"byte_end":8092,"line_start":274,"line_end":274,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8097,"byte_end":8100,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ // layer 0 is 1:1 with Indexes, so we expect that bit in the slice to be set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8105,"byte_end":8185,"line_start":276,"line_end":276,"column_start":5,"column_end":85}},{"value":"/ let slice = bitset.layer0_as_slice();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8190,"byte_end":8231,"line_start":277,"line_end":277,"column_start":5,"column_end":46}},{"value":"/ let bit_index = index as usize;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8236,"byte_end":8271,"line_start":278,"line_end":278,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8276,"byte_end":8279,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ // map that bit index to a usize in the slice and a bit within that usize","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8284,"byte_end":8361,"line_start":280,"line_end":280,"column_start":5,"column_end":82}},{"value":"/ let slice_index = bit_index / BitSet::BITS_PER_USIZE;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8366,"byte_end":8423,"line_start":281,"line_end":281,"column_start":5,"column_end":62}},{"value":"/ let bit_at_index = bit_index % BitSet::BITS_PER_USIZE;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8428,"byte_end":8486,"line_start":282,"line_end":282,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8491,"byte_end":8494,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(slice[slice_index], 1 << bit_at_index);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8499,"byte_end":8553,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8558,"byte_end":8565,"line_start":285,"line_end":285,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":235},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9131,"byte_end":9149,"line_start":302,"line_end":302,"column_start":15,"column_end":33},"name":"LAYER1_GRANULARITY","qualname":"::BitSet::LAYER1_GRANULARITY","value":"usize","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" How many `Index`es are described by as single layer 1 bit, intended for use with\n `BitSet::layer1_as_slice()`.","sig":null,"attributes":[{"value":"/ How many `Index`es are described by as single layer 1 bit, intended for use with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8656,"byte_end":8740,"line_start":290,"line_end":290,"column_start":5,"column_end":89}},{"value":"/ `BitSet::layer1_as_slice()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8745,"byte_end":8777,"line_start":291,"line_end":291,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8782,"byte_end":8785,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ `BitSet`s are defined in terms of `usize`s summarizing `usize`s, so this value can be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8790,"byte_end":8879,"line_start":293,"line_end":293,"column_start":5,"column_end":94}},{"value":"/ trivially determined. It is provided here as a constant for clarity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8884,"byte_end":8956,"line_start":294,"line_end":294,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8961,"byte_end":8964,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8969,"byte_end":8982,"line_start":296,"line_end":296,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8987,"byte_end":8990,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":8995,"byte_end":9002,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ use hibitset::BitSet;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9007,"byte_end":9032,"line_start":299,"line_end":299,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(BitSet::LAYER1_GRANULARITY, BitSet::BITS_PER_USIZE);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9037,"byte_end":9104,"line_start":300,"line_end":300,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9109,"byte_end":9116,"line_start":301,"line_end":301,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10405,"byte_end":10420,"line_start":332,"line_end":332,"column_start":12,"column_end":27},"name":"layer1_as_slice","qualname":"<BitSet>::layer1_as_slice","value":"fn (&self) -> &[usize]","parent":null,"children":[],"decl_id":null,"docs":" Returns the second layer of the bitset as a slice. Each bit in this slice summarizes a\n corresponding `usize` from `layer0`. (If `usize` is 64 bits, bit 0 will be set if any\n `Index`es 0-63 are set, bit 1 will be set if any `Index`es 64-127 are set, etc.)\n `BitSet::LAYER1_GRANULARITY` reflects how many indexes are summarized per layer 1 bit.","sig":null,"attributes":[{"value":"/ Returns the second layer of the bitset as a slice. Each bit in this slice summarizes a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9186,"byte_end":9276,"line_start":304,"line_end":304,"column_start":5,"column_end":95}},{"value":"/ corresponding `usize` from `layer0`. (If `usize` is 64 bits, bit 0 will be set if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9281,"byte_end":9370,"line_start":305,"line_end":305,"column_start":5,"column_end":94}},{"value":"/ `Index`es 0-63 are set, bit 1 will be set if any `Index`es 64-127 are set, etc.)","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9375,"byte_end":9459,"line_start":306,"line_end":306,"column_start":5,"column_end":89}},{"value":"/ `BitSet::LAYER1_GRANULARITY` reflects how many indexes are summarized per layer 1 bit.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9464,"byte_end":9554,"line_start":307,"line_end":307,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9559,"byte_end":9562,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The slice's length is not guaranteed, except that it will be at least the length needed to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9567,"byte_end":9661,"line_start":309,"line_end":309,"column_start":5,"column_end":99}},{"value":"/ reflect all the `1`s in the bitset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9666,"byte_end":9705,"line_start":310,"line_end":310,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9710,"byte_end":9713,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9718,"byte_end":9731,"line_start":312,"line_end":312,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9736,"byte_end":9739,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9744,"byte_end":9751,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ use hibitset::BitSet;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9756,"byte_end":9781,"line_start":315,"line_end":315,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9786,"byte_end":9789,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let index: u32 = 12345;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9794,"byte_end":9821,"line_start":317,"line_end":317,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9826,"byte_end":9829,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ let mut bitset = BitSet::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9834,"byte_end":9869,"line_start":319,"line_end":319,"column_start":5,"column_end":40}},{"value":"/ bitset.add(index);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9874,"byte_end":9896,"line_start":320,"line_end":320,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9901,"byte_end":9904,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ // layer 1 summarizes multiple indexes per bit, so divide appropriately","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9909,"byte_end":9984,"line_start":322,"line_end":322,"column_start":5,"column_end":80}},{"value":"/ let slice = bitset.layer1_as_slice();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":9989,"byte_end":10030,"line_start":323,"line_end":323,"column_start":5,"column_end":46}},{"value":"/ let bit_index = index as usize / BitSet::LAYER1_GRANULARITY;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10035,"byte_end":10099,"line_start":324,"line_end":324,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10104,"byte_end":10107,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ // map that bit index to a usize in the slice and a bit within that usize","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10112,"byte_end":10189,"line_start":326,"line_end":326,"column_start":5,"column_end":82}},{"value":"/ let slice_index = bit_index / BitSet::BITS_PER_USIZE;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10194,"byte_end":10251,"line_start":327,"line_end":327,"column_start":5,"column_end":62}},{"value":"/ let bit_at_index = bit_index % BitSet::BITS_PER_USIZE;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10256,"byte_end":10314,"line_start":328,"line_end":328,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10319,"byte_end":10322,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(slice[slice_index], 1 << bit_at_index);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10327,"byte_end":10381,"line_start":330,"line_end":330,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10386,"byte_end":10393,"line_start":331,"line_end":331,"column_start":5,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":237},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10988,"byte_end":11006,"line_start":348,"line_end":348,"column_start":15,"column_end":33},"name":"LAYER2_GRANULARITY","qualname":"::BitSet::LAYER2_GRANULARITY","value":"usize","parent":{"krate":0,"index":220},"children":[],"decl_id":null,"docs":" How many `Index`es are described by as single layer 2 bit, intended for use with\n `BitSet::layer2_as_slice()`.","sig":null,"attributes":[{"value":"/ How many `Index`es are described by as single layer 2 bit, intended for use with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10484,"byte_end":10568,"line_start":336,"line_end":336,"column_start":5,"column_end":89}},{"value":"/ `BitSet::layer2_as_slice()`.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10573,"byte_end":10605,"line_start":337,"line_end":337,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10610,"byte_end":10613,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ `BitSet`s are defined in terms of `usize`s summarizing `usize`s, so this value can be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10618,"byte_end":10707,"line_start":339,"line_end":339,"column_start":5,"column_end":94}},{"value":"/ trivially determined. It is provided here as a constant for clarity.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10712,"byte_end":10784,"line_start":340,"line_end":340,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10789,"byte_end":10792,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10797,"byte_end":10810,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10815,"byte_end":10818,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10823,"byte_end":10830,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/ use hibitset::BitSet;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10835,"byte_end":10860,"line_start":345,"line_end":345,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(BitSet::LAYER2_GRANULARITY, BitSet::LAYER1_GRANULARITY * BitSet::BITS_PER_USIZE);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10865,"byte_end":10961,"line_start":346,"line_end":346,"column_start":5,"column_end":101}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":10966,"byte_end":10973,"line_start":347,"line_end":347,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12196,"byte_end":12211,"line_start":377,"line_end":377,"column_start":12,"column_end":27},"name":"layer2_as_slice","qualname":"<BitSet>::layer2_as_slice","value":"fn (&self) -> &[usize]","parent":null,"children":[],"decl_id":null,"docs":" Returns the third layer of the bitset as a slice. Each bit in this slice summarizes a\n corresponding `usize` from `layer1`. If `usize` is 64 bits, bit 0 will be set if any\n `Index`es 0-4095 are set, bit 1 will be set if any `Index`es 4096-8191 are set, etc.","sig":null,"attributes":[{"value":"/ Returns the third layer of the bitset as a slice. Each bit in this slice summarizes a","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11070,"byte_end":11159,"line_start":350,"line_end":350,"column_start":5,"column_end":94}},{"value":"/ corresponding `usize` from `layer1`. If `usize` is 64 bits, bit 0 will be set if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11164,"byte_end":11252,"line_start":351,"line_end":351,"column_start":5,"column_end":93}},{"value":"/ `Index`es 0-4095 are set, bit 1 will be set if any `Index`es 4096-8191 are set, etc.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11257,"byte_end":11345,"line_start":352,"line_end":352,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11350,"byte_end":11353,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ The slice's length is not guaranteed, except that it will be at least the length needed to","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11358,"byte_end":11452,"line_start":354,"line_end":354,"column_start":5,"column_end":99}},{"value":"/ reflect all the `1`s in the bitset.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11457,"byte_end":11496,"line_start":355,"line_end":355,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11501,"byte_end":11504,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11509,"byte_end":11522,"line_start":357,"line_end":357,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11527,"byte_end":11530,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11535,"byte_end":11542,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"/ use hibitset::BitSet;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11547,"byte_end":11572,"line_start":360,"line_end":360,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11577,"byte_end":11580,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ let index: u32 = 12345;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11585,"byte_end":11612,"line_start":362,"line_end":362,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11617,"byte_end":11620,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let mut bitset = BitSet::new();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11625,"byte_end":11660,"line_start":364,"line_end":364,"column_start":5,"column_end":40}},{"value":"/ bitset.add(index);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11665,"byte_end":11687,"line_start":365,"line_end":365,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11692,"byte_end":11695,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ // layer 2 summarizes multiple indexes per bit, so divide appropriately","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11700,"byte_end":11775,"line_start":367,"line_end":367,"column_start":5,"column_end":80}},{"value":"/ let slice = bitset.layer2_as_slice();","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11780,"byte_end":11821,"line_start":368,"line_end":368,"column_start":5,"column_end":46}},{"value":"/ let bit_index = index as usize / BitSet::LAYER2_GRANULARITY;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11826,"byte_end":11890,"line_start":369,"line_end":369,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11895,"byte_end":11898,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ // map that bit index to a usize in the slice and a bit within that usize","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11903,"byte_end":11980,"line_start":371,"line_end":371,"column_start":5,"column_end":82}},{"value":"/ let slice_index = bit_index / BitSet::BITS_PER_USIZE;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":11985,"byte_end":12042,"line_start":372,"line_end":372,"column_start":5,"column_end":62}},{"value":"/ let bit_at_index = bit_index % BitSet::BITS_PER_USIZE;","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12047,"byte_end":12105,"line_start":373,"line_end":373,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12110,"byte_end":12113,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(slice[slice_index], 1 << bit_at_index);","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12118,"byte_end":12172,"line_start":375,"line_end":375,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12177,"byte_end":12184,"line_start":376,"line_end":376,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":239},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12832,"byte_end":12842,"line_start":395,"line_end":395,"column_start":11,"column_end":21},"name":"BitSetLike","qualname":"::BitSetLike","value":"BitSetLike","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247}],"decl_id":null,"docs":" A generic interface for [`BitSetLike`]-like types.","sig":null,"attributes":[{"value":"/ A generic interface for [`BitSetLike`]-like types.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12273,"byte_end":12327,"line_start":382,"line_end":382,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12328,"byte_end":12331,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ Every `BitSetLike` is hierarchical, meaning that there","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12332,"byte_end":12390,"line_start":384,"line_end":384,"column_start":1,"column_end":59}},{"value":"/ are multiple levels that branch out in a tree like structure.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12391,"byte_end":12456,"line_start":385,"line_end":385,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12457,"byte_end":12460,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ Layer0 each bit represents one Index of the set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12461,"byte_end":12512,"line_start":387,"line_end":387,"column_start":1,"column_end":52}},{"value":"/ Layer1 each bit represents one `usize` of Layer0, and will be","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12513,"byte_end":12578,"line_start":388,"line_end":388,"column_start":1,"column_end":66}},{"value":"/ set only if the word below it is not zero.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12579,"byte_end":12625,"line_start":389,"line_end":389,"column_start":1,"column_end":47}},{"value":"/ Layer2 has the same arrangement but with Layer1, and Layer3 with Layer2.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12626,"byte_end":12702,"line_start":390,"line_end":390,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12703,"byte_end":12706,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ This arrangement allows for rapid jumps across the key-space.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12707,"byte_end":12772,"line_start":392,"line_end":392,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12773,"byte_end":12776,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ [`BitSetLike`]: ../trait.BitSetLike.html","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12777,"byte_end":12821,"line_start":394,"line_end":394,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12969,"byte_end":12983,"line_start":399,"line_end":399,"column_start":8,"column_end":22},"name":"get_from_layer","qualname":"::BitSetLike::get_from_layer","value":"fn (&self, layer: usize, idx: usize) -> usize","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Gets the `usize` corresponding to layer and index.","sig":null,"attributes":[{"value":"/ Gets the `usize` corresponding to layer and index.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12849,"byte_end":12903,"line_start":396,"line_end":396,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12908,"byte_end":12911,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ The `layer` should be in the range [0, 3]","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":12916,"byte_end":12961,"line_start":398,"line_end":398,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13345,"byte_end":13353,"line_start":410,"line_end":410,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::BitSetLike::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Returns true if this `BitSetLike` contains nothing, and false otherwise.\n","sig":null,"attributes":[{"value":"/ Returns true if this `BitSetLike` contains nothing, and false otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13261,"byte_end":13337,"line_start":409,"line_end":409,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13507,"byte_end":13513,"line_start":416,"line_end":416,"column_start":8,"column_end":14},"name":"layer3","qualname":"::BitSetLike::layer3","value":"fn (&self) -> usize","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Return a `usize` where each bit represents if any word in layer2\n has been set.\n","sig":null,"attributes":[{"value":"/ Return a `usize` where each bit represents if any word in layer2","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13409,"byte_end":13477,"line_start":414,"line_end":414,"column_start":5,"column_end":73}},{"value":"/ has been set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13482,"byte_end":13499,"line_start":415,"line_end":415,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13648,"byte_end":13654,"line_start":420,"line_end":420,"column_start":8,"column_end":14},"name":"layer2","qualname":"::BitSetLike::layer2","value":"fn (&self, i: usize) -> usize","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Return the `usize` from the array of usizes that indicates if any\n bit has been set in layer1\n","sig":null,"attributes":[{"value":"/ Return the `usize` from the array of usizes that indicates if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13536,"byte_end":13605,"line_start":418,"line_end":418,"column_start":5,"column_end":74}},{"value":"/ bit has been set in layer1","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13610,"byte_end":13640,"line_start":419,"line_end":419,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13799,"byte_end":13805,"line_start":424,"line_end":424,"column_start":8,"column_end":14},"name":"layer1","qualname":"::BitSetLike::layer1","value":"fn (&self, i: usize) -> usize","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Return the `usize` from the array of usizes that indicates if any\n bit has been set in layer0\n","sig":null,"attributes":[{"value":"/ Return the `usize` from the array of usizes that indicates if any","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13687,"byte_end":13756,"line_start":422,"line_end":422,"column_start":5,"column_end":74}},{"value":"/ bit has been set in layer0","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13761,"byte_end":13791,"line_start":423,"line_end":423,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13941,"byte_end":13947,"line_start":428,"line_end":428,"column_start":8,"column_end":14},"name":"layer0","qualname":"::BitSetLike::layer0","value":"fn (&self, i: usize) -> usize","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Return a `usize` that maps to the direct 1:1 association with\n each index of the set\n","sig":null,"attributes":[{"value":"/ Return a `usize` that maps to the direct 1:1 association with","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13838,"byte_end":13903,"line_start":426,"line_end":426,"column_start":5,"column_end":70}},{"value":"/ each index of the set","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13908,"byte_end":13933,"line_start":427,"line_end":427,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14047,"byte_end":14055,"line_start":431,"line_end":431,"column_start":8,"column_end":16},"name":"contains","qualname":"::BitSetLike::contains","value":"fn (&self, i: Index) -> bool","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Allows checking if set bit is contained in the bit set.\n","sig":null,"attributes":[{"value":"/ Allows checking if set bit is contained in the bit set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":13980,"byte_end":14039,"line_start":430,"line_end":430,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14150,"byte_end":14154,"line_start":434,"line_end":434,"column_start":8,"column_end":12},"name":"iter","qualname":"::BitSetLike::iter","value":"fn (self) -> BitIter<Self>","parent":{"krate":0,"index":239},"children":[],"decl_id":null,"docs":" Create an iterator that will scan over the keyspace\n","sig":null,"attributes":[{"value":"/ Create an iterator that will scan over the keyspace","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14087,"byte_end":14142,"line_start":433,"line_end":433,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":249},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14621,"byte_end":14636,"line_start":454,"line_end":454,"column_start":11,"column_end":26},"name":"DrainableBitSet","qualname":"::DrainableBitSet","value":"DrainableBitSet: BitSetLike","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"decl_id":null,"docs":" A extension to the [`BitSetLike`] trait which allows draining it.\n","sig":null,"attributes":[{"value":"/ A extension to the [`BitSetLike`] trait which allows draining it.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14541,"byte_end":14610,"line_start":453,"line_end":453,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14770,"byte_end":14776,"line_start":458,"line_end":458,"column_start":8,"column_end":14},"name":"remove","qualname":"::DrainableBitSet::remove","value":"fn (&mut self, i: Index) -> bool","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Removes bit from the bit set.","sig":null,"attributes":[{"value":"/ Removes bit from the bit set.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14655,"byte_end":14688,"line_start":455,"line_end":455,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14693,"byte_end":14696,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if removal happened and `false` otherwise.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14701,"byte_end":14762,"line_start":457,"line_end":457,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14913,"byte_end":14918,"line_start":461,"line_end":461,"column_start":8,"column_end":13},"name":"drain","qualname":"::DrainableBitSet::drain","value":"fn <'a> (&'a mut self) -> DrainBitIter<'a, Self>","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Create a draining iterator that will scan over the keyspace and clears it while doing so.\n","sig":null,"attributes":[{"value":"/ Create a draining iterator that will scan over the keyspace and clears it while doing so.","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14812,"byte_end":14905,"line_start":460,"line_end":460,"column_start":5,"column_end":98}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26432,"byte_end":26444,"line_start":36,"line_end":36,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":30509,"byte_end":30521,"line_start":153,"line_end":153,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":31221,"byte_end":31233,"line_start":181,"line_end":181,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":31344,"byte_end":31356,"line_start":188,"line_end":188,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":31853,"byte_end":31864,"line_start":209,"line_end":209,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":33403,"byte_end":33414,"line_start":261,"line_end":261,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41279,"byte_end":41291,"line_start":12,"line_end":12,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41704,"byte_end":41716,"line_start":24,"line_end":24,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37455,"byte_end":37462,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37864,"byte_end":37871,"line_start":37,"line_end":37,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":38042,"byte_end":38049,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":38693,"byte_end":38700,"line_start":66,"line_end":66,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":39203,"byte_end":39210,"line_start":88,"line_end":88,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":42448,"byte_end":42454,"line_start":9,"line_end":9,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":42953,"byte_end":42959,"line_start":25,"line_end":25,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":43975,"byte_end":43981,"line_start":55,"line_end":55,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45506,"byte_end":45515,"line_start":99,"line_end":99,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46116,"byte_end":46125,"line_start":122,"line_end":122,"column_start":66,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46701,"byte_end":46709,"line_start":143,"line_end":143,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47310,"byte_end":47318,"line_start":166,"line_end":166,"column_start":66,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47862,"byte_end":47871,"line_start":186,"line_end":186,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48617,"byte_end":48626,"line_start":217,"line_end":217,"column_start":51,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":49898,"byte_end":49907,"line_start":264,"line_end":264,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/util.rs","byte_start":63538,"byte_end":63543,"line_start":38,"line_end":38,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2583,"byte_end":2589,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":16328,"byte_end":16334,"line_start":541,"line_end":541,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":16871,"byte_end":16877,"line_start":568,"line_end":568,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":16990,"byte_end":16996,"line_start":575,"line_end":575,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":17794,"byte_end":17800,"line_start":607,"line_end":607,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":26432,"byte_end":26444,"line_start":36,"line_end":36,"column_start":6,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":30509,"byte_end":30521,"line_start":153,"line_end":153,"column_start":21,"column_end":33},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":288},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":31221,"byte_end":31233,"line_start":181,"line_end":181,"column_start":26,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":288},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":31344,"byte_end":31356,"line_start":188,"line_end":188,"column_start":18,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":288},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":31853,"byte_end":31864,"line_start":209,"line_end":209,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":41},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/atomic.rs","byte_start":33403,"byte_end":33414,"line_start":261,"line_end":261,"column_start":16,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":41},"to":{"krate":2,"index":5978}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41279,"byte_end":41291,"line_start":12,"line_end":12,"column_start":30,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":65},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/drain.rs","byte_start":41704,"byte_end":41716,"line_start":24,"line_end":24,"column_start":26,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":65},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37455,"byte_end":37462,"line_start":23,"line_end":23,"column_start":9,"column_end":16},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":37864,"byte_end":37871,"line_start":37,"line_end":37,"column_start":21,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":38042,"byte_end":38049,"line_start":44,"line_end":44,"column_start":10,"column_end":17},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":38693,"byte_end":38700,"line_start":66,"line_end":66,"column_start":22,"column_end":29},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":294},"to":{"krate":2,"index":4773}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/iter/mod.rs","byte_start":39203,"byte_end":39210,"line_start":88,"line_end":88,"column_start":21,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":42448,"byte_end":42454,"line_start":9,"line_end":9,"column_start":36,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":2035}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":42953,"byte_end":42959,"line_start":25,"line_end":25,"column_start":37,"column_end":43},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":2031}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":43975,"byte_end":43981,"line_start":55,"line_end":55,"column_start":37,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":45506,"byte_end":45515,"line_start":99,"line_end":99,"column_start":51,"column_end":60},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":319},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46116,"byte_end":46125,"line_start":122,"line_end":122,"column_start":66,"column_end":75},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":319},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":46701,"byte_end":46709,"line_start":143,"line_end":143,"column_start":51,"column_end":59},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":333},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47310,"byte_end":47318,"line_start":166,"line_end":166,"column_start":66,"column_end":74},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":333},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":47862,"byte_end":47871,"line_start":186,"line_end":186,"column_start":36,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":347},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":48617,"byte_end":48626,"line_start":217,"line_end":217,"column_start":51,"column_end":60},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":357},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/ops.rs","byte_start":49898,"byte_end":49907,"line_start":264,"line_end":264,"column_start":21,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":371},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/util.rs","byte_start":63188,"byte_end":63193,"line_start":24,"line_end":24,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":1888},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/util.rs","byte_start":63196,"byte_end":63200,"line_start":24,"line_end":24,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1893},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/util.rs","byte_start":63538,"byte_end":63543,"line_start":38,"line_end":38,"column_start":14,"column_end":19},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":192},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":2583,"byte_end":2589,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":14638,"byte_end":14648,"line_start":454,"line_end":454,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":239},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":16328,"byte_end":16334,"line_start":541,"line_end":541,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":776},"to":{"krate":0,"index":239}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":16871,"byte_end":16877,"line_start":568,"line_end":568,"column_start":26,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":776},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":16990,"byte_end":16996,"line_start":575,"line_end":575,"column_start":20,"column_end":26},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":1619}},{"span":{"file_name":"/home/dapx/.cargo/registry/src/github.com-1ecc6299db9ec823/hibitset-0.6.3/src/lib.rs","byte_start":17794,"byte_end":17800,"line_start":607,"line_end":607,"column_start":13,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":776},"to":{"krate":2,"index":1624}}]}